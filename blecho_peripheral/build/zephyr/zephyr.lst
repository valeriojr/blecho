
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 40 00 20 e1 2f 00 00 d7 a7 01 00 b5 2f 00 00     .@. ./......./..
  10:	b5 2f 00 00 b5 2f 00 00 b5 2f 00 00 00 00 00 00     ./.../.../......
	...
  2c:	bd 2c 00 00 b5 2f 00 00 00 00 00 00 69 2c 00 00     .,.../......i,..
  3c:	b5 2f 00 00                                         ./..

00000040 <_irq_vector_table>:
  40:	6d 2d 00 00 d9 26 01 00 6d 2d 00 00 6d 2d 00 00     m-...&..m-..m-..
  50:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  60:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  70:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  80:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  90:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  a0:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  b0:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  c0:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  d0:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  e0:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..
  f0:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 6d 2d 00 00     m-..m-..m-..m-..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x118>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1e>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x26>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x8a>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x110>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5a>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5a>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x114>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x86>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x86>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x8>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x108>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10c>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xfe>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xfe>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xfe>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5a>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x86>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x128>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x122>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x136>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_BT_HCI_TX_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_BT_HCI_TX_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     3da:	0000      	movs	r0, r0
     3dc:	0000      	movs	r0, r0
	...

000003e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     3e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3e2:	4d40      	ldr	r5, [pc, #256]	; (4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x70>)
     3e4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
     3e8:	6899      	ldr	r1, [r3, #8]
     3ea:	f011 0101 	ands.w	r1, r1, #1
     3ee:	d123      	bne.n	438 <CONFIG_BT_RX_STACK_SIZE+0x38>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     3f0:	aa01      	add	r2, sp, #4
     3f2:	f640 4003 	movw	r0, #3075	; 0xc03
     3f6:	f003 fb9d 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     3fa:	4604      	mov	r4, r0
     3fc:	2800      	cmp	r0, #0
     3fe:	d16e      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	uint8_t status = buf->data[0];
     400:	9b01      	ldr	r3, [sp, #4]
     402:	689b      	ldr	r3, [r3, #8]
	if (status) {
     404:	781b      	ldrb	r3, [r3, #0]
     406:	b9a3      	cbnz	r3, 432 <CONFIG_BT_RX_STACK_SIZE+0x32>
		bt_scan_reset();
     408:	f004 fc92 	bl	4d30 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     40c:	f3bf 8f5b 	dmb	ish
     410:	462b      	mov	r3, r5
     412:	f853 2fcc 	ldr.w	r2, [r3, #204]!
     416:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     41a:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     41e:	f3bf 8f5b 	dmb	ish
     422:	e853 1f00 	ldrex	r1, [r3]
     426:	e843 2000 	strex	r0, r2, [r3]
     42a:	2800      	cmp	r0, #0
     42c:	d1f9      	bne.n	422 <CONFIG_BT_RX_STACK_SIZE+0x22>
     42e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     432:	9801      	ldr	r0, [sp, #4]
     434:	f015 fc6e 	bl	15d14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     438:	aa01      	add	r2, sp, #4
     43a:	2100      	movs	r1, #0
     43c:	f241 0003 	movw	r0, #4099	; 0x1003
     440:	f003 fb78 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     444:	4604      	mov	r4, r0
     446:	2800      	cmp	r0, #0
     448:	d149      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
     44a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     44c:	4826      	ldr	r0, [pc, #152]	; (4e8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x74>)
     44e:	6899      	ldr	r1, [r3, #8]
     450:	2208      	movs	r2, #8
     452:	3101      	adds	r1, #1
     454:	f01a f9fd 	bl	1a852 <memcpy>
	net_buf_unref(rsp);
     458:	9801      	ldr	r0, [sp, #4]
     45a:	f015 fc5b 	bl	15d14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     45e:	4621      	mov	r1, r4
     460:	aa01      	add	r2, sp, #4
     462:	f241 0001 	movw	r0, #4097	; 0x1001
     466:	f003 fb65 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     46a:	4604      	mov	r4, r0
     46c:	2800      	cmp	r0, #0
     46e:	d136      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	read_local_ver_complete(rsp);
     470:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
     472:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     474:	785a      	ldrb	r2, [r3, #1]
     476:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     47a:	78d9      	ldrb	r1, [r3, #3]
     47c:	789a      	ldrb	r2, [r3, #2]
     47e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     482:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
     486:	791a      	ldrb	r2, [r3, #4]
     488:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     48c:	7a19      	ldrb	r1, [r3, #8]
     48e:	79da      	ldrb	r2, [r3, #7]
     490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     494:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     498:	795a      	ldrb	r2, [r3, #5]
     49a:	799b      	ldrb	r3, [r3, #6]
     49c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     4a0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
     4a4:	f015 fc36 	bl	15d14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     4a8:	4621      	mov	r1, r4
     4aa:	aa01      	add	r2, sp, #4
     4ac:	f241 0002 	movw	r0, #4098	; 0x1002
     4b0:	f003 fb40 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     4b4:	4604      	mov	r4, r0
     4b6:	b990      	cbnz	r0, 4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
     4b8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     4ba:	480c      	ldr	r0, [pc, #48]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0x78>)
     4bc:	6899      	ldr	r1, [r3, #8]
     4be:	2240      	movs	r2, #64	; 0x40
     4c0:	3101      	adds	r1, #1
     4c2:	f01a f9c6 	bl	1a852 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
     4c6:	4809      	ldr	r0, [pc, #36]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0x78>)
     4c8:	f01a fa40 	bl	1a94c <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
     4cc:	9801      	ldr	r0, [sp, #4]
     4ce:	f015 fc21 	bl	15d14 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4d2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
     4d6:	065a      	lsls	r2, r3, #25
     4d8:	d40a      	bmi.n	4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x7c>
		return -ENODEV;
     4da:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     4de:	4620      	mov	r0, r4
     4e0:	b002      	add	sp, #8
     4e2:	bd70      	pop	{r4, r5, r6, pc}
     4e4:	20000000 	.word	0x20000000
     4e8:	20000070 	.word	0x20000070
     4ec:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     4f0:	4621      	mov	r1, r4
     4f2:	aa01      	add	r2, sp, #4
     4f4:	f242 0003 	movw	r0, #8195	; 0x2003
     4f8:	f003 fb1c 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     4fc:	4604      	mov	r4, r0
     4fe:	2800      	cmp	r0, #0
     500:	d1ed      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
     502:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     504:	48b4      	ldr	r0, [pc, #720]	; (7d8 <CONFIG_BT_COMPANY_ID+0x1e7>)
     506:	6899      	ldr	r1, [r3, #8]
     508:	2208      	movs	r2, #8
     50a:	3101      	adds	r1, #1
     50c:	f01a f9a1 	bl	1a852 <memcpy>
	net_buf_unref(rsp);
     510:	9801      	ldr	r0, [sp, #4]
     512:	f015 fbff 	bl	15d14 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     516:	4621      	mov	r1, r4
     518:	aa01      	add	r2, sp, #4
     51a:	f242 0002 	movw	r0, #8194	; 0x2002
     51e:	f003 fb09 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     522:	4604      	mov	r4, r0
     524:	2800      	cmp	r0, #0
     526:	d1da      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
     528:	9b01      	ldr	r3, [sp, #4]
     52a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     52c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     530:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
     534:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     536:	b121      	cbz	r1, 542 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     538:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     53a:	48a8      	ldr	r0, [pc, #672]	; (7dc <CONFIG_BT_COMPANY_ID+0x1eb>)
     53c:	4611      	mov	r1, r2
     53e:	f01e f9c8 	bl	1e8d2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     542:	9801      	ldr	r0, [sp, #4]
     544:	f015 fbe6 	bl	15d14 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     548:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
     54c:	f016 0620 	ands.w	r6, r6, #32
     550:	f000 8119 	beq.w	786 <CONFIG_BT_COMPANY_ID+0x195>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     554:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
     558:	071b      	lsls	r3, r3, #28
     55a:	d512      	bpl.n	582 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     55c:	aa01      	add	r2, sp, #4
     55e:	2100      	movs	r1, #0
     560:	f242 001c 	movw	r0, #8220	; 0x201c
     564:	f003 fae6 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     568:	4604      	mov	r4, r0
     56a:	2800      	cmp	r0, #0
     56c:	d1b7      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
		le_read_supp_states_complete(rsp);
     56e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     570:	6883      	ldr	r3, [r0, #8]
     572:	f8d3 2001 	ldr.w	r2, [r3, #1]
     576:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     57a:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
     57e:	f015 fbc9 	bl	15d14 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     582:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
     586:	069e      	lsls	r6, r3, #26
     588:	d523      	bpl.n	5d2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x15e>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     58a:	f10d 0102 	add.w	r1, sp, #2
     58e:	4668      	mov	r0, sp
     590:	f01a fc51 	bl	1ae36 <hci_le_read_max_data_len>
		if (err) {
     594:	4604      	mov	r4, r0
     596:	2800      	cmp	r0, #0
     598:	d1a1      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     59a:	2104      	movs	r1, #4
     59c:	f242 0024 	movw	r0, #8228	; 0x2024
     5a0:	f003 fa6c 	bl	3a7c <bt_hci_cmd_create>
		if (!buf) {
     5a4:	4606      	mov	r6, r0
     5a6:	2800      	cmp	r0, #0
     5a8:	f000 80f4 	beq.w	794 <CONFIG_BT_COMPANY_ID+0x1a3>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
     5ac:	2104      	movs	r1, #4
     5ae:	3008      	adds	r0, #8
     5b0:	f01d fcab 	bl	1df0a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     5b4:	f8bd 3000 	ldrh.w	r3, [sp]
     5b8:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     5ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
     5be:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5c0:	4622      	mov	r2, r4
     5c2:	4631      	mov	r1, r6
     5c4:	f242 0024 	movw	r0, #8228	; 0x2024
     5c8:	f003 fab4 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     5cc:	4604      	mov	r4, r0
     5ce:	2800      	cmp	r0, #0
     5d0:	d185      	bne.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     5d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
     5d6:	065c      	lsls	r4, r3, #25
     5d8:	d510      	bpl.n	5fc <CONFIG_BT_COMPANY_ID+0xb>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     5da:	aa01      	add	r2, sp, #4
     5dc:	2100      	movs	r1, #0
     5de:	f242 002a 	movw	r0, #8234	; 0x202a
     5e2:	f003 faa7 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     5e6:	4604      	mov	r4, r0
     5e8:	2800      	cmp	r0, #0
     5ea:	f47f af78 	bne.w	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
		le_read_resolving_list_size_complete(rsp);
     5ee:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     5f0:	6883      	ldr	r3, [r0, #8]
     5f2:	785b      	ldrb	r3, [r3, #1]
     5f4:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
     5f8:	f015 fb8c 	bl	15d14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     5fc:	2108      	movs	r1, #8
     5fe:	f242 0001 	movw	r0, #8193	; 0x2001
     602:	f003 fa3b 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
     606:	4604      	mov	r4, r0
     608:	2800      	cmp	r0, #0
     60a:	f000 80c3 	beq.w	794 <CONFIG_BT_COMPANY_ID+0x1a3>
     60e:	2108      	movs	r1, #8
     610:	4408      	add	r0, r1
     612:	f01d fc7a 	bl	1df0a <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     616:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     61a:	f011 0f40 	tst.w	r1, #64	; 0x40
     61e:	4602      	mov	r2, r0
     620:	f240 2302 	movw	r3, #514	; 0x202
     624:	bf08      	it	eq
     626:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     628:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     62a:	bf4c      	ite	mi
     62c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     630:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     634:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     636:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     63a:	bf48      	it	mi
     63c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     640:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     644:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     648:	bf18      	it	ne
     64a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     64e:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     652:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     654:	bf48      	it	mi
     656:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     65a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     65c:	bf08      	it	eq
     65e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     662:	2100      	movs	r1, #0
     664:	f01a faca 	bl	1abfc <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     668:	4621      	mov	r1, r4
     66a:	2200      	movs	r2, #0
     66c:	f242 0001 	movw	r0, #8193	; 0x2001
     670:	f003 fa60 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     674:	4604      	mov	r4, r0
     676:	2800      	cmp	r0, #0
     678:	f47f af31 	bne.w	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     67c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
     680:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
     684:	0698      	lsls	r0, r3, #26
     686:	f100 809a 	bmi.w	7be <CONFIG_BT_COMPANY_ID+0x1cd>
	if (bt_dev.le.acl_mtu) {
     68a:	b9d9      	cbnz	r1, 6c4 <CONFIG_BT_COMPANY_ID+0xd3>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     68c:	aa01      	add	r2, sp, #4
     68e:	f241 0005 	movw	r0, #4101	; 0x1005
     692:	f003 fa4f 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     696:	4604      	mov	r4, r0
     698:	2800      	cmp	r0, #0
     69a:	f47f af20 	bne.w	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	if (bt_dev.le.acl_mtu) {
     69e:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
     6a2:	b963      	cbnz	r3, 6be <CONFIG_BT_COMPANY_ID+0xcd>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
     6a4:	9b01      	ldr	r3, [sp, #4]
     6a6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     6a8:	785a      	ldrb	r2, [r3, #1]
     6aa:	7899      	ldrb	r1, [r3, #2]
     6ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     6b0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     6b4:	889a      	ldrh	r2, [r3, #4]
     6b6:	4849      	ldr	r0, [pc, #292]	; (7dc <CONFIG_BT_COMPANY_ID+0x1eb>)
     6b8:	4611      	mov	r1, r2
     6ba:	f01e f90a 	bl	1e8d2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     6be:	9801      	ldr	r0, [sp, #4]
     6c0:	f015 fb28 	bl	15d14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     6c4:	2108      	movs	r1, #8
     6c6:	f640 4001 	movw	r0, #3073	; 0xc01
     6ca:	f003 f9d7 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
     6ce:	4604      	mov	r4, r0
     6d0:	2800      	cmp	r0, #0
     6d2:	d05f      	beq.n	794 <CONFIG_BT_COMPANY_ID+0x1a3>
     6d4:	2108      	movs	r1, #8
     6d6:	4408      	add	r0, r1
     6d8:	f01d fc17 	bl	1df0a <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     6dc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
     6e0:	07d9      	lsls	r1, r3, #31
     6e2:	4602      	mov	r2, r0
     6e4:	d570      	bpl.n	7c8 <CONFIG_BT_COMPANY_ID+0x1d7>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     6e6:	a13a      	add	r1, pc, #232	; (adr r1, 7d0 <CONFIG_BT_COMPANY_ID+0x1df>)
     6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     6ec:	f01a fa86 	bl	1abfc <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     6f0:	4621      	mov	r1, r4
     6f2:	2200      	movs	r2, #0
     6f4:	f640 4001 	movw	r0, #3073	; 0xc01
     6f8:	f003 fa1c 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     6fc:	4604      	mov	r4, r0
     6fe:	2800      	cmp	r0, #0
     700:	f47f aeed 	bne.w	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     704:	4601      	mov	r1, r0
     706:	aa01      	add	r2, sp, #4
     708:	f64f 4001 	movw	r0, #64513	; 0xfc01
     70c:	f003 fa12 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     710:	4604      	mov	r4, r0
     712:	bb48      	cbnz	r0, 768 <CONFIG_BT_COMPANY_ID+0x177>
	net_buf_unref(rsp);
     714:	9801      	ldr	r0, [sp, #4]
     716:	f015 fafd 	bl	15d14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     71a:	4621      	mov	r1, r4
     71c:	aa01      	add	r2, sp, #4
     71e:	f64f 4002 	movw	r0, #64514	; 0xfc02
     722:	f003 fa07 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
     726:	4604      	mov	r4, r0
     728:	b9f0      	cbnz	r0, 768 <CONFIG_BT_COMPANY_ID+0x177>
	rp.cmds = (void *)rsp->data;
     72a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     72c:	482c      	ldr	r0, [pc, #176]	; (7e0 <CONFIG_BT_COMPANY_ID+0x1ef>)
     72e:	6899      	ldr	r1, [r3, #8]
     730:	2202      	movs	r2, #2
     732:	3101      	adds	r1, #1
     734:	f01a f88d 	bl	1a852 <memcpy>
	net_buf_unref(rsp);
     738:	9801      	ldr	r0, [sp, #4]
     73a:	f015 faeb 	bl	15d14 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     73e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
     742:	075b      	lsls	r3, r3, #29
     744:	d510      	bpl.n	768 <CONFIG_BT_COMPANY_ID+0x177>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     746:	aa01      	add	r2, sp, #4
     748:	4621      	mov	r1, r4
     74a:	f64f 4003 	movw	r0, #64515	; 0xfc03
     74e:	f003 f9f1 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     752:	b948      	cbnz	r0, 768 <CONFIG_BT_COMPANY_ID+0x177>
		rp.feat = (void *)rsp->data;
     754:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
     756:	4823      	ldr	r0, [pc, #140]	; (7e4 <CONFIG_BT_COMPANY_ID+0x1f3>)
     758:	6899      	ldr	r1, [r3, #8]
     75a:	2201      	movs	r2, #1
     75c:	4411      	add	r1, r2
     75e:	f01a f878 	bl	1a852 <memcpy>
		net_buf_unref(rsp);
     762:	9801      	ldr	r0, [sp, #4]
     764:	f015 fad6 	bl	15d14 <net_buf_unref>
	err = bt_id_init();
     768:	f004 f80c 	bl	4784 <bt_id_init>
	if (err) {
     76c:	4604      	mov	r4, r0
     76e:	2800      	cmp	r0, #0
     770:	f47f aeb5 	bne.w	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
		err = bt_conn_init();
     774:	f005 f99e 	bl	5ab4 <bt_conn_init>
		if (err) {
     778:	4604      	mov	r4, r0
     77a:	2800      	cmp	r0, #0
     77c:	f47f aeaf 	bne.w	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	bt_finalize_init();
     780:	f003 fc50 	bl	4024 <bt_finalize_init>
	return 0;
     784:	e6ab      	b.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     786:	2102      	movs	r1, #2
     788:	f640 406d 	movw	r0, #3181	; 0xc6d
     78c:	f003 f976 	bl	3a7c <bt_hci_cmd_create>
		if (!buf) {
     790:	4604      	mov	r4, r0
     792:	b910      	cbnz	r0, 79a <CONFIG_BT_COMPANY_ID+0x1a9>
		return -ENOBUFS;
     794:	f06f 0468 	mvn.w	r4, #104	; 0x68
     798:	e6a1      	b.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
     79a:	2102      	movs	r1, #2
     79c:	3008      	adds	r0, #8
     79e:	f01d fbb4 	bl	1df0a <net_buf_simple_add>
		cp_le->le = 0x01;
     7a2:	2301      	movs	r3, #1
     7a4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     7a6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     7a8:	4621      	mov	r1, r4
     7aa:	4632      	mov	r2, r6
     7ac:	f640 406d 	movw	r0, #3181	; 0xc6d
     7b0:	f003 f9c0 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
     7b4:	4604      	mov	r4, r0
     7b6:	2800      	cmp	r0, #0
     7b8:	f43f aecc 	beq.w	554 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe0>
     7bc:	e68f      	b.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
	else if (!bt_dev.le.acl_mtu) {
     7be:	2900      	cmp	r1, #0
     7c0:	d180      	bne.n	6c4 <CONFIG_BT_COMPANY_ID+0xd3>
		return -EIO;
     7c2:	f06f 0404 	mvn.w	r4, #4
     7c6:	e68a      	b.n	4de <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     7c8:	4807      	ldr	r0, [pc, #28]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     7ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     7ce:	e78d      	b.n	6ec <CONFIG_BT_COMPANY_ID+0xfb>
     7d0:	02008890 	.word	0x02008890
     7d4:	20008000 	.word	0x20008000
     7d8:	200000d0 	.word	0x200000d0
     7dc:	20000100 	.word	0x20000100
     7e0:	200000b9 	.word	0x200000b9
     7e4:	200000b8 	.word	0x200000b8
     7e8:	02008810 	.word	0x02008810
     7ec:	00000000 	.word	0x00000000

000007f0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     7f4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     7f8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     7fa:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     7fc:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     7fe:	42a6      	cmp	r6, r4
{
     800:	4688      	mov	r8, r1
     802:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     804:	d818      	bhi.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     806:	4d1c      	ldr	r5, [pc, #112]	; (878 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x78>)
     808:	fba3 0105 	umull	r0, r1, r3, r5
     80c:	a318      	add	r3, pc, #96	; (adr r3, 870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>)
     80e:	e9d3 2300 	ldrd	r2, r3, [r3]
     812:	f7ff fc75 	bl	100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     816:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     818:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     81c:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     820:	a313      	add	r3, pc, #76	; (adr r3, 870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>)
     822:	e9d3 2300 	ldrd	r2, r3, [r3]
     826:	fba4 0105 	umull	r0, r1, r4, r5
     82a:	f7ff fc69 	bl	100 <__aeabi_uldivmod>
     82e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     832:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     838:	4c0f      	ldr	r4, [pc, #60]	; (878 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x78>)
     83a:	a30d      	add	r3, pc, #52	; (adr r3, 870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>)
     83c:	e9d3 2300 	ldrd	r2, r3, [r3]
     840:	fba6 0104 	umull	r0, r1, r6, r4
     844:	f7ff fc5c 	bl	100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     848:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     84c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     850:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     854:	a306      	add	r3, pc, #24	; (adr r3, 870 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70>)
     856:	e9d3 2300 	ldrd	r2, r3, [r3]
     85a:	fba1 0104 	umull	r0, r1, r1, r4
     85e:	f7ff fc4f 	bl	100 <__aeabi_uldivmod>
     862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     866:	6038      	str	r0, [r7, #0]
}
     868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     86c:	f3af 8000 	nop.w
     870:	1afd498d 	.word	0x1afd498d
     874:	00000007 	.word	0x00000007
     878:	3b9aca00 	.word	0x3b9aca00
     87c:	00000000 	.word	0x00000000

00000880 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
     884:	4ca5      	ldr	r4, [pc, #660]	; (b1c <__data_size+0x113>)
{
     886:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
     888:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	if (!enable) {
     88c:	2800      	cmp	r0, #0
     88e:	f000 812e 	beq.w	aee <__data_size+0xe5>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     892:	f013 0701 	ands.w	r7, r3, #1
     896:	f040 81ab 	bne.w	bf0 <__data_size+0x1e7>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     89a:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     89e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     8a2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     8a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     8aa:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     8ae:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     8b2:	f1b8 0f00 	cmp.w	r8, #0
     8b6:	d022      	beq.n	8fe <ll_adv_enable+0x7e>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
     8b8:	4645      	mov	r5, r8
     8ba:	f815 0b02 	ldrb.w	r0, [r5], #2
     8be:	f3c0 1080 	ubfx	r0, r0, #6, #1
     8c2:	f009 fcd7 	bl	a274 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     8c6:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     8c8:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     8ca:	4628      	mov	r0, r5
     8cc:	f019 ffc1 	bl	1a852 <memcpy>
		if (pdu_adv_to_update->tx_addr &&
     8d0:	f898 3000 	ldrb.w	r3, [r8]
     8d4:	065a      	lsls	r2, r3, #25
     8d6:	d506      	bpl.n	8e6 <ll_adv_enable+0x66>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     8d8:	4628      	mov	r0, r5
     8da:	2106      	movs	r1, #6
     8dc:	f008 fa04 	bl	8ce8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     8e0:	2800      	cmp	r0, #0
     8e2:	f000 81c1 	beq.w	c68 <__data_size+0x25f>
			own_id_addr = ll_addr_get(pdu->tx_addr);
     8e6:	464d      	mov	r5, r9
     8e8:	f815 0b02 	ldrb.w	r0, [r5], #2
     8ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
     8f0:	f009 fcc0 	bl	a274 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     8f4:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
     8f6:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
     8f8:	4628      	mov	r0, r5
     8fa:	f019 ffaa 	bl	1a852 <memcpy>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     8fe:	f898 3000 	ldrb.w	r3, [r8]
     902:	f013 0f0e 	tst.w	r3, #14
     906:	f040 80df 	bne.w	ac8 <__data_size+0xbf>
		if (lll->conn) {
     90a:	6a23      	ldr	r3, [r4, #32]
     90c:	b123      	cbz	r3, 918 <ll_adv_enable+0x98>
	return BT_HCI_ERR_CMD_DISALLOWED;
     90e:	270c      	movs	r7, #12
}
     910:	4638      	mov	r0, r7
     912:	b00f      	add	sp, #60	; 0x3c
     914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     918:	f00b fd6e 	bl	c3f8 <ll_rx_link_alloc>
		if (!link) {
     91c:	4682      	mov	sl, r0
     91e:	2800      	cmp	r0, #0
     920:	f000 81ac 	beq.w	c7c <__data_size+0x273>
		node_rx = ll_rx_alloc();
     924:	f00b fd74 	bl	c410 <ll_rx_alloc>
		if (!node_rx) {
     928:	4683      	mov	fp, r0
     92a:	2800      	cmp	r0, #0
     92c:	f000 81ab 	beq.w	c86 <__data_size+0x27d>
		conn = ll_conn_acquire();
     930:	f00d fe0e 	bl	e550 <ll_conn_acquire>
		if (!conn) {
     934:	4605      	mov	r5, r0
     936:	2800      	cmp	r0, #0
     938:	f000 81a2 	beq.w	c80 <__data_size+0x277>
		if (!conn_lll->link_tx_free) {
     93c:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
     93e:	f64f 73ff 	movw	r3, #65535	; 0xffff
     942:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     944:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
     948:	2800      	cmp	r0, #0
     94a:	f000 8193 	beq.w	c74 <__data_size+0x26b>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     94e:	f105 0268 	add.w	r2, r5, #104	; 0x68
     952:	f105 0164 	add.w	r1, r5, #100	; 0x64
     956:	930b      	str	r3, [sp, #44]	; 0x2c
     958:	f008 f9d2 	bl	8d00 <memq_init>
			conn_lll->phy_tx = PHY_1M;
     95c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     960:	4b6f      	ldr	r3, [pc, #444]	; (b20 <__data_size+0x117>)
			conn_lll->phy_tx = PHY_1M;
     962:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     966:	f022 0207 	bic.w	r2, r2, #7
     96a:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     96e:	f042 0201 	orr.w	r2, r2, #1
     972:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
     976:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
     97a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     97e:	f062 027f 	orn	r2, r2, #127	; 0x7f
     982:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     986:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
     98a:	f022 0207 	bic.w	r2, r2, #7
     98e:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
     992:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
     996:	f022 0207 	bic.w	r2, r2, #7
     99a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
     99e:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
     9a2:	f022 0207 	bic.w	r2, r2, #7
     9a6:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     9aa:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
     9ae:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     9b0:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
     9b4:	2206      	movs	r2, #6
     9b6:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
     9ba:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     9be:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
     9c0:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
     9c4:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
     9c6:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     9c8:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     9cc:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     9ce:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
     9d2:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
     9d6:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
     9da:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     9de:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
     9e2:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
     9e6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     9ea:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     9ee:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
     9f2:	f00b f843 	bl	ba7c <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     9f6:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     9fa:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     9fe:	f022 0203 	bic.w	r2, r2, #3
     a02:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     a06:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     a0a:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     a0e:	f022 0218 	bic.w	r2, r2, #24
     a12:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     a16:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
     a1a:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     a1e:	f022 0207 	bic.w	r2, r2, #7
     a22:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
     a26:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
     a2a:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
     a2e:	f366 1245 	bfi	r2, r6, #5, #1
     a32:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
     a36:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     a3a:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
     a3e:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
     a42:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
     a46:	2100      	movs	r1, #0
     a48:	2000      	movs	r0, #0
     a4a:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
     a4e:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
     a52:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
     a56:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
     a5a:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     a5e:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
     a62:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     a66:	f00e f8b9 	bl	ebdc <ull_conn_default_tx_octets_get>
     a6a:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
     a6e:	f00e f8bb 	bl	ebe8 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     a72:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
     a76:	4a2b      	ldr	r2, [pc, #172]	; (b24 <__data_size+0x11b>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     a78:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     a7c:	400a      	ands	r2, r1
     a7e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     a82:	f00e f8b7 	bl	ebf4 <ull_conn_default_phy_tx_get>
     a86:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
     a8a:	f360 0202 	bfi	r2, r0, #0, #3
     a8e:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     a92:	f00e f8b5 	bl	ec00 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
     a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a98:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     a9a:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     a9e:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     aa2:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
     aa6:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
     aaa:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     aae:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     ab2:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
     ab6:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     ab8:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     aba:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
     abe:	f012 fbaf 	bl	13220 <lll_clock_wait>
		if (err) {
     ac2:	2800      	cmp	r0, #0
     ac4:	f040 80d2 	bne.w	c6c <__data_size+0x263>
	uint8_t ch_map = lll->chan_map;
     ac8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     acc:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     ace:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     ad2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     ad6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     ada:	f008 fa91 	bl	9000 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     ade:	bb18      	cbnz	r0, b28 <__data_size+0x11f>
	if (adv->lll.conn) {
     ae0:	6a23      	ldr	r3, [r4, #32]
     ae2:	2b00      	cmp	r3, #0
     ae4:	f43f af13 	beq.w	90e <ll_adv_enable+0x8e>
		conn_release(adv);
     ae8:	f00c fa9a 	bl	d020 <conn_release.constprop.0>
     aec:	e70f      	b.n	90e <ll_adv_enable+0x8e>
	if (!adv || !adv->is_enabled) {
     aee:	f013 0701 	ands.w	r7, r3, #1
     af2:	f43f af0d 	beq.w	910 <ll_adv_enable+0x90>
	if (adv->lll.conn) {
     af6:	6a23      	ldr	r3, [r4, #32]
     af8:	b15b      	cbz	r3, b12 <__data_size+0x109>
		adv->lll.conn->periph.cancelled = 1U;
     afa:	f893 2020 	ldrb.w	r2, [r3, #32]
     afe:	f042 0202 	orr.w	r2, r2, #2
     b02:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
     b06:	6a23      	ldr	r3, [r4, #32]
     b08:	f893 3020 	ldrb.w	r3, [r3, #32]
     b0c:	07d9      	lsls	r1, r3, #31
     b0e:	f53f aefe 	bmi.w	90e <ll_adv_enable+0x8e>
}
     b12:	b00f      	add	sp, #60	; 0x3c
     b14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b18:	f00c bac4 	b.w	d0a4 <disable.part.0>
     b1c:	20002104 	.word	0x20002104
     b20:	01480148 	.word	0x01480148
     b24:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     b28:	f899 1001 	ldrb.w	r1, [r9, #1]
     b2c:	4602      	mov	r2, r0
     b2e:	4640      	mov	r0, r8
     b30:	f00c fb5c 	bl	d1ec <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     b34:	4958      	ldr	r1, [pc, #352]	; (c98 <__data_size+0x28f>)
	uint16_t interval = adv->interval;
     b36:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
     b3a:	2331      	movs	r3, #49	; 0x31
     b3c:	2500      	movs	r5, #0
     b3e:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     b40:	fba0 0101 	umull	r0, r1, r0, r1
     b44:	a352      	add	r3, pc, #328	; (adr r3, c90 <__data_size+0x287>)
     b46:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     b4a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
     b4e:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
     b50:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
     b52:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     b54:	f7ff fad4 	bl	100 <__aeabi_uldivmod>
     b58:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
     b5a:	f009 fb61 	bl	a220 <ticker_ticks_now_get>
     b5e:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     b60:	f1b9 0f00 	cmp.w	r9, #0
     b64:	d108      	bne.n	b78 <__data_size+0x16f>
     b66:	f898 5000 	ldrb.w	r5, [r8]
     b6a:	f005 050f 	and.w	r5, r5, #15
     b6e:	f1a5 0501 	sub.w	r5, r5, #1
     b72:	fab5 f585 	clz	r5, r5
     b76:	096d      	lsrs	r5, r5, #5
     b78:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     b7c:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     b7e:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     b82:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     b86:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
     b8a:	d036      	beq.n	bfa <__data_size+0x1f1>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b8c:	2000      	movs	r0, #0
     b8e:	4a43      	ldr	r2, [pc, #268]	; (c9c <__data_size+0x293>)
     b90:	f8df 910c 	ldr.w	r9, [pc, #268]	; ca0 <__data_size+0x297>
     b94:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
     b96:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b98:	f10d 0834 	add.w	r8, sp, #52	; 0x34
     b9c:	9301      	str	r3, [sp, #4]
     b9e:	9205      	str	r2, [sp, #20]
     ba0:	2103      	movs	r1, #3
     ba2:	e9cd 0002 	strd	r0, r0, [sp, #8]
     ba6:	9406      	str	r4, [sp, #24]
     ba8:	4633      	mov	r3, r6
     baa:	9000      	str	r0, [sp, #0]
     bac:	f8cd 8020 	str.w	r8, [sp, #32]
     bb0:	f8cd 901c 	str.w	r9, [sp, #28]
     bb4:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
     bb6:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     bb8:	f009 fa66 	bl	a088 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     bbc:	4641      	mov	r1, r8
     bbe:	f00b fcad 	bl	c51c <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     bc2:	2800      	cmp	r0, #0
     bc4:	d18c      	bne.n	ae0 <__data_size+0xd7>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     bc6:	4a37      	ldr	r2, [pc, #220]	; (ca4 <__data_size+0x29b>)
     bc8:	9205      	str	r2, [sp, #20]
     bca:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     bce:	9200      	str	r2, [sp, #0]
     bd0:	e9cd 0003 	strd	r0, r0, [sp, #12]
     bd4:	e9cd 0001 	strd	r0, r0, [sp, #4]
     bd8:	f8cd 901c 	str.w	r9, [sp, #28]
     bdc:	f8cd 8020 	str.w	r8, [sp, #32]
     be0:	9406      	str	r4, [sp, #24]
     be2:	4633      	mov	r3, r6
     be4:	2201      	movs	r2, #1
     be6:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     be8:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     bea:	f009 fa4d 	bl	a088 <ticker_start>
     bee:	e02e      	b.n	c4e <__data_size+0x245>
			return 0;
     bf0:	2700      	movs	r7, #0
}
     bf2:	4638      	mov	r0, r7
     bf4:	b00f      	add	sp, #60	; 0x3c
     bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
     bfa:	4a2b      	ldr	r2, [pc, #172]	; (ca8 <__data_size+0x29f>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     bfc:	482b      	ldr	r0, [pc, #172]	; (cac <__data_size+0x2a3>)
		ret = ticker_start_ext(
     bfe:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     c00:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     c04:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
     c08:	9406      	str	r4, [sp, #24]
     c0a:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     c0c:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     c0e:	2391      	movs	r3, #145	; 0x91
     c10:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
     c14:	4b22      	ldr	r3, [pc, #136]	; (ca0 <__data_size+0x297>)
     c16:	9307      	str	r3, [sp, #28]
     c18:	4b20      	ldr	r3, [pc, #128]	; (c9c <__data_size+0x293>)
     c1a:	9305      	str	r3, [sp, #20]
     c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     c20:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
     c22:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     c26:	9303      	str	r3, [sp, #12]
     c28:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     c2c:	a318      	add	r3, pc, #96	; (adr r3, c90 <__data_size+0x287>)
     c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
     c32:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
     c36:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     c3a:	f7ff fa61 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     c3e:	4633      	mov	r3, r6
     c40:	e9cd 5000 	strd	r5, r0, [sp]
     c44:	464a      	mov	r2, r9
     c46:	4628      	mov	r0, r5
     c48:	2103      	movs	r1, #3
     c4a:	f009 f9c7 	bl	9fdc <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     c4e:	4641      	mov	r1, r8
     c50:	f00b fc64 	bl	c51c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     c54:	2800      	cmp	r0, #0
     c56:	f47f af43 	bne.w	ae0 <__data_size+0xd7>
	adv->is_enabled = 1;
     c5a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     c5e:	f043 0301 	orr.w	r3, r3, #1
     c62:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
     c66:	e653      	b.n	910 <ll_adv_enable+0x90>
			return BT_HCI_ERR_INVALID_PARAM;
     c68:	2712      	movs	r7, #18
     c6a:	e651      	b.n	910 <ll_adv_enable+0x90>
			conn_release(adv);
     c6c:	f00c f9d8 	bl	d020 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     c70:	2703      	movs	r7, #3
     c72:	e64d      	b.n	910 <ll_adv_enable+0x90>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     c74:	f105 006c 	add.w	r0, r5, #108	; 0x6c
     c78:	6768      	str	r0, [r5, #116]	; 0x74
     c7a:	e668      	b.n	94e <ll_adv_enable+0xce>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     c7c:	2707      	movs	r7, #7
     c7e:	e647      	b.n	910 <ll_adv_enable+0x90>
			ll_rx_release(node_rx);
     c80:	4658      	mov	r0, fp
     c82:	f00b fbcb 	bl	c41c <ll_rx_release>
			ll_rx_link_release(link);
     c86:	4650      	mov	r0, sl
     c88:	f00b fbbc 	bl	c404 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     c8c:	2707      	movs	r7, #7
     c8e:	e63f      	b.n	910 <ll_adv_enable+0x90>
     c90:	1afd498d 	.word	0x1afd498d
     c94:	00000007 	.word	0x00000007
     c98:	3b9aca00 	.word	0x3b9aca00
     c9c:	0000d25d 	.word	0x0000d25d
     ca0:	0000bb49 	.word	0x0000bb49
     ca4:	0000cdc5 	.word	0x0000cdc5
     ca8:	20002170 	.word	0x20002170
     cac:	84e72a00 	.word	0x84e72a00

00000cb0 <ull_adv_time_update>:
{
     cb0:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     cb2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     cb6:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     cb8:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
     cbc:	460d      	mov	r5, r1
     cbe:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     cc0:	2101      	movs	r1, #1
     cc2:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
     cc6:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
     cc8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     ccc:	f008 f998 	bl	9000 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     cd0:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     cd2:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     cd4:	4628      	mov	r0, r5
     cd6:	f00c fa89 	bl	d1ec <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     cda:	491f      	ldr	r1, [pc, #124]	; (d58 <ull_adv_time_update+0xa8>)
     cdc:	a31c      	add	r3, pc, #112	; (adr r3, d50 <ull_adv_time_update+0xa0>)
     cde:	e9d3 2300 	ldrd	r2, r3, [r3]
     ce2:	fba0 0101 	umull	r0, r1, r0, r1
     ce6:	f7ff fa0b 	bl	100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
     cea:	6923      	ldr	r3, [r4, #16]
     cec:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     cee:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
     cf0:	d221      	bcs.n	d36 <ull_adv_time_update+0x86>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
     cf2:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
     cf4:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     cf6:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     cf8:	4a18      	ldr	r2, [pc, #96]	; (d5c <ull_adv_time_update+0xac>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     cfa:	9302      	str	r3, [sp, #8]
	ret_cb = TICKER_STATUS_BUSY;
     cfc:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     cfe:	4b18      	ldr	r3, [pc, #96]	; (d60 <ull_adv_time_update+0xb0>)
	ret_cb = TICKER_STATUS_BUSY;
     d00:	9109      	str	r1, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     d02:	1aa2      	subs	r2, r4, r2
     d04:	40ca      	lsrs	r2, r1
     d06:	fba3 3202 	umull	r3, r2, r3, r2
     d0a:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     d0c:	2300      	movs	r3, #0
     d0e:	440a      	add	r2, r1
     d10:	ae09      	add	r6, sp, #36	; 0x24
     d12:	4914      	ldr	r1, [pc, #80]	; (d64 <ull_adv_time_update+0xb4>)
     d14:	9105      	str	r1, [sp, #20]
     d16:	e9cd 3303 	strd	r3, r3, [sp, #12]
     d1a:	2103      	movs	r1, #3
     d1c:	b2d2      	uxtb	r2, r2
     d1e:	9606      	str	r6, [sp, #24]
     d20:	9300      	str	r3, [sp, #0]
     d22:	4618      	mov	r0, r3
     d24:	f009 fa22 	bl	a16c <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
     d28:	4631      	mov	r1, r6
     d2a:	f00b fbf7 	bl	c51c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     d2e:	b948      	cbnz	r0, d44 <ull_adv_time_update+0x94>
	adv->ull.ticks_slot = time_ticks;
     d30:	6125      	str	r5, [r4, #16]
}
     d32:	b00a      	add	sp, #40	; 0x28
     d34:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
     d36:	d902      	bls.n	d3e <ull_adv_time_update+0x8e>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
     d38:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
     d3a:	2300      	movs	r3, #0
     d3c:	e7db      	b.n	cf6 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
     d3e:	2000      	movs	r0, #0
}
     d40:	b00a      	add	sp, #40	; 0x28
     d42:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     d44:	200c      	movs	r0, #12
}
     d46:	b00a      	add	sp, #40	; 0x28
     d48:	bd70      	pop	{r4, r5, r6, pc}
     d4a:	bf00      	nop
     d4c:	f3af 8000 	nop.w
     d50:	1afd498d 	.word	0x1afd498d
     d54:	00000007 	.word	0x00000007
     d58:	3b9aca00 	.word	0x3b9aca00
     d5c:	20002104 	.word	0x20002104
     d60:	4bda12f7 	.word	0x4bda12f7
     d64:	0000bb49 	.word	0x0000bb49

00000d68 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
     d68:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     d6a:	4c19      	ldr	r4, [pc, #100]	; (dd0 <ll_scan_params_set+0x68>)
{
     d6c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
     d70:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
     d74:	f01c 0501 	ands.w	r5, ip, #1
     d78:	d122      	bne.n	dc0 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
     d7a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
     d7e:	0140      	lsls	r0, r0, #5
     d80:	f894 3020 	ldrb.w	r3, [r4, #32]
	lll->interval = interval;
     d84:	8521      	strh	r1, [r4, #40]	; 0x28
	lll->filter_policy = filter_policy;
     d86:	ea4f 0ece 	mov.w	lr, lr, lsl #3
     d8a:	f00e 0e18 	and.w	lr, lr, #24
     d8e:	f000 0020 	and.w	r0, r0, #32
     d92:	ea40 000e 	orr.w	r0, r0, lr
     d96:	f023 0338 	bic.w	r3, r3, #56	; 0x38
     d9a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     d9c:	480d      	ldr	r0, [pc, #52]	; (dd4 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
     d9e:	f884 3020 	strb.w	r3, [r4, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     da2:	fba2 0100 	umull	r0, r1, r2, r0
     da6:	2391      	movs	r3, #145	; 0x91
     da8:	fb03 1102 	mla	r1, r3, r2, r1
     dac:	a306      	add	r3, pc, #24	; (adr r3, dc8 <ll_scan_params_set+0x60>)
     dae:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
     db2:	f884 c030 	strb.w	ip, [r4, #48]	; 0x30
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     db6:	f7ff f9a3 	bl	100 <__aeabi_uldivmod>
     dba:	62e0      	str	r0, [r4, #44]	; 0x2c
}
     dbc:	4628      	mov	r0, r5
     dbe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     dc0:	250c      	movs	r5, #12
}
     dc2:	4628      	mov	r0, r5
     dc4:	bd38      	pop	{r3, r4, r5, pc}
     dc6:	bf00      	nop
     dc8:	1afd498d 	.word	0x1afd498d
     dcc:	00000007 	.word	0x00000007
     dd0:	20002194 	.word	0x20002194
     dd4:	84e72a00 	.word	0x84e72a00

00000dd8 <ull_scan_enable>:
{
     dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ddc:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
     dde:	f100 0121 	add.w	r1, r0, #33	; 0x21
	lll->init_addr_type = scan->own_addr_type;
     de2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     de6:	f894 3020 	ldrb.w	r3, [r4, #32]
     dea:	f3c0 0040 	ubfx	r0, r0, #1, #1
     dee:	f360 1386 	bfi	r3, r0, #6, #1
{
     df2:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
     df4:	f884 3020 	strb.w	r3, [r4, #32]
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
     df8:	f009 fa4c 	bl	a294 <ll_addr_read>
	lll->chan = 0U;
     dfc:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     e00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e02:	4839      	ldr	r0, [pc, #228]	; (ee8 <ull_scan_enable+0x110>)
     e04:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
     e06:	f002 0279 	and.w	r2, r2, #121	; 0x79
     e0a:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     e0c:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
     e10:	f884 2020 	strb.w	r2, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     e14:	2291      	movs	r2, #145	; 0x91
	hdr->disabled_cb = hdr->disabled_param = NULL;
     e16:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
     e1a:	7025      	strb	r5, [r4, #0]
     e1c:	fb02 1103 	mla	r1, r2, r3, r1
     e20:	a32f      	add	r3, pc, #188	; (adr r3, ee0 <ull_scan_enable+0x108>)
     e22:	e9d3 2300 	ldrd	r2, r3, [r3]
     e26:	f7ff f96b 	bl	100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
     e2a:	2331      	movs	r3, #49	; 0x31
     e2c:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
     e30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	scan->ull.ticks_preempt_to_start =
     e32:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
     e34:	3309      	adds	r3, #9
	    (ticks_interval -
     e36:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     e3a:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
     e3c:	bf32      	itee	cc
     e3e:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
     e40:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
     e42:	62e5      	strcs	r5, [r4, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     e44:	4d29      	ldr	r5, [pc, #164]	; (eec <ull_scan_enable+0x114>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     e46:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     e48:	f009 f9ea 	bl	a220 <ticker_ticks_now_get>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     e4c:	4b28      	ldr	r3, [pc, #160]	; (ef0 <ull_scan_enable+0x118>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e4e:	9406      	str	r4, [sp, #24]
     e50:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     e54:	1b65      	subs	r5, r4, r5
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e56:	f8cd 8020 	str.w	r8, [sp, #32]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     e5a:	fba3 3505 	umull	r3, r5, r3, r5
	ret_cb = TICKER_STATUS_BUSY;
     e5e:	2302      	movs	r3, #2
     e60:	930b      	str	r3, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     e62:	4a21      	ldr	r2, [pc, #132]	; (ee8 <ull_scan_enable+0x110>)
     e64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e66:	f04f 0900 	mov.w	r9, #0
	ticks_anchor = ticker_ticks_now_get();
     e6a:	4607      	mov	r7, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e6c:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     e70:	fba3 0202 	umull	r0, r2, r3, r2
     e74:	2191      	movs	r1, #145	; 0x91
     e76:	fb01 2103 	mla	r1, r1, r3, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e7a:	6923      	ldr	r3, [r4, #16]
     e7c:	9304      	str	r3, [sp, #16]
     e7e:	4b1d      	ldr	r3, [pc, #116]	; (ef4 <ull_scan_enable+0x11c>)
     e80:	9307      	str	r3, [sp, #28]
     e82:	4b1d      	ldr	r3, [pc, #116]	; (ef8 <ull_scan_enable+0x120>)
     e84:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     e86:	a316      	add	r3, pc, #88	; (adr r3, ee0 <ull_scan_enable+0x108>)
     e88:	e9d3 2300 	ldrd	r2, r3, [r3]
     e8c:	f7ff f938 	bl	100 <__aeabi_uldivmod>
     e90:	4610      	mov	r0, r2
     e92:	4619      	mov	r1, r3
     e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e98:	2300      	movs	r3, #0
     e9a:	f7ff f931 	bl	100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     e9e:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ea0:	3504      	adds	r5, #4
     ea2:	b2ed      	uxtb	r5, r5
     ea4:	e9cd 6001 	strd	r6, r0, [sp, #4]
     ea8:	2103      	movs	r1, #3
     eaa:	463b      	mov	r3, r7
     eac:	462a      	mov	r2, r5
     eae:	f8cd 9000 	str.w	r9, [sp]
     eb2:	4648      	mov	r0, r9
     eb4:	f009 f8e8 	bl	a088 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     eb8:	4641      	mov	r1, r8
     eba:	f00b fb2f 	bl	c51c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     ebe:	b940      	cbnz	r0, ed2 <ull_scan_enable+0xfa>
	scan->is_enabled = 1U;
     ec0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     ec4:	f043 0301 	orr.w	r3, r3, #1
     ec8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     ecc:	b00d      	add	sp, #52	; 0x34
     ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     ed2:	200c      	movs	r0, #12
}
     ed4:	b00d      	add	sp, #52	; 0x34
     ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     eda:	bf00      	nop
     edc:	f3af 8000 	nop.w
     ee0:	1afd498d 	.word	0x1afd498d
     ee4:	00000007 	.word	0x00000007
     ee8:	84e72a00 	.word	0x84e72a00
     eec:	20002194 	.word	0x20002194
     ef0:	4ec4ec4f 	.word	0x4ec4ec4f
     ef4:	0000bb49 	.word	0x0000bb49
     ef8:	0000d789 	.word	0x0000d789
     efc:	00000000 	.word	0x00000000

00000f00 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
     f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f04:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
     f06:	8e46      	ldrh	r6, [r0, #50]	; 0x32
     f08:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f0a:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f0e:	b2b6      	uxth	r6, r6
     f10:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f12:	f013 0307 	ands.w	r3, r3, #7
{
     f16:	b08b      	sub	sp, #44	; 0x2c
     f18:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     f1a:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     f1e:	f040 818b 	bne.w	1238 <event_conn_upd_prep+0x338>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     f22:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
     f26:	eba9 0107 	sub.w	r1, r9, r7
     f2a:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     f2e:	0409      	lsls	r1, r1, #16
     f30:	f100 81f6 	bmi.w	1320 <event_conn_upd_prep+0x420>
     f34:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
     f36:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
     f3a:	2a00      	cmp	r2, #0
     f3c:	f2c0 8145 	blt.w	11ca <event_conn_upd_prep+0x2ca>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
     f40:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
     f44:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     f48:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
     f4c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
     f50:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
     f54:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     f58:	4293      	cmp	r3, r2
     f5a:	d006      	beq.n	f6a <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     f5c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     f60:	f003 030f 	and.w	r3, r3, #15
     f64:	2b06      	cmp	r3, #6
     f66:	f000 8231 	beq.w	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
	return conn_upd_curr && (conn_upd_curr != conn);
}

static inline void cpr_active_check_and_reset(struct ll_conn *conn)
{
	if (conn == conn_upd_curr) {
     f6a:	4ba5      	ldr	r3, [pc, #660]	; (1200 <event_conn_upd_prep+0x300>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     f6c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
     f70:	681a      	ldr	r2, [r3, #0]
     f72:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
     f74:	bf04      	itt	eq
     f76:	2200      	moveq	r2, #0
     f78:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     f7a:	2d00      	cmp	r5, #0
     f7c:	f000 812d 	beq.w	11da <event_conn_upd_prep+0x2da>
     f80:	6828      	ldr	r0, [r5, #0]
     f82:	2800      	cmp	r0, #0
     f84:	f000 8129 	beq.w	11da <event_conn_upd_prep+0x2da>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     f88:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
     f8c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
     f90:	6842      	ldr	r2, [r0, #4]
     f92:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
     f96:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
     f98:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     f9c:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
     fa0:	d104      	bne.n	fac <event_conn_upd_prep+0xac>
     fa2:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
     fa6:	4594      	cmp	ip, r2
     fa8:	f000 8216 	beq.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     fac:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
     fb0:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     fb2:	2319      	movs	r3, #25
     fb4:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
     fb6:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
     fb8:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
     fbc:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     fbe:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
     fc0:	772b      	strb	r3, [r5, #28]
#if defined(CONFIG_BT_CTLR_RX_ENQUEUE_HOLD)
			/* hold node rx until the instant's anchor point sync */
			rx_hold_put(conn, rx->hdr.link, rx);
#else /* !CONFIG_BT_CTLR_RX_ENQUEUE_HOLD */
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
     fc2:	4629      	mov	r1, r5
     fc4:	f00b fa30 	bl	c428 <ll_rx_put>
			ll_rx_sched();
     fc8:	f00b fa38 	bl	c43c <ll_rx_sched>
			ll_rx_sched();
		}

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     fcc:	68a3      	ldr	r3, [r4, #8]
     fce:	2b00      	cmp	r3, #0
     fd0:	f2c0 80ef 	blt.w	11b2 <event_conn_upd_prep+0x2b2>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     fd4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     fd6:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
     fda:	fb10 f009 	smulbb	r0, r0, r9
     fde:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
     fe0:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
     fe4:	fb15 f301 	smulbb	r3, r5, r1
     fe8:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
     fea:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     fec:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
     ff0:	f080 80cd 	bcs.w	118e <event_conn_upd_prep+0x28e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     ff4:	1a1b      	subs	r3, r3, r0
     ff6:	4983      	ldr	r1, [pc, #524]	; (1204 <event_conn_upd_prep+0x304>)
     ff8:	f240 40e2 	movw	r0, #1250	; 0x4e2
     ffc:	fb03 f000 	mul.w	r0, r3, r0
    1000:	fba0 0101 	umull	r0, r1, r0, r1
    1004:	a37c      	add	r3, pc, #496	; (adr r3, 11f8 <event_conn_upd_prep+0x2f8>)
    1006:	e9d3 2300 	ldrd	r2, r3, [r3]
    100a:	f7ff f879 	bl	100 <__aeabi_uldivmod>
    100e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1012:	4480      	add	r8, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    1014:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1016:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1018:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    101c:	1bbe      	subs	r6, r7, r6
    101e:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
    1020:	f240 47e2 	movw	r7, #1250	; 0x4e2
		} else if (lll->role) {
    1024:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1026:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1028:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    102c:	f2c0 817d 	blt.w	132a <event_conn_upd_prep+0x42a>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    1030:	4a75      	ldr	r2, [pc, #468]	; (1208 <event_conn_upd_prep+0x308>)
    1032:	4976      	ldr	r1, [pc, #472]	; (120c <event_conn_upd_prep+0x30c>)
    1034:	4876      	ldr	r0, [pc, #472]	; (1210 <event_conn_upd_prep+0x310>)
    1036:	f640 5327 	movw	r3, #3367	; 0xd27
    103a:	f018 faaa 	bl	19592 <assert_print>
    103e:	4040      	eors	r0, r0
    1040:	f380 8811 	msr	BASEPRI, r0
    1044:	f04f 0003 	mov.w	r0, #3
    1048:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    104a:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    104c:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    104e:	4a71      	ldr	r2, [pc, #452]	; (1214 <event_conn_upd_prep+0x314>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1050:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1054:	4970      	ldr	r1, [pc, #448]	; (1218 <event_conn_upd_prep+0x318>)
		lll->latency = conn->llcp_cu.latency;
    1056:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
    105a:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    105c:	4432      	add	r2, r6
    105e:	fbb2 f2f6 	udiv	r2, r2, r6
    1062:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1066:	f242 7210 	movw	r2, #10000	; 0x2710
    106a:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    106e:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1070:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1072:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1076:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    107a:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    107e:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1080:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1082:	1d83      	adds	r3, r0, #6
    1084:	429a      	cmp	r2, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1086:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    108a:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    108e:	dd04      	ble.n	109a <event_conn_upd_prep+0x19a>
    1090:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    1094:	33fa      	adds	r3, #250	; 0xfa
    1096:	441a      	add	r2, r3
    1098:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    109a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    109e:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    10a2:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    10a4:	bf44      	itt	mi
    10a6:	2300      	movmi	r3, #0
    10a8:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    10ac:	2102      	movs	r1, #2
    10ae:	2001      	movs	r0, #1
    10b0:	f014 fb74 	bl	1579c <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    10b4:	2200      	movs	r2, #0
    10b6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    10b8:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    10ba:	2001      	movs	r0, #1
    10bc:	f007 fe70 	bl	8da0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    10c0:	4956      	ldr	r1, [pc, #344]	; (121c <event_conn_upd_prep+0x31c>)
    10c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    10c6:	4620      	mov	r0, r4
    10c8:	f007 fdfa 	bl	8cc0 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    10cc:	f100 0a05 	add.w	sl, r0, #5
    10d0:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    10d4:	4b52      	ldr	r3, [pc, #328]	; (1220 <event_conn_upd_prep+0x320>)
    10d6:	9400      	str	r4, [sp, #0]
    10d8:	4652      	mov	r2, sl
    10da:	2101      	movs	r1, #1
    10dc:	2000      	movs	r0, #0
    10de:	f009 f85d 	bl	a19c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    10e2:	f030 0302 	bics.w	r3, r0, #2
    10e6:	d00c      	beq.n	1102 <event_conn_upd_prep+0x202>
    10e8:	4a47      	ldr	r2, [pc, #284]	; (1208 <event_conn_upd_prep+0x308>)
    10ea:	494e      	ldr	r1, [pc, #312]	; (1224 <event_conn_upd_prep+0x324>)
    10ec:	4848      	ldr	r0, [pc, #288]	; (1210 <event_conn_upd_prep+0x310>)
    10ee:	f640 5356 	movw	r3, #3414	; 0xd56
    10f2:	f018 fa4e 	bl	19592 <assert_print>
    10f6:	4040      	eors	r0, r0
    10f8:	f380 8811 	msr	BASEPRI, r0
    10fc:	f04f 0003 	mov.w	r0, #3
    1100:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1102:	4e40      	ldr	r6, [pc, #256]	; (1204 <event_conn_upd_prep+0x304>)
    1104:	fbab 6b06 	umull	r6, fp, fp, r6
    1108:	a33b      	add	r3, pc, #236	; (adr r3, 11f8 <event_conn_upd_prep+0x2f8>)
    110a:	e9d3 2300 	ldrd	r2, r3, [r3]
    110e:	4630      	mov	r0, r6
    1110:	4659      	mov	r1, fp
    1112:	f7fe fff5 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1116:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    1118:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    111c:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    111e:	4842      	ldr	r0, [pc, #264]	; (1228 <event_conn_upd_prep+0x328>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1120:	6923      	ldr	r3, [r4, #16]
    1122:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1124:	fba5 0100 	umull	r0, r1, r5, r0
    1128:	2307      	movs	r3, #7
    112a:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    112e:	4b3f      	ldr	r3, [pc, #252]	; (122c <event_conn_upd_prep+0x32c>)
    1130:	9307      	str	r3, [sp, #28]
    1132:	4b3f      	ldr	r3, [pc, #252]	; (1230 <event_conn_upd_prep+0x330>)
    1134:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    1136:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1138:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    113c:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1140:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1146:	2300      	movs	r3, #0
    1148:	f7fe ffda 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    114c:	4643      	mov	r3, r8
    114e:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1152:	9700      	str	r7, [sp, #0]
    1154:	4652      	mov	r2, sl
    1156:	2101      	movs	r1, #1
    1158:	2000      	movs	r0, #0
    115a:	f008 ff95 	bl	a088 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    115e:	f030 0302 	bics.w	r3, r0, #2
    1162:	d00c      	beq.n	117e <event_conn_upd_prep+0x27e>
    1164:	4a28      	ldr	r2, [pc, #160]	; (1208 <event_conn_upd_prep+0x308>)
    1166:	492f      	ldr	r1, [pc, #188]	; (1224 <event_conn_upd_prep+0x324>)
    1168:	4829      	ldr	r0, [pc, #164]	; (1210 <event_conn_upd_prep+0x310>)
    116a:	f44f 6357 	mov.w	r3, #3440	; 0xd70
    116e:	f018 fa10 	bl	19592 <assert_print>
    1172:	4040      	eors	r0, r0
    1174:	f380 8811 	msr	BASEPRI, r0
    1178:	f04f 0003 	mov.w	r0, #3
    117c:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    117e:	f1b9 0f00 	cmp.w	r9, #0
    1182:	f040 811d 	bne.w	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1186:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    1188:	b00b      	add	sp, #44	; 0x2c
    118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    118e:	fb05 0111 	mls	r1, r5, r1, r0
    1192:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1196:	481b      	ldr	r0, [pc, #108]	; (1204 <event_conn_upd_prep+0x304>)
    1198:	b289      	uxth	r1, r1
    119a:	fb03 f101 	mul.w	r1, r3, r1
    119e:	fba1 0100 	umull	r0, r1, r1, r0
    11a2:	a315      	add	r3, pc, #84	; (adr r3, 11f8 <event_conn_upd_prep+0x2f8>)
    11a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a8:	f7fe ffaa 	bl	100 <__aeabi_uldivmod>
    11ac:	eba8 0800 	sub.w	r8, r8, r0
    11b0:	e730      	b.n	1014 <event_conn_upd_prep+0x114>
			uint32_t ticks_prepare_to_start =
    11b2:	68e1      	ldr	r1, [r4, #12]
    11b4:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    11b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    11ba:	4291      	cmp	r1, r2
    11bc:	bf2c      	ite	cs
    11be:	4488      	addcs	r8, r1
    11c0:	4490      	addcc	r8, r2
    11c2:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    11c4:	eba8 0803 	sub.w	r8, r8, r3
    11c8:	e704      	b.n	fd4 <event_conn_upd_prep+0xd4>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    11ca:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
    11ce:	2a00      	cmp	r2, #0
    11d0:	f43f aeb6 	beq.w	f40 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
    11d4:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
    11d8:	e6b6      	b.n	f48 <event_conn_upd_prep+0x48>
		LL_ASSERT(rx && rx->hdr.link);
    11da:	4a0b      	ldr	r2, [pc, #44]	; (1208 <event_conn_upd_prep+0x308>)
    11dc:	4915      	ldr	r1, [pc, #84]	; (1234 <event_conn_upd_prep+0x334>)
    11de:	480c      	ldr	r0, [pc, #48]	; (1210 <event_conn_upd_prep+0x310>)
    11e0:	f640 43a1 	movw	r3, #3233	; 0xca1
    11e4:	f018 f9d5 	bl	19592 <assert_print>
    11e8:	4040      	eors	r0, r0
    11ea:	f380 8811 	msr	BASEPRI, r0
    11ee:	f04f 0003 	mov.w	r0, #3
    11f2:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    11f4:	6828      	ldr	r0, [r5, #0]
    11f6:	e6c7      	b.n	f88 <event_conn_upd_prep+0x88>
    11f8:	1afd498d 	.word	0x1afd498d
    11fc:	00000007 	.word	0x00000007
    1200:	200021dc 	.word	0x200021dc
    1204:	3b9aca00 	.word	0x3b9aca00
    1208:	00020140 	.word	0x00020140
    120c:	0001fc54 	.word	0x0001fc54
    1210:	0001fbf4 	.word	0x0001fbf4
    1214:	026259ff 	.word	0x026259ff
    1218:	01c9c37f 	.word	0x01c9c37f
    121c:	200012b0 	.word	0x200012b0
    1220:	0000ddb5 	.word	0x0000ddb5
    1224:	00020220 	.word	0x00020220
    1228:	1afd498d 	.word	0x1afd498d
    122c:	0000dd5d 	.word	0x0000dd5d
    1230:	000123c9 	.word	0x000123c9
    1234:	0002020c 	.word	0x0002020c
		rx = ll_pdu_rx_alloc_peek(1);
    1238:	2001      	movs	r0, #1
    123a:	f00b f905 	bl	c448 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    123e:	4606      	mov	r6, r0
    1240:	2800      	cmp	r0, #0
    1242:	f000 80ec 	beq.w	141e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x96>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1246:	4884      	ldr	r0, [pc, #528]	; (1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>)
    1248:	f007 fd04 	bl	8c54 <mem_acquire>
		if (!tx) {
    124c:	4605      	mov	r5, r0
    124e:	2800      	cmp	r0, #0
    1250:	f000 80e5 	beq.w	141e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x96>
	if (!conn_upd_curr) {
    1254:	4b81      	ldr	r3, [pc, #516]	; (145c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4>)
    1256:	681a      	ldr	r2, [r3, #0]
    1258:	2a00      	cmp	r2, #0
    125a:	f000 80d8 	beq.w	140e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x86>
		(void)ll_pdu_rx_alloc();
    125e:	f00b f913 	bl	c488 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1262:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    1264:	6832      	ldr	r2, [r6, #0]
    1266:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    126a:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    126c:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    1270:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1274:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1276:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1278:	230c      	movs	r3, #12
    127a:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    127c:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    127e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1282:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1284:	4a76      	ldr	r2, [pc, #472]	; (1460 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8>)
    1286:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
					      conn->lll.latency + 6;
    128a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    128c:	fba2 2303 	umull	r2, r3, r2, r3
    1290:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1292:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1296:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    129a:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    129e:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    12a2:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    12a6:	f8a5 300d 	strh.w	r3, [r5, #13]
					      conn->lll.latency + 6;
    12aa:	3106      	adds	r1, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    12ac:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    12b0:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    12b4:	4449      	add	r1, r9
	    conn->tx_head &&
    12b6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
    12ba:	b289      	uxth	r1, r1
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    12bc:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    12c0:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    12c4:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    12c8:	f8a5 1011 	strh.w	r1, [r5, #17]
	if (
    12cc:	b1c3      	cbz	r3, 1300 <event_conn_upd_prep+0x400>
	    !conn->llcp_enc.pause_tx &&
    12ce:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    12d2:	0796      	lsls	r6, r2, #30
    12d4:	d414      	bmi.n	1300 <event_conn_upd_prep+0x400>
	    !conn->llcp_phy.pause_tx &&
    12d6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    12da:	07d0      	lsls	r0, r2, #31
    12dc:	d410      	bmi.n	1300 <event_conn_upd_prep+0x400>
		if (conn->tx_head == conn->tx_data) {
    12de:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    12e2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    12e4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    12e8:	f000 809c 	beq.w	1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>
		} else if (!conn->tx_ctrl) {
    12ec:	b96a      	cbnz	r2, 130a <event_conn_upd_prep+0x40a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    12ee:	791a      	ldrb	r2, [r3, #4]
    12f0:	f002 0203 	and.w	r2, r2, #3
    12f4:	2a03      	cmp	r2, #3
    12f6:	f000 80a2 	beq.w	143e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    12fa:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    12fe:	e006      	b.n	130e <event_conn_upd_prep+0x40e>
		if (!conn->tx_ctrl) {
    1300:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    1304:	2a00      	cmp	r2, #0
    1306:	f000 8084 	beq.w	1412 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a>
	tx->next = conn->tx_ctrl_last->next;
    130a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    130e:	681a      	ldr	r2, [r3, #0]
    1310:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1312:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1314:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    1316:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    131a:	b90b      	cbnz	r3, 1320 <event_conn_upd_prep+0x420>
		conn->tx_data_last = tx;
    131c:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    1320:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1324:	b00b      	add	sp, #44	; 0x2c
    1326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lll->periph.window_widening_periodic_us *
    132a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    132c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    132e:	fb02 3319 	mls	r3, r2, r9, r3
    1332:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1334:	f011 ffc6 	bl	132c4 <lll_clock_ppm_local_get>
    1338:	4605      	mov	r5, r0
    133a:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    133e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1342:	f011 ffc1 	bl	132c8 <lll_clock_ppm_get>
    1346:	4405      	add	r5, r0
    1348:	fb06 f505 	mul.w	r5, r6, r5
    134c:	4b45      	ldr	r3, [pc, #276]	; (1464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    134e:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1352:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    1356:	f205 253f 	addw	r5, r5, #575	; 0x23f
    135a:	fba3 3505 	umull	r3, r5, r3, r5
    135e:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1360:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
    1364:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
    1366:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
    1368:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    136c:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
    136e:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1370:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    1372:	4293      	cmp	r3, r2
    1374:	bf28      	it	cs
    1376:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
    1378:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
    137a:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    137e:	4d3a      	ldr	r5, [pc, #232]	; (1468 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe0>)
			lll->periph.window_widening_prepare_us +=
    1380:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    1384:	2300      	movs	r3, #0
    1386:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    138a:	fba0 0105 	umull	r0, r1, r0, r5
    138e:	a330      	add	r3, pc, #192	; (adr r3, 1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>)
    1390:	e9d3 2300 	ldrd	r2, r3, [r3]
    1394:	f7fe feb4 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1398:	4931      	ldr	r1, [pc, #196]	; (1460 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    139a:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    139e:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    13a2:	fba1 3000 	umull	r3, r0, r1, r0
    13a6:	0a80      	lsrs	r0, r0, #10
    13a8:	fb07 f000 	mul.w	r0, r7, r0
    13ac:	a328      	add	r3, pc, #160	; (adr r3, 1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>)
    13ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    13b2:	fba0 0105 	umull	r0, r1, r0, r5
    13b6:	f7fe fea3 	bl	100 <__aeabi_uldivmod>
    13ba:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    13be:	e646      	b.n	104e <event_conn_upd_prep+0x14e>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    13c0:	2201      	movs	r2, #1
    13c2:	2102      	movs	r1, #2
    13c4:	4610      	mov	r0, r2
    13c6:	f007 fceb 	bl	8da0 <mayfly_enable>
    13ca:	e6dc      	b.n	1186 <event_conn_upd_prep+0x286>
			conn->procedure_expire = 0U;
    13cc:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    13ce:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    13d2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    13d6:	e5c8      	b.n	f6a <event_conn_upd_prep+0x6a>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    13d8:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    13dc:	fb0c fe03 	mul.w	lr, ip, r3
    13e0:	f242 7c10 	movw	ip, #10000	; 0x2710
    13e4:	fb0c ec01 	mla	ip, ip, r1, lr
    13e8:	f10c 3cff 	add.w	ip, ip, #4294967295
    13ec:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    13f0:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    13f4:	fa1f fc8c 	uxth.w	ip, ip
    13f8:	45e6      	cmp	lr, ip
    13fa:	f47f add7 	bne.w	fac <event_conn_upd_prep+0xac>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    13fe:	2301      	movs	r3, #1
    1400:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    1402:	4629      	mov	r1, r5
    1404:	f00b f810 	bl	c428 <ll_rx_put>
			ll_rx_sched();
    1408:	f00b f818 	bl	c43c <ll_rx_sched>
    140c:	e5de      	b.n	fcc <event_conn_upd_prep+0xcc>
		conn_upd_curr = conn;
    140e:	601c      	str	r4, [r3, #0]
    1410:	e725      	b.n	125e <event_conn_upd_prep+0x35e>
			tx->next = conn->tx_head;
    1412:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1414:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1418:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    141c:	e77d      	b.n	131a <event_conn_upd_prep+0x41a>
			return -ENOBUFS;
    141e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    1422:	e6b1      	b.n	1188 <event_conn_upd_prep+0x288>
			conn->tx_data = conn->tx_data->next;
    1424:	6819      	ldr	r1, [r3, #0]
    1426:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    142a:	2a00      	cmp	r2, #0
    142c:	f47f af6d 	bne.w	130a <event_conn_upd_prep+0x40a>
			tx->next = conn->tx_head->next;
    1430:	681a      	ldr	r2, [r3, #0]
    1432:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1434:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1436:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1438:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    143c:	e76d      	b.n	131a <event_conn_upd_prep+0x41a>
	    ((pdu_data_tx->llctrl.opcode !=
    143e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1440:	2a03      	cmp	r2, #3
    1442:	d0f5      	beq.n	1430 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1444:	2a0a      	cmp	r2, #10
    1446:	f47f af58 	bne.w	12fa <event_conn_upd_prep+0x3fa>
    144a:	e7f1      	b.n	1430 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8>
    144c:	f3af 8000 	nop.w
    1450:	1afd498d 	.word	0x1afd498d
    1454:	00000007 	.word	0x00000007
    1458:	20002294 	.word	0x20002294
    145c:	200021dc 	.word	0x200021dc
    1460:	d1b71759 	.word	0xd1b71759
    1464:	431bde83 	.word	0x431bde83
    1468:	3b9aca00 	.word	0x3b9aca00
    146c:	00000000 	.word	0x00000000

00001470 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1474:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1476:	f890 801c 	ldrb.w	r8, [r0, #28]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    147a:	681b      	ldr	r3, [r3, #0]
{
    147c:	b095      	sub	sp, #84	; 0x54
	conn = lll->hdr.parent;
    147e:	4616      	mov	r6, r2
{
    1480:	4615      	mov	r5, r2
    1482:	4604      	mov	r4, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1484:	2206      	movs	r2, #6
{
    1486:	468a      	mov	sl, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1488:	f100 011e 	add.w	r1, r0, #30
    148c:	a812      	add	r0, sp, #72	; 0x48
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    148e:	930b      	str	r3, [sp, #44]	; 0x2c
	conn = lll->hdr.parent;
    1490:	f856 7b08 	ldr.w	r7, [r6], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1494:	f019 f9dd 	bl	1a852 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1498:	a912      	add	r1, sp, #72	; 0x48
    149a:	2206      	movs	r2, #6
    149c:	a810      	add	r0, sp, #64	; 0x40
    149e:	f019 f9d8 	bl	1a852 <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    14a2:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    14a4:	4630      	mov	r0, r6
	link = rx->link;
    14a6:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    14aa:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    14ac:	f105 0904 	add.w	r9, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    14b0:	f019 f9cf 	bl	1a852 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    14b4:	f105 0618 	add.w	r6, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    14b8:	2204      	movs	r2, #4
    14ba:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    14be:	4648      	mov	r0, r9
    14c0:	f019 f9c7 	bl	1a852 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    14c4:	2205      	movs	r2, #5
    14c6:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    14ca:	4630      	mov	r0, r6
    14cc:	f019 f9c1 	bl	1a852 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    14d0:	4630      	mov	r0, r6
    14d2:	2105      	movs	r1, #5
    14d4:	f007 fd94 	bl	9000 <util_ones_count_get>
    14d8:	7f6b      	ldrb	r3, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    14da:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    14de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    14e2:	f360 0305 	bfi	r3, r0, #0, #6
    14e6:	776b      	strb	r3, [r5, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    14e8:	f3c2 0304 	ubfx	r3, r2, #0, #5
    14ec:	77ab      	strb	r3, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    14ee:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    14f0:	81ee      	strh	r6, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    14f2:	2801      	cmp	r0, #1
	peer_addr_type = pdu_adv->tx_addr;
    14f4:	f3c8 1880 	ubfx	r8, r8, #6, #1
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    14f8:	d908      	bls.n	150c <ull_periph_setup+0x9c>
    14fa:	f002 031f 	and.w	r3, r2, #31
    14fe:	331b      	adds	r3, #27
    1500:	f003 031f 	and.w	r3, r3, #31
    1504:	2b0b      	cmp	r3, #11
    1506:	d801      	bhi.n	150c <ull_periph_setup+0x9c>
    1508:	b2b6      	uxth	r6, r6
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    150a:	b9ce      	cbnz	r6, 1540 <ull_periph_setup+0xd0>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    150c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    150e:	68e6      	ldr	r6, [r4, #12]
	hdr->disabled_cb = NULL;
    1510:	2200      	movs	r2, #0
    1512:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    1514:	f895 3020 	ldrb.w	r3, [r5, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
    1518:	2701      	movs	r7, #1
	lll->periph.initiated = 0U;
    151a:	f362 0300 	bfi	r3, r2, #0, #1
    151e:	f885 3020 	strb.w	r3, [r5, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    1522:	4658      	mov	r0, fp
    1524:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
    1526:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
    1528:	f00a ff7e 	bl	c428 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    152c:	6830      	ldr	r0, [r6, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    152e:	7137      	strb	r7, [r6, #4]
	ll_rx_put(link, rx);
    1530:	4631      	mov	r1, r6
    1532:	f00a ff79 	bl	c428 <ll_rx_put>
	ll_rx_sched();
    1536:	f00a ff81 	bl	c43c <ll_rx_sched>
}
    153a:	b015      	add	sp, #84	; 0x54
    153c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    1540:	f8da 3000 	ldr.w	r3, [sl]
    1544:	2100      	movs	r1, #0
    1546:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1548:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    154c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    1550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    1554:	822b      	strh	r3, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1556:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    155a:	0952      	lsrs	r2, r2, #5
    155c:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1560:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1562:	920d      	str	r2, [sp, #52]	; 0x34
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1564:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1568:	f240 42e2 	movw	r2, #1250	; 0x4e2
    156c:	fb02 f606 	mul.w	r6, r2, r6
		ceiling_fraction(((lll_clock_ppm_local_get() +
    1570:	f011 fea8 	bl	132c4 <lll_clock_ppm_local_get>
    1574:	900c      	str	r0, [sp, #48]	; 0x30
    1576:	f897 00d8 	ldrb.w	r0, [r7, #216]	; 0xd8
    157a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    157e:	f011 fea3 	bl	132c8 <lll_clock_ppm_get>
    1582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1584:	49b0      	ldr	r1, [pc, #704]	; (1848 <ull_periph_setup+0x3d8>)
    1586:	4403      	add	r3, r0
    1588:	fb06 f303 	mul.w	r3, r6, r3
    158c:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1590:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1594:	fba1 2303 	umull	r2, r3, r1, r3
    1598:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    159a:	626b      	str	r3, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    159c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    15a0:	8a29      	ldrh	r1, [r5, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    15a2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    15a6:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    15aa:	0873      	lsrs	r3, r6, #1
    15ac:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    15ae:	63aa      	str	r2, [r5, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    15b0:	62ab      	str	r3, [r5, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    15b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    15b4:	4aa5      	ldr	r2, [pc, #660]	; (184c <ull_periph_setup+0x3dc>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    15b6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    15ba:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    15bc:	4432      	add	r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    15be:	4ba4      	ldr	r3, [pc, #656]	; (1850 <ull_periph_setup+0x3e0>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    15c0:	fbb2 f2f6 	udiv	r2, r2, r6
    15c4:	f8a7 20c6 	strh.w	r2, [r7, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    15c8:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    15ca:	f242 7010 	movw	r0, #10000	; 0x2710
    15ce:	fb00 6202 	mla	r2, r0, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    15d2:	4433      	add	r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    15d4:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    15d6:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    15d8:	fbb2 f2f6 	udiv	r2, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    15dc:	fbb3 f3f6 	udiv	r3, r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    15e0:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    15e4:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    15e6:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    15e8:	f8a7 20ce 	strh.w	r2, [r7, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    15ec:	dd04      	ble.n	15f8 <ull_periph_setup+0x188>
    15ee:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    15f2:	31fa      	adds	r1, #250	; 0xfa
    15f4:	440a      	add	r2, r1
    15f6:	b292      	uxth	r2, r2
    15f8:	f8a7 20ca 	strh.w	r2, [r7, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    15fc:	4649      	mov	r1, r9
    15fe:	2204      	movs	r2, #4
    1600:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
    1604:	f019 f925 	bl	1a852 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    1608:	4623      	mov	r3, r4
    160a:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    160e:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1612:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    1614:	910f      	str	r1, [sp, #60]	; 0x3c
    1616:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1618:	f100 80f1 	bmi.w	17fe <ull_periph_setup+0x38e>
	cc->status = 0U;
    161c:	f44f 7380 	mov.w	r3, #256	; 0x100
	cc->peer_addr_type = peer_addr_type;
    1620:	f884 801e 	strb.w	r8, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1624:	a910      	add	r1, sp, #64	; 0x40
	cc->status = 0U;
    1626:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1628:	2206      	movs	r2, #6
    162a:	f104 001f 	add.w	r0, r4, #31
    162e:	f019 f910 	bl	1a852 <memcpy>
	cc->sca = conn->periph.sca;
    1632:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
	cc->interval = lll->interval;
    1636:	89ea      	ldrh	r2, [r5, #14]
    1638:	84e2      	strh	r2, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    163a:	8a2a      	ldrh	r2, [r5, #16]
    163c:	8522      	strh	r2, [r4, #40]	; 0x28
	cc->sca = conn->periph.sca;
    163e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    1642:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    1646:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	cc->timeout = timeout;
    164a:	8562      	strh	r2, [r4, #42]	; 0x2a
	lll->handle = ll_conn_handle_get(conn);
    164c:	4638      	mov	r0, r7
    164e:	f00c ff8b 	bl	e568 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    1652:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    1654:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    1656:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    1658:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
    165c:	4658      	mov	r0, fp
    165e:	f00a fee3 	bl	c428 <ll_rx_put>
		rx->handle = lll->handle;
    1662:	89ab      	ldrh	r3, [r5, #12]
    1664:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1666:	231c      	movs	r3, #28
    1668:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    166a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    166c:	f8d4 8000 	ldr.w	r8, [r4]
		if (chan_sel) {
    1670:	2b00      	cmp	r3, #0
    1672:	f040 80b9 	bne.w	17e8 <ull_periph_setup+0x378>
			cs->csa = 0x00;
    1676:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    167a:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    167c:	4621      	mov	r1, r4
    167e:	4640      	mov	r0, r8
    1680:	f00a fed2 	bl	c428 <ll_rx_put>
	ll_rx_sched();
    1684:	f00a feda 	bl	c43c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1688:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    168c:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    1690:	f8b5 8042 	ldrh.w	r8, [r5, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1694:	2101      	movs	r1, #1
    1696:	f000 0007 	and.w	r0, r0, #7
    169a:	f011 fc19 	bl	12ed0 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    169e:	44a0      	add	r8, r4
    16a0:	f508 78e1 	add.w	r8, r8, #450	; 0x1c2
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    16a4:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    16a6:	eb08 0100 	add.w	r1, r8, r0
    16aa:	486a      	ldr	r0, [pc, #424]	; (1854 <ull_periph_setup+0x3e4>)
	conn->ull.ticks_active_to_start = 0U;
    16ac:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    16b0:	2331      	movs	r3, #49	; 0x31
    16b2:	60bb      	str	r3, [r7, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    16b4:	fba1 0100 	umull	r0, r1, r1, r0
    16b8:	a361      	add	r3, pc, #388	; (adr r3, 1840 <ull_periph_setup+0x3d0>)
    16ba:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    16be:	f8c7 9004 	str.w	r9, [r7, #4]
	conn->ull.ticks_preempt_to_start =
    16c2:	f8c7 900c 	str.w	r9, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    16c6:	f7fe fd1b 	bl	100 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    16ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    16cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    16ce:	f8da 400c 	ldr.w	r4, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    16d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    16d6:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    16d8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    16dc:	fb03 4402 	mla	r4, r3, r2, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    16e0:	2102      	movs	r1, #2
    16e2:	464a      	mov	r2, r9
	conn->ull.ticks_slot =
    16e4:	6138      	str	r0, [r7, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    16e6:	2001      	movs	r0, #1
    16e8:	f007 fb5a 	bl	8da0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    16ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    16ee:	4628      	mov	r0, r5
    16f0:	f00b ff74 	bl	d5dc <ull_adv_handle_get>
    16f4:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    16f6:	4b58      	ldr	r3, [pc, #352]	; (1858 <ull_periph_setup+0x3e8>)
    16f8:	9500      	str	r5, [sp, #0]
    16fa:	b2d2      	uxtb	r2, r2
    16fc:	4648      	mov	r0, r9
    16fe:	2101      	movs	r1, #1
    1700:	f008 fd4c 	bl	a19c <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    1704:	f204 44b2 	addw	r4, r4, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1708:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    170a:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    170e:	f000 8083 	beq.w	1818 <ull_periph_setup+0x3a8>
	if (adv->lll.is_hdcd) {
    1712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    1718:	07db      	lsls	r3, r3, #31
    171a:	d45d      	bmi.n	17d8 <ull_periph_setup+0x368>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    171c:	4638      	mov	r0, r7
    171e:	f00c ff23 	bl	e568 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1722:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1854 <ull_periph_setup+0x3e4>
    1726:	fba6 8609 	umull	r8, r6, r6, r9
    172a:	a345      	add	r3, pc, #276	; (adr r3, 1840 <ull_periph_setup+0x3d0>)
    172c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1730:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1732:	4631      	mov	r1, r6
    1734:	4640      	mov	r0, r8
    1736:	f7fe fce3 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    173a:	f8da 3008 	ldr.w	r3, [sl, #8]
    173e:	9706      	str	r7, [sp, #24]
    1740:	f1a3 0a3a 	sub.w	sl, r3, #58	; 0x3a
    1744:	4b45      	ldr	r3, [pc, #276]	; (185c <ull_periph_setup+0x3ec>)
    1746:	9307      	str	r3, [sp, #28]
    1748:	4b45      	ldr	r3, [pc, #276]	; (1860 <ull_periph_setup+0x3f0>)
    174a:	9305      	str	r3, [sp, #20]
    174c:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
    1750:	9308      	str	r3, [sp, #32]
    1752:	693b      	ldr	r3, [r7, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1754:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1758:	4842      	ldr	r0, [pc, #264]	; (1864 <ull_periph_setup+0x3f4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    175a:	f04f 0b00 	mov.w	fp, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    175e:	fba2 0100 	umull	r0, r1, r2, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1762:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1766:	2307      	movs	r3, #7
    1768:	ebb8 0000 	subs.w	r0, r8, r0
    176c:	fb03 1102 	mla	r1, r3, r2, r1
    1770:	eb66 0101 	sbc.w	r1, r6, r1
    1774:	4617      	mov	r7, r2
    1776:	2300      	movs	r3, #0
    1778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    177c:	f7fe fcc0 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1780:	a32f      	add	r3, pc, #188	; (adr r3, 1840 <ull_periph_setup+0x3d0>)
    1782:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1786:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    178a:	fba4 0109 	umull	r0, r1, r4, r9
    178e:	f7fe fcb7 	bl	100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1792:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1794:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1798:	b2ed      	uxtb	r5, r5
    179a:	9000      	str	r0, [sp, #0]
    179c:	4653      	mov	r3, sl
    179e:	462a      	mov	r2, r5
    17a0:	2101      	movs	r1, #1
    17a2:	4658      	mov	r0, fp
    17a4:	f008 fc70 	bl	a088 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    17a8:	f030 0302 	bics.w	r3, r0, #2
    17ac:	d00c      	beq.n	17c8 <ull_periph_setup+0x358>
    17ae:	4a2e      	ldr	r2, [pc, #184]	; (1868 <ull_periph_setup+0x3f8>)
    17b0:	492e      	ldr	r1, [pc, #184]	; (186c <ull_periph_setup+0x3fc>)
    17b2:	482f      	ldr	r0, [pc, #188]	; (1870 <ull_periph_setup+0x400>)
    17b4:	f240 13cf 	movw	r3, #463	; 0x1cf
    17b8:	f017 feeb 	bl	19592 <assert_print>
    17bc:	4040      	eors	r0, r0
    17be:	f380 8811 	msr	BASEPRI, r0
    17c2:	f04f 0003 	mov.w	r0, #3
    17c6:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    17c8:	2201      	movs	r2, #1
    17ca:	2102      	movs	r1, #2
    17cc:	4610      	mov	r0, r2
    17ce:	f007 fae7 	bl	8da0 <mayfly_enable>
}
    17d2:	b015      	add	sp, #84	; 0x54
    17d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    17d8:	2300      	movs	r3, #0
    17da:	2201      	movs	r2, #1
    17dc:	9300      	str	r3, [sp, #0]
    17de:	4618      	mov	r0, r3
    17e0:	4611      	mov	r1, r2
    17e2:	f008 fcdb 	bl	a19c <ticker_stop>
    17e6:	e799      	b.n	171c <ull_periph_setup+0x2ac>
			lll->data_chan_sel = 1;
    17e8:	7f6b      	ldrb	r3, [r5, #29]
    17ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    17ee:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    17f0:	4648      	mov	r0, r9
    17f2:	f010 ff07 	bl	12604 <lll_chan_id>
			cs->csa = 0x01;
    17f6:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    17f8:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    17fa:	7723      	strb	r3, [r4, #28]
    17fc:	e73e      	b.n	167c <ull_periph_setup+0x20c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    17fe:	4a1a      	ldr	r2, [pc, #104]	; (1868 <ull_periph_setup+0x3f8>)
    1800:	491c      	ldr	r1, [pc, #112]	; (1874 <ull_periph_setup+0x404>)
    1802:	481b      	ldr	r0, [pc, #108]	; (1870 <ull_periph_setup+0x400>)
    1804:	23f7      	movs	r3, #247	; 0xf7
    1806:	f017 fec4 	bl	19592 <assert_print>
    180a:	4040      	eors	r0, r0
    180c:	f380 8811 	msr	BASEPRI, r0
    1810:	f04f 0003 	mov.w	r0, #3
    1814:	df02      	svc	2
    1816:	e701      	b.n	161c <ull_periph_setup+0x1ac>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1818:	f00a febe 	bl	c598 <ull_disable_mark_get>
    181c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    181e:	4283      	cmp	r3, r0
    1820:	f43f af77 	beq.w	1712 <ull_periph_setup+0x2a2>
    1824:	4a10      	ldr	r2, [pc, #64]	; (1868 <ull_periph_setup+0x3f8>)
    1826:	4914      	ldr	r1, [pc, #80]	; (1878 <ull_periph_setup+0x408>)
    1828:	4811      	ldr	r0, [pc, #68]	; (1870 <ull_periph_setup+0x400>)
    182a:	f240 2399 	movw	r3, #665	; 0x299
    182e:	f017 feb0 	bl	19592 <assert_print>
    1832:	4040      	eors	r0, r0
    1834:	f380 8811 	msr	BASEPRI, r0
    1838:	f04f 0003 	mov.w	r0, #3
    183c:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    183e:	e768      	b.n	1712 <ull_periph_setup+0x2a2>
    1840:	1afd498d 	.word	0x1afd498d
    1844:	00000007 	.word	0x00000007
    1848:	431bde83 	.word	0x431bde83
    184c:	026259ff 	.word	0x026259ff
    1850:	01c9c37f 	.word	0x01c9c37f
    1854:	3b9aca00 	.word	0x3b9aca00
    1858:	0001238d 	.word	0x0001238d
    185c:	0001235d 	.word	0x0001235d
    1860:	000123c9 	.word	0x000123c9
    1864:	1afd498d 	.word	0x1afd498d
    1868:	0002031c 	.word	0x0002031c
    186c:	00020220 	.word	0x00020220
    1870:	0001fbf4 	.word	0x0001fbf4
    1874:	0001fd08 	.word	0x0001fd08
    1878:	00020378 	.word	0x00020378

0000187c <vnd_ccc_cfg_changed>:
static uint8_t indicating;
static struct bt_gatt_indicate_params ind_params;

static void vnd_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	simulate_vnd = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    187c:	1e8b      	subs	r3, r1, #2
    187e:	4259      	negs	r1, r3
    1880:	4159      	adcs	r1, r3
    1882:	4b01      	ldr	r3, [pc, #4]	; (1888 <vnd_ccc_cfg_changed+0xc>)
    1884:	7019      	strb	r1, [r3, #0]
}
    1886:	4770      	bx	lr
    1888:	200028ec 	.word	0x200028ec

0000188c <write_ct>:
{
    188c:	b538      	push	{r3, r4, r5, lr}
    188e:	460c      	mov	r4, r1
    1890:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    uint8_t *value = attr->user_data;
    1894:	68e5      	ldr	r5, [r4, #12]
    if (offset + len > sizeof(ct)) {
    1896:	461c      	mov	r4, r3
    1898:	18c3      	adds	r3, r0, r3
    189a:	2b0a      	cmp	r3, #10
{
    189c:	4611      	mov	r1, r2
    if (offset + len > sizeof(ct)) {
    189e:	dc08      	bgt.n	18b2 <write_ct+0x26>
    memcpy(value + offset, buf, len);
    18a0:	4622      	mov	r2, r4
    18a2:	4428      	add	r0, r5
    18a4:	f018 ffd5 	bl	1a852 <memcpy>
    ct_update = 1U;
    18a8:	4b03      	ldr	r3, [pc, #12]	; (18b8 <write_ct+0x2c>)
    18aa:	2201      	movs	r2, #1
    18ac:	701a      	strb	r2, [r3, #0]
}
    18ae:	4620      	mov	r0, r4
    18b0:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    18b2:	f06f 0406 	mvn.w	r4, #6
    18b6:	e7fa      	b.n	18ae <write_ct+0x22>
    18b8:	200028ea 	.word	0x200028ea

000018bc <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
    18bc:	4801      	ldr	r0, [pc, #4]	; (18c4 <mtu_updated+0x8>)
    18be:	f017 bb52 	b.w	18f66 <printk>
    18c2:	bf00      	nop
    18c4:	00020910 	.word	0x00020910

000018c8 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    18c8:	4801      	ldr	r0, [pc, #4]	; (18d0 <disconnected+0x8>)
    18ca:	f017 bb4c 	b.w	18f66 <printk>
    18ce:	bf00      	nop
    18d0:	00020932 	.word	0x00020932

000018d4 <connected>:
	if (err) {
    18d4:	b111      	cbz	r1, 18dc <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    18d6:	4803      	ldr	r0, [pc, #12]	; (18e4 <connected+0x10>)
    18d8:	f017 bb45 	b.w	18f66 <printk>
		printk("Connected\n");
    18dc:	4802      	ldr	r0, [pc, #8]	; (18e8 <connected+0x14>)
    18de:	f017 bb42 	b.w	18f66 <printk>
    18e2:	bf00      	nop
    18e4:	00020950 	.word	0x00020950
    18e8:	00020970 	.word	0x00020970

000018ec <indicate_destroy>:
{
    18ec:	b508      	push	{r3, lr}
	printk("Indication complete\n");
    18ee:	4803      	ldr	r0, [pc, #12]	; (18fc <indicate_destroy+0x10>)
    18f0:	f017 fb39 	bl	18f66 <printk>
	indicating = 0U;
    18f4:	4b02      	ldr	r3, [pc, #8]	; (1900 <indicate_destroy+0x14>)
    18f6:	2200      	movs	r2, #0
    18f8:	701a      	strb	r2, [r3, #0]
}
    18fa:	bd08      	pop	{r3, pc}
    18fc:	0002097b 	.word	0x0002097b
    1900:	200028eb 	.word	0x200028eb

00001904 <indicate_cb>:
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    1904:	4903      	ldr	r1, [pc, #12]	; (1914 <indicate_cb+0x10>)
    1906:	4b04      	ldr	r3, [pc, #16]	; (1918 <indicate_cb+0x14>)
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <indicate_cb+0x18>)
    190a:	2a00      	cmp	r2, #0
    190c:	bf08      	it	eq
    190e:	4619      	moveq	r1, r3
    1910:	f017 bb29 	b.w	18f66 <printk>
    1914:	00020990 	.word	0x00020990
    1918:	00020995 	.word	0x00020995
    191c:	0002099d 	.word	0x0002099d

00001920 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1920:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1922:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1924:	b08a      	sub	sp, #40	; 0x28
    1926:	4604      	mov	r4, r0
    1928:	460e      	mov	r6, r1
    192a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    192c:	2b03      	cmp	r3, #3
    192e:	d820      	bhi.n	1972 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    1930:	e8df f003 	tbb	[pc, r3]
    1934:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1938:	4911      	ldr	r1, [pc, #68]	; (1980 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    193a:	4628      	mov	r0, r5
    193c:	f018 ff52 	bl	1a7e4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1940:	7863      	ldrb	r3, [r4, #1]
    1942:	9304      	str	r3, [sp, #16]
    1944:	78a3      	ldrb	r3, [r4, #2]
    1946:	9303      	str	r3, [sp, #12]
    1948:	78e3      	ldrb	r3, [r4, #3]
    194a:	9302      	str	r3, [sp, #8]
    194c:	7923      	ldrb	r3, [r4, #4]
    194e:	9301      	str	r3, [sp, #4]
    1950:	7963      	ldrb	r3, [r4, #5]
    1952:	9300      	str	r3, [sp, #0]
    1954:	4a0b      	ldr	r2, [pc, #44]	; (1984 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    1956:	79a3      	ldrb	r3, [r4, #6]
    1958:	9505      	str	r5, [sp, #20]
    195a:	211e      	movs	r1, #30
    195c:	4630      	mov	r0, r6
    195e:	f017 fb0f 	bl	18f80 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    1962:	b00a      	add	sp, #40	; 0x28
    1964:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1966:	4908      	ldr	r1, [pc, #32]	; (1988 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    1968:	e7e7      	b.n	193a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    196a:	4908      	ldr	r1, [pc, #32]	; (198c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    196c:	e7e5      	b.n	193a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    196e:	4908      	ldr	r1, [pc, #32]	; (1990 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    1970:	e7e3      	b.n	193a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1972:	4a08      	ldr	r2, [pc, #32]	; (1994 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    1974:	210a      	movs	r1, #10
    1976:	4628      	mov	r0, r5
    1978:	f017 fb02 	bl	18f80 <snprintk>
		break;
    197c:	e7e0      	b.n	1940 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    197e:	bf00      	nop
    1980:	000209ac 	.word	0x000209ac
    1984:	000209d5 	.word	0x000209d5
    1988:	000209b3 	.word	0x000209b3
    198c:	000209ba 	.word	0x000209ba
    1990:	000209c4 	.word	0x000209c4
    1994:	000209ce 	.word	0x000209ce

00001998 <auth_cancel>:

	printk("Passkey for %s: %06u\n", addr, passkey);
}

static void auth_cancel(struct bt_conn *conn)
{
    1998:	b500      	push	{lr}
    199a:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    199c:	f019 ff63 	bl	1b866 <bt_conn_get_dst>
    19a0:	4669      	mov	r1, sp
    19a2:	f7ff ffbd 	bl	1920 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing cancelled: %s\n", addr);
    19a6:	4803      	ldr	r0, [pc, #12]	; (19b4 <auth_cancel+0x1c>)
    19a8:	4669      	mov	r1, sp
    19aa:	f017 fadc 	bl	18f66 <printk>
}
    19ae:	b009      	add	sp, #36	; 0x24
    19b0:	f85d fb04 	ldr.w	pc, [sp], #4
    19b4:	000209f8 	.word	0x000209f8

000019b8 <auth_passkey_display>:
{
    19b8:	b510      	push	{r4, lr}
    19ba:	b088      	sub	sp, #32
    19bc:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    19be:	f019 ff52 	bl	1b866 <bt_conn_get_dst>
    19c2:	4669      	mov	r1, sp
    19c4:	f7ff ffac 	bl	1920 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
    19c8:	4803      	ldr	r0, [pc, #12]	; (19d8 <auth_passkey_display+0x20>)
    19ca:	4622      	mov	r2, r4
    19cc:	4669      	mov	r1, sp
    19ce:	f017 faca 	bl	18f66 <printk>
}
    19d2:	b008      	add	sp, #32
    19d4:	bd10      	pop	{r4, pc}
    19d6:	bf00      	nop
    19d8:	00020a0f 	.word	0x00020a0f

000019dc <cts_init>:
{
    19dc:	b513      	push	{r0, r1, r4, lr}
    memcpy(buf,  &year, 2); /* year */
    19de:	4c0d      	ldr	r4, [pc, #52]	; (1a14 <cts_init+0x38>)
    year = sys_cpu_to_le16(2015);
    19e0:	f240 73df 	movw	r3, #2015	; 0x7df
    memcpy(buf,  &year, 2); /* year */
    19e4:	2202      	movs	r2, #2
    19e6:	f10d 0106 	add.w	r1, sp, #6
    19ea:	4620      	mov	r0, r4
    year = sys_cpu_to_le16(2015);
    19ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    memcpy(buf,  &year, 2); /* year */
    19f0:	f018 ff2f 	bl	1a852 <memcpy>
    buf[2] = 5U; /* months starting from 1 */
    19f4:	2305      	movs	r3, #5
    19f6:	70a3      	strb	r3, [r4, #2]
    buf[3] = 30U; /* day */
    19f8:	231e      	movs	r3, #30
    19fa:	70e3      	strb	r3, [r4, #3]
    buf[4] = 12U; /* hours */
    19fc:	220c      	movs	r2, #12
    buf[6] = 30U; /* seconds */
    19fe:	71a3      	strb	r3, [r4, #6]
    buf[7] = 1U; /* day of week starting from 1 */
    1a00:	2301      	movs	r3, #1
    buf[4] = 12U; /* hours */
    1a02:	7122      	strb	r2, [r4, #4]
    buf[7] = 1U; /* day of week starting from 1 */
    1a04:	71e3      	strb	r3, [r4, #7]
    buf[5] = 45U; /* minutes */
    1a06:	222d      	movs	r2, #45	; 0x2d
    buf[8] = 0U;
    1a08:	2300      	movs	r3, #0
    buf[5] = 45U; /* minutes */
    1a0a:	7162      	strb	r2, [r4, #5]
    buf[8] = 0U;
    1a0c:	7223      	strb	r3, [r4, #8]
    buf[9] = 0U; /* No update, change, etc */
    1a0e:	7263      	strb	r3, [r4, #9]
}
    1a10:	b002      	add	sp, #8
    1a12:	bd10      	pop	{r4, pc}
    1a14:	200028e0 	.word	0x200028e0

00001a18 <cts_notify>:
{	/* Current Time Service updates only when time is changed */
    1a18:	b510      	push	{r4, lr}
    if (!ct_update) {
    1a1a:	4b0c      	ldr	r3, [pc, #48]	; (1a4c <cts_notify+0x34>)
    1a1c:	781a      	ldrb	r2, [r3, #0]
{	/* Current Time Service updates only when time is changed */
    1a1e:	b086      	sub	sp, #24
    if (!ct_update) {
    1a20:	b18a      	cbz	r2, 1a46 <cts_notify+0x2e>
    ct_update = 0U;
    1a22:	2400      	movs	r4, #0
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    1a24:	4621      	mov	r1, r4
    1a26:	2218      	movs	r2, #24
    1a28:	4668      	mov	r0, sp
    1a2a:	701c      	strb	r4, [r3, #0]
    1a2c:	f018 ff1c 	bl	1a868 <memset>

	params.attr = attr;
    1a30:	4b07      	ldr	r3, [pc, #28]	; (1a50 <cts_notify+0x38>)
    1a32:	9301      	str	r3, [sp, #4]
	params.data = data;
    1a34:	4b07      	ldr	r3, [pc, #28]	; (1a54 <cts_notify+0x3c>)
    1a36:	9302      	str	r3, [sp, #8]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    1a38:	4669      	mov	r1, sp
	params.len = len;
    1a3a:	230a      	movs	r3, #10
	return bt_gatt_notify_cb(conn, &params);
    1a3c:	4620      	mov	r0, r4
	params.len = len;
    1a3e:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    1a42:	f005 fe55 	bl	76f0 <bt_gatt_notify_cb>
}
    1a46:	b006      	add	sp, #24
    1a48:	bd10      	pop	{r4, pc}
    1a4a:	bf00      	nop
    1a4c:	200028ea 	.word	0x200028ea
    1a50:	0001f464 	.word	0x0001f464
    1a54:	200028e0 	.word	0x200028e0

00001a58 <main>:

	bt_hrs_notify(heartrate);
}

void main(void)
{
    1a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Hello World! %s\n", CONFIG_BOARD);
    1a5c:	493d      	ldr	r1, [pc, #244]	; (1b54 <main+0xfc>)
    1a5e:	483e      	ldr	r0, [pc, #248]	; (1b58 <main+0x100>)
{
    1a60:	b08c      	sub	sp, #48	; 0x30
    printk("Hello World! %s\n", CONFIG_BOARD);
    1a62:	f017 fa80 	bl	18f66 <printk>

	struct bt_gatt_attr *vnd_ind_attr;
	char str[BT_UUID_STR_LEN];
	int err;

	err = bt_enable(NULL);
    1a66:	2000      	movs	r0, #0
    1a68:	f002 faf4 	bl	4054 <bt_enable>
	if (err) {
    1a6c:	4606      	mov	r6, r0
    1a6e:	b130      	cbz	r0, 1a7e <main+0x26>
		printk("Bluetooth init failed (err %d)\n", err);
    1a70:	4601      	mov	r1, r0
    1a72:	483a      	ldr	r0, [pc, #232]	; (1b5c <main+0x104>)
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
				indicating = 1U;
			}
		}
	}
    1a74:	b00c      	add	sp, #48	; 0x30
    1a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1a7a:	f017 ba74 	b.w	18f66 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1a7e:	4d38      	ldr	r5, [pc, #224]	; (1b60 <main+0x108>)
	printk("Bluetooth initialized\n");
    1a80:	4838      	ldr	r0, [pc, #224]	; (1b64 <main+0x10c>)
    1a82:	f017 fa70 	bl	18f66 <printk>
	cts_init();
    1a86:	f7ff ffa9 	bl	19dc <cts_init>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a8c:	ac02      	add	r4, sp, #8
    1a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a90:	682b      	ldr	r3, [r5, #0]
    1a92:	6023      	str	r3, [r4, #0]
    1a94:	4934      	ldr	r1, [pc, #208]	; (1b68 <main+0x110>)
    1a96:	9600      	str	r6, [sp, #0]
    1a98:	4633      	mov	r3, r6
    1a9a:	2203      	movs	r2, #3
    1a9c:	a802      	add	r0, sp, #8
    1a9e:	f003 f841 	bl	4b24 <bt_le_adv_start>
	if (err) {
    1aa2:	4601      	mov	r1, r0
    1aa4:	2800      	cmp	r0, #0
    1aa6:	d050      	beq.n	1b4a <main+0xf2>
		printk("Advertising failed to start (err %d)\n", err);
    1aa8:	4830      	ldr	r0, [pc, #192]	; (1b6c <main+0x114>)
    1aaa:	f017 fa5c 	bl	18f66 <printk>
	bt_gatt_cb_register(&gatt_callbacks);
    1aae:	4830      	ldr	r0, [pc, #192]	; (1b70 <main+0x118>)
	heartrate++;
    1ab0:	4d30      	ldr	r5, [pc, #192]	; (1b74 <main+0x11c>)
		if (simulate_vnd && vnd_ind_attr) {
    1ab2:	4e31      	ldr	r6, [pc, #196]	; (1b78 <main+0x120>)
	bt_gatt_cb_register(&gatt_callbacks);
    1ab4:	f005 fbe8 	bl	7288 <bt_gatt_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    1ab8:	4830      	ldr	r0, [pc, #192]	; (1b7c <main+0x124>)
    1aba:	f003 ffdf 	bl	5a7c <bt_conn_auth_cb_register>
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
    1abe:	4a30      	ldr	r2, [pc, #192]	; (1b80 <main+0x128>)
    1ac0:	4830      	ldr	r0, [pc, #192]	; (1b84 <main+0x12c>)
    1ac2:	210d      	movs	r1, #13
    1ac4:	f005 fcf6 	bl	74b4 <bt_gatt_find_by_uuid>
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
    1ac8:	2225      	movs	r2, #37	; 0x25
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
    1aca:	4604      	mov	r4, r0
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
    1acc:	a902      	add	r1, sp, #8
    1ace:	482c      	ldr	r0, [pc, #176]	; (1b80 <main+0x128>)
    1ad0:	f001 fd9e 	bl	3610 <bt_uuid_to_str>
	printk("Indicate VND attr %p (UUID %s)\n", vnd_ind_attr, str);
    1ad4:	482c      	ldr	r0, [pc, #176]	; (1b88 <main+0x130>)
    1ad6:	aa02      	add	r2, sp, #8
    1ad8:	4621      	mov	r1, r4
    1ada:	f017 fa44 	bl	18f66 <printk>
	return z_impl_k_sleep(timeout);
    1ade:	2100      	movs	r1, #0
    1ae0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1ae4:	f016 fed6 	bl	18894 <z_impl_k_sleep>
		cts_notify();
    1ae8:	f7ff ff96 	bl	1a18 <cts_notify>
	heartrate++;
    1aec:	782b      	ldrb	r3, [r5, #0]
    1aee:	3301      	adds	r3, #1
    1af0:	b2db      	uxtb	r3, r3
	if (heartrate == 160U) {
    1af2:	2ba0      	cmp	r3, #160	; 0xa0
		heartrate = 90U;
    1af4:	bf08      	it	eq
    1af6:	235a      	moveq	r3, #90	; 0x5a
    1af8:	702b      	strb	r3, [r5, #0]
	bt_hrs_notify(heartrate);
    1afa:	7828      	ldrb	r0, [r5, #0]
    1afc:	f000 fd80 	bl	2600 <bt_hrs_notify>
	uint8_t battery_level = bt_bas_get_battery_level();
    1b00:	f000 fd3a 	bl	2578 <bt_bas_get_battery_level>
	battery_level--;
    1b04:	1e43      	subs	r3, r0, #1
		battery_level = 100U;
    1b06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	bt_bas_set_battery_level(battery_level);
    1b0a:	bf14      	ite	ne
    1b0c:	4618      	movne	r0, r3
    1b0e:	2064      	moveq	r0, #100	; 0x64
    1b10:	f000 fd38 	bl	2584 <bt_bas_set_battery_level>
		if (simulate_vnd && vnd_ind_attr) {
    1b14:	7833      	ldrb	r3, [r6, #0]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d0e1      	beq.n	1ade <main+0x86>
    1b1a:	2c00      	cmp	r4, #0
    1b1c:	d0df      	beq.n	1ade <main+0x86>
			if (indicating) {
    1b1e:	4f1b      	ldr	r7, [pc, #108]	; (1b8c <main+0x134>)
    1b20:	7838      	ldrb	r0, [r7, #0]
    1b22:	2800      	cmp	r0, #0
    1b24:	d1db      	bne.n	1ade <main+0x86>
			ind_params.attr = vnd_ind_attr;
    1b26:	491a      	ldr	r1, [pc, #104]	; (1b90 <main+0x138>)
			ind_params.func = indicate_cb;
    1b28:	4b1a      	ldr	r3, [pc, #104]	; (1b94 <main+0x13c>)
    1b2a:	608b      	str	r3, [r1, #8]
			ind_params.destroy = indicate_destroy;
    1b2c:	4b1a      	ldr	r3, [pc, #104]	; (1b98 <main+0x140>)
			ind_params.attr = vnd_ind_attr;
    1b2e:	604c      	str	r4, [r1, #4]
			ind_params.len = sizeof(indicating);
    1b30:	f04f 0801 	mov.w	r8, #1
			ind_params.data = &indicating;
    1b34:	e9c1 3703 	strd	r3, r7, [r1, #12]
			ind_params.len = sizeof(indicating);
    1b38:	f8a1 8014 	strh.w	r8, [r1, #20]
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    1b3c:	f005 fd26 	bl	758c <bt_gatt_indicate>
    1b40:	2800      	cmp	r0, #0
    1b42:	d1cc      	bne.n	1ade <main+0x86>
				indicating = 1U;
    1b44:	f887 8000 	strb.w	r8, [r7]
    1b48:	e7c9      	b.n	1ade <main+0x86>
	printk("Advertising successfully started\n");
    1b4a:	4814      	ldr	r0, [pc, #80]	; (1b9c <main+0x144>)
    1b4c:	f017 fa0b 	bl	18f66 <printk>
    1b50:	e7ad      	b.n	1aae <main+0x56>
    1b52:	bf00      	nop
    1b54:	00020a25 	.word	0x00020a25
    1b58:	00020a39 	.word	0x00020a39
    1b5c:	00020a4a 	.word	0x00020a4a
    1b60:	0001f380 	.word	0x0001f380
    1b64:	00020a6a 	.word	0x00020a6a
    1b68:	0001f438 	.word	0x0001f438
    1b6c:	00020a81 	.word	0x00020a81
    1b70:	200001f8 	.word	0x200001f8
    1b74:	20000949 	.word	0x20000949
    1b78:	200028ec 	.word	0x200028ec
    1b7c:	200001e0 	.word	0x200001e0
    1b80:	20000970 	.word	0x20000970
    1b84:	0001f4a0 	.word	0x0001f4a0
    1b88:	00020ac9 	.word	0x00020ac9
    1b8c:	200028eb 	.word	0x200028eb
    1b90:	20001658 	.word	0x20001658
    1b94:	00001905 	.word	0x00001905
    1b98:	000018ed 	.word	0x000018ed
    1b9c:	00020aa7 	.word	0x00020aa7

00001ba0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1ba0:	680b      	ldr	r3, [r1, #0]
    1ba2:	3301      	adds	r3, #1
    1ba4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1ba6:	4b01      	ldr	r3, [pc, #4]	; (1bac <char_out+0xc>)
    1ba8:	681b      	ldr	r3, [r3, #0]
    1baa:	4718      	bx	r3
    1bac:	20000200 	.word	0x20000200

00001bb0 <__printk_hook_install>:
	_char_out = fn;
    1bb0:	4b01      	ldr	r3, [pc, #4]	; (1bb8 <__printk_hook_install+0x8>)
    1bb2:	6018      	str	r0, [r3, #0]
}
    1bb4:	4770      	bx	lr
    1bb6:	bf00      	nop
    1bb8:	20000200 	.word	0x20000200

00001bbc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    1bbe:	2400      	movs	r4, #0
{
    1bc0:	4602      	mov	r2, r0
    1bc2:	460b      	mov	r3, r1
 * returned from invoking @p out.
 */
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1bc4:	9400      	str	r4, [sp, #0]
    1bc6:	a903      	add	r1, sp, #12
    1bc8:	4802      	ldr	r0, [pc, #8]	; (1bd4 <vprintk+0x18>)
		struct out_context ctx = { 0 };
    1bca:	9403      	str	r4, [sp, #12]
    1bcc:	f000 f8fa 	bl	1dc4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1bd0:	b004      	add	sp, #16
    1bd2:	bd10      	pop	{r4, pc}
    1bd4:	00001ba1 	.word	0x00001ba1

00001bd8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1bd8:	b530      	push	{r4, r5, lr}
    1bda:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1bdc:	2500      	movs	r5, #0
    1bde:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1be2:	4604      	mov	r4, r0
    1be4:	9500      	str	r5, [sp, #0]
    1be6:	a903      	add	r1, sp, #12
    1be8:	4805      	ldr	r0, [pc, #20]	; (1c00 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    1bea:	9505      	str	r5, [sp, #20]
    1bec:	f000 f8ea 	bl	1dc4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1bf0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1bf4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1bf6:	bfb8      	it	lt
    1bf8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1bfa:	b007      	add	sp, #28
    1bfc:	bd30      	pop	{r4, r5, pc}
    1bfe:	bf00      	nop
    1c00:	00018f41 	.word	0x00018f41

00001c04 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c08:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1c0c:	f019 0808 	ands.w	r8, r9, #8
{
    1c10:	4604      	mov	r4, r0
    1c12:	4693      	mov	fp, r2
	if (processing) {
    1c14:	d00d      	beq.n	1c32 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1c16:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1c18:	bf0c      	ite	eq
    1c1a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c1e:	f049 0920 	orrne.w	r9, r9, #32
    1c22:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c26:	f38b 8811 	msr	BASEPRI, fp
    1c2a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c32:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1c36:	2902      	cmp	r1, #2
    1c38:	d107      	bne.n	1c4a <process_event+0x46>
			evt = process_recheck(mgr);
    1c3a:	4620      	mov	r0, r4
    1c3c:	f017 f9ad 	bl	18f9a <process_recheck>
		if (evt == EVT_NOP) {
    1c40:	2800      	cmp	r0, #0
    1c42:	d0f0      	beq.n	1c26 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1c44:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c46:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1c48:	d14e      	bne.n	1ce8 <process_event+0xe4>
			res = mgr->last_res;
    1c4a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c4c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1c4e:	2f00      	cmp	r7, #0
    1c50:	da15      	bge.n	1c7e <process_event+0x7a>
		*clients = mgr->clients;
    1c52:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c54:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1c58:	e9c4 8800 	strd	r8, r8, [r4]
    1c5c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c60:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1c62:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c64:	8b21      	ldrh	r1, [r4, #24]
    1c66:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c6a:	45ca      	cmp	sl, r9
    1c6c:	d002      	beq.n	1c74 <process_event+0x70>
		if (do_monitors
    1c6e:	68a3      	ldr	r3, [r4, #8]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d15a      	bne.n	1d2a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1c74:	b90d      	cbnz	r5, 1c7a <process_event+0x76>
		    || (transit != NULL)) {
    1c76:	2e00      	cmp	r6, #0
    1c78:	d071      	beq.n	1d5e <process_event+0x15a>
    1c7a:	2300      	movs	r3, #0
    1c7c:	e056      	b.n	1d2c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c7e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1c82:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1c84:	2a01      	cmp	r2, #1
    1c86:	d81e      	bhi.n	1cc6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c88:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1c8c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1c8e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c90:	b289      	uxth	r1, r1
    1c92:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1c96:	d10a      	bne.n	1cae <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c98:	b13d      	cbz	r5, 1caa <process_event+0xa6>
    1c9a:	8b63      	ldrh	r3, [r4, #26]
    1c9c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1c9e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1ca0:	3301      	adds	r3, #1
    1ca2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1ca4:	2a00      	cmp	r2, #0
    1ca6:	d1fa      	bne.n	1c9e <process_event+0x9a>
    1ca8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1caa:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cae:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1cb0:	4620      	mov	r0, r4
    1cb2:	f017 f972 	bl	18f9a <process_recheck>
    1cb6:	4606      	mov	r6, r0
    1cb8:	2800      	cmp	r0, #0
    1cba:	d0d3      	beq.n	1c64 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cbc:	8b23      	ldrh	r3, [r4, #24]
    1cbe:	f043 0320 	orr.w	r3, r3, #32
    1cc2:	8323      	strh	r3, [r4, #24]
    1cc4:	e7cd      	b.n	1c62 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1cc6:	2b04      	cmp	r3, #4
    1cc8:	d10c      	bne.n	1ce4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cca:	f021 0107 	bic.w	r1, r1, #7
    1cce:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cd0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1cd2:	4620      	mov	r0, r4
    1cd4:	f017 f961 	bl	18f9a <process_recheck>
    1cd8:	4605      	mov	r5, r0
    1cda:	2800      	cmp	r0, #0
    1cdc:	d0c1      	beq.n	1c62 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cde:	f041 0120 	orr.w	r1, r1, #32
    1ce2:	8321      	strh	r1, [r4, #24]
    1ce4:	2500      	movs	r5, #0
    1ce6:	e7bc      	b.n	1c62 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1ce8:	2803      	cmp	r0, #3
    1cea:	d109      	bne.n	1d00 <process_event+0xfc>
			transit = mgr->transitions->start;
    1cec:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cee:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1cf2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cf4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cf8:	8323      	strh	r3, [r4, #24]
}
    1cfa:	2500      	movs	r5, #0
		res = 0;
    1cfc:	462f      	mov	r7, r5
    1cfe:	e7b1      	b.n	1c64 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1d00:	2804      	cmp	r0, #4
    1d02:	d106      	bne.n	1d12 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1d04:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d06:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1d0a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d0c:	f043 0304 	orr.w	r3, r3, #4
    1d10:	e7f2      	b.n	1cf8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1d12:	2805      	cmp	r0, #5
    1d14:	d106      	bne.n	1d24 <process_event+0x120>
			transit = mgr->transitions->reset;
    1d16:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d18:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1d1c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d1e:	f043 0305 	orr.w	r3, r3, #5
    1d22:	e7e9      	b.n	1cf8 <process_event+0xf4>
    1d24:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1d26:	462e      	mov	r6, r5
    1d28:	e7e8      	b.n	1cfc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1d2a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1d2c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1d30:	8321      	strh	r1, [r4, #24]
    1d32:	f38b 8811 	msr	BASEPRI, fp
    1d36:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1d3a:	b9fb      	cbnz	r3, 1d7c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1d3c:	bb85      	cbnz	r5, 1da0 <process_event+0x19c>
			if (transit != NULL) {
    1d3e:	b116      	cbz	r6, 1d46 <process_event+0x142>
				transit(mgr, transition_complete);
    1d40:	491f      	ldr	r1, [pc, #124]	; (1dc0 <process_event+0x1bc>)
    1d42:	4620      	mov	r0, r4
    1d44:	47b0      	blx	r6
	__asm__ volatile(
    1d46:	f04f 0320 	mov.w	r3, #32
    1d4a:	f3ef 8b11 	mrs	fp, BASEPRI
    1d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d52:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1d56:	8b23      	ldrh	r3, [r4, #24]
    1d58:	f023 0308 	bic.w	r3, r3, #8
    1d5c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1d5e:	8b23      	ldrh	r3, [r4, #24]
    1d60:	06da      	lsls	r2, r3, #27
    1d62:	d525      	bpl.n	1db0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1d64:	f023 0310 	bic.w	r3, r3, #16
    1d68:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1d6a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1d6c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1d70:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1d74:	2900      	cmp	r1, #0
    1d76:	f47f af5e 	bne.w	1c36 <process_event+0x32>
out:
    1d7a:	e754      	b.n	1c26 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1d7c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d7e:	2900      	cmp	r1, #0
    1d80:	d0dc      	beq.n	1d3c <process_event+0x138>
	return node->next;
    1d82:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1d86:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1d8a:	463b      	mov	r3, r7
    1d8c:	4652      	mov	r2, sl
    1d8e:	4620      	mov	r0, r4
    1d90:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d92:	f1b9 0f00 	cmp.w	r9, #0
    1d96:	d0d1      	beq.n	1d3c <process_event+0x138>
    1d98:	4649      	mov	r1, r9
    1d9a:	f8d9 9000 	ldr.w	r9, [r9]
    1d9e:	e7f2      	b.n	1d86 <process_event+0x182>
    1da0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1da2:	463b      	mov	r3, r7
    1da4:	4652      	mov	r2, sl
    1da6:	4620      	mov	r0, r4
    1da8:	682d      	ldr	r5, [r5, #0]
    1daa:	f017 f912 	bl	18fd2 <notify_one>
    1dae:	e7c5      	b.n	1d3c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1db0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1db4:	bf1e      	ittt	ne
    1db6:	f023 0320 	bicne.w	r3, r3, #32
    1dba:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1dbc:	2102      	movne	r1, #2
    1dbe:	e7d5      	b.n	1d6c <process_event+0x168>
    1dc0:	00018fff 	.word	0x00018fff

00001dc4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dc8:	b091      	sub	sp, #68	; 0x44
    1dca:	468b      	mov	fp, r1
    1dcc:	9002      	str	r0, [sp, #8]
    1dce:	4692      	mov	sl, r2
    1dd0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1dd2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1dd4:	f89a 0000 	ldrb.w	r0, [sl]
    1dd8:	b908      	cbnz	r0, 1dde <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1dda:	4628      	mov	r0, r5
    1ddc:	e363      	b.n	24a6 <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
    1dde:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1de0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1de4:	d007      	beq.n	1df6 <z_cbvprintf_impl+0x32>
			OUTC('%');
    1de6:	9b02      	ldr	r3, [sp, #8]
    1de8:	4659      	mov	r1, fp
    1dea:	4798      	blx	r3
    1dec:	2800      	cmp	r0, #0
    1dee:	f2c0 835a 	blt.w	24a6 <z_cbvprintf_impl+0x6e2>
    1df2:	3501      	adds	r5, #1
			break;
    1df4:	e212      	b.n	221c <z_cbvprintf_impl+0x458>
		} state = {
    1df6:	2218      	movs	r2, #24
    1df8:	2100      	movs	r1, #0
    1dfa:	a80a      	add	r0, sp, #40	; 0x28
    1dfc:	f018 fd34 	bl	1a868 <memset>
	if (*sp == '%') {
    1e00:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1e04:	2b25      	cmp	r3, #37	; 0x25
    1e06:	d078      	beq.n	1efa <z_cbvprintf_impl+0x136>
    1e08:	2200      	movs	r2, #0
    1e0a:	4610      	mov	r0, r2
    1e0c:	4696      	mov	lr, r2
    1e0e:	4694      	mov	ip, r2
    1e10:	4616      	mov	r6, r2
    1e12:	4639      	mov	r1, r7
		switch (*sp) {
    1e14:	f817 3b01 	ldrb.w	r3, [r7], #1
    1e18:	2b2b      	cmp	r3, #43	; 0x2b
    1e1a:	f000 809d 	beq.w	1f58 <z_cbvprintf_impl+0x194>
    1e1e:	f200 8094 	bhi.w	1f4a <z_cbvprintf_impl+0x186>
    1e22:	2b20      	cmp	r3, #32
    1e24:	f000 809b 	beq.w	1f5e <z_cbvprintf_impl+0x19a>
    1e28:	2b23      	cmp	r3, #35	; 0x23
    1e2a:	f000 809b 	beq.w	1f64 <z_cbvprintf_impl+0x1a0>
    1e2e:	b12e      	cbz	r6, 1e3c <z_cbvprintf_impl+0x78>
    1e30:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e34:	f046 0604 	orr.w	r6, r6, #4
    1e38:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e3c:	f1bc 0f00 	cmp.w	ip, #0
    1e40:	d005      	beq.n	1e4e <z_cbvprintf_impl+0x8a>
    1e42:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e46:	f046 0608 	orr.w	r6, r6, #8
    1e4a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e4e:	f1be 0f00 	cmp.w	lr, #0
    1e52:	d005      	beq.n	1e60 <z_cbvprintf_impl+0x9c>
    1e54:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e58:	f046 0610 	orr.w	r6, r6, #16
    1e5c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e60:	b128      	cbz	r0, 1e6e <z_cbvprintf_impl+0xaa>
    1e62:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1e66:	f040 0020 	orr.w	r0, r0, #32
    1e6a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1e6e:	b12a      	cbz	r2, 1e7c <z_cbvprintf_impl+0xb8>
    1e70:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1e78:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1e7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e80:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1e84:	2844      	cmp	r0, #68	; 0x44
    1e86:	d103      	bne.n	1e90 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1e88:	f36f 1286 	bfc	r2, #6, #1
    1e8c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1e90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1e94:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1e9a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1e9e:	d17b      	bne.n	1f98 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
    1ea0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1ea4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1ea8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1eaa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1eae:	781a      	ldrb	r2, [r3, #0]
    1eb0:	2a2e      	cmp	r2, #46	; 0x2e
    1eb2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1eb6:	bf0c      	ite	eq
    1eb8:	2101      	moveq	r1, #1
    1eba:	2100      	movne	r1, #0
    1ebc:	f361 0241 	bfi	r2, r1, #1, #1
    1ec0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1ec4:	d174      	bne.n	1fb0 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
    1ec6:	785a      	ldrb	r2, [r3, #1]
    1ec8:	2a2a      	cmp	r2, #42	; 0x2a
    1eca:	d06a      	beq.n	1fa2 <z_cbvprintf_impl+0x1de>
	++sp;
    1ecc:	3301      	adds	r3, #1
	size_t val = 0;
    1ece:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1ed0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1ed2:	4618      	mov	r0, r3
    1ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
    1ed8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1edc:	2f09      	cmp	r7, #9
    1ede:	f240 808e 	bls.w	1ffe <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1ee2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1ee6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1ee8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1eec:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1ef0:	f361 0241 	bfi	r2, r1, #1, #1
    1ef4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1ef8:	e05a      	b.n	1fb0 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
    1efa:	f10a 0702 	add.w	r7, sl, #2
    1efe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1f02:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1f06:	07d9      	lsls	r1, r3, #31
    1f08:	f140 8149 	bpl.w	219e <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
    1f0c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1f10:	f1b9 0f00 	cmp.w	r9, #0
    1f14:	da07      	bge.n	1f26 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
    1f16:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1f1a:	f042 0204 	orr.w	r2, r2, #4
    1f1e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1f22:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1f26:	075a      	lsls	r2, r3, #29
    1f28:	f140 8142 	bpl.w	21b0 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
    1f2c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1f30:	f1b8 0f00 	cmp.w	r8, #0
    1f34:	f280 8141 	bge.w	21ba <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
    1f38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1f3c:	f36f 0341 	bfc	r3, #1, #1
    1f40:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1f44:	f04f 38ff 	mov.w	r8, #4294967295
    1f48:	e137      	b.n	21ba <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
    1f4a:	2b2d      	cmp	r3, #45	; 0x2d
    1f4c:	d00c      	beq.n	1f68 <z_cbvprintf_impl+0x1a4>
    1f4e:	2b30      	cmp	r3, #48	; 0x30
    1f50:	f47f af6d 	bne.w	1e2e <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
    1f54:	2201      	movs	r2, #1
	} while (loop);
    1f56:	e75c      	b.n	1e12 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
    1f58:	f04f 0c01 	mov.w	ip, #1
    1f5c:	e759      	b.n	1e12 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
    1f5e:	f04f 0e01 	mov.w	lr, #1
    1f62:	e756      	b.n	1e12 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
    1f64:	2001      	movs	r0, #1
    1f66:	e754      	b.n	1e12 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    1f68:	2601      	movs	r6, #1
    1f6a:	e752      	b.n	1e12 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
    1f6c:	fb0c 0202 	mla	r2, ip, r2, r0
    1f70:	3a30      	subs	r2, #48	; 0x30
    1f72:	4633      	mov	r3, r6
    1f74:	461e      	mov	r6, r3
    1f76:	f816 0b01 	ldrb.w	r0, [r6], #1
    1f7a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1f7e:	2f09      	cmp	r7, #9
    1f80:	d9f4      	bls.n	1f6c <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
    1f82:	4299      	cmp	r1, r3
    1f84:	d093      	beq.n	1eae <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1f86:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1f8a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1f8c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1f8e:	f362 0141 	bfi	r1, r2, #1, #1
    1f92:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1f96:	e78a      	b.n	1eae <z_cbvprintf_impl+0xea>
    1f98:	460b      	mov	r3, r1
	size_t val = 0;
    1f9a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1f9c:	f04f 0c0a 	mov.w	ip, #10
    1fa0:	e7e8      	b.n	1f74 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
    1fa2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1fa6:	f042 0204 	orr.w	r2, r2, #4
    1faa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1fae:	3302      	adds	r3, #2
	switch (*sp) {
    1fb0:	461f      	mov	r7, r3
    1fb2:	f817 2b01 	ldrb.w	r2, [r7], #1
    1fb6:	2a6c      	cmp	r2, #108	; 0x6c
    1fb8:	d041      	beq.n	203e <z_cbvprintf_impl+0x27a>
    1fba:	d825      	bhi.n	2008 <z_cbvprintf_impl+0x244>
    1fbc:	2a68      	cmp	r2, #104	; 0x68
    1fbe:	d02b      	beq.n	2018 <z_cbvprintf_impl+0x254>
    1fc0:	2a6a      	cmp	r2, #106	; 0x6a
    1fc2:	d046      	beq.n	2052 <z_cbvprintf_impl+0x28e>
    1fc4:	2a4c      	cmp	r2, #76	; 0x4c
    1fc6:	d04c      	beq.n	2062 <z_cbvprintf_impl+0x29e>
    1fc8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1fca:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1fd2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1fd6:	2a78      	cmp	r2, #120	; 0x78
    1fd8:	f200 80d9 	bhi.w	218e <z_cbvprintf_impl+0x3ca>
    1fdc:	2a57      	cmp	r2, #87	; 0x57
    1fde:	d84d      	bhi.n	207c <z_cbvprintf_impl+0x2b8>
    1fe0:	2a41      	cmp	r2, #65	; 0x41
    1fe2:	d003      	beq.n	1fec <z_cbvprintf_impl+0x228>
    1fe4:	3a45      	subs	r2, #69	; 0x45
    1fe6:	2a02      	cmp	r2, #2
    1fe8:	f200 80d1 	bhi.w	218e <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1fec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1ff0:	2204      	movs	r2, #4
    1ff2:	f362 0302 	bfi	r3, r2, #0, #3
    1ff6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1ffa:	2301      	movs	r3, #1
			break;
    1ffc:	e09e      	b.n	213c <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
    1ffe:	fb06 2101 	mla	r1, r6, r1, r2
    2002:	3930      	subs	r1, #48	; 0x30
    2004:	4603      	mov	r3, r0
    2006:	e764      	b.n	1ed2 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
    2008:	2a74      	cmp	r2, #116	; 0x74
    200a:	d026      	beq.n	205a <z_cbvprintf_impl+0x296>
    200c:	2a7a      	cmp	r2, #122	; 0x7a
    200e:	d1db      	bne.n	1fc8 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
    2010:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2014:	2206      	movs	r2, #6
    2016:	e00d      	b.n	2034 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
    2018:	785a      	ldrb	r2, [r3, #1]
    201a:	2a68      	cmp	r2, #104	; 0x68
    201c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2020:	d106      	bne.n	2030 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
    2022:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2024:	f361 02c6 	bfi	r2, r1, #3, #4
    2028:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    202c:	1c9f      	adds	r7, r3, #2
    202e:	e7cc      	b.n	1fca <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
    2030:	4613      	mov	r3, r2
    2032:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    2034:	f362 03c6 	bfi	r3, r2, #3, #4
    2038:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    203c:	e7c5      	b.n	1fca <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
    203e:	785a      	ldrb	r2, [r3, #1]
    2040:	2a6c      	cmp	r2, #108	; 0x6c
    2042:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2046:	d101      	bne.n	204c <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
    2048:	2104      	movs	r1, #4
    204a:	e7eb      	b.n	2024 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
    204c:	4613      	mov	r3, r2
    204e:	2203      	movs	r2, #3
    2050:	e7f0      	b.n	2034 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
    2052:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2056:	2205      	movs	r2, #5
    2058:	e7ec      	b.n	2034 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
    205a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    205e:	2207      	movs	r2, #7
    2060:	e7e8      	b.n	2034 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
    2062:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    2066:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    206a:	f023 0302 	bic.w	r3, r3, #2
    206e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2072:	f043 0302 	orr.w	r3, r3, #2
    2076:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    207a:	e7a6      	b.n	1fca <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
    207c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2080:	2920      	cmp	r1, #32
    2082:	f200 8084 	bhi.w	218e <z_cbvprintf_impl+0x3ca>
    2086:	a001      	add	r0, pc, #4	; (adr r0, 208c <z_cbvprintf_impl+0x2c8>)
    2088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    208c:	00002151 	.word	0x00002151
    2090:	0000218f 	.word	0x0000218f
    2094:	0000218f 	.word	0x0000218f
    2098:	0000218f 	.word	0x0000218f
    209c:	0000218f 	.word	0x0000218f
    20a0:	0000218f 	.word	0x0000218f
    20a4:	0000218f 	.word	0x0000218f
    20a8:	0000218f 	.word	0x0000218f
    20ac:	0000218f 	.word	0x0000218f
    20b0:	00001fed 	.word	0x00001fed
    20b4:	0000218f 	.word	0x0000218f
    20b8:	00002151 	.word	0x00002151
    20bc:	00002111 	.word	0x00002111
    20c0:	00001fed 	.word	0x00001fed
    20c4:	00001fed 	.word	0x00001fed
    20c8:	00001fed 	.word	0x00001fed
    20cc:	0000218f 	.word	0x0000218f
    20d0:	00002111 	.word	0x00002111
    20d4:	0000218f 	.word	0x0000218f
    20d8:	0000218f 	.word	0x0000218f
    20dc:	0000218f 	.word	0x0000218f
    20e0:	0000218f 	.word	0x0000218f
    20e4:	00002159 	.word	0x00002159
    20e8:	00002151 	.word	0x00002151
    20ec:	00002175 	.word	0x00002175
    20f0:	0000218f 	.word	0x0000218f
    20f4:	0000218f 	.word	0x0000218f
    20f8:	00002175 	.word	0x00002175
    20fc:	0000218f 	.word	0x0000218f
    2100:	00002151 	.word	0x00002151
    2104:	0000218f 	.word	0x0000218f
    2108:	0000218f 	.word	0x0000218f
    210c:	00002151 	.word	0x00002151
		conv->specifier_cat = SPECIFIER_SINT;
    2110:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    2114:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    2116:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    211a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    211e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2120:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    2124:	bf02      	ittt	eq
    2126:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    212a:	f041 0101 	orreq.w	r1, r1, #1
    212e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    2132:	2a63      	cmp	r2, #99	; 0x63
    2134:	d131      	bne.n	219a <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2136:	3b00      	subs	r3, #0
    2138:	bf18      	it	ne
    213a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    213c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2140:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2144:	430b      	orrs	r3, r1
    2146:	f363 0241 	bfi	r2, r3, #1, #1
    214a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    214e:	e6d8      	b.n	1f02 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    2150:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    2154:	2002      	movs	r0, #2
    2156:	e7de      	b.n	2116 <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    2158:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    215c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2160:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2164:	2103      	movs	r1, #3
    2166:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    216a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    216c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2170:	4143      	adcs	r3, r0
    2172:	e7e3      	b.n	213c <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    2174:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2178:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    217a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    217e:	f361 0202 	bfi	r2, r1, #0, #3
    2182:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    2186:	bf14      	ite	ne
    2188:	2301      	movne	r3, #1
    218a:	2300      	moveq	r3, #0
    218c:	e7d6      	b.n	213c <z_cbvprintf_impl+0x378>
		conv->invalid = true;
    218e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2192:	f043 0301 	orr.w	r3, r3, #1
    2196:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    219a:	2300      	movs	r3, #0
    219c:	e7ce      	b.n	213c <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
    219e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    21a2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    21a4:	bfb4      	ite	lt
    21a6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    21aa:	f04f 39ff 	movge.w	r9, #4294967295
    21ae:	e6ba      	b.n	1f26 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
    21b0:	079b      	lsls	r3, r3, #30
    21b2:	f57f aec7 	bpl.w	1f44 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
    21b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    21ba:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    21be:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    21c0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    21c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    21c8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    21cc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    21ce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    21d2:	d135      	bne.n	2240 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
    21d4:	1ecb      	subs	r3, r1, #3
    21d6:	2b04      	cmp	r3, #4
    21d8:	d822      	bhi.n	2220 <z_cbvprintf_impl+0x45c>
    21da:	e8df f003 	tbb	[pc, r3]
    21de:	0903      	.short	0x0903
    21e0:	2109      	.short	0x2109
    21e2:	21          	.byte	0x21
    21e3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    21e4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    21e8:	17da      	asrs	r2, r3, #31
    21ea:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    21ee:	e006      	b.n	21fe <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    21f0:	3407      	adds	r4, #7
    21f2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    21f6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    21fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    21fe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2202:	f013 0603 	ands.w	r6, r3, #3
    2206:	d059      	beq.n	22bc <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
    2208:	9802      	ldr	r0, [sp, #8]
    220a:	463b      	mov	r3, r7
    220c:	4652      	mov	r2, sl
    220e:	4659      	mov	r1, fp
    2210:	f017 f9a9 	bl	19566 <outs>
    2214:	2800      	cmp	r0, #0
    2216:	f2c0 8146 	blt.w	24a6 <z_cbvprintf_impl+0x6e2>
    221a:	4405      	add	r5, r0
			continue;
    221c:	46ba      	mov	sl, r7
    221e:	e5d9      	b.n	1dd4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2220:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2224:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2226:	ea4f 72e3 	mov.w	r2, r3, asr #31
    222a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    222e:	d102      	bne.n	2236 <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
    2230:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    2234:	e7d8      	b.n	21e8 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
    2236:	2902      	cmp	r1, #2
    2238:	d1e1      	bne.n	21fe <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
    223a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    223e:	e7d3      	b.n	21e8 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2240:	2b02      	cmp	r3, #2
    2242:	d129      	bne.n	2298 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
    2244:	1ecb      	subs	r3, r1, #3
    2246:	2b04      	cmp	r3, #4
    2248:	d813      	bhi.n	2272 <z_cbvprintf_impl+0x4ae>
    224a:	e8df f003 	tbb	[pc, r3]
    224e:	0a03      	.short	0x0a03
    2250:	120a      	.short	0x120a
    2252:	12          	.byte	0x12
    2253:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    2254:	6822      	ldr	r2, [r4, #0]
    2256:	920a      	str	r2, [sp, #40]	; 0x28
    2258:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    225a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    225c:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    225e:	4604      	mov	r4, r0
    2260:	e7cd      	b.n	21fe <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
    2262:	1de0      	adds	r0, r4, #7
    2264:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    2268:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    226c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    2270:	e7f5      	b.n	225e <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
    2272:	f854 3b04 	ldr.w	r3, [r4], #4
    2276:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    2278:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    227a:	f04f 0300 	mov.w	r3, #0
    227e:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    2280:	d105      	bne.n	228e <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
    2282:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    2286:	930a      	str	r3, [sp, #40]	; 0x28
    2288:	2300      	movs	r3, #0
    228a:	930b      	str	r3, [sp, #44]	; 0x2c
    228c:	e7b7      	b.n	21fe <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
    228e:	2902      	cmp	r1, #2
    2290:	d1b5      	bne.n	21fe <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
    2292:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    2296:	e7f6      	b.n	2286 <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
    2298:	2b04      	cmp	r3, #4
    229a:	d109      	bne.n	22b0 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    229c:	1de3      	adds	r3, r4, #7
    229e:	f023 0307 	bic.w	r3, r3, #7
    22a2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    22a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    22aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    22ae:	e7a6      	b.n	21fe <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    22b0:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    22b2:	bf04      	itt	eq
    22b4:	f854 3b04 	ldreq.w	r3, [r4], #4
    22b8:	930a      	streq	r3, [sp, #40]	; 0x28
    22ba:	e7a0      	b.n	21fe <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
    22bc:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    22c0:	2878      	cmp	r0, #120	; 0x78
    22c2:	d8ab      	bhi.n	221c <z_cbvprintf_impl+0x458>
    22c4:	2862      	cmp	r0, #98	; 0x62
    22c6:	d822      	bhi.n	230e <z_cbvprintf_impl+0x54a>
    22c8:	2825      	cmp	r0, #37	; 0x25
    22ca:	f43f ad8c 	beq.w	1de6 <z_cbvprintf_impl+0x22>
    22ce:	2858      	cmp	r0, #88	; 0x58
    22d0:	d1a4      	bne.n	221c <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    22d2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    22d6:	9300      	str	r3, [sp, #0]
    22d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    22dc:	ab04      	add	r3, sp, #16
    22de:	aa0c      	add	r2, sp, #48	; 0x30
    22e0:	f017 f8fb 	bl	194da <encode_uint>
    22e4:	4682      	mov	sl, r0
			if (precision >= 0) {
    22e6:	f1b8 0f00 	cmp.w	r8, #0
    22ea:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    22ee:	db0c      	blt.n	230a <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
    22f0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    22f4:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    22f8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    22fc:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    22fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    2302:	d902      	bls.n	230a <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
    2304:	eba8 0303 	sub.w	r3, r8, r3
    2308:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    230a:	4680      	mov	r8, r0
    230c:	e03e      	b.n	238c <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
    230e:	3863      	subs	r0, #99	; 0x63
    2310:	2815      	cmp	r0, #21
    2312:	d883      	bhi.n	221c <z_cbvprintf_impl+0x458>
    2314:	a201      	add	r2, pc, #4	; (adr r2, 231c <z_cbvprintf_impl+0x558>)
    2316:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    231a:	bf00      	nop
    231c:	0000239d 	.word	0x0000239d
    2320:	00002401 	.word	0x00002401
    2324:	0000221d 	.word	0x0000221d
    2328:	0000221d 	.word	0x0000221d
    232c:	0000221d 	.word	0x0000221d
    2330:	0000221d 	.word	0x0000221d
    2334:	00002401 	.word	0x00002401
    2338:	0000221d 	.word	0x0000221d
    233c:	0000221d 	.word	0x0000221d
    2340:	0000221d 	.word	0x0000221d
    2344:	0000221d 	.word	0x0000221d
    2348:	0000245b 	.word	0x0000245b
    234c:	00002429 	.word	0x00002429
    2350:	0000242d 	.word	0x0000242d
    2354:	0000221d 	.word	0x0000221d
    2358:	0000221d 	.word	0x0000221d
    235c:	00002375 	.word	0x00002375
    2360:	0000221d 	.word	0x0000221d
    2364:	00002429 	.word	0x00002429
    2368:	0000221d 	.word	0x0000221d
    236c:	0000221d 	.word	0x0000221d
    2370:	00002429 	.word	0x00002429
			if (precision >= 0) {
    2374:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2378:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    237c:	db0a      	blt.n	2394 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
    237e:	4641      	mov	r1, r8
    2380:	4650      	mov	r0, sl
    2382:	f018 fa40 	bl	1a806 <strnlen>
			bpe = bps + len;
    2386:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    238a:	2600      	movs	r6, #0
		if (bps == NULL) {
    238c:	f1ba 0f00 	cmp.w	sl, #0
    2390:	d10c      	bne.n	23ac <z_cbvprintf_impl+0x5e8>
    2392:	e743      	b.n	221c <z_cbvprintf_impl+0x458>
				len = strlen(bps);
    2394:	4650      	mov	r0, sl
    2396:	f018 fa2f 	bl	1a7f8 <strlen>
    239a:	e7f4      	b.n	2386 <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    239c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    239e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    23a2:	2600      	movs	r6, #0
			bps = buf;
    23a4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    23a8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    23ac:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    23b0:	b106      	cbz	r6, 23b4 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
    23b2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    23b4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    23b8:	06d0      	lsls	r0, r2, #27
    23ba:	d568      	bpl.n	248e <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
    23bc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    23be:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    23c0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    23c2:	bf48      	it	mi
    23c4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    23c6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    23c8:	bf48      	it	mi
    23ca:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    23cc:	f1b9 0f00 	cmp.w	r9, #0
    23d0:	dd76      	ble.n	24c0 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
    23d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    23d6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    23da:	f3c2 0380 	ubfx	r3, r2, #2, #1
    23de:	9303      	str	r3, [sp, #12]
    23e0:	0753      	lsls	r3, r2, #29
    23e2:	d46d      	bmi.n	24c0 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
    23e4:	0650      	lsls	r0, r2, #25
    23e6:	d561      	bpl.n	24ac <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
    23e8:	b146      	cbz	r6, 23fc <z_cbvprintf_impl+0x638>
						OUTC(sign);
    23ea:	9b02      	ldr	r3, [sp, #8]
    23ec:	4659      	mov	r1, fp
    23ee:	4630      	mov	r0, r6
    23f0:	4798      	blx	r3
    23f2:	2800      	cmp	r0, #0
    23f4:	db57      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
						sign = 0;
    23f6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    23f8:	3501      	adds	r5, #1
						sign = 0;
    23fa:	461e      	mov	r6, r3
					pad = '0';
    23fc:	2330      	movs	r3, #48	; 0x30
    23fe:	e056      	b.n	24ae <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
    2400:	071e      	lsls	r6, r3, #28
    2402:	d40f      	bmi.n	2424 <z_cbvprintf_impl+0x660>
				sign = ' ';
    2404:	f013 0610 	ands.w	r6, r3, #16
    2408:	bf18      	it	ne
    240a:	2620      	movne	r6, #32
			sint = value->sint;
    240c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    2410:	2b00      	cmp	r3, #0
    2412:	f6bf af5e 	bge.w	22d2 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
    2416:	4252      	negs	r2, r2
    2418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    241c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    2420:	262d      	movs	r6, #45	; 0x2d
    2422:	e756      	b.n	22d2 <z_cbvprintf_impl+0x50e>
				sign = '+';
    2424:	262b      	movs	r6, #43	; 0x2b
    2426:	e7f1      	b.n	240c <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
    2428:	2600      	movs	r6, #0
    242a:	e752      	b.n	22d2 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
    242c:	980a      	ldr	r0, [sp, #40]	; 0x28
    242e:	b340      	cbz	r0, 2482 <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2430:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2434:	9300      	str	r3, [sp, #0]
    2436:	aa0c      	add	r2, sp, #48	; 0x30
    2438:	ab04      	add	r3, sp, #16
    243a:	2100      	movs	r1, #0
    243c:	f017 f84d 	bl	194da <encode_uint>
				conv->altform_0c = true;
    2440:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    2444:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2448:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    244c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2450:	4682      	mov	sl, r0
				conv->altform_0c = true;
    2452:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    2456:	2600      	movs	r6, #0
				goto prec_int_pad0;
    2458:	e745      	b.n	22e6 <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
    245a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    245c:	2907      	cmp	r1, #7
    245e:	f63f aedd 	bhi.w	221c <z_cbvprintf_impl+0x458>
    2462:	e8df f001 	tbb	[pc, r1]
    2466:	040c      	.short	0x040c
    2468:	08080c06 	.word	0x08080c06
    246c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    246e:	701d      	strb	r5, [r3, #0]
		break;
    2470:	e6d4      	b.n	221c <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
    2472:	801d      	strh	r5, [r3, #0]
		break;
    2474:	e6d2      	b.n	221c <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    2476:	17ea      	asrs	r2, r5, #31
    2478:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    247c:	e6ce      	b.n	221c <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    247e:	601d      	str	r5, [r3, #0]
		break;
    2480:	e6cc      	b.n	221c <z_cbvprintf_impl+0x458>
			bps = "(nil)";
    2482:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 254c <z_cbvprintf_impl+0x788>
    2486:	4606      	mov	r6, r0
			bpe = bps + 5;
    2488:	f10a 0805 	add.w	r8, sl, #5
    248c:	e78e      	b.n	23ac <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
    248e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    2490:	bf48      	it	mi
    2492:	3301      	addmi	r3, #1
    2494:	e793      	b.n	23be <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
    2496:	4618      	mov	r0, r3
    2498:	9303      	str	r3, [sp, #12]
    249a:	4659      	mov	r1, fp
    249c:	9b02      	ldr	r3, [sp, #8]
    249e:	4798      	blx	r3
    24a0:	2800      	cmp	r0, #0
    24a2:	9b03      	ldr	r3, [sp, #12]
    24a4:	da04      	bge.n	24b0 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
    24a6:	b011      	add	sp, #68	; 0x44
    24a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    24ac:	2320      	movs	r3, #32
    24ae:	444d      	add	r5, r9
    24b0:	464a      	mov	r2, r9
				while (width-- > 0) {
    24b2:	2a00      	cmp	r2, #0
    24b4:	eba5 0109 	sub.w	r1, r5, r9
    24b8:	f109 39ff 	add.w	r9, r9, #4294967295
    24bc:	dceb      	bgt.n	2496 <z_cbvprintf_impl+0x6d2>
    24be:	460d      	mov	r5, r1
		if (sign != 0) {
    24c0:	b136      	cbz	r6, 24d0 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
    24c2:	9b02      	ldr	r3, [sp, #8]
    24c4:	4659      	mov	r1, fp
    24c6:	4630      	mov	r0, r6
    24c8:	4798      	blx	r3
    24ca:	2800      	cmp	r0, #0
    24cc:	dbeb      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
    24ce:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    24d0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    24d4:	06d9      	lsls	r1, r3, #27
    24d6:	d401      	bmi.n	24dc <z_cbvprintf_impl+0x718>
    24d8:	071a      	lsls	r2, r3, #28
    24da:	d506      	bpl.n	24ea <z_cbvprintf_impl+0x726>
				OUTC('0');
    24dc:	9b02      	ldr	r3, [sp, #8]
    24de:	4659      	mov	r1, fp
    24e0:	2030      	movs	r0, #48	; 0x30
    24e2:	4798      	blx	r3
    24e4:	2800      	cmp	r0, #0
    24e6:	dbde      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
    24e8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    24ea:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    24ee:	06db      	lsls	r3, r3, #27
    24f0:	d507      	bpl.n	2502 <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
    24f2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    24f6:	9b02      	ldr	r3, [sp, #8]
    24f8:	4659      	mov	r1, fp
    24fa:	4798      	blx	r3
    24fc:	2800      	cmp	r0, #0
    24fe:	dbd2      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
    2500:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2502:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2504:	442e      	add	r6, r5
    2506:	1b73      	subs	r3, r6, r5
    2508:	2b00      	cmp	r3, #0
    250a:	dc16      	bgt.n	253a <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
    250c:	9802      	ldr	r0, [sp, #8]
    250e:	4643      	mov	r3, r8
    2510:	4652      	mov	r2, sl
    2512:	4659      	mov	r1, fp
    2514:	f017 f827 	bl	19566 <outs>
    2518:	2800      	cmp	r0, #0
    251a:	dbc4      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
    251c:	4405      	add	r5, r0
		while (width > 0) {
    251e:	44a9      	add	r9, r5
    2520:	eba9 0305 	sub.w	r3, r9, r5
    2524:	2b00      	cmp	r3, #0
    2526:	f77f ae79 	ble.w	221c <z_cbvprintf_impl+0x458>
			OUTC(' ');
    252a:	9b02      	ldr	r3, [sp, #8]
    252c:	4659      	mov	r1, fp
    252e:	2020      	movs	r0, #32
    2530:	4798      	blx	r3
    2532:	2800      	cmp	r0, #0
    2534:	dbb7      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
    2536:	3501      	adds	r5, #1
			--width;
    2538:	e7f2      	b.n	2520 <z_cbvprintf_impl+0x75c>
				OUTC('0');
    253a:	9b02      	ldr	r3, [sp, #8]
    253c:	4659      	mov	r1, fp
    253e:	2030      	movs	r0, #48	; 0x30
    2540:	4798      	blx	r3
    2542:	2800      	cmp	r0, #0
    2544:	dbaf      	blt.n	24a6 <z_cbvprintf_impl+0x6e2>
    2546:	3501      	adds	r5, #1
    2548:	e7dd      	b.n	2506 <z_cbvprintf_impl+0x742>
    254a:	bf00      	nop
    254c:	00020b1c 	.word	0x00020b1c

00002550 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    2550:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    2552:	4c08      	ldr	r4, [pc, #32]	; (2574 <read_blvl+0x24>)
{
    2554:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    2556:	7824      	ldrb	r4, [r4, #0]
    2558:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    255c:	2401      	movs	r4, #1
    255e:	9402      	str	r4, [sp, #8]
    2560:	f10d 0417 	add.w	r4, sp, #23
    2564:	9401      	str	r4, [sp, #4]
    2566:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    256a:	9400      	str	r4, [sp, #0]
    256c:	f01a fd99 	bl	1d0a2 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    2570:	b006      	add	sp, #24
    2572:	bd10      	pop	{r4, pc}
    2574:	20000a07 	.word	0x20000a07

00002578 <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
    2578:	4b01      	ldr	r3, [pc, #4]	; (2580 <bt_bas_get_battery_level+0x8>)
    257a:	7818      	ldrb	r0, [r3, #0]
    257c:	4770      	bx	lr
    257e:	bf00      	nop
    2580:	20000a07 	.word	0x20000a07

00002584 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
    2584:	b500      	push	{lr}
    2586:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
    2588:	2864      	cmp	r0, #100	; 0x64
{
    258a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    258e:	d819      	bhi.n	25c4 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    2590:	4b0e      	ldr	r3, [pc, #56]	; (25cc <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
    2592:	2218      	movs	r2, #24
    2594:	7018      	strb	r0, [r3, #0]
    2596:	2100      	movs	r1, #0
    2598:	a802      	add	r0, sp, #8
    259a:	f018 f965 	bl	1a868 <memset>
	params.attr = attr;
    259e:	4b0c      	ldr	r3, [pc, #48]	; (25d0 <bt_bas_set_battery_level+0x4c>)
    25a0:	9303      	str	r3, [sp, #12]
	params.data = data;
    25a2:	f10d 0307 	add.w	r3, sp, #7
    25a6:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
    25a8:	a902      	add	r1, sp, #8
	params.len = len;
    25aa:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    25ac:	2000      	movs	r0, #0
	params.len = len;
    25ae:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    25b2:	f005 f89d 	bl	76f0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    25b6:	f110 0f80 	cmn.w	r0, #128	; 0x80
    25ba:	bf08      	it	eq
    25bc:	2000      	moveq	r0, #0
}
    25be:	b009      	add	sp, #36	; 0x24
    25c0:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    25c4:	f06f 0015 	mvn.w	r0, #21
    25c8:	e7f9      	b.n	25be <bt_bas_set_battery_level+0x3a>
    25ca:	bf00      	nop
    25cc:	20000a07 	.word	0x20000a07
    25d0:	0001f5b8 	.word	0x0001f5b8

000025d4 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    25d4:	4b02      	ldr	r3, [pc, #8]	; (25e0 <hrs_init+0xc>)
    25d6:	2201      	movs	r2, #1
    25d8:	701a      	strb	r2, [r3, #0]

	return 0;
}
    25da:	2000      	movs	r0, #0
    25dc:	4770      	bx	lr
    25de:	bf00      	nop
    25e0:	200028ef 	.word	0x200028ef

000025e4 <read_blsc>:
{
    25e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    25e6:	2401      	movs	r4, #1
    25e8:	9402      	str	r4, [sp, #8]
    25ea:	4c04      	ldr	r4, [pc, #16]	; (25fc <read_blsc+0x18>)
    25ec:	9401      	str	r4, [sp, #4]
    25ee:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    25f2:	9400      	str	r4, [sp, #0]
    25f4:	f01a fd55 	bl	1d0a2 <bt_gatt_attr_read>
}
    25f8:	b004      	add	sp, #16
    25fa:	bd10      	pop	{r4, pc}
    25fc:	200028ef 	.word	0x200028ef

00002600 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    2600:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    2602:	4c0d      	ldr	r4, [pc, #52]	; (2638 <bt_hrs_notify+0x38>)
{
    2604:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    2606:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    2608:	7060      	strb	r0, [r4, #1]
	memset(&params, 0, sizeof(params));
    260a:	2218      	movs	r2, #24
    260c:	2100      	movs	r1, #0
    260e:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    2610:	7023      	strb	r3, [r4, #0]
    2612:	f018 f929 	bl	1a868 <memset>
	params.attr = attr;
    2616:	4b09      	ldr	r3, [pc, #36]	; (263c <bt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    2618:	4669      	mov	r1, sp
	params.data = data;
    261a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    261e:	2000      	movs	r0, #0
	params.len = len;
    2620:	2302      	movs	r3, #2
    2622:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    2626:	f005 f863 	bl	76f0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    262a:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    262e:	bf08      	it	eq
    2630:	2000      	moveq	r0, #0
    2632:	b006      	add	sp, #24
    2634:	bd10      	pop	{r4, pc}
    2636:	bf00      	nop
    2638:	200028ed 	.word	0x200028ed
    263c:	0001f608 	.word	0x0001f608

00002640 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2644:	4605      	mov	r5, r0
    2646:	f04f 0320 	mov.w	r3, #32
    264a:	f3ef 8611 	mrs	r6, BASEPRI
    264e:	f383 8812 	msr	BASEPRI_MAX, r3
    2652:	f3bf 8f6f 	isb	sy
	return list->head;
    2656:	4b0e      	ldr	r3, [pc, #56]	; (2690 <pm_state_notify+0x50>)
    2658:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    265a:	b19c      	cbz	r4, 2684 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    265c:	4f0d      	ldr	r7, [pc, #52]	; (2694 <pm_state_notify+0x54>)
    265e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2698 <pm_state_notify+0x58>
    2662:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2666:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    266a:	2d00      	cmp	r5, #0
    266c:	bf08      	it	eq
    266e:	4613      	moveq	r3, r2
		if (callback) {
    2670:	b12b      	cbz	r3, 267e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2672:	f898 2014 	ldrb.w	r2, [r8, #20]
    2676:	fb09 f202 	mul.w	r2, r9, r2
    267a:	5cb8      	ldrb	r0, [r7, r2]
    267c:	4798      	blx	r3
	return node->next;
    267e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2680:	2c00      	cmp	r4, #0
    2682:	d1f0      	bne.n	2666 <pm_state_notify+0x26>
	__asm__ volatile(
    2684:	f386 8811 	msr	BASEPRI, r6
    2688:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    268c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2690:	20001674 	.word	0x20001674
    2694:	20001688 	.word	0x20001688
    2698:	2000287c 	.word	0x2000287c

0000269c <pm_system_resume>:

void pm_system_resume(void)
{
    269c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    269e:	4b1a      	ldr	r3, [pc, #104]	; (2708 <pm_system_resume+0x6c>)
    26a0:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26a2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    26a6:	f004 031f 	and.w	r3, r4, #31
    26aa:	2201      	movs	r2, #1
    26ac:	409a      	lsls	r2, r3
    26ae:	4b17      	ldr	r3, [pc, #92]	; (270c <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26b0:	0961      	lsrs	r1, r4, #5
    26b2:	43d0      	mvns	r0, r2
    26b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    26b8:	e853 1f00 	ldrex	r1, [r3]
    26bc:	ea01 0500 	and.w	r5, r1, r0
    26c0:	e843 5c00 	strex	ip, r5, [r3]
    26c4:	f1bc 0f00 	cmp.w	ip, #0
    26c8:	d1f6      	bne.n	26b8 <pm_system_resume+0x1c>
    26ca:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    26ce:	4211      	tst	r1, r2
    26d0:	d013      	beq.n	26fa <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    26d2:	4b0f      	ldr	r3, [pc, #60]	; (2710 <pm_system_resume+0x74>)
    26d4:	4d0f      	ldr	r5, [pc, #60]	; (2714 <pm_system_resume+0x78>)
    26d6:	b18b      	cbz	r3, 26fc <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    26d8:	230c      	movs	r3, #12
    26da:	4363      	muls	r3, r4
    26dc:	18ea      	adds	r2, r5, r3
    26de:	5ce8      	ldrb	r0, [r5, r3]
    26e0:	7851      	ldrb	r1, [r2, #1]
    26e2:	f018 f8d9 	bl	1a898 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    26e6:	2000      	movs	r0, #0
    26e8:	f7ff ffaa 	bl	2640 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    26ec:	230c      	movs	r3, #12
    26ee:	435c      	muls	r4, r3
    26f0:	192a      	adds	r2, r5, r4
    26f2:	2300      	movs	r3, #0
    26f4:	512b      	str	r3, [r5, r4]
    26f6:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    26fa:	bd38      	pop	{r3, r4, r5, pc}
    26fc:	f383 8811 	msr	BASEPRI, r3
    2700:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2704:	e7ef      	b.n	26e6 <pm_system_resume+0x4a>
    2706:	bf00      	nop
    2708:	2000287c 	.word	0x2000287c
    270c:	20001694 	.word	0x20001694
    2710:	0001a899 	.word	0x0001a899
    2714:	20001688 	.word	0x20001688

00002718 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    271c:	4b33      	ldr	r3, [pc, #204]	; (27ec <pm_system_suspend+0xd4>)
{
    271e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2720:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    2722:	f04f 0320 	mov.w	r3, #32
    2726:	f3ef 8811 	mrs	r8, BASEPRI
    272a:	f383 8812 	msr	BASEPRI_MAX, r3
    272e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2732:	240c      	movs	r4, #12
    2734:	4b2e      	ldr	r3, [pc, #184]	; (27f0 <pm_system_suspend+0xd8>)
    2736:	4e2f      	ldr	r6, [pc, #188]	; (27f4 <pm_system_suspend+0xdc>)
    2738:	436c      	muls	r4, r5
    273a:	191a      	adds	r2, r3, r4
    273c:	5d19      	ldrb	r1, [r3, r4]
    273e:	2900      	cmp	r1, #0
    2740:	d049      	beq.n	27d6 <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2742:	ca07      	ldmia	r2, {r0, r1, r2}
    2744:	eb06 0c04 	add.w	ip, r6, r4
    2748:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    274c:	2200      	movs	r2, #0
    274e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2750:	f388 8811 	msr	BASEPRI, r8
    2754:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2758:	230c      	movs	r3, #12
    275a:	436b      	muls	r3, r5
    275c:	18f2      	adds	r2, r6, r3
    275e:	5cf0      	ldrb	r0, [r6, r3]
    2760:	b3b8      	cbz	r0, 27d2 <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2762:	1c7b      	adds	r3, r7, #1
    2764:	d00f      	beq.n	2786 <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2766:	f8d2 c008 	ldr.w	ip, [r2, #8]
    276a:	4823      	ldr	r0, [pc, #140]	; (27f8 <pm_system_suspend+0xe0>)
    276c:	4a23      	ldr	r2, [pc, #140]	; (27fc <pm_system_suspend+0xe4>)
    276e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2772:	2100      	movs	r1, #0
    2774:	2300      	movs	r3, #0
    2776:	fbec 0104 	umlal	r0, r1, ip, r4
    277a:	f7fd fcc1 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    277e:	2101      	movs	r1, #1
    2780:	1a38      	subs	r0, r7, r0
    2782:	f01c fac4 	bl	1ed0e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2786:	f015 fe4d 	bl	18424 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    278a:	2001      	movs	r0, #1
    278c:	f7ff ff58 	bl	2640 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2790:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2794:	f005 021f 	and.w	r2, r5, #31
    2798:	2101      	movs	r1, #1
    279a:	4091      	lsls	r1, r2
    279c:	4a18      	ldr	r2, [pc, #96]	; (2800 <pm_system_suspend+0xe8>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    279e:	096b      	lsrs	r3, r5, #5
    27a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27a4:	e853 2f00 	ldrex	r2, [r3]
    27a8:	430a      	orrs	r2, r1
    27aa:	e843 2000 	strex	r0, r2, [r3]
    27ae:	2800      	cmp	r0, #0
    27b0:	d1f8      	bne.n	27a4 <pm_system_suspend+0x8c>
    27b2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    27b6:	4b13      	ldr	r3, [pc, #76]	; (2804 <pm_system_suspend+0xec>)
    27b8:	b133      	cbz	r3, 27c8 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    27ba:	200c      	movs	r0, #12
    27bc:	4368      	muls	r0, r5
    27be:	1833      	adds	r3, r6, r0
    27c0:	5c30      	ldrb	r0, [r6, r0]
    27c2:	7859      	ldrb	r1, [r3, #1]
    27c4:	f018 f85c 	bl	1a880 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    27c8:	f7ff ff68 	bl	269c <pm_system_resume>
	k_sched_unlock();
    27cc:	f015 ffb2 	bl	18734 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    27d0:	2001      	movs	r0, #1
}
    27d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    27d6:	4601      	mov	r1, r0
    27d8:	4628      	mov	r0, r5
    27da:	f000 f815 	bl	2808 <pm_policy_next_state>
		if (info != NULL) {
    27de:	2800      	cmp	r0, #0
    27e0:	d0b6      	beq.n	2750 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    27e2:	c807      	ldmia	r0, {r0, r1, r2}
    27e4:	4434      	add	r4, r6
    27e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    27ea:	e7b1      	b.n	2750 <pm_system_suspend+0x38>
    27ec:	2000287c 	.word	0x2000287c
    27f0:	2000167c 	.word	0x2000167c
    27f4:	20001688 	.word	0x20001688
    27f8:	000f423f 	.word	0x000f423f
    27fc:	000f4240 	.word	0x000f4240
    2800:	20001694 	.word	0x20001694
    2804:	0001a881 	.word	0x0001a881

00002808 <pm_policy_next_state>:
	max_latency_ticks = new_max_latency_ticks;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    280c:	b085      	sub	sp, #20
    280e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2810:	a903      	add	r1, sp, #12
    2812:	f000 f841 	bl	2898 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    2816:	9b03      	ldr	r3, [sp, #12]
    2818:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    281a:	4b1c      	ldr	r3, [pc, #112]	; (288c <pm_policy_next_state+0x84>)
    281c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2890 <pm_policy_next_state+0x88>
    2820:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2824:	1e44      	subs	r4, r0, #1
    2826:	b224      	sxth	r4, r4
    2828:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    282c:	f04f 0b00 	mov.w	fp, #0
    2830:	1c63      	adds	r3, r4, #1
    2832:	d104      	bne.n	283e <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2834:	2500      	movs	r5, #0
}
    2836:	4628      	mov	r0, r5
    2838:	b005      	add	sp, #20
    283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    283e:	9b01      	ldr	r3, [sp, #4]
    2840:	4a14      	ldr	r2, [pc, #80]	; (2894 <pm_policy_next_state+0x8c>)
    2842:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    2846:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    284a:	46c4      	mov	ip, r8
    284c:	6868      	ldr	r0, [r5, #4]
    284e:	4659      	mov	r1, fp
    2850:	fbe0 c107 	umlal	ip, r1, r0, r7
    2854:	2300      	movs	r3, #0
    2856:	4660      	mov	r0, ip
    2858:	f7fd fc52 	bl	100 <__aeabi_uldivmod>
    285c:	4681      	mov	r9, r0
    285e:	68a8      	ldr	r0, [r5, #8]
    2860:	4a0c      	ldr	r2, [pc, #48]	; (2894 <pm_policy_next_state+0x8c>)
    2862:	46c4      	mov	ip, r8
    2864:	4659      	mov	r1, fp
    2866:	fbe0 c107 	umlal	ip, r1, r0, r7
    286a:	2300      	movs	r3, #0
    286c:	4660      	mov	r0, ip
    286e:	f7fd fc47 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2872:	f1ba 3fff 	cmp.w	sl, #4294967295
    2876:	d001      	beq.n	287c <pm_policy_next_state+0x74>
    2878:	4582      	cmp	sl, r0
    287a:	d904      	bls.n	2886 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    287c:	1c72      	adds	r2, r6, #1
    287e:	d0da      	beq.n	2836 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    2880:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    2882:	42b0      	cmp	r0, r6
    2884:	d9d7      	bls.n	2836 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2886:	3c01      	subs	r4, #1
    2888:	b224      	sxth	r4, r4
    288a:	e7d1      	b.n	2830 <pm_policy_next_state+0x28>
    288c:	2000026c 	.word	0x2000026c
    2890:	000f423f 	.word	0x000f423f
    2894:	000f4240 	.word	0x000f4240

00002898 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2898:	b908      	cbnz	r0, 289e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    289a:	4b02      	ldr	r3, [pc, #8]	; (28a4 <pm_state_cpu_get_all+0xc>)
    289c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    289e:	2000      	movs	r0, #0
    28a0:	4770      	bx	lr
    28a2:	bf00      	nop
    28a4:	0001f694 	.word	0x0001f694

000028a8 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    28a8:	4b01      	ldr	r3, [pc, #4]	; (28b0 <uECC_get_rng+0x8>)
    28aa:	6818      	ldr	r0, [r3, #0]
    28ac:	4770      	bx	lr
    28ae:	bf00      	nop
    28b0:	20000270 	.word	0x20000270

000028b4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    28b6:	2208      	movs	r2, #8
{
    28b8:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    28ba:	f017 f82a 	bl	19912 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    28be:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    28c0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    28c2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    28c4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    28c6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    28c8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    28ca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    28cc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    28ce:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    28d0:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    28d2:	4613      	mov	r3, r2
    28d4:	466a      	mov	r2, sp
{
    28d6:	460c      	mov	r4, r1
    28d8:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    28da:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    28dc:	4611      	mov	r1, r2
    28de:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    28e0:	e9cd 7701 	strd	r7, r7, [sp, #4]
    28e4:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    28e6:	f016 ff2a 	bl	1973e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    28ea:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    28ec:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    28ee:	4630      	mov	r0, r6
    28f0:	f016 ff25 	bl	1973e <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    28f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    28f6:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    28f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    28fa:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    28fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    28fe:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    2900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2902:	4405      	add	r5, r0
	tmp[7] = 0;
    2904:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2908:	4610      	mov	r0, r2
    290a:	4611      	mov	r1, r2
    290c:	f016 ff17 	bl	1973e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2910:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2912:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2914:	4630      	mov	r0, r6
    2916:	f016 ff12 	bl	1973e <uECC_vli_add>
    291a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    291c:	6a20      	ldr	r0, [r4, #32]
    291e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    2920:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2922:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    2924:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2926:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    2928:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    292a:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    292c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    292e:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2930:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    2932:	e9cd 7704 	strd	r7, r7, [sp, #16]
    2936:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2938:	f016 ff01 	bl	1973e <uECC_vli_add>
    293c:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    293e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2940:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    2942:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    2944:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    2948:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    294a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    294c:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    294e:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    2952:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    2954:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    2958:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    295a:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    295e:	6a20      	ldr	r0, [r4, #32]
    2960:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2962:	4630      	mov	r0, r6
    2964:	f016 feeb 	bl	1973e <uECC_vli_add>
    2968:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    296a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    296c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    296e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2970:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    2972:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2974:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    2976:	6a20      	ldr	r0, [r4, #32]
    2978:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    297a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    297c:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    297e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    2980:	e9cd 7704 	strd	r7, r7, [sp, #16]
    2984:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    2986:	f016 fff7 	bl	19978 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    298a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    298c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    298e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2990:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    2992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2994:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    2996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2998:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    299a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    299c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    299e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    29a0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29a2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29a4:	2308      	movs	r3, #8
    29a6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    29a8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29ac:	f016 ffe4 	bl	19978 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    29b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    29b2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    29b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    29b6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    29b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    29ba:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    29bc:	6a23      	ldr	r3, [r4, #32]
    29be:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    29c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    29c2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    29c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    29c6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    29ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    29cc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29ce:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29d0:	2308      	movs	r3, #8
    29d2:	4630      	mov	r0, r6
    29d4:	f016 ffd0 	bl	19978 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    29d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    29da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    29dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    29de:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    29e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    29e4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    29e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    29e8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    29ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    29ec:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    29f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    29f2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29f4:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    29f6:	2308      	movs	r3, #8
    29f8:	4630      	mov	r0, r6
    29fa:	f016 ffbd 	bl	19978 <uECC_vli_sub>

	if (carry < 0) {
    29fe:	1a2d      	subs	r5, r5, r0
    2a00:	d410      	bmi.n	2a24 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    2a02:	4c0d      	ldr	r4, [pc, #52]	; (2a38 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    2a04:	b935      	cbnz	r5, 2a14 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    2a06:	2208      	movs	r2, #8
    2a08:	4631      	mov	r1, r6
    2a0a:	4620      	mov	r0, r4
    2a0c:	f016 ff8d 	bl	1992a <uECC_vli_cmp_unsafe>
		while (carry || 
    2a10:	2801      	cmp	r0, #1
    2a12:	d00f      	beq.n	2a34 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    2a14:	2308      	movs	r3, #8
    2a16:	4622      	mov	r2, r4
    2a18:	4631      	mov	r1, r6
    2a1a:	4630      	mov	r0, r6
    2a1c:	f016 ffac 	bl	19978 <uECC_vli_sub>
    2a20:	1a2d      	subs	r5, r5, r0
    2a22:	e7ef      	b.n	2a04 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    2a24:	4a04      	ldr	r2, [pc, #16]	; (2a38 <vli_mmod_fast_secp256r1+0x184>)
    2a26:	2308      	movs	r3, #8
    2a28:	4631      	mov	r1, r6
    2a2a:	4630      	mov	r0, r6
    2a2c:	f016 fe87 	bl	1973e <uECC_vli_add>
		while (carry < 0);
    2a30:	182d      	adds	r5, r5, r0
    2a32:	d4f8      	bmi.n	2a26 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    2a34:	b009      	add	sp, #36	; 0x24
    2a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a38:	0001f698 	.word	0x0001f698

00002a3c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    2a3c:	4904      	ldr	r1, [pc, #16]	; (2a50 <sub_bytes+0x14>)
    2a3e:	1e43      	subs	r3, r0, #1
    2a40:	300f      	adds	r0, #15
    2a42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2a46:	5c8a      	ldrb	r2, [r1, r2]
    2a48:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2a4a:	4283      	cmp	r3, r0
    2a4c:	d1f9      	bne.n	2a42 <sub_bytes+0x6>
	}
}
    2a4e:	4770      	bx	lr
    2a50:	00020b22 	.word	0x00020b22

00002a54 <tc_aes128_set_encrypt_key>:
{
    2a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    2a56:	4e26      	ldr	r6, [pc, #152]	; (2af0 <tc_aes128_set_encrypt_key+0x9c>)
{
    2a58:	4607      	mov	r7, r0
    2a5a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    2a5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    2a5e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    2a60:	ad01      	add	r5, sp, #4
    2a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2a64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2a68:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2a6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    2a70:	4638      	mov	r0, r7
    2a72:	2f00      	cmp	r7, #0
    2a74:	d038      	beq.n	2ae8 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    2a76:	2c00      	cmp	r4, #0
    2a78:	d038      	beq.n	2aec <tc_aes128_set_encrypt_key+0x98>
    2a7a:	1f38      	subs	r0, r7, #4
    2a7c:	4621      	mov	r1, r4
    2a7e:	4602      	mov	r2, r0
    2a80:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2a82:	784b      	ldrb	r3, [r1, #1]
    2a84:	780d      	ldrb	r5, [r1, #0]
    2a86:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2a88:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2a8c:	78cd      	ldrb	r5, [r1, #3]
    2a8e:	432b      	orrs	r3, r5
    2a90:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    2a92:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2a94:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    2a98:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2a9a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    2a9e:	d1f0      	bne.n	2a82 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2aa0:	4c14      	ldr	r4, [pc, #80]	; (2af4 <tc_aes128_set_encrypt_key+0xa0>)
    2aa2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    2aa4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2aa6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2aa8:	d116      	bne.n	2ad8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2aaa:	f3c3 4207 	ubfx	r2, r3, #16, #8
    2aae:	5ca5      	ldrb	r5, [r4, r2]
    2ab0:	0e1a      	lsrs	r2, r3, #24
    2ab2:	5ca2      	ldrb	r2, [r4, r2]
    2ab4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2ab8:	f3c3 2507 	ubfx	r5, r3, #8, #8
    2abc:	b2db      	uxtb	r3, r3
    2abe:	5d65      	ldrb	r5, [r4, r5]
    2ac0:	5ce3      	ldrb	r3, [r4, r3]
    2ac2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    2ac6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2aca:	ad0c      	add	r5, sp, #48	; 0x30
    2acc:	f021 0303 	bic.w	r3, r1, #3
    2ad0:	442b      	add	r3, r5
    2ad2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    2ad6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    2ad8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2adc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2ade:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2ae0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2ae2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2ae4:	d1de      	bne.n	2aa4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    2ae6:	2001      	movs	r0, #1
}
    2ae8:	b00d      	add	sp, #52	; 0x34
    2aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2aec:	4620      	mov	r0, r4
    2aee:	e7fb      	b.n	2ae8 <tc_aes128_set_encrypt_key+0x94>
    2af0:	0001f394 	.word	0x0001f394
    2af4:	00020b22 	.word	0x00020b22

00002af8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2af8:	4901      	ldr	r1, [pc, #4]	; (2b00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2afa:	2210      	movs	r2, #16
	str	r2, [r1]
    2afc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2afe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2b00:	e000ed10 	.word	0xe000ed10

00002b04 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2b04:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2b06:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2b08:	f380 8811 	msr	BASEPRI, r0
	isb
    2b0c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2b10:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2b14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2b16:	b662      	cpsie	i
	isb
    2b18:	f3bf 8f6f 	isb	sy

	bx	lr
    2b1c:	4770      	bx	lr
    2b1e:	bf00      	nop

00002b20 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2b20:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2b22:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2b24:	f381 8811 	msr	BASEPRI, r1

	wfe
    2b28:	bf20      	wfe

	msr	BASEPRI, r0
    2b2a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2b2e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop

00002b34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2b34:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2b36:	2b00      	cmp	r3, #0
    2b38:	db08      	blt.n	2b4c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b3a:	2201      	movs	r2, #1
    2b3c:	f000 001f 	and.w	r0, r0, #31
    2b40:	fa02 f000 	lsl.w	r0, r2, r0
    2b44:	095b      	lsrs	r3, r3, #5
    2b46:	4a02      	ldr	r2, [pc, #8]	; (2b50 <arch_irq_enable+0x1c>)
    2b48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2b4c:	4770      	bx	lr
    2b4e:	bf00      	nop
    2b50:	e000e100 	.word	0xe000e100

00002b54 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2b54:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2b56:	2b00      	cmp	r3, #0
    2b58:	db0d      	blt.n	2b76 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b5a:	2201      	movs	r2, #1
    2b5c:	095b      	lsrs	r3, r3, #5
    2b5e:	f000 001f 	and.w	r0, r0, #31
    2b62:	fa02 f000 	lsl.w	r0, r2, r0
    2b66:	3320      	adds	r3, #32
    2b68:	4a03      	ldr	r2, [pc, #12]	; (2b78 <arch_irq_disable+0x24>)
    2b6a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2b6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b72:	f3bf 8f6f 	isb	sy
}
    2b76:	4770      	bx	lr
    2b78:	e000e100 	.word	0xe000e100

00002b7c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2b7c:	4b05      	ldr	r3, [pc, #20]	; (2b94 <arch_irq_is_enabled+0x18>)
    2b7e:	0942      	lsrs	r2, r0, #5
    2b80:	f000 001f 	and.w	r0, r0, #31
    2b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2b88:	2301      	movs	r3, #1
    2b8a:	fa03 f000 	lsl.w	r0, r3, r0
}
    2b8e:	4010      	ands	r0, r2
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	e000e100 	.word	0xe000e100

00002b98 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2b98:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2b9a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b9c:	bfa8      	it	ge
    2b9e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2ba2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ba6:	bfb8      	it	lt
    2ba8:	4b06      	ldrlt	r3, [pc, #24]	; (2bc4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2baa:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2bae:	bfac      	ite	ge
    2bb0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bb4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bb8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bba:	bfb4      	ite	lt
    2bbc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bbe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2bc2:	4770      	bx	lr
    2bc4:	e000ed14 	.word	0xe000ed14

00002bc8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2bc8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2bca:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2bcc:	4b04      	ldr	r3, [pc, #16]	; (2be0 <_arch_isr_direct_pm+0x18>)
    2bce:	699a      	ldr	r2, [r3, #24]
    2bd0:	b11a      	cbz	r2, 2bda <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    2bd2:	2200      	movs	r2, #0
    2bd4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    2bd6:	f01b fda8 	bl	1e72a <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2bda:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2bdc:	bd08      	pop	{r3, pc}
    2bde:	bf00      	nop
    2be0:	2000287c 	.word	0x2000287c

00002be4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2be4:	bf30      	wfi
    b z_SysNmiOnReset
    2be6:	f7ff bffd 	b.w	2be4 <z_SysNmiOnReset>
    2bea:	bf00      	nop

00002bec <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2bec:	4a0f      	ldr	r2, [pc, #60]	; (2c2c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2bee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2bf0:	4b0f      	ldr	r3, [pc, #60]	; (2c30 <z_arm_prep_c+0x44>)
    2bf2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2bf6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bfc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2c00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2c04:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2c0c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2c10:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2c14:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2c18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2c1c:	f014 ff60 	bl	17ae0 <z_bss_zero>
	z_data_copy();
    2c20:	f015 feca 	bl	189b8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2c24:	f000 f9d0 	bl	2fc8 <z_arm_interrupt_init>
	z_cstart();
    2c28:	f014 ff9e 	bl	17b68 <z_cstart>
    2c2c:	00000000 	.word	0x00000000
    2c30:	e000ed00 	.word	0xe000ed00

00002c34 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2c34:	4a09      	ldr	r2, [pc, #36]	; (2c5c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2c36:	490a      	ldr	r1, [pc, #40]	; (2c60 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2c38:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2c3a:	6809      	ldr	r1, [r1, #0]
    2c3c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c3e:	4909      	ldr	r1, [pc, #36]	; (2c64 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2c40:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c42:	684b      	ldr	r3, [r1, #4]
    2c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c48:	604b      	str	r3, [r1, #4]
    2c4a:	2300      	movs	r3, #0
    2c4c:	f383 8811 	msr	BASEPRI, r3
    2c50:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2c54:	6893      	ldr	r3, [r2, #8]
}
    2c56:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2c58:	4770      	bx	lr
    2c5a:	bf00      	nop
    2c5c:	2000287c 	.word	0x2000287c
    2c60:	0002090c 	.word	0x0002090c
    2c64:	e000ed00 	.word	0xe000ed00

00002c68 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2c68:	4912      	ldr	r1, [pc, #72]	; (2cb4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2c6a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2c6c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2c70:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2c72:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2c76:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2c7a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2c7c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2c80:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2c84:	4f0c      	ldr	r7, [pc, #48]	; (2cb8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2c86:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2c8a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2c8c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2c8e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2c90:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2c92:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2c94:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2c96:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2c9a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2c9c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2c9e:	f000 f9d9 	bl	3054 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2ca2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2ca6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2caa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2cae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2cb2:	4770      	bx	lr
    ldr r1, =_kernel
    2cb4:	2000287c 	.word	0x2000287c
    ldr v4, =_SCS_ICSR
    2cb8:	e000ed04 	.word	0xe000ed04

00002cbc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2cbc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2cc0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2cc2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2cc6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2cca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2ccc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2cd0:	2902      	cmp	r1, #2
    beq _oops
    2cd2:	d0ff      	beq.n	2cd4 <_oops>

00002cd4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2cd4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2cd6:	f017 fd76 	bl	1a7c6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2cda:	bd01      	pop	{r0, pc}

00002cdc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2cdc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2ce0:	9b00      	ldr	r3, [sp, #0]
    2ce2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2ce6:	490a      	ldr	r1, [pc, #40]	; (2d10 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2ce8:	9b01      	ldr	r3, [sp, #4]
    2cea:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2cee:	9b02      	ldr	r3, [sp, #8]
    2cf0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2cf4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2cfc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2d00:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2d04:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2d06:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2d08:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2d0a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop
    2d10:	0001913b 	.word	0x0001913b

00002d14 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2d14:	4a09      	ldr	r2, [pc, #36]	; (2d3c <z_check_thread_stack_fail+0x28>)
{
    2d16:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2d18:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2d1a:	b170      	cbz	r0, 2d3a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2d1c:	f113 0f16 	cmn.w	r3, #22
    2d20:	6e80      	ldr	r0, [r0, #104]	; 0x68
    2d22:	d005      	beq.n	2d30 <z_check_thread_stack_fail+0x1c>
    2d24:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    2d28:	429a      	cmp	r2, r3
    2d2a:	d805      	bhi.n	2d38 <z_check_thread_stack_fail+0x24>
    2d2c:	4283      	cmp	r3, r0
    2d2e:	d203      	bcs.n	2d38 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2d30:	4281      	cmp	r1, r0
    2d32:	bf28      	it	cs
    2d34:	2000      	movcs	r0, #0
    2d36:	4770      	bx	lr
    2d38:	2000      	movs	r0, #0
}
    2d3a:	4770      	bx	lr
    2d3c:	2000287c 	.word	0x2000287c

00002d40 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2d40:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2d42:	4b09      	ldr	r3, [pc, #36]	; (2d68 <arch_switch_to_main_thread+0x28>)
    2d44:	6098      	str	r0, [r3, #8]
{
    2d46:	460d      	mov	r5, r1
    2d48:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2d4a:	f000 f983 	bl	3054 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2d4e:	4620      	mov	r0, r4
    2d50:	f385 8809 	msr	PSP, r5
    2d54:	2100      	movs	r1, #0
    2d56:	b663      	cpsie	if
    2d58:	f381 8811 	msr	BASEPRI, r1
    2d5c:	f3bf 8f6f 	isb	sy
    2d60:	2200      	movs	r2, #0
    2d62:	2300      	movs	r3, #0
    2d64:	f016 f9e9 	bl	1913a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2d68:	2000287c 	.word	0x2000287c

00002d6c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2d6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2d6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2d70:	4a0b      	ldr	r2, [pc, #44]	; (2da0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2d72:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2d74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2d76:	bf1e      	ittt	ne
	movne	r1, #0
    2d78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2d7a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2d7c:	f01b fcd5 	blne	1e72a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2d80:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2d82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2d86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d8e:	4905      	ldr	r1, [pc, #20]	; (2da4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2d9a:	4903      	ldr	r1, [pc, #12]	; (2da8 <_isr_wrapper+0x3c>)
	bx r1
    2d9c:	4708      	bx	r1
    2d9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2da0:	2000287c 	.word	0x2000287c
	ldr r1, =_sw_isr_table
    2da4:	0001f16c 	.word	0x0001f16c
	ldr r1, =z_arm_int_exit
    2da8:	00002dad 	.word	0x00002dad

00002dac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2dac:	4b04      	ldr	r3, [pc, #16]	; (2dc0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2dae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2db0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2db2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2db4:	d003      	beq.n	2dbe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2db6:	4903      	ldr	r1, [pc, #12]	; (2dc4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2dbc:	600a      	str	r2, [r1, #0]

00002dbe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2dbe:	4770      	bx	lr
	ldr r3, =_kernel
    2dc0:	2000287c 	.word	0x2000287c
	ldr r1, =_SCS_ICSR
    2dc4:	e000ed04 	.word	0xe000ed04

00002dc8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2dc8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2dca:	4b1c      	ldr	r3, [pc, #112]	; (2e3c <mem_manage_fault+0x74>)
{
    2dcc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2dd4:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2dd6:	0790      	lsls	r0, r2, #30
    2dd8:	d520      	bpl.n	2e1c <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2dda:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2dde:	0612      	lsls	r2, r2, #24
    2de0:	d51c      	bpl.n	2e1c <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2de2:	b119      	cbz	r1, 2dec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2dea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2df2:	06d2      	lsls	r2, r2, #27
    2df4:	d415      	bmi.n	2e22 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2df8:	079b      	lsls	r3, r3, #30
    2dfa:	d412      	bmi.n	2e22 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2dfc:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2dfe:	4b0f      	ldr	r3, [pc, #60]	; (2e3c <mem_manage_fault+0x74>)
    2e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e02:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2e04:	bf42      	ittt	mi
    2e06:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2e08:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2e0c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e10:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2e14:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2e16:	2300      	movs	r3, #0
    2e18:	7023      	strb	r3, [r4, #0]

	return reason;
}
    2e1a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    2e1c:	f06f 0015 	mvn.w	r0, #21
    2e20:	e7e4      	b.n	2dec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2e22:	4b06      	ldr	r3, [pc, #24]	; (2e3c <mem_manage_fault+0x74>)
    2e24:	685b      	ldr	r3, [r3, #4]
    2e26:	0519      	lsls	r1, r3, #20
    2e28:	d5e8      	bpl.n	2dfc <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2e2a:	4629      	mov	r1, r5
    2e2c:	f7ff ff72 	bl	2d14 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2e30:	2800      	cmp	r0, #0
    2e32:	d0e3      	beq.n	2dfc <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2e34:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2e38:	2002      	movs	r0, #2
    2e3a:	e7e0      	b.n	2dfe <mem_manage_fault+0x36>
    2e3c:	e000ed00 	.word	0xe000ed00

00002e40 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2e40:	4b0d      	ldr	r3, [pc, #52]	; (2e78 <bus_fault.constprop.0+0x38>)
    2e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e48:	0592      	lsls	r2, r2, #22
    2e4a:	d508      	bpl.n	2e5e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e50:	0412      	lsls	r2, r2, #16
    2e52:	d504      	bpl.n	2e5e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2e54:	b118      	cbz	r0, 2e5e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2e5c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2e5e:	4b06      	ldr	r3, [pc, #24]	; (2e78 <bus_fault.constprop.0+0x38>)
    2e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e64:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2e66:	bf58      	it	pl
    2e68:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2e6c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e6e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2e72:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2e74:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2e76:	4770      	bx	lr
    2e78:	e000ed00 	.word	0xe000ed00

00002e7c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2e7c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2e7e:	4b48      	ldr	r3, [pc, #288]	; (2fa0 <z_arm_fault+0x124>)
    2e80:	685b      	ldr	r3, [r3, #4]
{
    2e82:	b08a      	sub	sp, #40	; 0x28
    2e84:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2e8a:	2600      	movs	r6, #0
    2e8c:	f386 8811 	msr	BASEPRI, r6
    2e90:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2e94:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    2e98:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    2e9c:	d111      	bne.n	2ec2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2e9e:	f002 010c 	and.w	r1, r2, #12
    2ea2:	2908      	cmp	r1, #8
    2ea4:	d00d      	beq.n	2ec2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2ea6:	0711      	lsls	r1, r2, #28
    2ea8:	d401      	bmi.n	2eae <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2eaa:	4605      	mov	r5, r0
			*nested_exc = true;
    2eac:	2601      	movs	r6, #1
	*recoverable = false;
    2eae:	2200      	movs	r2, #0
	switch (fault) {
    2eb0:	3b03      	subs	r3, #3
	*recoverable = false;
    2eb2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2eb6:	2b03      	cmp	r3, #3
    2eb8:	d86b      	bhi.n	2f92 <z_arm_fault+0x116>
    2eba:	e8df f003 	tbb	[pc, r3]
    2ebe:	5504      	.short	0x5504
    2ec0:	5d59      	.short	0x5d59
		return NULL;
    2ec2:	4635      	mov	r5, r6
    2ec4:	e7f3      	b.n	2eae <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2ec6:	4b36      	ldr	r3, [pc, #216]	; (2fa0 <z_arm_fault+0x124>)
    2ec8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2eca:	f014 0402 	ands.w	r4, r4, #2
    2ece:	d160      	bne.n	2f92 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ed2:	2a00      	cmp	r2, #0
    2ed4:	db15      	blt.n	2f02 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ed8:	0052      	lsls	r2, r2, #1
    2eda:	d512      	bpl.n	2f02 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    2edc:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2ede:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    2ee2:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2ee6:	4291      	cmp	r1, r2
    2ee8:	d00a      	beq.n	2f00 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    2eea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    2eee:	b30a      	cbz	r2, 2f34 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    2ef0:	f10d 0207 	add.w	r2, sp, #7
    2ef4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2ef6:	4628      	mov	r0, r5
    2ef8:	f7ff ff66 	bl	2dc8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    2efc:	4604      	mov	r4, r0
		break;
    2efe:	e000      	b.n	2f02 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    2f00:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2f06:	b99b      	cbnz	r3, 2f30 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2f08:	2220      	movs	r2, #32
    2f0a:	4629      	mov	r1, r5
    2f0c:	a802      	add	r0, sp, #8
    2f0e:	f017 fca0 	bl	1a852 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f14:	2e00      	cmp	r6, #0
    2f16:	d03e      	beq.n	2f96 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2f1c:	b922      	cbnz	r2, 2f28 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2f1e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2f22:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2f26:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2f28:	a902      	add	r1, sp, #8
    2f2a:	4620      	mov	r0, r4
    2f2c:	f017 fc49 	bl	1a7c2 <z_arm_fatal_error>
}
    2f30:	b00a      	add	sp, #40	; 0x28
    2f32:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2f34:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    2f38:	b12a      	cbz	r2, 2f46 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    2f3a:	f10d 0107 	add.w	r1, sp, #7
    2f3e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2f40:	f7ff ff7e 	bl	2e40 <bus_fault.constprop.0>
    2f44:	e7da      	b.n	2efc <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    2f46:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    2f48:	b292      	uxth	r2, r2
    2f4a:	2a00      	cmp	r2, #0
    2f4c:	d0d9      	beq.n	2f02 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f5c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2f60:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2f64:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    2f66:	e7cc      	b.n	2f02 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    2f68:	f10d 0207 	add.w	r2, sp, #7
    2f6c:	2100      	movs	r1, #0
    2f6e:	e7c2      	b.n	2ef6 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    2f70:	f10d 0107 	add.w	r1, sp, #7
    2f74:	2000      	movs	r0, #0
    2f76:	e7e3      	b.n	2f40 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f78:	4b09      	ldr	r3, [pc, #36]	; (2fa0 <z_arm_fault+0x124>)
    2f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f88:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2f8c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2f90:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f92:	2400      	movs	r4, #0
    2f94:	e7b5      	b.n	2f02 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2f96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2f9a:	f023 0301 	bic.w	r3, r3, #1
    2f9e:	e7c2      	b.n	2f26 <z_arm_fault+0xaa>
    2fa0:	e000ed00 	.word	0xe000ed00

00002fa4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2fa4:	4a02      	ldr	r2, [pc, #8]	; (2fb0 <z_arm_fault_init+0xc>)
    2fa6:	6953      	ldr	r3, [r2, #20]
    2fa8:	f043 0310 	orr.w	r3, r3, #16
    2fac:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2fae:	4770      	bx	lr
    2fb0:	e000ed00 	.word	0xe000ed00

00002fb4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2fb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2fb8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2fbc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2fbe:	4672      	mov	r2, lr
	bl z_arm_fault
    2fc0:	f7ff ff5c 	bl	2e7c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2fc4:	bd01      	pop	{r0, pc}
    2fc6:	bf00      	nop

00002fc8 <z_arm_interrupt_init>:
    2fc8:	4804      	ldr	r0, [pc, #16]	; (2fdc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2fca:	2300      	movs	r3, #0
    2fcc:	2120      	movs	r1, #32
    2fce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2fd0:	3301      	adds	r3, #1
    2fd2:	2b30      	cmp	r3, #48	; 0x30
    2fd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2fd8:	d1f9      	bne.n	2fce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2fda:	4770      	bx	lr
    2fdc:	e000e100 	.word	0xe000e100

00002fe0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2fe0:	f01c f836 	bl	1f050 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2fe4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2fe6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2fea:	4808      	ldr	r0, [pc, #32]	; (300c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2fec:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    2ff0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2ff2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2ff6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2ffa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2ffc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2ffe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3002:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3006:	f7ff fdf1 	bl	2bec <z_arm_prep_c>
    300a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    300c:	200041c0 	.word	0x200041c0

00003010 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3010:	4b08      	ldr	r3, [pc, #32]	; (3034 <z_impl_k_thread_abort+0x24>)
    3012:	689b      	ldr	r3, [r3, #8]
    3014:	4283      	cmp	r3, r0
    3016:	d10b      	bne.n	3030 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3018:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    301c:	b143      	cbz	r3, 3030 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    301e:	4b06      	ldr	r3, [pc, #24]	; (3038 <z_impl_k_thread_abort+0x28>)
    3020:	685a      	ldr	r2, [r3, #4]
    3022:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3026:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    302a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    302e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3030:	f015 bc50 	b.w	188d4 <z_thread_abort>
    3034:	2000287c 	.word	0x2000287c
    3038:	e000ed00 	.word	0xe000ed00

0000303c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    303c:	4b02      	ldr	r3, [pc, #8]	; (3048 <z_arm_configure_static_mpu_regions+0xc>)
    303e:	4a03      	ldr	r2, [pc, #12]	; (304c <z_arm_configure_static_mpu_regions+0x10>)
    3040:	4803      	ldr	r0, [pc, #12]	; (3050 <z_arm_configure_static_mpu_regions+0x14>)
    3042:	2101      	movs	r1, #1
    3044:	f000 b86e 	b.w	3124 <arm_core_mpu_configure_static_mpu_regions>
    3048:	20040000 	.word	0x20040000
    304c:	20000000 	.word	0x20000000
    3050:	0001f744 	.word	0x0001f744

00003054 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3054:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3056:	4b05      	ldr	r3, [pc, #20]	; (306c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3058:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    305a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    305c:	4a04      	ldr	r2, [pc, #16]	; (3070 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    305e:	2140      	movs	r1, #64	; 0x40
    3060:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3064:	4618      	mov	r0, r3
    3066:	2101      	movs	r1, #1
    3068:	f000 b866 	b.w	3138 <arm_core_mpu_configure_dynamic_mpu_regions>
    306c:	20001698 	.word	0x20001698
    3070:	150b0000 	.word	0x150b0000

00003074 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3074:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3076:	4f1f      	ldr	r7, [pc, #124]	; (30f4 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3078:	2600      	movs	r6, #0
    307a:	428e      	cmp	r6, r1
    307c:	db01      	blt.n	3082 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    307e:	4610      	mov	r0, r2
    3080:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    3082:	6844      	ldr	r4, [r0, #4]
    3084:	b39c      	cbz	r4, 30ee <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    3086:	b153      	cbz	r3, 309e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3088:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    308c:	ea14 0f0c 	tst.w	r4, ip
    3090:	d118      	bne.n	30c4 <mpu_configure_regions+0x50>
		&&
    3092:	2c1f      	cmp	r4, #31
    3094:	d916      	bls.n	30c4 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    3096:	6805      	ldr	r5, [r0, #0]
		&&
    3098:	ea1c 0f05 	tst.w	ip, r5
    309c:	d112      	bne.n	30c4 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    309e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    30a0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    30a2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    30a6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    30a8:	d90f      	bls.n	30ca <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    30aa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    30ae:	d80e      	bhi.n	30ce <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    30b0:	3c01      	subs	r4, #1
    30b2:	fab4 f484 	clz	r4, r4
    30b6:	f1c4 041f 	rsb	r4, r4, #31
    30ba:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    30bc:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    30be:	ea4c 0404 	orr.w	r4, ip, r4
    30c2:	d906      	bls.n	30d2 <mpu_configure_regions+0x5e>
			return -EINVAL;
    30c4:	f06f 0215 	mvn.w	r2, #21
    30c8:	e7d9      	b.n	307e <mpu_configure_regions+0xa>
		return REGION_32B;
    30ca:	2408      	movs	r4, #8
    30cc:	e7f6      	b.n	30bc <mpu_configure_regions+0x48>
		return REGION_4G;
    30ce:	243e      	movs	r4, #62	; 0x3e
    30d0:	e7f4      	b.n	30bc <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    30d2:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    30d6:	4315      	orrs	r5, r2
    30d8:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30dc:	f044 0401 	orr.w	r4, r4, #1
    30e0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    30e4:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    30e8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30ea:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    30ee:	3601      	adds	r6, #1
    30f0:	300c      	adds	r0, #12
    30f2:	e7c2      	b.n	307a <mpu_configure_regions+0x6>
    30f4:	e000ed00 	.word	0xe000ed00

000030f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    30f8:	4b04      	ldr	r3, [pc, #16]	; (310c <arm_core_mpu_enable+0x14>)
    30fa:	2205      	movs	r2, #5
    30fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3100:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3104:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3108:	4770      	bx	lr
    310a:	bf00      	nop
    310c:	e000ed00 	.word	0xe000ed00

00003110 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3110:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3114:	4b02      	ldr	r3, [pc, #8]	; (3120 <arm_core_mpu_disable+0x10>)
    3116:	2200      	movs	r2, #0
    3118:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    311c:	4770      	bx	lr
    311e:	bf00      	nop
    3120:	e000ed00 	.word	0xe000ed00

00003124 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3124:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3126:	4c03      	ldr	r4, [pc, #12]	; (3134 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3128:	2301      	movs	r3, #1
    312a:	7822      	ldrb	r2, [r4, #0]
    312c:	f7ff ffa2 	bl	3074 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3130:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3132:	bd10      	pop	{r4, pc}
    3134:	200028f0 	.word	0x200028f0

00003138 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3138:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    313a:	4a09      	ldr	r2, [pc, #36]	; (3160 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    313c:	2300      	movs	r3, #0
    313e:	7812      	ldrb	r2, [r2, #0]
    3140:	f7ff ff98 	bl	3074 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3144:	f110 0f16 	cmn.w	r0, #22
    3148:	d002      	beq.n	3150 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    314a:	4a06      	ldr	r2, [pc, #24]	; (3164 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    314c:	2807      	cmp	r0, #7
    314e:	dd00      	ble.n	3152 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3150:	bd08      	pop	{r3, pc}
    3152:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3156:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    315a:	3001      	adds	r0, #1
    315c:	e7f6      	b.n	314c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    315e:	bf00      	nop
    3160:	200028f0 	.word	0x200028f0
    3164:	e000ed00 	.word	0xe000ed00

00003168 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3168:	4914      	ldr	r1, [pc, #80]	; (31bc <z_arm_mpu_init+0x54>)
    316a:	6808      	ldr	r0, [r1, #0]
    316c:	2808      	cmp	r0, #8
{
    316e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3170:	d821      	bhi.n	31b6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3172:	f7ff ffcd 	bl	3110 <arm_core_mpu_disable>
    3176:	4c12      	ldr	r4, [pc, #72]	; (31c0 <z_arm_mpu_init+0x58>)
    3178:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    317a:	2200      	movs	r2, #0
    317c:	4290      	cmp	r0, r2
    317e:	f101 010c 	add.w	r1, r1, #12
    3182:	d105      	bne.n	3190 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3184:	4b0f      	ldr	r3, [pc, #60]	; (31c4 <z_arm_mpu_init+0x5c>)
    3186:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3188:	f7ff ffb6 	bl	30f8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    318c:	2000      	movs	r0, #0
}
    318e:	bd10      	pop	{r4, pc}
    3190:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3194:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3198:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    319c:	4313      	orrs	r3, r2
    319e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31a2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    31a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    31aa:	f043 0301 	orr.w	r3, r3, #1
    31ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    31b2:	3201      	adds	r2, #1
    31b4:	e7e2      	b.n	317c <z_arm_mpu_init+0x14>
		return -1;
    31b6:	f04f 30ff 	mov.w	r0, #4294967295
    31ba:	e7e8      	b.n	318e <z_arm_mpu_init+0x26>
    31bc:	0001f750 	.word	0x0001f750
    31c0:	e000ed00 	.word	0xe000ed00
    31c4:	200028f0 	.word	0x200028f0

000031c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    31c8:	4b01      	ldr	r3, [pc, #4]	; (31d0 <__stdout_hook_install+0x8>)
    31ca:	6018      	str	r0, [r3, #0]
}
    31cc:	4770      	bx	lr
    31ce:	bf00      	nop
    31d0:	20000274 	.word	0x20000274

000031d4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    31d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    31d6:	f04f 0320 	mov.w	r3, #32
    31da:	f3ef 8011 	mrs	r0, BASEPRI
    31de:	f383 8812 	msr	BASEPRI_MAX, r3
    31e2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    31e6:	4a11      	ldr	r2, [pc, #68]	; (322c <nordicsemi_nrf52_init+0x58>)
    31e8:	2301      	movs	r3, #1
    31ea:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    31ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    31f2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    31f6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    31fa:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    31fe:	2c08      	cmp	r4, #8
    3200:	d108      	bne.n	3214 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3202:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    3206:	2905      	cmp	r1, #5
    3208:	d804      	bhi.n	3214 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    320a:	4c09      	ldr	r4, [pc, #36]	; (3230 <nordicsemi_nrf52_init+0x5c>)
    320c:	5c61      	ldrb	r1, [r4, r1]
    320e:	b109      	cbz	r1, 3214 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3210:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3218:	2201      	movs	r2, #1
    321a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    321e:	f380 8811 	msr	BASEPRI, r0
    3222:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3226:	2000      	movs	r0, #0
    3228:	bd10      	pop	{r4, pc}
    322a:	bf00      	nop
    322c:	4001e000 	.word	0x4001e000
    3230:	00020c31 	.word	0x00020c31

00003234 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3234:	b120      	cbz	r0, 3240 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3236:	4b03      	ldr	r3, [pc, #12]	; (3244 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3238:	0180      	lsls	r0, r0, #6
    323a:	f043 0301 	orr.w	r3, r3, #1
    323e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3240:	4770      	bx	lr
    3242:	bf00      	nop
    3244:	0001f430 	.word	0x0001f430

00003248 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    3248:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    324a:	4c21      	ldr	r4, [pc, #132]	; (32d0 <le_gen_dhkey+0x88>)
    324c:	f3bf 8f5b 	dmb	ish
    3250:	6823      	ldr	r3, [r4, #0]
    3252:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    3256:	07da      	lsls	r2, r3, #31
{
    3258:	4606      	mov	r6, r0
    325a:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    325c:	d501      	bpl.n	3262 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    325e:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    3260:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    3262:	2901      	cmp	r1, #1
    3264:	d831      	bhi.n	32ca <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3266:	f3bf 8f5b 	dmb	ish
    326a:	e854 3f00 	ldrex	r3, [r4]
    326e:	f043 0202 	orr.w	r2, r3, #2
    3272:	e844 2100 	strex	r1, r2, [r4]
    3276:	2900      	cmp	r1, #0
    3278:	d1f7      	bne.n	326a <le_gen_dhkey+0x22>
    327a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    327e:	079b      	lsls	r3, r3, #30
    3280:	d4ed      	bmi.n	325e <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    3282:	4814      	ldr	r0, [pc, #80]	; (32d4 <le_gen_dhkey+0x8c>)
    3284:	4631      	mov	r1, r6
    3286:	f017 fb57 	bl	1a938 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    328a:	4813      	ldr	r0, [pc, #76]	; (32d8 <le_gen_dhkey+0x90>)
    328c:	f106 0120 	add.w	r1, r6, #32
    3290:	f017 fb52 	bl	1a938 <sys_memcpy_swap.constprop.0>
    3294:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    3298:	b175      	cbz	r5, 32b8 <le_gen_dhkey+0x70>
    329a:	e854 3f00 	ldrex	r3, [r4]
    329e:	f043 0304 	orr.w	r3, r3, #4
    32a2:	e844 3200 	strex	r2, r3, [r4]
    32a6:	2a00      	cmp	r2, #0
    32a8:	d1f7      	bne.n	329a <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    32aa:	f3bf 8f5b 	dmb	ish
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    32ae:	480b      	ldr	r0, [pc, #44]	; (32dc <le_gen_dhkey+0x94>)
    32b0:	f014 fe30 	bl	17f14 <z_impl_k_sem_give>
    32b4:	2000      	movs	r0, #0
    32b6:	e7d3      	b.n	3260 <le_gen_dhkey+0x18>
    32b8:	e854 3f00 	ldrex	r3, [r4]
    32bc:	f023 0304 	bic.w	r3, r3, #4
    32c0:	e844 3200 	strex	r2, r3, [r4]
    32c4:	2a00      	cmp	r2, #0
    32c6:	d0f0      	beq.n	32aa <le_gen_dhkey+0x62>
    32c8:	e7f6      	b.n	32b8 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    32ca:	2012      	movs	r0, #18
    32cc:	e7c8      	b.n	3260 <le_gen_dhkey+0x18>
    32ce:	bf00      	nop
    32d0:	200016a4 	.word	0x200016a4
    32d4:	20002911 	.word	0x20002911
    32d8:	20002931 	.word	0x20002931
    32dc:	20000a78 	.word	0x20000a78

000032e0 <ecc_thread>:
{
    32e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    32e4:	4f60      	ldr	r7, [pc, #384]	; (3468 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    32e6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 346c <ecc_thread+0x18c>
    32ea:	463e      	mov	r6, r7
    32ec:	f04f 32ff 	mov.w	r2, #4294967295
    32f0:	f04f 33ff 	mov.w	r3, #4294967295
    32f4:	4640      	mov	r0, r8
    32f6:	f014 fe33 	bl	17f60 <z_impl_k_sem_take>
    32fa:	f3bf 8f5b 	dmb	ish
    32fe:	683c      	ldr	r4, [r7, #0]
    3300:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    3304:	f014 0401 	ands.w	r4, r4, #1
    3308:	d055      	beq.n	33b6 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    330a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 3470 <ecc_thread+0x190>
    330e:	4c59      	ldr	r4, [pc, #356]	; (3474 <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    3310:	4d59      	ldr	r5, [pc, #356]	; (3478 <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    3312:	485a      	ldr	r0, [pc, #360]	; (347c <ecc_thread+0x19c>)
    3314:	464a      	mov	r2, r9
    3316:	4621      	mov	r1, r4
    3318:	f016 f965 	bl	195e6 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    331c:	2800      	cmp	r0, #0
    331e:	d03e      	beq.n	339e <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    3320:	2220      	movs	r2, #32
    3322:	4629      	mov	r1, r5
    3324:	4620      	mov	r0, r4
    3326:	f017 fa83 	bl	1a830 <memcmp>
    332a:	2800      	cmp	r0, #0
    332c:	d0f1      	beq.n	3312 <ecc_thread+0x32>
	return 0;
    332e:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3332:	f04f 32ff 	mov.w	r2, #4294967295
    3336:	f04f 33ff 	mov.w	r3, #4294967295
    333a:	2001      	movs	r0, #1
    333c:	f000 f9c6 	bl	36cc <bt_buf_get_rx>
    3340:	f100 0508 	add.w	r5, r0, #8
    3344:	2102      	movs	r1, #2
    3346:	4604      	mov	r4, r0
    3348:	4628      	mov	r0, r5
    334a:	f01a fdde 	bl	1df0a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    334e:	233e      	movs	r3, #62	; 0x3e
    3350:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    3352:	2342      	movs	r3, #66	; 0x42
    3354:	7043      	strb	r3, [r0, #1]
    3356:	2101      	movs	r1, #1
    3358:	4628      	mov	r0, r5
    335a:	f01a fdd6 	bl	1df0a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    335e:	2308      	movs	r3, #8
    3360:	7003      	strb	r3, [r0, #0]
    3362:	2141      	movs	r1, #65	; 0x41
    3364:	4628      	mov	r0, r5
    3366:	f01a fdd0 	bl	1df0a <net_buf_simple_add>
    336a:	4605      	mov	r5, r0
	evt->status = status;
    336c:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    3370:	f1b9 0f00 	cmp.w	r9, #0
    3374:	d016      	beq.n	33a4 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
    3376:	2240      	movs	r2, #64	; 0x40
    3378:	2100      	movs	r1, #0
    337a:	f017 fa75 	bl	1a868 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    337e:	f3bf 8f5b 	dmb	ish
    3382:	e856 3f00 	ldrex	r3, [r6]
    3386:	f023 0301 	bic.w	r3, r3, #1
    338a:	e846 3200 	strex	r2, r3, [r6]
    338e:	2a00      	cmp	r2, #0
    3390:	d1f7      	bne.n	3382 <ecc_thread+0xa2>
    3392:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    3396:	4620      	mov	r0, r4
	bt_recv(buf);
    3398:	f000 fd98 	bl	3ecc <bt_recv>
	while (true) {
    339c:	e7a6      	b.n	32ec <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
    339e:	f04f 091f 	mov.w	r9, #31
    33a2:	e7c6      	b.n	3332 <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    33a4:	4935      	ldr	r1, [pc, #212]	; (347c <ecc_thread+0x19c>)
    33a6:	f017 fac7 	bl	1a938 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    33aa:	3120      	adds	r1, #32
    33ac:	f105 0021 	add.w	r0, r5, #33	; 0x21
    33b0:	f017 fac2 	bl	1a938 <sys_memcpy_swap.constprop.0>
    33b4:	e7e3      	b.n	337e <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    33b6:	f3bf 8f5b 	dmb	ish
    33ba:	683b      	ldr	r3, [r7, #0]
    33bc:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    33c0:	079b      	lsls	r3, r3, #30
    33c2:	d593      	bpl.n	32ec <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    33c4:	492a      	ldr	r1, [pc, #168]	; (3470 <ecc_thread+0x190>)
    33c6:	482d      	ldr	r0, [pc, #180]	; (347c <ecc_thread+0x19c>)
    33c8:	f016 ffc6 	bl	1a358 <uECC_valid_public_key>
	if (ret < 0) {
    33cc:	2800      	cmp	r0, #0
    33ce:	db11      	blt.n	33f4 <ecc_thread+0x114>
    33d0:	f3bf 8f5b 	dmb	ish
    33d4:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
    33d6:	4927      	ldr	r1, [pc, #156]	; (3474 <ecc_thread+0x194>)
    33d8:	4827      	ldr	r0, [pc, #156]	; (3478 <ecc_thread+0x198>)
    33da:	f3bf 8f5b 	dmb	ish
    33de:	f013 0f04 	tst.w	r3, #4
    33e2:	f101 0220 	add.w	r2, r1, #32
    33e6:	4b22      	ldr	r3, [pc, #136]	; (3470 <ecc_thread+0x190>)
    33e8:	bf18      	it	ne
    33ea:	4601      	movne	r1, r0
    33ec:	4610      	mov	r0, r2
    33ee:	f016 f949 	bl	19684 <uECC_shared_secret>
    33f2:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    33f4:	f04f 32ff 	mov.w	r2, #4294967295
    33f8:	f04f 33ff 	mov.w	r3, #4294967295
    33fc:	2001      	movs	r0, #1
    33fe:	f000 f965 	bl	36cc <bt_buf_get_rx>
    3402:	f100 0908 	add.w	r9, r0, #8
    3406:	2102      	movs	r1, #2
    3408:	4605      	mov	r5, r0
    340a:	4648      	mov	r0, r9
    340c:	f01a fd7d 	bl	1df0a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    3410:	233e      	movs	r3, #62	; 0x3e
    3412:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    3414:	2322      	movs	r3, #34	; 0x22
    3416:	7043      	strb	r3, [r0, #1]
    3418:	2101      	movs	r1, #1
    341a:	4648      	mov	r0, r9
    341c:	f01a fd75 	bl	1df0a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    3420:	2309      	movs	r3, #9
    3422:	7003      	strb	r3, [r0, #0]
    3424:	2121      	movs	r1, #33	; 0x21
    3426:	4648      	mov	r0, r9
    3428:	f01a fd6f 	bl	1df0a <net_buf_simple_add>
    342c:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    342e:	3001      	adds	r0, #1
    3430:	b99c      	cbnz	r4, 345a <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    3432:	221f      	movs	r2, #31
    3434:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    3436:	21ff      	movs	r1, #255	; 0xff
    3438:	2220      	movs	r2, #32
    343a:	f017 fa15 	bl	1a868 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    343e:	f3bf 8f5b 	dmb	ish
    3442:	e856 3f00 	ldrex	r3, [r6]
    3446:	f023 0302 	bic.w	r3, r3, #2
    344a:	e846 3200 	strex	r2, r3, [r6]
    344e:	2a00      	cmp	r2, #0
    3450:	d1f7      	bne.n	3442 <ecc_thread+0x162>
    3452:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    3456:	4628      	mov	r0, r5
    3458:	e79e      	b.n	3398 <ecc_thread+0xb8>
		evt->status = 0U;
    345a:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    345c:	4907      	ldr	r1, [pc, #28]	; (347c <ecc_thread+0x19c>)
		evt->status = 0U;
    345e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    3460:	f017 fa6a 	bl	1a938 <sys_memcpy_swap.constprop.0>
    3464:	e7eb      	b.n	343e <ecc_thread+0x15e>
    3466:	bf00      	nop
    3468:	200016a4 	.word	0x200016a4
    346c:	20000a78 	.word	0x20000a78
    3470:	0001f770 	.word	0x0001f770
    3474:	200028f1 	.word	0x200028f1
    3478:	00020c3e 	.word	0x00020c3e
    347c:	20002911 	.word	0x20002911

00003480 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    3480:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    3482:	7d06      	ldrb	r6, [r0, #20]
    3484:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    3486:	b976      	cbnz	r6, 34a6 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    3488:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    348a:	881d      	ldrh	r5, [r3, #0]
    348c:	f242 0226 	movw	r2, #8230	; 0x2026
    3490:	4295      	cmp	r5, r2
    3492:	d045      	beq.n	3520 <bt_hci_ecc_send+0xa0>
    3494:	d80f      	bhi.n	34b6 <bt_hci_ecc_send+0x36>
    3496:	f242 0201 	movw	r2, #8193	; 0x2001
    349a:	4295      	cmp	r5, r2
    349c:	d04f      	beq.n	353e <bt_hci_ecc_send+0xbe>
    349e:	f242 0325 	movw	r3, #8229	; 0x2025
    34a2:	429d      	cmp	r5, r3
    34a4:	d013      	beq.n	34ce <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    34a6:	4b2a      	ldr	r3, [pc, #168]	; (3550 <bt_hci_ecc_send+0xd0>)
    34a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    34ac:	4620      	mov	r0, r4
    34ae:	695b      	ldr	r3, [r3, #20]
}
    34b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    34b4:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    34b6:	f242 035e 	movw	r3, #8286	; 0x205e
    34ba:	429d      	cmp	r5, r3
    34bc:	d1f3      	bne.n	34a6 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    34be:	2103      	movs	r1, #3
    34c0:	3008      	adds	r0, #8
    34c2:	f01a fd57 	bl	1df74 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    34c6:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    34c8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    34cc:	e02e      	b.n	352c <bt_hci_ecc_send+0xac>
    34ce:	2103      	movs	r1, #3
    34d0:	3008      	adds	r0, #8
    34d2:	f01a fd4f 	bl	1df74 <net_buf_simple_pull>
	net_buf_unref(buf);
    34d6:	4620      	mov	r0, r4
    34d8:	f012 fc1c 	bl	15d14 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    34dc:	f3bf 8f5b 	dmb	ish
    34e0:	4b1c      	ldr	r3, [pc, #112]	; (3554 <bt_hci_ecc_send+0xd4>)
    34e2:	681a      	ldr	r2, [r3, #0]
    34e4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    34e8:	0792      	lsls	r2, r2, #30
    34ea:	d507      	bpl.n	34fc <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    34ec:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    34ee:	4631      	mov	r1, r6
    34f0:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    34f4:	f017 f9fc 	bl	1a8f0 <send_cmd_status>
}
    34f8:	2000      	movs	r0, #0
    34fa:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34fc:	f3bf 8f5b 	dmb	ish
    3500:	e853 2f00 	ldrex	r2, [r3]
    3504:	f042 0101 	orr.w	r1, r2, #1
    3508:	e843 1000 	strex	r0, r1, [r3]
    350c:	2800      	cmp	r0, #0
    350e:	d1f7      	bne.n	3500 <bt_hci_ecc_send+0x80>
    3510:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    3514:	07d3      	lsls	r3, r2, #31
    3516:	d4e9      	bmi.n	34ec <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    3518:	480f      	ldr	r0, [pc, #60]	; (3558 <bt_hci_ecc_send+0xd8>)
    351a:	f014 fcfb 	bl	17f14 <z_impl_k_sem_give>
}
    351e:	e7e6      	b.n	34ee <bt_hci_ecc_send+0x6e>
    3520:	2103      	movs	r1, #3
    3522:	3008      	adds	r0, #8
    3524:	f01a fd26 	bl	1df74 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    3528:	68a0      	ldr	r0, [r4, #8]
    352a:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    352c:	f7ff fe8c 	bl	3248 <le_gen_dhkey>
    3530:	4606      	mov	r6, r0
	net_buf_unref(buf);
    3532:	4620      	mov	r0, r4
    3534:	f012 fbee 	bl	15d14 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    3538:	4631      	mov	r1, r6
    353a:	4628      	mov	r0, r5
    353c:	e7da      	b.n	34f4 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    353e:	78da      	ldrb	r2, [r3, #3]
    3540:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3544:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    3546:	791a      	ldrb	r2, [r3, #4]
    3548:	f022 0201 	bic.w	r2, r2, #1
    354c:	711a      	strb	r2, [r3, #4]
}
    354e:	e7aa      	b.n	34a6 <bt_hci_ecc_send+0x26>
    3550:	20000000 	.word	0x20000000
    3554:	200016a4 	.word	0x200016a4
    3558:	20000a78 	.word	0x20000a78

0000355c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    355c:	b510      	push	{r4, lr}
    355e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3560:	4c0c      	ldr	r4, [pc, #48]	; (3594 <bt_hci_ecc_init+0x38>)
    3562:	490d      	ldr	r1, [pc, #52]	; (3598 <bt_hci_ecc_init+0x3c>)
    3564:	2200      	movs	r2, #0
    3566:	2300      	movs	r3, #0
    3568:	e9cd 2306 	strd	r2, r3, [sp, #24]
    356c:	2300      	movs	r3, #0
    356e:	220a      	movs	r2, #10
    3570:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3574:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3578:	9300      	str	r3, [sp, #0]
    357a:	f44f 628f 	mov.w	r2, #1144	; 0x478
    357e:	4b07      	ldr	r3, [pc, #28]	; (359c <bt_hci_ecc_init+0x40>)
    3580:	4620      	mov	r0, r4
    3582:	f014 fbef 	bl	17d64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3586:	4906      	ldr	r1, [pc, #24]	; (35a0 <bt_hci_ecc_init+0x44>)
    3588:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    358a:	b008      	add	sp, #32
    358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3590:	f01b b8c6 	b.w	1e720 <z_impl_k_thread_name_set>
    3594:	20000c28 	.word	0x20000c28
    3598:	20002dc0 	.word	0x20002dc0
    359c:	000032e1 	.word	0x000032e1
    35a0:	00020c37 	.word	0x00020c37

000035a4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    35a4:	b430      	push	{r4, r5}
    35a6:	4603      	mov	r3, r0
    35a8:	4608      	mov	r0, r1
	switch (src->type) {
    35aa:	781a      	ldrb	r2, [r3, #0]
    35ac:	2a01      	cmp	r2, #1
    35ae:	d013      	beq.n	35d8 <uuid_to_uuid128+0x34>
    35b0:	2a02      	cmp	r2, #2
    35b2:	d026      	beq.n	3602 <uuid_to_uuid128+0x5e>
    35b4:	b972      	cbnz	r2, 35d4 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    35b6:	4a15      	ldr	r2, [pc, #84]	; (360c <uuid_to_uuid128+0x68>)
    35b8:	f102 0410 	add.w	r4, r2, #16
    35bc:	f852 5b04 	ldr.w	r5, [r2], #4
    35c0:	f841 5b04 	str.w	r5, [r1], #4
    35c4:	42a2      	cmp	r2, r4
    35c6:	d1f9      	bne.n	35bc <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    35c8:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    35ca:	7812      	ldrb	r2, [r2, #0]
    35cc:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    35ce:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    35d0:	0a1b      	lsrs	r3, r3, #8
    35d2:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    35d4:	bc30      	pop	{r4, r5}
    35d6:	4770      	bx	lr
		*dst = uuid128_base;
    35d8:	4a0c      	ldr	r2, [pc, #48]	; (360c <uuid_to_uuid128+0x68>)
    35da:	f102 0410 	add.w	r4, r2, #16
    35de:	f852 5b04 	ldr.w	r5, [r2], #4
    35e2:	f841 5b04 	str.w	r5, [r1], #4
    35e6:	42a2      	cmp	r2, r4
    35e8:	d1f9      	bne.n	35de <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    35ea:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    35ec:	7812      	ldrb	r2, [r2, #0]
    35ee:	700a      	strb	r2, [r1, #0]
    35f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    35f4:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    35f6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    35f8:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    35fa:	0a1b      	lsrs	r3, r3, #8
    35fc:	7382      	strb	r2, [r0, #14]
    35fe:	7403      	strb	r3, [r0, #16]
}
    3600:	e7e8      	b.n	35d4 <uuid_to_uuid128+0x30>
}
    3602:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    3604:	2211      	movs	r2, #17
    3606:	4619      	mov	r1, r3
    3608:	f017 b923 	b.w	1a852 <memcpy>
    360c:	00020c80 	.word	0x00020c80

00003610 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    3610:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    3612:	7805      	ldrb	r5, [r0, #0]
    3614:	2d01      	cmp	r5, #1
{
    3616:	b08b      	sub	sp, #44	; 0x2c
    3618:	4604      	mov	r4, r0
    361a:	460e      	mov	r6, r1
    361c:	4617      	mov	r7, r2
	switch (uuid->type) {
    361e:	d00c      	beq.n	363a <bt_uuid_to_str+0x2a>
    3620:	2d02      	cmp	r5, #2
    3622:	d00d      	beq.n	3640 <bt_uuid_to_str+0x30>
    3624:	2d00      	cmp	r5, #0
    3626:	d144      	bne.n	36b2 <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    3628:	8843      	ldrh	r3, [r0, #2]
    362a:	4a25      	ldr	r2, [pc, #148]	; (36c0 <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    362c:	4639      	mov	r1, r7
    362e:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
    3630:	b00b      	add	sp, #44	; 0x2c
    3632:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    3636:	f015 bca3 	b.w	18f80 <snprintk>
    363a:	6843      	ldr	r3, [r0, #4]
    363c:	4a21      	ldr	r2, [pc, #132]	; (36c4 <bt_uuid_to_str+0xb4>)
    363e:	e7f5      	b.n	362c <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    3640:	462a      	mov	r2, r5
    3642:	1c41      	adds	r1, r0, #1
    3644:	a806      	add	r0, sp, #24
    3646:	f017 f904 	bl	1a852 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    364a:	1ce1      	adds	r1, r4, #3
    364c:	2204      	movs	r2, #4
    364e:	a808      	add	r0, sp, #32
    3650:	f017 f8ff 	bl	1a852 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    3654:	462a      	mov	r2, r5
    3656:	1de1      	adds	r1, r4, #7
    3658:	f10d 001a 	add.w	r0, sp, #26
    365c:	f017 f8f9 	bl	1a852 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    3660:	462a      	mov	r2, r5
    3662:	f104 0109 	add.w	r1, r4, #9
    3666:	a807      	add	r0, sp, #28
    3668:	f017 f8f3 	bl	1a852 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    366c:	462a      	mov	r2, r5
    366e:	f104 010b 	add.w	r1, r4, #11
    3672:	f10d 001e 	add.w	r0, sp, #30
    3676:	f017 f8ec 	bl	1a852 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    367a:	f104 010d 	add.w	r1, r4, #13
    367e:	2204      	movs	r2, #4
    3680:	a809      	add	r0, sp, #36	; 0x24
    3682:	f017 f8e6 	bl	1a852 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    3686:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    368a:	9304      	str	r3, [sp, #16]
    368c:	9b08      	ldr	r3, [sp, #32]
    368e:	9303      	str	r3, [sp, #12]
    3690:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    3694:	9302      	str	r3, [sp, #8]
    3696:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    369a:	9301      	str	r3, [sp, #4]
    369c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    36a0:	9300      	str	r3, [sp, #0]
    36a2:	4a09      	ldr	r2, [pc, #36]	; (36c8 <bt_uuid_to_str+0xb8>)
    36a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36a6:	4639      	mov	r1, r7
    36a8:	4630      	mov	r0, r6
    36aa:	f015 fc69 	bl	18f80 <snprintk>
}
    36ae:	b00b      	add	sp, #44	; 0x2c
    36b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
    36b2:	2100      	movs	r1, #0
    36b4:	4630      	mov	r0, r6
}
    36b6:	b00b      	add	sp, #44	; 0x2c
    36b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
    36bc:	f017 b8d4 	b.w	1a868 <memset>
    36c0:	00020c7b 	.word	0x00020c7b
    36c4:	00020c5e 	.word	0x00020c5e
    36c8:	00020c63 	.word	0x00020c63

000036cc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    36cc:	b538      	push	{r3, r4, r5, lr}
    36ce:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    36d0:	4805      	ldr	r0, [pc, #20]	; (36e8 <bt_buf_get_rx+0x1c>)
    36d2:	f01a fbb8 	bl	1de46 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    36d6:	4604      	mov	r4, r0
    36d8:	b120      	cbz	r0, 36e4 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    36da:	2100      	movs	r1, #0
    36dc:	3008      	adds	r0, #8
    36de:	f01a fbd1 	bl	1de84 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    36e2:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    36e4:	4620      	mov	r0, r4
    36e6:	bd38      	pop	{r3, r4, r5, pc}
    36e8:	20000bcc 	.word	0x20000bcc

000036ec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    36ec:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    36ee:	490b      	ldr	r1, [pc, #44]	; (371c <bt_buf_get_cmd_complete+0x30>)
{
    36f0:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    36f2:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
    36f6:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    36f8:	b920      	cbnz	r0, 3704 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    36fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    36fe:	2001      	movs	r0, #1
    3700:	f7ff bfe4 	b.w	36cc <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    3704:	f01a fbcf 	bl	1dea6 <net_buf_ref>
    3708:	2301      	movs	r3, #1
		buf->len = 0U;
    370a:	2100      	movs	r1, #0
    370c:	7503      	strb	r3, [r0, #20]
    370e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    3710:	4604      	mov	r4, r0
    3712:	3008      	adds	r0, #8
    3714:	f01a fbb6 	bl	1de84 <net_buf_simple_reserve>
}
    3718:	4620      	mov	r0, r4
    371a:	bd10      	pop	{r4, pc}
    371c:	20000000 	.word	0x20000000

00003720 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    3720:	b570      	push	{r4, r5, r6, lr}
    3722:	4604      	mov	r4, r0
	switch (evt) {
    3724:	2c0f      	cmp	r4, #15
{
    3726:	460d      	mov	r5, r1
    3728:	4610      	mov	r0, r2
    372a:	4619      	mov	r1, r3
	switch (evt) {
    372c:	d805      	bhi.n	373a <bt_buf_get_evt+0x1a>
    372e:	2c0d      	cmp	r4, #13
    3730:	d912      	bls.n	3758 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    3732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    3736:	f7ff bfd9 	b.w	36ec <bt_buf_get_cmd_complete>
	switch (evt) {
    373a:	2c13      	cmp	r4, #19
    373c:	d10c      	bne.n	3758 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    373e:	480b      	ldr	r0, [pc, #44]	; (376c <bt_buf_get_evt+0x4c>)
    3740:	f01a fb81 	bl	1de46 <net_buf_alloc_fixed>
			if (buf) {
    3744:	4604      	mov	r4, r0
    3746:	b128      	cbz	r0, 3754 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    3748:	2100      	movs	r1, #0
    374a:	3008      	adds	r0, #8
    374c:	f01a fb9a 	bl	1de84 <net_buf_simple_reserve>
    3750:	2301      	movs	r3, #1
    3752:	7523      	strb	r3, [r4, #20]
}
    3754:	4620      	mov	r0, r4
    3756:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    3758:	4602      	mov	r2, r0
    375a:	460b      	mov	r3, r1
		if (discardable) {
    375c:	b10d      	cbz	r5, 3762 <bt_buf_get_evt+0x42>
    375e:	4804      	ldr	r0, [pc, #16]	; (3770 <bt_buf_get_evt+0x50>)
    3760:	e7ee      	b.n	3740 <bt_buf_get_evt+0x20>
}
    3762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3766:	2001      	movs	r0, #1
    3768:	f7ff bfb0 	b.w	36cc <bt_buf_get_rx>
    376c:	20000bf8 	.word	0x20000bf8
    3770:	20000b48 	.word	0x20000b48

00003774 <hci_disconn_complete_prio>:
{
    3774:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    3776:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    3778:	781a      	ldrb	r2, [r3, #0]
    377a:	b972      	cbnz	r2, 379a <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    377c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    3780:	4620      	mov	r0, r4
    3782:	f001 fe41 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
    3786:	4605      	mov	r5, r0
    3788:	b940      	cbnz	r0, 379c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    378a:	4b08      	ldr	r3, [pc, #32]	; (37ac <hci_disconn_complete_prio+0x38>)
    378c:	881a      	ldrh	r2, [r3, #0]
    378e:	b922      	cbnz	r2, 379a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    3790:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    3794:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    3798:	8018      	strh	r0, [r3, #0]
}
    379a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    379c:	2101      	movs	r1, #1
    379e:	f001 fe3b 	bl	5418 <bt_conn_set_state>
	bt_conn_unref(conn);
    37a2:	4628      	mov	r0, r5
}
    37a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    37a8:	f017 bf9a 	b.w	1b6e0 <bt_conn_unref>
    37ac:	200028bc 	.word	0x200028bc

000037b0 <hci_le_meta_event>:
{
    37b0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    37b2:	2101      	movs	r1, #1
    37b4:	4604      	mov	r4, r0
    37b6:	3008      	adds	r0, #8
    37b8:	f01a fbe4 	bl	1df84 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    37bc:	4621      	mov	r1, r4
    37be:	4a03      	ldr	r2, [pc, #12]	; (37cc <hci_le_meta_event+0x1c>)
    37c0:	7800      	ldrb	r0, [r0, #0]
}
    37c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    37c6:	230b      	movs	r3, #11
    37c8:	f017 b93d 	b.w	1aa46 <handle_event>
    37cc:	0001f850 	.word	0x0001f850

000037d0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    37d0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    37d2:	4c0c      	ldr	r4, [pc, #48]	; (3804 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    37d4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    37d6:	2205      	movs	r2, #5
    37d8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    37dc:	f001 fff6 	bl	57cc <bt_conn_lookup_state_le>
		if (!conn) {
    37e0:	b970      	cbnz	r0, 3800 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    37e2:	4b09      	ldr	r3, [pc, #36]	; (3808 <find_pending_connect.part.0+0x38>)
    37e4:	6818      	ldr	r0, [r3, #0]
    37e6:	889a      	ldrh	r2, [r3, #4]
    37e8:	9000      	str	r0, [sp, #0]
    37ea:	799b      	ldrb	r3, [r3, #6]
    37ec:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    37f0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    37f4:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    37f8:	2204      	movs	r2, #4
    37fa:	4669      	mov	r1, sp
    37fc:	f001 ffe6 	bl	57cc <bt_conn_lookup_state_le>
}
    3800:	b002      	add	sp, #8
    3802:	bd10      	pop	{r4, pc}
    3804:	20000000 	.word	0x20000000
    3808:	0001f3d6 	.word	0x0001f3d6

0000380c <hci_cmd_done>:
{
    380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    380e:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3810:	7990      	ldrb	r0, [r2, #6]
{
    3812:	460e      	mov	r6, r1
    3814:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3816:	f012 f9b9 	bl	15b8c <net_buf_pool_get>
    381a:	4b28      	ldr	r3, [pc, #160]	; (38bc <hci_cmd_done+0xb0>)
    381c:	4283      	cmp	r3, r0
    381e:	d14b      	bne.n	38b8 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
    3820:	4620      	mov	r0, r4
    3822:	f012 f9bb 	bl	15b9c <net_buf_id>
    3826:	4d26      	ldr	r5, [pc, #152]	; (38c0 <hci_cmd_done+0xb4>)
    3828:	230c      	movs	r3, #12
    382a:	fb03 5000 	mla	r0, r3, r0, r5
    382e:	8843      	ldrh	r3, [r0, #2]
    3830:	42bb      	cmp	r3, r7
    3832:	d141      	bne.n	38b8 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
    3834:	4f23      	ldr	r7, [pc, #140]	; (38c4 <hci_cmd_done+0xb8>)
    3836:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
    383a:	b120      	cbz	r0, 3846 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    383c:	f012 fa6a 	bl	15d14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3840:	2300      	movs	r3, #0
    3842:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    3846:	4620      	mov	r0, r4
    3848:	f012 f9a8 	bl	15b9c <net_buf_id>
    384c:	270c      	movs	r7, #12
    384e:	fb07 5000 	mla	r0, r7, r0, r5
    3852:	6843      	ldr	r3, [r0, #4]
    3854:	b19b      	cbz	r3, 387e <hci_cmd_done+0x72>
    3856:	b996      	cbnz	r6, 387e <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    3858:	4620      	mov	r0, r4
    385a:	f012 f99f 	bl	15b9c <net_buf_id>
    385e:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    3862:	2101      	movs	r1, #1
    3864:	6842      	ldr	r2, [r0, #4]
    3866:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
    386a:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    386c:	f003 071f 	and.w	r7, r3, #31
    3870:	40b9      	lsls	r1, r7
	if (val) {
    3872:	095b      	lsrs	r3, r3, #5
    3874:	b1d2      	cbz	r2, 38ac <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3876:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    387a:	f017 f93d 	bl	1aaf8 <atomic_or>
	if (cmd(buf)->sync) {
    387e:	4620      	mov	r0, r4
    3880:	f012 f98c 	bl	15b9c <net_buf_id>
    3884:	270c      	movs	r7, #12
    3886:	fb07 5000 	mla	r0, r7, r0, r5
    388a:	6883      	ldr	r3, [r0, #8]
    388c:	b1a3      	cbz	r3, 38b8 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
    388e:	4620      	mov	r0, r4
    3890:	f012 f984 	bl	15b9c <net_buf_id>
    3894:	4378      	muls	r0, r7
    3896:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    3898:	4620      	mov	r0, r4
    389a:	f012 f97f 	bl	15b9c <net_buf_id>
    389e:	fb07 5500 	mla	r5, r7, r0, r5
    38a2:	68a8      	ldr	r0, [r5, #8]
}
    38a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    38a8:	f014 bb34 	b.w	17f14 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    38ac:	43c9      	mvns	r1, r1
    38ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    38b2:	f017 f996 	bl	1abe2 <atomic_and.isra.0>
    38b6:	e7e2      	b.n	387e <hci_cmd_done+0x72>
    38b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38ba:	bf00      	nop
    38bc:	20000ba0 	.word	0x20000ba0
    38c0:	200016a8 	.word	0x200016a8
    38c4:	20000000 	.word	0x20000000

000038c8 <hci_cmd_status>:
{
    38c8:	b538      	push	{r3, r4, r5, lr}
    38ca:	2104      	movs	r1, #4
    38cc:	4604      	mov	r4, r0
    38ce:	3008      	adds	r0, #8
    38d0:	f01a fb58 	bl	1df84 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    38d4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    38d6:	7801      	ldrb	r1, [r0, #0]
    38d8:	8840      	ldrh	r0, [r0, #2]
    38da:	4622      	mov	r2, r4
    38dc:	f7ff ff96 	bl	380c <hci_cmd_done>
	if (ncmd) {
    38e0:	b125      	cbz	r5, 38ec <hci_cmd_status+0x24>
    38e2:	4803      	ldr	r0, [pc, #12]	; (38f0 <hci_cmd_status+0x28>)
}
    38e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    38e8:	f014 bb14 	b.w	17f14 <z_impl_k_sem_give>
    38ec:	bd38      	pop	{r3, r4, r5, pc}
    38ee:	bf00      	nop
    38f0:	20000120 	.word	0x20000120

000038f4 <hci_cmd_complete>:
{
    38f4:	b538      	push	{r3, r4, r5, lr}
    38f6:	2103      	movs	r1, #3
    38f8:	4604      	mov	r4, r0
    38fa:	3008      	adds	r0, #8
    38fc:	f01a fb42 	bl	1df84 <net_buf_simple_pull_mem>
	status = buf->data[0];
    3900:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    3902:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    3904:	7819      	ldrb	r1, [r3, #0]
    3906:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    390a:	4622      	mov	r2, r4
    390c:	f7ff ff7e 	bl	380c <hci_cmd_done>
	if (ncmd) {
    3910:	b125      	cbz	r5, 391c <hci_cmd_complete+0x28>
    3912:	4803      	ldr	r0, [pc, #12]	; (3920 <hci_cmd_complete+0x2c>)
}
    3914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3918:	f014 bafc 	b.w	17f14 <z_impl_k_sem_give>
    391c:	bd38      	pop	{r3, r4, r5, pc}
    391e:	bf00      	nop
    3920:	20000120 	.word	0x20000120

00003924 <hci_tx_thread>:
{
    3924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    3928:	f8df 8108 	ldr.w	r8, [pc, #264]	; 3a34 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    392c:	f8df a108 	ldr.w	sl, [pc, #264]	; 3a38 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    3930:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    3934:	4841      	ldr	r0, [pc, #260]	; (3a3c <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3936:	f36f 3352 	bfc	r3, #13, #6
    393a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    393e:	f001 fd2d 	bl	539c <bt_conn_prepare_events>
    3942:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    3944:	483b      	ldr	r0, [pc, #236]	; (3a34 <hci_tx_thread+0x110>)
    3946:	f04f 32ff 	mov.w	r2, #4294967295
    394a:	f04f 33ff 	mov.w	r3, #4294967295
    394e:	4629      	mov	r1, r5
    3950:	f015 f984 	bl	18c5c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    3954:	b160      	cbz	r0, 3970 <hci_tx_thread+0x4c>
    3956:	493a      	ldr	r1, [pc, #232]	; (3a40 <hci_tx_thread+0x11c>)
    3958:	483a      	ldr	r0, [pc, #232]	; (3a44 <hci_tx_thread+0x120>)
    395a:	f640 13ab 	movw	r3, #2475	; 0x9ab
    395e:	4652      	mov	r2, sl
    3960:	f015 fe17 	bl	19592 <assert_print>
    3964:	4040      	eors	r0, r0
    3966:	f380 8811 	msr	BASEPRI, r0
    396a:	f04f 0003 	mov.w	r0, #3
    396e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3970:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 3a48 <hci_tx_thread+0x124>
{
    3974:	4e2f      	ldr	r6, [pc, #188]	; (3a34 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    3976:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
    397a:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    397e:	b915      	cbnz	r5, 3986 <hci_tx_thread+0x62>
	z_impl_k_yield();
    3980:	f014 ff00 	bl	18784 <z_impl_k_yield>
	while (1) {
    3984:	e7d4      	b.n	3930 <hci_tx_thread+0xc>
		switch (ev->state) {
    3986:	68f3      	ldr	r3, [r6, #12]
    3988:	f3c3 3345 	ubfx	r3, r3, #13, #6
    398c:	2b04      	cmp	r3, #4
    398e:	d147      	bne.n	3a20 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3990:	7b33      	ldrb	r3, [r6, #12]
    3992:	2b00      	cmp	r3, #0
    3994:	d147      	bne.n	3a26 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3996:	2200      	movs	r2, #0
    3998:	2300      	movs	r3, #0
    399a:	4648      	mov	r0, r9
    399c:	f01a fa58 	bl	1de50 <net_buf_get>
	BT_ASSERT(buf);
    39a0:	4604      	mov	r4, r0
    39a2:	b960      	cbnz	r0, 39be <hci_tx_thread+0x9a>
    39a4:	4929      	ldr	r1, [pc, #164]	; (3a4c <hci_tx_thread+0x128>)
    39a6:	4827      	ldr	r0, [pc, #156]	; (3a44 <hci_tx_thread+0x120>)
    39a8:	f640 1342 	movw	r3, #2370	; 0x942
    39ac:	4652      	mov	r2, sl
    39ae:	f015 fdf0 	bl	19592 <assert_print>
    39b2:	4040      	eors	r0, r0
    39b4:	f380 8811 	msr	BASEPRI, r0
    39b8:	f04f 0003 	mov.w	r0, #3
    39bc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    39be:	f04f 32ff 	mov.w	r2, #4294967295
    39c2:	f04f 33ff 	mov.w	r3, #4294967295
    39c6:	4658      	mov	r0, fp
    39c8:	f014 faca 	bl	17f60 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    39cc:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
    39d0:	b120      	cbz	r0, 39dc <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    39d2:	f012 f99f 	bl	15d14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    39d6:	2300      	movs	r3, #0
    39d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    39dc:	4620      	mov	r0, r4
    39de:	f01a fa62 	bl	1dea6 <net_buf_ref>
    39e2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
    39e6:	4620      	mov	r0, r4
    39e8:	f7ff fd4a 	bl	3480 <bt_hci_ecc_send>
	if (err) {
    39ec:	b1c0      	cbz	r0, 3a20 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    39ee:	4818      	ldr	r0, [pc, #96]	; (3a50 <hci_tx_thread+0x12c>)
    39f0:	f014 fa90 	bl	17f14 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    39f4:	4620      	mov	r0, r4
    39f6:	f012 f8d1 	bl	15b9c <net_buf_id>
    39fa:	4b16      	ldr	r3, [pc, #88]	; (3a54 <hci_tx_thread+0x130>)
    39fc:	220c      	movs	r2, #12
    39fe:	fb02 3000 	mla	r0, r2, r0, r3
    3a02:	211f      	movs	r1, #31
    3a04:	8840      	ldrh	r0, [r0, #2]
    3a06:	4622      	mov	r2, r4
    3a08:	f7ff ff00 	bl	380c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    3a0c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
    3a10:	f012 f980 	bl	15d14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3a14:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3a16:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    3a18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
    3a1c:	f012 f97a 	bl	15d14 <net_buf_unref>
	for (; count; ev++, count--) {
    3a20:	3614      	adds	r6, #20
    3a22:	3d01      	subs	r5, #1
    3a24:	e7ab      	b.n	397e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3a26:	2b01      	cmp	r3, #1
    3a28:	d1fa      	bne.n	3a20 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    3a2a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3a2c:	3838      	subs	r0, #56	; 0x38
    3a2e:	f001 ffc5 	bl	59bc <bt_conn_process_tx>
    3a32:	e7f5      	b.n	3a20 <hci_tx_thread+0xfc>
    3a34:	20000278 	.word	0x20000278
    3a38:	00020c91 	.word	0x00020c91
    3a3c:	2000028c 	.word	0x2000028c
    3a40:	00020cc5 	.word	0x00020cc5
    3a44:	00020cce 	.word	0x00020cce
    3a48:	2000013c 	.word	0x2000013c
    3a4c:	00020ceb 	.word	0x00020ceb
    3a50:	20000120 	.word	0x20000120
    3a54:	200016a8 	.word	0x200016a8

00003a58 <bt_hci_cmd_state_set_init>:
{
    3a58:	b510      	push	{r4, lr}
	state->bit = bit;
    3a5a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    3a5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3a62:	720b      	strb	r3, [r1, #8]
{
    3a64:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    3a66:	f012 f899 	bl	15b9c <net_buf_id>
    3a6a:	4b03      	ldr	r3, [pc, #12]	; (3a78 <bt_hci_cmd_state_set_init+0x20>)
    3a6c:	220c      	movs	r2, #12
    3a6e:	fb02 3300 	mla	r3, r2, r0, r3
    3a72:	605c      	str	r4, [r3, #4]
}
    3a74:	bd10      	pop	{r4, pc}
    3a76:	bf00      	nop
    3a78:	200016a8 	.word	0x200016a8

00003a7c <bt_hci_cmd_create>:
{
    3a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    3a80:	f04f 32ff 	mov.w	r2, #4294967295
    3a84:	f04f 33ff 	mov.w	r3, #4294967295
    3a88:	4606      	mov	r6, r0
    3a8a:	4817      	ldr	r0, [pc, #92]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
	cmd(buf)->opcode = opcode;
    3a8c:	4d17      	ldr	r5, [pc, #92]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
{
    3a8e:	460f      	mov	r7, r1
    3a90:	f01a f9d9 	bl	1de46 <net_buf_alloc_fixed>
    3a94:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    3a96:	f100 0a08 	add.w	sl, r0, #8
    3a9a:	2100      	movs	r1, #0
    3a9c:	f04f 0800 	mov.w	r8, #0
    3aa0:	4650      	mov	r0, sl
    3aa2:	f01a f9ef 	bl	1de84 <net_buf_simple_reserve>
    3aa6:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    3aaa:	4620      	mov	r0, r4
    3aac:	f012 f876 	bl	15b9c <net_buf_id>
    3ab0:	f04f 090c 	mov.w	r9, #12
    3ab4:	fb09 5000 	mla	r0, r9, r0, r5
    3ab8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    3aba:	4620      	mov	r0, r4
    3abc:	f012 f86e 	bl	15b9c <net_buf_id>
    3ac0:	fb09 5000 	mla	r0, r9, r0, r5
    3ac4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    3ac8:	4620      	mov	r0, r4
    3aca:	f012 f867 	bl	15b9c <net_buf_id>
    3ace:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    3ad2:	2103      	movs	r1, #3
    3ad4:	f8c5 8004 	str.w	r8, [r5, #4]
    3ad8:	4650      	mov	r0, sl
    3ada:	f01a fa16 	bl	1df0a <net_buf_simple_add>
	hdr->param_len = param_len;
    3ade:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    3ae0:	8006      	strh	r6, [r0, #0]
}
    3ae2:	4620      	mov	r0, r4
    3ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ae8:	20000ba0 	.word	0x20000ba0
    3aec:	200016a8 	.word	0x200016a8

00003af0 <bt_hci_cmd_send>:
{
    3af0:	b538      	push	{r3, r4, r5, lr}
    3af2:	4605      	mov	r5, r0
	if (!buf) {
    3af4:	460c      	mov	r4, r1
    3af6:	b919      	cbnz	r1, 3b00 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    3af8:	f7ff ffc0 	bl	3a7c <bt_hci_cmd_create>
		if (!buf) {
    3afc:	4604      	mov	r4, r0
    3afe:	b198      	cbz	r0, 3b28 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3b00:	f640 4335 	movw	r3, #3125	; 0xc35
    3b04:	429d      	cmp	r5, r3
    3b06:	d109      	bne.n	3b1c <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    3b08:	4620      	mov	r0, r4
    3b0a:	f7ff fcb9 	bl	3480 <bt_hci_ecc_send>
		if (err) {
    3b0e:	4605      	mov	r5, r0
    3b10:	b110      	cbz	r0, 3b18 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    3b12:	4620      	mov	r0, r4
    3b14:	f012 f8fe 	bl	15d14 <net_buf_unref>
}
    3b18:	4628      	mov	r0, r5
    3b1a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3b1c:	4804      	ldr	r0, [pc, #16]	; (3b30 <bt_hci_cmd_send+0x40>)
    3b1e:	4621      	mov	r1, r4
    3b20:	f01a f9b4 	bl	1de8c <net_buf_put>
	return 0;
    3b24:	2500      	movs	r5, #0
    3b26:	e7f7      	b.n	3b18 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    3b28:	f06f 0568 	mvn.w	r5, #104	; 0x68
    3b2c:	e7f4      	b.n	3b18 <bt_hci_cmd_send+0x28>
    3b2e:	bf00      	nop
    3b30:	2000013c 	.word	0x2000013c

00003b34 <bt_hci_cmd_send_sync>:
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	4615      	mov	r5, r2
    3b38:	b087      	sub	sp, #28
	if (!buf) {
    3b3a:	460c      	mov	r4, r1
    3b3c:	b921      	cbnz	r1, 3b48 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    3b3e:	f7ff ff9d 	bl	3a7c <bt_hci_cmd_create>
		if (!buf) {
    3b42:	4604      	mov	r4, r0
    3b44:	2800      	cmp	r0, #0
    3b46:	d048      	beq.n	3bda <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3b48:	2201      	movs	r2, #1
    3b4a:	2100      	movs	r1, #0
    3b4c:	4668      	mov	r0, sp
    3b4e:	f01a fec0 	bl	1e8d2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    3b52:	4620      	mov	r0, r4
    3b54:	f012 f822 	bl	15b9c <net_buf_id>
    3b58:	4f21      	ldr	r7, [pc, #132]	; (3be0 <bt_hci_cmd_send_sync+0xac>)
    3b5a:	230c      	movs	r3, #12
    3b5c:	fb03 7000 	mla	r0, r3, r0, r7
    3b60:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    3b64:	4620      	mov	r0, r4
    3b66:	f01a f99e 	bl	1dea6 <net_buf_ref>
    3b6a:	4601      	mov	r1, r0
    3b6c:	481d      	ldr	r0, [pc, #116]	; (3be4 <bt_hci_cmd_send_sync+0xb0>)
    3b6e:	f01a f98d 	bl	1de8c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    3b72:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    3b76:	2300      	movs	r3, #0
    3b78:	4668      	mov	r0, sp
    3b7a:	f014 f9f1 	bl	17f60 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    3b7e:	4606      	mov	r6, r0
    3b80:	b180      	cbz	r0, 3ba4 <bt_hci_cmd_send_sync+0x70>
    3b82:	4a19      	ldr	r2, [pc, #100]	; (3be8 <bt_hci_cmd_send_sync+0xb4>)
    3b84:	4919      	ldr	r1, [pc, #100]	; (3bec <bt_hci_cmd_send_sync+0xb8>)
    3b86:	481a      	ldr	r0, [pc, #104]	; (3bf0 <bt_hci_cmd_send_sync+0xbc>)
    3b88:	f240 132b 	movw	r3, #299	; 0x12b
    3b8c:	f015 fd01 	bl	19592 <assert_print>
    3b90:	4818      	ldr	r0, [pc, #96]	; (3bf4 <bt_hci_cmd_send_sync+0xc0>)
    3b92:	4631      	mov	r1, r6
    3b94:	f015 fcfd 	bl	19592 <assert_print>
    3b98:	4040      	eors	r0, r0
    3b9a:	f380 8811 	msr	BASEPRI, r0
    3b9e:	f04f 0003 	mov.w	r0, #3
    3ba2:	df02      	svc	2
	status = cmd(buf)->status;
    3ba4:	4620      	mov	r0, r4
    3ba6:	f011 fff9 	bl	15b9c <net_buf_id>
    3baa:	230c      	movs	r3, #12
    3bac:	4358      	muls	r0, r3
    3bae:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    3bb0:	b156      	cbz	r6, 3bc8 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    3bb2:	4620      	mov	r0, r4
    3bb4:	f012 f8ae 	bl	15d14 <net_buf_unref>
			return -EIO;
    3bb8:	2e09      	cmp	r6, #9
    3bba:	bf0c      	ite	eq
    3bbc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    3bc0:	f06f 0004 	mvnne.w	r0, #4
}
    3bc4:	b007      	add	sp, #28
    3bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    3bc8:	b115      	cbz	r5, 3bd0 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    3bca:	602c      	str	r4, [r5, #0]
	return 0;
    3bcc:	4630      	mov	r0, r6
    3bce:	e7f9      	b.n	3bc4 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    3bd0:	4620      	mov	r0, r4
    3bd2:	f012 f89f 	bl	15d14 <net_buf_unref>
	return 0;
    3bd6:	4628      	mov	r0, r5
    3bd8:	e7f4      	b.n	3bc4 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    3bda:	f06f 0068 	mvn.w	r0, #104	; 0x68
    3bde:	e7f1      	b.n	3bc4 <bt_hci_cmd_send_sync+0x90>
    3be0:	200016a8 	.word	0x200016a8
    3be4:	2000013c 	.word	0x2000013c
    3be8:	00020c91 	.word	0x00020c91
    3bec:	00020cc5 	.word	0x00020cc5
    3bf0:	00020cce 	.word	0x00020cce
    3bf4:	00020cef 	.word	0x00020cef

00003bf8 <bt_hci_le_enh_conn_complete>:
{
    3bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3bfc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    3c00:	4a83      	ldr	r2, [pc, #524]	; (3e10 <bt_hci_le_enh_conn_complete+0x218>)
	handle |= ~BT_ACL_HANDLE_MASK;
    3c02:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    3c06:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    3c08:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    3c0c:	b29b      	uxth	r3, r3
    3c0e:	4299      	cmp	r1, r3
{
    3c10:	4605      	mov	r5, r0
    3c12:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    3c16:	bf08      	it	eq
    3c18:	8016      	strheq	r6, [r2, #0]
{
    3c1a:	b089      	sub	sp, #36	; 0x24
			return true;
    3c1c:	bf08      	it	eq
    3c1e:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    3c20:	f000 fb00 	bl	4224 <bt_id_pending_keys_update>
	if (evt->status) {
    3c24:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3c26:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    3c2a:	b1c4      	cbz	r4, 3c5e <bt_hci_le_enh_conn_complete+0x66>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3c2c:	2c3c      	cmp	r4, #60	; 0x3c
    3c2e:	d14a      	bne.n	3cc6 <bt_hci_le_enh_conn_complete+0xce>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3c30:	f000 fe4e 	bl	48d0 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3c34:	f06f 0140 	mvn.w	r1, #64	; 0x40
    3c38:	3010      	adds	r0, #16
    3c3a:	f016 ffd2 	bl	1abe2 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    3c3e:	2000      	movs	r0, #0
    3c40:	f7ff fdc6 	bl	37d0 <find_pending_connect.part.0>
		if (!conn) {
    3c44:	4605      	mov	r5, r0
    3c46:	2800      	cmp	r0, #0
    3c48:	d03d      	beq.n	3cc6 <bt_hci_le_enh_conn_complete+0xce>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    3c4a:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3c4c:	2100      	movs	r1, #0
    3c4e:	f001 fbe3 	bl	5418 <bt_conn_set_state>
		bt_conn_unref(conn);
    3c52:	4628      	mov	r0, r5
}
    3c54:	b009      	add	sp, #36	; 0x24
    3c56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    3c5a:	f017 bd41 	b.w	1b6e0 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3c5e:	792b      	ldrb	r3, [r5, #4]
    3c60:	3b02      	subs	r3, #2
    3c62:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3c64:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3c68:	d830      	bhi.n	3ccc <bt_hci_le_enh_conn_complete+0xd4>
	memcpy(dst, src, sizeof(*dst));
    3c6a:	2207      	movs	r2, #7
    3c6c:	4649      	mov	r1, r9
    3c6e:	a806      	add	r0, sp, #24
    3c70:	f016 fdef 	bl	1a852 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3c74:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
    3c78:	2206      	movs	r2, #6
    3c7a:	3b02      	subs	r3, #2
    3c7c:	f105 0111 	add.w	r1, r5, #17
    3c80:	f10d 0011 	add.w	r0, sp, #17
    3c84:	f88d 3018 	strb.w	r3, [sp, #24]
    3c88:	f016 fde3 	bl	1a852 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3c8c:	2301      	movs	r3, #1
    3c8e:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    3c92:	78eb      	ldrb	r3, [r5, #3]
    3c94:	2b01      	cmp	r3, #1
    3c96:	d112      	bne.n	3cbe <bt_hci_le_enh_conn_complete+0xc6>
    3c98:	a806      	add	r0, sp, #24
    3c9a:	f7ff fd99 	bl	37d0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3c9e:	78eb      	ldrb	r3, [r5, #3]
    3ca0:	2b01      	cmp	r3, #1
    3ca2:	4604      	mov	r4, r0
    3ca4:	d10a      	bne.n	3cbc <bt_hci_le_enh_conn_complete+0xc4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3ca6:	f000 fe13 	bl	48d0 <bt_le_adv_lookup_legacy>
    3caa:	f06f 0140 	mvn.w	r1, #64	; 0x40
    3cae:	4681      	mov	r9, r0
    3cb0:	3010      	adds	r0, #16
    3cb2:	f016 ff96 	bl	1abe2 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    3cb6:	4648      	mov	r0, r9
    3cb8:	f017 fc4f 	bl	1b55a <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    3cbc:	b9dc      	cbnz	r4, 3cf6 <bt_hci_le_enh_conn_complete+0xfe>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    3cbe:	211f      	movs	r1, #31
    3cc0:	4640      	mov	r0, r8
    3cc2:	f017 f8d0 	bl	1ae66 <bt_hci_disconnect>
}
    3cc6:	b009      	add	sp, #36	; 0x24
    3cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    3ccc:	78eb      	ldrb	r3, [r5, #3]
    3cce:	2b01      	cmp	r3, #1
    3cd0:	bf04      	itt	eq
    3cd2:	4b50      	ldreq	r3, [pc, #320]	; (3e14 <bt_hci_le_enh_conn_complete+0x21c>)
    3cd4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    3cd8:	4649      	mov	r1, r9
    3cda:	4620      	mov	r0, r4
    3cdc:	f017 fab7 	bl	1b24e <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    3ce0:	2207      	movs	r2, #7
    3ce2:	4601      	mov	r1, r0
    3ce4:	a806      	add	r0, sp, #24
    3ce6:	f016 fdb4 	bl	1a852 <memcpy>
    3cea:	2207      	movs	r2, #7
    3cec:	4649      	mov	r1, r9
    3cee:	a804      	add	r0, sp, #16
    3cf0:	f016 fdaf 	bl	1a852 <memcpy>
}
    3cf4:	e7cd      	b.n	3c92 <bt_hci_le_enh_conn_complete+0x9a>
	conn->handle = handle;
    3cf6:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    3cf8:	2207      	movs	r2, #7
    3cfa:	f820 7b88 	strh.w	r7, [r0], #136
    3cfe:	a906      	add	r1, sp, #24
    3d00:	f016 fda7 	bl	1a852 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3d04:	7e2a      	ldrb	r2, [r5, #24]
    3d06:	7deb      	ldrb	r3, [r5, #23]
    3d08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3d0c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3d10:	7eaa      	ldrb	r2, [r5, #26]
    3d12:	7e6b      	ldrb	r3, [r5, #25]
    3d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3d18:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3d1c:	7f2a      	ldrb	r2, [r5, #28]
    3d1e:	7eeb      	ldrb	r3, [r5, #27]
    3d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3d24:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    3d28:	78eb      	ldrb	r3, [r5, #3]
    3d2a:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    3d2c:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3d2e:	2b01      	cmp	r3, #1
	conn->err = 0U;
    3d30:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3d32:	d117      	bne.n	3d64 <bt_hci_le_enh_conn_complete+0x16c>
    3d34:	2207      	movs	r2, #7
    3d36:	a904      	add	r1, sp, #16
    3d38:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    3d3c:	f016 fd89 	bl	1a852 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3d40:	f000 fdc6 	bl	48d0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    3d44:	7a21      	ldrb	r1, [r4, #8]
    3d46:	4d33      	ldr	r5, [pc, #204]	; (3e14 <bt_hci_le_enh_conn_complete+0x21c>)
    3d48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3d4c:	4429      	add	r1, r5
    3d4e:	2207      	movs	r2, #7
    3d50:	f104 0096 	add.w	r0, r4, #150	; 0x96
    3d54:	f016 fd7d 	bl	1a852 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    3d58:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    3d5c:	065d      	lsls	r5, r3, #25
    3d5e:	d501      	bpl.n	3d64 <bt_hci_le_enh_conn_complete+0x16c>
			bt_le_adv_resume();
    3d60:	f000 ff72 	bl	4c48 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3d64:	2107      	movs	r1, #7
    3d66:	4620      	mov	r0, r4
    3d68:	f001 fb56 	bl	5418 <bt_conn_set_state>
	if (is_disconnected) {
    3d6c:	b11e      	cbz	r6, 3d76 <bt_hci_le_enh_conn_complete+0x17e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    3d6e:	2101      	movs	r1, #1
    3d70:	4620      	mov	r0, r4
    3d72:	f001 fb51 	bl	5418 <bt_conn_set_state>
	bt_conn_connected(conn);
    3d76:	4620      	mov	r0, r4
    3d78:	f017 fcee 	bl	1b758 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    3d7c:	7b63      	ldrb	r3, [r4, #13]
    3d7e:	2b07      	cmp	r3, #7
    3d80:	d142      	bne.n	3e08 <bt_hci_le_enh_conn_complete+0x210>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3d82:	f3bf 8f5b 	dmb	ish
    3d86:	6863      	ldr	r3, [r4, #4]
    3d88:	4e22      	ldr	r6, [pc, #136]	; (3e14 <bt_hci_le_enh_conn_complete+0x21c>)
    3d8a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    3d8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    3d92:	d118      	bne.n	3dc6 <bt_hci_le_enh_conn_complete+0x1ce>
    3d94:	78e3      	ldrb	r3, [r4, #3]
    3d96:	b11b      	cbz	r3, 3da0 <bt_hci_le_enh_conn_complete+0x1a8>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    3d98:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
    3d9c:	0718      	lsls	r0, r3, #28
    3d9e:	d512      	bpl.n	3dc6 <bt_hci_le_enh_conn_complete+0x1ce>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3da0:	2102      	movs	r1, #2
    3da2:	f242 0016 	movw	r0, #8214	; 0x2016
    3da6:	f7ff fe69 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
    3daa:	4605      	mov	r5, r0
    3dac:	b158      	cbz	r0, 3dc6 <bt_hci_le_enh_conn_complete+0x1ce>
    3dae:	2102      	movs	r1, #2
    3db0:	3008      	adds	r0, #8
    3db2:	f01a f8aa 	bl	1df0a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3db6:	8823      	ldrh	r3, [r4, #0]
    3db8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    3dba:	2200      	movs	r2, #0
    3dbc:	4629      	mov	r1, r5
    3dbe:	f242 0016 	movw	r0, #8214	; 0x2016
    3dc2:	f7ff feb7 	bl	3b34 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    3dc6:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
    3dca:	07d9      	lsls	r1, r3, #31
    3dcc:	d506      	bpl.n	3ddc <bt_hci_le_enh_conn_complete+0x1e4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    3dce:	2100      	movs	r1, #0
    3dd0:	2302      	movs	r3, #2
    3dd2:	9100      	str	r1, [sp, #0]
    3dd4:	461a      	mov	r2, r3
    3dd6:	4620      	mov	r0, r4
    3dd8:	f017 f87e 	bl	1aed8 <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    3ddc:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
    3de0:	069a      	lsls	r2, r3, #26
    3de2:	d511      	bpl.n	3e08 <bt_hci_le_enh_conn_complete+0x210>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    3de4:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
    3de8:	689b      	ldr	r3, [r3, #8]
    3dea:	079b      	lsls	r3, r3, #30
    3dec:	d50c      	bpl.n	3e08 <bt_hci_le_enh_conn_complete+0x210>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    3dee:	f10d 010e 	add.w	r1, sp, #14
    3df2:	a803      	add	r0, sp, #12
    3df4:	f017 f81f 	bl	1ae36 <hci_le_read_max_data_len>
			if (!err) {
    3df8:	b930      	cbnz	r0, 3e08 <bt_hci_le_enh_conn_complete+0x210>
				err = bt_le_set_data_len(conn,
    3dfa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    3dfe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    3e02:	4620      	mov	r0, r4
    3e04:	f017 f84a 	bl	1ae9c <bt_le_set_data_len>
	bt_conn_unref(conn);
    3e08:	4620      	mov	r0, r4
    3e0a:	f017 fc69 	bl	1b6e0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3e0e:	e75a      	b.n	3cc6 <bt_hci_le_enh_conn_complete+0xce>
    3e10:	200028bc 	.word	0x200028bc
    3e14:	20000000 	.word	0x20000000

00003e18 <bt_security_err_get>:
	switch (hci_err) {
    3e18:	2829      	cmp	r0, #41	; 0x29
    3e1a:	bf9a      	itte	ls
    3e1c:	4b01      	ldrls	r3, [pc, #4]	; (3e24 <bt_security_err_get+0xc>)
    3e1e:	5c18      	ldrbls	r0, [r3, r0]
{
    3e20:	2009      	movhi	r0, #9
}
    3e22:	4770      	bx	lr
    3e24:	00020d9f 	.word	0x00020d9f

00003e28 <hci_event_prio>:
{
    3e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e2c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    3e2e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    3e32:	4630      	mov	r0, r6
    3e34:	f01a f8be 	bl	1dfb4 <net_buf_simple_headroom>
	state->len = buf->len;
    3e38:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3e3c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    3e40:	4605      	mov	r5, r0
    3e42:	d80c      	bhi.n	3e5e <hci_event_prio+0x36>
    3e44:	4a1c      	ldr	r2, [pc, #112]	; (3eb8 <hci_event_prio+0x90>)
    3e46:	491d      	ldr	r1, [pc, #116]	; (3ebc <hci_event_prio+0x94>)
    3e48:	481d      	ldr	r0, [pc, #116]	; (3ec0 <hci_event_prio+0x98>)
    3e4a:	f640 5347 	movw	r3, #3399	; 0xd47
    3e4e:	f015 fba0 	bl	19592 <assert_print>
    3e52:	4040      	eors	r0, r0
    3e54:	f380 8811 	msr	BASEPRI, r0
    3e58:	f04f 0003 	mov.w	r0, #3
    3e5c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    3e5e:	4630      	mov	r0, r6
    3e60:	2102      	movs	r1, #2
    3e62:	f01a f88f 	bl	1df84 <net_buf_simple_pull_mem>
    3e66:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    3e68:	7800      	ldrb	r0, [r0, #0]
    3e6a:	f016 fdda 	bl	1aa22 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    3e6e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    3e70:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    3e72:	d40c      	bmi.n	3e8e <hci_event_prio+0x66>
    3e74:	4a10      	ldr	r2, [pc, #64]	; (3eb8 <hci_event_prio+0x90>)
    3e76:	4913      	ldr	r1, [pc, #76]	; (3ec4 <hci_event_prio+0x9c>)
    3e78:	4811      	ldr	r0, [pc, #68]	; (3ec0 <hci_event_prio+0x98>)
    3e7a:	f640 534b 	movw	r3, #3403	; 0xd4b
    3e7e:	f015 fb88 	bl	19592 <assert_print>
    3e82:	4040      	eors	r0, r0
    3e84:	f380 8811 	msr	BASEPRI, r0
    3e88:	f04f 0003 	mov.w	r0, #3
    3e8c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    3e8e:	2305      	movs	r3, #5
    3e90:	4a0d      	ldr	r2, [pc, #52]	; (3ec8 <hci_event_prio+0xa0>)
    3e92:	7838      	ldrb	r0, [r7, #0]
    3e94:	4621      	mov	r1, r4
    3e96:	f016 fdd6 	bl	1aa46 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    3e9a:	07b3      	lsls	r3, r6, #30
    3e9c:	d507      	bpl.n	3eae <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    3e9e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    3ea0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    3ea4:	fa10 f585 	uxtah	r5, r0, r5
    3ea8:	60a5      	str	r5, [r4, #8]
}
    3eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    3eae:	4620      	mov	r0, r4
}
    3eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    3eb4:	f011 bf2e 	b.w	15d14 <net_buf_unref>
    3eb8:	00020c91 	.word	0x00020c91
    3ebc:	00020d0f 	.word	0x00020d0f
    3ec0:	00020cce 	.word	0x00020cce
    3ec4:	00020d28 	.word	0x00020d28
    3ec8:	0001f8e8 	.word	0x0001f8e8

00003ecc <bt_recv>:
{
    3ecc:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    3ece:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    3ed0:	2b01      	cmp	r3, #1
{
    3ed2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3ed4:	d036      	beq.n	3f44 <bt_recv+0x78>
    3ed6:	2b03      	cmp	r3, #3
    3ed8:	d163      	bne.n	3fa2 <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3eda:	8983      	ldrh	r3, [r0, #12]
    3edc:	2b03      	cmp	r3, #3
    3ede:	d80c      	bhi.n	3efa <bt_recv+0x2e>
    3ee0:	4a32      	ldr	r2, [pc, #200]	; (3fac <bt_recv+0xe0>)
    3ee2:	4933      	ldr	r1, [pc, #204]	; (3fb0 <bt_recv+0xe4>)
    3ee4:	4833      	ldr	r0, [pc, #204]	; (3fb4 <bt_recv+0xe8>)
    3ee6:	f240 13cf 	movw	r3, #463	; 0x1cf
    3eea:	f015 fb52 	bl	19592 <assert_print>
    3eee:	4040      	eors	r0, r0
    3ef0:	f380 8811 	msr	BASEPRI, r0
    3ef4:	f04f 0003 	mov.w	r0, #3
    3ef8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    3efa:	2104      	movs	r1, #4
    3efc:	f104 0008 	add.w	r0, r4, #8
    3f00:	f01a f840 	bl	1df84 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    3f04:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    3f06:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3f08:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    3f0a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    3f0c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    3f0e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    3f12:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    3f14:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    3f16:	d003      	beq.n	3f20 <bt_recv+0x54>
	net_buf_unref(buf);
    3f18:	4620      	mov	r0, r4
    3f1a:	f011 fefb 	bl	15d14 <net_buf_unref>
    3f1e:	e00f      	b.n	3f40 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3f20:	f001 fa72 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
    3f24:	4605      	mov	r5, r0
    3f26:	2800      	cmp	r0, #0
    3f28:	d0f6      	beq.n	3f18 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    3f2a:	f001 fb25 	bl	5578 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    3f2e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    3f30:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3f32:	4621      	mov	r1, r4
    3f34:	4628      	mov	r0, r5
    3f36:	f017 fb6b 	bl	1b610 <bt_conn_recv>
	bt_conn_unref(conn);
    3f3a:	4628      	mov	r0, r5
    3f3c:	f017 fbd0 	bl	1b6e0 <bt_conn_unref>
		return 0;
    3f40:	2000      	movs	r0, #0
}
    3f42:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3f44:	8983      	ldrh	r3, [r0, #12]
    3f46:	2b01      	cmp	r3, #1
    3f48:	d80c      	bhi.n	3f64 <bt_recv+0x98>
    3f4a:	4a18      	ldr	r2, [pc, #96]	; (3fac <bt_recv+0xe0>)
    3f4c:	4918      	ldr	r1, [pc, #96]	; (3fb0 <bt_recv+0xe4>)
    3f4e:	4819      	ldr	r0, [pc, #100]	; (3fb4 <bt_recv+0xe8>)
    3f50:	f640 132f 	movw	r3, #2351	; 0x92f
    3f54:	f015 fb1d 	bl	19592 <assert_print>
    3f58:	4040      	eors	r0, r0
    3f5a:	f380 8811 	msr	BASEPRI, r0
    3f5e:	f04f 0003 	mov.w	r0, #3
    3f62:	df02      	svc	2
    3f64:	2102      	movs	r1, #2
    3f66:	f104 0008 	add.w	r0, r4, #8
    3f6a:	f01a f80b 	bl	1df84 <net_buf_simple_pull_mem>
    3f6e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    3f70:	7800      	ldrb	r0, [r0, #0]
    3f72:	f016 fd56 	bl	1aa22 <bt_hci_evt_get_flags>
    3f76:	0783      	lsls	r3, r0, #30
    3f78:	d40c      	bmi.n	3f94 <bt_recv+0xc8>
    3f7a:	4a0c      	ldr	r2, [pc, #48]	; (3fac <bt_recv+0xe0>)
    3f7c:	490e      	ldr	r1, [pc, #56]	; (3fb8 <bt_recv+0xec>)
    3f7e:	480d      	ldr	r0, [pc, #52]	; (3fb4 <bt_recv+0xe8>)
    3f80:	f640 1333 	movw	r3, #2355	; 0x933
    3f84:	f015 fb05 	bl	19592 <assert_print>
    3f88:	4040      	eors	r0, r0
    3f8a:	f380 8811 	msr	BASEPRI, r0
    3f8e:	f04f 0003 	mov.w	r0, #3
    3f92:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    3f94:	4a09      	ldr	r2, [pc, #36]	; (3fbc <bt_recv+0xf0>)
    3f96:	7828      	ldrb	r0, [r5, #0]
    3f98:	2306      	movs	r3, #6
    3f9a:	4621      	mov	r1, r4
    3f9c:	f016 fd53 	bl	1aa46 <handle_event>
    3fa0:	e7ba      	b.n	3f18 <bt_recv+0x4c>
		net_buf_unref(buf);
    3fa2:	f011 feb7 	bl	15d14 <net_buf_unref>
		return -EINVAL;
    3fa6:	f06f 0015 	mvn.w	r0, #21
    3faa:	e7ca      	b.n	3f42 <bt_recv+0x76>
    3fac:	00020c91 	.word	0x00020c91
    3fb0:	00020d0f 	.word	0x00020d0f
    3fb4:	00020cce 	.word	0x00020cce
    3fb8:	00020d41 	.word	0x00020d41
    3fbc:	0001f8b8 	.word	0x0001f8b8

00003fc0 <bt_recv_prio>:
{
    3fc0:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3fc2:	7d03      	ldrb	r3, [r0, #20]
    3fc4:	2b01      	cmp	r3, #1
{
    3fc6:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3fc8:	d00c      	beq.n	3fe4 <bt_recv_prio+0x24>
    3fca:	4a09      	ldr	r2, [pc, #36]	; (3ff0 <bt_recv_prio+0x30>)
    3fcc:	4909      	ldr	r1, [pc, #36]	; (3ff4 <bt_recv_prio+0x34>)
    3fce:	480a      	ldr	r0, [pc, #40]	; (3ff8 <bt_recv_prio+0x38>)
    3fd0:	f640 539d 	movw	r3, #3485	; 0xd9d
    3fd4:	f015 fadd 	bl	19592 <assert_print>
    3fd8:	4040      	eors	r0, r0
    3fda:	f380 8811 	msr	BASEPRI, r0
    3fde:	f04f 0003 	mov.w	r0, #3
    3fe2:	df02      	svc	2
	hci_event_prio(buf);
    3fe4:	4620      	mov	r0, r4
    3fe6:	f7ff ff1f 	bl	3e28 <hci_event_prio>
}
    3fea:	2000      	movs	r0, #0
    3fec:	bd10      	pop	{r4, pc}
    3fee:	bf00      	nop
    3ff0:	00020c91 	.word	0x00020c91
    3ff4:	00020d6f 	.word	0x00020d6f
    3ff8:	00020cce 	.word	0x00020cce

00003ffc <bt_hci_driver_register>:
	if (bt_dev.drv) {
    3ffc:	4a08      	ldr	r2, [pc, #32]	; (4020 <bt_hci_driver_register+0x24>)
{
    3ffe:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    4000:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    4004:	b930      	cbnz	r0, 4014 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    4006:	68d9      	ldr	r1, [r3, #12]
    4008:	b139      	cbz	r1, 401a <bt_hci_driver_register+0x1e>
    400a:	6959      	ldr	r1, [r3, #20]
    400c:	b129      	cbz	r1, 401a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    400e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
    4012:	4770      	bx	lr
		return -EALREADY;
    4014:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4018:	4770      	bx	lr
		return -EINVAL;
    401a:	f06f 0015 	mvn.w	r0, #21
}
    401e:	4770      	bx	lr
    4020:	20000000 	.word	0x20000000

00004024 <bt_finalize_init>:
{
    4024:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4026:	4804      	ldr	r0, [pc, #16]	; (4038 <bt_finalize_init+0x14>)
    4028:	2104      	movs	r1, #4
    402a:	f016 fd65 	bl	1aaf8 <atomic_or>
}
    402e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    4032:	2000      	movs	r0, #0
    4034:	f000 be82 	b.w	4d3c <bt_le_scan_update>
    4038:	200000cc 	.word	0x200000cc

0000403c <init_work>:

static void init_work(struct k_work *work)
{
    403c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    403e:	f7fc f9cf 	bl	3e0 <bt_init>
	if (ready_cb) {
    4042:	4b03      	ldr	r3, [pc, #12]	; (4050 <init_work+0x14>)
    4044:	681b      	ldr	r3, [r3, #0]
    4046:	b113      	cbz	r3, 404e <init_work+0x12>
		ready_cb(err);
	}
}
    4048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    404c:	4718      	bx	r3
}
    404e:	bd10      	pop	{r4, pc}
    4050:	200016c0 	.word	0x200016c0

00004054 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    4054:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    4056:	4d27      	ldr	r5, [pc, #156]	; (40f4 <bt_enable+0xa0>)
    4058:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    405c:	b088      	sub	sp, #32
    405e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4060:	2b00      	cmp	r3, #0
    4062:	d041      	beq.n	40e8 <bt_enable+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4064:	f06f 0102 	mvn.w	r1, #2
    4068:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    406c:	f016 fdb9 	bl	1abe2 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4070:	2101      	movs	r1, #1
    4072:	f016 fd41 	bl	1aaf8 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4076:	ea10 0401 	ands.w	r4, r0, r1
    407a:	d138      	bne.n	40ee <bt_enable+0x9a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    407c:	4b1e      	ldr	r3, [pc, #120]	; (40f8 <bt_enable+0xa4>)
    407e:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    4080:	460a      	mov	r2, r1
    4082:	f505 7090 	add.w	r0, r5, #288	; 0x120
    4086:	f01a fc24 	bl	1e8d2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    408a:	f505 709e 	add.w	r0, r5, #316	; 0x13c
    408e:	f01a fbc3 	bl	1e818 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4092:	2200      	movs	r2, #0
    4094:	2300      	movs	r3, #0
    4096:	e9cd 2306 	strd	r2, r3, [sp, #24]
    409a:	f06f 0308 	mvn.w	r3, #8
    409e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    40a2:	e9cd 4400 	strd	r4, r4, [sp]
    40a6:	4b15      	ldr	r3, [pc, #84]	; (40fc <bt_enable+0xa8>)
    40a8:	4915      	ldr	r1, [pc, #84]	; (4100 <bt_enable+0xac>)
    40aa:	9404      	str	r4, [sp, #16]
    40ac:	f44f 7240 	mov.w	r2, #768	; 0x300
    40b0:	4814      	ldr	r0, [pc, #80]	; (4104 <bt_enable+0xb0>)
    40b2:	f013 fe57 	bl	17d64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    40b6:	4914      	ldr	r1, [pc, #80]	; (4108 <bt_enable+0xb4>)
    40b8:	4812      	ldr	r0, [pc, #72]	; (4104 <bt_enable+0xb0>)
    40ba:	f01a fb31 	bl	1e720 <z_impl_k_thread_name_set>
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
    40be:	f7ff fa4d 	bl	355c <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
    40c2:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    40c6:	68db      	ldr	r3, [r3, #12]
    40c8:	4798      	blx	r3
	if (err) {
    40ca:	4604      	mov	r4, r0
    40cc:	b948      	cbnz	r0, 40e2 <bt_enable+0x8e>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    40ce:	b926      	cbnz	r6, 40da <bt_enable+0x86>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    40d0:	b008      	add	sp, #32
    40d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    40d6:	f7fc b983 	b.w	3e0 <bt_init>
	k_work_submit(&bt_dev.init);
    40da:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    40de:	f014 f8a7 	bl	18230 <k_work_submit>
}
    40e2:	4620      	mov	r0, r4
    40e4:	b008      	add	sp, #32
    40e6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    40e8:	f06f 0412 	mvn.w	r4, #18
    40ec:	e7f9      	b.n	40e2 <bt_enable+0x8e>
		return -EALREADY;
    40ee:	f06f 0477 	mvn.w	r4, #119	; 0x77
    40f2:	e7f6      	b.n	40e2 <bt_enable+0x8e>
    40f4:	20000000 	.word	0x20000000
    40f8:	200016c0 	.word	0x200016c0
    40fc:	00003925 	.word	0x00003925
    4100:	20003280 	.word	0x20003280
    4104:	20000ca8 	.word	0x20000ca8
    4108:	00020d92 	.word	0x00020d92

0000410c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    410c:	4800      	ldr	r0, [pc, #0]	; (4110 <bt_get_name+0x4>)
    410e:	4770      	bx	lr
    4110:	00020d98 	.word	0x00020d98

00004114 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    4114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    4116:	4f0b      	ldr	r7, [pc, #44]	; (4144 <id_find+0x30>)
{
    4118:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    411a:	2500      	movs	r5, #0
    411c:	79fb      	ldrb	r3, [r7, #7]
    411e:	b2ec      	uxtb	r4, r5
    4120:	42a3      	cmp	r3, r4
    4122:	d802      	bhi.n	412a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    4124:	f06f 0401 	mvn.w	r4, #1
    4128:	e009      	b.n	413e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    412a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    412e:	2207      	movs	r2, #7
    4130:	4439      	add	r1, r7
    4132:	4630      	mov	r0, r6
    4134:	f016 fb7c 	bl	1a830 <memcmp>
    4138:	3501      	adds	r5, #1
    413a:	2800      	cmp	r0, #0
    413c:	d1ee      	bne.n	411c <id_find+0x8>
}
    413e:	4620      	mov	r0, r4
    4140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4142:	bf00      	nop
    4144:	20000000 	.word	0x20000000

00004148 <set_random_address>:
{
    4148:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    414a:	4914      	ldr	r1, [pc, #80]	; (419c <set_random_address+0x54>)
    414c:	2206      	movs	r2, #6
    414e:	4605      	mov	r5, r0
    4150:	f016 fb6e 	bl	1a830 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    4154:	4604      	mov	r4, r0
    4156:	b1e0      	cbz	r0, 4192 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    4158:	2106      	movs	r1, #6
    415a:	f242 0005 	movw	r0, #8197	; 0x2005
    415e:	f7ff fc8d 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
    4162:	4604      	mov	r4, r0
    4164:	b1b8      	cbz	r0, 4196 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    4166:	2206      	movs	r2, #6
    4168:	4629      	mov	r1, r5
    416a:	3008      	adds	r0, #8
    416c:	f019 fed3 	bl	1df16 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4170:	4621      	mov	r1, r4
    4172:	2200      	movs	r2, #0
    4174:	f242 0005 	movw	r0, #8197	; 0x2005
    4178:	f7ff fcdc 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    417c:	4604      	mov	r4, r0
    417e:	b940      	cbnz	r0, 4192 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    4180:	2206      	movs	r2, #6
    4182:	4806      	ldr	r0, [pc, #24]	; (419c <set_random_address+0x54>)
    4184:	4629      	mov	r1, r5
    4186:	f016 fb64 	bl	1a852 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    418a:	4b05      	ldr	r3, [pc, #20]	; (41a0 <set_random_address+0x58>)
    418c:	2201      	movs	r2, #1
    418e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    4192:	4620      	mov	r0, r4
    4194:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4196:	f06f 0468 	mvn.w	r4, #104	; 0x68
    419a:	e7fa      	b.n	4192 <set_random_address+0x4a>
    419c:	20000061 	.word	0x20000061
    41a0:	20000000 	.word	0x20000000

000041a4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    41a4:	b530      	push	{r4, r5, lr}
    41a6:	4604      	mov	r4, r0
    41a8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    41aa:	460d      	mov	r5, r1
    41ac:	b199      	cbz	r1, 41d6 <id_create.constprop.0+0x32>
    41ae:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    41b0:	2207      	movs	r2, #7
    41b2:	a902      	add	r1, sp, #8
    41b4:	4628      	mov	r0, r5
    41b6:	9302      	str	r3, [sp, #8]
    41b8:	f8cd 300b 	str.w	r3, [sp, #11]
    41bc:	f016 fb38 	bl	1a830 <memcmp>
    41c0:	b148      	cbz	r0, 41d6 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    41c2:	4810      	ldr	r0, [pc, #64]	; (4204 <id_create.constprop.0+0x60>)
    41c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    41c8:	4629      	mov	r1, r5
    41ca:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    41cc:	f016 ffb3 	bl	1b136 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    41d0:	2000      	movs	r0, #0
}
    41d2:	b005      	add	sp, #20
    41d4:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    41d6:	4668      	mov	r0, sp
    41d8:	f016 fc15 	bl	1aa06 <bt_addr_le_create_static>
			if (err) {
    41dc:	2800      	cmp	r0, #0
    41de:	d1f8      	bne.n	41d2 <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
    41e0:	4668      	mov	r0, sp
    41e2:	f7ff ff97 	bl	4114 <id_find>
    41e6:	2800      	cmp	r0, #0
    41e8:	daf5      	bge.n	41d6 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    41ea:	4806      	ldr	r0, [pc, #24]	; (4204 <id_create.constprop.0+0x60>)
    41ec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    41f0:	4404      	add	r4, r0
    41f2:	4669      	mov	r1, sp
    41f4:	4620      	mov	r0, r4
    41f6:	f016 ff9e 	bl	1b136 <bt_addr_le_copy>
		if (addr) {
    41fa:	2d00      	cmp	r5, #0
    41fc:	d0e8      	beq.n	41d0 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    41fe:	4621      	mov	r1, r4
    4200:	4628      	mov	r0, r5
    4202:	e7e3      	b.n	41cc <id_create.constprop.0+0x28>
    4204:	20000000 	.word	0x20000000

00004208 <bt_id_adv_random_addr_check>:
{
    4208:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    420a:	4805      	ldr	r0, [pc, #20]	; (4220 <bt_id_adv_random_addr_check+0x18>)
    420c:	f016 ff96 	bl	1b13c <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    4210:	04c3      	lsls	r3, r0, #19
    4212:	d402      	bmi.n	421a <bt_id_adv_random_addr_check+0x12>
    4214:	4802      	ldr	r0, [pc, #8]	; (4220 <bt_id_adv_random_addr_check+0x18>)
    4216:	f016 ff91 	bl	1b13c <atomic_get>
}
    421a:	2001      	movs	r0, #1
    421c:	bd08      	pop	{r3, pc}
    421e:	bf00      	nop
    4220:	200000cc 	.word	0x200000cc

00004224 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4224:	4b0a      	ldr	r3, [pc, #40]	; (4250 <bt_id_pending_keys_update+0x2c>)
    4226:	f3bf 8f5b 	dmb	ish
    422a:	e853 2f00 	ldrex	r2, [r3]
    422e:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
    4232:	e843 1000 	strex	r0, r1, [r3]
    4236:	2800      	cmp	r0, #0
    4238:	d1f7      	bne.n	422a <bt_id_pending_keys_update+0x6>
    423a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    423e:	0453      	lsls	r3, r2, #17
    4240:	d504      	bpl.n	424c <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    4242:	4904      	ldr	r1, [pc, #16]	; (4254 <bt_id_pending_keys_update+0x30>)
    4244:	2200      	movs	r2, #0
    4246:	2002      	movs	r0, #2
    4248:	f004 bc68 	b.w	8b1c <bt_keys_foreach>
}
    424c:	4770      	bx	lr
    424e:	bf00      	nop
    4250:	200000cc 	.word	0x200000cc
    4254:	0001b2a7 	.word	0x0001b2a7

00004258 <bt_id_add>:
{
    4258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    425c:	4c4e      	ldr	r4, [pc, #312]	; (4398 <bt_id_add+0x140>)
    425e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    4262:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
    4266:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    4268:	b10a      	cbz	r2, 426e <bt_id_add+0x16>
    426a:	429a      	cmp	r2, r3
    426c:	d209      	bcs.n	4282 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
    426e:	3301      	adds	r3, #1
    4270:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    4274:	7a2b      	ldrb	r3, [r5, #8]
    4276:	f043 0304 	orr.w	r3, r3, #4
    427a:	722b      	strb	r3, [r5, #8]
}
    427c:	b002      	add	sp, #8
    427e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    4282:	2100      	movs	r1, #0
    4284:	2206      	movs	r2, #6
    4286:	4608      	mov	r0, r1
    4288:	f001 faa0 	bl	57cc <bt_conn_lookup_state_le>
	if (conn) {
    428c:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
    4290:	4606      	mov	r6, r0
    4292:	b1a0      	cbz	r0, 42be <bt_id_add+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4294:	f3bf 8f5b 	dmb	ish
    4298:	e853 2f00 	ldrex	r2, [r3]
    429c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    42a0:	e843 2100 	strex	r1, r2, [r3]
    42a4:	2900      	cmp	r1, #0
    42a6:	d1f7      	bne.n	4298 <bt_id_add+0x40>
    42a8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    42ac:	7a2b      	ldrb	r3, [r5, #8]
    42ae:	f043 0301 	orr.w	r3, r3, #1
    42b2:	722b      	strb	r3, [r5, #8]
}
    42b4:	b002      	add	sp, #8
    42b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    42ba:	f017 ba11 	b.w	1b6e0 <bt_conn_unref>
    42be:	4618      	mov	r0, r3
    42c0:	f016 ff3c 	bl	1b13c <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    42c4:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    42c6:	f3c0 1780 	ubfx	r7, r0, #6, #1
    42ca:	4834      	ldr	r0, [pc, #208]	; (439c <bt_id_add+0x144>)
    42cc:	f000 fafa 	bl	48c4 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
    42d0:	b117      	cbz	r7, 42d8 <bt_id_add+0x80>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    42d2:	4630      	mov	r0, r6
    42d4:	f017 f946 	bl	1b564 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
    42d8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    42dc:	b9b3      	cbnz	r3, 430c <bt_id_add+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    42de:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    42e2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    42e6:	429a      	cmp	r2, r3
    42e8:	d123      	bne.n	4332 <bt_id_add+0xda>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    42ea:	2200      	movs	r2, #0
    42ec:	4611      	mov	r1, r2
    42ee:	f242 0029 	movw	r0, #8233	; 0x2029
    42f2:	f7ff fc1f 	bl	3b34 <bt_hci_cmd_send_sync>
		if (err) {
    42f6:	b970      	cbnz	r0, 4316 <bt_id_add+0xbe>
		bt_dev.le.rl_entries++;
    42f8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    42fc:	3301      	adds	r3, #1
    42fe:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    4302:	7a2b      	ldrb	r3, [r5, #8]
    4304:	f043 0304 	orr.w	r3, r3, #4
    4308:	722b      	strb	r3, [r5, #8]
		goto done;
    430a:	e004      	b.n	4316 <bt_id_add+0xbe>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    430c:	2000      	movs	r0, #0
    430e:	f016 ff6a 	bl	1b1e6 <addr_res_enable>
		if (err) {
    4312:	2800      	cmp	r0, #0
    4314:	d0e3      	beq.n	42de <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    4316:	2001      	movs	r0, #1
    4318:	f016 ff65 	bl	1b1e6 <addr_res_enable>
	if (scan_enabled) {
    431c:	b117      	cbz	r7, 4324 <bt_id_add+0xcc>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    431e:	2001      	movs	r0, #1
    4320:	f017 f920 	bl	1b564 <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    4324:	481e      	ldr	r0, [pc, #120]	; (43a0 <bt_id_add+0x148>)
    4326:	2100      	movs	r1, #0
}
    4328:	b002      	add	sp, #8
    432a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    432e:	f000 bac9 	b.w	48c4 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    4332:	462a      	mov	r2, r5
    4334:	f105 0801 	add.w	r8, r5, #1
    4338:	f812 0b2a 	ldrb.w	r0, [r2], #42
    433c:	4641      	mov	r1, r8
    433e:	f016 ff03 	bl	1b148 <hci_id_add>
	if (err) {
    4342:	4606      	mov	r6, r0
    4344:	2800      	cmp	r0, #0
    4346:	d1e6      	bne.n	4316 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
    4348:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    434c:	3301      	adds	r3, #1
    434e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    4352:	7a2b      	ldrb	r3, [r5, #8]
    4354:	f043 0304 	orr.w	r3, r3, #4
    4358:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    435a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    435e:	075b      	lsls	r3, r3, #29
    4360:	d5d9      	bpl.n	4316 <bt_id_add+0xbe>
	bt_addr_le_copy(&cp.id_addr, addr);
    4362:	4641      	mov	r1, r8
    4364:	4668      	mov	r0, sp
    4366:	f016 fee6 	bl	1b136 <bt_addr_le_copy>
	cp.mode = mode;
    436a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    436c:	2108      	movs	r1, #8
    436e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    4372:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    4376:	f7ff fb81 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
    437a:	4604      	mov	r4, r0
    437c:	2800      	cmp	r0, #0
    437e:	d0ca      	beq.n	4316 <bt_id_add+0xbe>
    4380:	2208      	movs	r2, #8
    4382:	4669      	mov	r1, sp
    4384:	4410      	add	r0, r2
    4386:	f019 fdc6 	bl	1df16 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    438a:	4632      	mov	r2, r6
    438c:	4621      	mov	r1, r4
    438e:	f242 004e 	movw	r0, #8270	; 0x204e
    4392:	f7ff fbcf 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    4396:	e7be      	b.n	4316 <bt_id_add+0xbe>
    4398:	20000000 	.word	0x20000000
    439c:	0001b217 	.word	0x0001b217
    43a0:	0001b1bd 	.word	0x0001b1bd

000043a4 <bt_id_del>:
{
    43a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    43a8:	4d45      	ldr	r5, [pc, #276]	; (44c0 <bt_id_del+0x11c>)
    43aa:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    43ae:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
    43b2:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    43b4:	b112      	cbz	r2, 43bc <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    43b6:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    43b8:	4293      	cmp	r3, r2
    43ba:	dd08      	ble.n	43ce <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    43bc:	3b01      	subs	r3, #1
    43be:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    43c2:	7a23      	ldrb	r3, [r4, #8]
    43c4:	f023 0304 	bic.w	r3, r3, #4
    43c8:	7223      	strb	r3, [r4, #8]
}
    43ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
    43ce:	2100      	movs	r1, #0
    43d0:	2206      	movs	r2, #6
    43d2:	4608      	mov	r0, r1
    43d4:	f001 f9fa 	bl	57cc <bt_conn_lookup_state_le>
	if (conn) {
    43d8:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    43dc:	4606      	mov	r6, r0
    43de:	b198      	cbz	r0, 4408 <bt_id_del+0x64>
    43e0:	f3bf 8f5b 	dmb	ish
    43e4:	e853 2f00 	ldrex	r2, [r3]
    43e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    43ec:	e843 2100 	strex	r1, r2, [r3]
    43f0:	2900      	cmp	r1, #0
    43f2:	d1f7      	bne.n	43e4 <bt_id_del+0x40>
    43f4:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    43f8:	7a23      	ldrb	r3, [r4, #8]
    43fa:	f043 0302 	orr.w	r3, r3, #2
    43fe:	7223      	strb	r3, [r4, #8]
}
    4400:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    4404:	f017 b96c 	b.w	1b6e0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4408:	4618      	mov	r0, r3
    440a:	f016 fe97 	bl	1b13c <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    440e:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4410:	f3c0 1880 	ubfx	r8, r0, #6, #1
    4414:	482b      	ldr	r0, [pc, #172]	; (44c4 <bt_id_del+0x120>)
    4416:	f000 fa55 	bl	48c4 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
    441a:	f1b8 0f00 	cmp.w	r8, #0
    441e:	d002      	beq.n	4426 <bt_id_del+0x82>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    4420:	4630      	mov	r0, r6
    4422:	f017 f89f 	bl	1b564 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    4426:	2000      	movs	r0, #0
    4428:	f016 fedd 	bl	1b1e6 <addr_res_enable>
	if (err) {
    442c:	4607      	mov	r7, r0
    442e:	b988      	cbnz	r0, 4454 <bt_id_del+0xb0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    4430:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    4434:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
    4438:	429a      	cmp	r2, r3
    443a:	d21d      	bcs.n	4478 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
    443c:	3b01      	subs	r3, #1
    443e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    4442:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    4444:	4920      	ldr	r1, [pc, #128]	; (44c8 <bt_id_del+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    4446:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    444a:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    444c:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    444e:	2002      	movs	r0, #2
    4450:	f004 fb64 	bl	8b1c <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    4454:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    4458:	b113      	cbz	r3, 4460 <bt_id_del+0xbc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    445a:	2001      	movs	r0, #1
    445c:	f016 fec3 	bl	1b1e6 <addr_res_enable>
	if (scan_enabled) {
    4460:	f1b8 0f00 	cmp.w	r8, #0
    4464:	d002      	beq.n	446c <bt_id_del+0xc8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    4466:	2001      	movs	r0, #1
    4468:	f017 f87c 	bl	1b564 <bt_le_scan_set_enable>
}
    446c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    4470:	4816      	ldr	r0, [pc, #88]	; (44cc <bt_id_del+0x128>)
    4472:	2100      	movs	r1, #0
    4474:	f000 ba26 	b.w	48c4 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    4478:	2107      	movs	r1, #7
    447a:	f242 0028 	movw	r0, #8232	; 0x2028
    447e:	f7ff fafd 	bl	3a7c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    4482:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    4486:	4606      	mov	r6, r0
    4488:	2800      	cmp	r0, #0
    448a:	d0e3      	beq.n	4454 <bt_id_del+0xb0>
	return net_buf_simple_add(&buf->b, len);
    448c:	2107      	movs	r1, #7
    448e:	3008      	adds	r0, #8
    4490:	f019 fd3b 	bl	1df0a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    4494:	4649      	mov	r1, r9
    4496:	f016 fe4e 	bl	1b136 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    449a:	463a      	mov	r2, r7
    449c:	4631      	mov	r1, r6
    449e:	f242 0028 	movw	r0, #8232	; 0x2028
    44a2:	f7ff fb47 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    44a6:	2800      	cmp	r0, #0
    44a8:	d1d4      	bne.n	4454 <bt_id_del+0xb0>
	bt_dev.le.rl_entries--;
    44aa:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    44ae:	3b01      	subs	r3, #1
    44b0:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    44b4:	7a23      	ldrb	r3, [r4, #8]
    44b6:	f023 0304 	bic.w	r3, r3, #4
    44ba:	7223      	strb	r3, [r4, #8]
    44bc:	e7ca      	b.n	4454 <bt_id_del+0xb0>
    44be:	bf00      	nop
    44c0:	20000000 	.word	0x20000000
    44c4:	0001b217 	.word	0x0001b217
    44c8:	0001b1a7 	.word	0x0001b1a7
    44cc:	0001b1bd 	.word	0x0001b1bd

000044d0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    44d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    44d2:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    44d4:	4605      	mov	r5, r0
    44d6:	b918      	cbnz	r0, 44e0 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    44d8:	b1ec      	cbz	r4, 4516 <bt_id_create+0x46>
		return -EINVAL;
    44da:	f06f 0015 	mvn.w	r0, #21
    44de:	e018      	b.n	4512 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    44e0:	2300      	movs	r3, #0
    44e2:	2207      	movs	r2, #7
    44e4:	4669      	mov	r1, sp
    44e6:	9300      	str	r3, [sp, #0]
    44e8:	f8cd 3003 	str.w	r3, [sp, #3]
    44ec:	f016 f9a0 	bl	1a830 <memcmp>
    44f0:	2800      	cmp	r0, #0
    44f2:	d0f1      	beq.n	44d8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    44f4:	782b      	ldrb	r3, [r5, #0]
    44f6:	2b01      	cmp	r3, #1
    44f8:	d1ef      	bne.n	44da <bt_id_create+0xa>
    44fa:	79ab      	ldrb	r3, [r5, #6]
    44fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4500:	2bc0      	cmp	r3, #192	; 0xc0
    4502:	d1ea      	bne.n	44da <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    4504:	4628      	mov	r0, r5
    4506:	f7ff fe05 	bl	4114 <id_find>
    450a:	2800      	cmp	r0, #0
    450c:	dbe4      	blt.n	44d8 <bt_id_create+0x8>
			return -EALREADY;
    450e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    4512:	b002      	add	sp, #8
    4514:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    4516:	4e12      	ldr	r6, [pc, #72]	; (4560 <bt_id_create+0x90>)
    4518:	79f3      	ldrb	r3, [r6, #7]
    451a:	2b01      	cmp	r3, #1
    451c:	d01c      	beq.n	4558 <bt_id_create+0x88>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    451e:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    4522:	f016 fe0b 	bl	1b13c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4526:	07c3      	lsls	r3, r0, #31
    4528:	d40b      	bmi.n	4542 <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    452a:	2d00      	cmp	r5, #0
    452c:	d0d5      	beq.n	44da <bt_id_create+0xa>
    452e:	2207      	movs	r2, #7
    4530:	4669      	mov	r1, sp
    4532:	4628      	mov	r0, r5
    4534:	9400      	str	r4, [sp, #0]
    4536:	f8cd 4003 	str.w	r4, [sp, #3]
    453a:	f016 f979 	bl	1a830 <memcmp>
    453e:	2800      	cmp	r0, #0
    4540:	d0cb      	beq.n	44da <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    4542:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    4544:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    4546:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    4548:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    454a:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    454c:	f7ff fe2a 	bl	41a4 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    4550:	2800      	cmp	r0, #0
    4552:	bf08      	it	eq
    4554:	4620      	moveq	r0, r4
    4556:	e7dc      	b.n	4512 <bt_id_create+0x42>
		return -ENOMEM;
    4558:	f06f 000b 	mvn.w	r0, #11
    455c:	e7d9      	b.n	4512 <bt_id_create+0x42>
    455e:	bf00      	nop
    4560:	20000000 	.word	0x20000000

00004564 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    4564:	b570      	push	{r4, r5, r6, lr}
    4566:	b086      	sub	sp, #24
    4568:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    456a:	aa01      	add	r2, sp, #4
    456c:	2100      	movs	r1, #0
    456e:	f241 0009 	movw	r0, #4105	; 0x1009
    4572:	f7ff fadf 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    4576:	4604      	mov	r4, r0
    4578:	b970      	cbnz	r0, 4598 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    457a:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    457c:	9002      	str	r0, [sp, #8]
    457e:	689d      	ldr	r5, [r3, #8]
    4580:	f8ad 000c 	strh.w	r0, [sp, #12]
    4584:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    4586:	2206      	movs	r2, #6
    4588:	a902      	add	r1, sp, #8
    458a:	4628      	mov	r0, r5
    458c:	f016 f950 	bl	1a830 <memcmp>
    4590:	b920      	cbnz	r0, 459c <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    4592:	9801      	ldr	r0, [sp, #4]
    4594:	f011 fbbe 	bl	15d14 <net_buf_unref>
		return 0U;
    4598:	2000      	movs	r0, #0
    459a:	e016      	b.n	45ca <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    459c:	4b0c      	ldr	r3, [pc, #48]	; (45d0 <bt_id_read_public_addr+0x6c>)
    459e:	6818      	ldr	r0, [r3, #0]
    45a0:	9004      	str	r0, [sp, #16]
    45a2:	889b      	ldrh	r3, [r3, #4]
    45a4:	f8ad 3014 	strh.w	r3, [sp, #20]
    45a8:	2206      	movs	r2, #6
    45aa:	a904      	add	r1, sp, #16
    45ac:	4628      	mov	r0, r5
    45ae:	f016 f93f 	bl	1a830 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    45b2:	2800      	cmp	r0, #0
    45b4:	d0ed      	beq.n	4592 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    45b6:	2206      	movs	r2, #6
    45b8:	4629      	mov	r1, r5
    45ba:	1c70      	adds	r0, r6, #1
    45bc:	f016 f949 	bl	1a852 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    45c0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    45c2:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    45c4:	f011 fba6 	bl	15d14 <net_buf_unref>
	return 1U;
    45c8:	2001      	movs	r0, #1
}
    45ca:	b006      	add	sp, #24
    45cc:	bd70      	pop	{r4, r5, r6, pc}
    45ce:	bf00      	nop
    45d0:	0001f3dd 	.word	0x0001f3dd

000045d4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    45d4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    45d6:	4668      	mov	r0, sp
    45d8:	f7ff ffc4 	bl	4564 <bt_id_read_public_addr>
    45dc:	4b04      	ldr	r3, [pc, #16]	; (45f0 <bt_setup_public_id_addr+0x1c>)
    45de:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    45e0:	b118      	cbz	r0, 45ea <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    45e2:	4669      	mov	r1, sp
    45e4:	2000      	movs	r0, #0
    45e6:	f7ff fddd 	bl	41a4 <id_create.constprop.0>
}
    45ea:	b003      	add	sp, #12
    45ec:	f85d fb04 	ldr.w	pc, [sp], #4
    45f0:	20000000 	.word	0x20000000

000045f4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    45f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    45f8:	4b15      	ldr	r3, [pc, #84]	; (4650 <bt_read_static_addr+0x5c>)
    45fa:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    45fe:	f014 0401 	ands.w	r4, r4, #1
{
    4602:	4607      	mov	r7, r0
    4604:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    4606:	d015      	beq.n	4634 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    4608:	aa01      	add	r2, sp, #4
    460a:	2100      	movs	r1, #0
    460c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4610:	f7ff fa90 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    4614:	4605      	mov	r5, r0
    4616:	b9c8      	cbnz	r0, 464c <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    4618:	9b01      	ldr	r3, [sp, #4]
    461a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    461c:	785c      	ldrb	r4, [r3, #1]
    461e:	42b4      	cmp	r4, r6
    4620:	bf28      	it	cs
    4622:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    4624:	f04f 0816 	mov.w	r8, #22
    4628:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    462a:	42a5      	cmp	r5, r4
    462c:	db06      	blt.n	463c <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    462e:	9801      	ldr	r0, [sp, #4]
    4630:	f011 fb70 	bl	15d14 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    4634:	4620      	mov	r0, r4
    4636:	b002      	add	sp, #8
    4638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    463c:	fb08 7005 	mla	r0, r8, r5, r7
    4640:	2216      	movs	r2, #22
    4642:	4631      	mov	r1, r6
    4644:	f016 f905 	bl	1a852 <memcpy>
	for (i = 0; i < cnt; i++) {
    4648:	3501      	adds	r5, #1
    464a:	e7ee      	b.n	462a <bt_read_static_addr+0x36>
		return 0;
    464c:	2400      	movs	r4, #0
    464e:	e7f1      	b.n	4634 <bt_read_static_addr+0x40>
    4650:	20000000 	.word	0x20000000

00004654 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    4654:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    4656:	4e15      	ldr	r6, [pc, #84]	; (46ac <bt_setup_random_id_addr+0x58>)
    4658:	79f4      	ldrb	r4, [r6, #7]
{
    465a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    465c:	b9f4      	cbnz	r4, 469c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    465e:	2101      	movs	r1, #1
    4660:	a802      	add	r0, sp, #8
    4662:	f7ff ffc7 	bl	45f4 <bt_read_static_addr>
    4666:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    4668:	b1c0      	cbz	r0, 469c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    466a:	2716      	movs	r7, #22
    466c:	ab02      	add	r3, sp, #8
    466e:	b2e5      	uxtb	r5, r4
    4670:	fb07 3105 	mla	r1, r7, r5, r3
    4674:	2206      	movs	r2, #6
    4676:	f10d 0001 	add.w	r0, sp, #1
    467a:	f016 f8ea 	bl	1a852 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    467e:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    4680:	4669      	mov	r1, sp
    4682:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    4684:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    4688:	f7ff fd8c 	bl	41a4 <id_create.constprop.0>
				if (err) {
    468c:	b920      	cbnz	r0, 4698 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    468e:	79f2      	ldrb	r2, [r6, #7]
    4690:	3401      	adds	r4, #1
    4692:	b2e3      	uxtb	r3, r4
    4694:	429a      	cmp	r2, r3
    4696:	d8e9      	bhi.n	466c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    4698:	b009      	add	sp, #36	; 0x24
    469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    469c:	2100      	movs	r1, #0
    469e:	4608      	mov	r0, r1
}
    46a0:	b009      	add	sp, #36	; 0x24
    46a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    46a6:	f7ff bf13 	b.w	44d0 <bt_id_create>
    46aa:	bf00      	nop
    46ac:	20000000 	.word	0x20000000

000046b0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    46b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    46b4:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    46b8:	7806      	ldrb	r6, [r0, #0]
{
    46ba:	4680      	mov	r8, r0
    46bc:	460d      	mov	r5, r1
    46be:	4691      	mov	r9, r2
    46c0:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    46c2:	d02b      	beq.n	471c <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    46c4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 477c <bt_id_set_adv_own_addr+0xcc>
    46c8:	b12a      	cbz	r2, 46d6 <bt_id_set_adv_own_addr+0x26>
    46ca:	0688      	lsls	r0, r1, #26
    46cc:	d503      	bpl.n	46d6 <bt_id_set_adv_own_addr+0x26>
    46ce:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    46d2:	0659      	lsls	r1, r3, #25
    46d4:	d54f      	bpl.n	4776 <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    46d6:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    46da:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    46de:	f818 3003 	ldrb.w	r3, [r8, r3]
    46e2:	2b01      	cmp	r3, #1
    46e4:	d009      	beq.n	46fa <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    46e6:	ebaa 0606 	sub.w	r6, sl, r6
    46ea:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    46ee:	f1b9 0f00 	cmp.w	r9, #0
    46f2:	d10e      	bne.n	4712 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    46f4:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    46f6:	2400      	movs	r4, #0
    46f8:	e008      	b.n	470c <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    46fa:	2007      	movs	r0, #7
    46fc:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    4700:	4440      	add	r0, r8
    4702:	f7ff fd21 	bl	4148 <set_random_address>
				if (err) {
    4706:	4604      	mov	r4, r0
    4708:	2800      	cmp	r0, #0
    470a:	d0ec      	beq.n	46e6 <bt_id_set_adv_own_addr+0x36>
}
    470c:	4620      	mov	r0, r4
    470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    4712:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    4714:	bf48      	it	mi
    4716:	f043 0302 	orrmi.w	r3, r3, #2
    471a:	e7eb      	b.n	46f4 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    471c:	f011 0504 	ands.w	r5, r1, #4
    4720:	d014      	beq.n	474c <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    4722:	f8df 8058 	ldr.w	r8, [pc, #88]	; 477c <bt_id_set_adv_own_addr+0xcc>
    4726:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    472a:	00f5      	lsls	r5, r6, #3
    472c:	f818 3003 	ldrb.w	r3, [r8, r3]
    4730:	2b01      	cmp	r3, #1
    4732:	d106      	bne.n	4742 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    4734:	2007      	movs	r0, #7
    4736:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    473a:	4440      	add	r0, r8
    473c:	f7ff fd04 	bl	4148 <set_random_address>
    4740:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    4742:	1bad      	subs	r5, r5, r6
    4744:	f818 3005 	ldrb.w	r3, [r8, r5]
    4748:	703b      	strb	r3, [r7, #0]
    474a:	e7df      	b.n	470c <bt_id_set_adv_own_addr+0x5c>
    474c:	480c      	ldr	r0, [pc, #48]	; (4780 <bt_id_set_adv_own_addr+0xd0>)
    474e:	f016 fcf5 	bl	1b13c <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    4752:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4754:	f3c0 1680 	ubfx	r6, r0, #6, #1
    4758:	d502      	bpl.n	4760 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    475a:	4628      	mov	r0, r5
    475c:	f016 ff02 	bl	1b564 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    4760:	4640      	mov	r0, r8
    4762:	f016 fd8e 	bl	1b282 <bt_id_set_adv_private_addr>
    4766:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    4768:	2001      	movs	r0, #1
    476a:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    476c:	2e00      	cmp	r6, #0
    476e:	d0cd      	beq.n	470c <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    4770:	f016 fef8 	bl	1b564 <bt_le_scan_set_enable>
		if (err) {
    4774:	e7ca      	b.n	470c <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    4776:	f06f 0485 	mvn.w	r4, #133	; 0x85
    477a:	e7c7      	b.n	470c <bt_id_set_adv_own_addr+0x5c>
    477c:	20000000 	.word	0x20000000
    4780:	200000cc 	.word	0x200000cc

00004784 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    4784:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    4786:	4c0a      	ldr	r4, [pc, #40]	; (47b0 <bt_id_init+0x2c>)
    4788:	79e3      	ldrb	r3, [r4, #7]
    478a:	b10b      	cbz	r3, 4790 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    478c:	2000      	movs	r0, #0
}
    478e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    4790:	f7ff ff20 	bl	45d4 <bt_setup_public_id_addr>
		if (err) {
    4794:	2800      	cmp	r0, #0
    4796:	d1fa      	bne.n	478e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    4798:	79e3      	ldrb	r3, [r4, #7]
    479a:	2b00      	cmp	r3, #0
    479c:	d1f6      	bne.n	478c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    479e:	f7ff ff59 	bl	4654 <bt_setup_random_id_addr>
		if (err) {
    47a2:	2800      	cmp	r0, #0
    47a4:	d1f3      	bne.n	478e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    47a6:	1c60      	adds	r0, r4, #1
}
    47a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    47ac:	f7ff bccc 	b.w	4148 <set_random_address>
    47b0:	20000000 	.word	0x20000000

000047b4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    47b4:	6843      	ldr	r3, [r0, #4]
{
    47b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    47b8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    47ba:	0558      	lsls	r0, r3, #21
    47bc:	d502      	bpl.n	47c4 <valid_adv_param+0x10>
		return false;
    47be:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    47c0:	b003      	add	sp, #12
    47c2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    47c4:	6922      	ldr	r2, [r4, #16]
    47c6:	b10a      	cbz	r2, 47cc <valid_adv_param+0x18>
    47c8:	07d9      	lsls	r1, r3, #31
    47ca:	d5f8      	bpl.n	47be <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    47cc:	4d1a      	ldr	r5, [pc, #104]	; (4838 <valid_adv_param+0x84>)
    47ce:	7820      	ldrb	r0, [r4, #0]
    47d0:	79eb      	ldrb	r3, [r5, #7]
    47d2:	4283      	cmp	r3, r0
    47d4:	d9f3      	bls.n	47be <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    47d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    47da:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    47dc:	2207      	movs	r2, #7
    47de:	4669      	mov	r1, sp
    47e0:	4428      	add	r0, r5
    47e2:	9300      	str	r3, [sp, #0]
    47e4:	f8cd 3003 	str.w	r3, [sp, #3]
    47e8:	f016 f822 	bl	1a830 <memcmp>
	if (param->id >= bt_dev.id_count ||
    47ec:	2800      	cmp	r0, #0
    47ee:	d0e6      	beq.n	47be <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    47f0:	6860      	ldr	r0, [r4, #4]
    47f2:	07c2      	lsls	r2, r0, #31
    47f4:	d406      	bmi.n	4804 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    47f6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    47fa:	2b08      	cmp	r3, #8
    47fc:	d802      	bhi.n	4804 <valid_adv_param+0x50>
    47fe:	68a3      	ldr	r3, [r4, #8]
    4800:	2b9f      	cmp	r3, #159	; 0x9f
    4802:	d9dc      	bls.n	47be <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    4804:	f010 0f30 	tst.w	r0, #48	; 0x30
    4808:	d002      	beq.n	4810 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    480a:	6923      	ldr	r3, [r4, #16]
    480c:	2b00      	cmp	r3, #0
    480e:	d0d6      	beq.n	47be <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    4810:	06c3      	lsls	r3, r0, #27
    4812:	d401      	bmi.n	4818 <valid_adv_param+0x64>
    4814:	6923      	ldr	r3, [r4, #16]
    4816:	b943      	cbnz	r3, 482a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    4818:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    481c:	429a      	cmp	r2, r3
    481e:	d8ce      	bhi.n	47be <valid_adv_param+0xa>
    4820:	2a1f      	cmp	r2, #31
    4822:	d9cc      	bls.n	47be <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    4824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    4828:	d8c9      	bhi.n	47be <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    482a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    482e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    4832:	bf18      	it	ne
    4834:	2001      	movne	r0, #1
    4836:	e7c3      	b.n	47c0 <valid_adv_param+0xc>
    4838:	20000000 	.word	0x20000000

0000483c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    483c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    483e:	4606      	mov	r6, r0
    4840:	4b1e      	ldr	r3, [pc, #120]	; (48bc <le_adv_start_add_conn+0x80>)
    4842:	f816 2b09 	ldrb.w	r2, [r6], #9
    4846:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    484a:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    484c:	2300      	movs	r3, #0
{
    484e:	4605      	mov	r5, r0
    4850:	2207      	movs	r2, #7
    4852:	460f      	mov	r7, r1
    4854:	4630      	mov	r0, r6
    4856:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    4858:	9300      	str	r3, [sp, #0]
    485a:	f8cd 3003 	str.w	r3, [sp, #3]
    485e:	f015 ffe7 	bl	1a830 <memcmp>
    4862:	782a      	ldrb	r2, [r5, #0]
    4864:	4604      	mov	r4, r0
    4866:	b9a8      	cbnz	r0, 4894 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    4868:	4b15      	ldr	r3, [pc, #84]	; (48c0 <le_adv_start_add_conn+0x84>)
    486a:	6818      	ldr	r0, [r3, #0]
    486c:	8899      	ldrh	r1, [r3, #4]
    486e:	9002      	str	r0, [sp, #8]
    4870:	799b      	ldrb	r3, [r3, #6]
    4872:	f8ad 100c 	strh.w	r1, [sp, #12]
    4876:	4610      	mov	r0, r2
    4878:	a902      	add	r1, sp, #8
    487a:	f88d 300e 	strb.w	r3, [sp, #14]
    487e:	f000 ff6b 	bl	5758 <bt_conn_add_le>
		if (!conn) {
    4882:	4605      	mov	r5, r0
    4884:	b1b8      	cbz	r0, 48b6 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    4886:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    4888:	f000 fdc6 	bl	5418 <bt_conn_set_state>
	*out_conn = conn;
    488c:	603d      	str	r5, [r7, #0]
	return 0;
}
    488e:	4620      	mov	r0, r4
    4890:	b005      	add	sp, #20
    4892:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    4894:	4631      	mov	r1, r6
    4896:	4610      	mov	r0, r2
    4898:	f016 ffdd 	bl	1b856 <bt_conn_exists_le>
    489c:	4604      	mov	r4, r0
    489e:	b938      	cbnz	r0, 48b0 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    48a0:	7828      	ldrb	r0, [r5, #0]
    48a2:	4631      	mov	r1, r6
    48a4:	f000 ff58 	bl	5758 <bt_conn_add_le>
	if (!conn) {
    48a8:	4605      	mov	r5, r0
    48aa:	b120      	cbz	r0, 48b6 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    48ac:	2105      	movs	r1, #5
    48ae:	e7eb      	b.n	4888 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    48b0:	f06f 0415 	mvn.w	r4, #21
    48b4:	e7eb      	b.n	488e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    48b6:	f06f 040b 	mvn.w	r4, #11
    48ba:	e7e8      	b.n	488e <le_adv_start_add_conn+0x52>
    48bc:	20000000 	.word	0x20000000
    48c0:	0001f3e3 	.word	0x0001f3e3

000048c4 <bt_le_ext_adv_foreach>:
{
    48c4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    48c6:	4801      	ldr	r0, [pc, #4]	; (48cc <bt_le_ext_adv_foreach+0x8>)
    48c8:	4718      	bx	r3
    48ca:	bf00      	nop
    48cc:	20000018 	.word	0x20000018

000048d0 <bt_le_adv_lookup_legacy>:
}
    48d0:	4800      	ldr	r0, [pc, #0]	; (48d4 <bt_le_adv_lookup_legacy+0x4>)
    48d2:	4770      	bx	lr
    48d4:	20000018 	.word	0x20000018

000048d8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    48d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    48dc:	690e      	ldr	r6, [r1, #16]
{
    48de:	b08f      	sub	sp, #60	; 0x3c
    48e0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    48e2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    48e4:	ebb6 0903 	subs.w	r9, r6, r3
{
    48e8:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    48ea:	488c      	ldr	r0, [pc, #560]	; (4b1c <bt_le_adv_start_legacy+0x244>)
    48ec:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    48ee:	bf18      	it	ne
    48f0:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    48f4:	9307      	str	r3, [sp, #28]
    48f6:	f016 fcf5 	bl	1b2e4 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    48fa:	0747      	lsls	r7, r0, #29
{
    48fc:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    48fe:	f140 8102 	bpl.w	4b06 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    4902:	4608      	mov	r0, r1
    4904:	f7ff ff56 	bl	47b4 <valid_adv_param>
    4908:	b928      	cbnz	r0, 4916 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    490a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    490e:	4658      	mov	r0, fp
    4910:	b00f      	add	sp, #60	; 0x3c
    4912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    4916:	4620      	mov	r0, r4
    4918:	f7ff fc76 	bl	4208 <bt_id_adv_random_addr_check>
    491c:	4680      	mov	r8, r0
    491e:	2800      	cmp	r0, #0
    4920:	d0f3      	beq.n	490a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    4922:	f105 0710 	add.w	r7, r5, #16
    4926:	4638      	mov	r0, r7
    4928:	f016 fcdc 	bl	1b2e4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    492c:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    4930:	0640      	lsls	r0, r0, #25
    4932:	f100 80eb 	bmi.w	4b0c <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    4936:	220f      	movs	r2, #15
    4938:	4659      	mov	r1, fp
    493a:	a80a      	add	r0, sp, #40	; 0x28
    493c:	f015 ff94 	bl	1a868 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    4940:	68a3      	ldr	r3, [r4, #8]
    4942:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    4946:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    4948:	68e3      	ldr	r3, [r4, #12]
    494a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    494e:	f016 fcba 	bl	1b2c6 <get_adv_channel_map>
	if (adv->id != param->id) {
    4952:	782a      	ldrb	r2, [r5, #0]
    4954:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    4956:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    495a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    495c:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    4960:	d004      	beq.n	496c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4962:	486e      	ldr	r0, [pc, #440]	; (4b1c <bt_le_adv_start_legacy+0x244>)
    4964:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    4968:	f016 fcc2 	bl	1b2f0 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    496c:	4a6c      	ldr	r2, [pc, #432]	; (4b20 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    496e:	7823      	ldrb	r3, [r4, #0]
    4970:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    4972:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    4976:	6861      	ldr	r1, [r4, #4]
    4978:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    497c:	464a      	mov	r2, r9
    497e:	4628      	mov	r0, r5
    4980:	f7ff fe96 	bl	46b0 <bt_id_set_adv_own_addr>
	if (err) {
    4984:	4683      	mov	fp, r0
    4986:	2800      	cmp	r0, #0
    4988:	d1c1      	bne.n	490e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    498a:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    498e:	2e00      	cmp	r6, #0
    4990:	d049      	beq.n	4a26 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
    4992:	6921      	ldr	r1, [r4, #16]
    4994:	2207      	movs	r2, #7
    4996:	f015 ff5c 	bl	1a852 <memcpy>
	name_type = get_adv_name_type_param(param);
    499a:	4620      	mov	r0, r4
    499c:	f016 fda6 	bl	1b4ec <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    49a0:	6863      	ldr	r3, [r4, #4]
    49a2:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    49a4:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    49a6:	d547      	bpl.n	4a38 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
    49a8:	2e00      	cmp	r6, #0
    49aa:	d042      	beq.n	4a32 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    49ac:	f013 0f10 	tst.w	r3, #16
    49b0:	bf14      	ite	ne
    49b2:	2304      	movne	r3, #4
    49b4:	2301      	moveq	r3, #1
    49b6:	6921      	ldr	r1, [r4, #16]
    49b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    49bc:	2207      	movs	r2, #7
    49be:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    49c2:	f015 ff46 	bl	1a852 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    49c6:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    49ca:	210f      	movs	r1, #15
    49cc:	f242 0006 	movw	r0, #8198	; 0x2006
    49d0:	f7ff f854 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
    49d4:	4683      	mov	fp, r0
    49d6:	2800      	cmp	r0, #0
    49d8:	f000 809b 	beq.w	4b12 <bt_le_adv_start_legacy+0x23a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    49dc:	220f      	movs	r2, #15
    49de:	a90a      	add	r1, sp, #40	; 0x28
    49e0:	3008      	adds	r0, #8
    49e2:	f019 fa98 	bl	1df16 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    49e6:	2200      	movs	r2, #0
    49e8:	4659      	mov	r1, fp
    49ea:	f242 0006 	movw	r0, #8198	; 0x2006
    49ee:	f7ff f8a1 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    49f2:	2800      	cmp	r0, #0
    49f4:	f040 8090 	bne.w	4b18 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    49f8:	b376      	cbz	r6, 4a58 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    49fa:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    49fc:	07db      	lsls	r3, r3, #31
    49fe:	d439      	bmi.n	4a74 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    4a00:	2101      	movs	r1, #1
    4a02:	4628      	mov	r0, r5
    4a04:	f016 fd82 	bl	1b50c <bt_le_adv_set_enable_legacy>
	if (err) {
    4a08:	4683      	mov	fp, r0
    4a0a:	9807      	ldr	r0, [sp, #28]
    4a0c:	f1bb 0f00 	cmp.w	fp, #0
    4a10:	d073      	beq.n	4afa <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    4a12:	2800      	cmp	r0, #0
    4a14:	f43f af7b 	beq.w	490e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4a18:	2100      	movs	r1, #0
    4a1a:	f000 fcfd 	bl	5418 <bt_conn_set_state>
			bt_conn_unref(conn);
    4a1e:	9807      	ldr	r0, [sp, #28]
    4a20:	f016 fe5e 	bl	1b6e0 <bt_conn_unref>
    4a24:	e773      	b.n	490e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    4a26:	9608      	str	r6, [sp, #32]
    4a28:	2207      	movs	r2, #7
    4a2a:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    4a2e:	a908      	add	r1, sp, #32
    4a30:	e7b1      	b.n	4996 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    4a32:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    4a36:	e7c8      	b.n	49ca <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    4a38:	059a      	lsls	r2, r3, #22
    4a3a:	d403      	bmi.n	4a44 <bt_le_adv_start_legacy+0x16c>
    4a3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4a3e:	b90b      	cbnz	r3, 4a44 <bt_le_adv_start_legacy+0x16c>
    4a40:	2802      	cmp	r0, #2
    4a42:	d103      	bne.n	4a4c <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    4a44:	2302      	movs	r3, #2
    4a46:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    4a4a:	e7be      	b.n	49ca <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    4a4c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    4a4e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    4a52:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    4a56:	e7b8      	b.n	49ca <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    4a58:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4a5a:	9300      	str	r3, [sp, #0]
    4a5c:	e9cd 8901 	strd	r8, r9, [sp, #4]
    4a60:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4a62:	9905      	ldr	r1, [sp, #20]
    4a64:	4652      	mov	r2, sl
    4a66:	4628      	mov	r0, r5
    4a68:	f016 fcc9 	bl	1b3fe <le_adv_update.constprop.0>
		if (err) {
    4a6c:	4683      	mov	fp, r0
    4a6e:	2800      	cmp	r0, #0
    4a70:	d0c3      	beq.n	49fa <bt_le_adv_start_legacy+0x122>
    4a72:	e74c      	b.n	490e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    4a74:	a907      	add	r1, sp, #28
    4a76:	4628      	mov	r0, r5
    4a78:	f7ff fee0 	bl	483c <le_adv_start_add_conn>
		if (err) {
    4a7c:	4683      	mov	fp, r0
    4a7e:	2800      	cmp	r0, #0
    4a80:	d0be      	beq.n	4a00 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
    4a82:	f110 0f0c 	cmn.w	r0, #12
    4a86:	f47f af42 	bne.w	490e <bt_le_adv_start_legacy+0x36>
    4a8a:	2e00      	cmp	r6, #0
    4a8c:	f47f af3f 	bne.w	490e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    4a90:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    4a92:	0798      	lsls	r0, r3, #30
    4a94:	f53f af3b 	bmi.w	490e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    4a98:	6862      	ldr	r2, [r4, #4]
    4a9a:	f082 0202 	eor.w	r2, r2, #2
    4a9e:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    4aa2:	f00b 0201 	and.w	r2, fp, #1
    4aa6:	210d      	movs	r1, #13
    4aa8:	4638      	mov	r0, r7
    4aaa:	f016 fc91 	bl	1b3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    4aae:	f109 33ff 	add.w	r3, r9, #4294967295
    4ab2:	425a      	negs	r2, r3
    4ab4:	415a      	adcs	r2, r3
    4ab6:	2107      	movs	r1, #7
    4ab8:	4638      	mov	r0, r7
    4aba:	f016 fc89 	bl	1b3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    4abe:	f1a9 0102 	sub.w	r1, r9, #2
    4ac2:	424a      	negs	r2, r1
    4ac4:	414a      	adcs	r2, r1
    4ac6:	4638      	mov	r0, r7
    4ac8:	2108      	movs	r1, #8
    4aca:	f016 fc81 	bl	1b3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    4ace:	6862      	ldr	r2, [r4, #4]
    4ad0:	2109      	movs	r1, #9
    4ad2:	f002 0201 	and.w	r2, r2, #1
    4ad6:	4638      	mov	r0, r7
    4ad8:	f016 fc7a 	bl	1b3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    4adc:	4642      	mov	r2, r8
    4ade:	210a      	movs	r1, #10
    4ae0:	4638      	mov	r0, r7
    4ae2:	f016 fc75 	bl	1b3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    4ae6:	6862      	ldr	r2, [r4, #4]
    4ae8:	210c      	movs	r1, #12
    4aea:	f3c2 0280 	ubfx	r2, r2, #2, #1
    4aee:	4638      	mov	r0, r7
    4af0:	f016 fc6e 	bl	1b3d0 <atomic_set_bit_to>
	return 0;
    4af4:	f04f 0b00 	mov.w	fp, #0
    4af8:	e709      	b.n	490e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    4afa:	b108      	cbz	r0, 4b00 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
    4afc:	f016 fdf0 	bl	1b6e0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    4b00:	2e00      	cmp	r6, #0
    4b02:	d1ce      	bne.n	4aa2 <bt_le_adv_start_legacy+0x1ca>
    4b04:	e7c8      	b.n	4a98 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    4b06:	f06f 0b0a 	mvn.w	fp, #10
    4b0a:	e700      	b.n	490e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    4b0c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    4b10:	e6fd      	b.n	490e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    4b12:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    4b16:	e6fa      	b.n	490e <bt_le_adv_start_legacy+0x36>
    4b18:	4683      	mov	fp, r0
    4b1a:	e6f8      	b.n	490e <bt_le_adv_start_legacy+0x36>
    4b1c:	200000cc 	.word	0x200000cc
    4b20:	20000000 	.word	0x20000000

00004b24 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    4b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4b26:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    4b28:	9a06      	ldr	r2, [sp, #24]
{
    4b2a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    4b2c:	e9cd 3200 	strd	r3, r2, [sp]
    4b30:	462b      	mov	r3, r5
    4b32:	460a      	mov	r2, r1
    4b34:	4601      	mov	r1, r0
    4b36:	4811      	ldr	r0, [pc, #68]	; (4b7c <bt_le_adv_start+0x58>)
    4b38:	f7ff fece 	bl	48d8 <bt_le_adv_start_legacy>
    4b3c:	4621      	mov	r1, r4
    4b3e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    4b40:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    4b42:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    4b46:	429d      	cmp	r5, r3
    4b48:	d102      	bne.n	4b50 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    4b4a:	4630      	mov	r0, r6
    4b4c:	b002      	add	sp, #8
    4b4e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    4b50:	880a      	ldrh	r2, [r1, #0]
    4b52:	4282      	cmp	r2, r0
    4b54:	d104      	bne.n	4b60 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    4b56:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    4b58:	b112      	cbz	r2, 4b60 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    4b5a:	7812      	ldrb	r2, [r2, #0]
    4b5c:	07d2      	lsls	r2, r2, #31
    4b5e:	d402      	bmi.n	4b66 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    4b60:	3301      	adds	r3, #1
    4b62:	3108      	adds	r1, #8
    4b64:	e7ef      	b.n	4b46 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    4b66:	4906      	ldr	r1, [pc, #24]	; (4b80 <bt_le_adv_start+0x5c>)
    4b68:	4806      	ldr	r0, [pc, #24]	; (4b84 <bt_le_adv_start+0x60>)
    4b6a:	f019 ff70 	bl	1ea4e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    4b6e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    4b72:	2300      	movs	r3, #0
    4b74:	4803      	ldr	r0, [pc, #12]	; (4b84 <bt_le_adv_start+0x60>)
    4b76:	f013 fbf7 	bl	18368 <k_work_reschedule>
    4b7a:	e7e6      	b.n	4b4a <bt_le_adv_start+0x26>
    4b7c:	20000018 	.word	0x20000018
    4b80:	0001b561 	.word	0x0001b561
    4b84:	20000030 	.word	0x20000030

00004b88 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    4b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    4b8a:	4829      	ldr	r0, [pc, #164]	; (4c30 <bt_le_adv_stop+0xa8>)
    4b8c:	f016 fce5 	bl	1b55a <bt_le_lim_adv_cancel_timeout>
    4b90:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    4b94:	4827      	ldr	r0, [pc, #156]	; (4c34 <bt_le_adv_stop+0xac>)
    4b96:	f016 fbab 	bl	1b2f0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4b9a:	4826      	ldr	r0, [pc, #152]	; (4c34 <bt_le_adv_stop+0xac>)
    4b9c:	f016 fba2 	bl	1b2e4 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    4ba0:	0641      	lsls	r1, r0, #25
    4ba2:	d403      	bmi.n	4bac <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    4ba4:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    4ba6:	4620      	mov	r0, r4
    4ba8:	b004      	add	sp, #16
    4baa:	bd10      	pop	{r4, pc}
    4bac:	4821      	ldr	r0, [pc, #132]	; (4c34 <bt_le_adv_stop+0xac>)
    4bae:	f016 fb99 	bl	1b2e4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4bb2:	0582      	lsls	r2, r0, #22
    4bb4:	d521      	bpl.n	4bfa <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    4bb6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    4bb8:	481f      	ldr	r0, [pc, #124]	; (4c38 <bt_le_adv_stop+0xb0>)
    4bba:	9300      	str	r3, [sp, #0]
    4bbc:	2207      	movs	r2, #7
    4bbe:	4669      	mov	r1, sp
    4bc0:	f8cd 3003 	str.w	r3, [sp, #3]
    4bc4:	f015 fe34 	bl	1a830 <memcmp>
    4bc8:	4b1c      	ldr	r3, [pc, #112]	; (4c3c <bt_le_adv_stop+0xb4>)
    4bca:	bb60      	cbnz	r0, 4c26 <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    4bcc:	4a1c      	ldr	r2, [pc, #112]	; (4c40 <bt_le_adv_stop+0xb8>)
    4bce:	8891      	ldrh	r1, [r2, #4]
    4bd0:	6810      	ldr	r0, [r2, #0]
    4bd2:	7992      	ldrb	r2, [r2, #6]
    4bd4:	f8ad 100c 	strh.w	r1, [sp, #12]
    4bd8:	f88d 200e 	strb.w	r2, [sp, #14]
    4bdc:	9002      	str	r0, [sp, #8]
    4bde:	2204      	movs	r2, #4
    4be0:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    4be2:	7e18      	ldrb	r0, [r3, #24]
    4be4:	f000 fdf2 	bl	57cc <bt_conn_lookup_state_le>
    4be8:	4604      	mov	r4, r0
	if (conn) {
    4bea:	b130      	cbz	r0, 4bfa <bt_le_adv_stop+0x72>
		conn->err = status;
    4bec:	2100      	movs	r1, #0
    4bee:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4bf0:	f000 fc12 	bl	5418 <bt_conn_set_state>
		bt_conn_unref(conn);
    4bf4:	4620      	mov	r0, r4
    4bf6:	f016 fd73 	bl	1b6e0 <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    4bfa:	480d      	ldr	r0, [pc, #52]	; (4c30 <bt_le_adv_stop+0xa8>)
    4bfc:	2100      	movs	r1, #0
    4bfe:	f016 fc85 	bl	1b50c <bt_le_adv_set_enable_legacy>
		if (err) {
    4c02:	4604      	mov	r4, r0
    4c04:	2800      	cmp	r0, #0
    4c06:	d1ce      	bne.n	4ba6 <bt_le_adv_stop+0x1e>
    4c08:	480e      	ldr	r0, [pc, #56]	; (4c44 <bt_le_adv_stop+0xbc>)
    4c0a:	f016 fb6b 	bl	1b2e4 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4c0e:	0643      	lsls	r3, r0, #25
    4c10:	d5c8      	bpl.n	4ba4 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    4c12:	4620      	mov	r0, r4
    4c14:	f016 fca6 	bl	1b564 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    4c18:	4620      	mov	r0, r4
    4c1a:	f016 fb20 	bl	1b25e <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    4c1e:	2001      	movs	r0, #1
    4c20:	f016 fca0 	bl	1b564 <bt_le_scan_set_enable>
    4c24:	e7bf      	b.n	4ba6 <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    4c26:	2205      	movs	r2, #5
    4c28:	f103 0121 	add.w	r1, r3, #33	; 0x21
    4c2c:	e7d9      	b.n	4be2 <bt_le_adv_stop+0x5a>
    4c2e:	bf00      	nop
    4c30:	20000018 	.word	0x20000018
    4c34:	20000028 	.word	0x20000028
    4c38:	20000021 	.word	0x20000021
    4c3c:	20000000 	.word	0x20000000
    4c40:	0001f3e3 	.word	0x0001f3e3
    4c44:	200000cc 	.word	0x200000cc

00004c48 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    4c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4c4a:	481e      	ldr	r0, [pc, #120]	; (4cc4 <bt_le_adv_resume+0x7c>)
    4c4c:	4c1d      	ldr	r4, [pc, #116]	; (4cc4 <bt_le_adv_resume+0x7c>)
    4c4e:	f016 fb49 	bl	1b2e4 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    4c52:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    4c56:	d032      	beq.n	4cbe <bt_le_adv_resume+0x76>
    4c58:	4620      	mov	r0, r4
    4c5a:	f016 fb43 	bl	1b2e4 <atomic_get>
    4c5e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4c60:	f3c0 1580 	ubfx	r5, r0, #6, #1
    4c64:	d42b      	bmi.n	4cbe <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4c66:	4620      	mov	r0, r4
    4c68:	f016 fb3c 	bl	1b2e4 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    4c6c:	0583      	lsls	r3, r0, #22
    4c6e:	d526      	bpl.n	4cbe <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    4c70:	a901      	add	r1, sp, #4
    4c72:	f1a4 0010 	sub.w	r0, r4, #16
    4c76:	f7ff fde1 	bl	483c <le_adv_start_add_conn>
	if (err) {
    4c7a:	bb00      	cbnz	r0, 4cbe <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    4c7c:	2101      	movs	r1, #1
    4c7e:	f1a4 0010 	sub.w	r0, r4, #16
    4c82:	f016 fc43 	bl	1b50c <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    4c86:	b150      	cbz	r0, 4c9e <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c88:	4629      	mov	r1, r5
    4c8a:	9801      	ldr	r0, [sp, #4]
    4c8c:	f000 fbc4 	bl	5418 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4c90:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    4c94:	4620      	mov	r0, r4
    4c96:	f016 fb2b 	bl	1b2f0 <atomic_and>
	return (old & mask) != 0;
    4c9a:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    4c9e:	9801      	ldr	r0, [sp, #4]
    4ca0:	f016 fd1e 	bl	1b6e0 <bt_conn_unref>
	if (persist_paused) {
    4ca4:	b15d      	cbz	r5, 4cbe <bt_le_adv_resume+0x76>
    4ca6:	f3bf 8f5b 	dmb	ish
    4caa:	e854 3f00 	ldrex	r3, [r4]
    4cae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4cb2:	e844 3200 	strex	r2, r3, [r4]
    4cb6:	2a00      	cmp	r2, #0
    4cb8:	d1f7      	bne.n	4caa <bt_le_adv_resume+0x62>
    4cba:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    4cbe:	b003      	add	sp, #12
    4cc0:	bd30      	pop	{r4, r5, pc}
    4cc2:	bf00      	nop
    4cc4:	20000028 	.word	0x20000028

00004cc8 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    4cc8:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    4cca:	2102      	movs	r1, #2
{
    4ccc:	b087      	sub	sp, #28
    4cce:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    4cd0:	f242 000c 	movw	r0, #8204	; 0x200c
    4cd4:	f7fe fed2 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
    4cd8:	4605      	mov	r5, r0
    4cda:	b318      	cbz	r0, 4d24 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    4cdc:	2102      	movs	r1, #2
    4cde:	3008      	adds	r0, #8
    4ce0:	f019 f913 	bl	1df0a <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    4ce4:	2c01      	cmp	r4, #1
    4ce6:	d11b      	bne.n	4d20 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ce8:	f3bf 8f5b 	dmb	ish
    4cec:	4b0f      	ldr	r3, [pc, #60]	; (4d2c <bt_le_scan_set_enable_legacy+0x64>)
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4cf4:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    4cf8:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    4cfa:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    4cfc:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    4cfe:	425c      	negs	r4, r3
    4d00:	415c      	adcs	r4, r3
    4d02:	4a0a      	ldr	r2, [pc, #40]	; (4d2c <bt_le_scan_set_enable_legacy+0x64>)
    4d04:	9400      	str	r4, [sp, #0]
    4d06:	a903      	add	r1, sp, #12
    4d08:	4628      	mov	r0, r5
    4d0a:	2306      	movs	r3, #6
    4d0c:	f7fe fea4 	bl	3a58 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    4d10:	2200      	movs	r2, #0
    4d12:	4629      	mov	r1, r5
    4d14:	f242 000c 	movw	r0, #8204	; 0x200c
    4d18:	f7fe ff0c 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    4d1c:	b007      	add	sp, #28
    4d1e:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    4d20:	2300      	movs	r3, #0
    4d22:	e7e9      	b.n	4cf8 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    4d24:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4d28:	e7f8      	b.n	4d1c <bt_le_scan_set_enable_legacy+0x54>
    4d2a:	bf00      	nop
    4d2c:	200000cc 	.word	0x200000cc

00004d30 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    4d30:	4b01      	ldr	r3, [pc, #4]	; (4d38 <bt_scan_reset+0x8>)
    4d32:	2200      	movs	r2, #0
    4d34:	601a      	str	r2, [r3, #0]
}
    4d36:	4770      	bx	lr
    4d38:	200016cc 	.word	0x200016cc

00004d3c <bt_le_scan_update>:
    4d3c:	4b0a      	ldr	r3, [pc, #40]	; (4d68 <bt_le_scan_update+0x2c>)
    4d3e:	f3bf 8f5b 	dmb	ish
    4d42:	681a      	ldr	r2, [r3, #0]
    4d44:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4d48:	f3c2 10c0 	ubfx	r0, r2, #7, #1
    4d4c:	0612      	lsls	r2, r2, #24
    4d4e:	d408      	bmi.n	4d62 <bt_le_scan_update+0x26>
    4d50:	f3bf 8f5b 	dmb	ish
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4d5a:	065b      	lsls	r3, r3, #25
    4d5c:	d501      	bpl.n	4d62 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    4d5e:	f7ff bfb3 	b.w	4cc8 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    4d62:	2000      	movs	r0, #0
    4d64:	4770      	bx	lr
    4d66:	bf00      	nop
    4d68:	200000cc 	.word	0x200000cc

00004d6c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    4d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    4d70:	f100 0808 	add.w	r8, r0, #8
    4d74:	b08b      	sub	sp, #44	; 0x2c
    4d76:	4604      	mov	r4, r0
    4d78:	4640      	mov	r0, r8
    4d7a:	f019 f90b 	bl	1df94 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    4d7e:	f8df b144 	ldr.w	fp, [pc, #324]	; 4ec4 <bt_hci_le_adv_report+0x158>
    4d82:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    4d84:	b916      	cbnz	r6, 4d8c <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    4d86:	b00b      	add	sp, #44	; 0x2c
    4d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    4d8c:	89a3      	ldrh	r3, [r4, #12]
    4d8e:	2b08      	cmp	r3, #8
    4d90:	d9f9      	bls.n	4d86 <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
    4d92:	2109      	movs	r1, #9
    4d94:	4640      	mov	r0, r8
    4d96:	f019 f8f5 	bl	1df84 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    4d9a:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    4d9e:	237f      	movs	r3, #127	; 0x7f
    4da0:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    4da4:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    4da8:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    4daa:	7a5b      	ldrb	r3, [r3, #9]
    4dac:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    4db0:	23ff      	movs	r3, #255	; 0xff
    4db2:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    4db6:	2300      	movs	r3, #0
    4db8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    4dbc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    4dc0:	7802      	ldrb	r2, [r0, #0]
    4dc2:	f88d 201f 	strb.w	r2, [sp, #31]
    4dc6:	2a04      	cmp	r2, #4
    4dc8:	bf9c      	itt	ls
    4dca:	4b3f      	ldrls	r3, [pc, #252]	; (4ec8 <bt_hci_le_adv_report+0x15c>)
    4dcc:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    4dce:	f8ad 3020 	strh.w	r3, [sp, #32]
    4dd2:	4b3e      	ldr	r3, [pc, #248]	; (4ecc <bt_hci_le_adv_report+0x160>)
    4dd4:	f3bf 8f5b 	dmb	ish
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    4dde:	061a      	lsls	r2, r3, #24
    4de0:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    4de2:	f100 0101 	add.w	r1, r0, #1
    4de6:	fa1f f989 	uxth.w	r9, r9
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    4dea:	d50b      	bpl.n	4e04 <bt_hci_le_adv_report+0x98>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    4dec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4df0:	075b      	lsls	r3, r3, #29
    4df2:	d507      	bpl.n	4e04 <bt_hci_le_adv_report+0x98>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    4df4:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    4df6:	4640      	mov	r0, r8
    4df8:	3101      	adds	r1, #1
    4dfa:	3e01      	subs	r6, #1
    4dfc:	f019 f8ba 	bl	1df74 <net_buf_simple_pull>
    4e00:	b2f6      	uxtb	r6, r6
    4e02:	e7bf      	b.n	4d84 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    4e04:	786b      	ldrb	r3, [r5, #1]
    4e06:	1e9a      	subs	r2, r3, #2
    4e08:	2a01      	cmp	r2, #1
    4e0a:	d848      	bhi.n	4e9e <bt_hci_le_adv_report+0x132>
	memcpy(dst, src, sizeof(*dst));
    4e0c:	2207      	movs	r2, #7
    4e0e:	a802      	add	r0, sp, #8
    4e10:	f015 fd1f 	bl	1a852 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4e14:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4e18:	3b02      	subs	r3, #2
    4e1a:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    4e1e:	ab02      	add	r3, sp, #8
    4e20:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    4e22:	f8db 3000 	ldr.w	r3, [fp]
    4e26:	b1a3      	cbz	r3, 4e52 <bt_hci_le_adv_report+0xe6>
	state->offset = net_buf_simple_headroom(buf);
    4e28:	4640      	mov	r0, r8
    4e2a:	f019 f8c3 	bl	1dfb4 <net_buf_simple_headroom>
	state->len = buf->len;
    4e2e:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    4e30:	f89d 201f 	ldrb.w	r2, [sp, #31]
    4e34:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    4e38:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    4e3c:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    4e40:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    4e42:	4643      	mov	r3, r8
    4e44:	a802      	add	r0, sp, #8
    4e46:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    4e48:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4e4a:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4e4c:	fa10 f08a 	uxtah	r0, r0, sl
    4e50:	60a0      	str	r0, [r4, #8]
	return list->head;
    4e52:	4b1f      	ldr	r3, [pc, #124]	; (4ed0 <bt_hci_le_adv_report+0x164>)
    4e54:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    4e56:	2a00      	cmp	r2, #0
    4e58:	d0cc      	beq.n	4df4 <bt_hci_le_adv_report+0x88>
	return node->next;
    4e5a:	f852 7908 	ldr.w	r7, [r2], #-8
    4e5e:	b107      	cbz	r7, 4e62 <bt_hci_le_adv_report+0xf6>
    4e60:	3f08      	subs	r7, #8
		if (listener->recv) {
    4e62:	6813      	ldr	r3, [r2, #0]
    4e64:	9201      	str	r2, [sp, #4]
    4e66:	b193      	cbz	r3, 4e8e <bt_hci_le_adv_report+0x122>
	state->offset = net_buf_simple_headroom(buf);
    4e68:	4640      	mov	r0, r8
    4e6a:	f019 f8a3 	bl	1dfb4 <net_buf_simple_headroom>
			listener->recv(info, buf);
    4e6e:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    4e70:	89a3      	ldrh	r3, [r4, #12]
    4e72:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    4e74:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    4e78:	4682      	mov	sl, r0
			listener->recv(info, buf);
    4e7a:	4641      	mov	r1, r8
    4e7c:	a806      	add	r0, sp, #24
	state->len = buf->len;
    4e7e:	9300      	str	r3, [sp, #0]
    4e80:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    4e82:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4e84:	9b00      	ldr	r3, [sp, #0]
    4e86:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4e88:	fa10 f08a 	uxtah	r0, r0, sl
    4e8c:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    4e8e:	2f00      	cmp	r7, #0
    4e90:	d0b0      	beq.n	4df4 <bt_hci_le_adv_report+0x88>
    4e92:	68bb      	ldr	r3, [r7, #8]
    4e94:	b103      	cbz	r3, 4e98 <bt_hci_le_adv_report+0x12c>
    4e96:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    4e98:	463a      	mov	r2, r7
    4e9a:	461f      	mov	r7, r3
    4e9c:	e7e1      	b.n	4e62 <bt_hci_le_adv_report+0xf6>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    4e9e:	2bff      	cmp	r3, #255	; 0xff
    4ea0:	d109      	bne.n	4eb6 <bt_hci_le_adv_report+0x14a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    4ea2:	2300      	movs	r3, #0
    4ea4:	9304      	str	r3, [sp, #16]
    4ea6:	2207      	movs	r2, #7
    4ea8:	f8cd 3013 	str.w	r3, [sp, #19]
    4eac:	a904      	add	r1, sp, #16
    4eae:	a802      	add	r0, sp, #8
    4eb0:	f015 fccf 	bl	1a852 <memcpy>
}
    4eb4:	e7b3      	b.n	4e1e <bt_hci_le_adv_report+0xb2>
		bt_addr_le_copy(&id_addr,
    4eb6:	2000      	movs	r0, #0
    4eb8:	f016 f9c9 	bl	1b24e <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    4ebc:	2207      	movs	r2, #7
    4ebe:	4601      	mov	r1, r0
    4ec0:	e7f5      	b.n	4eae <bt_hci_le_adv_report+0x142>
    4ec2:	bf00      	nop
    4ec4:	200016cc 	.word	0x200016cc
    4ec8:	00020dc9 	.word	0x00020dc9
    4ecc:	200000cc 	.word	0x200000cc
    4ed0:	200016c4 	.word	0x200016c4

00004ed4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    4ed4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    4ed6:	4904      	ldr	r1, [pc, #16]	; (4ee8 <bt_pub_key_is_debug+0x14>)
    4ed8:	2240      	movs	r2, #64	; 0x40
    4eda:	f015 fca9 	bl	1a830 <memcmp>
}
    4ede:	fab0 f080 	clz	r0, r0
    4ee2:	0940      	lsrs	r0, r0, #5
    4ee4:	bd08      	pop	{r3, pc}
    4ee6:	bf00      	nop
    4ee8:	00020dce 	.word	0x00020dce

00004eec <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    4eec:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    4eee:	4b31      	ldr	r3, [pc, #196]	; (4fb4 <bt_pub_key_gen+0xc8>)
    4ef0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    4ef4:	f003 0306 	and.w	r3, r3, #6
    4ef8:	2b06      	cmp	r3, #6
    4efa:	d152      	bne.n	4fa2 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
    4efc:	2800      	cmp	r0, #0
    4efe:	d053      	beq.n	4fa8 <bt_pub_key_gen+0xbc>
	return list->head;
    4f00:	4e2d      	ldr	r6, [pc, #180]	; (4fb8 <bt_pub_key_gen+0xcc>)
    4f02:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    4f04:	b132      	cbz	r2, 4f14 <bt_pub_key_gen+0x28>
    4f06:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    4f08:	4298      	cmp	r0, r3
    4f0a:	d050      	beq.n	4fae <bt_pub_key_gen+0xc2>
	return node->next;
    4f0c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    4f0e:	b10b      	cbz	r3, 4f14 <bt_pub_key_gen+0x28>
    4f10:	3b04      	subs	r3, #4
    4f12:	e7f9      	b.n	4f08 <bt_pub_key_gen+0x1c>
	parent->next = child;
    4f14:	6042      	str	r2, [r0, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
    4f16:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    4f18:	1d03      	adds	r3, r0, #4
	list->head = node;
    4f1a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    4f1c:	b902      	cbnz	r2, 4f20 <bt_pub_key_gen+0x34>
	list->tail = node;
    4f1e:	6073      	str	r3, [r6, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4f20:	4c26      	ldr	r4, [pc, #152]	; (4fbc <bt_pub_key_gen+0xd0>)
    4f22:	f3bf 8f5b 	dmb	ish
    4f26:	e854 2f00 	ldrex	r2, [r4]
    4f2a:	f042 0320 	orr.w	r3, r2, #32
    4f2e:	e844 3100 	strex	r1, r3, [r4]
    4f32:	2900      	cmp	r1, #0
    4f34:	d1f7      	bne.n	4f26 <bt_pub_key_gen+0x3a>
    4f36:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4f3a:	f012 0220 	ands.w	r2, r2, #32
    4f3e:	d002      	beq.n	4f46 <bt_pub_key_gen+0x5a>
		return 0;
    4f40:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    4f42:	4628      	mov	r0, r5
    4f44:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4f46:	f3bf 8f5b 	dmb	ish
    4f4a:	e854 3f00 	ldrex	r3, [r4]
    4f4e:	f023 0310 	bic.w	r3, r3, #16
    4f52:	e844 3100 	strex	r1, r3, [r4]
    4f56:	2900      	cmp	r1, #0
    4f58:	d1f7      	bne.n	4f4a <bt_pub_key_gen+0x5e>
    4f5a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    4f5e:	4611      	mov	r1, r2
    4f60:	f242 0025 	movw	r0, #8229	; 0x2025
    4f64:	f7fe fde6 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    4f68:	4605      	mov	r5, r0
    4f6a:	2800      	cmp	r0, #0
    4f6c:	d0e8      	beq.n	4f40 <bt_pub_key_gen+0x54>
    4f6e:	f3bf 8f5b 	dmb	ish
    4f72:	e854 3f00 	ldrex	r3, [r4]
    4f76:	f023 0320 	bic.w	r3, r3, #32
    4f7a:	e844 3200 	strex	r2, r3, [r4]
    4f7e:	2a00      	cmp	r2, #0
    4f80:	d1f7      	bne.n	4f72 <bt_pub_key_gen+0x86>
    4f82:	f3bf 8f5b 	dmb	ish
	return list->head;
    4f86:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    4f88:	b13c      	cbz	r4, 4f9a <bt_pub_key_gen+0xae>
			if (cb->func) {
    4f8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    4f8e:	3c04      	subs	r4, #4
			if (cb->func) {
    4f90:	b10b      	cbz	r3, 4f96 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
    4f92:	2000      	movs	r0, #0
    4f94:	4798      	blx	r3
	return node->next;
    4f96:	6864      	ldr	r4, [r4, #4]
    4f98:	e7f6      	b.n	4f88 <bt_pub_key_gen+0x9c>
	list->head = NULL;
    4f9a:	2300      	movs	r3, #0
	list->tail = NULL;
    4f9c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    4fa0:	e7cf      	b.n	4f42 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
    4fa2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    4fa6:	e7cc      	b.n	4f42 <bt_pub_key_gen+0x56>
		return -EINVAL;
    4fa8:	f06f 0515 	mvn.w	r5, #21
    4fac:	e7c9      	b.n	4f42 <bt_pub_key_gen+0x56>
			return -EALREADY;
    4fae:	f06f 0577 	mvn.w	r5, #119	; 0x77
    4fb2:	e7c6      	b.n	4f42 <bt_pub_key_gen+0x56>
    4fb4:	20000000 	.word	0x20000000
    4fb8:	200016d4 	.word	0x200016d4
    4fbc:	200000cc 	.word	0x200000cc

00004fc0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4fc0:	4b05      	ldr	r3, [pc, #20]	; (4fd8 <bt_pub_key_get+0x18>)
    4fc2:	f3bf 8f5b 	dmb	ish
    4fc6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    4fc8:	4804      	ldr	r0, [pc, #16]	; (4fdc <bt_pub_key_get+0x1c>)
    4fca:	f3bf 8f5b 	dmb	ish
		return pub_key;
    4fce:	f013 0f10 	tst.w	r3, #16
}
    4fd2:	bf08      	it	eq
    4fd4:	2000      	moveq	r0, #0
    4fd6:	4770      	bx	lr
    4fd8:	200000cc 	.word	0x200000cc
    4fdc:	20002951 	.word	0x20002951

00004fe0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    4fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    4fe2:	4d1f      	ldr	r5, [pc, #124]	; (5060 <bt_dh_key_gen+0x80>)
    4fe4:	682b      	ldr	r3, [r5, #0]
    4fe6:	428b      	cmp	r3, r1
{
    4fe8:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    4fea:	d032      	beq.n	5052 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4fec:	b113      	cbz	r3, 4ff4 <bt_dh_key_gen+0x14>
		return -EBUSY;
    4fee:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    4ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ff4:	4b1b      	ldr	r3, [pc, #108]	; (5064 <bt_dh_key_gen+0x84>)
    4ff6:	f3bf 8f5b 	dmb	ish
    4ffa:	681a      	ldr	r2, [r3, #0]
    4ffc:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5000:	f3c2 1740 	ubfx	r7, r2, #5, #1
    5004:	0692      	lsls	r2, r2, #26
    5006:	d4f2      	bmi.n	4fee <bt_dh_key_gen+0xe>
    5008:	f3bf 8f5b 	dmb	ish
    500c:	681b      	ldr	r3, [r3, #0]
    500e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5012:	06db      	lsls	r3, r3, #27
    5014:	d520      	bpl.n	5058 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
    5016:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5018:	f242 0026 	movw	r0, #8230	; 0x2026
    501c:	2140      	movs	r1, #64	; 0x40
    501e:	f7fe fd2d 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
    5022:	4604      	mov	r4, r0
    5024:	b190      	cbz	r0, 504c <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
    5026:	2140      	movs	r1, #64	; 0x40
    5028:	3008      	adds	r0, #8
    502a:	f018 ff6e 	bl	1df0a <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    502e:	2240      	movs	r2, #64	; 0x40
    5030:	4631      	mov	r1, r6
    5032:	f015 fc0e 	bl	1a852 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5036:	463a      	mov	r2, r7
    5038:	4621      	mov	r1, r4
    503a:	f242 0026 	movw	r0, #8230	; 0x2026
    503e:	f7fe fd79 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
    5042:	2800      	cmp	r0, #0
    5044:	d0d5      	beq.n	4ff2 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    5046:	2300      	movs	r3, #0
    5048:	602b      	str	r3, [r5, #0]
		return err;
    504a:	e7d2      	b.n	4ff2 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    504c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5050:	e7f9      	b.n	5046 <bt_dh_key_gen+0x66>
		return -EALREADY;
    5052:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5056:	e7cc      	b.n	4ff2 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    5058:	f06f 007c 	mvn.w	r0, #124	; 0x7c
    505c:	e7c9      	b.n	4ff2 <bt_dh_key_gen+0x12>
    505e:	bf00      	nop
    5060:	200016d0 	.word	0x200016d0
    5064:	200000cc 	.word	0x200000cc

00005068 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    506a:	4c1b      	ldr	r4, [pc, #108]	; (50d8 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    506c:	6886      	ldr	r6, [r0, #8]
    506e:	f3bf 8f5b 	dmb	ish
    5072:	e854 3f00 	ldrex	r3, [r4]
    5076:	f023 0320 	bic.w	r3, r3, #32
    507a:	e844 3200 	strex	r2, r3, [r4]
    507e:	2a00      	cmp	r2, #0
    5080:	d1f7      	bne.n	5072 <bt_hci_evt_le_pkey_complete+0xa>
    5082:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    5086:	7833      	ldrb	r3, [r6, #0]
    5088:	b983      	cbnz	r3, 50ac <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    508a:	4814      	ldr	r0, [pc, #80]	; (50dc <bt_hci_evt_le_pkey_complete+0x74>)
    508c:	2240      	movs	r2, #64	; 0x40
    508e:	1c71      	adds	r1, r6, #1
    5090:	f015 fbdf 	bl	1a852 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5094:	f3bf 8f5b 	dmb	ish
    5098:	e854 3f00 	ldrex	r3, [r4]
    509c:	f043 0310 	orr.w	r3, r3, #16
    50a0:	e844 3200 	strex	r2, r3, [r4]
    50a4:	2a00      	cmp	r2, #0
    50a6:	d1f7      	bne.n	5098 <bt_hci_evt_le_pkey_complete+0x30>
    50a8:	f3bf 8f5b 	dmb	ish
	return list->head;
    50ac:	4d0c      	ldr	r5, [pc, #48]	; (50e0 <bt_hci_evt_le_pkey_complete+0x78>)
    50ae:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    50b0:	b16c      	cbz	r4, 50ce <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    50b2:	4f0a      	ldr	r7, [pc, #40]	; (50dc <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    50b4:	3c04      	subs	r4, #4
		if (cb->func) {
    50b6:	6823      	ldr	r3, [r4, #0]
    50b8:	b12b      	cbz	r3, 50c6 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
    50ba:	7832      	ldrb	r2, [r6, #0]
    50bc:	2a00      	cmp	r2, #0
    50be:	bf0c      	ite	eq
    50c0:	4638      	moveq	r0, r7
    50c2:	2000      	movne	r0, #0
    50c4:	4798      	blx	r3
	return node->next;
    50c6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    50c8:	b10c      	cbz	r4, 50ce <bt_hci_evt_le_pkey_complete+0x66>
    50ca:	3c04      	subs	r4, #4
    50cc:	e7f3      	b.n	50b6 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
    50ce:	2300      	movs	r3, #0
	list->tail = NULL;
    50d0:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    50d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50d6:	bf00      	nop
    50d8:	200000cc 	.word	0x200000cc
    50dc:	20002951 	.word	0x20002951
    50e0:	200016d4 	.word	0x200016d4

000050e4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    50e4:	4905      	ldr	r1, [pc, #20]	; (50fc <bt_hci_evt_le_dhkey_complete+0x18>)
    50e6:	680b      	ldr	r3, [r1, #0]
    50e8:	b133      	cbz	r3, 50f8 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    50ea:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    50ec:	2000      	movs	r0, #0
    50ee:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    50f0:	7811      	ldrb	r1, [r2, #0]
    50f2:	b901      	cbnz	r1, 50f6 <bt_hci_evt_le_dhkey_complete+0x12>
    50f4:	1c50      	adds	r0, r2, #1
    50f6:	4718      	bx	r3
	}
}
    50f8:	4770      	bx	lr
    50fa:	bf00      	nop
    50fc:	200016d0 	.word	0x200016d0

00005100 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5100:	4b0b      	ldr	r3, [pc, #44]	; (5130 <notify_connected+0x30>)
{
    5102:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5104:	681d      	ldr	r5, [r3, #0]
{
    5106:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5108:	b925      	cbnz	r5, 5114 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    510a:	4d0a      	ldr	r5, [pc, #40]	; (5134 <notify_connected+0x34>)
    510c:	4e0a      	ldr	r6, [pc, #40]	; (5138 <notify_connected+0x38>)
    510e:	42b5      	cmp	r5, r6
    5110:	d307      	bcc.n	5122 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    5112:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    5114:	682b      	ldr	r3, [r5, #0]
    5116:	b113      	cbz	r3, 511e <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    5118:	7b21      	ldrb	r1, [r4, #12]
    511a:	4620      	mov	r0, r4
    511c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    511e:	69ad      	ldr	r5, [r5, #24]
    5120:	e7f2      	b.n	5108 <notify_connected+0x8>
		if (cb->connected) {
    5122:	682b      	ldr	r3, [r5, #0]
    5124:	b113      	cbz	r3, 512c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    5126:	7b21      	ldrb	r1, [r4, #12]
    5128:	4620      	mov	r0, r4
    512a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    512c:	351c      	adds	r5, #28
    512e:	e7ee      	b.n	510e <notify_connected+0xe>
    5130:	200016e8 	.word	0x200016e8
    5134:	0001f334 	.word	0x0001f334
    5138:	0001f350 	.word	0x0001f350

0000513c <tx_notify>:
{
    513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
    5140:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5198 <tx_notify+0x5c>
{
    5144:	4604      	mov	r4, r0
	tx->cb = NULL;
    5146:	2700      	movs	r7, #0
	__asm__ volatile(
    5148:	f04f 0220 	mov.w	r2, #32
    514c:	f3ef 8311 	mrs	r3, BASEPRI
    5150:	f382 8812 	msr	BASEPRI_MAX, r2
    5154:	f3bf 8f6f 	isb	sy
	return list->head;
    5158:	6a21      	ldr	r1, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
    515a:	b929      	cbnz	r1, 5168 <tx_notify+0x2c>
	__asm__ volatile(
    515c:	f383 8811 	msr	BASEPRI, r3
    5160:	f3bf 8f6f 	isb	sy
}
    5164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5168:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    516a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    516c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    516e:	4281      	cmp	r1, r0
	list->tail = node;
    5170:	bf08      	it	eq
    5172:	6262      	streq	r2, [r4, #36]	; 0x24
    5174:	f383 8811 	msr	BASEPRI, r3
    5178:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    517c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    5180:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
    5182:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
    5186:	4640      	mov	r0, r8
    5188:	f019 fb52 	bl	1e830 <k_queue_append>
		cb(conn, user_data, 0);
    518c:	2200      	movs	r2, #0
    518e:	4631      	mov	r1, r6
    5190:	4620      	mov	r0, r4
    5192:	47a8      	blx	r5
	while (1) {
    5194:	e7d8      	b.n	5148 <tx_notify+0xc>
    5196:	bf00      	nop
    5198:	20000ad8 	.word	0x20000ad8

0000519c <conn_tx_destroy>:
{
    519c:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
    519e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
    51a2:	2200      	movs	r2, #0
	tx->user_data = NULL;
    51a4:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
    51a8:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
    51aa:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
    51ac:	4805      	ldr	r0, [pc, #20]	; (51c4 <conn_tx_destroy+0x28>)
    51ae:	f019 fb3f 	bl	1e830 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    51b2:	4631      	mov	r1, r6
    51b4:	4620      	mov	r0, r4
    51b6:	462b      	mov	r3, r5
    51b8:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
    51bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    51c0:	4718      	bx	r3
    51c2:	bf00      	nop
    51c4:	20000ad8 	.word	0x20000ad8

000051c8 <send_frag>:
{
    51c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    51cc:	694d      	ldr	r5, [r1, #20]
{
    51ce:	4604      	mov	r4, r0
    51d0:	460e      	mov	r6, r1
    51d2:	4690      	mov	r8, r2
    51d4:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    51d6:	f04f 33ff 	mov.w	r3, #4294967295
    51da:	4835      	ldr	r0, [pc, #212]	; (52b0 <send_frag+0xe8>)
    51dc:	f04f 32ff 	mov.w	r2, #4294967295
    51e0:	f012 febe 	bl	17f60 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    51e4:	7b63      	ldrb	r3, [r4, #13]
    51e6:	2b07      	cmp	r3, #7
    51e8:	d13b      	bne.n	5262 <send_frag+0x9a>
	__asm__ volatile(
    51ea:	f04f 0320 	mov.w	r3, #32
    51ee:	f3ef 8211 	mrs	r2, BASEPRI
    51f2:	f383 8812 	msr	BASEPRI_MAX, r3
    51f6:	f3bf 8f6f 	isb	sy
	if (tx) {
    51fa:	69a3      	ldr	r3, [r4, #24]
    51fc:	2d00      	cmp	r5, #0
    51fe:	d043      	beq.n	5288 <send_frag+0xc0>
	parent->next = child;
    5200:	2100      	movs	r1, #0
    5202:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    5204:	2b00      	cmp	r3, #0
    5206:	d13c      	bne.n	5282 <send_frag+0xba>
	list->head = node;
    5208:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    520c:	f382 8811 	msr	BASEPRI, r2
    5210:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    5214:	2104      	movs	r1, #4
    5216:	f106 0008 	add.w	r0, r6, #8
    521a:	f018 fe97 	bl	1df4c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    521e:	8823      	ldrh	r3, [r4, #0]
    5220:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    5224:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5228:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    522a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    522e:	3b04      	subs	r3, #4
    5230:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5232:	2302      	movs	r3, #2
    5234:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    5236:	4630      	mov	r0, r6
    5238:	f015 ff39 	bl	1b0ae <bt_send>
	if (err) {
    523c:	b3b0      	cbz	r0, 52ac <send_frag+0xe4>
	__asm__ volatile(
    523e:	f04f 0320 	mov.w	r3, #32
    5242:	f3ef 8811 	mrs	r8, BASEPRI
    5246:	f383 8812 	msr	BASEPRI_MAX, r3
    524a:	f3bf 8f6f 	isb	sy
		if (tx) {
    524e:	b33d      	cbz	r5, 52a0 <send_frag+0xd8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
    5250:	4629      	mov	r1, r5
    5252:	f104 0014 	add.w	r0, r4, #20
    5256:	f016 f987 	bl	1b568 <sys_slist_find_and_remove>
	__asm__ volatile(
    525a:	f388 8811 	msr	BASEPRI, r8
    525e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5262:	4813      	ldr	r0, [pc, #76]	; (52b0 <send_frag+0xe8>)
    5264:	f012 fe56 	bl	17f14 <z_impl_k_sem_give>
	if (tx) {
    5268:	b11d      	cbz	r5, 5272 <send_frag+0xaa>
		conn_tx_destroy(conn, tx);
    526a:	4629      	mov	r1, r5
    526c:	4620      	mov	r0, r4
    526e:	f7ff ff95 	bl	519c <conn_tx_destroy>
	if (always_consume) {
    5272:	b11f      	cbz	r7, 527c <send_frag+0xb4>
		net_buf_unref(buf);
    5274:	4630      	mov	r0, r6
    5276:	f010 fd4d 	bl	15d14 <net_buf_unref>
	return false;
    527a:	2700      	movs	r7, #0
}
    527c:	4638      	mov	r0, r7
    527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
    5282:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5284:	61a5      	str	r5, [r4, #24]
}
    5286:	e7c1      	b.n	520c <send_frag+0x44>
		if (tail_tx) {
    5288:	b133      	cbz	r3, 5298 <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
    528a:	f103 090c 	add.w	r9, r3, #12
    528e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    5290:	3301      	adds	r3, #1
    5292:	f8c9 3000 	str.w	r3, [r9]
    5296:	e7b9      	b.n	520c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    5298:	69e3      	ldr	r3, [r4, #28]
    529a:	f104 091c 	add.w	r9, r4, #28
    529e:	e7f7      	b.n	5290 <send_frag+0xc8>
			(*pending_no_cb)--;
    52a0:	f8d9 3000 	ldr.w	r3, [r9]
    52a4:	3b01      	subs	r3, #1
    52a6:	f8c9 3000 	str.w	r3, [r9]
    52aa:	e7d6      	b.n	525a <send_frag+0x92>
	return true;
    52ac:	2701      	movs	r7, #1
    52ae:	e7e5      	b.n	527c <send_frag+0xb4>
    52b0:	20000100 	.word	0x20000100

000052b4 <bt_conn_get_pkts>:
}
    52b4:	4800      	ldr	r0, [pc, #0]	; (52b8 <bt_conn_get_pkts+0x4>)
    52b6:	4770      	bx	lr
    52b8:	20000100 	.word	0x20000100

000052bc <bt_conn_new>:
{
    52bc:	b538      	push	{r3, r4, r5, lr}
    52be:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    52c0:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    52c2:	2501      	movs	r5, #1
    52c4:	428b      	cmp	r3, r1
    52c6:	d102      	bne.n	52ce <bt_conn_new+0x12>
		return NULL;
    52c8:	2400      	movs	r4, #0
}
    52ca:	4620      	mov	r0, r4
    52cc:	bd38      	pop	{r3, r4, r5, pc}
    52ce:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    52d2:	f3bf 8f5b 	dmb	ish
    52d6:	e852 0f00 	ldrex	r0, [r2]
    52da:	2800      	cmp	r0, #0
    52dc:	d104      	bne.n	52e8 <bt_conn_new+0x2c>
    52de:	e842 5c00 	strex	ip, r5, [r2]
    52e2:	f1bc 0f00 	cmp.w	ip, #0
    52e6:	d1f6      	bne.n	52d6 <bt_conn_new+0x1a>
    52e8:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    52ec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    52f0:	d002      	beq.n	52f8 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    52f2:	3301      	adds	r3, #1
    52f4:	4604      	mov	r4, r0
    52f6:	e7e5      	b.n	52c4 <bt_conn_new+0x8>
	if (!conn) {
    52f8:	2c00      	cmp	r4, #0
    52fa:	d0e6      	beq.n	52ca <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    52fc:	22b8      	movs	r2, #184	; 0xb8
    52fe:	2100      	movs	r1, #0
    5300:	4620      	mov	r0, r4
    5302:	f015 fab1 	bl	1a868 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    5306:	f104 0058 	add.w	r0, r4, #88	; 0x58
    530a:	4904      	ldr	r1, [pc, #16]	; (531c <bt_conn_new+0x60>)
    530c:	f019 fb9f 	bl	1ea4e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    5310:	4903      	ldr	r1, [pc, #12]	; (5320 <bt_conn_new+0x64>)
    5312:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5316:	f019 fb5c 	bl	1e9d2 <k_work_init>
	return conn;
    531a:	e7d6      	b.n	52ca <bt_conn_new+0xe>
    531c:	0000587d 	.word	0x0000587d
    5320:	0001b5bb 	.word	0x0001b5bb

00005324 <bt_conn_send_cb>:
{
    5324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5326:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    5328:	7b43      	ldrb	r3, [r0, #13]
    532a:	2b07      	cmp	r3, #7
{
    532c:	4604      	mov	r4, r0
    532e:	460d      	mov	r5, r1
    5330:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    5332:	d11b      	bne.n	536c <bt_conn_send_cb+0x48>
	if (cb) {
    5334:	b342      	cbz	r2, 5388 <bt_conn_send_cb+0x64>
	return z_impl_z_current_get();
    5336:	f013 fac7 	bl	188c8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    533a:	4b16      	ldr	r3, [pc, #88]	; (5394 <bt_conn_send_cb+0x70>)
    533c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    533e:	4816      	ldr	r0, [pc, #88]	; (5398 <bt_conn_send_cb+0x74>)
    5340:	bf07      	ittee	eq
    5342:	2200      	moveq	r2, #0
    5344:	2300      	moveq	r3, #0
    5346:	f04f 32ff 	movne.w	r2, #4294967295
    534a:	f04f 33ff 	movne.w	r3, #4294967295
    534e:	f012 fdad 	bl	17eac <z_impl_k_queue_get>
    5352:	4601      	mov	r1, r0
		if (!tx) {
    5354:	b1d0      	cbz	r0, 538c <bt_conn_send_cb+0x68>
		if (conn->state != BT_CONN_CONNECTED) {
    5356:	7b63      	ldrb	r3, [r4, #13]
    5358:	2b07      	cmp	r3, #7
    535a:	f04f 0200 	mov.w	r2, #0
    535e:	d008      	beq.n	5372 <bt_conn_send_cb+0x4e>
	tx->user_data = NULL;
    5360:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
    5364:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5366:	480c      	ldr	r0, [pc, #48]	; (5398 <bt_conn_send_cb+0x74>)
    5368:	f019 fa62 	bl	1e830 <k_queue_append>
		return -ENOTCONN;
    536c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    5370:	e009      	b.n	5386 <bt_conn_send_cb+0x62>
		tx->user_data = user_data;
    5372:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    5376:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
    5378:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    537a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    537e:	4629      	mov	r1, r5
    5380:	f018 fd84 	bl	1de8c <net_buf_put>
	return 0;
    5384:	2000      	movs	r0, #0
}
    5386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    5388:	614a      	str	r2, [r1, #20]
    538a:	e7f6      	b.n	537a <bt_conn_send_cb+0x56>
			return -ENOBUFS;
    538c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5390:	e7f9      	b.n	5386 <bt_conn_send_cb+0x62>
    5392:	bf00      	nop
    5394:	200015b0 	.word	0x200015b0
    5398:	20000ad8 	.word	0x20000ad8

0000539c <bt_conn_prepare_events>:
{
    539c:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    539e:	4b17      	ldr	r3, [pc, #92]	; (53fc <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    53a0:	4c17      	ldr	r4, [pc, #92]	; (5400 <bt_conn_prepare_events+0x64>)
    53a2:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    53a4:	2101      	movs	r1, #1
{
    53a6:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    53a8:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    53aa:	f019 fe2c 	bl	1f006 <k_poll_event_init>
    53ae:	f3bf 8f5b 	dmb	ish
    53b2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    53b6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    53ba:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    53be:	b90b      	cbnz	r3, 53c4 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    53c0:	2001      	movs	r0, #1
}
    53c2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    53c4:	7b63      	ldrb	r3, [r4, #13]
    53c6:	b953      	cbnz	r3, 53de <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    53c8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    53cc:	1d20      	adds	r0, r4, #4
    53ce:	f016 f8e5 	bl	1b59c <atomic_and>
    53d2:	0643      	lsls	r3, r0, #25
    53d4:	d503      	bpl.n	53de <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
    53d6:	4620      	mov	r0, r4
    53d8:	f016 f8fb 	bl	1b5d2 <conn_cleanup>
    53dc:	e7f0      	b.n	53c0 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    53de:	7b63      	ldrb	r3, [r4, #13]
    53e0:	2b07      	cmp	r3, #7
    53e2:	d1ed      	bne.n	53c0 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    53e4:	4b07      	ldr	r3, [pc, #28]	; (5404 <bt_conn_prepare_events+0x68>)
    53e6:	4630      	mov	r0, r6
    53e8:	2200      	movs	r2, #0
    53ea:	2104      	movs	r1, #4
    53ec:	f019 fe0b 	bl	1f006 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    53f0:	2301      	movs	r3, #1
    53f2:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    53f6:	2002      	movs	r0, #2
	return ev_count;
    53f8:	e7e3      	b.n	53c2 <bt_conn_prepare_events+0x26>
    53fa:	bf00      	nop
    53fc:	200002b4 	.word	0x200002b4
    5400:	20000d28 	.word	0x20000d28
    5404:	20000d60 	.word	0x20000d60

00005408 <bt_conn_lookup_handle>:
{
    5408:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    540a:	2101      	movs	r1, #1
    540c:	4801      	ldr	r0, [pc, #4]	; (5414 <bt_conn_lookup_handle+0xc>)
    540e:	f016 b981 	b.w	1b714 <conn_lookup_handle>
    5412:	bf00      	nop
    5414:	20000d28 	.word	0x20000d28

00005418 <bt_conn_set_state>:
{
    5418:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    541a:	7b45      	ldrb	r5, [r0, #13]
    541c:	428d      	cmp	r5, r1
{
    541e:	4604      	mov	r4, r0
	if (conn->state == state) {
    5420:	f000 80a5 	beq.w	556e <bt_conn_set_state+0x156>
	conn->state = state;
    5424:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    5426:	b925      	cbnz	r5, 5432 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
    5428:	7883      	ldrb	r3, [r0, #2]
    542a:	2b08      	cmp	r3, #8
    542c:	d001      	beq.n	5432 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
    542e:	f016 f93c 	bl	1b6aa <bt_conn_ref>
	switch (conn->state) {
    5432:	7b63      	ldrb	r3, [r4, #13]
    5434:	2b01      	cmp	r3, #1
    5436:	d116      	bne.n	5466 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
    5438:	4d4d      	ldr	r5, [pc, #308]	; (5570 <bt_conn_set_state+0x158>)
		tx->pending_no_cb = 0U;
    543a:	2600      	movs	r6, #0
	__asm__ volatile(
    543c:	f04f 0320 	mov.w	r3, #32
    5440:	f3ef 8211 	mrs	r2, BASEPRI
    5444:	f383 8812 	msr	BASEPRI_MAX, r3
    5448:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    544c:	69e3      	ldr	r3, [r4, #28]
    544e:	2b00      	cmp	r3, #0
    5450:	d06d      	beq.n	552e <bt_conn_set_state+0x116>
			conn->pending_no_cb--;
    5452:	3b01      	subs	r3, #1
    5454:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    5456:	f382 8811 	msr	BASEPRI, r2
    545a:	f3bf 8f6f 	isb	sy
    545e:	4628      	mov	r0, r5
    5460:	f012 fd58 	bl	17f14 <z_impl_k_sem_give>
}
    5464:	e7ea      	b.n	543c <bt_conn_set_state+0x24>
	switch (conn->state) {
    5466:	2b07      	cmp	r3, #7
    5468:	d009      	beq.n	547e <bt_conn_set_state+0x66>
    546a:	2b00      	cmp	r3, #0
    546c:	d17f      	bne.n	556e <bt_conn_set_state+0x156>
		if (conn->type == BT_CONN_TYPE_SCO) {
    546e:	78a3      	ldrb	r3, [r4, #2]
    5470:	2b04      	cmp	r3, #4
    5472:	d11e      	bne.n	54b2 <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
    5474:	4620      	mov	r0, r4
}
    5476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    547a:	f016 b931 	b.w	1b6e0 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    547e:	78a3      	ldrb	r3, [r4, #2]
    5480:	2b04      	cmp	r3, #4
    5482:	d074      	beq.n	556e <bt_conn_set_state+0x156>
	z_impl_k_queue_init(queue);
    5484:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5488:	f019 f9c6 	bl	1e818 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    548c:	4839      	ldr	r0, [pc, #228]	; (5574 <bt_conn_set_state+0x15c>)
    548e:	2100      	movs	r1, #0
    5490:	f013 fc40 	bl	18d14 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    5494:	2300      	movs	r3, #0
	list->tail = NULL;
    5496:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    549a:	78e3      	ldrb	r3, [r4, #3]
    549c:	2b01      	cmp	r3, #1
    549e:	d166      	bne.n	556e <bt_conn_set_state+0x156>
			k_work_schedule(&conn->deferred_work,
    54a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    54a4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    54a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    54ac:	2300      	movs	r3, #0
    54ae:	f012 bf27 	b.w	18300 <k_work_schedule>
		switch (old_state) {
    54b2:	3d01      	subs	r5, #1
    54b4:	2d05      	cmp	r5, #5
    54b6:	d85a      	bhi.n	556e <bt_conn_set_state+0x156>
    54b8:	a301      	add	r3, pc, #4	; (adr r3, 54c0 <bt_conn_set_state+0xa8>)
    54ba:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    54be:	bf00      	nop
    54c0:	000054d9 	.word	0x000054d9
    54c4:	00005521 	.word	0x00005521
    54c8:	00005475 	.word	0x00005475
    54cc:	00005475 	.word	0x00005475
    54d0:	00005521 	.word	0x00005521
    54d4:	00005521 	.word	0x00005521
			tx_notify(conn);
    54d8:	4620      	mov	r0, r4
    54da:	f7ff fe2f 	bl	513c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    54de:	78a3      	ldrb	r3, [r4, #2]
    54e0:	2b01      	cmp	r3, #1
    54e2:	d10a      	bne.n	54fa <bt_conn_set_state+0xe2>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    54e4:	f104 0558 	add.w	r5, r4, #88	; 0x58
    54e8:	4628      	mov	r0, r5
    54ea:	f019 fabc 	bl	1ea66 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    54ee:	f010 0f0c 	tst.w	r0, #12
    54f2:	d002      	beq.n	54fa <bt_conn_set_state+0xe2>
				k_work_cancel_delayable(&conn->deferred_work);
    54f4:	4628      	mov	r0, r5
    54f6:	f019 fab8 	bl	1ea6a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54fa:	f3bf 8f5b 	dmb	ish
    54fe:	3404      	adds	r4, #4
    5500:	e854 3f00 	ldrex	r3, [r4]
    5504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5508:	e844 3200 	strex	r2, r3, [r4]
    550c:	2a00      	cmp	r2, #0
    550e:	d1f7      	bne.n	5500 <bt_conn_set_state+0xe8>
    5510:	f3bf 8f5b 	dmb	ish
    5514:	4817      	ldr	r0, [pc, #92]	; (5574 <bt_conn_set_state+0x15c>)
}
    5516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    551a:	2100      	movs	r1, #0
    551c:	f013 bbfa 	b.w	18d14 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    5520:	7b23      	ldrb	r3, [r4, #12]
    5522:	2b00      	cmp	r3, #0
    5524:	d0a6      	beq.n	5474 <bt_conn_set_state+0x5c>
				notify_connected(conn);
    5526:	4620      	mov	r0, r4
    5528:	f7ff fdea 	bl	5100 <notify_connected>
    552c:	e7a2      	b.n	5474 <bt_conn_set_state+0x5c>
	return list->head;
    552e:	6961      	ldr	r1, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    5530:	b129      	cbz	r1, 553e <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5532:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    5534:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5536:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5538:	4281      	cmp	r1, r0
	list->tail = node;
    553a:	bf08      	it	eq
    553c:	61a3      	streq	r3, [r4, #24]
    553e:	f382 8811 	msr	BASEPRI, r2
    5542:	f3bf 8f6f 	isb	sy
		if (!node) {
    5546:	b191      	cbz	r1, 556e <bt_conn_set_state+0x156>
	__asm__ volatile(
    5548:	f04f 0220 	mov.w	r2, #32
    554c:	f3ef 8311 	mrs	r3, BASEPRI
    5550:	f382 8812 	msr	BASEPRI_MAX, r2
    5554:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    5558:	68ca      	ldr	r2, [r1, #12]
    555a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    555c:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
    555e:	f383 8811 	msr	BASEPRI, r3
    5562:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    5566:	4620      	mov	r0, r4
    5568:	f7ff fe18 	bl	519c <conn_tx_destroy>
    556c:	e777      	b.n	545e <bt_conn_set_state+0x46>
}
    556e:	bd70      	pop	{r4, r5, r6, pc}
    5570:	20000100 	.word	0x20000100
    5574:	200002b4 	.word	0x200002b4

00005578 <bt_conn_index>:
		index = conn - acl_conns;
    5578:	4b03      	ldr	r3, [pc, #12]	; (5588 <bt_conn_index+0x10>)
    557a:	1ac0      	subs	r0, r0, r3
    557c:	4b03      	ldr	r3, [pc, #12]	; (558c <bt_conn_index+0x14>)
    557e:	1180      	asrs	r0, r0, #6
    5580:	4358      	muls	r0, r3
}
    5582:	b2c0      	uxtb	r0, r0
    5584:	4770      	bx	lr
    5586:	bf00      	nop
    5588:	20000d28 	.word	0x20000d28
    558c:	aaaaaaab 	.word	0xaaaaaaab

00005590 <bt_conn_create_pdu_timeout>:
{
    5590:	b538      	push	{r3, r4, r5, lr}
    5592:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    5594:	4906      	ldr	r1, [pc, #24]	; (55b0 <bt_conn_create_pdu_timeout+0x20>)
    5596:	2800      	cmp	r0, #0
    5598:	bf08      	it	eq
    559a:	4608      	moveq	r0, r1
    559c:	f018 fc53 	bl	1de46 <net_buf_alloc_fixed>
	if (!buf) {
    55a0:	4604      	mov	r4, r0
    55a2:	b118      	cbz	r0, 55ac <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    55a4:	1d29      	adds	r1, r5, #4
    55a6:	3008      	adds	r0, #8
    55a8:	f018 fc6c 	bl	1de84 <net_buf_simple_reserve>
}
    55ac:	4620      	mov	r0, r4
    55ae:	bd38      	pop	{r3, r4, r5, pc}
    55b0:	20000af0 	.word	0x20000af0

000055b4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    55b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55b6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    55b8:	f3bf 8f5b 	dmb	ish
    55bc:	6863      	ldr	r3, [r4, #4]
    55be:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    55c2:	05db      	lsls	r3, r3, #23
    55c4:	f100 0004 	add.w	r0, r0, #4
    55c8:	d511      	bpl.n	55ee <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    55ca:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    55ce:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    55d2:	429a      	cmp	r2, r3
    55d4:	d80b      	bhi.n	55ee <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    55d6:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    55da:	429a      	cmp	r2, r3
    55dc:	d307      	bcc.n	55ee <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    55de:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    55e2:	429a      	cmp	r2, r3
    55e4:	d103      	bne.n	55ee <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    55e6:	f46f 7180 	mvn.w	r1, #256	; 0x100
    55ea:	f015 ffd7 	bl	1b59c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    55ee:	4b10      	ldr	r3, [pc, #64]	; (5630 <notify_le_param_updated+0x7c>)
    55f0:	681d      	ldr	r5, [r3, #0]
    55f2:	b925      	cbnz	r5, 55fe <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    55f4:	4d0f      	ldr	r5, [pc, #60]	; (5634 <notify_le_param_updated+0x80>)
    55f6:	4f10      	ldr	r7, [pc, #64]	; (5638 <notify_le_param_updated+0x84>)
    55f8:	42bd      	cmp	r5, r7
    55fa:	d30c      	bcc.n	5616 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    55fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    55fe:	68ee      	ldr	r6, [r5, #12]
    5600:	b13e      	cbz	r6, 5612 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
    5602:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    5606:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    560a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    560e:	4620      	mov	r0, r4
    5610:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5612:	69ad      	ldr	r5, [r5, #24]
    5614:	e7ed      	b.n	55f2 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
    5616:	68ee      	ldr	r6, [r5, #12]
    5618:	b13e      	cbz	r6, 562a <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
    561a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    561e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    5622:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    5626:	4620      	mov	r0, r4
    5628:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    562a:	351c      	adds	r5, #28
    562c:	e7e4      	b.n	55f8 <notify_le_param_updated+0x44>
    562e:	bf00      	nop
    5630:	200016e8 	.word	0x200016e8
    5634:	0001f334 	.word	0x0001f334
    5638:	0001f350 	.word	0x0001f350

0000563c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5640:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    5642:	4608      	mov	r0, r1
{
    5644:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    5646:	f015 fcaa 	bl	1af9e <bt_le_conn_params_valid>
    564a:	4605      	mov	r5, r0
    564c:	b918      	cbnz	r0, 5656 <le_param_req+0x1a>
		return false;
    564e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    5650:	4628      	mov	r0, r5
    5652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5656:	4b13      	ldr	r3, [pc, #76]	; (56a4 <le_param_req+0x68>)
    5658:	681e      	ldr	r6, [r3, #0]
    565a:	b946      	cbnz	r6, 566e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    565c:	4e12      	ldr	r6, [pc, #72]	; (56a8 <le_param_req+0x6c>)
    565e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 56ac <le_param_req+0x70>
    5662:	4546      	cmp	r6, r8
    5664:	d2f4      	bcs.n	5650 <le_param_req+0x14>
		if (!cb->le_param_req) {
    5666:	68b3      	ldr	r3, [r6, #8]
    5668:	b983      	cbnz	r3, 568c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    566a:	361c      	adds	r6, #28
    566c:	e7f9      	b.n	5662 <le_param_req+0x26>
		if (!cb->le_param_req) {
    566e:	68b3      	ldr	r3, [r6, #8]
    5670:	b90b      	cbnz	r3, 5676 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    5672:	69b6      	ldr	r6, [r6, #24]
    5674:	e7f1      	b.n	565a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    5676:	4621      	mov	r1, r4
    5678:	4638      	mov	r0, r7
    567a:	4798      	blx	r3
    567c:	2800      	cmp	r0, #0
    567e:	d0e6      	beq.n	564e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    5680:	4620      	mov	r0, r4
    5682:	f015 fc8c 	bl	1af9e <bt_le_conn_params_valid>
    5686:	2800      	cmp	r0, #0
    5688:	d1f3      	bne.n	5672 <le_param_req+0x36>
    568a:	e7e0      	b.n	564e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    568c:	4621      	mov	r1, r4
    568e:	4638      	mov	r0, r7
    5690:	4798      	blx	r3
    5692:	2800      	cmp	r0, #0
    5694:	d0db      	beq.n	564e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    5696:	4620      	mov	r0, r4
    5698:	f015 fc81 	bl	1af9e <bt_le_conn_params_valid>
    569c:	2800      	cmp	r0, #0
    569e:	d1e4      	bne.n	566a <le_param_req+0x2e>
    56a0:	e7d5      	b.n	564e <le_param_req+0x12>
    56a2:	bf00      	nop
    56a4:	200016e8 	.word	0x200016e8
    56a8:	0001f334 	.word	0x0001f334
    56ac:	0001f350 	.word	0x0001f350

000056b0 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    56b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    56b4:	78c3      	ldrb	r3, [r0, #3]
{
    56b6:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    56b8:	b973      	cbnz	r3, 56d8 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    56ba:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    56be:	4b10      	ldr	r3, [pc, #64]	; (5700 <bt_conn_identity_resolved+0x50>)
    56c0:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    56c2:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    56c6:	b955      	cbnz	r5, 56de <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    56c8:	4d0e      	ldr	r5, [pc, #56]	; (5704 <bt_conn_identity_resolved+0x54>)
    56ca:	4f0f      	ldr	r7, [pc, #60]	; (5708 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    56cc:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    56d0:	42bd      	cmp	r5, r7
    56d2:	d30c      	bcc.n	56ee <bt_conn_identity_resolved+0x3e>
		}
	}
}
    56d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    56d8:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    56dc:	e7ef      	b.n	56be <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    56de:	692b      	ldr	r3, [r5, #16]
    56e0:	b11b      	cbz	r3, 56ea <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    56e2:	463a      	mov	r2, r7
    56e4:	4631      	mov	r1, r6
    56e6:	4620      	mov	r0, r4
    56e8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    56ea:	69ad      	ldr	r5, [r5, #24]
    56ec:	e7eb      	b.n	56c6 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    56ee:	692b      	ldr	r3, [r5, #16]
    56f0:	b11b      	cbz	r3, 56fa <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    56f2:	4642      	mov	r2, r8
    56f4:	4631      	mov	r1, r6
    56f6:	4620      	mov	r0, r4
    56f8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    56fa:	351c      	adds	r5, #28
    56fc:	e7e8      	b.n	56d0 <bt_conn_identity_resolved+0x20>
    56fe:	bf00      	nop
    5700:	200016e8 	.word	0x200016e8
    5704:	0001f334 	.word	0x0001f334
    5708:	0001f350 	.word	0x0001f350

0000570c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    570e:	7a43      	ldrb	r3, [r0, #9]
    5710:	7283      	strb	r3, [r0, #10]
{
    5712:	4604      	mov	r4, r0
    5714:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    5716:	f016 fb47 	bl	1bda8 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    571a:	4b0c      	ldr	r3, [pc, #48]	; (574c <bt_conn_security_changed+0x40>)
    571c:	681d      	ldr	r5, [r3, #0]
    571e:	b925      	cbnz	r5, 572a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5720:	4d0b      	ldr	r5, [pc, #44]	; (5750 <bt_conn_security_changed+0x44>)
    5722:	4f0c      	ldr	r7, [pc, #48]	; (5754 <bt_conn_security_changed+0x48>)
    5724:	42bd      	cmp	r5, r7
    5726:	d308      	bcc.n	573a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    5728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    572a:	696b      	ldr	r3, [r5, #20]
    572c:	b11b      	cbz	r3, 5736 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    572e:	7a61      	ldrb	r1, [r4, #9]
    5730:	4632      	mov	r2, r6
    5732:	4620      	mov	r0, r4
    5734:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5736:	69ad      	ldr	r5, [r5, #24]
    5738:	e7f1      	b.n	571e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    573a:	696b      	ldr	r3, [r5, #20]
    573c:	b11b      	cbz	r3, 5746 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    573e:	7a61      	ldrb	r1, [r4, #9]
    5740:	4632      	mov	r2, r6
    5742:	4620      	mov	r0, r4
    5744:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5746:	351c      	adds	r5, #28
    5748:	e7ec      	b.n	5724 <bt_conn_security_changed+0x18>
    574a:	bf00      	nop
    574c:	200016e8 	.word	0x200016e8
    5750:	0001f334 	.word	0x0001f334
    5754:	0001f350 	.word	0x0001f350

00005758 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    5758:	b570      	push	{r4, r5, r6, lr}
    575a:	4606      	mov	r6, r0
    575c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    575e:	480a      	ldr	r0, [pc, #40]	; (5788 <bt_conn_add_le+0x30>)
    5760:	2101      	movs	r1, #1
    5762:	f7ff fdab 	bl	52bc <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    5766:	4604      	mov	r4, r0
    5768:	b160      	cbz	r0, 5784 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
    576a:	7206      	strb	r6, [r0, #8]
    576c:	2207      	movs	r2, #7
    576e:	4629      	mov	r1, r5
    5770:	3088      	adds	r0, #136	; 0x88
    5772:	f015 f86e 	bl	1a852 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    5776:	2301      	movs	r3, #1
    5778:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    577a:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    577c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    577e:	4b03      	ldr	r3, [pc, #12]	; (578c <bt_conn_add_le+0x34>)
    5780:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    5784:	4620      	mov	r0, r4
    5786:	bd70      	pop	{r4, r5, r6, pc}
    5788:	20000d28 	.word	0x20000d28
    578c:	00280018 	.word	0x00280018

00005790 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    5790:	b570      	push	{r4, r5, r6, lr}
    5792:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5794:	480c      	ldr	r0, [pc, #48]	; (57c8 <bt_conn_lookup_addr_le+0x38>)
{
    5796:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5798:	f015 ff87 	bl	1b6aa <bt_conn_ref>

		if (!conn) {
    579c:	4604      	mov	r4, r0
    579e:	b128      	cbz	r0, 57ac <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    57a0:	7883      	ldrb	r3, [r0, #2]
    57a2:	2b01      	cmp	r3, #1
    57a4:	d004      	beq.n	57b0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    57a6:	f015 ff9b 	bl	1b6e0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    57aa:	2400      	movs	r4, #0
}
    57ac:	4620      	mov	r0, r4
    57ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    57b0:	4629      	mov	r1, r5
    57b2:	4632      	mov	r2, r6
    57b4:	f016 f82f 	bl	1b816 <bt_conn_is_peer_addr_le>
    57b8:	4605      	mov	r5, r0
    57ba:	2800      	cmp	r0, #0
    57bc:	d1f6      	bne.n	57ac <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    57be:	4620      	mov	r0, r4
    57c0:	f015 ff8e 	bl	1b6e0 <bt_conn_unref>
	return NULL;
    57c4:	462c      	mov	r4, r5
			continue;
    57c6:	e7f1      	b.n	57ac <bt_conn_lookup_addr_le+0x1c>
    57c8:	20000d28 	.word	0x20000d28

000057cc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    57cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57ce:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    57d0:	480e      	ldr	r0, [pc, #56]	; (580c <bt_conn_lookup_state_le+0x40>)
{
    57d2:	460e      	mov	r6, r1
    57d4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    57d6:	f015 ff68 	bl	1b6aa <bt_conn_ref>

		if (!conn) {
    57da:	4604      	mov	r4, r0
    57dc:	b1a0      	cbz	r0, 5808 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    57de:	7883      	ldrb	r3, [r0, #2]
    57e0:	2b01      	cmp	r3, #1
    57e2:	d003      	beq.n	57ec <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    57e4:	f015 ff7c 	bl	1b6e0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    57e8:	2400      	movs	r4, #0
			continue;
    57ea:	e00d      	b.n	5808 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    57ec:	b136      	cbz	r6, 57fc <bt_conn_lookup_state_le+0x30>
    57ee:	4632      	mov	r2, r6
    57f0:	4629      	mov	r1, r5
    57f2:	f016 f810 	bl	1b816 <bt_conn_is_peer_addr_le>
    57f6:	b908      	cbnz	r0, 57fc <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    57f8:	4620      	mov	r0, r4
    57fa:	e7f3      	b.n	57e4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    57fc:	7b63      	ldrb	r3, [r4, #13]
    57fe:	42bb      	cmp	r3, r7
    5800:	d1fa      	bne.n	57f8 <bt_conn_lookup_state_le+0x2c>
    5802:	7a23      	ldrb	r3, [r4, #8]
    5804:	42ab      	cmp	r3, r5
    5806:	d1f7      	bne.n	57f8 <bt_conn_lookup_state_le+0x2c>
}
    5808:	4620      	mov	r0, r4
    580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    580c:	20000d28 	.word	0x20000d28

00005810 <send_conn_le_param_update>:
{
    5810:	b538      	push	{r3, r4, r5, lr}
    5812:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    5814:	4608      	mov	r0, r1
{
    5816:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    5818:	f015 fbc1 	bl	1af9e <bt_le_conn_params_valid>
    581c:	b348      	cbz	r0, 5872 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    581e:	4b16      	ldr	r3, [pc, #88]	; (5878 <send_conn_le_param_update+0x68>)
    5820:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    5824:	0799      	lsls	r1, r3, #30
    5826:	d407      	bmi.n	5838 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    5828:	78e3      	ldrb	r3, [r4, #3]
    582a:	b183      	cbz	r3, 584e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    582c:	4629      	mov	r1, r5
    582e:	4620      	mov	r0, r4
}
    5830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    5834:	f016 bb0b 	b.w	1be4e <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    5838:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    583c:	079a      	lsls	r2, r3, #30
    583e:	d5f3      	bpl.n	5828 <send_conn_le_param_update+0x18>
    5840:	f3bf 8f5b 	dmb	ish
    5844:	6863      	ldr	r3, [r4, #4]
    5846:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    584a:	059b      	lsls	r3, r3, #22
    584c:	d4ec      	bmi.n	5828 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    584e:	4629      	mov	r1, r5
    5850:	4620      	mov	r0, r4
    5852:	f016 f80a 	bl	1b86a <bt_conn_le_conn_update>
		if (rc == 0) {
    5856:	b958      	cbnz	r0, 5870 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    5858:	882b      	ldrh	r3, [r5, #0]
    585a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    585e:	886b      	ldrh	r3, [r5, #2]
    5860:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    5864:	88ab      	ldrh	r3, [r5, #4]
    5866:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    586a:	88eb      	ldrh	r3, [r5, #6]
    586c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    5870:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5872:	f06f 0015 	mvn.w	r0, #21
    5876:	e7fb      	b.n	5870 <send_conn_le_param_update+0x60>
    5878:	20000000 	.word	0x20000000

0000587c <deferred_work>:
{
    587c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    587e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    5882:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    5884:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    5888:	b9fb      	cbnz	r3, 58ca <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    588a:	4628      	mov	r0, r5
    588c:	f016 f947 	bl	1bb1e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    5890:	4b28      	ldr	r3, [pc, #160]	; (5934 <deferred_work+0xb8>)
    5892:	681e      	ldr	r6, [r3, #0]
    5894:	b94e      	cbnz	r6, 58aa <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5896:	4e28      	ldr	r6, [pc, #160]	; (5938 <deferred_work+0xbc>)
    5898:	4f28      	ldr	r7, [pc, #160]	; (593c <deferred_work+0xc0>)
    589a:	42be      	cmp	r6, r7
    589c:	d30d      	bcc.n	58ba <deferred_work+0x3e>
		bt_conn_unref(conn);
    589e:	4628      	mov	r0, r5
}
    58a0:	b003      	add	sp, #12
    58a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    58a6:	f015 bf1b 	b.w	1b6e0 <bt_conn_unref>
		if (cb->disconnected) {
    58aa:	6873      	ldr	r3, [r6, #4]
    58ac:	b11b      	cbz	r3, 58b6 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    58ae:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    58b2:	4628      	mov	r0, r5
    58b4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    58b6:	69b6      	ldr	r6, [r6, #24]
    58b8:	e7ec      	b.n	5894 <deferred_work+0x18>
		if (cb->disconnected) {
    58ba:	6873      	ldr	r3, [r6, #4]
    58bc:	b11b      	cbz	r3, 58c6 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    58be:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    58c2:	4628      	mov	r0, r5
    58c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    58c6:	361c      	adds	r6, #28
    58c8:	e7e7      	b.n	589a <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    58ca:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    58ce:	2b01      	cmp	r3, #1
    58d0:	d128      	bne.n	5924 <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
    58d2:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    58d6:	f46f 7180 	mvn.w	r1, #256	; 0x100
    58da:	4630      	mov	r0, r6
    58dc:	f015 fe5e 	bl	1b59c <atomic_and>
    58e0:	05c3      	lsls	r3, r0, #23
    58e2:	d521      	bpl.n	5928 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    58e4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    58e8:	f8ad 3000 	strh.w	r3, [sp]
    58ec:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    58f0:	f8ad 3002 	strh.w	r3, [sp, #2]
    58f4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    58f8:	f8ad 3004 	strh.w	r3, [sp, #4]
    58fc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    5900:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    5904:	4669      	mov	r1, sp
    5906:	4628      	mov	r0, r5
    5908:	f7ff ff82 	bl	5810 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    590c:	f3bf 8f5b 	dmb	ish
    5910:	e856 3f00 	ldrex	r3, [r6]
    5914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5918:	e846 3200 	strex	r2, r3, [r6]
    591c:	2a00      	cmp	r2, #0
    591e:	d1f7      	bne.n	5910 <deferred_work+0x94>
    5920:	f3bf 8f5b 	dmb	ish
}
    5924:	b003      	add	sp, #12
    5926:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    5928:	4a05      	ldr	r2, [pc, #20]	; (5940 <deferred_work+0xc4>)
    592a:	6810      	ldr	r0, [r2, #0]
    592c:	6851      	ldr	r1, [r2, #4]
    592e:	466b      	mov	r3, sp
    5930:	c303      	stmia	r3!, {r0, r1}
    5932:	e7e7      	b.n	5904 <deferred_work+0x88>
    5934:	200016e8 	.word	0x200016e8
    5938:	0001f334 	.word	0x0001f334
    593c:	0001f350 	.word	0x0001f350
    5940:	0001f3ce 	.word	0x0001f3ce

00005944 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    5944:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    5946:	4801      	ldr	r0, [pc, #4]	; (594c <bt_conn_create_frag_timeout+0x8>)
    5948:	f7ff be22 	b.w	5590 <bt_conn_create_pdu_timeout>
    594c:	20000b74 	.word	0x20000b74

00005950 <create_frag>:
{
    5950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5954:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    5956:	f04f 33ff 	mov.w	r3, #4294967295
    595a:	f04f 32ff 	mov.w	r2, #4294967295
    595e:	2000      	movs	r0, #0
{
    5960:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    5962:	f7ff ffef 	bl	5944 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    5966:	7b73      	ldrb	r3, [r6, #13]
    5968:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    596a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    596c:	f04f 0600 	mov.w	r6, #0
    5970:	d005      	beq.n	597e <create_frag+0x2e>
		net_buf_unref(frag);
    5972:	f010 f9cf 	bl	15d14 <net_buf_unref>
		return NULL;
    5976:	4635      	mov	r5, r6
}
    5978:	4628      	mov	r0, r5
    597a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    597e:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    5980:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    5984:	4e0c      	ldr	r6, [pc, #48]	; (59b8 <create_frag+0x68>)
    5986:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    5988:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    598c:	f018 fb16 	bl	1dfbc <net_buf_simple_tailroom>
    5990:	4580      	cmp	r8, r0
    5992:	d20c      	bcs.n	59ae <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    5994:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5998:	f854 1f08 	ldr.w	r1, [r4, #8]!
    599c:	4632      	mov	r2, r6
    599e:	4638      	mov	r0, r7
    59a0:	f018 fab9 	bl	1df16 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    59a4:	4631      	mov	r1, r6
    59a6:	4620      	mov	r0, r4
    59a8:	f018 fae4 	bl	1df74 <net_buf_simple_pull>
    59ac:	e7e4      	b.n	5978 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    59ae:	4638      	mov	r0, r7
    59b0:	f018 fb04 	bl	1dfbc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    59b4:	b286      	uxth	r6, r0
    59b6:	e7ef      	b.n	5998 <create_frag+0x48>
    59b8:	20000000 	.word	0x20000000

000059bc <bt_conn_process_tx>:
{
    59bc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    59be:	7b43      	ldrb	r3, [r0, #13]
{
    59c0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    59c2:	b95b      	cbnz	r3, 59dc <bt_conn_process_tx+0x20>
    59c4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    59c8:	3004      	adds	r0, #4
    59ca:	f015 fde7 	bl	1b59c <atomic_and>
    59ce:	0643      	lsls	r3, r0, #25
    59d0:	d504      	bpl.n	59dc <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    59d2:	4620      	mov	r0, r4
}
    59d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    59d8:	f015 bdfb 	b.w	1b5d2 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    59dc:	2200      	movs	r2, #0
    59de:	2300      	movs	r3, #0
    59e0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    59e4:	f018 fa34 	bl	1de50 <net_buf_get>
	BT_ASSERT(buf);
    59e8:	4605      	mov	r5, r0
    59ea:	b960      	cbnz	r0, 5a06 <bt_conn_process_tx+0x4a>
    59ec:	4a1f      	ldr	r2, [pc, #124]	; (5a6c <bt_conn_process_tx+0xb0>)
    59ee:	4920      	ldr	r1, [pc, #128]	; (5a70 <bt_conn_process_tx+0xb4>)
    59f0:	4820      	ldr	r0, [pc, #128]	; (5a74 <bt_conn_process_tx+0xb8>)
    59f2:	f240 23fe 	movw	r3, #766	; 0x2fe
    59f6:	f013 fdcc 	bl	19592 <assert_print>
    59fa:	4040      	eors	r0, r0
    59fc:	f380 8811 	msr	BASEPRI, r0
    5a00:	f04f 0003 	mov.w	r0, #3
    5a04:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    5a06:	4e1c      	ldr	r6, [pc, #112]	; (5a78 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    5a08:	89aa      	ldrh	r2, [r5, #12]
    5a0a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    5a0e:	429a      	cmp	r2, r3
    5a10:	d807      	bhi.n	5a22 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    5a12:	2300      	movs	r3, #0
    5a14:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    5a16:	4629      	mov	r1, r5
    5a18:	4620      	mov	r0, r4
    5a1a:	f7ff fbd5 	bl	51c8 <send_frag>
	if (!send_buf(conn, buf)) {
    5a1e:	b130      	cbz	r0, 5a2e <bt_conn_process_tx+0x72>
}
    5a20:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    5a22:	4629      	mov	r1, r5
    5a24:	4620      	mov	r0, r4
    5a26:	f7ff ff93 	bl	5950 <create_frag>
	if (!frag) {
    5a2a:	4601      	mov	r1, r0
    5a2c:	b920      	cbnz	r0, 5a38 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    5a2e:	4628      	mov	r0, r5
}
    5a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    5a34:	f010 b96e 	b.w	15d14 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    5a38:	2301      	movs	r3, #1
    5a3a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    5a3c:	4620      	mov	r0, r4
    5a3e:	f7ff fbc3 	bl	51c8 <send_frag>
    5a42:	2800      	cmp	r0, #0
    5a44:	d0f3      	beq.n	5a2e <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    5a46:	89aa      	ldrh	r2, [r5, #12]
    5a48:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    5a4c:	429a      	cmp	r2, r3
    5a4e:	d802      	bhi.n	5a56 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    5a50:	2300      	movs	r3, #0
    5a52:	2203      	movs	r2, #3
    5a54:	e7df      	b.n	5a16 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    5a56:	4629      	mov	r1, r5
    5a58:	4620      	mov	r0, r4
    5a5a:	f7ff ff79 	bl	5950 <create_frag>
		if (!frag) {
    5a5e:	4601      	mov	r1, r0
    5a60:	2800      	cmp	r0, #0
    5a62:	d0e4      	beq.n	5a2e <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    5a64:	2301      	movs	r3, #1
    5a66:	461a      	mov	r2, r3
    5a68:	e7e8      	b.n	5a3c <bt_conn_process_tx+0x80>
    5a6a:	bf00      	nop
    5a6c:	00020e0e 	.word	0x00020e0e
    5a70:	00020ceb 	.word	0x00020ceb
    5a74:	00020cce 	.word	0x00020cce
    5a78:	20000000 	.word	0x20000000

00005a7c <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    5a7c:	4b0c      	ldr	r3, [pc, #48]	; (5ab0 <bt_conn_auth_cb_register+0x34>)
    5a7e:	b908      	cbnz	r0, 5a84 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    5a80:	6018      	str	r0, [r3, #0]
		return 0;
    5a82:	4770      	bx	lr
	}

	if (bt_auth) {
    5a84:	681a      	ldr	r2, [r3, #0]
    5a86:	b962      	cbnz	r2, 5aa2 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    5a88:	6902      	ldr	r2, [r0, #16]
    5a8a:	b93a      	cbnz	r2, 5a9c <bt_conn_auth_cb_register+0x20>
    5a8c:	6802      	ldr	r2, [r0, #0]
    5a8e:	b95a      	cbnz	r2, 5aa8 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    5a90:	6842      	ldr	r2, [r0, #4]
    5a92:	b94a      	cbnz	r2, 5aa8 <bt_conn_auth_cb_register+0x2c>
    5a94:	6882      	ldr	r2, [r0, #8]
    5a96:	b93a      	cbnz	r2, 5aa8 <bt_conn_auth_cb_register+0x2c>
    5a98:	6942      	ldr	r2, [r0, #20]
    5a9a:	b92a      	cbnz	r2, 5aa8 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    5a9c:	6018      	str	r0, [r3, #0]
	return 0;
    5a9e:	2000      	movs	r0, #0
    5aa0:	4770      	bx	lr
		return -EALREADY;
    5aa2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5aa6:	4770      	bx	lr
		return -EINVAL;
    5aa8:	f06f 0015 	mvn.w	r0, #21
}
    5aac:	4770      	bx	lr
    5aae:	bf00      	nop
    5ab0:	200016dc 	.word	0x200016dc

00005ab4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    5ab4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    5ab6:	490b      	ldr	r1, [pc, #44]	; (5ae4 <bt_conn_init+0x30>)
    5ab8:	480b      	ldr	r0, [pc, #44]	; (5ae8 <bt_conn_init+0x34>)
    5aba:	f018 feb9 	bl	1e830 <k_queue_append>
    5abe:	490b      	ldr	r1, [pc, #44]	; (5aec <bt_conn_init+0x38>)
    5ac0:	4809      	ldr	r0, [pc, #36]	; (5ae8 <bt_conn_init+0x34>)
    5ac2:	f018 feb5 	bl	1e830 <k_queue_append>
    5ac6:	490a      	ldr	r1, [pc, #40]	; (5af0 <bt_conn_init+0x3c>)
    5ac8:	4807      	ldr	r0, [pc, #28]	; (5ae8 <bt_conn_init+0x34>)
    5aca:	f018 feb1 	bl	1e830 <k_queue_append>
	}

	bt_att_init();
    5ace:	f001 f9c7 	bl	6e60 <bt_att_init>

	err = bt_smp_init();
    5ad2:	f002 ffe5 	bl	8aa0 <bt_smp_init>
	if (err) {
    5ad6:	4604      	mov	r4, r0
    5ad8:	b908      	cbnz	r0, 5ade <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    5ada:	f000 f9f5 	bl	5ec8 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    5ade:	4620      	mov	r0, r4
    5ae0:	bd10      	pop	{r4, pc}
    5ae2:	bf00      	nop
    5ae4:	200016ec 	.word	0x200016ec
    5ae8:	20000ad8 	.word	0x20000ad8
    5aec:	200016fc 	.word	0x200016fc
    5af0:	2000170c 	.word	0x2000170c

00005af4 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
    5af4:	4a04      	ldr	r2, [pc, #16]	; (5b08 <get_ident+0x14>)
    5af6:	7813      	ldrb	r3, [r2, #0]
    5af8:	3301      	adds	r3, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    5afa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    5afe:	bf08      	it	eq
    5b00:	2301      	moveq	r3, #1
    5b02:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    5b04:	7810      	ldrb	r0, [r2, #0]
    5b06:	4770      	bx	lr
    5b08:	20002991 	.word	0x20002991

00005b0c <l2cap_server_lookup_psm>:
	return list->head;
    5b0c:	4a06      	ldr	r2, [pc, #24]	; (5b28 <l2cap_server_lookup_psm+0x1c>)
	return NULL;
}

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(uint16_t psm)
{
    5b0e:	4603      	mov	r3, r0
    5b10:	6810      	ldr	r0, [r2, #0]
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    5b12:	b138      	cbz	r0, 5b24 <l2cap_server_lookup_psm+0x18>
		if (server->psm == psm) {
    5b14:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    5b18:	429a      	cmp	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    5b1a:	f1a0 0008 	sub.w	r0, r0, #8
		if (server->psm == psm) {
    5b1e:	d001      	beq.n	5b24 <l2cap_server_lookup_psm+0x18>
	return node->next;
    5b20:	6880      	ldr	r0, [r0, #8]
    5b22:	e7f6      	b.n	5b12 <l2cap_server_lookup_psm+0x6>
			return server;
		}
	}

	return NULL;
}
    5b24:	4770      	bx	lr
    5b26:	bf00      	nop
    5b28:	2000174c 	.word	0x2000174c

00005b2c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    5b2c:	4b04      	ldr	r3, [pc, #16]	; (5b40 <l2cap_accept+0x14>)
    5b2e:	6818      	ldr	r0, [r3, #0]
    5b30:	b918      	cbnz	r0, 5b3a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5b32:	4a04      	ldr	r2, [pc, #16]	; (5b44 <l2cap_accept+0x18>)
    5b34:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    5b36:	600b      	str	r3, [r1, #0]

		return 0;
    5b38:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    5b3a:	f06f 000b 	mvn.w	r0, #11
}
    5b3e:	4770      	bx	lr
    5b40:	20000de8 	.word	0x20000de8
    5b44:	0001f940 	.word	0x0001f940

00005b48 <l2cap_create_le_sig_pdu.constprop.0>:
		pool = &disc_pool;
    5b48:	2806      	cmp	r0, #6
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b4c:	4605      	mov	r5, r0
    5b4e:	460f      	mov	r7, r1
	return bt_conn_create_pdu_timeout(pool,
    5b50:	480b      	ldr	r0, [pc, #44]	; (5b80 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5b52:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    5b54:	f04f 0300 	mov.w	r3, #0
    5b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5b5c:	f04f 0104 	mov.w	r1, #4
    5b60:	bf18      	it	ne
    5b62:	2000      	movne	r0, #0
    5b64:	f7ff fd14 	bl	5590 <bt_conn_create_pdu_timeout>
	if (!buf) {
    5b68:	4604      	mov	r4, r0
    5b6a:	b130      	cbz	r0, 5b7a <l2cap_create_le_sig_pdu.constprop.0+0x32>
	return net_buf_simple_add(&buf->b, len);
    5b6c:	2104      	movs	r1, #4
    5b6e:	3008      	adds	r0, #8
    5b70:	f018 f9cb 	bl	1df0a <net_buf_simple_add>
	hdr->code = code;
    5b74:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    5b76:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5b78:	8046      	strh	r6, [r0, #2]
}
    5b7a:	4620      	mov	r0, r4
    5b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b7e:	bf00      	nop
    5b80:	20000b1c 	.word	0x20000b1c

00005b84 <l2cap_chan_tx_init>:
{
    5b84:	b510      	push	{r4, lr}
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    5b86:	220c      	movs	r2, #12
{
    5b88:	4604      	mov	r4, r0
	(void)memset(&chan->tx, 0, sizeof(chan->tx));
    5b8a:	2100      	movs	r1, #0
    5b8c:	3024      	adds	r0, #36	; 0x24
    5b8e:	f014 fe6b 	bl	1a868 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5b92:	f3bf 8f5b 	dmb	ish
    5b96:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    5b9a:	2200      	movs	r2, #0
    5b9c:	e853 1f00 	ldrex	r1, [r3]
    5ba0:	e843 2000 	strex	r0, r2, [r3]
    5ba4:	2800      	cmp	r0, #0
    5ba6:	d1f9      	bne.n	5b9c <l2cap_chan_tx_init+0x18>
    5ba8:	f3bf 8f5b 	dmb	ish
	z_impl_k_queue_init(queue);
    5bac:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5bb0:	f018 fe32 	bl	1e818 <z_impl_k_queue_init>
	k_work_init(&chan->tx_work, l2cap_chan_tx_process);
    5bb4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    5bb8:	4902      	ldr	r1, [pc, #8]	; (5bc4 <l2cap_chan_tx_init+0x40>)
}
    5bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init(&chan->tx_work, l2cap_chan_tx_process);
    5bbe:	f018 bf08 	b.w	1e9d2 <k_work_init>
    5bc2:	bf00      	nop
    5bc4:	0001bbfb 	.word	0x0001bbfb

00005bc8 <l2cap_chan_le_send>:
{
    5bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bcc:	4606      	mov	r6, r0
    5bce:	b085      	sub	sp, #20
    5bd0:	460d      	mov	r5, r1
    5bd2:	4617      	mov	r7, r2
	if (!test_and_dec(&ch->tx.credits)) {
    5bd4:	f100 082c 	add.w	r8, r0, #44	; 0x2c
		old_value = atomic_get(target);
    5bd8:	4640      	mov	r0, r8
    5bda:	f015 fec0 	bl	1b95e <atomic_get>
		if (!old_value) {
    5bde:	b3b0      	cbz	r0, 5c4e <l2cap_chan_le_send+0x86>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5be0:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
    5be4:	1e43      	subs	r3, r0, #1
    5be6:	e858 2f00 	ldrex	r2, [r8]
    5bea:	4282      	cmp	r2, r0
    5bec:	d103      	bne.n	5bf6 <l2cap_chan_le_send+0x2e>
    5bee:	e848 3100 	strex	r1, r3, [r8]
    5bf2:	2900      	cmp	r1, #0
    5bf4:	d1f7      	bne.n	5be6 <l2cap_chan_le_send+0x1e>
    5bf6:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
    5bfa:	d1ed      	bne.n	5bd8 <l2cap_chan_le_send+0x10>
	net_buf_simple_save(&buf->b, &state);
    5bfc:	f105 0908 	add.w	r9, r5, #8
	state->offset = net_buf_simple_headroom(buf);
    5c00:	4648      	mov	r0, r9
    5c02:	f018 f9d7 	bl	1dfb4 <net_buf_simple_headroom>
	state->len = buf->len;
    5c06:	f8b5 b00c 	ldrh.w	fp, [r5, #12]
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    5c0a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	state->offset = net_buf_simple_headroom(buf);
    5c0c:	9002      	str	r0, [sp, #8]
    5c0e:	eb0b 0207 	add.w	r2, fp, r7
    5c12:	429a      	cmp	r2, r3
    5c14:	d81e      	bhi.n	5c54 <l2cap_chan_le_send+0x8c>
 *
 * @return Number of bytes available in the beginning of the buffer.
 */
static inline size_t net_buf_headroom(struct net_buf *buf)
{
	return net_buf_simple_headroom(&buf->b);
    5c16:	4648      	mov	r0, r9
    5c18:	f018 f9cc 	bl	1dfb4 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    5c1c:	f107 0308 	add.w	r3, r7, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    5c20:	b29b      	uxth	r3, r3
    5c22:	4298      	cmp	r0, r3
    5c24:	d316      	bcc.n	5c54 <l2cap_chan_le_send+0x8c>
    5c26:	682b      	ldr	r3, [r5, #0]
    5c28:	b9a3      	cbnz	r3, 5c54 <l2cap_chan_le_send+0x8c>
		if (sdu_hdr_len) {
    5c2a:	b137      	cbz	r7, 5c3a <l2cap_chan_le_send+0x72>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    5c2c:	4628      	mov	r0, r5
    5c2e:	f015 fe54 	bl	1b8da <net_buf_frags_len>
	net_buf_simple_push_le16(&buf->b, val);
    5c32:	b281      	uxth	r1, r0
    5c34:	4648      	mov	r0, r9
    5c36:	f018 f991 	bl	1df5c <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    5c3a:	4628      	mov	r0, r5
    5c3c:	f018 f933 	bl	1dea6 <net_buf_ref>
	if (!seg) {
    5c40:	4604      	mov	r4, r0
    5c42:	2800      	cmp	r0, #0
    5c44:	d137      	bne.n	5cb6 <l2cap_chan_le_send+0xee>
	return atomic_add(target, 1);
    5c46:	2101      	movs	r1, #1
    5c48:	4640      	mov	r0, r8
    5c4a:	f015 fefa 	bl	1ba42 <atomic_add.isra.0>
		return -EAGAIN;
    5c4e:	f06f 090a 	mvn.w	r9, #10
    5c52:	e07b      	b.n	5d4c <l2cap_chan_le_send+0x184>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    5c54:	79a8      	ldrb	r0, [r5, #6]
    5c56:	f00f ff99 	bl	15b8c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    5c5a:	2200      	movs	r2, #0
    5c5c:	2300      	movs	r3, #0
    5c5e:	f018 f8f2 	bl	1de46 <net_buf_alloc_fixed>
	if (seg) {
    5c62:	4604      	mov	r4, r0
    5c64:	2800      	cmp	r0, #0
    5c66:	d04c      	beq.n	5d02 <l2cap_chan_le_send+0x13a>
	net_buf_simple_reserve(&buf->b, reserve);
    5c68:	2108      	movs	r1, #8
    5c6a:	4408      	add	r0, r1
    5c6c:	f018 f90a 	bl	1de84 <net_buf_simple_reserve>
	net_buf_simple_add_le16(&buf->b, val);
    5c70:	f104 0a08 	add.w	sl, r4, #8
	if (sdu_hdr_len) {
    5c74:	b137      	cbz	r7, 5c84 <l2cap_chan_le_send+0xbc>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    5c76:	4628      	mov	r0, r5
    5c78:	f015 fe2f 	bl	1b8da <net_buf_frags_len>
    5c7c:	b281      	uxth	r1, r0
    5c7e:	4650      	mov	r0, sl
    5c80:	f018 f95a 	bl	1df38 <net_buf_simple_add_le16>
	return net_buf_simple_tailroom(&buf->b);
    5c84:	4650      	mov	r0, sl
    5c86:	f018 f999 	bl	1dfbc <net_buf_simple_tailroom>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    5c8a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    5c8c:	1bd2      	subs	r2, r2, r7
    5c8e:	4290      	cmp	r0, r2
    5c90:	d240      	bcs.n	5d14 <l2cap_chan_le_send+0x14c>
    5c92:	4650      	mov	r0, sl
    5c94:	f018 f992 	bl	1dfbc <net_buf_simple_tailroom>
    5c98:	b282      	uxth	r2, r0
	len = MIN(buf->len, len);
    5c9a:	89a8      	ldrh	r0, [r5, #12]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5c9c:	68a9      	ldr	r1, [r5, #8]
	net_buf_add_mem(seg, buf->data, len);
    5c9e:	4282      	cmp	r2, r0
    5ca0:	bf28      	it	cs
    5ca2:	4602      	movcs	r2, r0
    5ca4:	4650      	mov	r0, sl
    5ca6:	9203      	str	r2, [sp, #12]
    5ca8:	f018 f935 	bl	1df16 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    5cac:	9a03      	ldr	r2, [sp, #12]
    5cae:	4648      	mov	r0, r9
    5cb0:	4611      	mov	r1, r2
    5cb2:	f018 f95f 	bl	1df74 <net_buf_simple_pull>
	len = seg->len - sdu_hdr_len;
    5cb6:	f8b4 900c 	ldrh.w	r9, [r4, #12]
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    5cba:	6830      	ldr	r0, [r6, #0]
    5cbc:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
				       l2cap_tx_meta_data(buf));
    5cbe:	696b      	ldr	r3, [r5, #20]
	if (buf == seg || !buf->len) {
    5cc0:	42a5      	cmp	r5, r4
	len = seg->len - sdu_hdr_len;
    5cc2:	eba9 0907 	sub.w	r9, r9, r7
	if (buf == seg || !buf->len) {
    5cc6:	d001      	beq.n	5ccc <l2cap_chan_le_send+0x104>
    5cc8:	89aa      	ldrh	r2, [r5, #12]
    5cca:	bb2a      	cbnz	r2, 5d18 <l2cap_chan_le_send+0x150>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    5ccc:	9300      	str	r3, [sp, #0]
    5cce:	4b22      	ldr	r3, [pc, #136]	; (5d58 <l2cap_chan_le_send+0x190>)
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    5cd0:	4622      	mov	r2, r4
    5cd2:	f015 ff38 	bl	1bb46 <bt_l2cap_send_cb>
    5cd6:	4607      	mov	r7, r0
	if (err) {
    5cd8:	b308      	cbz	r0, 5d1e <l2cap_chan_le_send+0x156>
    5cda:	2101      	movs	r1, #1
    5cdc:	4640      	mov	r0, r8
    5cde:	f015 feb0 	bl	1ba42 <atomic_add.isra.0>
		if (seg != buf) {
    5ce2:	42a5      	cmp	r5, r4
    5ce4:	d002      	beq.n	5cec <l2cap_chan_le_send+0x124>
			net_buf_unref(seg);
    5ce6:	4620      	mov	r0, r4
    5ce8:	f010 f814 	bl	15d14 <net_buf_unref>
		if (err == -ENOBUFS) {
    5cec:	f117 0f69 	cmn.w	r7, #105	; 0x69
    5cf0:	d130      	bne.n	5d54 <l2cap_chan_le_send+0x18c>
	buf->data = buf->__buf + state->offset;
    5cf2:	6928      	ldr	r0, [r5, #16]
    5cf4:	9b02      	ldr	r3, [sp, #8]
	buf->len = state->len;
    5cf6:	f8a5 b00c 	strh.w	fp, [r5, #12]
	buf->data = buf->__buf + state->offset;
    5cfa:	fa10 f083 	uxtah	r0, r0, r3
    5cfe:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
    5d00:	e7a5      	b.n	5c4e <l2cap_chan_le_send+0x86>
	return bt_conn_create_pdu_timeout(pool,
    5d02:	2200      	movs	r2, #0
    5d04:	2300      	movs	r3, #0
    5d06:	2104      	movs	r1, #4
    5d08:	f7ff fc42 	bl	5590 <bt_conn_create_pdu_timeout>
	if (!seg) {
    5d0c:	4604      	mov	r4, r0
    5d0e:	2800      	cmp	r0, #0
    5d10:	d1ae      	bne.n	5c70 <l2cap_chan_le_send+0xa8>
    5d12:	e798      	b.n	5c46 <l2cap_chan_le_send+0x7e>
	len = MIN(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    5d14:	b292      	uxth	r2, r2
    5d16:	e7c0      	b.n	5c9a <l2cap_chan_le_send+0xd2>
		err = bt_l2cap_send_cb(ch->chan.conn, ch->tx.cid, seg,
    5d18:	9300      	str	r3, [sp, #0]
    5d1a:	4b10      	ldr	r3, [pc, #64]	; (5d5c <l2cap_chan_le_send+0x194>)
    5d1c:	e7d8      	b.n	5cd0 <l2cap_chan_le_send+0x108>
	if (!atomic_get(&ch->tx.credits)) {
    5d1e:	4640      	mov	r0, r8
    5d20:	f015 fe1d 	bl	1b95e <atomic_get>
    5d24:	b990      	cbnz	r0, 5d4c <l2cap_chan_le_send+0x184>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5d26:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(ch->chan.status, BT_L2CAP_STATUS_OUT);
    5d2a:	f106 0110 	add.w	r1, r6, #16
    5d2e:	e851 3f00 	ldrex	r3, [r1]
    5d32:	f023 0301 	bic.w	r3, r3, #1
    5d36:	e841 3200 	strex	r2, r3, [r1]
    5d3a:	2a00      	cmp	r2, #0
    5d3c:	d1f7      	bne.n	5d2e <l2cap_chan_le_send+0x166>
    5d3e:	f3bf 8f5b 	dmb	ish
		if (ch->chan.ops->status) {
    5d42:	6873      	ldr	r3, [r6, #4]
    5d44:	699b      	ldr	r3, [r3, #24]
    5d46:	b10b      	cbz	r3, 5d4c <l2cap_chan_le_send+0x184>
			ch->chan.ops->status(&ch->chan, ch->chan.status);
    5d48:	4630      	mov	r0, r6
    5d4a:	4798      	blx	r3
}
    5d4c:	4648      	mov	r0, r9
    5d4e:	b005      	add	sp, #20
    5d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d54:	46b9      	mov	r9, r7
    5d56:	e7f9      	b.n	5d4c <l2cap_chan_le_send+0x184>
    5d58:	00005d61 	.word	0x00005d61
    5d5c:	0001be25 	.word	0x0001be25

00005d60 <l2cap_chan_sdu_sent>:
{
    5d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d64:	460c      	mov	r4, r1
	void *cb_user_data = data->user_data;
    5d66:	e9d1 6802 	ldrd	r6, r8, [r1, #8]
	uint16_t cid = data->cid;
    5d6a:	f8b1 9004 	ldrh.w	r9, [r1, #4]
{
    5d6e:	4617      	mov	r7, r2
	(void)memset(data, 0, sizeof(*data));
    5d70:	2100      	movs	r1, #0
{
    5d72:	4605      	mov	r5, r0
	(void)memset(data, 0, sizeof(*data));
    5d74:	2210      	movs	r2, #16
    5d76:	4620      	mov	r0, r4
    5d78:	f014 fd76 	bl	1a868 <memset>
	k_fifo_put(&free_l2cap_tx_meta_data, data);
    5d7c:	4811      	ldr	r0, [pc, #68]	; (5dc4 <l2cap_chan_sdu_sent+0x64>)
    5d7e:	4621      	mov	r1, r4
    5d80:	f018 fd56 	bl	1e830 <k_queue_append>
	if (err) {
    5d84:	b13f      	cbz	r7, 5d96 <l2cap_chan_sdu_sent+0x36>
		if (cb) {
    5d86:	b1d6      	cbz	r6, 5dbe <l2cap_chan_sdu_sent+0x5e>
			cb(conn, cb_user_data, err);
    5d88:	463a      	mov	r2, r7
    5d8a:	4641      	mov	r1, r8
    5d8c:	4628      	mov	r0, r5
    5d8e:	4633      	mov	r3, r6
}
    5d90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			cb(conn, cb_user_data, err);
    5d94:	4718      	bx	r3
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    5d96:	4649      	mov	r1, r9
    5d98:	4628      	mov	r0, r5
    5d9a:	f016 f839 	bl	1be10 <bt_l2cap_le_lookup_tx_cid>
    5d9e:	4604      	mov	r4, r0
	if (!chan) {
    5da0:	b168      	cbz	r0, 5dbe <l2cap_chan_sdu_sent+0x5e>
	if (chan->ops->sent) {
    5da2:	6843      	ldr	r3, [r0, #4]
    5da4:	695b      	ldr	r3, [r3, #20]
    5da6:	b103      	cbz	r3, 5daa <l2cap_chan_sdu_sent+0x4a>
		chan->ops->sent(chan);
    5da8:	4798      	blx	r3
	if (cb) {
    5daa:	b11e      	cbz	r6, 5db4 <l2cap_chan_sdu_sent+0x54>
		cb(conn, cb_user_data, 0);
    5dac:	2200      	movs	r2, #0
    5dae:	4641      	mov	r1, r8
    5db0:	4628      	mov	r0, r5
    5db2:	47b0      	blx	r6
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
    5db4:	4620      	mov	r0, r4
}
    5db6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
    5dba:	f015 bdd6 	b.w	1b96a <l2cap_chan_tx_resume>
}
    5dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dc2:	bf00      	nop
    5dc4:	20000ac0 	.word	0x20000ac0

00005dc8 <l2cap_chan_add>:
{
    5dc8:	b538      	push	{r3, r4, r5, lr}
	if (le_chan->rx.cid > 0) {
    5dca:	8a8b      	ldrh	r3, [r1, #20]
{
    5dcc:	4605      	mov	r5, r0
    5dce:	460c      	mov	r4, r1
	if (le_chan->rx.cid > 0) {
    5dd0:	b92b      	cbnz	r3, 5dde <l2cap_chan_add+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    5dd2:	2140      	movs	r1, #64	; 0x40
		if (!bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    5dd4:	4628      	mov	r0, r5
    5dd6:	f016 f830 	bl	1be3a <bt_l2cap_le_lookup_rx_cid>
    5dda:	bb70      	cbnz	r0, 5e3a <l2cap_chan_add+0x72>
			le_chan->rx.cid = cid;
    5ddc:	82a1      	strh	r1, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5dde:	f104 0310 	add.w	r3, r4, #16
    5de2:	2100      	movs	r1, #0
    5de4:	f3bf 8f5b 	dmb	ish
    5de8:	e853 0f00 	ldrex	r0, [r3]
    5dec:	e843 1c00 	strex	ip, r1, [r3]
    5df0:	f1bc 0f00 	cmp.w	ip, #0
    5df4:	d1f8      	bne.n	5de8 <l2cap_chan_add+0x20>
    5df6:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    5dfa:	60a1      	str	r1, [r4, #8]
	return list->tail;
    5dfc:	6d69      	ldr	r1, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    5dfe:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
    5e02:	bb01      	cbnz	r1, 5e46 <l2cap_chan_add+0x7e>
	list->head = node;
    5e04:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
	k_work_init_delayable(&le_chan->rtx_work, l2cap_rtx_timeout);
    5e08:	4911      	ldr	r1, [pc, #68]	; (5e50 <l2cap_chan_add+0x88>)
	chan->conn = conn;
    5e0a:	6025      	str	r5, [r4, #0]
	chan->destroy = destroy;
    5e0c:	60e2      	str	r2, [r4, #12]
	k_work_init_delayable(&le_chan->rtx_work, l2cap_rtx_timeout);
    5e0e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    5e12:	f018 fe1c 	bl	1ea4e <k_work_init_delayable>
	if (L2CAP_LE_CID_IS_DYN(le_chan->rx.cid)) {
    5e16:	8aa3      	ldrh	r3, [r4, #20]
    5e18:	3b40      	subs	r3, #64	; 0x40
    5e1a:	b29b      	uxth	r3, r3
    5e1c:	2b3f      	cmp	r3, #63	; 0x3f
    5e1e:	d815      	bhi.n	5e4c <l2cap_chan_add+0x84>
		k_work_init(&le_chan->rx_work, l2cap_rx_process);
    5e20:	490c      	ldr	r1, [pc, #48]	; (5e54 <l2cap_chan_add+0x8c>)
    5e22:	f104 0064 	add.w	r0, r4, #100	; 0x64
    5e26:	f018 fdd4 	bl	1e9d2 <k_work_init>
    5e2a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5e2e:	f018 fcf3 	bl	1e818 <z_impl_k_queue_init>
	BT_L2CAP_LE_CHAN(chan)->state = state;
    5e32:	2001      	movs	r0, #1
    5e34:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
}
    5e38:	e004      	b.n	5e44 <l2cap_chan_add+0x7c>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    5e3a:	3101      	adds	r1, #1
    5e3c:	b289      	uxth	r1, r1
    5e3e:	2980      	cmp	r1, #128	; 0x80
    5e40:	d1c8      	bne.n	5dd4 <l2cap_chan_add+0xc>
		return false;
    5e42:	2000      	movs	r0, #0
}
    5e44:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    5e46:	600b      	str	r3, [r1, #0]
	list->tail = node;
    5e48:	656b      	str	r3, [r5, #84]	; 0x54
}
    5e4a:	e7dd      	b.n	5e08 <l2cap_chan_add+0x40>
	return true;
    5e4c:	2001      	movs	r0, #1
    5e4e:	e7f9      	b.n	5e44 <l2cap_chan_add+0x7c>
    5e50:	0001baf3 	.word	0x0001baf3
    5e54:	0001bf83 	.word	0x0001bf83

00005e58 <bt_l2cap_connected>:
{
    5e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    5e5a:	4c19      	ldr	r4, [pc, #100]	; (5ec0 <bt_l2cap_connected+0x68>)
    5e5c:	4e19      	ldr	r6, [pc, #100]	; (5ec4 <bt_l2cap_connected+0x6c>)
{
    5e5e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    5e60:	42b4      	cmp	r4, r6
    5e62:	d301      	bcc.n	5e68 <bt_l2cap_connected+0x10>
}
    5e64:	b002      	add	sp, #8
    5e66:	bd70      	pop	{r4, r5, r6, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5e68:	6863      	ldr	r3, [r4, #4]
    5e6a:	a901      	add	r1, sp, #4
    5e6c:	4628      	mov	r0, r5
    5e6e:	4798      	blx	r3
    5e70:	2800      	cmp	r0, #0
    5e72:	db23      	blt.n	5ebc <bt_l2cap_connected+0x64>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    5e74:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    5e76:	8823      	ldrh	r3, [r4, #0]
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    5e78:	68a2      	ldr	r2, [r4, #8]
		le_chan->rx.cid = fchan->cid;
    5e7a:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
    5e7c:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    5e7e:	4628      	mov	r0, r5
    5e80:	f7ff ffa2 	bl	5dc8 <l2cap_chan_add>
    5e84:	2800      	cmp	r0, #0
    5e86:	d0ed      	beq.n	5e64 <bt_l2cap_connected+0xc>
		if (chan->ops->connected) {
    5e88:	9801      	ldr	r0, [sp, #4]
    5e8a:	6843      	ldr	r3, [r0, #4]
    5e8c:	681b      	ldr	r3, [r3, #0]
    5e8e:	b103      	cbz	r3, 5e92 <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
    5e90:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e92:	9b01      	ldr	r3, [sp, #4]
    5e94:	f3bf 8f5b 	dmb	ish
    5e98:	3310      	adds	r3, #16
    5e9a:	e853 2f00 	ldrex	r2, [r3]
    5e9e:	f042 0201 	orr.w	r2, r2, #1
    5ea2:	e843 2100 	strex	r1, r2, [r3]
    5ea6:	2900      	cmp	r1, #0
    5ea8:	d1f7      	bne.n	5e9a <bt_l2cap_connected+0x42>
    5eaa:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    5eae:	9801      	ldr	r0, [sp, #4]
    5eb0:	6843      	ldr	r3, [r0, #4]
    5eb2:	699b      	ldr	r3, [r3, #24]
    5eb4:	b113      	cbz	r3, 5ebc <bt_l2cap_connected+0x64>
			chan->ops->status(chan, chan->status);
    5eb6:	f100 0110 	add.w	r1, r0, #16
    5eba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    5ebc:	340c      	adds	r4, #12
    5ebe:	e7cf      	b.n	5e60 <bt_l2cap_connected+0x8>
    5ec0:	0001f310 	.word	0x0001f310
    5ec4:	0001f334 	.word	0x0001f334

00005ec8 <bt_l2cap_init>:

BT_L2CAP_CHANNEL_DEFINE(le_fixed_chan, BT_L2CAP_CID_LE_SIG, l2cap_accept, NULL);

void bt_l2cap_init(void)
{
    5ec8:	b538      	push	{r3, r4, r5, lr}
		bt_l2cap_br_init();
	}

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
    5eca:	4d09      	ldr	r5, [pc, #36]	; (5ef0 <bt_l2cap_init+0x28>)
    5ecc:	4c09      	ldr	r4, [pc, #36]	; (5ef4 <bt_l2cap_init+0x2c>)
    5ece:	4629      	mov	r1, r5
    5ed0:	4620      	mov	r0, r4
    5ed2:	f018 fcad 	bl	1e830 <k_queue_append>
    5ed6:	f105 0110 	add.w	r1, r5, #16
    5eda:	4620      	mov	r0, r4
    5edc:	f018 fca8 	bl	1e830 <k_queue_append>
    5ee0:	f105 0120 	add.w	r1, r5, #32
    5ee4:	4620      	mov	r0, r4
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
    5ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
    5eea:	f018 bca1 	b.w	1e830 <k_queue_append>
    5eee:	bf00      	nop
    5ef0:	2000171c 	.word	0x2000171c
    5ef4:	20000ac0 	.word	0x20000ac0

00005ef8 <l2cap_chan_le_recv_seg>:
{
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	460d      	mov	r5, r1
	len = net_buf_frags_len(chan->_sdu);
    5efc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
{
    5efe:	b086      	sub	sp, #24
	uint16_t seg = 0U;
    5f00:	2300      	movs	r3, #0
{
    5f02:	4604      	mov	r4, r0
	len = net_buf_frags_len(chan->_sdu);
    5f04:	4608      	mov	r0, r1
	uint16_t seg = 0U;
    5f06:	f8ad 3016 	strh.w	r3, [sp, #22]
	len = net_buf_frags_len(chan->_sdu);
    5f0a:	f015 fce6 	bl	1b8da <net_buf_frags_len>
	if (len) {
    5f0e:	b283      	uxth	r3, r0
	len = net_buf_frags_len(chan->_sdu);
    5f10:	4606      	mov	r6, r0
	if (len) {
    5f12:	b12b      	cbz	r3, 5f20 <l2cap_chan_le_recv_seg+0x28>
		memcpy(&seg, net_buf_user_data(chan->_sdu), sizeof(seg));
    5f14:	2202      	movs	r2, #2
    5f16:	3114      	adds	r1, #20
    5f18:	f10d 0016 	add.w	r0, sp, #22
    5f1c:	f014 fc99 	bl	1a852 <memcpy>
	if (len + buf->len > chan->_sdu_len) {
    5f20:	89a8      	ldrh	r0, [r5, #12]
    5f22:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    5f26:	fa10 f686 	uxtah	r6, r0, r6
    5f2a:	429e      	cmp	r6, r3
    5f2c:	dd04      	ble.n	5f38 <l2cap_chan_le_recv_seg+0x40>
		bt_l2cap_chan_disconnect(&chan->chan);
    5f2e:	4620      	mov	r0, r4
    5f30:	f015 ffb7 	bl	1bea2 <bt_l2cap_chan_disconnect>
}
    5f34:	b006      	add	sp, #24
    5f36:	bd70      	pop	{r4, r5, r6, pc}
	seg++;
    5f38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	return (void *)buf->user_data;
    5f3c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    5f3e:	3301      	adds	r3, #1
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    5f40:	2202      	movs	r2, #2
    5f42:	f10d 0116 	add.w	r1, sp, #22
    5f46:	3014      	adds	r0, #20
	seg++;
    5f48:	f8ad 3016 	strh.w	r3, [sp, #22]
	memcpy(net_buf_user_data(chan->_sdu), &seg, sizeof(seg));
    5f4c:	f014 fc81 	bl	1a852 <memcpy>
	len = net_buf_append_bytes(chan->_sdu, buf->len, buf->data, K_NO_WAIT,
    5f50:	4b2d      	ldr	r3, [pc, #180]	; (6008 <l2cap_chan_le_recv_seg+0x110>)
    5f52:	9302      	str	r3, [sp, #8]
    5f54:	2200      	movs	r2, #0
    5f56:	2300      	movs	r3, #0
    5f58:	e9cd 2300 	strd	r2, r3, [sp]
    5f5c:	9403      	str	r4, [sp, #12]
    5f5e:	68aa      	ldr	r2, [r5, #8]
    5f60:	89a9      	ldrh	r1, [r5, #12]
    5f62:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    5f64:	f00f ff08 	bl	15d78 <net_buf_append_bytes>
	if (len != buf->len) {
    5f68:	89ab      	ldrh	r3, [r5, #12]
    5f6a:	b280      	uxth	r0, r0
    5f6c:	4283      	cmp	r3, r0
    5f6e:	d1de      	bne.n	5f2e <l2cap_chan_le_recv_seg+0x36>
	if (net_buf_frags_len(chan->_sdu) < chan->_sdu_len) {
    5f70:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    5f72:	4630      	mov	r0, r6
    5f74:	f015 fcb1 	bl	1b8da <net_buf_frags_len>
    5f78:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    5f7c:	4298      	cmp	r0, r3
    5f7e:	d223      	bcs.n	5fc8 <l2cap_chan_le_recv_seg+0xd0>
		if (!atomic_get(&chan->rx.credits) &&
    5f80:	f104 031c 	add.w	r3, r4, #28
    5f84:	4618      	mov	r0, r3
    5f86:	f015 fcea 	bl	1b95e <atomic_get>
    5f8a:	2800      	cmp	r0, #0
    5f8c:	d1d2      	bne.n	5f34 <l2cap_chan_le_recv_seg+0x3c>
    5f8e:	8b61      	ldrh	r1, [r4, #26]
    5f90:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5f94:	4291      	cmp	r1, r2
    5f96:	d1cd      	bne.n	5f34 <l2cap_chan_le_recv_seg+0x3c>
	atomic_val_t old_credits = atomic_get(&chan->rx.credits);
    5f98:	4618      	mov	r0, r3
    5f9a:	f015 fce0 	bl	1b95e <atomic_get>
    5f9e:	4606      	mov	r6, r0
	credits = ((chan->_sdu_len - net_buf_frags_len(buf)) +
    5fa0:	4628      	mov	r0, r5
    5fa2:	f015 fc9a 	bl	1b8da <net_buf_frags_len>
    5fa6:	8b21      	ldrh	r1, [r4, #24]
    5fa8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    5fac:	440b      	add	r3, r1
    5fae:	3b01      	subs	r3, #1
    5fb0:	1a1b      	subs	r3, r3, r0
		   (chan->rx.mps - 1)) / chan->rx.mps;
    5fb2:	fbb3 f1f1 	udiv	r1, r3, r1
	if (credits < old_credits) {
    5fb6:	b28b      	uxth	r3, r1
    5fb8:	429e      	cmp	r6, r3
    5fba:	dcbb      	bgt.n	5f34 <l2cap_chan_le_recv_seg+0x3c>
	credits -= old_credits;
    5fbc:	1b89      	subs	r1, r1, r6
	l2cap_chan_send_credits(chan, buf, credits);
    5fbe:	b289      	uxth	r1, r1
    5fc0:	4620      	mov	r0, r4
    5fc2:	f015 fe51 	bl	1bc68 <l2cap_chan_send_credits.isra.0>
    5fc6:	e7b5      	b.n	5f34 <l2cap_chan_le_recv_seg+0x3c>
	chan->_sdu = NULL;
    5fc8:	2300      	movs	r3, #0
    5fca:	65e3      	str	r3, [r4, #92]	; 0x5c
	chan->_sdu_len = 0U;
    5fcc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	err = chan->chan.ops->recv(&chan->chan, buf);
    5fd0:	6863      	ldr	r3, [r4, #4]
	l2cap_chan_le_recv_sdu(chan, buf, seg);
    5fd2:	f8bd 5016 	ldrh.w	r5, [sp, #22]
	err = chan->chan.ops->recv(&chan->chan, buf);
    5fd6:	691b      	ldr	r3, [r3, #16]
    5fd8:	4631      	mov	r1, r6
    5fda:	4620      	mov	r0, r4
    5fdc:	4798      	blx	r3
	if (err < 0) {
    5fde:	2800      	cmp	r0, #0
    5fe0:	da08      	bge.n	5ff4 <l2cap_chan_le_recv_seg+0xfc>
		if (err != -EINPROGRESS) {
    5fe2:	3077      	adds	r0, #119	; 0x77
    5fe4:	d0a6      	beq.n	5f34 <l2cap_chan_le_recv_seg+0x3c>
			bt_l2cap_chan_disconnect(&chan->chan);
    5fe6:	4620      	mov	r0, r4
    5fe8:	f015 ff5b 	bl	1bea2 <bt_l2cap_chan_disconnect>
	net_buf_unref(buf);
    5fec:	4630      	mov	r0, r6
    5fee:	f00f fe91 	bl	15d14 <net_buf_unref>
    5ff2:	e79f      	b.n	5f34 <l2cap_chan_le_recv_seg+0x3c>
	if (bt_l2cap_chan_get_state(&chan->chan) == BT_L2CAP_CONNECTED) {
    5ff4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    5ff8:	2b03      	cmp	r3, #3
    5ffa:	d1f7      	bne.n	5fec <l2cap_chan_le_recv_seg+0xf4>
		l2cap_chan_send_credits(chan, buf, seg);
    5ffc:	4629      	mov	r1, r5
    5ffe:	4620      	mov	r0, r4
    6000:	f015 fe32 	bl	1bc68 <l2cap_chan_send_credits.isra.0>
    6004:	e7f2      	b.n	5fec <l2cap_chan_le_recv_seg+0xf4>
    6006:	bf00      	nop
    6008:	0001b955 	.word	0x0001b955

0000600c <l2cap_recv>:
{
    600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    6010:	898b      	ldrh	r3, [r1, #12]
    6012:	2b03      	cmp	r3, #3
{
    6014:	b085      	sub	sp, #20
    6016:	4606      	mov	r6, r0
    6018:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    601a:	f240 812e 	bls.w	627a <l2cap_recv+0x26e>
	return net_buf_simple_pull_mem(&buf->b, len);
    601e:	2104      	movs	r1, #4
    6020:	f105 0008 	add.w	r0, r5, #8
    6024:	f017 ffae 	bl	1df84 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    6028:	89ab      	ldrh	r3, [r5, #12]
    602a:	8842      	ldrh	r2, [r0, #2]
    602c:	429a      	cmp	r2, r3
    602e:	f040 8124 	bne.w	627a <l2cap_recv+0x26e>
	if (!hdr->ident) {
    6032:	7844      	ldrb	r4, [r0, #1]
    6034:	2c00      	cmp	r4, #0
    6036:	f000 8120 	beq.w	627a <l2cap_recv+0x26e>
	switch (hdr->code) {
    603a:	7802      	ldrb	r2, [r0, #0]
    603c:	2a01      	cmp	r2, #1
    603e:	f000 81c5 	beq.w	63cc <l2cap_recv+0x3c0>
    6042:	3a06      	subs	r2, #6
    6044:	b2d1      	uxtb	r1, r2
    6046:	2910      	cmp	r1, #16
    6048:	f200 81c5 	bhi.w	63d6 <l2cap_recv+0x3ca>
    604c:	2a10      	cmp	r2, #16
    604e:	f200 81c2 	bhi.w	63d6 <l2cap_recv+0x3ca>
    6052:	e8df f012 	tbh	[pc, r2, lsl #1]
    6056:	014d      	.short	0x014d
    6058:	01c00192 	.word	0x01c00192
    605c:	01c001c0 	.word	0x01c001c0
    6060:	01c001c0 	.word	0x01c001c0
    6064:	01c001c0 	.word	0x01c001c0
    6068:	01c001c0 	.word	0x01c001c0
    606c:	01c001c0 	.word	0x01c001c0
    6070:	00110112 	.word	0x00110112
    6074:	019d00d7 	.word	0x019d00d7
	if (buf->len < sizeof(*req)) {
    6078:	2b09      	cmp	r3, #9
    607a:	f240 80fe 	bls.w	627a <l2cap_recv+0x26e>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    607e:	68ab      	ldr	r3, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    6080:	889a      	ldrh	r2, [r3, #4]
    6082:	9200      	str	r2, [sp, #0]
    6084:	f8bd 2000 	ldrh.w	r2, [sp]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    6088:	2a16      	cmp	r2, #22
    608a:	f240 80f6 	bls.w	627a <l2cap_recv+0x26e>
	mps = sys_le16_to_cpu(req->mps);
    608e:	f8b3 8006 	ldrh.w	r8, [r3, #6]
    6092:	fa1f f288 	uxth.w	r2, r8
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    6096:	2a16      	cmp	r2, #22
    6098:	f240 80ef 	bls.w	627a <l2cap_recv+0x26e>
	credits = sys_le16_to_cpu(req->credits);
    609c:	f8b3 b008 	ldrh.w	fp, [r3, #8]
	scid = sys_le16_to_cpu(req->scid);
    60a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    60a4:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    60a6:	881e      	ldrh	r6, [r3, #0]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    60a8:	220a      	movs	r2, #10
	credits = sys_le16_to_cpu(req->credits);
    60aa:	fa1f f38b 	uxth.w	r3, fp
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    60ae:	4621      	mov	r1, r4
    60b0:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    60b2:	9301      	str	r3, [sp, #4]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    60b4:	f7ff fd48 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	scid = sys_le16_to_cpu(req->scid);
    60b8:	fa1f fa89 	uxth.w	sl, r9
	if (!buf) {
    60bc:	4607      	mov	r7, r0
    60be:	2800      	cmp	r0, #0
    60c0:	f000 80db 	beq.w	627a <l2cap_recv+0x26e>
	return net_buf_simple_add(&buf->b, len);
    60c4:	210a      	movs	r1, #10
    60c6:	3008      	adds	r0, #8
    60c8:	f017 ff1f 	bl	1df0a <net_buf_simple_add>
	(void)memset(rsp, 0, sizeof(*rsp));
    60cc:	220a      	movs	r2, #10
    60ce:	2100      	movs	r1, #0
    60d0:	4604      	mov	r4, r0
    60d2:	f014 fbc9 	bl	1a868 <memset>
	server = l2cap_server_lookup_psm(psm);
    60d6:	4630      	mov	r0, r6
    60d8:	f7ff fd18 	bl	5b0c <l2cap_server_lookup_psm>
	if (!server) {
    60dc:	4606      	mov	r6, r0
    60de:	b928      	cbnz	r0, 60ec <l2cap_recv+0xe0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_LE_ERR_PSM_NOT_SUPP);
    60e0:	2302      	movs	r3, #2
    60e2:	7223      	strb	r3, [r4, #8]
    60e4:	7260      	strb	r0, [r4, #9]
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    60e6:	4639      	mov	r1, r7
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    60e8:	4628      	mov	r0, r5
    60ea:	e12f      	b.n	634c <l2cap_recv+0x340>
	const struct bt_keys *keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    60ec:	7a28      	ldrb	r0, [r5, #8]
    60ee:	f105 0188 	add.w	r1, r5, #136	; 0x88
    60f2:	f002 fd6f 	bl	8bd4 <bt_keys_find_addr>
	if (conn->sec_level >= server->sec_level) {
    60f6:	7a6b      	ldrb	r3, [r5, #9]
    60f8:	78b2      	ldrb	r2, [r6, #2]
    60fa:	429a      	cmp	r2, r3
    60fc:	d805      	bhi.n	610a <l2cap_recv+0xfe>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    60fe:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    6102:	2b3f      	cmp	r3, #63	; 0x3f
    6104:	d913      	bls.n	612e <l2cap_recv+0x122>
		return BT_L2CAP_LE_ERR_INVALID_SCID;
    6106:	2309      	movs	r3, #9
    6108:	e00a      	b.n	6120 <l2cap_recv+0x114>
	if (conn->sec_level > BT_SECURITY_L1) {
    610a:	2b01      	cmp	r3, #1
    610c:	d80d      	bhi.n	612a <l2cap_recv+0x11e>
	if (keys) {
    610e:	b160      	cbz	r0, 612a <l2cap_recv+0x11e>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
    6110:	78ea      	ldrb	r2, [r5, #3]
			ltk_present = keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
    6112:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
    6114:	b932      	cbnz	r2, 6124 <l2cap_recv+0x118>
		return BT_L2CAP_LE_ERR_ENCRYPTION;
    6116:	f013 0f21 	tst.w	r3, #33	; 0x21
    611a:	bf0c      	ite	eq
    611c:	2305      	moveq	r3, #5
    611e:	2308      	movne	r3, #8
		rsp->result = sys_cpu_to_le16(result);
    6120:	8123      	strh	r3, [r4, #8]
		goto rsp;
    6122:	e7e0      	b.n	60e6 <l2cap_recv+0xda>
		return BT_L2CAP_LE_ERR_ENCRYPTION;
    6124:	f013 0f24 	tst.w	r3, #36	; 0x24
    6128:	e7f7      	b.n	611a <l2cap_recv+0x10e>
	return BT_L2CAP_LE_ERR_AUTHENTICATION;
    612a:	2305      	movs	r3, #5
		rsp->result = sys_cpu_to_le16(result);
    612c:	e7f8      	b.n	6120 <l2cap_recv+0x114>
	*chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    612e:	4651      	mov	r1, sl
    6130:	4628      	mov	r0, r5
    6132:	f015 fe6d 	bl	1be10 <bt_l2cap_le_lookup_tx_cid>
    6136:	9003      	str	r0, [sp, #12]
	if (*chan) {
    6138:	2800      	cmp	r0, #0
    613a:	d15b      	bne.n	61f4 <l2cap_recv+0x1e8>
	err = server->accept(conn, chan);
    613c:	6873      	ldr	r3, [r6, #4]
    613e:	a903      	add	r1, sp, #12
    6140:	4628      	mov	r0, r5
    6142:	4798      	blx	r3
	if (err < 0) {
    6144:	2800      	cmp	r0, #0
    6146:	da12      	bge.n	616e <l2cap_recv+0x162>
	switch (err) {
    6148:	f110 0f0c 	cmn.w	r0, #12
    614c:	d058      	beq.n	6200 <l2cap_recv+0x1f4>
    614e:	f110 0f0b 	cmn.w	r0, #11
    6152:	da07      	bge.n	6164 <l2cap_recv+0x158>
    6154:	f110 0f86 	cmn.w	r0, #134	; 0x86
    6158:	d04e      	beq.n	61f8 <l2cap_recv+0x1ec>
		return BT_L2CAP_LE_ERR_AUTHORIZATION;
    615a:	300d      	adds	r0, #13
    615c:	bf14      	ite	ne
    615e:	230b      	movne	r3, #11
    6160:	2306      	moveq	r3, #6
    6162:	e7dd      	b.n	6120 <l2cap_recv+0x114>
	switch (err) {
    6164:	3001      	adds	r0, #1
    6166:	bf14      	ite	ne
    6168:	230b      	movne	r3, #11
    616a:	2307      	moveq	r3, #7
    616c:	e7d8      	b.n	6120 <l2cap_recv+0x114>
	if (!(*chan)->ops->recv) {
    616e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    6172:	f8da 3004 	ldr.w	r3, [sl, #4]
    6176:	691b      	ldr	r3, [r3, #16]
    6178:	2b00      	cmp	r3, #0
    617a:	d03f      	beq.n	61fc <l2cap_recv+0x1f0>
	le_chan->required_sec_level = server->sec_level;
    617c:	78b3      	ldrb	r3, [r6, #2]
	if (!l2cap_chan_add(conn, *chan, l2cap_chan_destroy)) {
    617e:	4a9f      	ldr	r2, [pc, #636]	; (63fc <l2cap_recv+0x3f0>)
	le_chan->required_sec_level = server->sec_level;
    6180:	f88a 3091 	strb.w	r3, [sl, #145]	; 0x91
	if (!l2cap_chan_add(conn, *chan, l2cap_chan_destroy)) {
    6184:	4651      	mov	r1, sl
    6186:	4628      	mov	r0, r5
    6188:	f7ff fe1e 	bl	5dc8 <l2cap_chan_add>
    618c:	2800      	cmp	r0, #0
    618e:	d037      	beq.n	6200 <l2cap_recv+0x1f4>
	l2cap_chan_tx_init(le_chan);
    6190:	4650      	mov	r0, sl
    6192:	f7ff fcf7 	bl	5b84 <l2cap_chan_tx_init>
	le_chan->tx.mtu = mtu;
    6196:	f8bd 3000 	ldrh.w	r3, [sp]
    619a:	f8aa 3026 	strh.w	r3, [sl, #38]	; 0x26
	l2cap_chan_tx_give_credits(le_chan, credits);
    619e:	9901      	ldr	r1, [sp, #4]
	le_chan->tx.cid = scid;
    61a0:	f8aa 9024 	strh.w	r9, [sl, #36]	; 0x24
	l2cap_chan_tx_give_credits(le_chan, credits);
    61a4:	4650      	mov	r0, sl
	le_chan->tx.mps = mps;
    61a6:	f8aa 8028 	strh.w	r8, [sl, #40]	; 0x28
	le_chan->tx.init_credits = credits;
    61aa:	f8aa b02a 	strh.w	fp, [sl, #42]	; 0x2a
	l2cap_chan_tx_give_credits(le_chan, credits);
    61ae:	f015 fc54 	bl	1ba5a <l2cap_chan_tx_give_credits>
	l2cap_chan_rx_init(le_chan);
    61b2:	4650      	mov	r0, sl
    61b4:	f015 fc19 	bl	1b9ea <l2cap_chan_rx_init>
	atomic_add(&chan->rx.credits, credits);
    61b8:	f10a 001c 	add.w	r0, sl, #28
    61bc:	f8ba 101a 	ldrh.w	r1, [sl, #26]
    61c0:	f015 fc3f 	bl	1ba42 <atomic_add.isra.0>
	le_chan->psm = server->psm;
    61c4:	8833      	ldrh	r3, [r6, #0]
	bt_l2cap_chan_set_state(*chan, BT_L2CAP_CONNECTED);
    61c6:	9803      	ldr	r0, [sp, #12]
	le_chan->psm = server->psm;
    61c8:	f8aa 308e 	strh.w	r3, [sl, #142]	; 0x8e
	BT_L2CAP_LE_CHAN(chan)->state = state;
    61cc:	2303      	movs	r3, #3
    61ce:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
	if ((*chan)->ops->connected) {
    61d2:	6843      	ldr	r3, [r0, #4]
    61d4:	681b      	ldr	r3, [r3, #0]
    61d6:	b103      	cbz	r3, 61da <l2cap_recv+0x1ce>
		(*chan)->ops->connected(*chan);
    61d8:	4798      	blx	r3
	le_chan = BT_L2CAP_LE_CHAN(chan);
    61da:	9b03      	ldr	r3, [sp, #12]
	rsp->dcid = sys_cpu_to_le16(le_chan->rx.cid);
    61dc:	8a9a      	ldrh	r2, [r3, #20]
    61de:	8022      	strh	r2, [r4, #0]
	rsp->mps = sys_cpu_to_le16(le_chan->rx.mps);
    61e0:	8b1a      	ldrh	r2, [r3, #24]
    61e2:	80a2      	strh	r2, [r4, #4]
	rsp->mtu = sys_cpu_to_le16(le_chan->rx.mtu);
    61e4:	8ada      	ldrh	r2, [r3, #22]
	rsp->credits = sys_cpu_to_le16(le_chan->rx.init_credits);
    61e6:	8b5b      	ldrh	r3, [r3, #26]
    61e8:	80e3      	strh	r3, [r4, #6]
	rsp->result = BT_L2CAP_LE_SUCCESS;
    61ea:	2300      	movs	r3, #0
	rsp->mtu = sys_cpu_to_le16(le_chan->rx.mtu);
    61ec:	8062      	strh	r2, [r4, #2]
	rsp->result = BT_L2CAP_LE_SUCCESS;
    61ee:	7223      	strb	r3, [r4, #8]
    61f0:	7263      	strb	r3, [r4, #9]
    61f2:	e778      	b.n	60e6 <l2cap_recv+0xda>
		return BT_L2CAP_LE_ERR_SCID_IN_USE;
    61f4:	230a      	movs	r3, #10
    61f6:	e793      	b.n	6120 <l2cap_recv+0x114>
		return BT_L2CAP_LE_ERR_PSM_NOT_SUPP;
    61f8:	2302      	movs	r3, #2
    61fa:	e791      	b.n	6120 <l2cap_recv+0x114>
		return BT_L2CAP_LE_ERR_UNACCEPT_PARAMS;
    61fc:	230b      	movs	r3, #11
    61fe:	e78f      	b.n	6120 <l2cap_recv+0x114>
		return BT_L2CAP_LE_ERR_NO_RESOURCES;
    6200:	2304      	movs	r3, #4
    6202:	e78d      	b.n	6120 <l2cap_recv+0x114>
	if (buf->len < sizeof(*rsp)) {
    6204:	2b09      	cmp	r3, #9
    6206:	d938      	bls.n	627a <l2cap_recv+0x26e>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    6208:	68ab      	ldr	r3, [r5, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    620a:	6837      	ldr	r7, [r6, #0]
	result = sys_le16_to_cpu(rsp->result);
    620c:	891d      	ldrh	r5, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    620e:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    6212:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    6216:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    621a:	88de      	ldrh	r6, [r3, #6]
	if (result == BT_L2CAP_LE_SUCCESS ||
    621c:	f025 0308 	bic.w	r3, r5, #8
		chan = l2cap_remove_ident(conn, ident);
    6220:	b2a1      	uxth	r1, r4
	if (result == BT_L2CAP_LE_SUCCESS ||
    6222:	b10b      	cbz	r3, 6228 <l2cap_recv+0x21c>
    6224:	2d05      	cmp	r5, #5
    6226:	d12c      	bne.n	6282 <l2cap_recv+0x276>
		chan = l2cap_lookup_ident(conn, ident);
    6228:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    622a:	4638      	mov	r0, r7
    622c:	f015 fb5d 	bl	1b8ea <__l2cap_lookup_ident>
    6230:	4604      	mov	r4, r0
	if (!chan) {
    6232:	b310      	cbz	r0, 627a <l2cap_recv+0x26e>
	k_work_cancel_delayable(&chan->rtx_work);
    6234:	3098      	adds	r0, #152	; 0x98
    6236:	f018 fc18 	bl	1ea6a <k_work_cancel_delayable>
	chan->ident = 0U;
    623a:	2300      	movs	r3, #0
	switch (result) {
    623c:	2d05      	cmp	r5, #5
	chan->ident = 0U;
    623e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
	switch (result) {
    6242:	d020      	beq.n	6286 <l2cap_recv+0x27a>
    6244:	2d08      	cmp	r5, #8
    6246:	d01e      	beq.n	6286 <l2cap_recv+0x27a>
    6248:	2d00      	cmp	r5, #0
    624a:	d14d      	bne.n	62e8 <l2cap_recv+0x2dc>
	BT_L2CAP_LE_CHAN(chan)->state = state;
    624c:	2303      	movs	r3, #3
    624e:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		if (chan->chan.ops->connected) {
    6252:	6863      	ldr	r3, [r4, #4]
		chan->tx.cid = dcid;
    6254:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		if (chan->chan.ops->connected) {
    6258:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    625a:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
		chan->tx.mps = mps;
    625e:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
		if (chan->chan.ops->connected) {
    6262:	b10b      	cbz	r3, 6268 <l2cap_recv+0x25c>
			chan->chan.ops->connected(&chan->chan);
    6264:	4620      	mov	r0, r4
    6266:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    6268:	4631      	mov	r1, r6
    626a:	4620      	mov	r0, r4
    626c:	f015 fbf5 	bl	1ba5a <l2cap_chan_tx_give_credits>
	atomic_add(&chan->rx.credits, credits);
    6270:	8b61      	ldrh	r1, [r4, #26]
    6272:	f104 001c 	add.w	r0, r4, #28
    6276:	f015 fbe4 	bl	1ba42 <atomic_add.isra.0>
}
    627a:	2000      	movs	r0, #0
    627c:	b005      	add	sp, #20
    627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		chan = l2cap_remove_ident(conn, ident);
    6282:	2201      	movs	r2, #1
    6284:	e7d1      	b.n	622a <l2cap_recv+0x21e>
	struct bt_conn *conn = chan->chan.conn;
    6286:	4626      	mov	r6, r4
    6288:	f856 3b10 	ldr.w	r3, [r6], #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    628c:	4630      	mov	r0, r6
    628e:	f015 fb66 	bl	1b95e <atomic_get>
	if (atomic_test_bit(chan->chan.status,
    6292:	0742      	lsls	r2, r0, #29
    6294:	d424      	bmi.n	62e0 <l2cap_recv+0x2d4>
	switch (err) {
    6296:	2d05      	cmp	r5, #5
    6298:	d006      	beq.n	62a8 <l2cap_recv+0x29c>
    629a:	2d08      	cmp	r5, #8
    629c:	d120      	bne.n	62e0 <l2cap_recv+0x2d4>
		if (conn->sec_level >= BT_SECURITY_L2) {
    629e:	7a5b      	ldrb	r3, [r3, #9]
    62a0:	2b01      	cmp	r3, #1
    62a2:	d81d      	bhi.n	62e0 <l2cap_recv+0x2d4>
		sec = BT_SECURITY_L2;
    62a4:	2102      	movs	r1, #2
    62a6:	e007      	b.n	62b8 <l2cap_recv+0x2ac>
		if (conn->sec_level < BT_SECURITY_L2) {
    62a8:	7a5b      	ldrb	r3, [r3, #9]
    62aa:	2b01      	cmp	r3, #1
    62ac:	d9fa      	bls.n	62a4 <l2cap_recv+0x298>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    62ae:	2b02      	cmp	r3, #2
    62b0:	d014      	beq.n	62dc <l2cap_recv+0x2d0>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    62b2:	2b03      	cmp	r3, #3
    62b4:	d114      	bne.n	62e0 <l2cap_recv+0x2d4>
			sec = BT_SECURITY_L4;
    62b6:	2104      	movs	r1, #4
	ret = bt_conn_set_security(chan->chan.conn, sec);
    62b8:	6820      	ldr	r0, [r4, #0]
    62ba:	f015 fa7a 	bl	1b7b2 <bt_conn_set_security>
	if (ret < 0) {
    62be:	2800      	cmp	r0, #0
    62c0:	db0e      	blt.n	62e0 <l2cap_recv+0x2d4>
    62c2:	f3bf 8f5b 	dmb	ish
    62c6:	e856 3f00 	ldrex	r3, [r6]
    62ca:	f043 0304 	orr.w	r3, r3, #4
    62ce:	e846 3200 	strex	r2, r3, [r6]
    62d2:	2a00      	cmp	r2, #0
    62d4:	d1f7      	bne.n	62c6 <l2cap_recv+0x2ba>
    62d6:	f3bf 8f5b 	dmb	ish
    62da:	e7ce      	b.n	627a <l2cap_recv+0x26e>
			sec = BT_SECURITY_L3;
    62dc:	2103      	movs	r1, #3
    62de:	e7eb      	b.n	62b8 <l2cap_recv+0x2ac>
		bt_l2cap_chan_remove(conn, &chan->chan);
    62e0:	4621      	mov	r1, r4
    62e2:	4638      	mov	r0, r7
    62e4:	f015 fbd6 	bl	1ba94 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    62e8:	4620      	mov	r0, r4
	bt_l2cap_chan_del(&chan->chan);
    62ea:	f015 fbe8 	bl	1babe <bt_l2cap_chan_del>
    62ee:	e7c4      	b.n	627a <l2cap_recv+0x26e>
	if (buf->len < sizeof(*req)) {
    62f0:	2b03      	cmp	r3, #3
    62f2:	d9c2      	bls.n	627a <l2cap_recv+0x26e>
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    62f4:	68af      	ldr	r7, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, dcid);
    62f6:	6836      	ldr	r6, [r6, #0]
    62f8:	8839      	ldrh	r1, [r7, #0]
    62fa:	4630      	mov	r0, r6
    62fc:	f015 fb0e 	bl	1b91c <l2cap_remove_rx_cid>
	if (!chan) {
    6300:	4605      	mov	r5, r0
    6302:	bb30      	cbnz	r0, 6352 <l2cap_recv+0x346>
		data.scid = req->scid;
    6304:	78fa      	ldrb	r2, [r7, #3]
    6306:	78bb      	ldrb	r3, [r7, #2]
    6308:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    630c:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    6310:	787a      	ldrb	r2, [r7, #1]
    6312:	783b      	ldrb	r3, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6314:	4621      	mov	r1, r4
		data.dcid = req->dcid;
    6316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    631a:	2001      	movs	r0, #1
    631c:	2206      	movs	r2, #6
		data.dcid = req->dcid;
    631e:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6322:	f7ff fc11 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    6326:	4604      	mov	r4, r0
    6328:	2800      	cmp	r0, #0
    632a:	d0a6      	beq.n	627a <l2cap_recv+0x26e>
    632c:	f100 0708 	add.w	r7, r0, #8
    6330:	2102      	movs	r1, #2
    6332:	4638      	mov	r0, r7
    6334:	f017 fde9 	bl	1df0a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6338:	2302      	movs	r3, #2
    633a:	7003      	strb	r3, [r0, #0]
    633c:	7045      	strb	r5, [r0, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    633e:	2204      	movs	r2, #4
    6340:	a903      	add	r1, sp, #12
    6342:	4638      	mov	r0, r7
    6344:	f017 fde7 	bl	1df16 <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    6348:	4621      	mov	r1, r4
    634a:	4630      	mov	r0, r6
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    634c:	f015 fc7b 	bl	1bc46 <l2cap_send.constprop.0>
    6350:	e793      	b.n	627a <l2cap_recv+0x26e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    6352:	4621      	mov	r1, r4
    6354:	2204      	movs	r2, #4
    6356:	2007      	movs	r0, #7
    6358:	f7ff fbf6 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    635c:	4604      	mov	r4, r0
    635e:	2800      	cmp	r0, #0
    6360:	d08b      	beq.n	627a <l2cap_recv+0x26e>
	return net_buf_simple_add(&buf->b, len);
    6362:	2104      	movs	r1, #4
    6364:	3008      	adds	r0, #8
    6366:	f017 fdd0 	bl	1df0a <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    636a:	8aab      	ldrh	r3, [r5, #20]
    636c:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    636e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    6370:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    6372:	4628      	mov	r0, r5
    6374:	f015 fba3 	bl	1babe <bt_l2cap_chan_del>
    6378:	e7e6      	b.n	6348 <l2cap_recv+0x33c>
	if (buf->len < sizeof(*rsp)) {
    637a:	2b03      	cmp	r3, #3
    637c:	f67f af7d 	bls.w	627a <l2cap_recv+0x26e>
	scid = sys_le16_to_cpu(rsp->scid);
    6380:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_rx_cid(conn, scid);
    6382:	6830      	ldr	r0, [r6, #0]
    6384:	8859      	ldrh	r1, [r3, #2]
    6386:	f015 fac9 	bl	1b91c <l2cap_remove_rx_cid>
	if (!chan) {
    638a:	2800      	cmp	r0, #0
    638c:	d1ad      	bne.n	62ea <l2cap_recv+0x2de>
    638e:	e774      	b.n	627a <l2cap_recv+0x26e>
	if (buf->len < sizeof(*ev)) {
    6390:	2b03      	cmp	r3, #3
    6392:	f67f af72 	bls.w	627a <l2cap_recv+0x26e>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    6396:	68aa      	ldr	r2, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    6398:	6830      	ldr	r0, [r6, #0]
    639a:	8811      	ldrh	r1, [r2, #0]
    639c:	f015 fd38 	bl	1be10 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    63a0:	4604      	mov	r4, r0
    63a2:	2800      	cmp	r0, #0
    63a4:	f43f af69 	beq.w	627a <l2cap_recv+0x26e>
	if (atomic_get(&le_chan->tx.credits) + credits > UINT16_MAX) {
    63a8:	302c      	adds	r0, #44	; 0x2c
	credits = sys_le16_to_cpu(ev->credits);
    63aa:	8851      	ldrh	r1, [r2, #2]
	if (atomic_get(&le_chan->tx.credits) + credits > UINT16_MAX) {
    63ac:	f015 fad7 	bl	1b95e <atomic_get>
    63b0:	4408      	add	r0, r1
    63b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		bt_l2cap_chan_disconnect(chan);
    63b6:	4620      	mov	r0, r4
	if (atomic_get(&le_chan->tx.credits) + credits > UINT16_MAX) {
    63b8:	db02      	blt.n	63c0 <l2cap_recv+0x3b4>
		bt_l2cap_chan_disconnect(chan);
    63ba:	f015 fd72 	bl	1bea2 <bt_l2cap_chan_disconnect>
		return;
    63be:	e75c      	b.n	627a <l2cap_recv+0x26e>
	l2cap_chan_tx_give_credits(le_chan, credits);
    63c0:	f015 fb4b 	bl	1ba5a <l2cap_chan_tx_give_credits>
	l2cap_chan_tx_resume(le_chan);
    63c4:	4620      	mov	r0, r4
    63c6:	f015 fad0 	bl	1b96a <l2cap_chan_tx_resume>
    63ca:	e756      	b.n	627a <l2cap_recv+0x26e>
	chan = l2cap_remove_ident(conn, ident);
    63cc:	6830      	ldr	r0, [r6, #0]
    63ce:	4621      	mov	r1, r4
    63d0:	f015 fa8b 	bl	1b8ea <__l2cap_lookup_ident>
    63d4:	e7d9      	b.n	638a <l2cap_recv+0x37e>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    63d6:	4621      	mov	r1, r4
    63d8:	2202      	movs	r2, #2
    63da:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    63dc:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    63de:	f7ff fbb3 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    63e2:	4604      	mov	r4, r0
    63e4:	2800      	cmp	r0, #0
    63e6:	f43f af48 	beq.w	627a <l2cap_recv+0x26e>
    63ea:	2102      	movs	r1, #2
    63ec:	3008      	adds	r0, #8
    63ee:	f017 fd8c 	bl	1df0a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    63f2:	2300      	movs	r3, #0
    63f4:	7003      	strb	r3, [r0, #0]
    63f6:	7043      	strb	r3, [r0, #1]
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
    63f8:	4621      	mov	r1, r4
    63fa:	e675      	b.n	60e8 <l2cap_recv+0xdc>
    63fc:	0001b98d 	.word	0x0001b98d

00006400 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    6400:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    6402:	3808      	subs	r0, #8
    6404:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    6406:	a901      	add	r1, sp, #4
    6408:	4802      	ldr	r0, [pc, #8]	; (6414 <bt_att_released+0x14>)
    640a:	f018 f95a 	bl	1e6c2 <k_mem_slab_free>
}
    640e:	b003      	add	sp, #12
    6410:	f85d fb04 	ldr.w	pc, [sp], #4
    6414:	20000a40 	.word	0x20000a40

00006418 <tx_meta_data_free>:
{
    6418:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
    641a:	2100      	movs	r1, #0
{
    641c:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    641e:	220c      	movs	r2, #12
    6420:	f014 fa22 	bl	1a868 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    6424:	4621      	mov	r1, r4
    6426:	4802      	ldr	r0, [pc, #8]	; (6430 <tx_meta_data_free+0x18>)
}
    6428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    642c:	f018 ba00 	b.w	1e830 <k_queue_append>
    6430:	20000aa8 	.word	0x20000aa8

00006434 <read_group_cb>:
{
    6434:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6438:	4605      	mov	r5, r0
    643a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    643c:	f04f 0800 	mov.w	r8, #0
    6440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6444:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    6446:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6448:	f88d 8008 	strb.w	r8, [sp, #8]
    644c:	a902      	add	r1, sp, #8
{
    644e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6450:	f8ad 300a 	strh.w	r3, [sp, #10]
    6454:	f014 fa8e 	bl	1a974 <bt_uuid_cmp>
    6458:	b1a0      	cbz	r0, 6484 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    645a:	f642 0301 	movw	r3, #10241	; 0x2801
    645e:	6828      	ldr	r0, [r5, #0]
    6460:	f88d 800c 	strb.w	r8, [sp, #12]
    6464:	a903      	add	r1, sp, #12
    6466:	f8ad 300e 	strh.w	r3, [sp, #14]
    646a:	f014 fa83 	bl	1a974 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    646e:	b148      	cbz	r0, 6484 <read_group_cb+0x50>
		if (data->group &&
    6470:	6923      	ldr	r3, [r4, #16]
    6472:	b11b      	cbz	r3, 647c <read_group_cb+0x48>
    6474:	885a      	ldrh	r2, [r3, #2]
    6476:	42b2      	cmp	r2, r6
    6478:	d200      	bcs.n	647c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    647a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    647c:	2001      	movs	r0, #1
}
    647e:	b004      	add	sp, #16
    6480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6484:	6861      	ldr	r1, [r4, #4]
    6486:	6828      	ldr	r0, [r5, #0]
    6488:	f014 fa74 	bl	1a974 <bt_uuid_cmp>
    648c:	b110      	cbz	r0, 6494 <read_group_cb+0x60>
		data->group = NULL;
    648e:	2300      	movs	r3, #0
    6490:	6123      	str	r3, [r4, #16]
    6492:	e7f3      	b.n	647c <read_group_cb+0x48>
	if (data->rsp->len &&
    6494:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6496:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    6498:	781a      	ldrb	r2, [r3, #0]
    649a:	b132      	cbz	r2, 64aa <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    649c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    649e:	8981      	ldrh	r1, [r0, #12]
    64a0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    64a2:	4293      	cmp	r3, r2
    64a4:	da01      	bge.n	64aa <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
    64a6:	2000      	movs	r0, #0
    64a8:	e7e9      	b.n	647e <read_group_cb+0x4a>
    64aa:	2104      	movs	r1, #4
    64ac:	3008      	adds	r0, #8
    64ae:	f017 fd2c 	bl	1df0a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    64b2:	4b09      	ldr	r3, [pc, #36]	; (64d8 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    64b4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    64b6:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    64b8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    64ba:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    64bc:	4629      	mov	r1, r5
    64be:	9300      	str	r3, [sp, #0]
    64c0:	9401      	str	r4, [sp, #4]
    64c2:	2300      	movs	r3, #0
    64c4:	4638      	mov	r0, r7
    64c6:	f015 ff89 	bl	1c3dc <att_chan_read>
	if (read < 0) {
    64ca:	2800      	cmp	r0, #0
    64cc:	dbeb      	blt.n	64a6 <read_group_cb+0x72>
	if (!data->group) {
    64ce:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    64d0:	3800      	subs	r0, #0
    64d2:	bf18      	it	ne
    64d4:	2001      	movne	r0, #1
    64d6:	e7d2      	b.n	647e <read_group_cb+0x4a>
    64d8:	0001c33d 	.word	0x0001c33d

000064dc <chan_send>:
{
    64dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
    64e0:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    64e2:	f8d1 8014 	ldr.w	r8, [r1, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    64e6:	f3bf 8f5b 	dmb	ish
    64ea:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
    64ee:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    64f2:	0752      	lsls	r2, r2, #29
{
    64f4:	4606      	mov	r6, r0
    64f6:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    64f8:	d538      	bpl.n	656c <chan_send+0x90>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    64fa:	781b      	ldrb	r3, [r3, #0]
    64fc:	2bd2      	cmp	r3, #210	; 0xd2
    64fe:	d10f      	bne.n	6520 <chan_send+0x44>
		err = bt_smp_sign(chan->att->conn, buf);
    6500:	6803      	ldr	r3, [r0, #0]
    6502:	6818      	ldr	r0, [r3, #0]
    6504:	f017 fa84 	bl	1da10 <bt_smp_sign>
		if (err) {
    6508:	4605      	mov	r5, r0
    650a:	b148      	cbz	r0, 6520 <chan_send+0x44>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    650c:	6960      	ldr	r0, [r4, #20]
    650e:	f7ff ff83 	bl	6418 <tx_meta_data_free>
			net_buf_unref(buf);
    6512:	4620      	mov	r0, r4
    6514:	f00f fbfe 	bl	15d14 <net_buf_unref>
}
    6518:	4628      	mov	r0, r5
    651a:	b003      	add	sp, #12
    651c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    6520:	f104 0008 	add.w	r0, r4, #8
    6524:	f017 fd46 	bl	1dfb4 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6528:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
    652a:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    652e:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    6530:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
    6532:	f8c8 6000 	str.w	r6, [r8]
	state->offset = net_buf_simple_headroom(buf);
    6536:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    6538:	7818      	ldrb	r0, [r3, #0]
    653a:	f015 fd9f 	bl	1c07c <att_op_get_type>
	switch (op_type) {
    653e:	2805      	cmp	r0, #5
    6540:	bf96      	itet	ls
    6542:	4b0c      	ldrls	r3, [pc, #48]	; (6574 <chan_send+0x98>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    6544:	4b0c      	ldrhi	r3, [pc, #48]	; (6578 <chan_send+0x9c>)
    6546:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    654a:	f8cd 8000 	str.w	r8, [sp]
    654e:	4628      	mov	r0, r5
    6550:	4622      	mov	r2, r4
    6552:	2104      	movs	r1, #4
    6554:	f015 faf7 	bl	1bb46 <bt_l2cap_send_cb>
	if (err) {
    6558:	4605      	mov	r5, r0
    655a:	2800      	cmp	r0, #0
    655c:	d0dc      	beq.n	6518 <chan_send+0x3c>
	buf->data = buf->__buf + state->offset;
    655e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6560:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6564:	fa10 f787 	uxtah	r7, r0, r7
    6568:	60a7      	str	r7, [r4, #8]
}
    656a:	e7d5      	b.n	6518 <chan_send+0x3c>
		return -EINVAL;
    656c:	f06f 0515 	mvn.w	r5, #21
    6570:	e7d2      	b.n	6518 <chan_send+0x3c>
    6572:	bf00      	nop
    6574:	0001f964 	.word	0x0001f964
    6578:	0001c7ab 	.word	0x0001c7ab

0000657c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    657c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    657e:	2300      	movs	r3, #0
{
    6580:	4607      	mov	r7, r0
    6582:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6584:	482a      	ldr	r0, [pc, #168]	; (6630 <bt_att_accept+0xb4>)
    6586:	2200      	movs	r2, #0
    6588:	4669      	mov	r1, sp
    658a:	f011 fb8b 	bl	17ca4 <k_mem_slab_alloc>
    658e:	4605      	mov	r5, r0
    6590:	b110      	cbz	r0, 6598 <bt_att_accept+0x1c>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    6592:	f06f 050b 	mvn.w	r5, #11
    6596:	e047      	b.n	6628 <bt_att_accept+0xac>
	return z_impl_z_current_get();
    6598:	f012 f996 	bl	188c8 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
    659c:	4b25      	ldr	r3, [pc, #148]	; (6634 <bt_att_accept+0xb8>)
	(void)memset(att, 0, sizeof(*att));
    659e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    65a0:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
    65a2:	222c      	movs	r2, #44	; 0x2c
    65a4:	9800      	ldr	r0, [sp, #0]
    65a6:	f014 f95f 	bl	1a868 <memset>
	att->conn = conn;
    65aa:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    65ac:	4822      	ldr	r0, [pc, #136]	; (6638 <bt_att_accept+0xbc>)
	list->tail = NULL;
    65ae:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
    65b0:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
    65b4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
    65b8:	2200      	movs	r2, #0
    65ba:	2300      	movs	r3, #0
    65bc:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    65be:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    65c0:	f011 fb70 	bl	17ca4 <k_mem_slab_alloc>
    65c4:	4605      	mov	r5, r0
    65c6:	2800      	cmp	r0, #0
    65c8:	d1e3      	bne.n	6592 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    65ca:	4601      	mov	r1, r0
    65cc:	f44f 72a8 	mov.w	r2, #336	; 0x150
    65d0:	9801      	ldr	r0, [sp, #4]
    65d2:	f014 f949 	bl	1a868 <memset>
	chan->chan.chan.ops = &ops;
    65d6:	9801      	ldr	r0, [sp, #4]
    65d8:	4b18      	ldr	r3, [pc, #96]	; (663c <bt_att_accept+0xc0>)
    65da:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    65dc:	f500 7080 	add.w	r0, r0, #256	; 0x100
    65e0:	f018 f91a 	bl	1e818 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    65e4:	9b01      	ldr	r3, [sp, #4]
    65e6:	f3bf 8f5b 	dmb	ish
    65ea:	33f8      	adds	r3, #248	; 0xf8
    65ec:	e853 2f00 	ldrex	r2, [r3]
    65f0:	e843 5100 	strex	r1, r5, [r3]
    65f4:	2900      	cmp	r1, #0
    65f6:	d1f9      	bne.n	65ec <bt_att_accept+0x70>
    65f8:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    65fc:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
    65fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
	chan->att = att;
    6600:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
    6602:	b91b      	cbnz	r3, 660c <bt_att_accept+0x90>
    6604:	f104 000c 	add.w	r0, r4, #12
    6608:	f018 f906 	bl	1e818 <z_impl_k_queue_init>
	parent->next = child;
    660c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    660e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
Z_GENLIST_PREPEND(slist, snode)
    6612:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    6614:	f507 73a4 	add.w	r3, r7, #328	; 0x148
	list->head = node;
    6618:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    661a:	b902      	cbnz	r2, 661e <bt_att_accept+0xa2>
	list->tail = node;
    661c:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
    661e:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
    6620:	2b00      	cmp	r3, #0
    6622:	d0b6      	beq.n	6592 <bt_att_accept+0x16>
	}

	*ch = &chan->chan.chan;
    6624:	3308      	adds	r3, #8
    6626:	6033      	str	r3, [r6, #0]

	return 0;
}
    6628:	4628      	mov	r0, r5
    662a:	b003      	add	sp, #12
    662c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    662e:	bf00      	nop
    6630:	20000a24 	.word	0x20000a24
    6634:	20001754 	.word	0x20001754
    6638:	20000a40 	.word	0x20000a40
    663c:	200002c4 	.word	0x200002c4

00006640 <read_type_cb>:
{
    6640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    6644:	f8d2 8000 	ldr.w	r8, [r2]
{
    6648:	4606      	mov	r6, r0
    664a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    664c:	6800      	ldr	r0, [r0, #0]
    664e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    6650:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    6654:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6656:	f014 f98d 	bl	1a974 <bt_uuid_cmp>
    665a:	4607      	mov	r7, r0
    665c:	2800      	cmp	r0, #0
    665e:	d13e      	bne.n	66de <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6660:	4628      	mov	r0, r5
    6662:	2215      	movs	r2, #21
    6664:	4631      	mov	r1, r6
    6666:	f016 fda9 	bl	1d1bc <bt_gatt_check_perm>
    666a:	4605      	mov	r5, r0
    666c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    666e:	b148      	cbz	r0, 6684 <read_type_cb+0x44>
		if (data->rsp->len) {
    6670:	68e3      	ldr	r3, [r4, #12]
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	b923      	cbnz	r3, 6680 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    6676:	2500      	movs	r5, #0
}
    6678:	4628      	mov	r0, r5
    667a:	b003      	add	sp, #12
    667c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    6680:	7527      	strb	r7, [r4, #20]
    6682:	e7f8      	b.n	6676 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6684:	68a0      	ldr	r0, [r4, #8]
    6686:	f017 fc12 	bl	1deae <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    668a:	2102      	movs	r1, #2
    668c:	3008      	adds	r0, #8
    668e:	f017 fc3c 	bl	1df0a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6692:	4b14      	ldr	r3, [pc, #80]	; (66e4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6694:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6696:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    6698:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    669c:	4631      	mov	r1, r6
    669e:	9300      	str	r3, [sp, #0]
    66a0:	9401      	str	r4, [sp, #4]
    66a2:	462b      	mov	r3, r5
    66a4:	4640      	mov	r0, r8
    66a6:	f015 fe99 	bl	1c3dc <att_chan_read>
	if (read < 0) {
    66aa:	2800      	cmp	r0, #0
    66ac:	da07      	bge.n	66be <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    66ae:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    66b2:	bf26      	itte	cs
    66b4:	4240      	negcs	r0, r0
    66b6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    66b8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    66ba:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    66bc:	e7dc      	b.n	6678 <read_type_cb+0x38>
	if (!data->item) {
    66be:	6923      	ldr	r3, [r4, #16]
    66c0:	2b00      	cmp	r3, #0
    66c2:	d0d8      	beq.n	6676 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    66c4:	68a0      	ldr	r0, [r4, #8]
    66c6:	f015 fcbf 	bl	1c048 <net_buf_frags_len>
    66ca:	f8b8 502e 	ldrh.w	r5, [r8, #46]	; 0x2e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    66ce:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    66d0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    66d2:	7818      	ldrb	r0, [r3, #0]
    66d4:	4285      	cmp	r5, r0
    66d6:	bf94      	ite	ls
    66d8:	2500      	movls	r5, #0
    66da:	2501      	movhi	r5, #1
    66dc:	e7cc      	b.n	6678 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    66de:	2501      	movs	r5, #1
    66e0:	e7ca      	b.n	6678 <read_type_cb+0x38>
    66e2:	bf00      	nop
    66e4:	0001c059 	.word	0x0001c059

000066e8 <bt_att_connected>:
{
    66e8:	b510      	push	{r4, lr}
    66ea:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
    66ec:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    66f0:	3808      	subs	r0, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    66f2:	f3bf 8f5b 	dmb	ish
    66f6:	e853 2f00 	ldrex	r2, [r3]
    66fa:	f042 0204 	orr.w	r2, r2, #4
    66fe:	e843 2100 	strex	r1, r2, [r3]
    6702:	2900      	cmp	r1, #0
    6704:	d1f7      	bne.n	66f6 <bt_att_connected+0xe>
    6706:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    670a:	f3bf 8f5b 	dmb	ish
    670e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    6712:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    6716:	071b      	lsls	r3, r3, #28
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6718:	bf5e      	ittt	pl
    671a:	2317      	movpl	r3, #23
    671c:	84e3      	strhpl	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    671e:	82e3      	strhpl	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    6720:	f015 fdda 	bl	1c2d8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    6724:	f504 7088 	add.w	r0, r4, #272	; 0x110
    6728:	4903      	ldr	r1, [pc, #12]	; (6738 <bt_att_connected+0x50>)
    672a:	f018 f990 	bl	1ea4e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    672e:	6820      	ldr	r0, [r4, #0]
}
    6730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    6734:	f001 b948 	b.w	79c8 <bt_gatt_connected>
    6738:	0001ca6b 	.word	0x0001ca6b

0000673c <bt_att_chan_create_pdu>:
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    673c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    673e:	3201      	adds	r2, #1
    6740:	429a      	cmp	r2, r3
{
    6742:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    6746:	460e      	mov	r6, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    6748:	d903      	bls.n	6752 <bt_att_chan_create_pdu+0x16>
		return NULL;
    674a:	2400      	movs	r4, #0
}
    674c:	4620      	mov	r0, r4
    674e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	switch (att_op_get_type(op)) {
    6752:	4608      	mov	r0, r1
    6754:	f015 fc92 	bl	1c07c <att_op_get_type>
    6758:	2802      	cmp	r0, #2
    675a:	d001      	beq.n	6760 <bt_att_chan_create_pdu+0x24>
    675c:	2804      	cmp	r0, #4
    675e:	d116      	bne.n	678e <bt_att_chan_create_pdu+0x52>
    6760:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
    6764:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    6768:	2100      	movs	r1, #0
    676a:	4642      	mov	r2, r8
    676c:	464b      	mov	r3, r9
    676e:	4608      	mov	r0, r1
    6770:	f015 f9e6 	bl	1bb40 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    6774:	4604      	mov	r4, r0
    6776:	2800      	cmp	r0, #0
    6778:	d0e7      	beq.n	674a <bt_att_chan_create_pdu+0xe>
	return z_impl_k_queue_get(queue, timeout);
    677a:	480b      	ldr	r0, [pc, #44]	; (67a8 <bt_att_chan_create_pdu+0x6c>)
    677c:	4642      	mov	r2, r8
    677e:	464b      	mov	r3, r9
    6780:	f011 fb94 	bl	17eac <z_impl_k_queue_get>
	if (!data) {
    6784:	b940      	cbnz	r0, 6798 <bt_att_chan_create_pdu+0x5c>
		net_buf_unref(buf);
    6786:	4620      	mov	r0, r4
    6788:	f00f fac4 	bl	15d14 <net_buf_unref>
		return NULL;
    678c:	e7dd      	b.n	674a <bt_att_chan_create_pdu+0xe>
		timeout = K_FOREVER;
    678e:	f04f 38ff 	mov.w	r8, #4294967295
    6792:	f04f 39ff 	mov.w	r9, #4294967295
    6796:	e7e7      	b.n	6768 <bt_att_chan_create_pdu+0x2c>
	bt_att_tx_meta_data(buf) = data;
    6798:	6160      	str	r0, [r4, #20]
    679a:	2101      	movs	r1, #1
    679c:	f104 0008 	add.w	r0, r4, #8
    67a0:	f017 fbb3 	bl	1df0a <net_buf_simple_add>
	hdr->code = op;
    67a4:	7006      	strb	r6, [r0, #0]
	return buf;
    67a6:	e7d1      	b.n	674c <bt_att_chan_create_pdu+0x10>
    67a8:	20000aa8 	.word	0x20000aa8

000067ac <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    67ac:	898b      	ldrh	r3, [r1, #12]
{
    67ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67b2:	4606      	mov	r6, r0
    67b4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    67b6:	2b00      	cmp	r3, #0
    67b8:	d047      	beq.n	684a <bt_att_recv+0x9e>
	return net_buf_simple_pull_mem(&buf->b, len);
    67ba:	2101      	movs	r1, #1
    67bc:	f104 0008 	add.w	r0, r4, #8
    67c0:	f017 fbe0 	bl	1df84 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    67c4:	f856 3c08 	ldr.w	r3, [r6, #-8]
    67c8:	4607      	mov	r7, r0
    67ca:	2b00      	cmp	r3, #0
    67cc:	d03d      	beq.n	684a <bt_att_recv+0x9e>
		if (hdr->code == handlers[i].op) {
    67ce:	7801      	ldrb	r1, [r0, #0]
    67d0:	4d22      	ldr	r5, [pc, #136]	; (685c <bt_att_recv+0xb0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    67d2:	f1a6 0808 	sub.w	r8, r6, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    67d6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    67d8:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    67dc:	428a      	cmp	r2, r1
    67de:	d10d      	bne.n	67fc <bt_att_recv+0x50>
		if (handler->type == ATT_REQUEST &&
    67e0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    67e4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    67e8:	f893 a002 	ldrb.w	sl, [r3, #2]
    67ec:	f1ba 0f01 	cmp.w	sl, #1
    67f0:	d014      	beq.n	681c <bt_att_recv+0x70>
		} else if (handler->type == ATT_INDICATION &&
    67f2:	f1ba 0f05 	cmp.w	sl, #5
    67f6:	d117      	bne.n	6828 <bt_att_recv+0x7c>
			   atomic_test_and_set_bit(att_chan->flags,
    67f8:	2101      	movs	r1, #1
    67fa:	e010      	b.n	681e <bt_att_recv+0x72>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    67fc:	3301      	adds	r3, #1
    67fe:	2b0e      	cmp	r3, #14
    6800:	d1ea      	bne.n	67d8 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    6802:	4608      	mov	r0, r1
    6804:	f015 fc3a 	bl	1c07c <att_op_get_type>
    6808:	b1f8      	cbz	r0, 684a <bt_att_recv+0x9e>
    680a:	2805      	cmp	r0, #5
    680c:	d01d      	beq.n	684a <bt_att_recv+0x9e>
	if (!req) {
    680e:	b1e1      	cbz	r1, 684a <bt_att_recv+0x9e>
    6810:	2306      	movs	r3, #6
    6812:	2200      	movs	r2, #0
    6814:	4640      	mov	r0, r8
    6816:	f016 f82e 	bl	1c876 <send_err_rsp.part.0>
    681a:	e016      	b.n	684a <bt_att_recv+0x9e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    681c:	2100      	movs	r1, #0
    681e:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
    6822:	f015 fec1 	bl	1c5a8 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
    6826:	b980      	cbnz	r0, 684a <bt_att_recv+0x9e>
	if (buf->len < handler->expect_len) {
    6828:	444d      	add	r5, r9
    682a:	89a2      	ldrh	r2, [r4, #12]
    682c:	786b      	ldrb	r3, [r5, #1]
    682e:	429a      	cmp	r2, r3
    6830:	d30e      	bcc.n	6850 <bt_att_recv+0xa4>
		err = handler->func(att_chan, buf);
    6832:	686b      	ldr	r3, [r5, #4]
    6834:	4621      	mov	r1, r4
    6836:	4640      	mov	r0, r8
    6838:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    683a:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
    683e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6840:	d103      	bne.n	684a <bt_att_recv+0x9e>
    6842:	b110      	cbz	r0, 684a <bt_att_recv+0x9e>
		send_err_rsp(att_chan, hdr->code, 0, err);
    6844:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    6846:	2900      	cmp	r1, #0
    6848:	d1e3      	bne.n	6812 <bt_att_recv+0x66>
}
    684a:	2000      	movs	r0, #0
    684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (handler->type == ATT_REQUEST && err) {
    6850:	f1ba 0f01 	cmp.w	sl, #1
    6854:	d1f9      	bne.n	684a <bt_att_recv+0x9e>
		err = BT_ATT_ERR_INVALID_PDU;
    6856:	2304      	movs	r3, #4
    6858:	e7f4      	b.n	6844 <bt_att_recv+0x98>
    685a:	bf00      	nop
    685c:	0001f97c 	.word	0x0001f97c

00006860 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6864:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6866:	6803      	ldr	r3, [r0, #0]
    6868:	460e      	mov	r6, r1
    686a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    686c:	b087      	sub	sp, #28
    686e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6870:	bf18      	it	ne
    6872:	2101      	movne	r1, #1
    6874:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6876:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6878:	f016 fd01 	bl	1d27e <bt_gatt_change_aware>
    687c:	b958      	cbnz	r0, 6896 <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    687e:	2105      	movs	r1, #5
    6880:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    6884:	f015 fe90 	bl	1c5a8 <atomic_test_and_set_bit>
    6888:	2800      	cmp	r0, #0
    688a:	d04e      	beq.n	692a <att_write_rsp.constprop.0+0xca>
			return 0;
    688c:	2500      	movs	r5, #0
}
    688e:	4628      	mov	r0, r5
    6890:	b007      	add	sp, #28
    6892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
    6896:	2f00      	cmp	r7, #0
    6898:	d049      	beq.n	692e <att_write_rsp.constprop.0+0xce>
	(void)memset(&data, 0, sizeof(data));
    689a:	2218      	movs	r2, #24
    689c:	2100      	movs	r1, #0
    689e:	4668      	mov	r0, sp
    68a0:	f013 ffe2 	bl	1a868 <memset>
	if (rsp) {
    68a4:	f1b8 0f00 	cmp.w	r8, #0
    68a8:	d12e      	bne.n	6908 <att_write_rsp.constprop.0+0xa8>
	data.conn = chan->att->conn;
    68aa:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    68ac:	4a21      	ldr	r2, [pc, #132]	; (6934 <att_write_rsp.constprop.0+0xd4>)
	data.conn = chan->att->conn;
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	9300      	str	r3, [sp, #0]
	data.value = value;
    68b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    68b4:	9303      	str	r3, [sp, #12]
	data.len = len;
    68b6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    68ba:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    68be:	2301      	movs	r3, #1
    68c0:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    68c4:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    68c8:	466b      	mov	r3, sp
    68ca:	4639      	mov	r1, r7
    68cc:	4638      	mov	r0, r7
	data.req = req;
    68ce:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    68d2:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    68d6:	f015 fc16 	bl	1c106 <bt_gatt_foreach_attr>
	if (data.err) {
    68da:	f89d 5014 	ldrb.w	r5, [sp, #20]
    68de:	b1ed      	cbz	r5, 691c <att_write_rsp.constprop.0+0xbc>
		if (rsp) {
    68e0:	f1b8 0f00 	cmp.w	r8, #0
    68e4:	d0d2      	beq.n	688c <att_write_rsp.constprop.0+0x2c>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    68e6:	9b01      	ldr	r3, [sp, #4]
    68e8:	6958      	ldr	r0, [r3, #20]
    68ea:	f7ff fd95 	bl	6418 <tx_meta_data_free>
			net_buf_unref(data.buf);
    68ee:	9801      	ldr	r0, [sp, #4]
    68f0:	f00f fa10 	bl	15d14 <net_buf_unref>
	if (!req) {
    68f4:	2e00      	cmp	r6, #0
    68f6:	d0c9      	beq.n	688c <att_write_rsp.constprop.0+0x2c>
    68f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    68fc:	463a      	mov	r2, r7
    68fe:	4631      	mov	r1, r6
    6900:	4620      	mov	r0, r4
    6902:	f015 ffb8 	bl	1c876 <send_err_rsp.part.0>
    6906:	e7c1      	b.n	688c <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    6908:	2200      	movs	r2, #0
    690a:	4641      	mov	r1, r8
    690c:	4620      	mov	r0, r4
    690e:	f7ff ff15 	bl	673c <bt_att_chan_create_pdu>
    6912:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6914:	2800      	cmp	r0, #0
    6916:	d1c8      	bne.n	68aa <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
    6918:	250e      	movs	r5, #14
    691a:	e7b8      	b.n	688e <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
    691c:	9901      	ldr	r1, [sp, #4]
    691e:	2900      	cmp	r1, #0
    6920:	d0b4      	beq.n	688c <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
    6922:	4620      	mov	r0, r4
    6924:	f015 fe18 	bl	1c558 <bt_att_chan_send_rsp>
    6928:	e7b1      	b.n	688e <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    692a:	2512      	movs	r5, #18
    692c:	e7af      	b.n	688e <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
    692e:	2501      	movs	r5, #1
    6930:	e7ad      	b.n	688e <att_write_rsp.constprop.0+0x2e>
    6932:	bf00      	nop
    6934:	0001c379 	.word	0x0001c379

00006938 <att_read_group_req>:
{
    6938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    693c:	898c      	ldrh	r4, [r1, #12]
    693e:	3c04      	subs	r4, #4
    6940:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    6942:	2c02      	cmp	r4, #2
{
    6944:	4605      	mov	r5, r0
    6946:	b08c      	sub	sp, #48	; 0x30
    6948:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    694a:	d001      	beq.n	6950 <att_read_group_req+0x18>
    694c:	2c10      	cmp	r4, #16
    694e:	d172      	bne.n	6a36 <att_read_group_req+0xfe>
    6950:	2104      	movs	r1, #4
    6952:	3008      	adds	r0, #8
    6954:	f017 fb16 	bl	1df84 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6958:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    695c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    695e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6960:	1d01      	adds	r1, r0, #4
    6962:	4622      	mov	r2, r4
    6964:	4640      	mov	r0, r8
    6966:	f014 f833 	bl	1a9d0 <bt_uuid_create>
    696a:	2800      	cmp	r0, #0
    696c:	d065      	beq.n	6a3a <att_read_group_req+0x102>
	if (!start || !end) {
    696e:	2e00      	cmp	r6, #0
    6970:	d03e      	beq.n	69f0 <att_read_group_req+0xb8>
    6972:	2400      	movs	r4, #0
    6974:	2f00      	cmp	r7, #0
    6976:	d03a      	beq.n	69ee <att_read_group_req+0xb6>
	if (start > end) {
    6978:	42b7      	cmp	r7, r6
    697a:	d339      	bcc.n	69f0 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    697c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6980:	a901      	add	r1, sp, #4
    6982:	4640      	mov	r0, r8
    6984:	f88d 4004 	strb.w	r4, [sp, #4]
    6988:	f8ad 3006 	strh.w	r3, [sp, #6]
    698c:	f013 fff2 	bl	1a974 <bt_uuid_cmp>
    6990:	2800      	cmp	r0, #0
    6992:	d138      	bne.n	6a06 <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
    6994:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    6996:	2214      	movs	r2, #20
    6998:	2100      	movs	r1, #0
    699a:	a807      	add	r0, sp, #28
    699c:	f013 ff64 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    69a0:	2201      	movs	r2, #1
    69a2:	2111      	movs	r1, #17
    69a4:	4620      	mov	r0, r4
    69a6:	f015 ffa9 	bl	1c8fc <bt_att_create_pdu>
    69aa:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    69ac:	2800      	cmp	r0, #0
    69ae:	d044      	beq.n	6a3a <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
    69b0:	2101      	movs	r1, #1
    69b2:	3008      	adds	r0, #8
	data.uuid = uuid;
    69b4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    69b8:	f017 faa7 	bl	1df0a <net_buf_simple_add>
	data.rsp->len = 0U;
    69bc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    69c0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    69c2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    69c4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    69c8:	4a1d      	ldr	r2, [pc, #116]	; (6a40 <att_read_group_req+0x108>)
	data.group = NULL;
    69ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    69ce:	4639      	mov	r1, r7
    69d0:	4630      	mov	r0, r6
    69d2:	f015 fb98 	bl	1c106 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    69d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    69d8:	781c      	ldrb	r4, [r3, #0]
    69da:	bb3c      	cbnz	r4, 6a2c <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    69dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69de:	6958      	ldr	r0, [r3, #20]
    69e0:	f7ff fd1a 	bl	6418 <tx_meta_data_free>
		net_buf_unref(data.buf);
    69e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    69e6:	f00f f995 	bl	15d14 <net_buf_unref>
	if (!req) {
    69ea:	230a      	movs	r3, #10
    69ec:	e018      	b.n	6a20 <att_read_group_req+0xe8>
			*err = 0U;
    69ee:	463e      	mov	r6, r7
	if (!req) {
    69f0:	2301      	movs	r3, #1
    69f2:	4632      	mov	r2, r6
    69f4:	2110      	movs	r1, #16
    69f6:	4628      	mov	r0, r5
    69f8:	f015 ff3d 	bl	1c876 <send_err_rsp.part.0>
		return 0;
    69fc:	2400      	movs	r4, #0
}
    69fe:	4620      	mov	r0, r4
    6a00:	b00c      	add	sp, #48	; 0x30
    6a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6a06:	f642 0301 	movw	r3, #10241	; 0x2801
    6a0a:	a907      	add	r1, sp, #28
    6a0c:	4640      	mov	r0, r8
    6a0e:	f88d 401c 	strb.w	r4, [sp, #28]
    6a12:	f8ad 301e 	strh.w	r3, [sp, #30]
    6a16:	f013 ffad 	bl	1a974 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d0ba      	beq.n	6994 <att_read_group_req+0x5c>
	if (!req) {
    6a1e:	2310      	movs	r3, #16
    6a20:	4632      	mov	r2, r6
    6a22:	2110      	movs	r1, #16
    6a24:	4628      	mov	r0, r5
    6a26:	f015 ff26 	bl	1c876 <send_err_rsp.part.0>
		return 0;
    6a2a:	e7e8      	b.n	69fe <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
    6a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
    6a2e:	4628      	mov	r0, r5
    6a30:	f015 fd92 	bl	1c558 <bt_att_chan_send_rsp>
	return 0;
    6a34:	e7e2      	b.n	69fc <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
    6a36:	2404      	movs	r4, #4
    6a38:	e7e1      	b.n	69fe <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
    6a3a:	240e      	movs	r4, #14
    6a3c:	e7df      	b.n	69fe <att_read_group_req+0xc6>
    6a3e:	bf00      	nop
    6a40:	00006435 	.word	0x00006435

00006a44 <att_read_mult_vl_req>:
{
    6a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6a48:	6886      	ldr	r6, [r0, #8]
{
    6a4a:	b085      	sub	sp, #20
    6a4c:	4604      	mov	r4, r0
    6a4e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6a50:	4630      	mov	r0, r6
    6a52:	2101      	movs	r1, #1
    6a54:	f016 fc13 	bl	1d27e <bt_gatt_change_aware>
    6a58:	b958      	cbnz	r0, 6a72 <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6a5a:	2105      	movs	r1, #5
    6a5c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    6a60:	f015 fda2 	bl	1c5a8 <atomic_test_and_set_bit>
			return 0;
    6a64:	2800      	cmp	r0, #0
    6a66:	bf0c      	ite	eq
    6a68:	2012      	moveq	r0, #18
    6a6a:	2000      	movne	r0, #0
}
    6a6c:	b005      	add	sp, #20
    6a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    6a72:	2210      	movs	r2, #16
    6a74:	2100      	movs	r1, #0
    6a76:	4668      	mov	r0, sp
    6a78:	f013 fef6 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    6a7c:	2200      	movs	r2, #0
    6a7e:	2121      	movs	r1, #33	; 0x21
    6a80:	4630      	mov	r0, r6
    6a82:	f015 ff3b 	bl	1c8fc <bt_att_create_pdu>
    6a86:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6a88:	b368      	cbz	r0, 6ae6 <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6a8a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6aec <att_read_mult_vl_req+0xa8>
	data.chan = chan;
    6a8e:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    6a90:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6a94:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    6a98:	89ab      	ldrh	r3, [r5, #12]
    6a9a:	2b01      	cmp	r3, #1
    6a9c:	d804      	bhi.n	6aa8 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
    6a9e:	9902      	ldr	r1, [sp, #8]
    6aa0:	4620      	mov	r0, r4
    6aa2:	f015 fd59 	bl	1c558 <bt_att_chan_send_rsp>
    6aa6:	e01c      	b.n	6ae2 <att_read_mult_vl_req+0x9e>
    6aa8:	4638      	mov	r0, r7
    6aaa:	f017 fa7b 	bl	1dfa4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6aae:	466b      	mov	r3, sp
    6ab0:	464a      	mov	r2, r9
    6ab2:	4601      	mov	r1, r0
    6ab4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6ab6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6aba:	f015 fb24 	bl	1c106 <bt_gatt_foreach_attr>
		if (data.err) {
    6abe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d0e8      	beq.n	6a98 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6ac6:	9b02      	ldr	r3, [sp, #8]
    6ac8:	6958      	ldr	r0, [r3, #20]
    6aca:	f7ff fca5 	bl	6418 <tx_meta_data_free>
			net_buf_unref(data.buf);
    6ace:	9802      	ldr	r0, [sp, #8]
    6ad0:	f00f f920 	bl	15d14 <net_buf_unref>
	if (!req) {
    6ad4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6ad8:	4632      	mov	r2, r6
    6ada:	2120      	movs	r1, #32
    6adc:	4620      	mov	r0, r4
    6ade:	f015 feca 	bl	1c876 <send_err_rsp.part.0>
	return 0;
    6ae2:	2000      	movs	r0, #0
    6ae4:	e7c2      	b.n	6a6c <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
    6ae6:	200e      	movs	r0, #14
    6ae8:	e7c0      	b.n	6a6c <att_read_mult_vl_req+0x28>
    6aea:	bf00      	nop
    6aec:	0001c627 	.word	0x0001c627

00006af0 <att_read_mult_req>:
{
    6af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6af4:	6886      	ldr	r6, [r0, #8]
{
    6af6:	b085      	sub	sp, #20
    6af8:	4604      	mov	r4, r0
    6afa:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6afc:	4630      	mov	r0, r6
    6afe:	2101      	movs	r1, #1
    6b00:	f016 fbbd 	bl	1d27e <bt_gatt_change_aware>
    6b04:	b958      	cbnz	r0, 6b1e <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6b06:	2105      	movs	r1, #5
    6b08:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    6b0c:	f015 fd4c 	bl	1c5a8 <atomic_test_and_set_bit>
			return 0;
    6b10:	2800      	cmp	r0, #0
    6b12:	bf0c      	ite	eq
    6b14:	2012      	moveq	r0, #18
    6b16:	2000      	movne	r0, #0
}
    6b18:	b005      	add	sp, #20
    6b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    6b1e:	2210      	movs	r2, #16
    6b20:	2100      	movs	r1, #0
    6b22:	4668      	mov	r0, sp
    6b24:	f013 fea0 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6b28:	2200      	movs	r2, #0
    6b2a:	210f      	movs	r1, #15
    6b2c:	4630      	mov	r0, r6
    6b2e:	f015 fee5 	bl	1c8fc <bt_att_create_pdu>
    6b32:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6b34:	b368      	cbz	r0, 6b92 <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6b36:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6b98 <att_read_mult_req+0xa8>
	data.chan = chan;
    6b3a:	9400      	str	r4, [sp, #0]
    6b3c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6b40:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    6b44:	89ab      	ldrh	r3, [r5, #12]
    6b46:	2b01      	cmp	r3, #1
    6b48:	d804      	bhi.n	6b54 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
    6b4a:	9902      	ldr	r1, [sp, #8]
    6b4c:	4620      	mov	r0, r4
    6b4e:	f015 fd03 	bl	1c558 <bt_att_chan_send_rsp>
    6b52:	e01c      	b.n	6b8e <att_read_mult_req+0x9e>
    6b54:	4638      	mov	r0, r7
    6b56:	f017 fa25 	bl	1dfa4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6b5a:	466b      	mov	r3, sp
    6b5c:	464a      	mov	r2, r9
    6b5e:	4601      	mov	r1, r0
    6b60:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6b62:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6b66:	f015 face 	bl	1c106 <bt_gatt_foreach_attr>
		if (data.err) {
    6b6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d0e8      	beq.n	6b44 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6b72:	9b02      	ldr	r3, [sp, #8]
    6b74:	6958      	ldr	r0, [r3, #20]
    6b76:	f7ff fc4f 	bl	6418 <tx_meta_data_free>
			net_buf_unref(data.buf);
    6b7a:	9802      	ldr	r0, [sp, #8]
    6b7c:	f00f f8ca 	bl	15d14 <net_buf_unref>
	if (!req) {
    6b80:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6b84:	4632      	mov	r2, r6
    6b86:	210e      	movs	r1, #14
    6b88:	4620      	mov	r0, r4
    6b8a:	f015 fe74 	bl	1c876 <send_err_rsp.part.0>
	return 0;
    6b8e:	2000      	movs	r0, #0
    6b90:	e7c2      	b.n	6b18 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
    6b92:	200e      	movs	r0, #14
    6b94:	e7c0      	b.n	6b18 <att_read_mult_req+0x28>
    6b96:	bf00      	nop
    6b98:	0001c5d3 	.word	0x0001c5d3

00006b9c <att_read_rsp>:
{
    6b9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6ba0:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    6ba4:	4604      	mov	r4, r0
    6ba6:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6ba8:	4640      	mov	r0, r8
    6baa:	2101      	movs	r1, #1
{
    6bac:	4615      	mov	r5, r2
    6bae:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    6bb0:	f016 fb65 	bl	1d27e <bt_gatt_change_aware>
    6bb4:	b960      	cbnz	r0, 6bd0 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6bb6:	2105      	movs	r1, #5
    6bb8:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    6bbc:	f015 fcf4 	bl	1c5a8 <atomic_test_and_set_bit>
			return 0;
    6bc0:	2800      	cmp	r0, #0
    6bc2:	bf0c      	ite	eq
    6bc4:	2512      	moveq	r5, #18
    6bc6:	2500      	movne	r5, #0
}
    6bc8:	4628      	mov	r0, r5
    6bca:	b004      	add	sp, #16
    6bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
    6bd0:	b38e      	cbz	r6, 6c36 <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
    6bd2:	2210      	movs	r2, #16
    6bd4:	2100      	movs	r1, #0
    6bd6:	4668      	mov	r0, sp
    6bd8:	f013 fe46 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6bdc:	2200      	movs	r2, #0
    6bde:	4629      	mov	r1, r5
    6be0:	4640      	mov	r0, r8
    6be2:	f015 fe8b 	bl	1c8fc <bt_att_create_pdu>
    6be6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6be8:	b338      	cbz	r0, 6c3a <att_read_rsp+0x9e>
	data.offset = offset;
    6bea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6bee:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6bf2:	2301      	movs	r3, #1
    6bf4:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6bf8:	4a11      	ldr	r2, [pc, #68]	; (6c40 <att_read_rsp+0xa4>)
	data.chan = chan;
    6bfa:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6bfc:	466b      	mov	r3, sp
    6bfe:	4631      	mov	r1, r6
    6c00:	4630      	mov	r0, r6
    6c02:	f015 fa80 	bl	1c106 <bt_gatt_foreach_attr>
	if (data.err) {
    6c06:	f89d 500c 	ldrb.w	r5, [sp, #12]
    6c0a:	b17d      	cbz	r5, 6c2c <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6c0c:	9b02      	ldr	r3, [sp, #8]
    6c0e:	6958      	ldr	r0, [r3, #20]
    6c10:	f7ff fc02 	bl	6418 <tx_meta_data_free>
		net_buf_unref(data.buf);
    6c14:	9802      	ldr	r0, [sp, #8]
    6c16:	f00f f87d 	bl	15d14 <net_buf_unref>
	if (!req) {
    6c1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c1e:	4632      	mov	r2, r6
    6c20:	4639      	mov	r1, r7
    6c22:	4620      	mov	r0, r4
    6c24:	f015 fe27 	bl	1c876 <send_err_rsp.part.0>
		return 0;
    6c28:	2500      	movs	r5, #0
    6c2a:	e7cd      	b.n	6bc8 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
    6c2c:	9902      	ldr	r1, [sp, #8]
    6c2e:	4620      	mov	r0, r4
    6c30:	f015 fc92 	bl	1c558 <bt_att_chan_send_rsp>
	return 0;
    6c34:	e7c8      	b.n	6bc8 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
    6c36:	2501      	movs	r5, #1
    6c38:	e7c6      	b.n	6bc8 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
    6c3a:	250e      	movs	r5, #14
    6c3c:	e7c4      	b.n	6bc8 <att_read_rsp+0x2c>
    6c3e:	bf00      	nop
    6c40:	0001c5d3 	.word	0x0001c5d3

00006c44 <att_read_type_req>:
{
    6c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    6c48:	898c      	ldrh	r4, [r1, #12]
    6c4a:	3c04      	subs	r4, #4
    6c4c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    6c4e:	2c02      	cmp	r4, #2
{
    6c50:	4605      	mov	r5, r0
    6c52:	b08c      	sub	sp, #48	; 0x30
    6c54:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    6c56:	d001      	beq.n	6c5c <att_read_type_req+0x18>
    6c58:	2c10      	cmp	r4, #16
    6c5a:	d153      	bne.n	6d04 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
    6c5c:	2104      	movs	r1, #4
    6c5e:	3008      	adds	r0, #8
    6c60:	f017 f990 	bl	1df84 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6c64:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    6c68:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6c6a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6c6c:	1d01      	adds	r1, r0, #4
    6c6e:	4622      	mov	r2, r4
    6c70:	4640      	mov	r0, r8
    6c72:	f013 fead 	bl	1a9d0 <bt_uuid_create>
    6c76:	b188      	cbz	r0, 6c9c <att_read_type_req+0x58>
	if (!start || !end) {
    6c78:	b19e      	cbz	r6, 6ca2 <att_read_type_req+0x5e>
    6c7a:	b18f      	cbz	r7, 6ca0 <att_read_type_req+0x5c>
	if (start > end) {
    6c7c:	42b7      	cmp	r7, r6
    6c7e:	d310      	bcc.n	6ca2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    6c80:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    6c82:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    6c84:	2100      	movs	r1, #0
    6c86:	eb0d 0002 	add.w	r0, sp, r2
    6c8a:	f013 fded 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6c8e:	2201      	movs	r2, #1
    6c90:	2109      	movs	r1, #9
    6c92:	4620      	mov	r0, r4
    6c94:	f015 fe32 	bl	1c8fc <bt_att_create_pdu>
    6c98:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6c9a:	b968      	cbnz	r0, 6cb8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    6c9c:	240e      	movs	r4, #14
    6c9e:	e007      	b.n	6cb0 <att_read_type_req+0x6c>
			*err = 0U;
    6ca0:	463e      	mov	r6, r7
	if (!req) {
    6ca2:	2301      	movs	r3, #1
    6ca4:	4632      	mov	r2, r6
    6ca6:	2108      	movs	r1, #8
    6ca8:	4628      	mov	r0, r5
    6caa:	f015 fde4 	bl	1c876 <send_err_rsp.part.0>
		return 0;
    6cae:	2400      	movs	r4, #0
}
    6cb0:	4620      	mov	r0, r4
    6cb2:	b00c      	add	sp, #48	; 0x30
    6cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    6cb8:	2101      	movs	r1, #1
    6cba:	3008      	adds	r0, #8
	data.uuid = uuid;
    6cbc:	e9cd 5806 	strd	r5, r8, [sp, #24]
    6cc0:	f017 f923 	bl	1df0a <net_buf_simple_add>
	data.rsp->len = 0U;
    6cc4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6cc8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6cca:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6ccc:	4a0e      	ldr	r2, [pc, #56]	; (6d08 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
    6cce:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6cd2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6cd4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6cd8:	4630      	mov	r0, r6
    6cda:	ab06      	add	r3, sp, #24
    6cdc:	f015 fa13 	bl	1c106 <bt_gatt_foreach_attr>
	if (data.err) {
    6ce0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6ce4:	b14c      	cbz	r4, 6cfa <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6ce6:	9b08      	ldr	r3, [sp, #32]
    6ce8:	6958      	ldr	r0, [r3, #20]
    6cea:	f7ff fb95 	bl	6418 <tx_meta_data_free>
		net_buf_unref(data.buf);
    6cee:	9808      	ldr	r0, [sp, #32]
    6cf0:	f00f f810 	bl	15d14 <net_buf_unref>
	if (!req) {
    6cf4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6cf8:	e7d4      	b.n	6ca4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    6cfa:	9908      	ldr	r1, [sp, #32]
    6cfc:	4628      	mov	r0, r5
    6cfe:	f015 fc2b 	bl	1c558 <bt_att_chan_send_rsp>
	return 0;
    6d02:	e7d5      	b.n	6cb0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    6d04:	2404      	movs	r4, #4
    6d06:	e7d3      	b.n	6cb0 <att_read_type_req+0x6c>
    6d08:	00006641 	.word	0x00006641

00006d0c <att_find_type_req>:
{
    6d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d10:	4688      	mov	r8, r1
    6d12:	b086      	sub	sp, #24
    6d14:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    6d16:	2106      	movs	r1, #6
    6d18:	f108 0008 	add.w	r0, r8, #8
    6d1c:	f017 f932 	bl	1df84 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    6d20:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    6d22:	b317      	cbz	r7, 6d6a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6d24:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    6d28:	f1b9 0f00 	cmp.w	r9, #0
    6d2c:	d01c      	beq.n	6d68 <att_find_type_req+0x5c>
	if (start > end) {
    6d2e:	454f      	cmp	r7, r9
    6d30:	d81b      	bhi.n	6d6a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    6d32:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6d34:	f8ad 3002 	strh.w	r3, [sp, #2]
    6d38:	2400      	movs	r4, #0
    6d3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6d3e:	a901      	add	r1, sp, #4
    6d40:	4668      	mov	r0, sp
	value = buf->data;
    6d42:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6d46:	f88d 4000 	strb.w	r4, [sp]
    6d4a:	f88d 4004 	strb.w	r4, [sp, #4]
    6d4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    6d52:	f013 fe0f 	bl	1a974 <bt_uuid_cmp>
    6d56:	4606      	mov	r6, r0
    6d58:	b190      	cbz	r0, 6d80 <att_find_type_req+0x74>
	if (!req) {
    6d5a:	230a      	movs	r3, #10
    6d5c:	463a      	mov	r2, r7
    6d5e:	2106      	movs	r1, #6
    6d60:	4628      	mov	r0, r5
    6d62:	f015 fd88 	bl	1c876 <send_err_rsp.part.0>
		return 0;
    6d66:	e007      	b.n	6d78 <att_find_type_req+0x6c>
			*err = 0U;
    6d68:	464f      	mov	r7, r9
	if (!req) {
    6d6a:	2301      	movs	r3, #1
    6d6c:	463a      	mov	r2, r7
    6d6e:	2106      	movs	r1, #6
    6d70:	4628      	mov	r0, r5
    6d72:	f015 fd80 	bl	1c876 <send_err_rsp.part.0>
		return 0;
    6d76:	2400      	movs	r4, #0
}
    6d78:	4620      	mov	r0, r4
    6d7a:	b006      	add	sp, #24
    6d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    6d80:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    6d84:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    6d88:	4601      	mov	r1, r0
    6d8a:	2214      	movs	r2, #20
    6d8c:	a801      	add	r0, sp, #4
    6d8e:	f013 fd6b 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6d92:	4632      	mov	r2, r6
    6d94:	2107      	movs	r1, #7
    6d96:	4640      	mov	r0, r8
    6d98:	f015 fdb0 	bl	1c8fc <bt_att_create_pdu>
    6d9c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6d9e:	b1f8      	cbz	r0, 6de0 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6da0:	230a      	movs	r3, #10
    6da2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6da6:	4a0f      	ldr	r2, [pc, #60]	; (6de4 <att_find_type_req+0xd8>)
	data.value_len = value_len;
    6da8:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6dac:	ab01      	add	r3, sp, #4
    6dae:	4649      	mov	r1, r9
    6db0:	4638      	mov	r0, r7
	data.value = value;
    6db2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    6db6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6db8:	f015 f9a5 	bl	1c106 <bt_gatt_foreach_attr>
	if (data.err) {
    6dbc:	f89d 4015 	ldrb.w	r4, [sp, #21]
    6dc0:	b14c      	cbz	r4, 6dd6 <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6dc2:	9b02      	ldr	r3, [sp, #8]
    6dc4:	6958      	ldr	r0, [r3, #20]
    6dc6:	f7ff fb27 	bl	6418 <tx_meta_data_free>
		net_buf_unref(data.buf);
    6dca:	9802      	ldr	r0, [sp, #8]
    6dcc:	f00e ffa2 	bl	15d14 <net_buf_unref>
	if (!req) {
    6dd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6dd4:	e7ca      	b.n	6d6c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    6dd6:	9902      	ldr	r1, [sp, #8]
    6dd8:	4628      	mov	r0, r5
    6dda:	f015 fbbd 	bl	1c558 <bt_att_chan_send_rsp>
	return 0;
    6dde:	e7cb      	b.n	6d78 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    6de0:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    6de2:	e7c9      	b.n	6d78 <att_find_type_req+0x6c>
    6de4:	0001c11d 	.word	0x0001c11d

00006de8 <att_find_info_req>:
{
    6de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6dea:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6dec:	881e      	ldrh	r6, [r3, #0]
{
    6dee:	b085      	sub	sp, #20
    6df0:	4605      	mov	r5, r0
	if (!start || !end) {
    6df2:	b19e      	cbz	r6, 6e1c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6df4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6df6:	b184      	cbz	r4, 6e1a <att_find_info_req+0x32>
	if (start > end) {
    6df8:	42a6      	cmp	r6, r4
    6dfa:	d80f      	bhi.n	6e1c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    6dfc:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    6dfe:	2210      	movs	r2, #16
    6e00:	2100      	movs	r1, #0
    6e02:	4668      	mov	r0, sp
    6e04:	f013 fd30 	bl	1a868 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6e08:	2200      	movs	r2, #0
    6e0a:	2105      	movs	r1, #5
    6e0c:	4638      	mov	r0, r7
    6e0e:	f015 fd75 	bl	1c8fc <bt_att_create_pdu>
    6e12:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6e14:	b958      	cbnz	r0, 6e2e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    6e16:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    6e18:	e007      	b.n	6e2a <att_find_info_req+0x42>
			*err = 0U;
    6e1a:	4626      	mov	r6, r4
	if (!req) {
    6e1c:	2301      	movs	r3, #1
    6e1e:	4632      	mov	r2, r6
    6e20:	2104      	movs	r1, #4
    6e22:	4628      	mov	r0, r5
    6e24:	f015 fd27 	bl	1c876 <send_err_rsp.part.0>
	return 0;
    6e28:	2000      	movs	r0, #0
}
    6e2a:	b005      	add	sp, #20
    6e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6e2e:	4621      	mov	r1, r4
    6e30:	4a0a      	ldr	r2, [pc, #40]	; (6e5c <att_find_info_req+0x74>)
	data.chan = chan;
    6e32:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6e34:	466b      	mov	r3, sp
    6e36:	4630      	mov	r0, r6
    6e38:	f015 f965 	bl	1c106 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6e3c:	9c02      	ldr	r4, [sp, #8]
    6e3e:	b944      	cbnz	r4, 6e52 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6e40:	9b01      	ldr	r3, [sp, #4]
    6e42:	6958      	ldr	r0, [r3, #20]
    6e44:	f7ff fae8 	bl	6418 <tx_meta_data_free>
		net_buf_unref(data.buf);
    6e48:	9801      	ldr	r0, [sp, #4]
    6e4a:	f00e ff63 	bl	15d14 <net_buf_unref>
	if (!req) {
    6e4e:	230a      	movs	r3, #10
    6e50:	e7e5      	b.n	6e1e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
    6e52:	9901      	ldr	r1, [sp, #4]
    6e54:	4628      	mov	r0, r5
    6e56:	f015 fb7f 	bl	1c558 <bt_att_chan_send_rsp>
    6e5a:	e7e5      	b.n	6e28 <att_find_info_req+0x40>
    6e5c:	0001c245 	.word	0x0001c245

00006e60 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    6e60:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    6e62:	4d0a      	ldr	r5, [pc, #40]	; (6e8c <bt_att_init+0x2c>)
    6e64:	4c0a      	ldr	r4, [pc, #40]	; (6e90 <bt_att_init+0x30>)
    6e66:	4629      	mov	r1, r5
    6e68:	4620      	mov	r0, r4
    6e6a:	f017 fce1 	bl	1e830 <k_queue_append>
    6e6e:	f105 010c 	add.w	r1, r5, #12
    6e72:	4620      	mov	r0, r4
    6e74:	f017 fcdc 	bl	1e830 <k_queue_append>
    6e78:	f105 0118 	add.w	r1, r5, #24
    6e7c:	4620      	mov	r0, r4
    6e7e:	f017 fcd7 	bl	1e830 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    6e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
    6e86:	f000 b9a9 	b.w	71dc <bt_gatt_init>
    6e8a:	bf00      	nop
    6e8c:	20001774 	.word	0x20001774
    6e90:	20000aa8 	.word	0x20000aa8

00006e94 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    6e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    6e96:	2300      	movs	r3, #0
{
    6e98:	4605      	mov	r5, r0
    6e9a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    6e9c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    6e9e:	f011 fd13 	bl	188c8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    6ea2:	4b0b      	ldr	r3, [pc, #44]	; (6ed0 <bt_att_req_alloc+0x3c>)
    6ea4:	681b      	ldr	r3, [r3, #0]
    6ea6:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    6ea8:	bf04      	itt	eq
    6eaa:	2500      	moveq	r5, #0
    6eac:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    6eae:	a901      	add	r1, sp, #4
    6eb0:	4808      	ldr	r0, [pc, #32]	; (6ed4 <bt_att_req_alloc+0x40>)
    6eb2:	462a      	mov	r2, r5
    6eb4:	4623      	mov	r3, r4
    6eb6:	f010 fef5 	bl	17ca4 <k_mem_slab_alloc>
    6eba:	4601      	mov	r1, r0
    6ebc:	b930      	cbnz	r0, 6ecc <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    6ebe:	9801      	ldr	r0, [sp, #4]
    6ec0:	221c      	movs	r2, #28
    6ec2:	f013 fcd1 	bl	1a868 <memset>

	return req;
    6ec6:	9801      	ldr	r0, [sp, #4]
}
    6ec8:	b003      	add	sp, #12
    6eca:	bd30      	pop	{r4, r5, pc}
		return NULL;
    6ecc:	2000      	movs	r0, #0
    6ece:	e7fb      	b.n	6ec8 <bt_att_req_alloc+0x34>
    6ed0:	20001754 	.word	0x20001754
    6ed4:	20000a5c 	.word	0x20000a5c

00006ed8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    6ed8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
    6eda:	6883      	ldr	r3, [r0, #8]
{
    6edc:	9001      	str	r0, [sp, #4]
	if (req->buf) {
    6ede:	b14b      	cbz	r3, 6ef4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    6ee0:	6958      	ldr	r0, [r3, #20]
    6ee2:	f7ff fa99 	bl	6418 <tx_meta_data_free>
		net_buf_unref(req->buf);
    6ee6:	9b01      	ldr	r3, [sp, #4]
    6ee8:	6898      	ldr	r0, [r3, #8]
    6eea:	f00e ff13 	bl	15d14 <net_buf_unref>
		req->buf = NULL;
    6eee:	9b01      	ldr	r3, [sp, #4]
    6ef0:	2200      	movs	r2, #0
    6ef2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    6ef4:	4803      	ldr	r0, [pc, #12]	; (6f04 <bt_att_req_free+0x2c>)
    6ef6:	a901      	add	r1, sp, #4
    6ef8:	f017 fbe3 	bl	1e6c2 <k_mem_slab_free>
}
    6efc:	b003      	add	sp, #12
    6efe:	f85d fb04 	ldr.w	pc, [sp], #4
    6f02:	bf00      	nop
    6f04:	20000a5c 	.word	0x20000a5c

00006f08 <att_handle_rsp>:
{
    6f08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6f0c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    6f0e:	f500 708c 	add.w	r0, r0, #280	; 0x118
{
    6f12:	4688      	mov	r8, r1
    6f14:	4691      	mov	r9, r2
    6f16:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    6f18:	f017 fda7 	bl	1ea6a <k_work_cancel_delayable>
	if (!chan->req) {
    6f1c:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
    6f20:	2600      	movs	r6, #0
    6f22:	b1f0      	cbz	r0, 6f62 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    6f24:	4b10      	ldr	r3, [pc, #64]	; (6f68 <att_handle_rsp+0x60>)
    6f26:	4298      	cmp	r0, r3
    6f28:	d112      	bne.n	6f50 <att_handle_rsp+0x48>
		chan->req = NULL;
    6f2a:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
    6f2e:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    6f30:	6820      	ldr	r0, [r4, #0]
    6f32:	f015 fbe7 	bl	1c704 <att_req_send_process>
	if (func) {
    6f36:	b13d      	cbz	r5, 6f48 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    6f38:	6820      	ldr	r0, [r4, #0]
    6f3a:	f8cd a000 	str.w	sl, [sp]
    6f3e:	6800      	ldr	r0, [r0, #0]
    6f40:	464b      	mov	r3, r9
    6f42:	4642      	mov	r2, r8
    6f44:	4639      	mov	r1, r7
    6f46:	47a8      	blx	r5
}
    6f48:	2000      	movs	r0, #0
    6f4a:	b002      	add	sp, #8
    6f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    6f50:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    6f52:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    6f54:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
    6f58:	f7ff ffbe 	bl	6ed8 <bt_att_req_free>
	chan->req = NULL;
    6f5c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
    6f60:	e7e6      	b.n	6f30 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    6f62:	4605      	mov	r5, r0
    6f64:	e7e4      	b.n	6f30 <att_handle_rsp+0x28>
    6f66:	bf00      	nop
    6f68:	20001758 	.word	0x20001758

00006f6c <bt_att_disconnected>:
{
    6f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
    6f70:	f850 6c08 	ldr.w	r6, [r0, #-8]
{
    6f74:	4604      	mov	r4, r0
	if (!att_chan->att) {
    6f76:	2e00      	cmp	r6, #0
    6f78:	d057      	beq.n	702a <bt_att_disconnected+0xbe>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    6f7a:	f500 71a0 	add.w	r1, r0, #320	; 0x140
    6f7e:	f106 0024 	add.w	r0, r6, #36	; 0x24
    6f82:	f015 faf7 	bl	1c574 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    6f86:	f1a4 0708 	sub.w	r7, r4, #8
    6f8a:	f104 08f8 	add.w	r8, r4, #248	; 0xf8
    6f8e:	2200      	movs	r2, #0
    6f90:	2300      	movs	r3, #0
    6f92:	4640      	mov	r0, r8
    6f94:	f016 ff5c 	bl	1de50 <net_buf_get>
    6f98:	4605      	mov	r5, r0
    6f9a:	bb28      	cbnz	r0, 6fe8 <bt_att_disconnected+0x7c>
	if (chan->req) {
    6f9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    6fa0:	b12b      	cbz	r3, 6fae <bt_att_disconnected+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    6fa2:	4602      	mov	r2, r0
    6fa4:	4601      	mov	r1, r0
    6fa6:	230e      	movs	r3, #14
    6fa8:	4638      	mov	r0, r7
    6faa:	f7ff ffad 	bl	6f08 <att_handle_rsp>
	chan->att = NULL;
    6fae:	2300      	movs	r3, #0
    6fb0:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    6fb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d137      	bne.n	702a <bt_att_disconnected+0xbe>
	att_reset(att);
    6fba:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    6fbc:	9803      	ldr	r0, [sp, #12]
    6fbe:	2200      	movs	r2, #0
    6fc0:	2300      	movs	r3, #0
    6fc2:	300c      	adds	r0, #12
    6fc4:	f016 ff44 	bl	1de50 <net_buf_get>
    6fc8:	4605      	mov	r5, r0
    6fca:	b9a0      	cbnz	r0, 6ff6 <bt_att_disconnected+0x8a>
	while (!sys_slist_is_empty(&att->reqs)) {
    6fcc:	9803      	ldr	r0, [sp, #12]
	return list->head;
    6fce:	6845      	ldr	r5, [r0, #4]
    6fd0:	b9c5      	cbnz	r5, 7004 <bt_att_disconnected+0x98>
	att->conn = NULL;
    6fd2:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    6fd4:	a903      	add	r1, sp, #12
    6fd6:	4816      	ldr	r0, [pc, #88]	; (7030 <bt_att_disconnected+0xc4>)
    6fd8:	f017 fb73 	bl	1e6c2 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
    6fdc:	6820      	ldr	r0, [r4, #0]
}
    6fde:	b004      	add	sp, #16
    6fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
    6fe4:	f000 bd2e 	b.w	7a44 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    6fe8:	6968      	ldr	r0, [r5, #20]
    6fea:	f7ff fa15 	bl	6418 <tx_meta_data_free>
		net_buf_unref(buf);
    6fee:	4628      	mov	r0, r5
    6ff0:	f00e fe90 	bl	15d14 <net_buf_unref>
    6ff4:	e7cb      	b.n	6f8e <bt_att_disconnected+0x22>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    6ff6:	6968      	ldr	r0, [r5, #20]
    6ff8:	f7ff fa0e 	bl	6418 <tx_meta_data_free>
		net_buf_unref(buf);
    6ffc:	4628      	mov	r0, r5
    6ffe:	f00e fe89 	bl	15d14 <net_buf_unref>
    7002:	e7db      	b.n	6fbc <bt_att_disconnected+0x50>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7004:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    7006:	686e      	ldr	r6, [r5, #4]
	return node->next;
    7008:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    700a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    700c:	4295      	cmp	r5, r2
	list->tail = node;
    700e:	bf08      	it	eq
    7010:	6083      	streq	r3, [r0, #8]
    7012:	b136      	cbz	r6, 7022 <bt_att_disconnected+0xb6>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7014:	69ab      	ldr	r3, [r5, #24]
    7016:	9300      	str	r3, [sp, #0]
    7018:	2300      	movs	r3, #0
    701a:	6800      	ldr	r0, [r0, #0]
    701c:	461a      	mov	r2, r3
    701e:	210e      	movs	r1, #14
    7020:	47b0      	blx	r6
		bt_att_req_free(req);
    7022:	4628      	mov	r0, r5
    7024:	f7ff ff58 	bl	6ed8 <bt_att_req_free>
    7028:	e7d0      	b.n	6fcc <bt_att_disconnected+0x60>
}
    702a:	b004      	add	sp, #16
    702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7030:	20000a24 	.word	0x20000a24

00007034 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    7034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7036:	4d0f      	ldr	r5, [pc, #60]	; (7074 <find_cf_cfg+0x40>)
    7038:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    703a:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    703c:	462e      	mov	r6, r5

		if (!conn) {
    703e:	1c68      	adds	r0, r5, #1
    7040:	b964      	cbnz	r4, 705c <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
    7042:	2207      	movs	r2, #7
    7044:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7046:	9400      	str	r4, [sp, #0]
    7048:	f8cd 4003 	str.w	r4, [sp, #3]
    704c:	f013 fbf0 	bl	1a830 <memcmp>
    7050:	b958      	cbnz	r0, 706a <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
    7052:	4630      	mov	r0, r6
    7054:	b003      	add	sp, #12
    7056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7058:	2701      	movs	r7, #1
    705a:	e7ef      	b.n	703c <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    705c:	4602      	mov	r2, r0
    705e:	7829      	ldrb	r1, [r5, #0]
    7060:	4620      	mov	r0, r4
    7062:	f014 fbd8 	bl	1b816 <bt_conn_is_peer_addr_le>
    7066:	2800      	cmp	r0, #0
    7068:	d1f3      	bne.n	7052 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    706a:	3510      	adds	r5, #16
    706c:	2f00      	cmp	r7, #0
    706e:	d0f3      	beq.n	7058 <find_cf_cfg+0x24>
	return NULL;
    7070:	2600      	movs	r6, #0
    7072:	e7ee      	b.n	7052 <find_cf_cfg+0x1e>
    7074:	200017a0 	.word	0x200017a0

00007078 <find_sc_cfg>:
{
    7078:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    707a:	4c0e      	ldr	r4, [pc, #56]	; (70b4 <find_sc_cfg+0x3c>)
    707c:	7823      	ldrb	r3, [r4, #0]
    707e:	4283      	cmp	r3, r0
{
    7080:	4605      	mov	r5, r0
    7082:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    7084:	d00a      	beq.n	709c <find_sc_cfg+0x24>
    7086:	7b23      	ldrb	r3, [r4, #12]
    7088:	42ab      	cmp	r3, r5
    708a:	d111      	bne.n	70b0 <find_sc_cfg+0x38>
    708c:	480a      	ldr	r0, [pc, #40]	; (70b8 <find_sc_cfg+0x40>)
    708e:	2207      	movs	r2, #7
    7090:	4631      	mov	r1, r6
    7092:	f013 fbcd 	bl	1a830 <memcmp>
    7096:	b958      	cbnz	r0, 70b0 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    7098:	2001      	movs	r0, #1
    709a:	e005      	b.n	70a8 <find_sc_cfg+0x30>
    709c:	2207      	movs	r2, #7
    709e:	1c60      	adds	r0, r4, #1
    70a0:	f013 fbc6 	bl	1a830 <memcmp>
		if (id == sc_cfg[i].id &&
    70a4:	2800      	cmp	r0, #0
    70a6:	d1ee      	bne.n	7086 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    70a8:	230c      	movs	r3, #12
    70aa:	fb03 4000 	mla	r0, r3, r0, r4
    70ae:	e000      	b.n	70b2 <find_sc_cfg+0x3a>
	return NULL;
    70b0:	2000      	movs	r0, #0
}
    70b2:	bd70      	pop	{r4, r5, r6, pc}
    70b4:	200028c0 	.word	0x200028c0
    70b8:	200028cd 	.word	0x200028cd

000070bc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    70bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    70c0:	4b2b      	ldr	r3, [pc, #172]	; (7170 <disconnected_cb+0xb4>)
{
    70c2:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    70c4:	6882      	ldr	r2, [r0, #8]
    70c6:	429a      	cmp	r2, r3
{
    70c8:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    70ca:	d12f      	bne.n	712c <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    70cc:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    70ce:	8aab      	ldrh	r3, [r5, #20]
    70d0:	b363      	cbz	r3, 712c <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
    70d2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 7174 <disconnected_cb+0xb8>
    70d6:	1c6c      	adds	r4, r5, #1
    70d8:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    70dc:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    70e0:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    70e4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    70e8:	b19b      	cbz	r3, 7112 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    70ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    70ee:	4622      	mov	r2, r4
    70f0:	4630      	mov	r0, r6
    70f2:	f014 fb90 	bl	1b816 <bt_conn_is_peer_addr_le>
    70f6:	b9e8      	cbnz	r0, 7134 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    70f8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    70fc:	4621      	mov	r1, r4
    70fe:	f7fe fb47 	bl	5790 <bt_conn_lookup_addr_le>
			if (tmp) {
    7102:	b130      	cbz	r0, 7112 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    7104:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    7106:	2b07      	cmp	r3, #7
    7108:	bf08      	it	eq
    710a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    710e:	f014 fae7 	bl	1b6e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    7112:	340a      	adds	r4, #10
    7114:	4554      	cmp	r4, sl
    7116:	d1e5      	bne.n	70e4 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    7118:	f1b8 0f00 	cmp.w	r8, #0
    711c:	d106      	bne.n	712c <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    711e:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    7120:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    7124:	b113      	cbz	r3, 712c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    7126:	4641      	mov	r1, r8
    7128:	4638      	mov	r0, r7
    712a:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    712c:	2001      	movs	r0, #1
    712e:	b003      	add	sp, #12
    7130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7134:	7a30      	ldrb	r0, [r6, #8]
    7136:	4649      	mov	r1, r9
    7138:	f013 ffbd 	bl	1b0b6 <bt_addr_le_is_bonded>
    713c:	b990      	cbnz	r0, 7164 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    713e:	455d      	cmp	r5, fp
    7140:	d102      	bne.n	7148 <disconnected_cb+0x8c>
					sc_clear(conn);
    7142:	4630      	mov	r0, r6
    7144:	f015 ff6a 	bl	1d01c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7148:	2300      	movs	r3, #0
    714a:	4669      	mov	r1, sp
    714c:	4620      	mov	r0, r4
    714e:	9300      	str	r3, [sp, #0]
    7150:	f8cd 3003 	str.w	r3, [sp, #3]
    7154:	f015 fd86 	bl	1cc64 <bt_addr_le_copy>
	cfg->id = 0U;
    7158:	2300      	movs	r3, #0
    715a:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    715e:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    7162:	e7d6      	b.n	7112 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7164:	4649      	mov	r1, r9
    7166:	4620      	mov	r0, r4
    7168:	f015 fd7c 	bl	1cc64 <bt_addr_le_copy>
    716c:	e7d1      	b.n	7112 <disconnected_cb+0x56>
    716e:	bf00      	nop
    7170:	0001cee3 	.word	0x0001cee3
    7174:	20000318 	.word	0x20000318

00007178 <sc_indicate_rsp>:
{
    7178:	b510      	push	{r4, lr}
    717a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    717c:	4816      	ldr	r0, [pc, #88]	; (71d8 <sc_indicate_rsp+0x60>)
    717e:	f3bf 8f5b 	dmb	ish
    7182:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7186:	e853 2f00 	ldrex	r2, [r3]
    718a:	f022 0202 	bic.w	r2, r2, #2
    718e:	e843 2100 	strex	r1, r2, [r3]
    7192:	2900      	cmp	r1, #0
    7194:	d1f7      	bne.n	7186 <sc_indicate_rsp+0xe>
    7196:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    719a:	f3bf 8f5b 	dmb	ish
    719e:	6d03      	ldr	r3, [r0, #80]	; 0x50
    71a0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    71a4:	07da      	lsls	r2, r3, #31
    71a6:	d504      	bpl.n	71b2 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    71a8:	2200      	movs	r2, #0
    71aa:	2300      	movs	r3, #0
    71ac:	3020      	adds	r0, #32
    71ae:	f011 f8db 	bl	18368 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
    71b2:	4620      	mov	r0, r4
    71b4:	f015 fcab 	bl	1cb0e <bt_att_fixed_chan_only>
    71b8:	b160      	cbz	r0, 71d4 <sc_indicate_rsp+0x5c>
		cfg = find_cf_cfg(conn);
    71ba:	4620      	mov	r0, r4
    71bc:	f7ff ff3a 	bl	7034 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    71c0:	b140      	cbz	r0, 71d4 <sc_indicate_rsp+0x5c>
    71c2:	7a03      	ldrb	r3, [r0, #8]
    71c4:	07db      	lsls	r3, r3, #31
    71c6:	d505      	bpl.n	71d4 <sc_indicate_rsp+0x5c>
}
    71c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    71cc:	2100      	movs	r1, #0
    71ce:	300c      	adds	r0, #12
    71d0:	f015 bd68 	b.w	1cca4 <atomic_set_bit>
}
    71d4:	bd10      	pop	{r4, pc}
    71d6:	bf00      	nop
    71d8:	20000f40 	.word	0x20000f40

000071dc <bt_gatt_init>:
{
    71dc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    71de:	4b20      	ldr	r3, [pc, #128]	; (7260 <bt_gatt_init+0x84>)
    71e0:	f3bf 8f5b 	dmb	ish
    71e4:	2201      	movs	r2, #1
    71e6:	e853 1f00 	ldrex	r1, [r3]
    71ea:	2900      	cmp	r1, #0
    71ec:	d103      	bne.n	71f6 <bt_gatt_init+0x1a>
    71ee:	e843 2000 	strex	r0, r2, [r3]
    71f2:	2800      	cmp	r0, #0
    71f4:	d1f7      	bne.n	71e6 <bt_gatt_init+0xa>
    71f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    71fa:	d130      	bne.n	725e <bt_gatt_init+0x82>
    71fc:	f3bf 8f5b 	dmb	ish
    7200:	4b18      	ldr	r3, [pc, #96]	; (7264 <bt_gatt_init+0x88>)
    7202:	e853 1f00 	ldrex	r1, [r3]
    7206:	2900      	cmp	r1, #0
    7208:	d103      	bne.n	7212 <bt_gatt_init+0x36>
    720a:	e843 2000 	strex	r0, r2, [r3]
    720e:	2800      	cmp	r0, #0
    7210:	d1f7      	bne.n	7202 <bt_gatt_init+0x26>
    7212:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    7216:	d108      	bne.n	722a <bt_gatt_init+0x4e>
    7218:	4913      	ldr	r1, [pc, #76]	; (7268 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    721a:	4a14      	ldr	r2, [pc, #80]	; (726c <bt_gatt_init+0x90>)
    721c:	880b      	ldrh	r3, [r1, #0]
    721e:	4c14      	ldr	r4, [pc, #80]	; (7270 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    7220:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7222:	42a2      	cmp	r2, r4
    7224:	d315      	bcc.n	7252 <bt_gatt_init+0x76>
    7226:	b100      	cbz	r0, 722a <bt_gatt_init+0x4e>
    7228:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    722a:	4b12      	ldr	r3, [pc, #72]	; (7274 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    722c:	4912      	ldr	r1, [pc, #72]	; (7278 <bt_gatt_init+0x9c>)
    722e:	4813      	ldr	r0, [pc, #76]	; (727c <bt_gatt_init+0xa0>)
    7230:	2200      	movs	r2, #0
	list->tail = NULL;
    7232:	e9c3 2200 	strd	r2, r2, [r3]
    7236:	f017 fc0a 	bl	1ea4e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    723a:	4810      	ldr	r0, [pc, #64]	; (727c <bt_gatt_init+0xa0>)
    723c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7240:	2300      	movs	r3, #0
    7242:	f011 f85d 	bl	18300 <k_work_schedule>
}
    7246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    724a:	490d      	ldr	r1, [pc, #52]	; (7280 <bt_gatt_init+0xa4>)
    724c:	480d      	ldr	r0, [pc, #52]	; (7284 <bt_gatt_init+0xa8>)
    724e:	f017 bbfe 	b.w	1ea4e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    7252:	6850      	ldr	r0, [r2, #4]
    7254:	4403      	add	r3, r0
    7256:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7258:	3208      	adds	r2, #8
    725a:	2001      	movs	r0, #1
    725c:	e7e1      	b.n	7222 <bt_gatt_init+0x46>
}
    725e:	bd10      	pop	{r4, pc}
    7260:	200017c0 	.word	0x200017c0
    7264:	200017dc 	.word	0x200017dc
    7268:	200028be 	.word	0x200028be
    726c:	0001f350 	.word	0x0001f350
    7270:	0001f380 	.word	0x0001f380
    7274:	20001798 	.word	0x20001798
    7278:	0001d183 	.word	0x0001d183
    727c:	20000ee8 	.word	0x20000ee8
    7280:	00007681 	.word	0x00007681
    7284:	20000f60 	.word	0x20000f60

00007288 <bt_gatt_cb_register>:
	parent->next = child;
    7288:	2300      	movs	r3, #0
    728a:	6043      	str	r3, [r0, #4]
	return list->tail;
    728c:	4b04      	ldr	r3, [pc, #16]	; (72a0 <bt_gatt_cb_register+0x18>)
    728e:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
    7290:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
    7292:	b911      	cbnz	r1, 729a <bt_gatt_cb_register+0x12>
	list->head = node;
    7294:	e9c3 2200 	strd	r2, r2, [r3]
}
    7298:	4770      	bx	lr
	parent->next = child;
    729a:	600a      	str	r2, [r1, #0]
	list->tail = node;
    729c:	605a      	str	r2, [r3, #4]
}
    729e:	4770      	bx	lr
    72a0:	20001798 	.word	0x20001798

000072a4 <bt_gatt_attr_get_handle>:
{
    72a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    72a8:	4603      	mov	r3, r0
    72aa:	b148      	cbz	r0, 72c0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    72ac:	8a00      	ldrh	r0, [r0, #16]
    72ae:	b938      	cbnz	r0, 72c0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    72b0:	4912      	ldr	r1, [pc, #72]	; (72fc <bt_gatt_attr_get_handle+0x58>)
    72b2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 7300 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    72b6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    72b8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    72bc:	4571      	cmp	r1, lr
    72be:	d301      	bcc.n	72c4 <bt_gatt_attr_get_handle+0x20>
}
    72c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    72c4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    72c8:	42bb      	cmp	r3, r7
    72ca:	d304      	bcc.n	72d6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    72cc:	fb0c 7206 	mla	r2, ip, r6, r7
    72d0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    72d2:	4293      	cmp	r3, r2
    72d4:	d90e      	bls.n	72f4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    72d6:	19a2      	adds	r2, r4, r6
    72d8:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    72da:	3108      	adds	r1, #8
    72dc:	4614      	mov	r4, r2
    72de:	e7ed      	b.n	72bc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    72e0:	fb0c 7805 	mla	r8, ip, r5, r7
    72e4:	4543      	cmp	r3, r8
    72e6:	d007      	beq.n	72f8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    72e8:	3501      	adds	r5, #1
    72ea:	1962      	adds	r2, r4, r5
    72ec:	42b5      	cmp	r5, r6
    72ee:	b292      	uxth	r2, r2
    72f0:	d1f6      	bne.n	72e0 <bt_gatt_attr_get_handle+0x3c>
    72f2:	e7f2      	b.n	72da <bt_gatt_attr_get_handle+0x36>
    72f4:	2500      	movs	r5, #0
    72f6:	e7f8      	b.n	72ea <bt_gatt_attr_get_handle+0x46>
    72f8:	4610      	mov	r0, r2
    72fa:	e7e1      	b.n	72c0 <bt_gatt_attr_get_handle+0x1c>
    72fc:	0001f350 	.word	0x0001f350
    7300:	0001f380 	.word	0x0001f380

00007304 <bt_gatt_foreach_attr_type>:
{
    7304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7308:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    730c:	9100      	str	r1, [sp, #0]
    730e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    7310:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7314:	2d00      	cmp	r5, #0
    7316:	bf08      	it	eq
    7318:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    731a:	4b24      	ldr	r3, [pc, #144]	; (73ac <bt_gatt_foreach_attr_type+0xa8>)
    731c:	881b      	ldrh	r3, [r3, #0]
    731e:	4283      	cmp	r3, r0
{
    7320:	4607      	mov	r7, r0
    7322:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    7324:	d23c      	bcs.n	73a0 <bt_gatt_foreach_attr_type+0x9c>
}
    7326:	b003      	add	sp, #12
    7328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    732c:	6873      	ldr	r3, [r6, #4]
    732e:	4423      	add	r3, r4
    7330:	42bb      	cmp	r3, r7
    7332:	d232      	bcs.n	739a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    7334:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7336:	3608      	adds	r6, #8
    7338:	4b1d      	ldr	r3, [pc, #116]	; (73b0 <bt_gatt_foreach_attr_type+0xac>)
    733a:	429e      	cmp	r6, r3
    733c:	d3f6      	bcc.n	732c <bt_gatt_foreach_attr_type+0x28>
    733e:	e7f2      	b.n	7326 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    7340:	5889      	ldr	r1, [r1, r2]
    7342:	9301      	str	r3, [sp, #4]
    7344:	4640      	mov	r0, r8
    7346:	f013 fb15 	bl	1a974 <bt_uuid_cmp>
    734a:	9b01      	ldr	r3, [sp, #4]
    734c:	b190      	cbz	r0, 7374 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    734e:	3401      	adds	r4, #1
    7350:	f10a 0a01 	add.w	sl, sl, #1
    7354:	b2a4      	uxth	r4, r4
    7356:	6873      	ldr	r3, [r6, #4]
    7358:	4553      	cmp	r3, sl
    735a:	d9ec      	bls.n	7336 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    735c:	9b00      	ldr	r3, [sp, #0]
    735e:	429c      	cmp	r4, r3
    7360:	d8e1      	bhi.n	7326 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    7362:	42bc      	cmp	r4, r7
    7364:	d3f3      	bcc.n	734e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    7366:	6831      	ldr	r1, [r6, #0]
    7368:	fb0b f20a 	mul.w	r2, fp, sl
    736c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    736e:	f1b8 0f00 	cmp.w	r8, #0
    7372:	d1e5      	bne.n	7340 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    7374:	f1b9 0f00 	cmp.w	r9, #0
    7378:	d10b      	bne.n	7392 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    737a:	3d01      	subs	r5, #1
    737c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    737e:	4618      	mov	r0, r3
    7380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7384:	4621      	mov	r1, r4
    7386:	4798      	blx	r3
	if (!*num_matches) {
    7388:	2d00      	cmp	r5, #0
    738a:	d0cc      	beq.n	7326 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    738c:	2800      	cmp	r0, #0
    738e:	d1de      	bne.n	734e <bt_gatt_foreach_attr_type+0x4a>
    7390:	e7c9      	b.n	7326 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    7392:	68da      	ldr	r2, [r3, #12]
    7394:	4591      	cmp	r9, r2
    7396:	d1da      	bne.n	734e <bt_gatt_foreach_attr_type+0x4a>
    7398:	e7ef      	b.n	737a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    739a:	f04f 0a00 	mov.w	sl, #0
    739e:	e7da      	b.n	7356 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    73a0:	4e04      	ldr	r6, [pc, #16]	; (73b4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    73a2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    73a4:	f04f 0b14 	mov.w	fp, #20
    73a8:	e7c6      	b.n	7338 <bt_gatt_foreach_attr_type+0x34>
    73aa:	bf00      	nop
    73ac:	200028be 	.word	0x200028be
    73b0:	0001f380 	.word	0x0001f380
    73b4:	0001f350 	.word	0x0001f350

000073b8 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    73b8:	b510      	push	{r4, lr}
    73ba:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    73bc:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    73be:	aa1c      	add	r2, sp, #112	; 0x70
    73c0:	4669      	mov	r1, sp
    73c2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    73c4:	e9cd 3300 	strd	r3, r3, [sp]
    73c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    73cc:	f013 f92e 	bl	1a62c <tc_cmac_setup>
    73d0:	b320      	cbz	r0, 741c <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    73d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    73d6:	2001      	movs	r0, #1
    73d8:	4a11      	ldr	r2, [pc, #68]	; (7420 <db_hash_gen.constprop.0+0x68>)
    73da:	ab04      	add	r3, sp, #16
    73dc:	f015 fec6 	bl	1d16c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    73e0:	4810      	ldr	r0, [pc, #64]	; (7424 <db_hash_gen.constprop.0+0x6c>)
    73e2:	a904      	add	r1, sp, #16
    73e4:	f013 f9b8 	bl	1a758 <tc_cmac_final>
    73e8:	b1c0      	cbz	r0, 741c <db_hash_gen.constprop.0+0x64>
    73ea:	4b0e      	ldr	r3, [pc, #56]	; (7424 <db_hash_gen.constprop.0+0x6c>)
    73ec:	2208      	movs	r2, #8
    73ee:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    73f2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    73f4:	780c      	ldrb	r4, [r1, #0]
    73f6:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    73fa:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    73fc:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    7400:	d1f7      	bne.n	73f2 <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7402:	f3bf 8f5b 	dmb	ish
    7406:	4b08      	ldr	r3, [pc, #32]	; (7428 <db_hash_gen.constprop.0+0x70>)
    7408:	e853 2f00 	ldrex	r2, [r3]
    740c:	f042 0204 	orr.w	r2, r2, #4
    7410:	e843 2100 	strex	r1, r2, [r3]
    7414:	2900      	cmp	r1, #0
    7416:	d1f7      	bne.n	7408 <db_hash_gen.constprop.0+0x50>
    7418:	f3bf 8f5b 	dmb	ish
}
    741c:	b048      	add	sp, #288	; 0x120
    741e:	bd10      	pop	{r4, pc}
    7420:	0001cbbb 	.word	0x0001cbbb
    7424:	20000ed8 	.word	0x20000ed8
    7428:	20000f90 	.word	0x20000f90

0000742c <db_hash_read>:
{
    742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7430:	491d      	ldr	r1, [pc, #116]	; (74a8 <db_hash_read+0x7c>)
{
    7432:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    7436:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7438:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    743c:	461f      	mov	r7, r3
    743e:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7440:	f017 fb27 	bl	1ea92 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7444:	f3bf 8f5b 	dmb	ish
    7448:	4b18      	ldr	r3, [pc, #96]	; (74ac <db_hash_read+0x80>)
    744a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    744c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    7450:	0759      	lsls	r1, r3, #29
    7452:	d401      	bmi.n	7458 <db_hash_read+0x2c>
		db_hash_gen(true);
    7454:	f7ff ffb0 	bl	73b8 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
    7458:	4640      	mov	r0, r8
    745a:	f7ff fdeb 	bl	7034 <find_cf_cfg>
	if (cfg &&
    745e:	4601      	mov	r1, r0
    7460:	b170      	cbz	r0, 7480 <db_hash_read+0x54>
    7462:	7a03      	ldrb	r3, [r0, #8]
    7464:	07da      	lsls	r2, r3, #31
    7466:	d50b      	bpl.n	7480 <db_hash_read+0x54>
    7468:	f3bf 8f5b 	dmb	ish
    746c:	68cb      	ldr	r3, [r1, #12]
    746e:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
    7472:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    7474:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
    7478:	d402      	bmi.n	7480 <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
    747a:	2101      	movs	r1, #1
    747c:	f015 fc12 	bl	1cca4 <atomic_set_bit>
	if (offset > value_len) {
    7480:	2e10      	cmp	r6, #16
    7482:	d80d      	bhi.n	74a0 <db_hash_read+0x74>
	len = MIN(buf_len, value_len - offset);
    7484:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    7488:	4909      	ldr	r1, [pc, #36]	; (74b0 <db_hash_read+0x84>)
	len = MIN(buf_len, value_len - offset);
    748a:	42bc      	cmp	r4, r7
    748c:	bfa8      	it	ge
    748e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    7490:	4622      	mov	r2, r4
    7492:	4431      	add	r1, r6
    7494:	4628      	mov	r0, r5
    7496:	f013 f9dc 	bl	1a852 <memcpy>
}
    749a:	4620      	mov	r0, r4
    749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    74a0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    74a4:	e7f9      	b.n	749a <db_hash_read+0x6e>
    74a6:	bf00      	nop
    74a8:	20000f18 	.word	0x20000f18
    74ac:	20000f40 	.word	0x20000f40
    74b0:	20000ed8 	.word	0x20000ed8

000074b4 <bt_gatt_find_by_uuid>:
{
    74b4:	b530      	push	{r4, r5, lr}
    74b6:	b087      	sub	sp, #28
	struct bt_gatt_attr *found = NULL;
    74b8:	2300      	movs	r3, #0
{
    74ba:	460c      	mov	r4, r1
    74bc:	4615      	mov	r5, r2
	struct bt_gatt_attr *found = NULL;
    74be:	9305      	str	r3, [sp, #20]
	uint16_t start_handle = bt_gatt_attr_value_handle(attr);
    74c0:	f015 fe06 	bl	1d0d0 <bt_gatt_attr_value_handle>
	uint16_t end_handle = start_handle && attr_count ?
    74c4:	b178      	cbz	r0, 74e6 <bt_gatt_find_by_uuid+0x32>
    74c6:	b174      	cbz	r4, 74e6 <bt_gatt_find_by_uuid+0x32>
    74c8:	1901      	adds	r1, r0, r4
    74ca:	b289      	uxth	r1, r1
	bt_gatt_foreach_attr_type(start_handle, end_handle, uuid, NULL, 1,
    74cc:	ab05      	add	r3, sp, #20
    74ce:	9302      	str	r3, [sp, #8]
    74d0:	4b06      	ldr	r3, [pc, #24]	; (74ec <bt_gatt_find_by_uuid+0x38>)
    74d2:	9301      	str	r3, [sp, #4]
    74d4:	2301      	movs	r3, #1
    74d6:	9300      	str	r3, [sp, #0]
    74d8:	462a      	mov	r2, r5
    74da:	2300      	movs	r3, #0
    74dc:	f7ff ff12 	bl	7304 <bt_gatt_foreach_attr_type>
}
    74e0:	9805      	ldr	r0, [sp, #20]
    74e2:	b007      	add	sp, #28
    74e4:	bd30      	pop	{r4, r5, pc}
	uint16_t end_handle = start_handle && attr_count ?
    74e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    74ea:	e7ef      	b.n	74cc <bt_gatt_find_by_uuid+0x18>
    74ec:	0001cb6b 	.word	0x0001cb6b

000074f0 <gatt_indicate>:
{
    74f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74f4:	4615      	mov	r5, r2
    74f6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    74f8:	2214      	movs	r2, #20
    74fa:	6869      	ldr	r1, [r5, #4]
{
    74fc:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    74fe:	f015 fe5d 	bl	1d1bc <bt_gatt_check_perm>
    7502:	4607      	mov	r7, r0
    7504:	2800      	cmp	r0, #0
    7506:	d13c      	bne.n	7582 <gatt_indicate+0x92>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7508:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    750c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    750e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7510:	f7ff fcc0 	bl	6e94 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    7514:	3602      	adds	r6, #2
	if (!req) {
    7516:	4604      	mov	r4, r0
    7518:	b920      	cbnz	r0, 7524 <gatt_indicate+0x34>
		return -ENOMEM;
    751a:	f06f 050b 	mvn.w	r5, #11
}
    751e:	4628      	mov	r0, r5
    7520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    7524:	4b18      	ldr	r3, [pc, #96]	; (7588 <gatt_indicate+0x98>)
	req->len = len;
    7526:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    7528:	211d      	movs	r1, #29
    752a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
    752c:	60c7      	str	r7, [r0, #12]
	req->func = func;
    752e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    7530:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    7532:	4632      	mov	r2, r6
    7534:	4640      	mov	r0, r8
    7536:	f015 f9e1 	bl	1c8fc <bt_att_create_pdu>
	if (!buf) {
    753a:	4606      	mov	r6, r0
    753c:	b918      	cbnz	r0, 7546 <gatt_indicate+0x56>
		bt_att_req_free(req);
    753e:	4620      	mov	r0, r4
    7540:	f7ff fcca 	bl	6ed8 <bt_att_req_free>
    7544:	e7e9      	b.n	751a <gatt_indicate+0x2a>
	return net_buf_simple_add(&buf->b, len);
    7546:	f100 0a08 	add.w	sl, r0, #8
    754a:	2102      	movs	r1, #2
    754c:	4650      	mov	r0, sl
    754e:	f016 fcdc 	bl	1df0a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    7552:	4607      	mov	r7, r0
    7554:	8aa9      	ldrh	r1, [r5, #20]
    7556:	f827 9b02 	strh.w	r9, [r7], #2
    755a:	4650      	mov	r0, sl
    755c:	f016 fcd5 	bl	1df0a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    7560:	8aaa      	ldrh	r2, [r5, #20]
    7562:	6929      	ldr	r1, [r5, #16]
    7564:	4638      	mov	r0, r7
    7566:	f013 f974 	bl	1a852 <memcpy>
	req->buf = buf;
    756a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    756c:	4621      	mov	r1, r4
    756e:	4640      	mov	r0, r8
    7570:	f015 fab8 	bl	1cae4 <bt_att_req_send>
	if (err) {
    7574:	4605      	mov	r5, r0
    7576:	2800      	cmp	r0, #0
    7578:	d0d1      	beq.n	751e <gatt_indicate+0x2e>
		bt_att_req_free(req);
    757a:	4620      	mov	r0, r4
    757c:	f7ff fcac 	bl	6ed8 <bt_att_req_free>
    7580:	e7cd      	b.n	751e <gatt_indicate+0x2e>
		return -EPERM;
    7582:	f04f 35ff 	mov.w	r5, #4294967295
    7586:	e7ca      	b.n	751e <gatt_indicate+0x2e>
    7588:	0001cb8d 	.word	0x0001cb8d

0000758c <bt_gatt_indicate>:
{
    758c:	b530      	push	{r4, r5, lr}
    758e:	4b39      	ldr	r3, [pc, #228]	; (7674 <bt_gatt_indicate+0xe8>)
    7590:	f3bf 8f5b 	dmb	ish
    7594:	681b      	ldr	r3, [r3, #0]
    7596:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    759a:	075a      	lsls	r2, r3, #29
{
    759c:	b08b      	sub	sp, #44	; 0x2c
    759e:	4604      	mov	r4, r0
    75a0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    75a2:	d561      	bpl.n	7668 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    75a4:	b110      	cbz	r0, 75ac <bt_gatt_indicate+0x20>
    75a6:	7b43      	ldrb	r3, [r0, #13]
    75a8:	2b07      	cmp	r3, #7
    75aa:	d160      	bne.n	766e <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    75ac:	6868      	ldr	r0, [r5, #4]
    75ae:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    75b0:	f7ff fe78 	bl	72a4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    75b4:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    75b6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    75ba:	b33a      	cbz	r2, 760c <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    75bc:	a905      	add	r1, sp, #20
    75be:	9102      	str	r1, [sp, #8]
    75c0:	492d      	ldr	r1, [pc, #180]	; (7678 <bt_gatt_indicate+0xec>)
    75c2:	9101      	str	r1, [sp, #4]
    75c4:	2101      	movs	r1, #1
	found->attr = NULL;
    75c6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    75c8:	9100      	str	r1, [sp, #0]
    75ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    75ce:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    75d0:	f7ff fe98 	bl	7304 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    75d4:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    75d6:	b91b      	cbnz	r3, 75e0 <bt_gatt_indicate+0x54>
			return -ENOENT;
    75d8:	f06f 0001 	mvn.w	r0, #1
}
    75dc:	b00b      	add	sp, #44	; 0x2c
    75de:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    75e0:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    75e2:	9b05      	ldr	r3, [sp, #20]
    75e4:	6818      	ldr	r0, [r3, #0]
    75e6:	2300      	movs	r3, #0
    75e8:	f88d 3010 	strb.w	r3, [sp, #16]
    75ec:	a904      	add	r1, sp, #16
    75ee:	f642 0303 	movw	r3, #10243	; 0x2803
    75f2:	f8ad 3012 	strh.w	r3, [sp, #18]
    75f6:	f013 f9bd 	bl	1a974 <bt_uuid_cmp>
    75fa:	b970      	cbnz	r0, 761a <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    75fc:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    75fe:	68c3      	ldr	r3, [r0, #12]
    7600:	799b      	ldrb	r3, [r3, #6]
    7602:	069b      	lsls	r3, r3, #26
    7604:	d405      	bmi.n	7612 <bt_gatt_indicate+0x86>
			return -EINVAL;
    7606:	f06f 0015 	mvn.w	r0, #21
    760a:	e7e7      	b.n	75dc <bt_gatt_indicate+0x50>
		if (!data.handle) {
    760c:	2800      	cmp	r0, #0
    760e:	d1e8      	bne.n	75e2 <bt_gatt_indicate+0x56>
    7610:	e7e2      	b.n	75d8 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    7612:	f015 fd5d 	bl	1d0d0 <bt_gatt_attr_value_handle>
    7616:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    761a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    761e:	b13c      	cbz	r4, 7630 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    7620:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    7622:	4601      	mov	r1, r0
		params->_ref = 1;
    7624:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    7626:	462a      	mov	r2, r5
    7628:	4620      	mov	r0, r4
    762a:	f7ff ff61 	bl	74f0 <gatt_indicate>
    762e:	e7d5      	b.n	75dc <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    7630:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    7634:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    7636:	2302      	movs	r3, #2
    7638:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    763c:	f642 1302 	movw	r3, #10498	; 0x2902
    7640:	f8ad 3012 	strh.w	r3, [sp, #18]
    7644:	ab05      	add	r3, sp, #20
    7646:	9302      	str	r3, [sp, #8]
    7648:	4b0c      	ldr	r3, [pc, #48]	; (767c <bt_gatt_indicate+0xf0>)
    764a:	9301      	str	r3, [sp, #4]
    764c:	2301      	movs	r3, #1
    764e:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    7650:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7652:	4623      	mov	r3, r4
    7654:	aa04      	add	r2, sp, #16
    7656:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    765a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    765c:	f88d 4010 	strb.w	r4, [sp, #16]
    7660:	f7ff fe50 	bl	7304 <bt_gatt_foreach_attr_type>
	return data.err;
    7664:	9807      	ldr	r0, [sp, #28]
    7666:	e7b9      	b.n	75dc <bt_gatt_indicate+0x50>
		return -EAGAIN;
    7668:	f06f 000a 	mvn.w	r0, #10
    766c:	e7b6      	b.n	75dc <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    766e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7672:	e7b3      	b.n	75dc <bt_gatt_indicate+0x50>
    7674:	200000cc 	.word	0x200000cc
    7678:	0001cbb3 	.word	0x0001cbb3
    767c:	000077dd 	.word	0x000077dd

00007680 <sc_process>:
{
    7680:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7682:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    7686:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    768a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    768e:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    7692:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7694:	f1a0 0120 	sub.w	r1, r0, #32
    7698:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    769c:	f3bf 8f5b 	dmb	ish
    76a0:	e854 2f00 	ldrex	r2, [r4]
    76a4:	f022 0201 	bic.w	r2, r2, #1
    76a8:	e844 2000 	strex	r0, r2, [r4]
    76ac:	2800      	cmp	r0, #0
    76ae:	d1f7      	bne.n	76a0 <sc_process+0x20>
    76b0:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    76b4:	4a0c      	ldr	r2, [pc, #48]	; (76e8 <sc_process+0x68>)
    76b6:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    76ba:	4a0c      	ldr	r2, [pc, #48]	; (76ec <sc_process+0x6c>)
    76bc:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    76c0:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    76c2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    76c4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    76c8:	2204      	movs	r2, #4
	sc->start = 0U;
    76ca:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    76ce:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    76d2:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    76d6:	f7ff ff59 	bl	758c <bt_gatt_indicate>
    76da:	b918      	cbnz	r0, 76e4 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    76dc:	2101      	movs	r1, #1
    76de:	4620      	mov	r0, r4
    76e0:	f015 fae0 	bl	1cca4 <atomic_set_bit>
}
    76e4:	b002      	add	sp, #8
    76e6:	bd10      	pop	{r4, pc}
    76e8:	0001fa14 	.word	0x0001fa14
    76ec:	00007179 	.word	0x00007179

000076f0 <bt_gatt_notify_cb>:
{
    76f0:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    76f2:	4b37      	ldr	r3, [pc, #220]	; (77d0 <bt_gatt_notify_cb+0xe0>)
    76f4:	f3bf 8f5b 	dmb	ish
    76f8:	681b      	ldr	r3, [r3, #0]
    76fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    76fe:	075a      	lsls	r2, r3, #29
{
    7700:	b08b      	sub	sp, #44	; 0x2c
    7702:	4604      	mov	r4, r0
    7704:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7706:	d55d      	bpl.n	77c4 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    7708:	b110      	cbz	r0, 7710 <bt_gatt_notify_cb+0x20>
    770a:	7b43      	ldrb	r3, [r0, #13]
    770c:	2b07      	cmp	r3, #7
    770e:	d15c      	bne.n	77ca <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
    7710:	6868      	ldr	r0, [r5, #4]
    7712:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7714:	f7ff fdc6 	bl	72a4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    7718:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    771a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    771e:	b33a      	cbz	r2, 7770 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7720:	a905      	add	r1, sp, #20
    7722:	9102      	str	r1, [sp, #8]
    7724:	492b      	ldr	r1, [pc, #172]	; (77d4 <bt_gatt_notify_cb+0xe4>)
    7726:	9101      	str	r1, [sp, #4]
    7728:	2101      	movs	r1, #1
	found->attr = NULL;
    772a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    772c:	9100      	str	r1, [sp, #0]
    772e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    7732:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7734:	f7ff fde6 	bl	7304 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    7738:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    773a:	b91b      	cbnz	r3, 7744 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
    773c:	f06f 0001 	mvn.w	r0, #1
}
    7740:	b00b      	add	sp, #44	; 0x2c
    7742:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    7744:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    7746:	9b05      	ldr	r3, [sp, #20]
    7748:	6818      	ldr	r0, [r3, #0]
    774a:	2300      	movs	r3, #0
    774c:	f88d 3010 	strb.w	r3, [sp, #16]
    7750:	a904      	add	r1, sp, #16
    7752:	f642 0303 	movw	r3, #10243	; 0x2803
    7756:	f8ad 3012 	strh.w	r3, [sp, #18]
    775a:	f013 f90b 	bl	1a974 <bt_uuid_cmp>
    775e:	b970      	cbnz	r0, 777e <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    7760:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    7762:	68c3      	ldr	r3, [r0, #12]
    7764:	799b      	ldrb	r3, [r3, #6]
    7766:	06db      	lsls	r3, r3, #27
    7768:	d405      	bmi.n	7776 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
    776a:	f06f 0015 	mvn.w	r0, #21
    776e:	e7e7      	b.n	7740 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
    7770:	2800      	cmp	r0, #0
    7772:	d1e8      	bne.n	7746 <bt_gatt_notify_cb+0x56>
    7774:	e7e2      	b.n	773c <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    7776:	f015 fcab 	bl	1d0d0 <bt_gatt_attr_value_handle>
    777a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
    777e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    7782:	b12c      	cbz	r4, 7790 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    7784:	4601      	mov	r1, r0
    7786:	462a      	mov	r2, r5
    7788:	4620      	mov	r0, r4
    778a:	f015 fd42 	bl	1d212 <gatt_notify>
    778e:	e7d7      	b.n	7740 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7790:	f642 1202 	movw	r2, #10498	; 0x2902
    7794:	f8ad 2012 	strh.w	r2, [sp, #18]
    7798:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    779a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    779e:	9202      	str	r2, [sp, #8]
    77a0:	4a0d      	ldr	r2, [pc, #52]	; (77d8 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    77a2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    77a4:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    77a6:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    77aa:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    77ae:	aa04      	add	r2, sp, #16
    77b0:	4623      	mov	r3, r4
    77b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    77b6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    77b8:	f88d 4010 	strb.w	r4, [sp, #16]
    77bc:	f7ff fda2 	bl	7304 <bt_gatt_foreach_attr_type>
	return data.err;
    77c0:	9807      	ldr	r0, [sp, #28]
    77c2:	e7bd      	b.n	7740 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
    77c4:	f06f 000a 	mvn.w	r0, #10
    77c8:	e7ba      	b.n	7740 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
    77ca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    77ce:	e7b7      	b.n	7740 <bt_gatt_notify_cb+0x50>
    77d0:	200000cc 	.word	0x200000cc
    77d4:	0001cbb3 	.word	0x0001cbb3
    77d8:	000077dd 	.word	0x000077dd

000077dc <notify_cb>:
{
    77dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    77e0:	4b3e      	ldr	r3, [pc, #248]	; (78dc <notify_cb+0x100>)
{
    77e2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    77e4:	6882      	ldr	r2, [r0, #8]
    77e6:	429a      	cmp	r2, r3
{
    77e8:	b085      	sub	sp, #20
    77ea:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    77ec:	d005      	beq.n	77fa <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
    77ee:	f04f 0801 	mov.w	r8, #1
}
    77f2:	4640      	mov	r0, r8
    77f4:	b005      	add	sp, #20
    77f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    77fa:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    77fe:	4b38      	ldr	r3, [pc, #224]	; (78e0 <notify_cb+0x104>)
    7800:	4599      	cmp	r9, r3
    7802:	d01a      	beq.n	783a <notify_cb+0x5e>
    7804:	f109 0601 	add.w	r6, r9, #1
    7808:	f109 0a15 	add.w	sl, r9, #21
		data->err = 0;
    780c:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    7810:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    7814:	89a3      	ldrh	r3, [r4, #12]
    7816:	429a      	cmp	r2, r3
    7818:	d10b      	bne.n	7832 <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    781a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    781e:	4631      	mov	r1, r6
    7820:	f7fd ffb6 	bl	5790 <bt_conn_lookup_addr_le>
		if (!conn) {
    7824:	4605      	mov	r5, r0
    7826:	b120      	cbz	r0, 7832 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    7828:	7b43      	ldrb	r3, [r0, #13]
    782a:	2b07      	cmp	r3, #7
    782c:	d02a      	beq.n	7884 <notify_cb+0xa8>
			bt_conn_unref(conn);
    782e:	f013 ff57 	bl	1b6e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    7832:	360a      	adds	r6, #10
    7834:	4556      	cmp	r6, sl
    7836:	d0da      	beq.n	77ee <notify_cb+0x12>
    7838:	e7ea      	b.n	7810 <notify_cb+0x34>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    783a:	2600      	movs	r6, #0
    783c:	4d29      	ldr	r5, [pc, #164]	; (78e4 <notify_cb+0x108>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    783e:	46b0      	mov	r8, r6
    7840:	2207      	movs	r2, #7
    7842:	a902      	add	r1, sp, #8
    7844:	4628      	mov	r0, r5
    7846:	f8cd 8008 	str.w	r8, [sp, #8]
    784a:	f8cd 800b 	str.w	r8, [sp, #11]
    784e:	f012 ffef 	bl	1a830 <memcmp>
    7852:	b178      	cbz	r0, 7874 <notify_cb+0x98>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    7854:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    7858:	2207      	movs	r2, #7
    785a:	4629      	mov	r1, r5
    785c:	f7fd ffb6 	bl	57cc <bt_conn_lookup_state_le>
			if (!conn) {
    7860:	b968      	cbnz	r0, 787e <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
    7862:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    7864:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    7868:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    786a:	4629      	mov	r1, r5
    786c:	8853      	ldrh	r3, [r2, #2]
    786e:	8812      	ldrh	r2, [r2, #0]
    7870:	f015 fbad 	bl	1cfce <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    7874:	350c      	adds	r5, #12
    7876:	2e00      	cmp	r6, #0
    7878:	d1c4      	bne.n	7804 <notify_cb+0x28>
    787a:	2601      	movs	r6, #1
    787c:	e7e0      	b.n	7840 <notify_cb+0x64>
			bt_conn_unref(conn);
    787e:	f013 ff2f 	bl	1b6e0 <bt_conn_unref>
    7882:	e7f7      	b.n	7874 <notify_cb+0x98>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    7884:	f8d9 3020 	ldr.w	r3, [r9, #32]
    7888:	b123      	cbz	r3, 7894 <notify_cb+0xb8>
    788a:	4639      	mov	r1, r7
    788c:	4798      	blx	r3
    788e:	b908      	cbnz	r0, 7894 <notify_cb+0xb8>
			bt_conn_unref(conn);
    7890:	4628      	mov	r0, r5
    7892:	e7cc      	b.n	782e <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
    7894:	2214      	movs	r2, #20
    7896:	4639      	mov	r1, r7
    7898:	4628      	mov	r0, r5
    789a:	f015 fc8f 	bl	1d1bc <bt_gatt_check_perm>
    789e:	4680      	mov	r8, r0
    78a0:	2800      	cmp	r0, #0
    78a2:	d1c6      	bne.n	7832 <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
    78a4:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    78a6:	88a1      	ldrh	r1, [r4, #4]
    78a8:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    78aa:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    78ac:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    78ae:	d111      	bne.n	78d4 <notify_cb+0xf8>
			err = gatt_indicate(conn, data->handle,
    78b0:	f7ff fe1e 	bl	74f0 <gatt_indicate>
			if (err == 0) {
    78b4:	4603      	mov	r3, r0
    78b6:	b918      	cbnz	r0, 78c0 <notify_cb+0xe4>
				data->ind_params->_ref++;
    78b8:	6921      	ldr	r1, [r4, #16]
    78ba:	7d8a      	ldrb	r2, [r1, #22]
    78bc:	3201      	adds	r2, #1
    78be:	758a      	strb	r2, [r1, #22]
		bt_conn_unref(conn);
    78c0:	4628      	mov	r0, r5
    78c2:	9301      	str	r3, [sp, #4]
    78c4:	f013 ff0c 	bl	1b6e0 <bt_conn_unref>
		if (err < 0) {
    78c8:	9b01      	ldr	r3, [sp, #4]
    78ca:	2b00      	cmp	r3, #0
    78cc:	db91      	blt.n	77f2 <notify_cb+0x16>
		data->err = 0;
    78ce:	f8c4 b008 	str.w	fp, [r4, #8]
    78d2:	e7ae      	b.n	7832 <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    78d4:	f015 fc9d 	bl	1d212 <gatt_notify>
    78d8:	4603      	mov	r3, r0
    78da:	e7f1      	b.n	78c0 <notify_cb+0xe4>
    78dc:	0001cee3 	.word	0x0001cee3
    78e0:	20000318 	.word	0x20000318
    78e4:	200028c1 	.word	0x200028c1

000078e8 <update_ccc>:
{
    78e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    78ec:	4b31      	ldr	r3, [pc, #196]	; (79b4 <update_ccc+0xcc>)
{
    78ee:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    78f0:	6882      	ldr	r2, [r0, #8]
    78f2:	429a      	cmp	r2, r3
{
    78f4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    78f6:	d159      	bne.n	79ac <update_ccc+0xc4>
	ccc = attr->user_data;
    78f8:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    78fc:	683c      	ldr	r4, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    78fe:	f108 0501 	add.w	r5, r8, #1
    7902:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
    7906:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    790a:	b1f3      	cbz	r3, 794a <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    790c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    7910:	462a      	mov	r2, r5
    7912:	4620      	mov	r0, r4
    7914:	f013 ff7f 	bl	1b816 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    7918:	b1b8      	cbz	r0, 794a <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    791a:	222a      	movs	r2, #42	; 0x2a
    791c:	4631      	mov	r1, r6
    791e:	4620      	mov	r0, r4
    7920:	f015 fc4c 	bl	1d1bc <bt_gatt_check_perm>
		if (err) {
    7924:	b1a8      	cbz	r0, 7952 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    7926:	2803      	cmp	r0, #3
    7928:	d00f      	beq.n	794a <update_ccc+0x62>
				sec = BT_SECURITY_L3;
    792a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    792c:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
    792e:	bf14      	ite	ne
    7930:	f04f 0a02 	movne.w	sl, #2
    7934:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
    7938:	f013 ff6b 	bl	1b812 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    793c:	4582      	cmp	sl, r0
    793e:	d908      	bls.n	7952 <update_ccc+0x6a>
				if (data->sec < sec) {
    7940:	793b      	ldrb	r3, [r7, #4]
    7942:	4553      	cmp	r3, sl
    7944:	d201      	bcs.n	794a <update_ccc+0x62>
					data->sec = sec;
    7946:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    794a:	350a      	adds	r5, #10
    794c:	454d      	cmp	r5, r9
    794e:	d02d      	beq.n	79ac <update_ccc+0xc4>
    7950:	e7d9      	b.n	7906 <update_ccc+0x1e>
		gatt_ccc_changed(attr, ccc);
    7952:	4641      	mov	r1, r8
    7954:	4630      	mov	r0, r6
    7956:	f015 f90b 	bl	1cb70 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    795a:	4b17      	ldr	r3, [pc, #92]	; (79b8 <update_ccc+0xd0>)
    795c:	4598      	cmp	r8, r3
    795e:	d125      	bne.n	79ac <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    7960:	7a20      	ldrb	r0, [r4, #8]
    7962:	f104 0188 	add.w	r1, r4, #136	; 0x88
    7966:	f7ff fb87 	bl	7078 <find_sc_cfg>
	if (!cfg) {
    796a:	b1f8      	cbz	r0, 79ac <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
    796c:	8902      	ldrh	r2, [r0, #8]
    796e:	8943      	ldrh	r3, [r0, #10]
    7970:	ea52 0103 	orrs.w	r1, r2, r3
    7974:	d01a      	beq.n	79ac <update_ccc+0xc4>
	index = bt_conn_index(conn);
    7976:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    7978:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    797c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    7980:	f7fd fdfa 	bl	5578 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7984:	490d      	ldr	r1, [pc, #52]	; (79bc <update_ccc+0xd4>)
    7986:	4a0e      	ldr	r2, [pc, #56]	; (79c0 <update_ccc+0xd8>)
    7988:	2318      	movs	r3, #24
    798a:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    798e:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7990:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    7992:	4a0c      	ldr	r2, [pc, #48]	; (79c4 <update_ccc+0xdc>)
    7994:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    7996:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    799c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    799e:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    79a0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    79a4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    79a6:	4620      	mov	r0, r4
    79a8:	f7ff fdf0 	bl	758c <bt_gatt_indicate>
}
    79ac:	2001      	movs	r0, #1
    79ae:	b002      	add	sp, #8
    79b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79b4:	0001cee3 	.word	0x0001cee3
    79b8:	20000318 	.word	0x20000318
    79bc:	200017c4 	.word	0x200017c4
    79c0:	0001fa14 	.word	0x0001fa14
    79c4:	0001d063 	.word	0x0001d063

000079c8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    79c8:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    79ca:	4a0b      	ldr	r2, [pc, #44]	; (79f8 <bt_gatt_connected+0x30>)
	data.conn = conn;
    79cc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    79ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    79d2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    79d4:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    79d6:	2001      	movs	r0, #1
    79d8:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    79dc:	f015 fbc6 	bl	1d16c <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
    79e0:	4620      	mov	r0, r4
    79e2:	f013 ff16 	bl	1b812 <bt_conn_get_security>
    79e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    79ea:	4288      	cmp	r0, r1
    79ec:	d202      	bcs.n	79f4 <bt_gatt_connected+0x2c>
		int err = bt_conn_set_security(conn, data.sec);
    79ee:	4620      	mov	r0, r4
    79f0:	f013 fedf 	bl	1b7b2 <bt_conn_set_security>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    79f4:	b002      	add	sp, #8
    79f6:	bd10      	pop	{r4, pc}
    79f8:	000078e9 	.word	0x000078e9

000079fc <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    79fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    79fe:	4b08      	ldr	r3, [pc, #32]	; (7a20 <bt_gatt_att_max_mtu_changed+0x24>)
    7a00:	681c      	ldr	r4, [r3, #0]
    7a02:	4605      	mov	r5, r0
    7a04:	460e      	mov	r6, r1
    7a06:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7a08:	b14c      	cbz	r4, 7a1e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    7a0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7a0e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    7a10:	b11b      	cbz	r3, 7a1a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    7a12:	463a      	mov	r2, r7
    7a14:	4631      	mov	r1, r6
    7a16:	4628      	mov	r0, r5
    7a18:	4798      	blx	r3
	return node->next;
    7a1a:	6864      	ldr	r4, [r4, #4]
    7a1c:	e7f4      	b.n	7a08 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    7a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a20:	20001798 	.word	0x20001798

00007a24 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    7a24:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7a26:	4a06      	ldr	r2, [pc, #24]	; (7a40 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    7a28:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7a2a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    7a2c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7a2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    7a32:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7a36:	f015 fb99 	bl	1d16c <bt_gatt_foreach_attr>
}
    7a3a:	b003      	add	sp, #12
    7a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    7a40:	000078e9 	.word	0x000078e9

00007a44 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    7a44:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7a46:	4603      	mov	r3, r0
    7a48:	4a0f      	ldr	r2, [pc, #60]	; (7a88 <bt_gatt_disconnected+0x44>)
{
    7a4a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7a4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7a50:	2001      	movs	r0, #1
    7a52:	f015 fb8b 	bl	1d16c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    7a56:	4620      	mov	r0, r4
    7a58:	f7ff faec 	bl	7034 <find_cf_cfg>
	if (!cfg) {
    7a5c:	4605      	mov	r5, r0
    7a5e:	b188      	cbz	r0, 7a84 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7a60:	f104 0688 	add.w	r6, r4, #136	; 0x88
    7a64:	7a20      	ldrb	r0, [r4, #8]
    7a66:	4631      	mov	r1, r6
    7a68:	f013 fb25 	bl	1b0b6 <bt_addr_le_is_bonded>
    7a6c:	b920      	cbnz	r0, 7a78 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    7a6e:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    7a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    7a74:	f015 b8f9 	b.w	1cc6a <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7a78:	4631      	mov	r1, r6
    7a7a:	1c68      	adds	r0, r5, #1
}
    7a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7a80:	f015 b8f0 	b.w	1cc64 <bt_addr_le_copy>
}
    7a84:	bd70      	pop	{r4, r5, r6, pc}
    7a86:	bf00      	nop
    7a88:	000070bd 	.word	0x000070bd

00007a8c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    7a8c:	4b10      	ldr	r3, [pc, #64]	; (7ad0 <get_io_capa+0x44>)
    7a8e:	681b      	ldr	r3, [r3, #0]
    7a90:	b1bb      	cbz	r3, 7ac2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    7a92:	681a      	ldr	r2, [r3, #0]
    7a94:	b142      	cbz	r2, 7aa8 <get_io_capa+0x1c>
    7a96:	6859      	ldr	r1, [r3, #4]
    7a98:	b131      	cbz	r1, 7aa8 <get_io_capa+0x1c>
    7a9a:	6899      	ldr	r1, [r3, #8]
    7a9c:	b911      	cbnz	r1, 7aa4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    7a9e:	490d      	ldr	r1, [pc, #52]	; (7ad4 <get_io_capa+0x48>)
    7aa0:	7809      	ldrb	r1, [r1, #0]
    7aa2:	b939      	cbnz	r1, 7ab4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    7aa4:	2004      	movs	r0, #4
    7aa6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    7aa8:	490a      	ldr	r1, [pc, #40]	; (7ad4 <get_io_capa+0x48>)
    7aaa:	7809      	ldrb	r1, [r1, #0]
    7aac:	b111      	cbz	r1, 7ab4 <get_io_capa+0x28>
    7aae:	b10a      	cbz	r2, 7ab4 <get_io_capa+0x28>
    7ab0:	6899      	ldr	r1, [r3, #8]
    7ab2:	b941      	cbnz	r1, 7ac6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    7ab4:	685b      	ldr	r3, [r3, #4]
    7ab6:	b943      	cbnz	r3, 7aca <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    7ab8:	2a00      	cmp	r2, #0
    7aba:	bf0c      	ite	eq
    7abc:	2003      	moveq	r0, #3
    7abe:	2000      	movne	r0, #0
    7ac0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    7ac2:	2003      	movs	r0, #3
    7ac4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    7ac6:	2001      	movs	r0, #1
    7ac8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    7aca:	2002      	movs	r0, #2
	}
}
    7acc:	4770      	bx	lr
    7ace:	bf00      	nop
    7ad0:	200016dc 	.word	0x200016dc
    7ad4:	20002993 	.word	0x20002993

00007ad8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    7ad8:	4b06      	ldr	r3, [pc, #24]	; (7af4 <bt_smp_accept+0x1c>)
    7ada:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    7ade:	b928      	cbnz	r0, 7aec <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
    7ae0:	4a05      	ldr	r2, [pc, #20]	; (7af8 <bt_smp_accept+0x20>)
    7ae2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
    7ae6:	33f0      	adds	r3, #240	; 0xf0
    7ae8:	600b      	str	r3, [r1, #0]

		return 0;
    7aea:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    7aec:	f06f 000b 	mvn.w	r0, #11
}
    7af0:	4770      	bx	lr
    7af2:	bf00      	nop
    7af4:	20000f98 	.word	0x20000f98
    7af8:	0001fb90 	.word	0x0001fb90

00007afc <smp_find>:
{
    7afc:	4601      	mov	r1, r0
    7afe:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    7b00:	4803      	ldr	r0, [pc, #12]	; (7b10 <smp_find+0x14>)
    7b02:	f015 fc1c 	bl	1d33e <atomic_test_bit>
	return NULL;
    7b06:	2800      	cmp	r0, #0
}
    7b08:	4802      	ldr	r0, [pc, #8]	; (7b14 <smp_find+0x18>)
    7b0a:	bf08      	it	eq
    7b0c:	2000      	moveq	r0, #0
    7b0e:	bd08      	pop	{r3, pc}
    7b10:	20000f9c 	.word	0x20000f9c
    7b14:	20000f98 	.word	0x20000f98

00007b18 <get_auth.constprop.0>:
	if (sc_supported) {
    7b18:	4b0c      	ldr	r3, [pc, #48]	; (7b4c <get_auth.constprop.0+0x34>)
    7b1a:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    7b1c:	b510      	push	{r4, lr}
	if (sc_supported) {
    7b1e:	b17b      	cbz	r3, 7b40 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    7b20:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    7b24:	f7ff ffb2 	bl	7a8c <get_io_capa>
	if (bondable) {
    7b28:	4b09      	ldr	r3, [pc, #36]	; (7b50 <get_auth.constprop.0+0x38>)
    7b2a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    7b2c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    7b2e:	bf0c      	ite	eq
    7b30:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    7b34:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    7b38:	b12b      	cbz	r3, 7b46 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    7b3a:	f044 0001 	orr.w	r0, r4, #1
}
    7b3e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    7b40:	f000 0407 	and.w	r4, r0, #7
    7b44:	e7ee      	b.n	7b24 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    7b46:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    7b4a:	e7f8      	b.n	7b3e <get_auth.constprop.0+0x26>
    7b4c:	20002993 	.word	0x20002993
    7b50:	20000a08 	.word	0x20000a08

00007b54 <smp_init>:
{
    7b54:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
    7b56:	22f0      	movs	r2, #240	; 0xf0
{
    7b58:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
    7b5a:	2100      	movs	r1, #0
    7b5c:	f012 fe84 	bl	1a868 <memset>
	if (bt_rand(smp->prnd, 16)) {
    7b60:	2110      	movs	r1, #16
    7b62:	f105 0027 	add.w	r0, r5, #39	; 0x27
    7b66:	f003 ff81 	bl	ba6c <bt_rand>
    7b6a:	4604      	mov	r4, r0
    7b6c:	b948      	cbnz	r0, 7b82 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    7b6e:	2105      	movs	r1, #5
    7b70:	4628      	mov	r0, r5
    7b72:	f015 fcd7 	bl	1d524 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    7b76:	f7fd fa23 	bl	4fc0 <bt_pub_key_get>
    7b7a:	4b03      	ldr	r3, [pc, #12]	; (7b88 <smp_init+0x34>)
    7b7c:	6018      	str	r0, [r3, #0]
}
    7b7e:	4620      	mov	r0, r4
    7b80:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    7b82:	2408      	movs	r4, #8
    7b84:	e7fb      	b.n	7b7e <smp_init+0x2a>
    7b86:	bf00      	nop
    7b88:	200017e0 	.word	0x200017e0

00007b8c <smp_dhkey_generate>:
{
    7b8c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    7b8e:	1d05      	adds	r5, r0, #4
{
    7b90:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    7b92:	2108      	movs	r1, #8
    7b94:	4628      	mov	r0, r5
    7b96:	f015 fcc5 	bl	1d524 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    7b9a:	4906      	ldr	r1, [pc, #24]	; (7bb4 <smp_dhkey_generate+0x28>)
    7b9c:	f104 0057 	add.w	r0, r4, #87	; 0x57
    7ba0:	f7fd fa1e 	bl	4fe0 <bt_dh_key_gen>
	if (err) {
    7ba4:	b120      	cbz	r0, 7bb0 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    7ba6:	4628      	mov	r0, r5
    7ba8:	2108      	movs	r1, #8
    7baa:	f015 fbf2 	bl	1d392 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
    7bae:	2008      	movs	r0, #8
}
    7bb0:	bd38      	pop	{r3, r4, r5, pc}
    7bb2:	bf00      	nop
    7bb4:	0001da87 	.word	0x0001da87

00007bb8 <smp_send_pairing_confirm>:
{
    7bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    7bba:	7a04      	ldrb	r4, [r0, #8]
    7bbc:	2c02      	cmp	r4, #2
{
    7bbe:	4605      	mov	r5, r0
	switch (smp->method) {
    7bc0:	d823      	bhi.n	7c0a <smp_send_pairing_confirm+0x52>
    7bc2:	b144      	cbz	r4, 7bd6 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    7bc4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
    7bc8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
    7bcc:	40dc      	lsrs	r4, r3
    7bce:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    7bd2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    7bd6:	2103      	movs	r1, #3
    7bd8:	4628      	mov	r0, r5
    7bda:	f015 fcf5 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!buf) {
    7bde:	4606      	mov	r6, r0
    7be0:	b1a8      	cbz	r0, 7c0e <smp_send_pairing_confirm+0x56>
    7be2:	2110      	movs	r1, #16
    7be4:	3008      	adds	r0, #8
    7be6:	f016 f990 	bl	1df0a <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    7bea:	9000      	str	r0, [sp, #0]
    7bec:	4810      	ldr	r0, [pc, #64]	; (7c30 <smp_send_pairing_confirm+0x78>)
    7bee:	4623      	mov	r3, r4
    7bf0:	6800      	ldr	r0, [r0, #0]
    7bf2:	f105 0227 	add.w	r2, r5, #39	; 0x27
    7bf6:	f105 0157 	add.w	r1, r5, #87	; 0x57
    7bfa:	f015 fc6e 	bl	1d4da <smp_f4>
    7bfe:	4604      	mov	r4, r0
    7c00:	b148      	cbz	r0, 7c16 <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    7c02:	4630      	mov	r0, r6
    7c04:	f00e f886 	bl	15d14 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    7c08:	e001      	b.n	7c0e <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
    7c0a:	2c03      	cmp	r4, #3
    7c0c:	d001      	beq.n	7c12 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
    7c0e:	2008      	movs	r0, #8
    7c10:	e00b      	b.n	7c2a <smp_send_pairing_confirm+0x72>
	switch (smp->method) {
    7c12:	2400      	movs	r4, #0
    7c14:	e7df      	b.n	7bd6 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
    7c16:	4602      	mov	r2, r0
    7c18:	4631      	mov	r1, r6
    7c1a:	4628      	mov	r0, r5
    7c1c:	f015 fbe6 	bl	1d3ec <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    7c20:	1d28      	adds	r0, r5, #4
    7c22:	4621      	mov	r1, r4
    7c24:	f015 fbb5 	bl	1d392 <atomic_clear_bit>
	return 0;
    7c28:	4620      	mov	r0, r4
}
    7c2a:	b002      	add	sp, #8
    7c2c:	bd70      	pop	{r4, r5, r6, pc}
    7c2e:	bf00      	nop
    7c30:	200017e0 	.word	0x200017e0

00007c34 <smp_public_key_periph>:
{
    7c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    7c38:	1d06      	adds	r6, r0, #4
{
    7c3a:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    7c3c:	210e      	movs	r1, #14
    7c3e:	4630      	mov	r0, r6
    7c40:	f015 fb7d 	bl	1d33e <atomic_test_bit>
    7c44:	b138      	cbz	r0, 7c56 <smp_public_key_periph+0x22>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    7c46:	210c      	movs	r1, #12
    7c48:	4620      	mov	r0, r4
    7c4a:	f015 fcbd 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    7c4e:	4605      	mov	r5, r0
    7c50:	b958      	cbnz	r0, 7c6a <smp_public_key_periph+0x36>
	switch (smp->method) {
    7c52:	2008      	movs	r0, #8
    7c54:	e03c      	b.n	7cd0 <smp_public_key_periph+0x9c>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
    7c56:	4b46      	ldr	r3, [pc, #280]	; (7d70 <smp_public_key_periph+0x13c>)
    7c58:	2220      	movs	r2, #32
    7c5a:	6819      	ldr	r1, [r3, #0]
    7c5c:	f104 0057 	add.w	r0, r4, #87	; 0x57
    7c60:	f012 fde6 	bl	1a830 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    7c64:	2800      	cmp	r0, #0
    7c66:	d1ee      	bne.n	7c46 <smp_public_key_periph+0x12>
    7c68:	e7f3      	b.n	7c52 <smp_public_key_periph+0x1e>
    7c6a:	2140      	movs	r1, #64	; 0x40
    7c6c:	3008      	adds	r0, #8
    7c6e:	f016 f94c 	bl	1df0a <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    7c72:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7d70 <smp_public_key_periph+0x13c>
    7c76:	2220      	movs	r2, #32
    7c78:	f8d8 1000 	ldr.w	r1, [r8]
    7c7c:	4607      	mov	r7, r0
    7c7e:	f012 fde8 	bl	1a852 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    7c82:	f8d8 1000 	ldr.w	r1, [r8]
    7c86:	2220      	movs	r2, #32
    7c88:	4411      	add	r1, r2
    7c8a:	18b8      	adds	r0, r7, r2
    7c8c:	f012 fde1 	bl	1a852 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    7c90:	2200      	movs	r2, #0
    7c92:	4629      	mov	r1, r5
    7c94:	4620      	mov	r0, r4
    7c96:	f015 fba9 	bl	1d3ec <smp_send.constprop.0>
	switch (smp->method) {
    7c9a:	7a23      	ldrb	r3, [r4, #8]
    7c9c:	2b05      	cmp	r3, #5
    7c9e:	d8d8      	bhi.n	7c52 <smp_public_key_periph+0x1e>
    7ca0:	a201      	add	r2, pc, #4	; (adr r2, 7ca8 <smp_public_key_periph+0x74>)
    7ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ca6:	bf00      	nop
    7ca8:	00007cc1 	.word	0x00007cc1
    7cac:	00007d29 	.word	0x00007d29
    7cb0:	00007cd5 	.word	0x00007cd5
    7cb4:	00007cc1 	.word	0x00007cc1
    7cb8:	00007c53 	.word	0x00007c53
    7cbc:	00007d65 	.word	0x00007d65
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    7cc0:	2104      	movs	r1, #4
    7cc2:	4620      	mov	r0, r4
    7cc4:	f015 fc2e 	bl	1d524 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    7cc8:	f7ff ff76 	bl	7bb8 <smp_send_pairing_confirm>
		if (err) {
    7ccc:	2800      	cmp	r0, #0
    7cce:	d03c      	beq.n	7d4a <smp_public_key_periph+0x116>
}
    7cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    7cd4:	2104      	movs	r1, #4
    7cd6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    7cda:	f003 fec7 	bl	ba6c <bt_rand>
    7cde:	2800      	cmp	r0, #0
    7ce0:	d1b7      	bne.n	7c52 <smp_public_key_periph+0x1e>
		smp->passkey %= 1000000;
    7ce2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    7ce6:	4a23      	ldr	r2, [pc, #140]	; (7d74 <smp_public_key_periph+0x140>)
	if (bt_auth && bt_auth->passkey_display) {
    7ce8:	4d23      	ldr	r5, [pc, #140]	; (7d78 <smp_public_key_periph+0x144>)
		smp->passkey %= 1000000;
    7cea:	fbb3 f1f2 	udiv	r1, r3, r2
    7cee:	fb02 3311 	mls	r3, r2, r1, r3
    7cf2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
    7cf6:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    7cf8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
    7cfc:	b163      	cbz	r3, 7d18 <smp_public_key_periph+0xe4>
    7cfe:	681b      	ldr	r3, [r3, #0]
    7d00:	b153      	cbz	r3, 7d18 <smp_public_key_periph+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    7d02:	210b      	movs	r1, #11
    7d04:	4630      	mov	r0, r6
    7d06:	f015 fc0d 	bl	1d524 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    7d0a:	682b      	ldr	r3, [r5, #0]
    7d0c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    7d10:	681b      	ldr	r3, [r3, #0]
    7d12:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    7d16:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    7d18:	2103      	movs	r1, #3
    7d1a:	4620      	mov	r0, r4
    7d1c:	f015 fc02 	bl	1d524 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    7d20:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    7d22:	f015 fbff 	bl	1d524 <atomic_set_bit>
		break;
    7d26:	e010      	b.n	7d4a <smp_public_key_periph+0x116>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    7d28:	4620      	mov	r0, r4
    7d2a:	2103      	movs	r1, #3
    7d2c:	f015 fbfa 	bl	1d524 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    7d30:	210e      	movs	r1, #14
    7d32:	f015 fbf7 	bl	1d524 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7d36:	4630      	mov	r0, r6
    7d38:	210a      	movs	r1, #10
    7d3a:	f015 fbf3 	bl	1d524 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    7d3e:	4b0e      	ldr	r3, [pc, #56]	; (7d78 <smp_public_key_periph+0x144>)
    7d40:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    7d44:	681b      	ldr	r3, [r3, #0]
    7d46:	685b      	ldr	r3, [r3, #4]
    7d48:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    7d4a:	4630      	mov	r0, r6
    7d4c:	2107      	movs	r1, #7
    7d4e:	f015 fbe9 	bl	1d524 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    7d52:	2008      	movs	r0, #8
    7d54:	f7ff fed2 	bl	7afc <smp_find>
    7d58:	b938      	cbnz	r0, 7d6a <smp_public_key_periph+0x136>
		return smp_dhkey_generate(smp);
    7d5a:	4620      	mov	r0, r4
}
    7d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    7d60:	f7ff bf14 	b.w	7b8c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    7d64:	2104      	movs	r1, #4
    7d66:	4620      	mov	r0, r4
    7d68:	e7db      	b.n	7d22 <smp_public_key_periph+0xee>
	return 0;
    7d6a:	2000      	movs	r0, #0
    7d6c:	e7b0      	b.n	7cd0 <smp_public_key_periph+0x9c>
    7d6e:	bf00      	nop
    7d70:	200017e0 	.word	0x200017e0
    7d74:	000f4240 	.word	0x000f4240
    7d78:	200016dc 	.word	0x200016dc

00007d7c <smp_public_key>:
{
    7d7c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    7d7e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
    7d80:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
    7d84:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
    7d86:	2220      	movs	r2, #32
    7d88:	4631      	mov	r1, r6
    7d8a:	4628      	mov	r0, r5
    7d8c:	f012 fd61 	bl	1a852 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
    7d90:	2220      	movs	r2, #32
    7d92:	18b1      	adds	r1, r6, r2
    7d94:	f104 0077 	add.w	r0, r4, #119	; 0x77
    7d98:	f012 fd5b 	bl	1a852 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
    7d9c:	4628      	mov	r0, r5
    7d9e:	f7fd f899 	bl	4ed4 <bt_pub_key_is_debug>
    7da2:	b940      	cbnz	r0, 7db6 <smp_public_key+0x3a>
	if (!sc_public_key) {
    7da4:	4b15      	ldr	r3, [pc, #84]	; (7dfc <smp_public_key+0x80>)
    7da6:	681d      	ldr	r5, [r3, #0]
    7da8:	bb1d      	cbnz	r5, 7df2 <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    7daa:	1d20      	adds	r0, r4, #4
    7dac:	2106      	movs	r1, #6
    7dae:	f015 fbb9 	bl	1d524 <atomic_set_bit>
		return 0;
    7db2:	4628      	mov	r0, r5
    7db4:	e01c      	b.n	7df0 <smp_public_key+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    7db6:	210e      	movs	r1, #14
    7db8:	1d20      	adds	r0, r4, #4
    7dba:	f015 fbb3 	bl	1d524 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    7dbe:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
    7dc2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    7dc6:	b933      	cbnz	r3, 7dd6 <smp_public_key+0x5a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    7dc8:	7a28      	ldrb	r0, [r5, #8]
    7dca:	f105 0188 	add.w	r1, r5, #136	; 0x88
    7dce:	f000 fe7d 	bl	8acc <bt_keys_get_addr>
    7dd2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    7dd6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    7dda:	2b00      	cmp	r3, #0
    7ddc:	d0e2      	beq.n	7da4 <smp_public_key+0x28>
    7dde:	89da      	ldrh	r2, [r3, #14]
    7de0:	f002 0224 	and.w	r2, r2, #36	; 0x24
    7de4:	2a00      	cmp	r2, #0
    7de6:	d0dd      	beq.n	7da4 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    7de8:	7b5b      	ldrb	r3, [r3, #13]
    7dea:	079b      	lsls	r3, r3, #30
    7dec:	d4da      	bmi.n	7da4 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    7dee:	2003      	movs	r0, #3
}
    7df0:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
    7df2:	4620      	mov	r0, r4
}
    7df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
    7df8:	f7ff bf1c 	b.w	7c34 <smp_public_key_periph>
    7dfc:	200017e0 	.word	0x200017e0

00007e00 <smp_pairing_req>:
{
    7e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    7e04:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    7e06:	78fb      	ldrb	r3, [r7, #3]
    7e08:	3b07      	subs	r3, #7
    7e0a:	2b09      	cmp	r3, #9
{
    7e0c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    7e0e:	d904      	bls.n	7e1a <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    7e10:	2706      	movs	r7, #6
}
    7e12:	4638      	mov	r0, r7
    7e14:	b002      	add	sp, #8
    7e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    7e1a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
    7e1e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    7e22:	b15b      	cbz	r3, 7e3c <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    7e24:	1d25      	adds	r5, r4, #4
    7e26:	210f      	movs	r1, #15
    7e28:	4628      	mov	r0, r5
    7e2a:	f015 fa88 	bl	1d33e <atomic_test_bit>
    7e2e:	b980      	cbnz	r0, 7e52 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    7e30:	4620      	mov	r0, r4
    7e32:	f7ff fe8f 	bl	7b54 <smp_init>
		if (ret) {
    7e36:	b160      	cbz	r0, 7e52 <smp_pairing_req+0x52>
			return ret;
    7e38:	b2c7      	uxtb	r7, r0
    7e3a:	e7ea      	b.n	7e12 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    7e3c:	7a30      	ldrb	r0, [r6, #8]
    7e3e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    7e42:	f000 fe43 	bl	8acc <bt_keys_get_addr>
    7e46:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    7e4a:	2800      	cmp	r0, #0
    7e4c:	d1ea      	bne.n	7e24 <smp_pairing_req+0x24>
	switch (sec) {
    7e4e:	2708      	movs	r7, #8
    7e50:	e7df      	b.n	7e12 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    7e52:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    7e54:	2206      	movs	r2, #6
    7e56:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    7e58:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
    7e5a:	f104 000a 	add.w	r0, r4, #10
    7e5e:	f012 fcf8 	bl	1a852 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    7e62:	2302      	movs	r3, #2
    7e64:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
    7e66:	78b8      	ldrb	r0, [r7, #2]
    7e68:	f7ff fe56 	bl	7b18 <get_auth.constprop.0>
    7e6c:	74e0      	strb	r0, [r4, #19]
    7e6e:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    7e70:	f7ff fe0c 	bl	7a8c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    7e74:	4ba1      	ldr	r3, [pc, #644]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
	rsp->io_capability = get_io_capa();
    7e76:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    7e7c:	2310      	movs	r3, #16
    7e7e:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    7e80:	793b      	ldrb	r3, [r7, #4]
    7e82:	f003 0303 	and.w	r3, r3, #3
    7e86:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    7e88:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    7e8a:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    7e8e:	f003 0301 	and.w	r3, r3, #1
    7e92:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    7e94:	d00c      	beq.n	7eb0 <smp_pairing_req+0xb0>
    7e96:	78bb      	ldrb	r3, [r7, #2]
    7e98:	0719      	lsls	r1, r3, #28
    7e9a:	d509      	bpl.n	7eb0 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    7e9c:	2105      	movs	r1, #5
    7e9e:	4628      	mov	r0, r5
    7ea0:	f015 fb40 	bl	1d524 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    7ea4:	7d63      	ldrb	r3, [r4, #21]
    7ea6:	f003 0302 	and.w	r3, r3, #2
    7eaa:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
    7eac:	2300      	movs	r3, #0
    7eae:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    7eb0:	7ce3      	ldrb	r3, [r4, #19]
    7eb2:	069a      	lsls	r2, r3, #26
    7eb4:	d506      	bpl.n	7ec4 <smp_pairing_req+0xc4>
    7eb6:	78bb      	ldrb	r3, [r7, #2]
    7eb8:	069b      	lsls	r3, r3, #26
    7eba:	d503      	bpl.n	7ec4 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    7ebc:	2114      	movs	r1, #20
    7ebe:	4628      	mov	r0, r5
    7ec0:	f015 fb30 	bl	1d524 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    7ec4:	7da3      	ldrb	r3, [r4, #22]
    7ec6:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
    7eca:	7d63      	ldrb	r3, [r4, #21]
    7ecc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    7ed0:	7ce3      	ldrb	r3, [r4, #19]
    7ed2:	07d8      	lsls	r0, r3, #31
    7ed4:	d506      	bpl.n	7ee4 <smp_pairing_req+0xe4>
    7ed6:	78bb      	ldrb	r3, [r7, #2]
    7ed8:	07d9      	lsls	r1, r3, #31
    7eda:	d503      	bpl.n	7ee4 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    7edc:	210d      	movs	r1, #13
    7ede:	4628      	mov	r0, r5
    7ee0:	f015 fb20 	bl	1d524 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    7ee4:	2103      	movs	r1, #3
    7ee6:	4628      	mov	r0, r5
    7ee8:	f015 fb1c 	bl	1d524 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7eec:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    7eee:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7ef0:	f015 fa25 	bl	1d33e <atomic_test_bit>
    7ef4:	bb28      	cbnz	r0, 7f42 <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    7ef6:	2f04      	cmp	r7, #4
    7ef8:	d841      	bhi.n	7f7e <smp_pairing_req+0x17e>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    7efa:	7ca2      	ldrb	r2, [r4, #18]
    7efc:	7ae3      	ldrb	r3, [r4, #11]
    7efe:	4013      	ands	r3, r2
    7f00:	07da      	lsls	r2, r3, #31
    7f02:	d43a      	bmi.n	7f7a <smp_pairing_req+0x17a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    7f04:	7b21      	ldrb	r1, [r4, #12]
    7f06:	7ce0      	ldrb	r0, [r4, #19]
    7f08:	4301      	orrs	r1, r0
    7f0a:	f011 0104 	ands.w	r1, r1, #4
    7f0e:	d00f      	beq.n	7f30 <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
    7f10:	f7ff fdbc 	bl	7a8c <get_io_capa>
    7f14:	4b7a      	ldr	r3, [pc, #488]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7f16:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7f1a:	441f      	add	r7, r3
    7f1c:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    7f1e:	2904      	cmp	r1, #4
    7f20:	d106      	bne.n	7f30 <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    7f22:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    7f26:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    7f28:	2b00      	cmp	r3, #0
    7f2a:	bf0c      	ite	eq
    7f2c:	2102      	moveq	r1, #2
    7f2e:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    7f30:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
    7f32:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    7f36:	4620      	mov	r0, r4
    7f38:	f015 fa0a 	bl	1d350 <update_keys_check>
    7f3c:	bb08      	cbnz	r0, 7f82 <smp_pairing_req+0x182>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    7f3e:	2703      	movs	r7, #3
    7f40:	e767      	b.n	7e12 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    7f42:	7b20      	ldrb	r0, [r4, #12]
    7f44:	7ce2      	ldrb	r2, [r4, #19]
    7f46:	ea00 0302 	and.w	r3, r0, r2
    7f4a:	071b      	lsls	r3, r3, #28
    7f4c:	d506      	bpl.n	7f5c <smp_pairing_req+0x15c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    7f4e:	7ae3      	ldrb	r3, [r4, #11]
    7f50:	f894 c012 	ldrb.w	ip, [r4, #18]
    7f54:	ea43 030c 	orr.w	r3, r3, ip
    7f58:	07db      	lsls	r3, r3, #31
    7f5a:	d4e9      	bmi.n	7f30 <smp_pairing_req+0x130>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    7f5c:	2f04      	cmp	r7, #4
    7f5e:	d80e      	bhi.n	7f7e <smp_pairing_req+0x17e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    7f60:	ea40 0102 	orr.w	r1, r0, r2
    7f64:	f011 0104 	ands.w	r1, r1, #4
    7f68:	d0e2      	beq.n	7f30 <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
    7f6a:	f7ff fd8f 	bl	7a8c <get_io_capa>
    7f6e:	4b65      	ldr	r3, [pc, #404]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7f70:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7f74:	441f      	add	r7, r3
    7f76:	5c39      	ldrb	r1, [r7, r0]
    7f78:	e7da      	b.n	7f30 <smp_pairing_req+0x130>
		return LEGACY_OOB;
    7f7a:	2106      	movs	r1, #6
    7f7c:	e7d8      	b.n	7f30 <smp_pairing_req+0x130>
		return JUST_WORKS;
    7f7e:	2100      	movs	r1, #0
    7f80:	e7d6      	b.n	7f30 <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
    7f82:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    7f86:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
    7f88:	2b03      	cmp	r3, #3
    7f8a:	d040      	beq.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
    7f8c:	d82e      	bhi.n	7fec <smp_pairing_req+0x1ec>
    7f8e:	3b01      	subs	r3, #1
    7f90:	2b01      	cmp	r3, #1
    7f92:	f63f af5c 	bhi.w	7e4e <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7f96:	2105      	movs	r1, #5
    7f98:	4628      	mov	r0, r5
    7f9a:	f015 f9d0 	bl	1d33e <atomic_test_bit>
    7f9e:	2800      	cmp	r0, #0
    7fa0:	f040 80b6 	bne.w	8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>
	struct bt_conn *conn = smp->chan.chan.conn;
    7fa4:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    7fa8:	7a30      	ldrb	r0, [r6, #8]
    7faa:	f106 0188 	add.w	r1, r6, #136	; 0x88
    7fae:	f000 fe11 	bl	8bd4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    7fb2:	7a23      	ldrb	r3, [r4, #8]
    7fb4:	b128      	cbz	r0, 7fc2 <smp_pairing_req+0x1c2>
    7fb6:	7b42      	ldrb	r2, [r0, #13]
    7fb8:	07d2      	lsls	r2, r2, #31
    7fba:	d502      	bpl.n	7fc2 <smp_pairing_req+0x1c2>
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	f43f af46 	beq.w	7e4e <smp_pairing_req+0x4e>
	switch (smp->method) {
    7fc2:	2b06      	cmp	r3, #6
    7fc4:	f63f af43 	bhi.w	7e4e <smp_pairing_req+0x4e>
    7fc8:	a201      	add	r2, pc, #4	; (adr r2, 7fd0 <smp_pairing_req+0x1d0>)
    7fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7fce:	bf00      	nop
    7fd0:	00008045 	.word	0x00008045
    7fd4:	000080cb 	.word	0x000080cb
    7fd8:	00008075 	.word	0x00008075
    7fdc:	00007e4f 	.word	0x00007e4f
    7fe0:	00007e4f 	.word	0x00007e4f
    7fe4:	00007e4f 	.word	0x00007e4f
    7fe8:	00008017 	.word	0x00008017
	switch (sec) {
    7fec:	2b04      	cmp	r3, #4
    7fee:	f47f af2e 	bne.w	7e4e <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    7ff2:	7d23      	ldrb	r3, [r4, #20]
    7ff4:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    7ff6:	4293      	cmp	r3, r2
    7ff8:	bf28      	it	cs
    7ffa:	4613      	movcs	r3, r2
    7ffc:	2b10      	cmp	r3, #16
    7ffe:	f47f af07 	bne.w	7e10 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8002:	2105      	movs	r1, #5
    8004:	4628      	mov	r0, r5
    8006:	f015 f99a 	bl	1d33e <atomic_test_bit>
    800a:	2800      	cmp	r0, #0
    800c:	d097      	beq.n	7f3e <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
    800e:	7a23      	ldrb	r3, [r4, #8]
    8010:	2b00      	cmp	r3, #0
    8012:	d1c0      	bne.n	7f96 <smp_pairing_req+0x196>
    8014:	e793      	b.n	7f3e <smp_pairing_req+0x13e>
		if (bt_auth && bt_auth->oob_data_request) {
    8016:	4e3c      	ldr	r6, [pc, #240]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    8018:	6833      	ldr	r3, [r6, #0]
    801a:	2b00      	cmp	r3, #0
    801c:	d05f      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    801e:	68db      	ldr	r3, [r3, #12]
    8020:	2b00      	cmp	r3, #0
    8022:	d05c      	beq.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
			struct bt_conn_oob_info info = {
    8024:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8026:	210a      	movs	r1, #10
    8028:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    802a:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    802e:	f015 fa79 	bl	1d524 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    8032:	6833      	ldr	r3, [r6, #0]
    8034:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    8038:	68db      	ldr	r3, [r3, #12]
    803a:	a901      	add	r1, sp, #4
    803c:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    803e:	7a23      	ldrb	r3, [r4, #8]
    8040:	2b00      	cmp	r3, #0
    8042:	d14e      	bne.n	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    8044:	210f      	movs	r1, #15
    8046:	4628      	mov	r0, r5
    8048:	f015 f979 	bl	1d33e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    804c:	4607      	mov	r7, r0
    804e:	2800      	cmp	r0, #0
    8050:	d147      	bne.n	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    8052:	4e2d      	ldr	r6, [pc, #180]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    8054:	6833      	ldr	r3, [r6, #0]
    8056:	2b00      	cmp	r3, #0
    8058:	d043      	beq.n	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
	    bt_auth && bt_auth->pairing_confirm) {
    805a:	695b      	ldr	r3, [r3, #20]
    805c:	2b00      	cmp	r3, #0
    805e:	d040      	beq.n	80e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8060:	4628      	mov	r0, r5
    8062:	210a      	movs	r1, #10
    8064:	f015 fa5e 	bl	1d524 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    8068:	6833      	ldr	r3, [r6, #0]
    806a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    806e:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    8070:	4798      	blx	r3
		return 0;
    8072:	e6ce      	b.n	7e12 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    8074:	2104      	movs	r1, #4
    8076:	eb0d 0001 	add.w	r0, sp, r1
    807a:	f003 fcf7 	bl	ba6c <bt_rand>
    807e:	2800      	cmp	r0, #0
    8080:	f47f aee5 	bne.w	7e4e <smp_pairing_req+0x4e>
			passkey %= 1000000;
    8084:	9b01      	ldr	r3, [sp, #4]
    8086:	4a21      	ldr	r2, [pc, #132]	; (810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>)
		if (bt_auth && bt_auth->passkey_display) {
    8088:	4f1f      	ldr	r7, [pc, #124]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
			passkey %= 1000000;
    808a:	fbb3 f1f2 	udiv	r1, r3, r2
    808e:	fb02 3311 	mls	r3, r2, r1, r3
    8092:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    8094:	683b      	ldr	r3, [r7, #0]
    8096:	b153      	cbz	r3, 80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	b143      	cbz	r3, 80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    809c:	210b      	movs	r1, #11
    809e:	4628      	mov	r0, r5
    80a0:	f015 fa40 	bl	1d524 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    80a4:	683b      	ldr	r3, [r7, #0]
    80a6:	9901      	ldr	r1, [sp, #4]
    80a8:	681b      	ldr	r3, [r3, #0]
    80aa:	4630      	mov	r0, r6
    80ac:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    80ae:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    80b0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
    80b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    80b8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    80ba:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
    80be:	0a1b      	lsrs	r3, r3, #8
    80c0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    80c4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
    80c8:	e7b9      	b.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    80ca:	4628      	mov	r0, r5
    80cc:	210a      	movs	r1, #10
    80ce:	f015 fa29 	bl	1d524 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    80d2:	4b0d      	ldr	r3, [pc, #52]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	4630      	mov	r0, r6
    80d8:	685b      	ldr	r3, [r3, #4]
    80da:	4798      	blx	r3
	if (ret) {
    80dc:	e7af      	b.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    80de:	2702      	movs	r7, #2
    80e0:	e697      	b.n	7e12 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    80e2:	2103      	movs	r1, #3
    80e4:	4620      	mov	r0, r4
    80e6:	f015 fa1d 	bl	1d524 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    80ea:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    80ec:	f015 fa1a 	bl	1d524 <atomic_set_bit>
}
    80f0:	b002      	add	sp, #8
    80f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    80f6:	f015 ba86 	b.w	1d606 <send_pairing_rsp>
    80fa:	bf00      	nop
    80fc:	20002992 	.word	0x20002992
    8100:	00020e5e 	.word	0x00020e5e
    8104:	00020e77 	.word	0x00020e77
    8108:	200016dc 	.word	0x200016dc
    810c:	000f4240 	.word	0x000f4240
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    8110:	7a27      	ldrb	r7, [r4, #8]
    8112:	b9a7      	cbnz	r7, 813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    8114:	210f      	movs	r1, #15
    8116:	4628      	mov	r0, r5
    8118:	f015 f911 	bl	1d33e <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    811c:	b978      	cbnz	r0, 813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    811e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    8122:	f8d8 3000 	ldr.w	r3, [r8]
    8126:	b153      	cbz	r3, 813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
	    bt_auth && bt_auth->pairing_confirm) {
    8128:	695b      	ldr	r3, [r3, #20]
    812a:	b143      	cbz	r3, 813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    812c:	4628      	mov	r0, r5
    812e:	210a      	movs	r1, #10
    8130:	f015 f9f8 	bl	1d524 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    8134:	f8d8 3000 	ldr.w	r3, [r8]
    8138:	4630      	mov	r0, r6
    813a:	695b      	ldr	r3, [r3, #20]
    813c:	e798      	b.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    813e:	210c      	movs	r1, #12
    8140:	4620      	mov	r0, r4
    8142:	e7d3      	b.n	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
    8144:	200016dc 	.word	0x200016dc

00008148 <compute_and_check_and_send_periph_dhcheck>:
{
    8148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    814c:	2210      	movs	r2, #16
{
    814e:	b0a3      	sub	sp, #140	; 0x8c
    8150:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    8152:	2100      	movs	r1, #0
    8154:	eb0d 0002 	add.w	r0, sp, r2
    8158:	f012 fb86 	bl	1a868 <memset>
	switch (smp->method) {
    815c:	7a23      	ldrb	r3, [r4, #8]
    815e:	2b05      	cmp	r3, #5
    8160:	d87f      	bhi.n	8262 <compute_and_check_and_send_periph_dhcheck+0x11a>
    8162:	e8df f003 	tbb	[pc, r3]
    8166:	0309      	.short	0x0309
    8168:	807e0903 	.word	0x807e0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    816c:	2204      	movs	r2, #4
    816e:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
    8172:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    8174:	f012 fb6d 	bl	1a852 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    8178:	4b63      	ldr	r3, [pc, #396]	; (8308 <compute_and_check_and_send_periph_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
    817a:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
    817e:	aa14      	add	r2, sp, #80	; 0x50
    8180:	f103 0630 	add.w	r6, r3, #48	; 0x30
    8184:	6818      	ldr	r0, [r3, #0]
    8186:	6859      	ldr	r1, [r3, #4]
    8188:	4615      	mov	r5, r2
    818a:	c503      	stmia	r5!, {r0, r1}
    818c:	3308      	adds	r3, #8
    818e:	42b3      	cmp	r3, r6
    8190:	462a      	mov	r2, r5
    8192:	d1f7      	bne.n	8184 <compute_and_check_and_send_periph_dhcheck+0x3c>
    8194:	6818      	ldr	r0, [r3, #0]
    8196:	791b      	ldrb	r3, [r3, #4]
    8198:	6028      	str	r0, [r5, #0]
    819a:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    819c:	ad0c      	add	r5, sp, #48	; 0x30
    819e:	2220      	movs	r2, #32
    81a0:	f104 0197 	add.w	r1, r4, #151	; 0x97
    81a4:	4628      	mov	r0, r5
    81a6:	f015 f8b7 	bl	1d318 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    81aa:	4858      	ldr	r0, [pc, #352]	; (830c <compute_and_check_and_send_periph_dhcheck+0x1c4>)
    81ac:	ab08      	add	r3, sp, #32
    81ae:	2220      	movs	r2, #32
    81b0:	4629      	mov	r1, r5
    81b2:	f015 f8fd 	bl	1d3b0 <bt_smp_aes_cmac>
	if (err) {
    81b6:	2800      	cmp	r0, #0
    81b8:	d153      	bne.n	8262 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    81ba:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
    81be:	2210      	movs	r2, #16
    81c0:	4639      	mov	r1, r7
    81c2:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    81c6:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
    81ca:	f015 f8a5 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    81ce:	2210      	movs	r2, #16
    81d0:	4641      	mov	r1, r8
    81d2:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    81d6:	f015 f89f 	bl	1d318 <sys_memcpy_swap>
	m[37] = a1->type;
    81da:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    81de:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    81e2:	2206      	movs	r2, #6
    81e4:	f109 0190 	add.w	r1, r9, #144	; 0x90
    81e8:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    81ec:	f015 f894 	bl	1d318 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    81f0:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
    81f4:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    81f8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    81fc:	2206      	movs	r2, #6
    81fe:	f109 0197 	add.w	r1, r9, #151	; 0x97
    8202:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    8206:	f015 f887 	bl	1d318 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    820a:	4633      	mov	r3, r6
    820c:	2235      	movs	r2, #53	; 0x35
    820e:	a914      	add	r1, sp, #80	; 0x50
    8210:	a808      	add	r0, sp, #32
    8212:	f015 f8cd 	bl	1d3b0 <bt_smp_aes_cmac>
	if (err) {
    8216:	bb20      	cbnz	r0, 8262 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
    8218:	4630      	mov	r0, r6
    821a:	f015 f904 	bl	1d426 <sys_mem_swap.constprop.0>
		   smp->tk)) {
    821e:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
    8222:	2301      	movs	r3, #1
    8224:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    8228:	2235      	movs	r2, #53	; 0x35
    822a:	464b      	mov	r3, r9
    822c:	a914      	add	r1, sp, #80	; 0x50
    822e:	a808      	add	r0, sp, #32
    8230:	f015 f8be 	bl	1d3b0 <bt_smp_aes_cmac>
	if (err) {
    8234:	b9a8      	cbnz	r0, 8262 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
    8236:	4648      	mov	r0, r9
    8238:	f015 f8f5 	bl	1d426 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    823c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    8240:	aa14      	add	r2, sp, #80	; 0x50
    8242:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    8244:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    8248:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    824a:	9301      	str	r3, [sp, #4]
    824c:	f104 0311 	add.w	r3, r4, #17
    8250:	9202      	str	r2, [sp, #8]
    8252:	9300      	str	r3, [sp, #0]
    8254:	463a      	mov	r2, r7
    8256:	ab04      	add	r3, sp, #16
    8258:	4641      	mov	r1, r8
    825a:	4630      	mov	r0, r6
    825c:	f015 f8f1 	bl	1d442 <smp_f6>
    8260:	b148      	cbz	r0, 8276 <compute_and_check_and_send_periph_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
    8262:	2008      	movs	r0, #8
    8264:	e047      	b.n	82f6 <compute_and_check_and_send_periph_dhcheck+0x1ae>
		if (smp->oobd_remote) {
    8266:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    826a:	2900      	cmp	r1, #0
    826c:	d084      	beq.n	8178 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    826e:	2210      	movs	r2, #16
    8270:	eb0d 0002 	add.w	r0, sp, r2
    8274:	e77e      	b.n	8174 <compute_and_check_and_send_periph_dhcheck+0x2c>
	if (smp->method == LE_SC_OOB) {
    8276:	7a23      	ldrb	r3, [r4, #8]
    8278:	2b05      	cmp	r3, #5
    827a:	d108      	bne.n	828e <compute_and_check_and_send_periph_dhcheck+0x146>
		if (smp->oobd_local) {
    827c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
    8280:	2210      	movs	r2, #16
    8282:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    8286:	2900      	cmp	r1, #0
    8288:	d038      	beq.n	82fc <compute_and_check_and_send_periph_dhcheck+0x1b4>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    828a:	f012 fae2 	bl	1a852 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    828e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    8292:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    8294:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    8298:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    829a:	9301      	str	r3, [sp, #4]
    829c:	f104 030a 	add.w	r3, r4, #10
    82a0:	9202      	str	r2, [sp, #8]
    82a2:	9300      	str	r3, [sp, #0]
    82a4:	4642      	mov	r2, r8
    82a6:	ab04      	add	r3, sp, #16
    82a8:	4639      	mov	r1, r7
    82aa:	4630      	mov	r0, r6
    82ac:	f015 f8c9 	bl	1d442 <smp_f6>
    82b0:	2800      	cmp	r0, #0
    82b2:	d1d6      	bne.n	8262 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
    82b4:	4629      	mov	r1, r5
    82b6:	2210      	movs	r2, #16
    82b8:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    82bc:	f012 fab8 	bl	1a830 <memcmp>
    82c0:	4605      	mov	r5, r0
    82c2:	b9f0      	cbnz	r0, 8302 <compute_and_check_and_send_periph_dhcheck+0x1ba>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    82c4:	210d      	movs	r1, #13
    82c6:	4620      	mov	r0, r4
    82c8:	f015 f97e 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!buf) {
    82cc:	4606      	mov	r6, r0
    82ce:	2800      	cmp	r0, #0
    82d0:	d0c7      	beq.n	8262 <compute_and_check_and_send_periph_dhcheck+0x11a>
    82d2:	2110      	movs	r1, #16
    82d4:	3008      	adds	r0, #8
    82d6:	f015 fe18 	bl	1df0a <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    82da:	2210      	movs	r2, #16
    82dc:	a914      	add	r1, sp, #80	; 0x50
    82de:	f012 fab8 	bl	1a852 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    82e2:	462a      	mov	r2, r5
    82e4:	4631      	mov	r1, r6
    82e6:	4620      	mov	r0, r4
    82e8:	f015 f880 	bl	1d3ec <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    82ec:	1d20      	adds	r0, r4, #4
    82ee:	2101      	movs	r1, #1
    82f0:	f015 f918 	bl	1d524 <atomic_set_bit>
	return 0;
    82f4:	4628      	mov	r0, r5
}
    82f6:	b023      	add	sp, #140	; 0x8c
    82f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    82fc:	f012 fab4 	bl	1a868 <memset>
    8300:	e7c5      	b.n	828e <compute_and_check_and_send_periph_dhcheck+0x146>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    8302:	200b      	movs	r0, #11
    8304:	e7f7      	b.n	82f6 <compute_and_check_and_send_periph_dhcheck+0x1ae>
    8306:	bf00      	nop
    8308:	0001f3ea 	.word	0x0001f3ea
    830c:	00020e90 	.word	0x00020e90

00008310 <bt_smp_connected>:
{
    8310:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
    8312:	4905      	ldr	r1, [pc, #20]	; (8328 <bt_smp_connected+0x18>)
    8314:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    8318:	30f0      	adds	r0, #240	; 0xf0
    831a:	f016 fb98 	bl	1ea4e <k_work_init_delayable>
	smp_reset(smp);
    831e:	4620      	mov	r0, r4
}
    8320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    8324:	f015 b9e4 	b.w	1d6f0 <smp_reset>
    8328:	0001dcd1 	.word	0x0001dcd1

0000832c <smp_pairing_random>:
{
    832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8330:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8332:	f100 0737 	add.w	r7, r0, #55	; 0x37
    8336:	6889      	ldr	r1, [r1, #8]
{
    8338:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    833a:	2210      	movs	r2, #16
    833c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    833e:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8340:	f012 fa87 	bl	1a852 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8344:	2105      	movs	r1, #5
    8346:	4630      	mov	r0, r6
    8348:	f014 fff9 	bl	1d33e <atomic_test_bit>
    834c:	2800      	cmp	r0, #0
    834e:	d13e      	bne.n	83ce <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    8350:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    8354:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    8358:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    835c:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    835e:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    8360:	9201      	str	r2, [sp, #4]
    8362:	9300      	str	r3, [sp, #0]
    8364:	9502      	str	r5, [sp, #8]
    8366:	f104 0310 	add.w	r3, r4, #16
    836a:	f104 0209 	add.w	r2, r4, #9
    836e:	4639      	mov	r1, r7
    8370:	4640      	mov	r0, r8
    8372:	f015 f9e0 	bl	1d736 <smp_c1>
	if (err) {
    8376:	b108      	cbz	r0, 837c <smp_pairing_random+0x50>
	switch (smp->method) {
    8378:	2508      	movs	r5, #8
    837a:	e096      	b.n	84aa <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    837c:	2210      	movs	r2, #16
    837e:	4629      	mov	r1, r5
    8380:	f104 0017 	add.w	r0, r4, #23
    8384:	f012 fa54 	bl	1a830 <memcmp>
    8388:	2800      	cmp	r0, #0
    838a:	f040 808d 	bne.w	84a8 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    838e:	2208      	movs	r2, #8
    8390:	4639      	mov	r1, r7
    8392:	4628      	mov	r0, r5
    8394:	f012 fa5d 	bl	1a852 <memcpy>
	memcpy(out + 8, r1, 8);
    8398:	2208      	movs	r2, #8
    839a:	f104 0127 	add.w	r1, r4, #39	; 0x27
    839e:	a80c      	add	r0, sp, #48	; 0x30
    83a0:	f012 fa57 	bl	1a852 <memcpy>
	return bt_encrypt_le(k, out, out);
    83a4:	462a      	mov	r2, r5
    83a6:	4629      	mov	r1, r5
    83a8:	4640      	mov	r0, r8
    83aa:	f003 fb61 	bl	ba70 <bt_encrypt_le>
		if (err) {
    83ae:	2800      	cmp	r0, #0
    83b0:	d1e2      	bne.n	8378 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    83b2:	4629      	mov	r1, r5
    83b4:	2210      	movs	r2, #16
    83b6:	4640      	mov	r0, r8
    83b8:	f012 fa4b 	bl	1a852 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    83bc:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    83be:	4630      	mov	r0, r6
    83c0:	f015 f8b0 	bl	1d524 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    83c4:	4620      	mov	r0, r4
    83c6:	f015 f937 	bl	1d638 <smp_send_pairing_random>
    83ca:	4605      	mov	r5, r0
    83cc:	e06d      	b.n	84aa <smp_pairing_random+0x17e>
	switch (smp->method) {
    83ce:	7a23      	ldrb	r3, [r4, #8]
    83d0:	2b05      	cmp	r3, #5
    83d2:	d8d1      	bhi.n	8378 <smp_pairing_random+0x4c>
    83d4:	a201      	add	r2, pc, #4	; (adr r2, 83dc <smp_pairing_random+0xb0>)
    83d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    83da:	bf00      	nop
    83dc:	00008465 	.word	0x00008465
    83e0:	00008471 	.word	0x00008471
    83e4:	00008471 	.word	0x00008471
    83e8:	000083f5 	.word	0x000083f5
    83ec:	00008379 	.word	0x00008379
    83f0:	000084f7 	.word	0x000084f7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    83f4:	4b59      	ldr	r3, [pc, #356]	; (855c <smp_pairing_random+0x230>)
    83f6:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    83f8:	2220      	movs	r2, #32
    83fa:	f104 0157 	add.w	r1, r4, #87	; 0x57
    83fe:	a80a      	add	r0, sp, #40	; 0x28
    8400:	f014 ff8a 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    8404:	2220      	movs	r2, #32
    8406:	4629      	mov	r1, r5
    8408:	a812      	add	r0, sp, #72	; 0x48
    840a:	f014 ff85 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    840e:	2210      	movs	r2, #16
    8410:	f104 0127 	add.w	r1, r4, #39	; 0x27
    8414:	a81a      	add	r0, sp, #104	; 0x68
    8416:	f014 ff7f 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    841a:	2210      	movs	r2, #16
    841c:	4639      	mov	r1, r7
    841e:	a806      	add	r0, sp, #24
    8420:	f014 ff7a 	bl	1d318 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    8424:	ab06      	add	r3, sp, #24
    8426:	2250      	movs	r2, #80	; 0x50
    8428:	a90a      	add	r1, sp, #40	; 0x28
    842a:	4618      	mov	r0, r3
    842c:	f014 ffc0 	bl	1d3b0 <bt_smp_aes_cmac>
	if (err) {
    8430:	2800      	cmp	r0, #0
    8432:	d1a1      	bne.n	8378 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    8434:	2204      	movs	r2, #4
    8436:	a909      	add	r1, sp, #36	; 0x24
    8438:	a805      	add	r0, sp, #20
    843a:	f012 fa0a 	bl	1a852 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    843e:	9b05      	ldr	r3, [sp, #20]
    8440:	4a47      	ldr	r2, [pc, #284]	; (8560 <smp_pairing_random+0x234>)
    8442:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8444:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8446:	fbb3 f1f2 	udiv	r1, r3, r2
    844a:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    844e:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8450:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8452:	f015 f867 	bl	1d524 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    8456:	4b43      	ldr	r3, [pc, #268]	; (8564 <smp_pairing_random+0x238>)
    8458:	9905      	ldr	r1, [sp, #20]
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    8460:	689b      	ldr	r3, [r3, #8]
    8462:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    8464:	210d      	movs	r1, #13
    8466:	4620      	mov	r0, r4
    8468:	f015 f85c 	bl	1d524 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    846c:	2110      	movs	r1, #16
    846e:	e7a6      	b.n	83be <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8470:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
    8474:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8478:	4938      	ldr	r1, [pc, #224]	; (855c <smp_pairing_random+0x230>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    847a:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    847c:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    847e:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8482:	9500      	str	r5, [sp, #0]
    8484:	6809      	ldr	r1, [r1, #0]
    8486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    848a:	463a      	mov	r2, r7
    848c:	f104 0057 	add.w	r0, r4, #87	; 0x57
    8490:	f015 f823 	bl	1d4da <smp_f4>
    8494:	2800      	cmp	r0, #0
    8496:	f47f af6f 	bne.w	8378 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    849a:	2210      	movs	r2, #16
    849c:	4629      	mov	r1, r5
    849e:	f104 0017 	add.w	r0, r4, #23
    84a2:	f012 f9c5 	bl	1a830 <memcmp>
    84a6:	b120      	cbz	r0, 84b2 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    84a8:	2504      	movs	r5, #4
}
    84aa:	4628      	mov	r0, r5
    84ac:	b01e      	add	sp, #120	; 0x78
    84ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
    84b2:	2103      	movs	r1, #3
    84b4:	4620      	mov	r0, r4
    84b6:	f015 f835 	bl	1d524 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    84ba:	f015 f8bd 	bl	1d638 <smp_send_pairing_random>
		if (err) {
    84be:	4605      	mov	r5, r0
    84c0:	2800      	cmp	r0, #0
    84c2:	d1f2      	bne.n	84aa <smp_pairing_random+0x17e>
		smp->passkey_round++;
    84c4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    84c8:	3301      	adds	r3, #1
    84ca:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    84cc:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    84ce:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
    84d2:	d108      	bne.n	84e6 <smp_pairing_random+0x1ba>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    84d4:	4620      	mov	r0, r4
    84d6:	210d      	movs	r1, #13
    84d8:	f015 f824 	bl	1d524 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    84dc:	2110      	movs	r1, #16
    84de:	4630      	mov	r0, r6
    84e0:	f015 f820 	bl	1d524 <atomic_set_bit>
			return 0;
    84e4:	e7e1      	b.n	84aa <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    84e6:	2110      	movs	r1, #16
    84e8:	f104 0027 	add.w	r0, r4, #39	; 0x27
    84ec:	f003 fabe 	bl	ba6c <bt_rand>
    84f0:	2800      	cmp	r0, #0
    84f2:	d0da      	beq.n	84aa <smp_pairing_random+0x17e>
    84f4:	e740      	b.n	8378 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    84f6:	2110      	movs	r1, #16
    84f8:	f104 0027 	add.w	r0, r4, #39	; 0x27
    84fc:	f003 fab6 	bl	ba6c <bt_rand>
    8500:	2800      	cmp	r0, #0
    8502:	f47f af39 	bne.w	8378 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    8506:	4f17      	ldr	r7, [pc, #92]	; (8564 <smp_pairing_random+0x238>)
    8508:	683b      	ldr	r3, [r7, #0]
    850a:	b18b      	cbz	r3, 8530 <smp_pairing_random+0x204>
    850c:	68db      	ldr	r3, [r3, #12]
    850e:	b17b      	cbz	r3, 8530 <smp_pairing_random+0x204>
			struct bt_conn_oob_info info = {
    8510:	4b15      	ldr	r3, [pc, #84]	; (8568 <smp_pairing_random+0x23c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    8512:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
    8514:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    8518:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    851c:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    851e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    8520:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    8524:	d406      	bmi.n	8534 <smp_pairing_random+0x208>
				     BT_CONN_OOB_BOTH_PEERS :
    8526:	2b00      	cmp	r3, #0
    8528:	bf0c      	ite	eq
    852a:	2003      	moveq	r0, #3
    852c:	2001      	movne	r0, #1
    852e:	e004      	b.n	853a <smp_pairing_random+0x20e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    8530:	2502      	movs	r5, #2
    8532:	e7ba      	b.n	84aa <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    8534:	2b00      	cmp	r3, #0
    8536:	bf18      	it	ne
    8538:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    853a:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    853c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    8540:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    8544:	4630      	mov	r0, r6
    8546:	210c      	movs	r1, #12
    8548:	f014 ffec 	bl	1d524 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    854c:	683b      	ldr	r3, [r7, #0]
    854e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    8552:	68db      	ldr	r3, [r3, #12]
    8554:	a90a      	add	r1, sp, #40	; 0x28
    8556:	4798      	blx	r3
			return 0;
    8558:	e7a7      	b.n	84aa <smp_pairing_random+0x17e>
    855a:	bf00      	nop
    855c:	200017e0 	.word	0x200017e0
    8560:	000f4240 	.word	0x000f4240
    8564:	200016dc 	.word	0x200016dc
    8568:	0001f3ea 	.word	0x0001f3ea

0000856c <bt_smp_start_security>:
{
    856c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    8570:	78c4      	ldrb	r4, [r0, #3]
    8572:	2c01      	cmp	r4, #1
{
    8574:	4605      	mov	r5, r0
	switch (conn->role) {
    8576:	d005      	beq.n	8584 <bt_smp_start_security+0x18>
		return -EINVAL;
    8578:	f06f 0415 	mvn.w	r4, #21
}
    857c:	4620      	mov	r0, r4
    857e:	b003      	add	sp, #12
    8580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    8584:	f014 fed4 	bl	1d330 <smp_chan_get>
	if (!smp) {
    8588:	4606      	mov	r6, r0
    858a:	2800      	cmp	r0, #0
    858c:	f000 80a4 	beq.w	86d8 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8590:	1d07      	adds	r7, r0, #4
    8592:	2104      	movs	r1, #4
    8594:	4638      	mov	r0, r7
    8596:	f014 fed2 	bl	1d33e <atomic_test_bit>
    859a:	2800      	cmp	r0, #0
    859c:	f040 809f 	bne.w	86de <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    85a0:	2103      	movs	r1, #3
    85a2:	4638      	mov	r0, r7
    85a4:	f014 fecb 	bl	1d33e <atomic_test_bit>
    85a8:	b110      	cbz	r0, 85b0 <bt_smp_start_security+0x44>
		return -EBUSY;
    85aa:	f06f 040f 	mvn.w	r4, #15
    85ae:	e7e5      	b.n	857c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    85b0:	4621      	mov	r1, r4
    85b2:	4638      	mov	r0, r7
    85b4:	f014 fec3 	bl	1d33e <atomic_test_bit>
    85b8:	2800      	cmp	r0, #0
    85ba:	d1f6      	bne.n	85aa <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    85bc:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    85be:	2b03      	cmp	r3, #3
    85c0:	d03d      	beq.n	863e <bt_smp_start_security+0xd2>
    85c2:	d82c      	bhi.n	861e <bt_smp_start_security+0xb2>
    85c4:	3b01      	subs	r3, #1
    85c6:	2b01      	cmp	r3, #1
    85c8:	d946      	bls.n	8658 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    85ca:	210a      	movs	r1, #10
    85cc:	1d28      	adds	r0, r5, #4
    85ce:	f014 feb6 	bl	1d33e <atomic_test_bit>
    85d2:	2800      	cmp	r0, #0
    85d4:	d1d0      	bne.n	8578 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    85d6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    85da:	b983      	cbnz	r3, 85fe <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
    85dc:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    85e0:	7a29      	ldrb	r1, [r5, #8]
    85e2:	4622      	mov	r2, r4
    85e4:	2020      	movs	r0, #32
    85e6:	f000 faa7 	bl	8b38 <bt_keys_find>
    85ea:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    85ee:	b930      	cbnz	r0, 85fe <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    85f0:	7a29      	ldrb	r1, [r5, #8]
    85f2:	4622      	mov	r2, r4
    85f4:	2004      	movs	r0, #4
    85f6:	f000 fa9f 	bl	8b38 <bt_keys_find>
    85fa:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    85fe:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    8602:	2b00      	cmp	r3, #0
    8604:	d0b8      	beq.n	8578 <bt_smp_start_security+0xc>
    8606:	89da      	ldrh	r2, [r3, #14]
    8608:	f002 0224 	and.w	r2, r2, #36	; 0x24
    860c:	2a00      	cmp	r2, #0
    860e:	d0b3      	beq.n	8578 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    8610:	7aaa      	ldrb	r2, [r5, #10]
    8612:	2a02      	cmp	r2, #2
    8614:	d920      	bls.n	8658 <bt_smp_start_security+0xec>
    8616:	7b5b      	ldrb	r3, [r3, #13]
    8618:	07db      	lsls	r3, r3, #31
    861a:	d5ad      	bpl.n	8578 <bt_smp_start_security+0xc>
    861c:	e01c      	b.n	8658 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
    861e:	2b04      	cmp	r3, #4
    8620:	d1d3      	bne.n	85ca <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    8622:	f7ff fa33 	bl	7a8c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    8626:	2803      	cmp	r0, #3
    8628:	d104      	bne.n	8634 <bt_smp_start_security+0xc8>
    862a:	4b2e      	ldr	r3, [pc, #184]	; (86e4 <bt_smp_start_security+0x178>)
    862c:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    862e:	b1f3      	cbz	r3, 866e <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    8630:	68dc      	ldr	r4, [r3, #12]
    8632:	b10c      	cbz	r4, 8638 <bt_smp_start_security+0xcc>
    8634:	4b2c      	ldr	r3, [pc, #176]	; (86e8 <bt_smp_start_security+0x17c>)
    8636:	781c      	ldrb	r4, [r3, #0]
    8638:	f004 0401 	and.w	r4, r4, #1
    863c:	e00a      	b.n	8654 <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    863e:	f7ff fa25 	bl	7a8c <get_io_capa>
    8642:	2803      	cmp	r0, #3
    8644:	d106      	bne.n	8654 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
    8646:	4b27      	ldr	r3, [pc, #156]	; (86e4 <bt_smp_start_security+0x178>)
    8648:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    864a:	b11c      	cbz	r4, 8654 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
    864c:	68e4      	ldr	r4, [r4, #12]
    864e:	3c00      	subs	r4, #0
    8650:	bf18      	it	ne
    8652:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    8654:	2c00      	cmp	r4, #0
    8656:	d0b8      	beq.n	85ca <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
    8658:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    865c:	b14b      	cbz	r3, 8672 <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
    865e:	4630      	mov	r0, r6
    8660:	f7ff fa78 	bl	7b54 <smp_init>
    8664:	4604      	mov	r4, r0
    8666:	b180      	cbz	r0, 868a <bt_smp_start_security+0x11e>
		return -ENOBUFS;
    8668:	f06f 0468 	mvn.w	r4, #104	; 0x68
    866c:	e786      	b.n	857c <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    866e:	2400      	movs	r4, #0
    8670:	e7e2      	b.n	8638 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    8672:	7a28      	ldrb	r0, [r5, #8]
    8674:	f105 0188 	add.w	r1, r5, #136	; 0x88
    8678:	f000 fa28 	bl	8acc <bt_keys_get_addr>
    867c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    8680:	2800      	cmp	r0, #0
    8682:	d1ec      	bne.n	865e <bt_smp_start_security+0xf2>
			return -ENOMEM;
    8684:	f06f 040b 	mvn.w	r4, #11
    8688:	e778      	b.n	857c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    868a:	210b      	movs	r1, #11
    868c:	4630      	mov	r0, r6
    868e:	f014 ff9b 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    8692:	4680      	mov	r8, r0
    8694:	2800      	cmp	r0, #0
    8696:	d0e7      	beq.n	8668 <bt_smp_start_security+0xfc>
    8698:	2101      	movs	r1, #1
    869a:	3008      	adds	r0, #8
    869c:	f015 fc35 	bl	1df0a <net_buf_simple_add>
    86a0:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    86a2:	2009      	movs	r0, #9
    86a4:	f7ff fa38 	bl	7b18 <get_auth.constprop.0>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    86a8:	4623      	mov	r3, r4
    86aa:	f889 0000 	strb.w	r0, [r9]
    86ae:	4642      	mov	r2, r8
    86b0:	9400      	str	r4, [sp, #0]
    86b2:	2106      	movs	r1, #6
    86b4:	4628      	mov	r0, r5
    86b6:	f013 fa46 	bl	1bb46 <bt_l2cap_send_cb>
	if (err) {
    86ba:	4604      	mov	r4, r0
    86bc:	b118      	cbz	r0, 86c6 <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
    86be:	4640      	mov	r0, r8
    86c0:	f00d fb28 	bl	15d14 <net_buf_unref>
		return err;
    86c4:	e75a      	b.n	857c <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    86c6:	4638      	mov	r0, r7
    86c8:	210f      	movs	r1, #15
    86ca:	f014 ff2b 	bl	1d524 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    86ce:	2101      	movs	r1, #1
    86d0:	4630      	mov	r0, r6
    86d2:	f014 ff27 	bl	1d524 <atomic_set_bit>
	return 0;
    86d6:	e751      	b.n	857c <bt_smp_start_security+0x10>
		return -ENOTCONN;
    86d8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    86dc:	e74e      	b.n	857c <bt_smp_start_security+0x10>
		return -EIO;
    86de:	f06f 0404 	mvn.w	r4, #4
    86e2:	e74b      	b.n	857c <bt_smp_start_security+0x10>
    86e4:	200016dc 	.word	0x200016dc
    86e8:	20002993 	.word	0x20002993

000086ec <smp_pairing_complete>:
{
    86ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    86ee:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
    86f2:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    86f4:	1d05      	adds	r5, r0, #4
	if (!status) {
    86f6:	b9c9      	cbnz	r1, 872c <smp_pairing_complete+0x40>
	return list->head;
    86f8:	4b33      	ldr	r3, [pc, #204]	; (87c8 <smp_pairing_complete+0xdc>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    86fa:	210d      	movs	r1, #13
    86fc:	4628      	mov	r0, r5
    86fe:	f014 fe1e 	bl	1d33e <atomic_test_bit>
    8702:	681b      	ldr	r3, [r3, #0]
    8704:	4607      	mov	r7, r0
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
    8706:	2b00      	cmp	r3, #0
    8708:	d051      	beq.n	87ae <smp_pairing_complete+0xc2>
	return node->next;
    870a:	f853 590c 	ldr.w	r5, [r3], #-12
    870e:	b105      	cbz	r5, 8712 <smp_pairing_complete+0x26>
    8710:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
    8712:	681b      	ldr	r3, [r3, #0]
    8714:	b113      	cbz	r3, 871c <smp_pairing_complete+0x30>
				listener->pairing_complete(conn, bond_flag);
    8716:	4639      	mov	r1, r7
    8718:	4620      	mov	r0, r4
    871a:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
    871c:	2d00      	cmp	r5, #0
    871e:	d046      	beq.n	87ae <smp_pairing_complete+0xc2>
    8720:	68ea      	ldr	r2, [r5, #12]
    8722:	b102      	cbz	r2, 8726 <smp_pairing_complete+0x3a>
    8724:	3a0c      	subs	r2, #12
{
    8726:	462b      	mov	r3, r5
    8728:	4615      	mov	r5, r2
    872a:	e7f2      	b.n	8712 <smp_pairing_complete+0x26>
	switch (smp_err) {
    872c:	3901      	subs	r1, #1
    872e:	b2c9      	uxtb	r1, r1
    8730:	290e      	cmp	r1, #14
    8732:	bf9c      	itt	ls
    8734:	4b25      	ldrls	r3, [pc, #148]	; (87cc <smp_pairing_complete+0xe0>)
    8736:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
    8738:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    873c:	bf88      	it	hi
    873e:	2709      	movhi	r7, #9
		if (conn->le.keys &&
    8740:	b143      	cbz	r3, 8754 <smp_pairing_complete+0x68>
    8742:	7b1b      	ldrb	r3, [r3, #12]
    8744:	bb63      	cbnz	r3, 87a0 <smp_pairing_complete+0xb4>
			bt_keys_clear(conn->le.keys);
    8746:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    874a:	f015 fb6d 	bl	1de28 <bt_keys_clear>
			conn->le.keys = NULL;
    874e:	2300      	movs	r3, #0
    8750:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    8754:	2102      	movs	r1, #2
    8756:	4628      	mov	r0, r5
    8758:	f014 fdf1 	bl	1d33e <atomic_test_bit>
    875c:	b940      	cbnz	r0, 8770 <smp_pairing_complete+0x84>
	switch (err) {
    875e:	2f07      	cmp	r7, #7
    8760:	bf96      	itet	ls
    8762:	4b1b      	ldrls	r3, [pc, #108]	; (87d0 <smp_pairing_complete+0xe4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    8764:	211f      	movhi	r1, #31
    8766:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
    8768:	463a      	mov	r2, r7
    876a:	4620      	mov	r0, r4
    876c:	f7fc ffce 	bl	570c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8770:	2103      	movs	r1, #3
    8772:	4628      	mov	r0, r5
    8774:	f014 fde3 	bl	1d33e <atomic_test_bit>
    8778:	b1c8      	cbz	r0, 87ae <smp_pairing_complete+0xc2>
	return list->head;
    877a:	4b13      	ldr	r3, [pc, #76]	; (87c8 <smp_pairing_complete+0xdc>)
    877c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
    877e:	b1b3      	cbz	r3, 87ae <smp_pairing_complete+0xc2>
	return node->next;
    8780:	f853 590c 	ldr.w	r5, [r3], #-12
    8784:	b105      	cbz	r5, 8788 <smp_pairing_complete+0x9c>
    8786:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
    8788:	685b      	ldr	r3, [r3, #4]
    878a:	b113      	cbz	r3, 8792 <smp_pairing_complete+0xa6>
					listener->pairing_failed(conn, security_err);
    878c:	4639      	mov	r1, r7
    878e:	4620      	mov	r0, r4
    8790:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
    8792:	b165      	cbz	r5, 87ae <smp_pairing_complete+0xc2>
    8794:	68ea      	ldr	r2, [r5, #12]
    8796:	b102      	cbz	r2, 879a <smp_pairing_complete+0xae>
    8798:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    879a:	462b      	mov	r3, r5
    879c:	4615      	mov	r5, r2
    879e:	e7f3      	b.n	8788 <smp_pairing_complete+0x9c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    87a0:	2102      	movs	r1, #2
    87a2:	4628      	mov	r0, r5
    87a4:	f014 fdcb 	bl	1d33e <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    87a8:	2800      	cmp	r0, #0
    87aa:	d1cc      	bne.n	8746 <smp_pairing_complete+0x5a>
    87ac:	e7d2      	b.n	8754 <smp_pairing_complete+0x68>
	smp_reset(smp);
    87ae:	4630      	mov	r0, r6
    87b0:	f014 ff9e 	bl	1d6f0 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    87b4:	7a62      	ldrb	r2, [r4, #9]
    87b6:	7aa3      	ldrb	r3, [r4, #10]
    87b8:	429a      	cmp	r2, r3
    87ba:	d004      	beq.n	87c6 <smp_pairing_complete+0xda>
		bt_smp_start_security(conn);
    87bc:	4620      	mov	r0, r4
}
    87be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
    87c2:	f7ff bed3 	b.w	856c <bt_smp_start_security>
}
    87c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87c8:	200016e0 	.word	0x200016e0
    87cc:	00020e3e 	.word	0x00020e3e
    87d0:	00020e56 	.word	0x00020e56

000087d4 <bt_smp_recv>:
{
    87d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    87d6:	898b      	ldrh	r3, [r1, #12]
{
    87d8:	4607      	mov	r7, r0
    87da:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    87dc:	b393      	cbz	r3, 8844 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
    87de:	2101      	movs	r1, #1
    87e0:	f105 0008 	add.w	r0, r5, #8
    87e4:	f015 fbce 	bl	1df84 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    87e8:	2104      	movs	r1, #4
    87ea:	4606      	mov	r6, r0
    87ec:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
    87f0:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
    87f4:	f014 fda3 	bl	1d33e <atomic_test_bit>
    87f8:	bb20      	cbnz	r0, 8844 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    87fa:	7831      	ldrb	r1, [r6, #0]
    87fc:	290e      	cmp	r1, #14
    87fe:	d821      	bhi.n	8844 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
    8800:	4f11      	ldr	r7, [pc, #68]	; (8848 <bt_smp_recv+0x74>)
    8802:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    8806:	b923      	cbnz	r3, 8812 <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    8808:	2107      	movs	r1, #7
		smp_error(smp, err);
    880a:	4620      	mov	r0, r4
    880c:	f015 f903 	bl	1da16 <smp_error>
    8810:	e018      	b.n	8844 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    8812:	4620      	mov	r0, r4
    8814:	f014 ff54 	bl	1d6c0 <atomic_test_and_clear_bit>
    8818:	7833      	ldrb	r3, [r6, #0]
    881a:	b918      	cbnz	r0, 8824 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    881c:	2b05      	cmp	r3, #5
    881e:	d011      	beq.n	8844 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    8820:	2108      	movs	r1, #8
    8822:	e7f2      	b.n	880a <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
    8824:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    8828:	89a9      	ldrh	r1, [r5, #12]
    882a:	7912      	ldrb	r2, [r2, #4]
    882c:	4291      	cmp	r1, r2
    882e:	d001      	beq.n	8834 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    8830:	210a      	movs	r1, #10
    8832:	e7ea      	b.n	880a <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
    8834:	4629      	mov	r1, r5
    8836:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    883a:	4620      	mov	r0, r4
    883c:	4798      	blx	r3
	if (err) {
    883e:	4601      	mov	r1, r0
    8840:	2800      	cmp	r0, #0
    8842:	d1e2      	bne.n	880a <bt_smp_recv+0x36>
}
    8844:	2000      	movs	r0, #0
    8846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8848:	0001fb18 	.word	0x0001fb18

0000884c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    884c:	4b0c      	ldr	r3, [pc, #48]	; (8880 <bt_smp_pkey_ready+0x34>)
{
    884e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    8850:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    8852:	b1a0      	cbz	r0, 887e <bt_smp_pkey_ready+0x32>
    8854:	4c0b      	ldr	r4, [pc, #44]	; (8884 <bt_smp_pkey_ready+0x38>)
	z_impl_k_sem_give(sem);
    8856:	480c      	ldr	r0, [pc, #48]	; (8888 <bt_smp_pkey_ready+0x3c>)
    8858:	f00f fb5c 	bl	17f14 <z_impl_k_sem_give>
    885c:	f3bf 8f5b 	dmb	ish
    8860:	6863      	ldr	r3, [r4, #4]
    8862:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    8866:	065b      	lsls	r3, r3, #25
    8868:	d509      	bpl.n	887e <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
    886a:	4620      	mov	r0, r4
    886c:	f7ff f9e2 	bl	7c34 <smp_public_key_periph>
		if (err) {
    8870:	4601      	mov	r1, r0
    8872:	b120      	cbz	r0, 887e <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
    8874:	4620      	mov	r0, r4
}
    8876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    887a:	f015 b8cc 	b.w	1da16 <smp_error>
}
    887e:	bd10      	pop	{r4, pc}
    8880:	200017e0 	.word	0x200017e0
    8884:	20000f98 	.word	0x20000f98
    8888:	20000a90 	.word	0x20000a90

0000888c <smp_pairing_failed>:
{
    888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    888e:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
    8890:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    8894:	688e      	ldr	r6, [r1, #8]
{
    8896:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    8898:	210a      	movs	r1, #10
    889a:	4628      	mov	r0, r5
    889c:	f014 ff10 	bl	1d6c0 <atomic_test_and_clear_bit>
    88a0:	b140      	cbz	r0, 88b4 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
    88a2:	4b0b      	ldr	r3, [pc, #44]	; (88d0 <smp_pairing_failed+0x44>)
    88a4:	681b      	ldr	r3, [r3, #0]
    88a6:	b963      	cbnz	r3, 88c2 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
    88a8:	4620      	mov	r0, r4
    88aa:	7831      	ldrb	r1, [r6, #0]
    88ac:	f7ff ff1e 	bl	86ec <smp_pairing_complete>
}
    88b0:	2000      	movs	r0, #0
    88b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    88b4:	210b      	movs	r1, #11
    88b6:	4628      	mov	r0, r5
    88b8:	f014 ff02 	bl	1d6c0 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    88bc:	2800      	cmp	r0, #0
    88be:	d1f0      	bne.n	88a2 <smp_pairing_failed+0x16>
    88c0:	e7f2      	b.n	88a8 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
    88c2:	691b      	ldr	r3, [r3, #16]
    88c4:	2b00      	cmp	r3, #0
    88c6:	d0ef      	beq.n	88a8 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
    88c8:	4638      	mov	r0, r7
    88ca:	4798      	blx	r3
    88cc:	e7ec      	b.n	88a8 <smp_pairing_failed+0x1c>
    88ce:	bf00      	nop
    88d0:	200016dc 	.word	0x200016dc

000088d4 <bt_smp_encrypt_change>:
{
    88d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
    88d8:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    88da:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
    88de:	b088      	sub	sp, #32
    88e0:	4604      	mov	r4, r0
    88e2:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    88e4:	4630      	mov	r0, r6
    88e6:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
    88e8:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    88ec:	f014 fee8 	bl	1d6c0 <atomic_test_and_clear_bit>
    88f0:	2800      	cmp	r0, #0
    88f2:	f000 80c6 	beq.w	8a82 <bt_smp_encrypt_change+0x1ae>
	if (hci_status) {
    88f6:	b1df      	cbz	r7, 8930 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    88f8:	2103      	movs	r1, #3
    88fa:	4630      	mov	r0, r6
    88fc:	f014 fd1f 	bl	1d33e <atomic_test_bit>
    8900:	2800      	cmp	r0, #0
    8902:	f000 80be 	beq.w	8a82 <bt_smp_encrypt_change+0x1ae>
			uint8_t smp_err = smp_err_get(
    8906:	4638      	mov	r0, r7
    8908:	f7fb fa86 	bl	3e18 <bt_security_err_get>
	switch (auth_err) {
    890c:	3801      	subs	r0, #1
    890e:	b2c0      	uxtb	r0, r0
    8910:	2808      	cmp	r0, #8
    8912:	bf9a      	itte	ls
    8914:	4b60      	ldrls	r3, [pc, #384]	; (8a98 <bt_smp_encrypt_change+0x1c4>)
    8916:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
    8918:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    891a:	2102      	movs	r1, #2
    891c:	4630      	mov	r0, r6
    891e:	f014 fe01 	bl	1d524 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    8922:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
    8924:	4628      	mov	r0, r5
}
    8926:	b008      	add	sp, #32
    8928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
    892c:	f7ff bede 	b.w	86ec <smp_pairing_complete>
	if (!conn->encrypt) {
    8930:	f898 300b 	ldrb.w	r3, [r8, #11]
    8934:	2b00      	cmp	r3, #0
    8936:	f000 80a4 	beq.w	8a82 <bt_smp_encrypt_change+0x1ae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    893a:	2103      	movs	r1, #3
    893c:	4630      	mov	r0, r6
    893e:	f014 fcfe 	bl	1d33e <atomic_test_bit>
    8942:	b928      	cbnz	r0, 8950 <bt_smp_encrypt_change+0x7c>
		smp_reset(smp);
    8944:	4628      	mov	r0, r5
}
    8946:	b008      	add	sp, #32
    8948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
    894c:	f014 bed0 	b.w	1d6f0 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8950:	2105      	movs	r1, #5
    8952:	4630      	mov	r0, r6
    8954:	f014 fcf3 	bl	1d33e <atomic_test_bit>
    8958:	b1b8      	cbz	r0, 898a <bt_smp_encrypt_change+0xb6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    895a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    895e:	071b      	lsls	r3, r3, #28
    8960:	d507      	bpl.n	8972 <bt_smp_encrypt_change+0x9e>
    8962:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    8966:	071f      	lsls	r7, r3, #28
    8968:	d503      	bpl.n	8972 <bt_smp_encrypt_change+0x9e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    896a:	2111      	movs	r1, #17
    896c:	4630      	mov	r0, r6
    896e:	f014 fdd9 	bl	1d524 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    8972:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    8976:	f023 0308 	bic.w	r3, r3, #8
    897a:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    897e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    8982:	f023 0308 	bic.w	r3, r3, #8
    8986:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    898a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    898e:	07d8      	lsls	r0, r3, #31
    8990:	d57a      	bpl.n	8a88 <bt_smp_encrypt_change+0x1b4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    8992:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    8994:	4628      	mov	r0, r5
    8996:	f014 fdc5 	bl	1d524 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    899a:	2102      	movs	r1, #2
    899c:	4630      	mov	r0, r6
    899e:	f014 fdc1 	bl	1d524 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
    89a2:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
    89a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    89a8:	2b00      	cmp	r3, #0
    89aa:	d06a      	beq.n	8a82 <bt_smp_encrypt_change+0x1ae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    89ac:	2105      	movs	r1, #5
    89ae:	f014 fcc6 	bl	1d33e <atomic_test_bit>
    89b2:	2800      	cmp	r0, #0
    89b4:	d160      	bne.n	8a78 <bt_smp_encrypt_change+0x1a4>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    89b6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    89ba:	07db      	lsls	r3, r3, #31
    89bc:	d55c      	bpl.n	8a78 <bt_smp_encrypt_change+0x1a4>
	struct bt_keys *keys = conn->le.keys;
    89be:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    89c0:	211a      	movs	r1, #26
    89c2:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    89c4:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    89c8:	f003 f850 	bl	ba6c <bt_rand>
    89cc:	4681      	mov	r9, r0
    89ce:	2800      	cmp	r0, #0
    89d0:	d152      	bne.n	8a78 <bt_smp_encrypt_change+0x1a4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    89d2:	2106      	movs	r1, #6
    89d4:	4628      	mov	r0, r5
    89d6:	f014 fdf7 	bl	1d5c8 <smp_create_pdu.constprop.0>
		if (!buf) {
    89da:	4680      	mov	r8, r0
    89dc:	2800      	cmp	r0, #0
    89de:	d04b      	beq.n	8a78 <bt_smp_encrypt_change+0x1a4>
	return net_buf_simple_add(&buf->b, len);
    89e0:	2110      	movs	r1, #16
    89e2:	3008      	adds	r0, #8
    89e4:	f015 fa91 	bl	1df0a <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    89e8:	7b3a      	ldrb	r2, [r7, #12]
    89ea:	a901      	add	r1, sp, #4
    89ec:	4682      	mov	sl, r0
    89ee:	f011 ff30 	bl	1a852 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    89f2:	7b38      	ldrb	r0, [r7, #12]
    89f4:	280f      	cmp	r0, #15
    89f6:	d805      	bhi.n	8a04 <bt_smp_encrypt_change+0x130>
			(void)memset(info->ltk + keys->enc_size, 0,
    89f8:	f1c0 0210 	rsb	r2, r0, #16
    89fc:	4649      	mov	r1, r9
    89fe:	4450      	add	r0, sl
    8a00:	f011 ff32 	bl	1a868 <memset>
		smp_send(smp, buf, NULL, NULL);
    8a04:	4641      	mov	r1, r8
    8a06:	2200      	movs	r2, #0
    8a08:	4628      	mov	r0, r5
    8a0a:	f014 fcef 	bl	1d3ec <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
    8a0e:	2107      	movs	r1, #7
    8a10:	4628      	mov	r0, r5
    8a12:	f014 fdd9 	bl	1d5c8 <smp_create_pdu.constprop.0>
		if (!buf) {
    8a16:	4680      	mov	r8, r0
    8a18:	b370      	cbz	r0, 8a78 <bt_smp_encrypt_change+0x1a4>
    8a1a:	210a      	movs	r1, #10
    8a1c:	3008      	adds	r0, #8
    8a1e:	f015 fa74 	bl	1df0a <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    8a22:	2208      	movs	r2, #8
    8a24:	4681      	mov	r9, r0
    8a26:	a905      	add	r1, sp, #20
    8a28:	3002      	adds	r0, #2
    8a2a:	f011 ff12 	bl	1a852 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    8a2e:	2202      	movs	r2, #2
    8a30:	a907      	add	r1, sp, #28
    8a32:	4648      	mov	r0, r9
    8a34:	f011 ff0d 	bl	1a852 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    8a38:	4641      	mov	r1, r8
    8a3a:	4628      	mov	r0, r5
    8a3c:	4a17      	ldr	r2, [pc, #92]	; (8a9c <bt_smp_encrypt_change+0x1c8>)
    8a3e:	f014 fcd5 	bl	1d3ec <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8a42:	210d      	movs	r1, #13
    8a44:	4630      	mov	r0, r6
    8a46:	f014 fc7a 	bl	1d33e <atomic_test_bit>
    8a4a:	b1a8      	cbz	r0, 8a78 <bt_smp_encrypt_change+0x1a4>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
    8a4c:	2101      	movs	r1, #1
    8a4e:	4638      	mov	r0, r7
    8a50:	f015 f9e6 	bl	1de20 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
    8a54:	2210      	movs	r2, #16
    8a56:	a901      	add	r1, sp, #4
    8a58:	f107 004a 	add.w	r0, r7, #74	; 0x4a
    8a5c:	f011 fef9 	bl	1a852 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
    8a60:	2208      	movs	r2, #8
    8a62:	a905      	add	r1, sp, #20
    8a64:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8a68:	f011 fef3 	bl	1a852 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
    8a6c:	2202      	movs	r2, #2
    8a6e:	a907      	add	r1, sp, #28
    8a70:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8a74:	f011 feed 	bl	1a852 <memcpy>
	if (!smp->local_dist && !smp->remote_dist) {
    8a78:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    8a7c:	2900      	cmp	r1, #0
    8a7e:	f43f af51 	beq.w	8924 <bt_smp_encrypt_change+0x50>
}
    8a82:	b008      	add	sp, #32
    8a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    8a88:	0799      	lsls	r1, r3, #30
    8a8a:	d501      	bpl.n	8a90 <bt_smp_encrypt_change+0x1bc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    8a8c:	2108      	movs	r1, #8
    8a8e:	e781      	b.n	8994 <bt_smp_encrypt_change+0xc0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    8a90:	075a      	lsls	r2, r3, #29
    8a92:	d582      	bpl.n	899a <bt_smp_encrypt_change+0xc6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    8a94:	210a      	movs	r1, #10
    8a96:	e77d      	b.n	8994 <bt_smp_encrypt_change+0xc0>
    8a98:	00020e4d 	.word	0x00020e4d
    8a9c:	0001dced 	.word	0x0001dced

00008aa0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    8aa0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    8aa2:	4b07      	ldr	r3, [pc, #28]	; (8ac0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    8aa4:	4807      	ldr	r0, [pc, #28]	; (8ac4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    8aa6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    8aaa:	f003 0306 	and.w	r3, r3, #6
    8aae:	1f9a      	subs	r2, r3, #6
    8ab0:	4253      	negs	r3, r2
    8ab2:	4153      	adcs	r3, r2
    8ab4:	4a04      	ldr	r2, [pc, #16]	; (8ac8 <bt_smp_init+0x28>)
    8ab6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    8ab8:	f7fc fa18 	bl	4eec <bt_pub_key_gen>
	}

	return smp_self_test();
}
    8abc:	2000      	movs	r0, #0
    8abe:	bd08      	pop	{r3, pc}
    8ac0:	20000000 	.word	0x20000000
    8ac4:	2000033c 	.word	0x2000033c
    8ac8:	20002993 	.word	0x20002993

00008acc <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    8acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    8ace:	4d11      	ldr	r5, [pc, #68]	; (8b14 <bt_keys_get_addr+0x48>)
    8ad0:	782b      	ldrb	r3, [r5, #0]
    8ad2:	4283      	cmp	r3, r0
{
    8ad4:	4606      	mov	r6, r0
    8ad6:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    8ad8:	d00b      	beq.n	8af2 <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    8ada:	2400      	movs	r4, #0
    8adc:	480e      	ldr	r0, [pc, #56]	; (8b18 <bt_keys_get_addr+0x4c>)
    8ade:	9400      	str	r4, [sp, #0]
    8ae0:	2207      	movs	r2, #7
    8ae2:	4669      	mov	r1, sp
    8ae4:	f8cd 4003 	str.w	r4, [sp, #3]
    8ae8:	f011 fea2 	bl	1a830 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    8aec:	b150      	cbz	r0, 8b04 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    8aee:	4620      	mov	r0, r4
    8af0:	e006      	b.n	8b00 <bt_keys_get_addr+0x34>
    8af2:	2207      	movs	r2, #7
    8af4:	1c68      	adds	r0, r5, #1
    8af6:	f011 fe9b 	bl	1a830 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    8afa:	2800      	cmp	r0, #0
    8afc:	d1ed      	bne.n	8ada <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
    8afe:	4628      	mov	r0, r5
}
    8b00:	b003      	add	sp, #12
    8b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
    8b04:	4804      	ldr	r0, [pc, #16]	; (8b18 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    8b06:	702e      	strb	r6, [r5, #0]
    8b08:	2207      	movs	r2, #7
    8b0a:	4639      	mov	r1, r7
    8b0c:	f011 fea1 	bl	1a852 <memcpy>
		return keys;
    8b10:	4800      	ldr	r0, [pc, #0]	; (8b14 <bt_keys_get_addr+0x48>)
}
    8b12:	e7f5      	b.n	8b00 <bt_keys_get_addr+0x34>
    8b14:	200017e4 	.word	0x200017e4
    8b18:	200017e5 	.word	0x200017e5

00008b1c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    8b1c:	460b      	mov	r3, r1
    8b1e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    8b20:	4a04      	ldr	r2, [pc, #16]	; (8b34 <bt_keys_foreach+0x18>)
{
    8b22:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    8b24:	89d4      	ldrh	r4, [r2, #14]
    8b26:	4204      	tst	r4, r0
    8b28:	d002      	beq.n	8b30 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    8b2a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    8b2c:	4610      	mov	r0, r2
    8b2e:	4718      	bx	r3
}
    8b30:	bc10      	pop	{r4}
    8b32:	4770      	bx	lr
    8b34:	200017e4 	.word	0x200017e4

00008b38 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    8b38:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    8b3a:	4c09      	ldr	r4, [pc, #36]	; (8b60 <bt_keys_find+0x28>)
{
    8b3c:	460b      	mov	r3, r1
    8b3e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    8b40:	89e2      	ldrh	r2, [r4, #14]
    8b42:	4202      	tst	r2, r0
    8b44:	d007      	beq.n	8b56 <bt_keys_find+0x1e>
    8b46:	7822      	ldrb	r2, [r4, #0]
    8b48:	429a      	cmp	r2, r3
    8b4a:	d104      	bne.n	8b56 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    8b4c:	2207      	movs	r2, #7
    8b4e:	1c60      	adds	r0, r4, #1
    8b50:	f011 fe6e 	bl	1a830 <memcmp>
    8b54:	b108      	cbz	r0, 8b5a <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    8b56:	2000      	movs	r0, #0
}
    8b58:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    8b5a:	4620      	mov	r0, r4
    8b5c:	e7fc      	b.n	8b58 <bt_keys_find+0x20>
    8b5e:	bf00      	nop
    8b60:	200017e4 	.word	0x200017e4

00008b64 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    8b64:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    8b66:	780b      	ldrb	r3, [r1, #0]
    8b68:	2b01      	cmp	r3, #1
    8b6a:	4606      	mov	r6, r0
    8b6c:	460d      	mov	r5, r1
    8b6e:	d001      	beq.n	8b74 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    8b70:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    8b72:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    8b74:	798b      	ldrb	r3, [r1, #6]
    8b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8b7a:	2b40      	cmp	r3, #64	; 0x40
    8b7c:	d1f8      	bne.n	8b70 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    8b7e:	4c12      	ldr	r4, [pc, #72]	; (8bc8 <bt_keys_find_irk+0x64>)
    8b80:	89e3      	ldrh	r3, [r4, #14]
    8b82:	079b      	lsls	r3, r3, #30
    8b84:	d5f4      	bpl.n	8b70 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    8b86:	7823      	ldrb	r3, [r4, #0]
    8b88:	42b3      	cmp	r3, r6
    8b8a:	d10b      	bne.n	8ba4 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
    8b8c:	2206      	movs	r2, #6
    8b8e:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    8b92:	1c68      	adds	r0, r5, #1
    8b94:	f011 fe4c 	bl	1a830 <memcmp>
    8b98:	b908      	cbnz	r0, 8b9e <bt_keys_find_irk+0x3a>
			return &key_pool[i];
    8b9a:	4620      	mov	r0, r4
    8b9c:	e7e9      	b.n	8b72 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    8b9e:	89e3      	ldrh	r3, [r4, #14]
    8ba0:	079a      	lsls	r2, r3, #30
    8ba2:	d5e5      	bpl.n	8b70 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    8ba4:	7823      	ldrb	r3, [r4, #0]
    8ba6:	42b3      	cmp	r3, r6
    8ba8:	d1e2      	bne.n	8b70 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    8baa:	3501      	adds	r5, #1
    8bac:	4807      	ldr	r0, [pc, #28]	; (8bcc <bt_keys_find_irk+0x68>)
    8bae:	4629      	mov	r1, r5
    8bb0:	f011 fe78 	bl	1a8a4 <bt_rpa_irk_matches>
    8bb4:	2800      	cmp	r0, #0
    8bb6:	d0db      	beq.n	8b70 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    8bb8:	4805      	ldr	r0, [pc, #20]	; (8bd0 <bt_keys_find_irk+0x6c>)
    8bba:	2206      	movs	r2, #6
    8bbc:	4629      	mov	r1, r5
    8bbe:	f011 fe48 	bl	1a852 <memcpy>
			return &key_pool[i];
    8bc2:	4801      	ldr	r0, [pc, #4]	; (8bc8 <bt_keys_find_irk+0x64>)
}
    8bc4:	e7d5      	b.n	8b72 <bt_keys_find_irk+0xe>
    8bc6:	bf00      	nop
    8bc8:	200017e4 	.word	0x200017e4
    8bcc:	2000180e 	.word	0x2000180e
    8bd0:	2000181e 	.word	0x2000181e

00008bd4 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    8bd4:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    8bd6:	4c06      	ldr	r4, [pc, #24]	; (8bf0 <bt_keys_find_addr+0x1c>)
    8bd8:	7823      	ldrb	r3, [r4, #0]
    8bda:	4283      	cmp	r3, r0
    8bdc:	d104      	bne.n	8be8 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    8bde:	2207      	movs	r2, #7
    8be0:	1c60      	adds	r0, r4, #1
    8be2:	f011 fe25 	bl	1a830 <memcmp>
    8be6:	b108      	cbz	r0, 8bec <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    8be8:	2000      	movs	r0, #0
}
    8bea:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    8bec:	4620      	mov	r0, r4
    8bee:	e7fc      	b.n	8bea <bt_keys_find_addr+0x16>
    8bf0:	200017e4 	.word	0x200017e4

00008bf4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    8bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bf8:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    8bfa:	1dc2      	adds	r2, r0, #7
    8bfc:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8c00:	1e75      	subs	r5, r6, #1
{
    8c02:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8c04:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    8c06:	6018      	str	r0, [r3, #0]
{
    8c08:	b082      	sub	sp, #8
    8c0a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    8c0c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    8c0e:	2100      	movs	r1, #0
    8c10:	2204      	movs	r2, #4
    8c12:	fb07 0005 	mla	r0, r7, r5, r0
    8c16:	f011 fe27 	bl	1a868 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    8c1a:	b1bd      	cbz	r5, 8c4c <mem_init+0x58>
    8c1c:	3e02      	subs	r6, #2
    8c1e:	b2b6      	uxth	r6, r6
    8c20:	fb06 7307 	mla	r3, r6, r7, r7
    8c24:	fb06 f807 	mul.w	r8, r6, r7
    8c28:	441c      	add	r4, r3
    8c2a:	eba8 0803 	sub.w	r8, r8, r3
    8c2e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    8c30:	2204      	movs	r2, #4
    8c32:	eb04 0008 	add.w	r0, r4, r8
    8c36:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    8c3a:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    8c3c:	f011 fe09 	bl	1a852 <memcpy>
	while (mem_count--) {
    8c40:	42b5      	cmp	r5, r6
    8c42:	eba4 0407 	sub.w	r4, r4, r7
    8c46:	f105 0501 	add.w	r5, r5, #1
    8c4a:	d1f1      	bne.n	8c30 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    8c4c:	b002      	add	sp, #8
    8c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c52:	bf00      	nop

00008c54 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    8c54:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    8c56:	6805      	ldr	r5, [r0, #0]
{
    8c58:	b082      	sub	sp, #8
	if (*mem_head) {
    8c5a:	b195      	cbz	r5, 8c82 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8c5c:	1deb      	adds	r3, r5, #7
    8c5e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    8c62:	2204      	movs	r2, #4
    8c64:	4604      	mov	r4, r0
    8c66:	4629      	mov	r1, r5
    8c68:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8c6c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    8c6e:	f011 fdf0 	bl	1a852 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    8c72:	9b01      	ldr	r3, [sp, #4]
    8c74:	b123      	cbz	r3, 8c80 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    8c76:	1dda      	adds	r2, r3, #7
    8c78:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    8c7c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    8c7e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    8c80:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    8c82:	4628      	mov	r0, r5
    8c84:	b002      	add	sp, #8
    8c86:	bd70      	pop	{r4, r5, r6, pc}

00008c88 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    8c88:	680b      	ldr	r3, [r1, #0]
{
    8c8a:	b570      	push	{r4, r5, r6, lr}
    8c8c:	460c      	mov	r4, r1
    8c8e:	4605      	mov	r5, r0
	if (*mem_head) {
    8c90:	b183      	cbz	r3, 8cb4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8c92:	3307      	adds	r3, #7
    8c94:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    8c98:	881e      	ldrh	r6, [r3, #0]
    8c9a:	3601      	adds	r6, #1
    8c9c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    8c9e:	2204      	movs	r2, #4
    8ca0:	4621      	mov	r1, r4
    8ca2:	4628      	mov	r0, r5
    8ca4:	f011 fdd5 	bl	1a852 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    8ca8:	1deb      	adds	r3, r5, #7
    8caa:	f023 0303 	bic.w	r3, r3, #3
    8cae:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    8cb0:	6025      	str	r5, [r4, #0]
}
    8cb2:	bd70      	pop	{r4, r5, r6, pc}
    8cb4:	2601      	movs	r6, #1
    8cb6:	e7f2      	b.n	8c9e <mem_release+0x16>

00008cb8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    8cb8:	fb02 0001 	mla	r0, r2, r1, r0
    8cbc:	4770      	bx	lr
    8cbe:	bf00      	nop

00008cc0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
    8cc0:	1a40      	subs	r0, r0, r1
    8cc2:	fb90 f0f2 	sdiv	r0, r0, r2
}
    8cc6:	b280      	uxth	r0, r0
    8cc8:	4770      	bx	lr
    8cca:	bf00      	nop

00008ccc <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    8ccc:	1e53      	subs	r3, r2, #1
	src += len;
    8cce:	4411      	add	r1, r2
	while (len--) {
    8cd0:	b29b      	uxth	r3, r3
    8cd2:	b142      	cbz	r2, 8ce6 <mem_rcopy+0x1a>
    8cd4:	43db      	mvns	r3, r3
    8cd6:	3801      	subs	r0, #1
    8cd8:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    8cda:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    8cde:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    8ce2:	4291      	cmp	r1, r2
    8ce4:	d1f9      	bne.n	8cda <mem_rcopy+0xe>
	}
}
    8ce6:	4770      	bx	lr

00008ce8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    8ce8:	4401      	add	r1, r0
    8cea:	e002      	b.n	8cf2 <mem_nz+0xa>
		if (*src++) {
    8cec:	f810 3b01 	ldrb.w	r3, [r0], #1
    8cf0:	b91b      	cbnz	r3, 8cfa <mem_nz+0x12>
	while (len--) {
    8cf2:	4288      	cmp	r0, r1
    8cf4:	d1fa      	bne.n	8cec <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    8cf6:	2000      	movs	r0, #0
    8cf8:	4770      	bx	lr
			return 1;
    8cfa:	2001      	movs	r0, #1
}
    8cfc:	4770      	bx	lr
    8cfe:	bf00      	nop

00008d00 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    8d00:	6010      	str	r0, [r2, #0]
    8d02:	6008      	str	r0, [r1, #0]

	return link;
}
    8d04:	4770      	bx	lr
    8d06:	bf00      	nop

00008d08 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    8d08:	680a      	ldr	r2, [r1, #0]
{
    8d0a:	4603      	mov	r3, r0
	if (*head != *tail) {
    8d0c:	6800      	ldr	r0, [r0, #0]
    8d0e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    8d10:	bf05      	ittet	eq
    8d12:	2200      	moveq	r2, #0
    8d14:	600a      	streq	r2, [r1, #0]
		return NULL;
    8d16:	2000      	movne	r0, #0
	*head = *tail = NULL;
    8d18:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    8d1a:	4770      	bx	lr

00008d1c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    8d1c:	f8d2 c000 	ldr.w	ip, [r2]
    8d20:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    8d24:	f8d2 c000 	ldr.w	ip, [r2]
    8d28:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    8d2c:	6010      	str	r0, [r2, #0]

	return link;
}
    8d2e:	4770      	bx	lr

00008d30 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    8d30:	4288      	cmp	r0, r1
    8d32:	d003      	beq.n	8d3c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    8d34:	b11a      	cbz	r2, 8d3e <memq_peek+0xe>
		*mem = head->mem;
    8d36:	6843      	ldr	r3, [r0, #4]
    8d38:	6013      	str	r3, [r2, #0]
    8d3a:	4770      	bx	lr
		return NULL;
    8d3c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    8d3e:	4770      	bx	lr

00008d40 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    8d40:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    8d42:	4283      	cmp	r3, r0
    8d44:	d009      	beq.n	8d5a <memq_dequeue+0x1a>
	if (mem) {
    8d46:	b12a      	cbz	r2, 8d54 <memq_dequeue+0x14>
		*mem = head->mem;
    8d48:	6858      	ldr	r0, [r3, #4]
    8d4a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    8d4c:	681a      	ldr	r2, [r3, #0]
    8d4e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    8d50:	4618      	mov	r0, r3
    8d52:	4770      	bx	lr
	if (old_head == NULL) {
    8d54:	2b00      	cmp	r3, #0
    8d56:	d1f9      	bne.n	8d4c <memq_dequeue+0xc>
    8d58:	e7fa      	b.n	8d50 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    8d5a:	2300      	movs	r3, #0
    8d5c:	e7f8      	b.n	8d50 <memq_dequeue+0x10>
    8d5e:	bf00      	nop

00008d60 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    8d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d64:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8d98 <mayfly_init+0x38>
    8d68:	4e0c      	ldr	r6, [pc, #48]	; (8d9c <mayfly_init+0x3c>)
    8d6a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    8d6c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    8d70:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    8d72:	1d22      	adds	r2, r4, #4
    8d74:	4621      	mov	r1, r4
    8d76:	4628      	mov	r0, r5
		while (caller_id--) {
    8d78:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    8d7a:	f7ff ffc1 	bl	8d00 <memq_init>
		while (caller_id--) {
    8d7e:	42b4      	cmp	r4, r6
    8d80:	f1a5 0508 	sub.w	r5, r5, #8
    8d84:	d1f5      	bne.n	8d72 <mayfly_init+0x12>
	while (callee_id--) {
    8d86:	3f04      	subs	r7, #4
    8d88:	1d3b      	adds	r3, r7, #4
    8d8a:	f1a8 0820 	sub.w	r8, r8, #32
    8d8e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    8d92:	d1eb      	bne.n	8d6c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    8d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d98:	200018b8 	.word	0x200018b8
    8d9c:	20001948 	.word	0x20001948

00008da0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    8da0:	b410      	push	{r4}
    8da2:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    8da4:	4c15      	ldr	r4, [pc, #84]	; (8dfc <mayfly_enable+0x5c>)
{
    8da6:	468c      	mov	ip, r1
	if (enable) {
    8da8:	b192      	cbz	r2, 8dd0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    8daa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    8dae:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    8db2:	0100      	lsls	r0, r0, #4
    8db4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8db8:	4421      	add	r1, r4
    8dba:	7a48      	ldrb	r0, [r1, #9]
    8dbc:	7a0c      	ldrb	r4, [r1, #8]
    8dbe:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    8dc0:	bf04      	itt	eq
    8dc2:	3001      	addeq	r0, #1
    8dc4:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    8dc6:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    8dc8:	4661      	mov	r1, ip
    8dca:	4618      	mov	r0, r3
    8dcc:	f00c bcc6 	b.w	1575c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    8dd0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    8dd4:	0112      	lsls	r2, r2, #4
    8dd6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    8dda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8dde:	4423      	add	r3, r4
    8de0:	7a9c      	ldrb	r4, [r3, #10]
    8de2:	7ada      	ldrb	r2, [r3, #11]
    8de4:	42a2      	cmp	r2, r4
    8de6:	d001      	beq.n	8dec <mayfly_enable+0x4c>
}
    8de8:	bc10      	pop	{r4}
    8dea:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    8dec:	3201      	adds	r2, #1
    8dee:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    8df0:	4b03      	ldr	r3, [pc, #12]	; (8e00 <mayfly_enable+0x60>)
    8df2:	2201      	movs	r2, #1
    8df4:	545a      	strb	r2, [r3, r1]
}
    8df6:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    8df8:	f00c bd06 	b.w	15808 <mayfly_pend>
    8dfc:	200018c4 	.word	0x200018c4
    8e00:	200018c0 	.word	0x200018c0

00008e04 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    8e04:	b570      	push	{r4, r5, r6, lr}
    8e06:	b082      	sub	sp, #8
    8e08:	4606      	mov	r6, r0
    8e0a:	9101      	str	r1, [sp, #4]
    8e0c:	461c      	mov	r4, r3
    8e0e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    8e10:	b32a      	cbz	r2, 8e5e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    8e12:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    8e14:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    8e16:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    8e18:	f012 0203 	ands.w	r2, r2, #3
    8e1c:	d005      	beq.n	8e2a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
    8e1e:	2a01      	cmp	r2, #1
    8e20:	d042      	beq.n	8ea8 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    8e22:	3301      	adds	r3, #1
    8e24:	b2db      	uxtb	r3, r3
    8e26:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    8e28:	e00f      	b.n	8e4a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    8e2a:	3301      	adds	r3, #1
    8e2c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8e2e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    8e30:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8e32:	2304      	movs	r3, #4
    8e34:	fb11 3105 	smlabb	r1, r1, r5, r3
    8e38:	4a1c      	ldr	r2, [pc, #112]	; (8eac <mayfly_enqueue+0xa8>)
    8e3a:	6860      	ldr	r0, [r4, #4]
    8e3c:	230c      	movs	r3, #12
    8e3e:	fb13 1306 	smlabb	r3, r3, r6, r1
    8e42:	441a      	add	r2, r3
    8e44:	4621      	mov	r1, r4
    8e46:	f7ff ff69 	bl	8d1c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    8e4a:	4b19      	ldr	r3, [pc, #100]	; (8eb0 <mayfly_enqueue+0xac>)
    8e4c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    8e4e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    8e50:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    8e52:	4629      	mov	r1, r5
    8e54:	f00c fcd8 	bl	15808 <mayfly_pend>

	return 0;
    8e58:	2000      	movs	r0, #0
}
    8e5a:	b002      	add	sp, #8
    8e5c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    8e5e:	f00c fcbd 	bl	157dc <mayfly_prio_is_equal>
    8e62:	2800      	cmp	r0, #0
    8e64:	d0d5      	beq.n	8e12 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
    8e66:	4629      	mov	r1, r5
    8e68:	4630      	mov	r0, r6
    8e6a:	f00c fc97 	bl	1579c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    8e6e:	2800      	cmp	r0, #0
    8e70:	d0cf      	beq.n	8e12 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
    8e72:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    8e76:	0112      	lsls	r2, r2, #4
    8e78:	490c      	ldr	r1, [pc, #48]	; (8eac <mayfly_enqueue+0xa8>)
    8e7a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8e82:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    8e84:	7a9a      	ldrb	r2, [r3, #10]
    8e86:	7adb      	ldrb	r3, [r3, #11]
    8e88:	429a      	cmp	r2, r3
    8e8a:	d1c2      	bne.n	8e12 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
    8e8c:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    8e8e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    8e90:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    8e92:	0792      	lsls	r2, r2, #30
    8e94:	d002      	beq.n	8e9c <mayfly_enqueue+0x98>
		m->_req = ack + 2;
    8e96:	3302      	adds	r3, #2
    8e98:	b2db      	uxtb	r3, r3
    8e9a:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    8e9c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    8ea0:	4798      	blx	r3
		return 0;
    8ea2:	2000      	movs	r0, #0
}
    8ea4:	b002      	add	sp, #8
    8ea6:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    8ea8:	4610      	mov	r0, r2
    8eaa:	e7d6      	b.n	8e5a <mayfly_enqueue+0x56>
    8eac:	200018c4 	.word	0x200018c4
    8eb0:	200018c0 	.word	0x200018c0

00008eb4 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    8eb4:	4a50      	ldr	r2, [pc, #320]	; (8ff8 <mayfly_run+0x144>)
    8eb6:	5c13      	ldrb	r3, [r2, r0]
    8eb8:	2b00      	cmp	r3, #0
    8eba:	f000 809b 	beq.w	8ff4 <mayfly_run+0x140>
{
    8ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    8ec2:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8ec4:	4f4d      	ldr	r7, [pc, #308]	; (8ffc <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
    8ec6:	5413      	strb	r3, [r2, r0]
{
    8ec8:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    8eca:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8ecc:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    8ed0:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8ed4:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    8ed8:	9303      	str	r3, [sp, #12]
    8eda:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8ede:	f10b 0804 	add.w	r8, fp, #4
    8ee2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    8ee6:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    8eea:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    8eec:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    8ef0:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    8ef2:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    8ef4:	f7ff ff1c 	bl	8d30 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    8ef8:	f107 0624 	add.w	r6, r7, #36	; 0x24
    8efc:	4683      	mov	fp, r0
    8efe:	2800      	cmp	r0, #0
    8f00:	d034      	beq.n	8f6c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    8f02:	9c05      	ldr	r4, [sp, #20]
    8f04:	7863      	ldrb	r3, [r4, #1]
    8f06:	7825      	ldrb	r5, [r4, #0]
    8f08:	1aed      	subs	r5, r5, r3
    8f0a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    8f0e:	2d01      	cmp	r5, #1
    8f10:	d106      	bne.n	8f20 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    8f12:	3b01      	subs	r3, #1
    8f14:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    8f16:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    8f1a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    8f1c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    8f1e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    8f20:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    8f22:	1ac3      	subs	r3, r0, r3
    8f24:	f003 0303 	and.w	r3, r3, #3
    8f28:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    8f2a:	f04f 0200 	mov.w	r2, #0
    8f2e:	4631      	mov	r1, r6
	req = m->_req;
    8f30:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    8f34:	d00f      	beq.n	8f56 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
    8f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8f38:	f7ff ff02 	bl	8d40 <memq_dequeue>
		ack = m->_ack;
    8f3c:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    8f40:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    8f42:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    8f46:	eba3 030c 	sub.w	r3, r3, ip
    8f4a:	f003 0303 	and.w	r3, r3, #3
    8f4e:	2b01      	cmp	r3, #1
		m->_ack = req;
    8f50:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    8f54:	d046      	beq.n	8fe4 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    8f56:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    8f5a:	aa05      	add	r2, sp, #20
    8f5c:	f7ff fee8 	bl	8d30 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    8f60:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    8f62:	9000      	str	r0, [sp, #0]
    8f64:	4683      	mov	fp, r0
			if (state == 1U) {
    8f66:	d02b      	beq.n	8fc0 <mayfly_run+0x10c>
		while (link) {
    8f68:	2800      	cmp	r0, #0
    8f6a:	d1ca      	bne.n	8f02 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    8f6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    8f70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    8f74:	429a      	cmp	r2, r3
    8f76:	d003      	beq.n	8f80 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    8f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    8f7c:	2301      	movs	r3, #1
    8f7e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    8f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    8f84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    8f88:	429a      	cmp	r2, r3
    8f8a:	d003      	beq.n	8f94 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    8f8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    8f90:	2301      	movs	r3, #1
    8f92:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    8f94:	f109 39ff 	add.w	r9, r9, #4294967295
    8f98:	fa5f f989 	uxtb.w	r9, r9
    8f9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    8fa0:	f1a7 070c 	sub.w	r7, r7, #12
    8fa4:	d1a1      	bne.n	8eea <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    8fa6:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    8faa:	b1c3      	cbz	r3, 8fde <mayfly_run+0x12a>
    8fac:	9b03      	ldr	r3, [sp, #12]
    8fae:	b9b3      	cbnz	r3, 8fde <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
    8fb0:	461a      	mov	r2, r3
    8fb2:	4651      	mov	r1, sl
    8fb4:	4650      	mov	r0, sl
	}
}
    8fb6:	b007      	add	sp, #28
    8fb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    8fbc:	f00c bbce 	b.w	1575c <mayfly_enable_cb>
				if (caller_id || link) {
    8fc0:	f1b9 0f00 	cmp.w	r9, #0
    8fc4:	d101      	bne.n	8fca <mayfly_run+0x116>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	d0d0      	beq.n	8f6c <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
    8fca:	f8dd a008 	ldr.w	sl, [sp, #8]
    8fce:	4a0a      	ldr	r2, [pc, #40]	; (8ff8 <mayfly_run+0x144>)
    8fd0:	2301      	movs	r3, #1
    8fd2:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    8fd6:	4651      	mov	r1, sl
    8fd8:	4650      	mov	r0, sl
    8fda:	f00c fc15 	bl	15808 <mayfly_pend>
}
    8fde:	b007      	add	sp, #28
    8fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8fe4:	4642      	mov	r2, r8
    8fe6:	4621      	mov	r1, r4
    8fe8:	4658      	mov	r0, fp
			m->_ack = ack;
    8fea:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8fee:	f7ff fe95 	bl	8d1c <memq_enqueue>
    8ff2:	e7b0      	b.n	8f56 <mayfly_run+0xa2>
    8ff4:	4770      	bx	lr
    8ff6:	bf00      	nop
    8ff8:	200018c0 	.word	0x200018c0
    8ffc:	200018c4 	.word	0x200018c4

00009000 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    9000:	1e4b      	subs	r3, r1, #1
    9002:	b2db      	uxtb	r3, r3
    9004:	b171      	cbz	r1, 9024 <util_ones_count_get+0x24>
    9006:	1e41      	subs	r1, r0, #1
    9008:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    900c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    900e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    9012:	b123      	cbz	r3, 901e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    9014:	1e5a      	subs	r2, r3, #1
			one_count++;
    9016:	3001      	adds	r0, #1
		while (bite) {
    9018:	4013      	ands	r3, r2
			one_count++;
    901a:	b2c0      	uxtb	r0, r0
		while (bite) {
    901c:	d1fa      	bne.n	9014 <util_ones_count_get+0x14>
	while (octets_len--) {
    901e:	4561      	cmp	r1, ip
    9020:	d1f5      	bne.n	900e <util_ones_count_get+0xe>
    9022:	4770      	bx	lr
	uint8_t one_count = 0U;
    9024:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    9026:	4770      	bx	lr

00009028 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    9028:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    902a:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    902c:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    902e:	2bff      	cmp	r3, #255	; 0xff
    9030:	d014      	beq.n	905c <ticker_dequeue+0x34>
		ticker_current = &node[current];
    9032:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    9036:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    9038:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    903c:	d028      	beq.n	9090 <ticker_dequeue+0x68>
	total = 0U;
    903e:	f04f 0c00 	mov.w	ip, #0
    9042:	e001      	b.n	9048 <ticker_dequeue+0x20>
		if (current == id) {
    9044:	4299      	cmp	r1, r3
    9046:	d00b      	beq.n	9060 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    9048:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    904a:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    904c:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    904e:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    9050:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    9054:	44a4      	add	ip, r4
		ticker_current = &node[current];
    9056:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    905a:	d1f3      	bne.n	9044 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    905c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    905e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    9060:	4571      	cmp	r1, lr
    9062:	d018      	beq.n	9096 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    9064:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    9066:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    9068:	fa0f fe8e 	sxth.w	lr, lr
    906c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    9070:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    9074:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    9078:	7813      	ldrb	r3, [r2, #0]
    907a:	2bff      	cmp	r3, #255	; 0xff
    907c:	d006      	beq.n	908c <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    907e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9082:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    9086:	68ab      	ldr	r3, [r5, #8]
    9088:	4403      	add	r3, r0
    908a:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    908c:	4460      	add	r0, ip
}
    908e:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    9090:	469e      	mov	lr, r3
	total = 0U;
    9092:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    9096:	7813      	ldrb	r3, [r2, #0]
    9098:	7743      	strb	r3, [r0, #29]
    909a:	e7e4      	b.n	9066 <ticker_dequeue+0x3e>

0000909c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    909c:	eba2 0c01 	sub.w	ip, r2, r1
    90a0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    90a4:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    90a6:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    90a8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    90aa:	d10a      	bne.n	90c2 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    90ac:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    90b0:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    90b2:	42a3      	cmp	r3, r4
    90b4:	d914      	bls.n	90e0 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    90b6:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    90b8:	2100      	movs	r1, #0
}
    90ba:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    90bc:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    90be:	6141      	str	r1, [r0, #20]
}
    90c0:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    90c2:	1a89      	subs	r1, r1, r2
    90c4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    90c8:	428b      	cmp	r3, r1
    90ca:	d806      	bhi.n	90da <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    90cc:	4421      	add	r1, r4
    90ce:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    90d0:	2300      	movs	r3, #0
}
    90d2:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    90d4:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    90d6:	6141      	str	r1, [r0, #20]
}
    90d8:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    90da:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    90dc:	42a3      	cmp	r3, r4
    90de:	d8ea      	bhi.n	90b6 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    90e0:	1ae1      	subs	r1, r4, r3
    90e2:	e7f5      	b.n	90d0 <ticks_to_expire_prep+0x34>

000090e4 <ticker_job_list_insert>:
{
    90e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90e8:	b087      	sub	sp, #28
    90ea:	4603      	mov	r3, r0
	count_user = instance->count_user;
    90ec:	7a42      	ldrb	r2, [r0, #9]
{
    90ee:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    90f0:	6800      	ldr	r0, [r0, #0]
    90f2:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    90f4:	6858      	ldr	r0, [r3, #4]
    90f6:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    90f8:	2a00      	cmp	r2, #0
    90fa:	f000 80f4 	beq.w	92e6 <ticker_job_list_insert+0x202>
    90fe:	1e53      	subs	r3, r2, #1
    9100:	b2db      	uxtb	r3, r3
    9102:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    9106:	460f      	mov	r7, r1
    9108:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    910a:	9b03      	ldr	r3, [sp, #12]
    910c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    910e:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    9110:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    9112:	2fff      	cmp	r7, #255	; 0xff
    9114:	d05e      	beq.n	91d4 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    9116:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    911a:	9b02      	ldr	r3, [sp, #8]
    911c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    9120:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    9122:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    9126:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    912a:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    912c:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    912e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    9132:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    9136:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    913a:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    913c:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9140:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    9142:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9146:	d10f      	bne.n	9168 <ticker_job_list_insert+0x84>
    9148:	e0c8      	b.n	92dc <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    914a:	1a09      	subs	r1, r1, r0
    914c:	d106      	bne.n	915c <ticker_job_list_insert+0x78>
    914e:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    9152:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    9156:	45e2      	cmp	sl, ip
    9158:	f200 8086 	bhi.w	9268 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    915c:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9160:	2bff      	cmp	r3, #255	; 0xff
    9162:	4691      	mov	r9, r2
    9164:	d072      	beq.n	924c <ticker_job_list_insert+0x168>
    9166:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    9168:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    916c:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    9170:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    9172:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9176:	4288      	cmp	r0, r1
    9178:	d9e7      	bls.n	914a <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    917a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    917e:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    9182:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    9186:	d166      	bne.n	9256 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    9188:	9b01      	ldr	r3, [sp, #4]
    918a:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    918e:	2aff      	cmp	r2, #255	; 0xff
    9190:	d008      	beq.n	91a4 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    9192:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9196:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    919a:	f8de 3008 	ldr.w	r3, [lr, #8]
    919e:	1a5b      	subs	r3, r3, r1
    91a0:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    91a4:	78a3      	ldrb	r3, [r4, #2]
    91a6:	3301      	adds	r3, #1
    91a8:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    91aa:	2d00      	cmp	r5, #0
    91ac:	d0b1      	beq.n	9112 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    91ae:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    91b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    91b4:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    91b6:	2200      	movs	r2, #0
    91b8:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    91ba:	b113      	cbz	r3, 91c2 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    91bc:	6b29      	ldr	r1, [r5, #48]	; 0x30
    91be:	4610      	mov	r0, r2
    91c0:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    91c2:	6863      	ldr	r3, [r4, #4]
    91c4:	2b00      	cmp	r3, #0
    91c6:	d1a4      	bne.n	9112 <ticker_job_list_insert+0x2e>
					ticker->op_context =
    91c8:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    91cc:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    91ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    91d2:	d1a0      	bne.n	9116 <ticker_job_list_insert+0x32>
    91d4:	9b03      	ldr	r3, [sp, #12]
    91d6:	7898      	ldrb	r0, [r3, #2]
    91d8:	42b0      	cmp	r0, r6
    91da:	d02f      	beq.n	923c <ticker_job_list_insert+0x158>
    91dc:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    91e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    91e4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
    91e8:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    91ec:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
    91f0:	3601      	adds	r6, #1
    91f2:	b2f6      	uxtb	r6, r6
					first = 0U;
    91f4:	42b1      	cmp	r1, r6
    91f6:	bf08      	it	eq
    91f8:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    91fa:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
    91fc:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9200:	d11a      	bne.n	9238 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    9202:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    9206:	9902      	ldr	r1, [sp, #8]
    9208:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    920c:	eb01 1403 	add.w	r4, r1, r3, lsl #4
    9210:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    9214:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    9216:	7863      	ldrb	r3, [r4, #1]
    9218:	1a5b      	subs	r3, r3, r1
    921a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    921e:	d025      	beq.n	926c <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9220:	f04f 0300 	mov.w	r3, #0
    9224:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
    9228:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    922a:	2001      	movs	r0, #1
	user_op->status = status;
    922c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    922e:	b10b      	cbz	r3, 9234 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9230:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9232:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    9234:	f89b 0002 	ldrb.w	r0, [fp, #2]
    9238:	42b0      	cmp	r0, r6
    923a:	d1d1      	bne.n	91e0 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    923c:	9a03      	ldr	r2, [sp, #12]
    923e:	9905      	ldr	r1, [sp, #20]
    9240:	4291      	cmp	r1, r2
    9242:	f1a2 0308 	sub.w	r3, r2, #8
    9246:	d04e      	beq.n	92e6 <ticker_job_list_insert+0x202>
    9248:	9303      	str	r3, [sp, #12]
    924a:	e75e      	b.n	910a <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    924c:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    9250:	f88b 3000 	strb.w	r3, [fp]
    9254:	461a      	mov	r2, r3
		node[previous].next = id;
    9256:	fa0f f989 	sxth.w	r9, r9
    925a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    925e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    9262:	f80e 8009 	strb.w	r8, [lr, r9]
    9266:	e792      	b.n	918e <ticker_job_list_insert+0xaa>
    9268:	4601      	mov	r1, r0
    926a:	e786      	b.n	917a <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    926c:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    926e:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
    9270:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
    9274:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
    9276:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    927a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    927e:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
    9280:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    9284:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9288:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    928c:	d024      	beq.n	92d8 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
    928e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9292:	1ad3      	subs	r3, r2, r3
    9294:	fab3 f383 	clz	r3, r3
    9298:	095b      	lsrs	r3, r3, #5
    929a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    929e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    92a2:	429a      	cmp	r2, r3
    92a4:	bf88      	it	hi
    92a6:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
    92a8:	69ab      	ldr	r3, [r5, #24]
    92aa:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    92ac:	69eb      	ldr	r3, [r5, #28]
    92ae:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    92b0:	6a2b      	ldr	r3, [r5, #32]
    92b2:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    92b4:	68ab      	ldr	r3, [r5, #8]
    92b6:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    92b8:	2300      	movs	r3, #0
	ticker->lazy_periodic =
    92ba:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
    92bc:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    92be:	686a      	ldr	r2, [r5, #4]
    92c0:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    92c2:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    92c4:	f7ff feea 	bl	909c <ticks_to_expire_prep>
	ticker->force = 1U;
    92c8:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    92cc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    92d0:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    92d4:	70e3      	strb	r3, [r4, #3]
}
    92d6:	e729      	b.n	912c <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    92d8:	461a      	mov	r2, r3
    92da:	e7e5      	b.n	92a8 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
    92dc:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    92e0:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    92e4:	e75e      	b.n	91a4 <ticker_job_list_insert+0xc0>
}
    92e6:	b007      	add	sp, #28
    92e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000092ec <ticker_worker>:
{
    92ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    92f0:	7f82      	ldrb	r2, [r0, #30]
{
    92f2:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    92f4:	2301      	movs	r3, #1
	if (instance->job_guard) {
    92f6:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    92f8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    92fa:	2a00      	cmp	r2, #0
    92fc:	d15b      	bne.n	93b6 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    92fe:	7f43      	ldrb	r3, [r0, #29]
    9300:	2bff      	cmp	r3, #255	; 0xff
    9302:	4681      	mov	r9, r0
    9304:	d056      	beq.n	93b4 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    9306:	f00b fdab 	bl	14e60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    930a:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    930e:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    9312:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9316:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    9318:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    931a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    931e:	f000 813c 	beq.w	959a <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    9322:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    9326:	42bb      	cmp	r3, r7
    9328:	bf94      	ite	ls
    932a:	2300      	movls	r3, #0
    932c:	2301      	movhi	r3, #1
    932e:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    9330:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
    9334:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
    9338:	f000 8145 	beq.w	95c6 <ticker_worker+0x2da>
	ticks_expired = 0U;
    933c:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
    9340:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    9344:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    9348:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
    934c:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    9350:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    9352:	42bb      	cmp	r3, r7
    9354:	d837      	bhi.n	93c6 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    9356:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
    9358:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
    935c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    935e:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    9360:	7863      	ldrb	r3, [r4, #1]
    9362:	1a5b      	subs	r3, r3, r1
    9364:	b2db      	uxtb	r3, r3
    9366:	2b01      	cmp	r3, #1
    9368:	d12a      	bne.n	93c0 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    936a:	69a6      	ldr	r6, [r4, #24]
    936c:	2e00      	cmp	r6, #0
    936e:	d054      	beq.n	941a <ticker_worker+0x12e>
    9370:	9b03      	ldr	r3, [sp, #12]
    9372:	2b00      	cmp	r3, #0
    9374:	d04c      	beq.n	9410 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
    9376:	8be3      	ldrh	r3, [r4, #30]
    9378:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    937a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    937c:	b13b      	cbz	r3, 938e <ticker_worker+0xa2>
    937e:	681a      	ldr	r2, [r3, #0]
    9380:	b11a      	cbz	r2, 938a <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    9382:	7a1a      	ldrb	r2, [r3, #8]
    9384:	2a00      	cmp	r2, #0
    9386:	f000 80ef 	beq.w	9568 <ticker_worker+0x27c>
				ext_data->reschedule_state =
    938a:	2200      	movs	r2, #0
    938c:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    938e:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    9390:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    9394:	3201      	adds	r2, #1
    9396:	b292      	uxth	r2, r2
    9398:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    939a:	b178      	cbz	r0, 93bc <ticker_worker+0xd0>
    939c:	8ba0      	ldrh	r0, [r4, #28]
    939e:	4290      	cmp	r0, r2
    93a0:	d20c      	bcs.n	93bc <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    93a2:	2b00      	cmp	r3, #0
    93a4:	f000 80fc 	beq.w	95a0 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    93a8:	7a1a      	ldrb	r2, [r3, #8]
    93aa:	2a01      	cmp	r2, #1
    93ac:	d006      	beq.n	93bc <ticker_worker+0xd0>
			must_expire_skip = 1U;
    93ae:	f04f 0c01 	mov.w	ip, #1
    93b2:	e036      	b.n	9422 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    93b4:	77c2      	strb	r2, [r0, #31]
}
    93b6:	b00f      	add	sp, #60	; 0x3c
    93b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    93bc:	3901      	subs	r1, #1
    93be:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    93c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    93c4:	d1be      	bne.n	9344 <ticker_worker+0x58>
    93c6:	f8dd 9010 	ldr.w	r9, [sp, #16]
    93ca:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    93cc:	f899 300b 	ldrb.w	r3, [r9, #11]
    93d0:	f899 200a 	ldrb.w	r2, [r9, #10]
    93d4:	429a      	cmp	r2, r3
    93d6:	d10a      	bne.n	93ee <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    93d8:	3201      	adds	r2, #1
    93da:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    93dc:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    93de:	bf1c      	itt	ne
    93e0:	4613      	movne	r3, r2
    93e2:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    93e4:	9a06      	ldr	r2, [sp, #24]
    93e6:	f889 200b 	strb.w	r2, [r9, #11]
    93ea:	bf08      	it	eq
    93ec:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    93ee:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    93f2:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    93f6:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
    93f8:	2200      	movs	r2, #0
    93fa:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    93fe:	464b      	mov	r3, r9
    9400:	2201      	movs	r2, #1
    9402:	2104      	movs	r1, #4
    9404:	2003      	movs	r0, #3
    9406:	46a4      	mov	ip, r4
}
    9408:	b00f      	add	sp, #60	; 0x3c
    940a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    940e:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    9410:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    9414:	9307      	str	r3, [sp, #28]
    9416:	3380      	adds	r3, #128	; 0x80
    9418:	d141      	bne.n	949e <ticker_worker+0x1b2>
		if (ticker->ext_data) {
    941a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    941c:	b1f3      	cbz	r3, 945c <ticker_worker+0x170>
    941e:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    9422:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    9424:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    9426:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    9428:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
    942a:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
    942c:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    942e:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    9430:	2d00      	cmp	r5, #0
    9432:	d0c5      	beq.n	93c0 <ticker_worker+0xd4>
					   ticks_expired -
    9434:	9b04      	ldr	r3, [sp, #16]
    9436:	6960      	ldr	r0, [r4, #20]
    9438:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    943a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    943c:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    943e:	ebaa 0000 	sub.w	r0, sl, r0
    9442:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    9444:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    9448:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
    944a:	f1bc 0f00 	cmp.w	ip, #0
    944e:	d016      	beq.n	947e <ticker_worker+0x192>
    9450:	e9cd 3600 	strd	r3, r6, [sp]
    9454:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9458:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    945a:	e7b1      	b.n	93c0 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    945c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    945e:	3901      	subs	r1, #1
    9460:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    9462:	2d00      	cmp	r5, #0
    9464:	d0ac      	beq.n	93c0 <ticker_worker+0xd4>
			ticks_drift = 0U;
    9466:	4619      	mov	r1, r3
					   ticks_expired -
    9468:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    946a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    946c:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    946e:	ebaa 0003 	sub.w	r0, sl, r3
    9472:	9b04      	ldr	r3, [sp, #16]
    9474:	695b      	ldr	r3, [r3, #20]
    9476:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
    9478:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
    947a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    947e:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    9482:	e9cd 3600 	strd	r3, r6, [sp]
    9486:	4663      	mov	r3, ip
    9488:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    948a:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    948c:	2b00      	cmp	r3, #0
    948e:	9b03      	ldr	r3, [sp, #12]
    9490:	bf18      	it	ne
    9492:	2301      	movne	r3, #1
    9494:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    9496:	2300      	movs	r3, #0
    9498:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    949a:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    949c:	e790      	b.n	93c0 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    949e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    94a2:	d0ba      	beq.n	941a <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    94a4:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    94a6:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    94a8:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    94aa:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    94ac:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    94ae:	bf28      	it	cs
    94b0:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    94b2:	fb02 5005 	mla	r0, r2, r5, r5
    94b6:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
    94b8:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    94ba:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
    94be:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
    94c0:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
    94c4:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
    94c6:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    94c8:	46a0      	mov	r8, r4
    94ca:	f04f 0c00 	mov.w	ip, #0
    94ce:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
    94d0:	b21b      	sxth	r3, r3
    94d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    94d6:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    94da:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    94dc:	f8d2 e008 	ldr.w	lr, [r2, #8]
    94e0:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    94e2:	4566      	cmp	r6, ip
    94e4:	d339      	bcc.n	955a <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
    94e6:	6991      	ldr	r1, [r2, #24]
    94e8:	b399      	cbz	r1, 9552 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
    94ea:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    94ec:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    94ee:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    94f2:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    94f6:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    94f8:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
    94fa:	bf28      	it	cs
    94fc:	1a0d      	subcs	r5, r1, r0
					  0U :
    94fe:	f1b9 0f00 	cmp.w	r9, #0
    9502:	d03e      	beq.n	9582 <ticker_worker+0x296>
    9504:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    9508:	b3bc      	cbz	r4, 957a <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    950a:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
    950e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    9512:	45f1      	cmp	r9, lr
    9514:	bf8c      	ite	hi
    9516:	f04f 0e01 	movhi.w	lr, #1
    951a:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    951e:	bf34      	ite	cc
    9520:	f04f 0901 	movcc.w	r9, #1
    9524:	f04f 0900 	movcs.w	r9, #0
			if (curr_has_ticks_slot_window ||
    9528:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    952a:	f892 a003 	ldrb.w	sl, [r2, #3]
    952e:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (curr_has_ticks_slot_window ||
    9532:	d30e      	bcc.n	9552 <ticker_worker+0x266>
			    (!lazy_next_periodic_skip &&
    9534:	4592      	cmp	sl, r2
    9536:	d829      	bhi.n	958c <ticker_worker+0x2a0>
			     (next_force ||
    9538:	f117 0f80 	cmn.w	r7, #128	; 0x80
    953c:	d026      	beq.n	958c <ticker_worker+0x2a0>
			      next_is_critical ||
    953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    9540:	1bed      	subs	r5, r5, r7
			      next_is_critical ||
    9542:	4295      	cmp	r5, r2
    9544:	dd02      	ble.n	954c <ticker_worker+0x260>
			      (next_has_priority && !current_is_older) ||
    9546:	f1be 0f00 	cmp.w	lr, #0
    954a:	d01f      	beq.n	958c <ticker_worker+0x2a0>
    954c:	9a07      	ldr	r2, [sp, #28]
    954e:	42ba      	cmp	r2, r7
    9550:	d019      	beq.n	9586 <ticker_worker+0x29a>
			id_head = ticker_next->next;
    9552:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    9556:	2bff      	cmp	r3, #255	; 0xff
    9558:	d1ba      	bne.n	94d0 <ticker_worker+0x1e4>
    955a:	4644      	mov	r4, r8
    955c:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    9560:	990a      	ldr	r1, [sp, #40]	; 0x28
    9562:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    9566:	e758      	b.n	941a <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    9568:	8ba2      	ldrh	r2, [r4, #28]
    956a:	9805      	ldr	r0, [sp, #20]
    956c:	4282      	cmp	r2, r0
    956e:	f63f af0c 	bhi.w	938a <ticker_worker+0x9e>
				ext_data->reschedule_state =
    9572:	f04f 0201 	mov.w	r2, #1
    9576:	721a      	strb	r2, [r3, #8]
    9578:	e709      	b.n	938e <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
    957a:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
    957e:	46a1      	mov	r9, r4
    9580:	e7d2      	b.n	9528 <ticker_worker+0x23c>
					  0U :
    9582:	46ce      	mov	lr, r9
    9584:	e7c0      	b.n	9508 <ticker_worker+0x21c>
			      (equal_priority && next_is_older &&
    9586:	f1b9 0f00 	cmp.w	r9, #0
    958a:	d0e2      	beq.n	9552 <ticker_worker+0x266>
    958c:	4644      	mov	r4, r8
    958e:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    9592:	990a      	ldr	r1, [sp, #40]	; 0x28
    9594:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    9598:	e6ef      	b.n	937a <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    959a:	9b06      	ldr	r3, [sp, #24]
    959c:	9303      	str	r3, [sp, #12]
    959e:	e6c7      	b.n	9330 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    95a0:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    95a2:	3901      	subs	r1, #1
    95a4:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    95a6:	2d00      	cmp	r5, #0
    95a8:	f43f af0a 	beq.w	93c0 <ticker_worker+0xd4>
			ticks_drift = 0U;
    95ac:	4619      	mov	r1, r3
					   ticks_expired -
    95ae:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    95b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    95b2:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    95b4:	ebaa 0003 	sub.w	r0, sl, r3
    95b8:	9b04      	ldr	r3, [sp, #16]
    95ba:	695b      	ldr	r3, [r3, #20]
    95bc:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    95be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    95c2:	78e3      	ldrb	r3, [r4, #3]
    95c4:	e744      	b.n	9450 <ticker_worker+0x164>
	ticks_expired = 0U;
    95c6:	2300      	movs	r3, #0
    95c8:	4619      	mov	r1, r3
    95ca:	e6ff      	b.n	93cc <ticker_worker+0xe0>

000095cc <ticker_job>:
	if (instance->worker_trigger) {
    95cc:	7fc3      	ldrb	r3, [r0, #31]
    95ce:	2b00      	cmp	r3, #0
    95d0:	f040 8439 	bne.w	9e46 <ticker_job+0x87a>
{
    95d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    95d8:	7f82      	ldrb	r2, [r0, #30]
{
    95da:	b08d      	sub	sp, #52	; 0x34
    95dc:	4683      	mov	fp, r0
	if (instance->job_guard) {
    95de:	2a00      	cmp	r2, #0
    95e0:	d17d      	bne.n	96de <ticker_job+0x112>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    95e2:	7a83      	ldrb	r3, [r0, #10]
    95e4:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    95e6:	2001      	movs	r0, #1
    95e8:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    95ec:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    95ee:	f8db 0014 	ldr.w	r0, [fp, #20]
    95f2:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    95f4:	f000 844d 	beq.w	9e92 <ticker_job+0x8c6>
	uint8_t idx = *ticks_elapsed_index + 1;
    95f8:	3301      	adds	r3, #1
    95fa:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    95fc:	2b02      	cmp	r3, #2
		idx = 0U;
    95fe:	bf08      	it	eq
    9600:	4613      	moveq	r3, r2
		ticks_elapsed =
    9602:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    9606:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    960a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    960e:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    9610:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    9612:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    9614:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    9616:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    9618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    961c:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    9620:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    9624:	f8db 3000 	ldr.w	r3, [fp]
    9628:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    962a:	f8db 3004 	ldr.w	r3, [fp, #4]
    962e:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    9630:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    9632:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    9634:	b2db      	uxtb	r3, r3
    9636:	2a00      	cmp	r2, #0
    9638:	f000 81de 	beq.w	99f8 <ticker_job+0x42c>
		flag_elapsed = 1U;
    963c:	2201      	movs	r2, #1
    963e:	920b      	str	r2, [sp, #44]	; 0x2c
    9640:	9a05      	ldr	r2, [sp, #20]
    9642:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    9646:	2300      	movs	r3, #0
    9648:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    964a:	23ff      	movs	r3, #255	; 0xff
    964c:	9301      	str	r3, [sp, #4]
    964e:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    9650:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    9654:	f89a c003 	ldrb.w	ip, [sl, #3]
    9658:	f89a 7002 	ldrb.w	r7, [sl, #2]
    965c:	4567      	cmp	r7, ip
    965e:	d037      	beq.n	96d0 <ticker_job+0x104>
			if (middle == user->count_user_op) {
    9660:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    9664:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    9666:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    9668:	b2db      	uxtb	r3, r3
				middle = 0U;
    966a:	429a      	cmp	r2, r3
    966c:	bf08      	it	eq
    966e:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    9670:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    9674:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    9678:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    967c:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    9680:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    9682:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    9686:	d934      	bls.n	96f2 <ticker_job+0x126>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    9688:	2808      	cmp	r0, #8
    968a:	d85c      	bhi.n	9746 <ticker_job+0x17a>
			ticker = &node[user_op->id];
    968c:	7861      	ldrb	r1, [r4, #1]
    968e:	9a00      	ldr	r2, [sp, #0]
    9690:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    9694:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    9698:	786a      	ldrb	r2, [r5, #1]
    969a:	f895 e002 	ldrb.w	lr, [r5, #2]
    969e:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    96a2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    96a6:	d126      	bne.n	96f6 <ticker_job+0x12a>
			    ((state == 0U) &&
    96a8:	2806      	cmp	r0, #6
    96aa:	d14c      	bne.n	9746 <ticker_job+0x17a>
		if (instance->ticker_id_slot_previous == user_op->id) {
    96ac:	f89b 301c 	ldrb.w	r3, [fp, #28]
    96b0:	428b      	cmp	r3, r1
    96b2:	d02a      	beq.n	970a <ticker_job+0x13e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    96b4:	2000      	movs	r0, #0
    96b6:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    96ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    96bc:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    96be:	b10b      	cbz	r3, 96c4 <ticker_job+0xf8>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    96c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    96c2:	4798      	blx	r3
		while (user->middle != user->last) {
    96c4:	f89a c003 	ldrb.w	ip, [sl, #3]
    96c8:	f89a 7002 	ldrb.w	r7, [sl, #2]
    96cc:	4567      	cmp	r7, ip
    96ce:	d1c7      	bne.n	9660 <ticker_job+0x94>
	while (count_user--) {
    96d0:	9a05      	ldr	r2, [sp, #20]
    96d2:	4552      	cmp	r2, sl
    96d4:	f1aa 0308 	sub.w	r3, sl, #8
    96d8:	d06c      	beq.n	97b4 <ticker_job+0x1e8>
    96da:	469a      	mov	sl, r3
    96dc:	e7b8      	b.n	9650 <ticker_job+0x84>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    96de:	6a44      	ldr	r4, [r0, #36]	; 0x24
    96e0:	2104      	movs	r1, #4
    96e2:	4603      	mov	r3, r0
    96e4:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    96e6:	2004      	movs	r0, #4
    96e8:	46a4      	mov	ip, r4
}
    96ea:	b00d      	add	sp, #52	; 0x34
    96ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    96f0:	4760      	bx	ip
    96f2:	461f      	mov	r7, r3
    96f4:	e7b2      	b.n	965c <ticker_job+0x90>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
    96f6:	2805      	cmp	r0, #5
    96f8:	d03e      	beq.n	9778 <ticker_job+0x1ac>
			if ((state == 1U) ||
    96fa:	2a01      	cmp	r2, #1
    96fc:	d032      	beq.n	9764 <ticker_job+0x198>
    96fe:	2806      	cmp	r0, #6
    9700:	d148      	bne.n	9794 <ticker_job+0x1c8>
		if (instance->ticker_id_slot_previous == user_op->id) {
    9702:	f89b 301c 	ldrb.w	r3, [fp, #28]
    9706:	428b      	cmp	r3, r1
    9708:	d1d4      	bne.n	96b4 <ticker_job+0xe8>
			instance->ticker_id_slot_previous = TICKER_NULL;
    970a:	23ff      	movs	r3, #255	; 0xff
    970c:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    9710:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    9714:	2b06      	cmp	r3, #6
    9716:	f000 814d 	beq.w	99b4 <ticker_job+0x3e8>
    971a:	2b08      	cmp	r3, #8
    971c:	f000 814a 	beq.w	99b4 <ticker_job+0x3e8>
				ticks_at_yield = cntr_cnt_get();
    9720:	f00b fb9e 	bl	14e60 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    9724:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    9728:	1a83      	subs	r3, r0, r2
    972a:	021d      	lsls	r5, r3, #8
    972c:	f100 8149 	bmi.w	99c2 <ticker_job+0x3f6>
				ticks_used = ticks_elapsed +
    9730:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9732:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    9736:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    9738:	f8db 2018 	ldr.w	r2, [fp, #24]
    973c:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    973e:	bf88      	it	hi
    9740:	f8cb 3018 	strhi.w	r3, [fp, #24]
    9744:	e7b6      	b.n	96b4 <ticker_job+0xe8>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9746:	2200      	movs	r2, #0
    9748:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    974c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    974e:	2001      	movs	r0, #1
    9750:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    9752:	2a00      	cmp	r2, #0
    9754:	d0cd      	beq.n	96f2 <ticker_job+0x126>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9756:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9758:	4790      	blx	r2
		while (user->middle != user->last) {
    975a:	f89a c003 	ldrb.w	ip, [sl, #3]
    975e:	f89a 7002 	ldrb.w	r7, [sl, #2]
    9762:	e77b      	b.n	965c <ticker_job+0x90>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    9764:	2806      	cmp	r0, #6
    9766:	d0a1      	beq.n	96ac <ticker_job+0xe0>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    9768:	4658      	mov	r0, fp
    976a:	f7ff fc5d 	bl	9028 <ticker_dequeue>
			ticker->req = ticker->ack;
    976e:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    9770:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    9772:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    9774:	7861      	ldrb	r1, [r4, #1]
    9776:	e799      	b.n	96ac <ticker_job+0xe0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    9778:	6860      	ldr	r0, [r4, #4]
    977a:	b948      	cbnz	r0, 9790 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    977c:	68a0      	ldr	r0, [r4, #8]
    977e:	b938      	cbnz	r0, 9790 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    9780:	68e0      	ldr	r0, [r4, #12]
    9782:	b928      	cbnz	r0, 9790 <ticker_job+0x1c4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    9784:	6920      	ldr	r0, [r4, #16]
    9786:	b918      	cbnz	r0, 9790 <ticker_job+0x1c4>
			     (user_op->params.update.lazy == 0U) &&
    9788:	6960      	ldr	r0, [r4, #20]
    978a:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    978e:	d0da      	beq.n	9746 <ticker_job+0x17a>
			if ((state == 1U) ||
    9790:	2a01      	cmp	r2, #1
    9792:	d076      	beq.n	9882 <ticker_job+0x2b6>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    9794:	2104      	movs	r1, #4
    9796:	465b      	mov	r3, fp
    9798:	2201      	movs	r2, #1
    979a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    979e:	4608      	mov	r0, r1
    97a0:	47a0      	blx	r4
	while (count_user--) {
    97a2:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    97a4:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    97a8:	2301      	movs	r3, #1
	while (count_user--) {
    97aa:	4552      	cmp	r2, sl
				pending = 1U;
    97ac:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    97ae:	f1aa 0308 	sub.w	r3, sl, #8
    97b2:	d192      	bne.n	96da <ticker_job+0x10e>
	if (instance->ticker_id_head != ticker_id_old_head) {
    97b4:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    97b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    97ba:	1a9b      	subs	r3, r3, r2
    97bc:	bf18      	it	ne
    97be:	2301      	movne	r3, #1
    97c0:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    97c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    97c4:	2b00      	cmp	r3, #0
    97c6:	f040 811b 	bne.w	9a00 <ticker_job+0x434>
		ticker_job_list_insert(instance, insert_head);
    97ca:	9901      	ldr	r1, [sp, #4]
    97cc:	4658      	mov	r0, fp
    97ce:	f7ff fc89 	bl	90e4 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    97d2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    97d6:	9300      	str	r3, [sp, #0]
    97d8:	9b00      	ldr	r3, [sp, #0]
    97da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    97dc:	4293      	cmp	r3, r2
    97de:	f000 831c 	beq.w	9e1a <ticker_job+0x84e>
	if (!pending) {
    97e2:	9b08      	ldr	r3, [sp, #32]
    97e4:	2b00      	cmp	r3, #0
    97e6:	f000 8296 	beq.w	9d16 <ticker_job+0x74a>
	if (instance->ticker_id_head == TICKER_NULL) {
    97ea:	f89b 301d 	ldrb.w	r3, [fp, #29]
    97ee:	9300      	str	r3, [sp, #0]
    97f0:	9b00      	ldr	r3, [sp, #0]
    97f2:	2bff      	cmp	r3, #255	; 0xff
    97f4:	f000 8378 	beq.w	9ee8 <ticker_job+0x91c>
	if (ticker_id_old_head == TICKER_NULL) {
    97f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97fa:	2bff      	cmp	r3, #255	; 0xff
    97fc:	f000 837f 	beq.w	9efe <ticker_job+0x932>
	ticker = &instance->nodes[instance->ticker_id_head];
    9800:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    9802:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    9806:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 99e4 <ticker_job+0x418>
    980a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 99e8 <ticker_job+0x41c>
    980e:	4f77      	ldr	r7, [pc, #476]	; (99ec <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
    9810:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    9814:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    9818:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    981a:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    981c:	f00b fb20 	bl	14e60 <cntr_cnt_get>
		cc = instance->ticks_current;
    9820:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9824:	1b03      	subs	r3, r0, r4
    9826:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    982a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    982c:	42b3      	cmp	r3, r6
    982e:	bf2c      	ite	cs
    9830:	18e4      	addcs	r4, r4, r3
    9832:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    9834:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    9838:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    983c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    983e:	4620      	mov	r0, r4
    9840:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    9842:	f00b fb0d 	bl	14e60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9846:	eba0 030a 	sub.w	r3, r0, sl
    984a:	eba4 040a 	sub.w	r4, r4, sl
    984e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    9852:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9854:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    9858:	42a3      	cmp	r3, r4
		i--;
    985a:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
    985e:	f240 82e3 	bls.w	9e28 <ticker_job+0x85c>
		LL_ASSERT(i);
    9862:	2d00      	cmp	r5, #0
    9864:	d1da      	bne.n	981c <ticker_job+0x250>
    9866:	f640 135e 	movw	r3, #2398	; 0x95e
    986a:	464a      	mov	r2, r9
    986c:	4641      	mov	r1, r8
    986e:	4638      	mov	r0, r7
    9870:	f00f fe8f 	bl	19592 <assert_print>
    9874:	4040      	eors	r0, r0
    9876:	f380 8811 	msr	BASEPRI, r0
    987a:	f04f 0003 	mov.w	r0, #3
    987e:	df02      	svc	2
    9880:	e7cc      	b.n	981c <ticker_job+0x250>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    9882:	4658      	mov	r0, fp
    9884:	f7ff fbd0 	bl	9028 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    9888:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    988c:	60a8      	str	r0, [r5, #8]
    988e:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    9890:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    9892:	f00b fae5 	bl	14e60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9896:	9b02      	ldr	r3, [sp, #8]
    9898:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    989a:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    989c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    98a0:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    98a2:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    98a4:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    98a6:	f240 8095 	bls.w	99d4 <ticker_job+0x408>
	ticker->ticks_to_expire_minus +=
    98aa:	696b      	ldr	r3, [r5, #20]
    98ac:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    98ae:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    98b0:	f8d5 c004 	ldr.w	ip, [r5, #4]
    98b4:	f1bc 0f00 	cmp.w	ip, #0
    98b8:	d051      	beq.n	995e <ticker_job+0x392>
	    (user_op->params.update.lazy != 0U)) {
    98ba:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    98bc:	2b00      	cmp	r3, #0
    98be:	d04e      	beq.n	995e <ticker_job+0x392>
		user_op->params.update.lazy--;
    98c0:	3b01      	subs	r3, #1
    98c2:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    98c4:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
    98c6:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    98c8:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    98ca:	d223      	bcs.n	9914 <ticker_job+0x348>
    98cc:	f10c 0e01 	add.w	lr, ip, #1
    98d0:	f8cd 8018 	str.w	r8, [sp, #24]
    98d4:	940a      	str	r4, [sp, #40]	; 0x28
    98d6:	e018      	b.n	990a <ticker_job+0x33e>
	if ((ticker->remainder_current >= BIT(31)) ||
    98d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    98da:	f8df 8114 	ldr.w	r8, [pc, #276]	; 99f0 <ticker_job+0x424>
    98de:	4c45      	ldr	r4, [pc, #276]	; (99f4 <ticker_job+0x428>)
    98e0:	4488      	add	r8, r1
    98e2:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    98e4:	bf84      	itt	hi
    98e6:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    98ea:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    98ee:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    98f0:	6a2c      	ldr	r4, [r5, #32]
    98f2:	bf94      	ite	ls
    98f4:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    98f6:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    98fa:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    98fc:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    98fe:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    9900:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    9902:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    9904:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    9906:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    9908:	d201      	bcs.n	990e <ticker_job+0x342>
    990a:	429f      	cmp	r7, r3
    990c:	d3e4      	bcc.n	98d8 <ticker_job+0x30c>
    990e:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9912:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9914:	429f      	cmp	r7, r3
    9916:	d921      	bls.n	995c <ticker_job+0x390>
			ticks_to_expire += ticker->ticks_periodic +
    9918:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    991c:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    9920:	9006      	str	r0, [sp, #24]
    9922:	940a      	str	r4, [sp, #40]	; 0x28
    9924:	e005      	b.n	9932 <ticker_job+0x366>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9926:	3301      	adds	r3, #1
    9928:	b29b      	uxth	r3, r3
    992a:	4660      	mov	r0, ip
    992c:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    992e:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9930:	d011      	beq.n	9956 <ticker_job+0x38a>
	if ((ticker->remainder_current < BIT(31)) &&
    9932:	482f      	ldr	r0, [pc, #188]	; (99f0 <ticker_job+0x424>)
    9934:	4c2f      	ldr	r4, [pc, #188]	; (99f4 <ticker_job+0x428>)
	ticker->remainder_current += ticker->remainder_periodic;
    9936:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    9938:	1808      	adds	r0, r1, r0
    993a:	42a0      	cmp	r0, r4
    993c:	d8f3      	bhi.n	9926 <ticker_job+0x35a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    993e:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    9940:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9942:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9946:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9948:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    994c:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    994e:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    9952:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9954:	d1ed      	bne.n	9932 <ticker_job+0x366>
    9956:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9958:	6269      	str	r1, [r5, #36]	; 0x24
    995a:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    995c:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    995e:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    9960:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    9962:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    9964:	440a      	add	r2, r1
    9966:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    9968:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    996a:	4403      	add	r3, r0
    996c:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    996e:	b11a      	cbz	r2, 9978 <ticker_job+0x3ac>
    9970:	6813      	ldr	r3, [r2, #0]
    9972:	b10b      	cbz	r3, 9978 <ticker_job+0x3ac>
			user_op->params.update.ticks_drift_plus -
    9974:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    9976:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    9978:	464a      	mov	r2, r9
    997a:	9902      	ldr	r1, [sp, #8]
    997c:	4628      	mov	r0, r5
    997e:	f7ff fb8d 	bl	909c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    9982:	68e2      	ldr	r2, [r4, #12]
    9984:	69ab      	ldr	r3, [r5, #24]
    9986:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    9988:	6922      	ldr	r2, [r4, #16]
    998a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    998c:	bf8c      	ite	hi
    998e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    9990:	2300      	movls	r3, #0
    9992:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    9994:	7da3      	ldrb	r3, [r4, #22]
    9996:	b103      	cbz	r3, 999a <ticker_job+0x3ce>
		ticker->force = user_op->params.update.force;
    9998:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    999a:	7de3      	ldrb	r3, [r4, #23]
    999c:	b113      	cbz	r3, 99a4 <ticker_job+0x3d8>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    999e:	3b01      	subs	r3, #1
    99a0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    99a4:	9b01      	ldr	r3, [sp, #4]
    99a6:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    99a8:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    99aa:	7862      	ldrb	r2, [r4, #1]
    99ac:	9201      	str	r2, [sp, #4]
		ticker->req++;
    99ae:	3301      	adds	r3, #1
    99b0:	706b      	strb	r3, [r5, #1]
    99b2:	e67f      	b.n	96b4 <ticker_job+0xe8>
				ticks_at_yield =
    99b4:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    99b6:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    99ba:	1a83      	subs	r3, r0, r2
    99bc:	021d      	lsls	r5, r3, #8
    99be:	f57f aeb7 	bpl.w	9730 <ticker_job+0x164>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    99c2:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    99c4:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    99c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    99ca:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    99cc:	bf34      	ite	cc
    99ce:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    99d0:	2300      	movcs	r3, #0
    99d2:	e6b1      	b.n	9738 <ticker_job+0x16c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    99d4:	696b      	ldr	r3, [r5, #20]
    99d6:	1bda      	subs	r2, r3, r7
    99d8:	1853      	adds	r3, r2, r1
    99da:	9304      	str	r3, [sp, #16]
    99dc:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    99de:	2200      	movs	r2, #0
    99e0:	e766      	b.n	98b0 <ticker_job+0x2e4>
    99e2:	bf00      	nop
    99e4:	0001fbb4 	.word	0x0001fbb4
    99e8:	0001fc60 	.word	0x0001fc60
    99ec:	0001fbf4 	.word	0x0001fbf4
    99f0:	ff172b5a 	.word	0xff172b5a
    99f4:	7f172b59 	.word	0x7f172b59
	pending = 0U;
    99f8:	9b06      	ldr	r3, [sp, #24]
    99fa:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    99fc:	23ff      	movs	r3, #255	; 0xff
    99fe:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    9a00:	f00b fa2e 	bl	14e60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a04:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    9a06:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a0a:	1ac3      	subs	r3, r0, r3
    9a0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9a10:	9304      	str	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    9a12:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    9a14:	f8db 3000 	ldr.w	r3, [fp]
    9a18:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    9a1a:	d04f      	beq.n	9abc <ticker_job+0x4f0>
	if ((ticker->remainder_current < BIT(31)) &&
    9a1c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 9cb0 <ticker_job+0x6e4>
    9a20:	f8df 9290 	ldr.w	r9, [pc, #656]	; 9cb4 <ticker_job+0x6e8>
	while (instance->ticker_id_head != TICKER_NULL) {
    9a24:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    9a26:	f04f 0a00 	mov.w	sl, #0
		ticker = &node[id_expired];
    9a2a:	9a00      	ldr	r2, [sp, #0]
    9a2c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    9a30:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    9a34:	011b      	lsls	r3, r3, #4
    9a36:	9302      	str	r3, [sp, #8]
		ticks_to_expire = ticker->ticks_to_expire;
    9a38:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    9a3a:	429f      	cmp	r7, r3
    9a3c:	f0c0 8246 	bcc.w	9ecc <ticker_job+0x900>
		ticks_latency -= ticks_to_expire;
    9a40:	9a04      	ldr	r2, [sp, #16]
		skip_collision = (ticker->lazy_current != 0U);
    9a42:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
    9a46:	f8dd c008 	ldr.w	ip, [sp, #8]
		ticks_latency -= ticks_to_expire;
    9a4a:	1ad2      	subs	r2, r2, r3
    9a4c:	9204      	str	r2, [sp, #16]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    9a4e:	f8db 2018 	ldr.w	r2, [fp, #24]
    9a52:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    9a54:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
    9a58:	449a      	add	sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    9a5a:	bf25      	ittet	cs
    9a5c:	f04f 33ff 	movcs.w	r3, #4294967295
    9a60:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    9a64:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    9a66:	2300      	movcs	r3, #0
    9a68:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    9a6c:	78a2      	ldrb	r2, [r4, #2]
    9a6e:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    9a70:	69a0      	ldr	r0, [r4, #24]
		if ((ticker->ticks_periodic != 0U) ||
    9a72:	6865      	ldr	r5, [r4, #4]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    9a74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
    9a76:	1a9b      	subs	r3, r3, r2
    9a78:	b2db      	uxtb	r3, r3
    9a7a:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
    9a7c:	9b00      	ldr	r3, [sp, #0]
    9a7e:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    9a82:	b118      	cbz	r0, 9a8c <ticker_job+0x4c0>
    9a84:	9b05      	ldr	r3, [sp, #20]
    9a86:	2b02      	cmp	r3, #2
    9a88:	f000 8135 	beq.w	9cf6 <ticker_job+0x72a>
		ticker->ticks_to_expire = 0U;
    9a8c:	2300      	movs	r3, #0
    9a8e:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9a90:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    9a94:	2d00      	cmp	r5, #0
    9a96:	f040 80da 	bne.w	9c4e <ticker_job+0x682>
    9a9a:	b119      	cbz	r1, 9aa4 <ticker_job+0x4d8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    9a9c:	7a09      	ldrb	r1, [r1, #8]
    9a9e:	2901      	cmp	r1, #1
    9aa0:	f000 8111 	beq.w	9cc6 <ticker_job+0x6fa>
			if (state && ((state == 1U) || skip_collision) &&
    9aa4:	9b05      	ldr	r3, [sp, #20]
    9aa6:	b123      	cbz	r3, 9ab2 <ticker_job+0x4e6>
    9aa8:	2b01      	cmp	r3, #1
    9aaa:	d045      	beq.n	9b38 <ticker_job+0x56c>
    9aac:	f1be 0f00 	cmp.w	lr, #0
    9ab0:	d142      	bne.n	9b38 <ticker_job+0x56c>
			ticker->req = ticker->ack;
    9ab2:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    9ab4:	f89b 601d 	ldrb.w	r6, [fp, #29]
    9ab8:	2eff      	cmp	r6, #255	; 0xff
    9aba:	d1b6      	bne.n	9a2a <ticker_job+0x45e>
			flag_compare_update = 1U;
    9abc:	9b06      	ldr	r3, [sp, #24]
    9abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    9ac0:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    9ac2:	4296      	cmp	r6, r2
    9ac4:	bf18      	it	ne
    9ac6:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    9ac8:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    9aca:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    9acc:	f7ff fb0a 	bl	90e4 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    9ad0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    9ad4:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
    9ad8:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    9adc:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    9ade:	9b00      	ldr	r3, [sp, #0]
    9ae0:	2bff      	cmp	r3, #255	; 0xff
    9ae2:	d00f      	beq.n	9b04 <ticker_job+0x538>
    9ae4:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
    9ae6:	b233      	sxth	r3, r6
    9ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9aec:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
    9af0:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    9af2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    9af4:	b117      	cbz	r7, 9afc <ticker_job+0x530>
    9af6:	7a39      	ldrb	r1, [r7, #8]
    9af8:	2901      	cmp	r1, #1
    9afa:	d025      	beq.n	9b48 <ticker_job+0x57c>
			ticker_id_head = ticker->next;
    9afc:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
    9b00:	2eff      	cmp	r6, #255	; 0xff
    9b02:	d1f0      	bne.n	9ae6 <ticker_job+0x51a>
	return rescheduled;
    9b04:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    9b08:	2a00      	cmp	r2, #0
    9b0a:	f43f ae65 	beq.w	97d8 <ticker_job+0x20c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    9b0e:	9b00      	ldr	r3, [sp, #0]
    9b10:	9909      	ldr	r1, [sp, #36]	; 0x24
    9b12:	428b      	cmp	r3, r1
    9b14:	f47f ae65 	bne.w	97e2 <ticker_job+0x216>
	if (!pending) {
    9b18:	9b08      	ldr	r3, [sp, #32]
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	f47f ae68 	bne.w	97f0 <ticker_job+0x224>
	users = &instance->users[0];
    9b20:	f8db 3004 	ldr.w	r3, [fp, #4]
    9b24:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
    9b26:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
    9b2a:	1e5f      	subs	r7, r3, #1
    9b2c:	b2ff      	uxtb	r7, r7
    9b2e:	2b00      	cmp	r3, #0
    9b30:	f43f ae5e 	beq.w	97f0 <ticker_job+0x224>
			flag_compare_update = 1U;
    9b34:	9206      	str	r2, [sp, #24]
    9b36:	e0fa      	b.n	9d2e <ticker_job+0x762>
			    ticker->fp_op_func) {
    9b38:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d0b9      	beq.n	9ab2 <ticker_job+0x4e6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    9b3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9b40:	2001      	movs	r0, #1
    9b42:	4798      	blx	r3
			ticker->req = ticker->ack;
    9b44:	78a2      	ldrb	r2, [r4, #2]
    9b46:	e7b4      	b.n	9ab2 <ticker_job+0x4e6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    9b48:	9b01      	ldr	r3, [sp, #4]
    9b4a:	7f1b      	ldrb	r3, [r3, #28]
    9b4c:	2bff      	cmp	r3, #255	; 0xff
    9b4e:	d04b      	beq.n	9be8 <ticker_job+0x61c>
			instance->ticks_slot_previous > ticks_elapsed) {
    9b50:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    9b52:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    9b54:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    9b56:	4293      	cmp	r3, r2
    9b58:	d946      	bls.n	9be8 <ticker_job+0x61c>
			window_start_ticks = instance->ticks_slot_previous -
    9b5a:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    9b5e:	687a      	ldr	r2, [r7, #4]
    9b60:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    9b62:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    9b66:	1ad3      	subs	r3, r2, r3
    9b68:	9302      	str	r3, [sp, #8]
    9b6a:	683b      	ldr	r3, [r7, #0]
    9b6c:	429a      	cmp	r2, r3
    9b6e:	f080 80bd 	bcs.w	9cec <ticker_job+0x720>
		while (ticker_id_iter != TICKER_NULL &&
    9b72:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    9b76:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
    9b7a:	f000 80b7 	beq.w	9cec <ticker_job+0x720>
		       ticks_start_offset + ticker->ticks_slot <=
    9b7e:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
    9b82:	45f0      	cmp	r8, lr
    9b84:	f04f 0300 	mov.w	r3, #0
    9b88:	d331      	bcc.n	9bee <ticker_job+0x622>
    9b8a:	46f1      	mov	r9, lr
    9b8c:	465a      	mov	r2, fp
    9b8e:	461c      	mov	r4, r3
    9b90:	e01c      	b.n	9bcc <ticker_job+0x600>
			if (node->ticks_to_expire >
    9b92:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
    9b94:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    9b96:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    9b98:	4423      	add	r3, r4
			if (node->ticks_to_expire >
    9b9a:	d909      	bls.n	9bb0 <ticker_job+0x5e4>
				window_end_ticks =
    9b9c:	4543      	cmp	r3, r8
    9b9e:	bf28      	it	cs
    9ba0:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
    9ba2:	4599      	cmp	r9, r3
    9ba4:	d204      	bcs.n	9bb0 <ticker_job+0x5e4>
			if (ticks_to_expire != 0U &&
    9ba6:	ebb3 030e 	subs.w	r3, r3, lr
    9baa:	d001      	beq.n	9bb0 <ticker_job+0x5e4>
    9bac:	459c      	cmp	ip, r3
    9bae:	d91e      	bls.n	9bee <ticker_job+0x622>
			window_start_ticks  = node->ticks_to_expire +
    9bb0:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
    9bb2:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
    9bb6:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
    9bba:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
    9bbc:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
    9bc0:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    9bc2:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
    9bc6:	d012      	beq.n	9bee <ticker_job+0x622>
    9bc8:	45c8      	cmp	r8, r9
    9bca:	d310      	bcc.n	9bee <ticker_job+0x622>
			node = &nodes[ticker_id_iter];
    9bcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bd0:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
    9bd4:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    9bd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    9bd8:	2900      	cmp	r1, #0
    9bda:	d0da      	beq.n	9b92 <ticker_job+0x5c6>
    9bdc:	7a09      	ldrb	r1, [r1, #8]
    9bde:	2901      	cmp	r1, #1
    9be0:	d1d7      	bne.n	9b92 <ticker_job+0x5c6>
				ticker_id_iter = node->next;
    9be2:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
    9be6:	e7eb      	b.n	9bc0 <ticker_job+0x5f4>
		window_start_ticks = 0U;
    9be8:	f04f 0c00 	mov.w	ip, #0
    9bec:	e7b7      	b.n	9b5e <ticker_job+0x592>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    9bee:	9a02      	ldr	r2, [sp, #8]
    9bf0:	441a      	add	r2, r3
    9bf2:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    9bf4:	465c      	mov	r4, fp
    9bf6:	60ab      	str	r3, [r5, #8]
    9bf8:	f04f 0eff 	mov.w	lr, #255	; 0xff
    9bfc:	e000      	b.n	9c00 <ticker_job+0x634>
    9bfe:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
    9c00:	b221      	sxth	r1, r4
    9c02:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    9c06:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
    9c0a:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    9c0c:	f8dc 0008 	ldr.w	r0, [ip, #8]
    9c10:	4298      	cmp	r0, r3
    9c12:	f080 8151 	bcs.w	9eb8 <ticker_job+0x8ec>
				ticker->ticks_to_expire -=
    9c16:	1a1b      	subs	r3, r3, r0
    9c18:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
    9c1a:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
    9c1e:	2aff      	cmp	r2, #255	; 0xff
    9c20:	46a6      	mov	lr, r4
    9c22:	d1ec      	bne.n	9bfe <ticker_job+0x632>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    9c24:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    9c26:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    9c2a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9c2e:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    9c30:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    9c34:	f81a 3001 	ldrb.w	r3, [sl, r1]
    9c38:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    9c3a:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
    9c3e:	8beb      	ldrh	r3, [r5, #30]
    9c40:	3b01      	subs	r3, #1
    9c42:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    9c44:	f04f 0302 	mov.w	r3, #2
    9c48:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    9c4a:	2201      	movs	r2, #1
    9c4c:	e747      	b.n	9ade <ticker_job+0x512>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    9c4e:	b111      	cbz	r1, 9c56 <ticker_job+0x68a>
    9c50:	7a0b      	ldrb	r3, [r1, #8]
    9c52:	2b01      	cmp	r3, #1
    9c54:	d037      	beq.n	9cc6 <ticker_job+0x6fa>
				if (!ticker->lazy_current) {
    9c56:	f1be 0f00 	cmp.w	lr, #0
    9c5a:	d159      	bne.n	9d10 <ticker_job+0x744>
					lazy_periodic = ticker->lazy_periodic;
    9c5c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    9c60:	4672      	mov	r2, lr
				while (count--) {
    9c62:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    9c64:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    9c68:	2100      	movs	r1, #0
    9c6a:	9005      	str	r0, [sp, #20]
    9c6c:	e004      	b.n	9c78 <ticker_job+0x6ac>
    9c6e:	4628      	mov	r0, r5
				while (count--) {
    9c70:	3a01      	subs	r2, #1
					ticks_to_expire +=
    9c72:	4401      	add	r1, r0
				while (count--) {
    9c74:	1c50      	adds	r0, r2, #1
    9c76:	d00f      	beq.n	9c98 <ticker_job+0x6cc>
	ticker->remainder_current += ticker->remainder_periodic;
    9c78:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    9c7a:	eb03 0008 	add.w	r0, r3, r8
    9c7e:	4548      	cmp	r0, r9
    9c80:	d8f5      	bhi.n	9c6e <ticker_job+0x6a2>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9c82:	9805      	ldr	r0, [sp, #20]
    9c84:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    9c88:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9c8a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    9c8e:	4401      	add	r1, r0
				while (count--) {
    9c90:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9c92:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    9c96:	d1ef      	bne.n	9c78 <ticker_job+0x6ac>
				} else if (!ticker->must_expire) {
    9c98:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    9c9c:	6263      	str	r3, [r4, #36]	; 0x24
    9c9e:	2a00      	cmp	r2, #0
    9ca0:	f000 80d2 	beq.w	9e48 <ticker_job+0x87c>
				lazy = 0U;
    9ca4:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    9ca6:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
    9ca8:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    9caa:	83e2      	strh	r2, [r4, #30]
    9cac:	e00d      	b.n	9cca <ticker_job+0x6fe>
    9cae:	bf00      	nop
    9cb0:	ff172b5a 	.word	0xff172b5a
    9cb4:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
    9cb8:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9cbc:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    9cc0:	2d00      	cmp	r5, #0
    9cc2:	f43f aeeb 	beq.w	9a9c <ticker_job+0x4d0>
				ticker->req = ticker->ack;
    9cc6:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    9cc8:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9cca:	9b07      	ldr	r3, [sp, #28]
    9ccc:	f8db 1014 	ldr.w	r1, [fp, #20]
    9cd0:	eb03 020a 	add.w	r2, r3, sl
    9cd4:	4620      	mov	r0, r4
    9cd6:	f7ff f9e1 	bl	909c <ticks_to_expire_prep>
			ticker->next = *insert_head;
    9cda:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
    9cde:	9a00      	ldr	r2, [sp, #0]
			ticker->req++;
    9ce0:	9601      	str	r6, [sp, #4]
			ticker->next = *insert_head;
    9ce2:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    9ce4:	7863      	ldrb	r3, [r4, #1]
    9ce6:	3301      	adds	r3, #1
    9ce8:	7063      	strb	r3, [r4, #1]
    9cea:	e6e3      	b.n	9ab4 <ticker_job+0x4e8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    9cec:	9b02      	ldr	r3, [sp, #8]
    9cee:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    9cf0:	2300      	movs	r3, #0
    9cf2:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    9cf4:	e7a3      	b.n	9c3e <ticker_job+0x672>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    9cf6:	f1be 0f00 	cmp.w	lr, #0
    9cfa:	f47f aec7 	bne.w	9a8c <ticker_job+0x4c0>
    9cfe:	b111      	cbz	r1, 9d06 <ticker_job+0x73a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    9d00:	7a0b      	ldrb	r3, [r1, #8]
    9d02:	2b01      	cmp	r3, #1
    9d04:	d0d8      	beq.n	9cb8 <ticker_job+0x6ec>
			instance->ticks_slot_previous = ticker->ticks_slot;
    9d06:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    9d0a:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    9d0e:	e6bd      	b.n	9a8c <ticker_job+0x4c0>
					ticker->req = ticker->ack;
    9d10:	7062      	strb	r2, [r4, #1]
    9d12:	2200      	movs	r2, #0
    9d14:	e7a5      	b.n	9c62 <ticker_job+0x696>
	count_user = instance->count_user;
    9d16:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    9d1a:	f8db 2004 	ldr.w	r2, [fp, #4]
    9d1e:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    9d20:	1e5f      	subs	r7, r3, #1
    9d22:	b2ff      	uxtb	r7, r7
    9d24:	2b00      	cmp	r3, #0
    9d26:	f43f ad60 	beq.w	97ea <ticker_job+0x21e>
		flag_compare_update = 1U;
    9d2a:	2301      	movs	r3, #1
    9d2c:	9306      	str	r3, [sp, #24]
    9d2e:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
    9d30:	2500      	movs	r5, #0
    9d32:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
    9d36:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
    9d3a:	787b      	ldrb	r3, [r7, #1]
    9d3c:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    9d3e:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
    9d40:	429a      	cmp	r2, r3
    9d42:	d10c      	bne.n	9d5e <ticker_job+0x792>
    9d44:	e05b      	b.n	9dfe <ticker_job+0x832>
	switch (uop->op) {
    9d46:	2b01      	cmp	r3, #1
    9d48:	d053      	beq.n	9df2 <ticker_job+0x826>
			first = user->first + 1;
    9d4a:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    9d4c:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    9d4e:	3301      	adds	r3, #1
    9d50:	b2db      	uxtb	r3, r3
				first = 0U;
    9d52:	4299      	cmp	r1, r3
    9d54:	bf08      	it	eq
    9d56:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    9d58:	429a      	cmp	r2, r3
			user->first = first;
    9d5a:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    9d5c:	d04f      	beq.n	9dfe <ticker_job+0x832>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    9d5e:	b21b      	sxth	r3, r3
    9d60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    9d64:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9d68:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
    9d6c:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
    9d70:	2b02      	cmp	r3, #2
    9d72:	d017      	beq.n	9da4 <ticker_job+0x7d8>
    9d74:	2b03      	cmp	r3, #3
    9d76:	d1e6      	bne.n	9d46 <ticker_job+0x77a>
		if (uop->id < instance->count_node) {
    9d78:	7843      	ldrb	r3, [r0, #1]
    9d7a:	f89b 2008 	ldrb.w	r2, [fp, #8]
    9d7e:	429a      	cmp	r2, r3
    9d80:	d93a      	bls.n	9df8 <ticker_job+0x82c>
			node[uop->id].priority =
    9d82:	f8db 2000 	ldr.w	r2, [fp]
    9d86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9d8a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    9d8e:	7902      	ldrb	r2, [r0, #4]
    9d90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    9d94:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    9d96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    9d98:	b113      	cbz	r3, 9da0 <ticker_job+0x7d4>
		fp_op_func(uop->status, uop->op_context);
    9d9a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    9d9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    9d9e:	4798      	blx	r3
    9da0:	78fa      	ldrb	r2, [r7, #3]
    9da2:	e7d2      	b.n	9d4a <ticker_job+0x77e>
		ticker_by_next_slot_get(instance,
    9da4:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    9da8:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
    9dac:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
    9db0:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
    9db4:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    9db8:	2aff      	cmp	r2, #255	; 0xff
    9dba:	d003      	beq.n	9dc4 <ticker_job+0x7f8>
    9dbc:	f8d1 8000 	ldr.w	r8, [r1]
    9dc0:	4598      	cmp	r8, r3
    9dc2:	d023      	beq.n	9e0c <ticker_job+0x840>
		_ticker_id_head = instance->ticker_id_head;
    9dc4:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    9dc8:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
    9dca:	f04f 0800 	mov.w	r8, #0
    9dce:	e00a      	b.n	9de6 <ticker_job+0x81a>
		ticker = &node[_ticker_id_head];
    9dd0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    9dd4:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    9dd8:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
    9dda:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
    9dde:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    9de0:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
    9de2:	b911      	cbnz	r1, 9dea <ticker_job+0x81e>
		_ticker_id_head = ticker->next;
    9de4:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    9de6:	2aff      	cmp	r2, #255	; 0xff
    9de8:	d1f2      	bne.n	9dd0 <ticker_job+0x804>
	*ticker_id_head = _ticker_id_head;
    9dea:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
    9dee:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
    9df2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    9df4:	6285      	str	r5, [r0, #40]	; 0x28
		break;
    9df6:	e7cf      	b.n	9d98 <ticker_job+0x7cc>
			uop->status = TICKER_STATUS_FAILURE;
    9df8:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    9dfc:	e7cb      	b.n	9d96 <ticker_job+0x7ca>
	while (count_user--) {
    9dfe:	9a01      	ldr	r2, [sp, #4]
    9e00:	42ba      	cmp	r2, r7
    9e02:	f1a7 0308 	sub.w	r3, r7, #8
    9e06:	d00b      	beq.n	9e20 <ticker_job+0x854>
    9e08:	461f      	mov	r7, r3
    9e0a:	e796      	b.n	9d3a <ticker_job+0x76e>
		ticker = &node[_ticker_id_head];
    9e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9e10:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    9e12:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
    9e16:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    9e18:	e7e5      	b.n	9de6 <ticker_job+0x81a>
	if (!pending) {
    9e1a:	9b08      	ldr	r3, [sp, #32]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d058      	beq.n	9ed2 <ticker_job+0x906>
	if (flag_compare_update) {
    9e20:	9b06      	ldr	r3, [sp, #24]
    9e22:	2b00      	cmp	r3, #0
    9e24:	f47f ace1 	bne.w	97ea <ticker_job+0x21e>
	if (instance->worker_trigger) {
    9e28:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    9e2c:	2200      	movs	r2, #0
    9e2e:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    9e32:	b12b      	cbz	r3, 9e40 <ticker_job+0x874>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    9e34:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    9e38:	465b      	mov	r3, fp
    9e3a:	2201      	movs	r2, #1
    9e3c:	2103      	movs	r1, #3
    9e3e:	e452      	b.n	96e6 <ticker_job+0x11a>
}
    9e40:	b00d      	add	sp, #52	; 0x34
    9e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e46:	4770      	bx	lr
					while (ticks_to_expire <
    9e48:	9804      	ldr	r0, [sp, #16]
    9e4a:	4288      	cmp	r0, r1
    9e4c:	f67f af2b 	bls.w	9ca6 <ticker_job+0x6da>
    9e50:	1c68      	adds	r0, r5, #1
    9e52:	9705      	str	r7, [sp, #20]
    9e54:	940a      	str	r4, [sp, #40]	; 0x28
    9e56:	9f04      	ldr	r7, [sp, #16]
    9e58:	4604      	mov	r4, r0
    9e5a:	e005      	b.n	9e68 <ticker_job+0x89c>
    9e5c:	4628      	mov	r0, r5
						ticks_to_expire +=
    9e5e:	4401      	add	r1, r0
						lazy++;
    9e60:	3201      	adds	r2, #1
					while (ticks_to_expire <
    9e62:	428f      	cmp	r7, r1
						lazy++;
    9e64:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    9e66:	d910      	bls.n	9e8a <ticker_job+0x8be>
	ticker->remainder_current += ticker->remainder_periodic;
    9e68:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    9e6a:	eb03 0008 	add.w	r0, r3, r8
    9e6e:	4548      	cmp	r0, r9
    9e70:	d8f4      	bhi.n	9e5c <ticker_job+0x890>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9e72:	4620      	mov	r0, r4
    9e74:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    9e78:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9e7a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    9e7e:	3201      	adds	r2, #1
					while (ticks_to_expire <
    9e80:	428f      	cmp	r7, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9e82:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    9e86:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    9e88:	d8ee      	bhi.n	9e68 <ticker_job+0x89c>
    9e8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9e8c:	9f05      	ldr	r7, [sp, #20]
    9e8e:	6263      	str	r3, [r4, #36]	; 0x24
    9e90:	e709      	b.n	9ca6 <ticker_job+0x6da>
	ticker_id_old_head = instance->ticker_id_head;
    9e92:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    9e96:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    9e9a:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    9e9c:	f8db 3000 	ldr.w	r3, [fp]
    9ea0:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    9ea2:	f8db 3004 	ldr.w	r3, [fp, #4]
    9ea6:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    9ea8:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    9eaa:	9106      	str	r1, [sp, #24]
	while (count_user--) {
    9eac:	b2db      	uxtb	r3, r3
    9eae:	b3a1      	cbz	r1, 9f1a <ticker_job+0x94e>
		flag_elapsed = 0U;
    9eb0:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    9eb2:	9203      	str	r2, [sp, #12]
    9eb4:	f7ff bbc4 	b.w	9640 <ticker_job+0x74>
				node->ticks_to_expire -=
    9eb8:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
    9eba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    9ebe:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    9ec2:	f43f aebc 	beq.w	9c3e <ticker_job+0x672>
    9ec6:	fa0f f18e 	sxth.w	r1, lr
    9eca:	e6ab      	b.n	9c24 <ticker_job+0x658>
			ticker->ticks_to_expire -= ticks_elapsed;
    9ecc:	1bdb      	subs	r3, r3, r7
    9ece:	60a3      	str	r3, [r4, #8]
			break;
    9ed0:	e5f4      	b.n	9abc <ticker_job+0x4f0>
	count_user = instance->count_user;
    9ed2:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    9ed6:	f8db 2004 	ldr.w	r2, [fp, #4]
    9eda:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    9edc:	1e5f      	subs	r7, r3, #1
    9ede:	b2ff      	uxtb	r7, r7
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	f47f af24 	bne.w	9d2e <ticker_job+0x762>
    9ee6:	e79b      	b.n	9e20 <ticker_job+0x854>
		if (cntr_stop() == 0) {
    9ee8:	f00a ff94 	bl	14e14 <cntr_stop>
    9eec:	2800      	cmp	r0, #0
    9eee:	d19b      	bne.n	9e28 <ticker_job+0x85c>
			instance->ticks_slot_previous = 0U;
    9ef0:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    9ef4:	f00a ffb4 	bl	14e60 <cntr_cnt_get>
    9ef8:	f8cb 0014 	str.w	r0, [fp, #20]
    9efc:	e794      	b.n	9e28 <ticker_job+0x85c>
		ticks_current = cntr_cnt_get();
    9efe:	f00a ffaf 	bl	14e60 <cntr_cnt_get>
    9f02:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    9f04:	f00a ff76 	bl	14df4 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    9f08:	f89b 301d 	ldrb.w	r3, [fp, #29]
    9f0c:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    9f0e:	2800      	cmp	r0, #0
    9f10:	f47f ac76 	bne.w	9800 <ticker_job+0x234>
			instance->ticks_current = ticks_current;
    9f14:	f8cb 4014 	str.w	r4, [fp, #20]
    9f18:	e472      	b.n	9800 <ticker_job+0x234>
	insert_head = TICKER_NULL;
    9f1a:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
    9f1c:	9108      	str	r1, [sp, #32]
	insert_head = TICKER_NULL;
    9f1e:	9301      	str	r3, [sp, #4]
    9f20:	e453      	b.n	97ca <ticker_job+0x1fe>
    9f22:	bf00      	nop

00009f24 <ticker_init>:
{
    9f24:	b4f0      	push	{r4, r5, r6, r7}
    9f26:	9d04      	ldr	r5, [sp, #16]
    9f28:	f89d 7014 	ldrb.w	r7, [sp, #20]
    9f2c:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    9f2e:	2800      	cmp	r0, #0
    9f30:	d137      	bne.n	9fa2 <ticker_init+0x7e>
	instance->count_node = count_node;
    9f32:	4e1d      	ldr	r6, [pc, #116]	; (9fa8 <ticker_init+0x84>)
	while (count_node--) {
    9f34:	f101 3cff 	add.w	ip, r1, #4294967295
	instance->count_node = count_node;
    9f38:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    9f3a:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    9f3c:	fa5f fc8c 	uxtb.w	ip, ip
    9f40:	b149      	cbz	r1, 9f56 <ticker_init+0x32>
    9f42:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    9f46:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    9f4a:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    9f4c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    9f50:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    9f54:	d1f9      	bne.n	9f4a <ticker_init+0x26>
	while (count_user--) {
    9f56:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    9f58:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    9f5a:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    9f5c:	b2d2      	uxtb	r2, r2
    9f5e:	b183      	cbz	r3, 9f82 <ticker_init+0x5e>
    9f60:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    9f64:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    9f66:	4610      	mov	r0, r2
    9f68:	f812 3908 	ldrb.w	r3, [r2], #-8
    9f6c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    9f70:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    9f74:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    9f76:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    9f7a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    9f7e:	b2df      	uxtb	r7, r3
	while (count_user--) {
    9f80:	d1f0      	bne.n	9f64 <ticker_init+0x40>
	if (count_op) {
    9f82:	b977      	cbnz	r7, 9fa2 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    9f84:	9a07      	ldr	r2, [sp, #28]
    9f86:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    9f88:	9a08      	ldr	r2, [sp, #32]
    9f8a:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    9f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    9f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9f92:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    9f94:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    9f96:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    9f9a:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    9f9c:	8177      	strh	r7, [r6, #10]
}
    9f9e:	bcf0      	pop	{r4, r5, r6, r7}
    9fa0:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    9fa2:	2001      	movs	r0, #1
}
    9fa4:	bcf0      	pop	{r4, r5, r6, r7}
    9fa6:	4770      	bx	lr
    9fa8:	20001984 	.word	0x20001984

00009fac <ticker_trigger>:
	if (instance->sched_cb) {
    9fac:	4b0a      	ldr	r3, [pc, #40]	; (9fd8 <ticker_trigger+0x2c>)
    9fae:	222c      	movs	r2, #44	; 0x2c
    9fb0:	fb02 3200 	mla	r2, r2, r0, r3
{
    9fb4:	b410      	push	{r4}
	if (instance->sched_cb) {
    9fb6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    9fb8:	b15c      	cbz	r4, 9fd2 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    9fba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    9fbe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9fc2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9fc6:	46a4      	mov	ip, r4
    9fc8:	2201      	movs	r2, #1
}
    9fca:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9fcc:	2103      	movs	r1, #3
    9fce:	2002      	movs	r0, #2
    9fd0:	4760      	bx	ip
}
    9fd2:	bc10      	pop	{r4}
    9fd4:	4770      	bx	lr
    9fd6:	bf00      	nop
    9fd8:	20001984 	.word	0x20001984

00009fdc <ticker_start_ext>:
{
    9fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    9fe0:	4e28      	ldr	r6, [pc, #160]	; (a084 <ticker_start_ext+0xa8>)
{
    9fe2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    9fe6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    9fe8:	252c      	movs	r5, #44	; 0x2c
    9fea:	fb05 6504 	mla	r5, r5, r4, r6
{
    9fee:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    9ff0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9ff4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    9ff8:	6869      	ldr	r1, [r5, #4]
    9ffa:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    9ffe:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    a002:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    a006:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    a00a:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    a00c:	f10e 0c01 	add.w	ip, lr, #1
    a010:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    a014:	4564      	cmp	r4, ip
    a016:	bf98      	it	ls
    a018:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    a01c:	4561      	cmp	r1, ip
    a01e:	d02e      	beq.n	a07e <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    a020:	6879      	ldr	r1, [r7, #4]
    a022:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    a026:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    a02a:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    a02e:	f04f 0904 	mov.w	r9, #4
    a032:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    a036:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    a038:	9b08      	ldr	r3, [sp, #32]
    a03a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    a03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a03e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a042:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    a044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a046:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    a048:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a04a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    a04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a04e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    a050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a052:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    a054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a056:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    a058:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a05a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    a05c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    a05e:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    a060:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    a062:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    a066:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a06a:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    a06e:	4798      	blx	r3
    a070:	4633      	mov	r3, r6
    a072:	4649      	mov	r1, r9
    a074:	2200      	movs	r2, #0
    a076:	47a8      	blx	r5
	return user_op->status;
    a078:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    a07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    a07e:	2001      	movs	r0, #1
}
    a080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a084:	20001984 	.word	0x20001984

0000a088 <ticker_start>:
{
    a088:	b510      	push	{r4, lr}
    a08a:	b08a      	sub	sp, #40	; 0x28
    a08c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a08e:	9400      	str	r4, [sp, #0]
{
    a090:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a092:	9401      	str	r4, [sp, #4]
{
    a094:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a096:	9402      	str	r4, [sp, #8]
{
    a098:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a09c:	9403      	str	r4, [sp, #12]
{
    a09e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a0a0:	9404      	str	r4, [sp, #16]
{
    a0a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a0a4:	9405      	str	r4, [sp, #20]
{
    a0a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a0a8:	9406      	str	r4, [sp, #24]
{
    a0aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a0ac:	9407      	str	r4, [sp, #28]
{
    a0ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    a0b0:	9408      	str	r4, [sp, #32]
    a0b2:	2400      	movs	r4, #0
    a0b4:	9409      	str	r4, [sp, #36]	; 0x24
    a0b6:	f7ff ff91 	bl	9fdc <ticker_start_ext>
}
    a0ba:	b00a      	add	sp, #40	; 0x28
    a0bc:	bd10      	pop	{r4, pc}
    a0be:	bf00      	nop

0000a0c0 <ticker_update_ext>:
{
    a0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a0c4:	4d28      	ldr	r5, [pc, #160]	; (a168 <ticker_update_ext+0xa8>)
{
    a0c6:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    a0ca:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    a0ce:	4604      	mov	r4, r0
    a0d0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    a0d2:	212c      	movs	r1, #44	; 0x2c
    a0d4:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    a0d8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    a0dc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    a0e0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    a0e4:	684c      	ldr	r4, [r1, #4]
    a0e6:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    a0ea:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    a0ee:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    a0f2:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    a0f4:	f10e 0c01 	add.w	ip, lr, #1
    a0f8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    a0fc:	45e1      	cmp	r9, ip
    a0fe:	bf98      	it	ls
    a100:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    a104:	4564      	cmp	r4, ip
{
    a106:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    a10a:	d02a      	beq.n	a162 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    a10c:	f8d6 a004 	ldr.w	sl, [r6, #4]
    a110:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    a114:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    a118:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    a11c:	f04f 0b05 	mov.w	fp, #5
    a120:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    a124:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    a126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a128:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    a12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a12c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    a12e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a130:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    a132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a134:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    a136:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a138:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    a13a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    a13c:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    a13e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    a140:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    a142:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    a146:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    a14a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a14e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    a152:	4798      	blx	r3
    a154:	462b      	mov	r3, r5
    a156:	2200      	movs	r2, #0
    a158:	2104      	movs	r1, #4
    a15a:	47b0      	blx	r6
	return user_op->status;
    a15c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    a15e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    a162:	2001      	movs	r0, #1
}
    a164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a168:	20001984 	.word	0x20001984

0000a16c <ticker_update>:
{
    a16c:	b510      	push	{r4, lr}
    a16e:	b088      	sub	sp, #32
    a170:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a172:	9400      	str	r4, [sp, #0]
{
    a174:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a176:	9401      	str	r4, [sp, #4]
{
    a178:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a17a:	9402      	str	r4, [sp, #8]
{
    a17c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a180:	9403      	str	r4, [sp, #12]
{
    a182:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a186:	9404      	str	r4, [sp, #16]
{
    a188:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a18a:	9405      	str	r4, [sp, #20]
{
    a18c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    a18e:	9406      	str	r4, [sp, #24]
    a190:	2400      	movs	r4, #0
    a192:	9407      	str	r4, [sp, #28]
    a194:	f7ff ff94 	bl	a0c0 <ticker_update_ext>
}
    a198:	b008      	add	sp, #32
    a19a:	bd10      	pop	{r4, pc}

0000a19c <ticker_stop>:
{
    a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    a1a0:	4c1e      	ldr	r4, [pc, #120]	; (a21c <ticker_stop+0x80>)
{
    a1a2:	4684      	mov	ip, r0
    a1a4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    a1a6:	212c      	movs	r1, #44	; 0x2c
    a1a8:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    a1ac:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    a1b0:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    a1b4:	684d      	ldr	r5, [r1, #4]
    a1b6:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    a1ba:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    a1be:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    a1c2:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    a1c4:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    a1c8:	f10e 0c01 	add.w	ip, lr, #1
    a1cc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    a1d0:	4567      	cmp	r7, ip
    a1d2:	bf98      	it	ls
    a1d4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    a1d8:	4565      	cmp	r5, ip
    a1da:	d01c      	beq.n	a216 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    a1dc:	6877      	ldr	r7, [r6, #4]
    a1de:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    a1e2:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    a1e6:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    a1ea:	f04f 0807 	mov.w	r8, #7
    a1ee:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    a1f2:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    a1f4:	9b06      	ldr	r3, [sp, #24]
    a1f6:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    a1f8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    a1fa:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    a1fc:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    a1fe:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    a202:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    a206:	4798      	blx	r3
    a208:	4623      	mov	r3, r4
    a20a:	2200      	movs	r2, #0
    a20c:	2104      	movs	r1, #4
    a20e:	47b0      	blx	r6
	return user_op->status;
    a210:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    a212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    a216:	2001      	movs	r0, #1
}
    a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a21c:	20001984 	.word	0x20001984

0000a220 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    a220:	f00a be1e 	b.w	14e60 <cntr_cnt_get>

0000a224 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    a224:	b570      	push	{r4, r5, r6, lr}
    a226:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    a228:	2000      	movs	r0, #0
{
    a22a:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    a22c:	f003 f9f2 	bl	d614 <ull_adv_is_enabled>
    a230:	b9a8      	cbnz	r0, a25e <ll_addr_set+0x3a>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    a232:	f003 fb63 	bl	d8fc <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    a236:	f010 0606 	ands.w	r6, r0, #6
    a23a:	d110      	bne.n	a25e <ll_addr_set+0x3a>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    a23c:	b13c      	cbz	r4, a24e <ll_addr_set+0x2a>
		if (bdaddr) {
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a23e:	480b      	ldr	r0, [pc, #44]	; (a26c <ll_addr_set+0x48>)
    a240:	2206      	movs	r2, #6
    a242:	4629      	mov	r1, r5
		if (bdaddr) {
    a244:	b16d      	cbz	r5, a262 <ll_addr_set+0x3e>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    a246:	f010 fb04 	bl	1a852 <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
    a24a:	4630      	mov	r0, r6
}
    a24c:	bd70      	pop	{r4, r5, r6, pc}
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a24e:	4808      	ldr	r0, [pc, #32]	; (a270 <ll_addr_set+0x4c>)
    a250:	2206      	movs	r2, #6
    a252:	4629      	mov	r1, r5
		if (bdaddr) {
    a254:	b12d      	cbz	r5, a262 <ll_addr_set+0x3e>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    a256:	f010 fafc 	bl	1a852 <memcpy>
	return 0;
    a25a:	4620      	mov	r0, r4
}
    a25c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    a25e:	200c      	movs	r0, #12
}
    a260:	bd70      	pop	{r4, r5, r6, pc}
			(void)memset(pub_addr, 0, BDADDR_SIZE);
    a262:	f010 fb01 	bl	1a868 <memset>
	return 0;
    a266:	4628      	mov	r0, r5
}
    a268:	bd70      	pop	{r4, r5, r6, pc}
    a26a:	bf00      	nop
    a26c:	200019b8 	.word	0x200019b8
    a270:	200019b0 	.word	0x200019b0

0000a274 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    a274:	2801      	cmp	r0, #1
{
    a276:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    a278:	d805      	bhi.n	a286 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    a27a:	4a04      	ldr	r2, [pc, #16]	; (a28c <ll_addr_get+0x18>)
    a27c:	4804      	ldr	r0, [pc, #16]	; (a290 <ll_addr_get+0x1c>)
    a27e:	2b00      	cmp	r3, #0
    a280:	bf18      	it	ne
    a282:	4610      	movne	r0, r2
    a284:	4770      	bx	lr
		return NULL;
    a286:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    a288:	4770      	bx	lr
    a28a:	bf00      	nop
    a28c:	200019b8 	.word	0x200019b8
    a290:	200019b0 	.word	0x200019b0

0000a294 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    a294:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    a296:	b510      	push	{r4, lr}
    a298:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    a29a:	d80b      	bhi.n	a2b4 <ll_addr_read+0x20>
	if (addr_type) {
    a29c:	4608      	mov	r0, r1
		return rnd_addr;
    a29e:	4c07      	ldr	r4, [pc, #28]	; (a2bc <ll_addr_read+0x28>)
    a2a0:	4907      	ldr	r1, [pc, #28]	; (a2c0 <ll_addr_read+0x2c>)
    a2a2:	2b00      	cmp	r3, #0
    a2a4:	bf18      	it	ne
    a2a6:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    a2a8:	2206      	movs	r2, #6
    a2aa:	4621      	mov	r1, r4
    a2ac:	f010 fad1 	bl	1a852 <memcpy>
	}

	return addr;
}
    a2b0:	4620      	mov	r0, r4
    a2b2:	bd10      	pop	{r4, pc}
		return NULL;
    a2b4:	2400      	movs	r4, #0
}
    a2b6:	4620      	mov	r0, r4
    a2b8:	bd10      	pop	{r4, pc}
    a2ba:	bf00      	nop
    a2bc:	200019b0 	.word	0x200019b0
    a2c0:	200019b8 	.word	0x200019b8

0000a2c4 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    a2c4:	2802      	cmp	r0, #2
    a2c6:	d001      	beq.n	a2cc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    a2c8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    a2ca:	4770      	bx	lr
{
    a2cc:	b538      	push	{r3, r4, r5, lr}
    a2ce:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    a2d0:	4608      	mov	r0, r1
    a2d2:	461d      	mov	r5, r3
    a2d4:	f004 f958 	bl	e588 <ll_connected_get>
			if (!conn) {
    a2d8:	b110      	cbz	r0, a2e0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    a2da:	2000      	movs	r0, #0
    a2dc:	7028      	strb	r0, [r5, #0]
}
    a2de:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    a2e0:	4620      	mov	r0, r4
}
    a2e2:	bd38      	pop	{r3, r4, r5, pc}

0000a2e4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    a2e4:	2300      	movs	r3, #0
    a2e6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    a2e8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    a2ea:	4770      	bx	lr

0000a2ec <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    a2ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    a2ee:	4802      	ldr	r0, [pc, #8]	; (a2f8 <hci_driver_init+0xc>)
    a2f0:	f7f9 fe84 	bl	3ffc <bt_hci_driver_register>

	return 0;
}
    a2f4:	2000      	movs	r0, #0
    a2f6:	bd08      	pop	{r3, pc}
    a2f8:	0001fc78 	.word	0x0001fc78

0000a2fc <hci_driver_send>:
{
    a2fc:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    a2fe:	8983      	ldrh	r3, [r0, #12]
{
    a300:	b083      	sub	sp, #12
	if (!buf->len) {
    a302:	b123      	cbz	r3, a30e <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a304:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    a306:	4604      	mov	r4, r0
    a308:	b1c3      	cbz	r3, a33c <hci_driver_send+0x40>
    a30a:	2b02      	cmp	r3, #2
    a30c:	d004      	beq.n	a318 <hci_driver_send+0x1c>
    a30e:	f06f 0515 	mvn.w	r5, #21
}
    a312:	4628      	mov	r0, r5
    a314:	b003      	add	sp, #12
    a316:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    a318:	a901      	add	r1, sp, #4
    a31a:	f000 ff35 	bl	b188 <hci_acl_handle>
	if (evt) {
    a31e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    a320:	4605      	mov	r5, r0
	if (evt) {
    a322:	b113      	cbz	r3, a32a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    a324:	4618      	mov	r0, r3
    a326:	f7f9 fe4b 	bl	3fc0 <bt_recv_prio>
	if (!err) {
    a32a:	2d00      	cmp	r5, #0
    a32c:	d1f1      	bne.n	a312 <hci_driver_send+0x16>
		net_buf_unref(buf);
    a32e:	4620      	mov	r0, r4
    a330:	f00b fcf0 	bl	15d14 <net_buf_unref>
    a334:	2500      	movs	r5, #0
}
    a336:	4628      	mov	r0, r5
    a338:	b003      	add	sp, #12
    a33a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a33c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    a33e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a340:	f000 fabe 	bl	a8c0 <hci_cmd_handle>
	if (evt) {
    a344:	2800      	cmp	r0, #0
    a346:	d0f2      	beq.n	a32e <hci_driver_send+0x32>
		bt_recv_prio(evt);
    a348:	f7f9 fe3a 	bl	3fc0 <bt_recv_prio>
		if (node_rx) {
    a34c:	9d01      	ldr	r5, [sp, #4]
    a34e:	2d00      	cmp	r5, #0
    a350:	d0ed      	beq.n	a32e <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a352:	4628      	mov	r0, r5
    a354:	f001 fb4e 	bl	b9f4 <hci_get_class>
    a358:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    a35a:	9901      	ldr	r1, [sp, #4]
    a35c:	4801      	ldr	r0, [pc, #4]	; (a364 <hci_driver_send+0x68>)
    a35e:	f014 fa67 	bl	1e830 <k_queue_append>
	if (!err) {
    a362:	e7e4      	b.n	a32e <hci_driver_send+0x32>
    a364:	200019c0 	.word	0x200019c0

0000a368 <hci_driver_close>:
{
    a368:	b508      	push	{r3, lr}
	ll_deinit();
    a36a:	f002 fcf3 	bl	cd54 <ll_deinit>
	z_impl_k_thread_abort(thread);
    a36e:	4804      	ldr	r0, [pc, #16]	; (a380 <hci_driver_close+0x18>)
    a370:	f7f8 fe4e 	bl	3010 <z_impl_k_thread_abort>
    a374:	4803      	ldr	r0, [pc, #12]	; (a384 <hci_driver_close+0x1c>)
    a376:	f7f8 fe4b 	bl	3010 <z_impl_k_thread_abort>
}
    a37a:	2000      	movs	r0, #0
    a37c:	bd08      	pop	{r3, pc}
    a37e:	bf00      	nop
    a380:	200011a8 	.word	0x200011a8
    a384:	20001228 	.word	0x20001228

0000a388 <recv_thread>:
{
    a388:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    a38a:	4e41      	ldr	r6, [pc, #260]	; (a490 <recv_thread+0x108>)
		LL_ASSERT(0);
    a38c:	4f41      	ldr	r7, [pc, #260]	; (a494 <recv_thread+0x10c>)
{
    a38e:	b083      	sub	sp, #12
    a390:	f04f 32ff 	mov.w	r2, #4294967295
    a394:	f04f 33ff 	mov.w	r3, #4294967295
    a398:	4630      	mov	r0, r6
    a39a:	f00d fd87 	bl	17eac <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a39e:	2800      	cmp	r0, #0
    a3a0:	d0f6      	beq.n	a390 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    a3a2:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a3a4:	9001      	str	r0, [sp, #4]
	switch (class) {
    a3a6:	2b04      	cmp	r3, #4
    a3a8:	d821      	bhi.n	a3ee <recv_thread+0x66>
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d14b      	bne.n	a446 <recv_thread+0xbe>
		LL_ASSERT(0);
    a3ae:	493a      	ldr	r1, [pc, #232]	; (a498 <recv_thread+0x110>)
    a3b0:	483a      	ldr	r0, [pc, #232]	; (a49c <recv_thread+0x114>)
    a3b2:	f240 13ab 	movw	r3, #427	; 0x1ab
    a3b6:	463a      	mov	r2, r7
    a3b8:	f00f f8eb 	bl	19592 <assert_print>
    a3bc:	4040      	eors	r0, r0
    a3be:	f380 8811 	msr	BASEPRI, r0
    a3c2:	f04f 0003 	mov.w	r0, #3
    a3c6:	df02      	svc	2
	node_rx->hdr.next = NULL;
    a3c8:	9b01      	ldr	r3, [sp, #4]
    a3ca:	2200      	movs	r2, #0
    a3cc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a3ce:	a801      	add	r0, sp, #4
    a3d0:	f001 ff4c 	bl	c26c <ll_rx_mem_release>
    a3d4:	f04f 32ff 	mov.w	r2, #4294967295
    a3d8:	f04f 33ff 	mov.w	r3, #4294967295
    a3dc:	4630      	mov	r0, r6
    a3de:	f00d fd65 	bl	17eac <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a3e2:	2800      	cmp	r0, #0
    a3e4:	d0d4      	beq.n	a390 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    a3e6:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a3e8:	9001      	str	r0, [sp, #4]
	switch (class) {
    a3ea:	2b04      	cmp	r3, #4
    a3ec:	d9dd      	bls.n	a3aa <recv_thread+0x22>
    a3ee:	2b05      	cmp	r3, #5
    a3f0:	d1dd      	bne.n	a3ae <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a3f2:	f04f 32ff 	mov.w	r2, #4294967295
    a3f6:	f04f 33ff 	mov.w	r3, #4294967295
    a3fa:	2003      	movs	r0, #3
    a3fc:	f7f9 f966 	bl	36cc <bt_buf_get_rx>
    a400:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    a402:	4621      	mov	r1, r4
    a404:	9801      	ldr	r0, [sp, #4]
    a406:	f000 ff4b 	bl	b2a0 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    a40a:	9b01      	ldr	r3, [sp, #4]
    a40c:	2200      	movs	r2, #0
    a40e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a410:	a801      	add	r0, sp, #4
    a412:	f001 ff2b 	bl	c26c <ll_rx_mem_release>
		while (buf) {
    a416:	2c00      	cmp	r4, #0
    a418:	d0ba      	beq.n	a390 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    a41a:	4620      	mov	r0, r4
    a41c:	f013 fd43 	bl	1dea6 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    a420:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    a422:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    a424:	2000      	movs	r0, #0
    a426:	f013 fd64 	bl	1def2 <net_buf_frag_del>
			if (frag->len) {
    a42a:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    a42c:	4604      	mov	r4, r0
				bt_recv(frag);
    a42e:	4628      	mov	r0, r5
			if (frag->len) {
    a430:	b133      	cbz	r3, a440 <recv_thread+0xb8>
				bt_recv(frag);
    a432:	f7f9 fd4b 	bl	3ecc <bt_recv>
	z_impl_k_yield();
    a436:	f00e f9a5 	bl	18784 <z_impl_k_yield>
		while (buf) {
    a43a:	2c00      	cmp	r4, #0
    a43c:	d1ed      	bne.n	a41a <recv_thread+0x92>
    a43e:	e7a7      	b.n	a390 <recv_thread+0x8>
				net_buf_unref(frag);
    a440:	f00b fc68 	bl	15d14 <net_buf_unref>
    a444:	e7f7      	b.n	a436 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a446:	2b02      	cmp	r3, #2
    a448:	d013      	beq.n	a472 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a44a:	f04f 32ff 	mov.w	r2, #4294967295
    a44e:	f04f 33ff 	mov.w	r3, #4294967295
    a452:	2001      	movs	r0, #1
    a454:	f7f9 f93a 	bl	36cc <bt_buf_get_rx>
    a458:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    a45a:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    a45c:	b19c      	cbz	r4, a486 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
    a45e:	4621      	mov	r1, r4
    a460:	f000 ff58 	bl	b314 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    a464:	9b01      	ldr	r3, [sp, #4]
    a466:	2200      	movs	r2, #0
    a468:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a46a:	a801      	add	r0, sp, #4
    a46c:	f001 fefe 	bl	c26c <ll_rx_mem_release>
		while (buf) {
    a470:	e7d3      	b.n	a41a <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    a472:	2200      	movs	r2, #0
    a474:	2300      	movs	r3, #0
    a476:	2101      	movs	r1, #1
    a478:	2000      	movs	r0, #0
    a47a:	f7f9 f951 	bl	3720 <bt_buf_get_evt>
    a47e:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    a480:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    a482:	2c00      	cmp	r4, #0
    a484:	d1eb      	bne.n	a45e <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
    a486:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    a488:	a801      	add	r0, sp, #4
    a48a:	f001 feef 	bl	c26c <ll_rx_mem_release>
		while (buf) {
    a48e:	e77f      	b.n	a390 <recv_thread+0x8>
    a490:	200019c0 	.word	0x200019c0
    a494:	0001fc14 	.word	0x0001fc14
    a498:	0001fc54 	.word	0x0001fc54
    a49c:	0001fbf4 	.word	0x0001fbf4

0000a4a0 <prio_recv_thread>:
{
    a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    a4a4:	4f2e      	ldr	r7, [pc, #184]	; (a560 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    a4a6:	4e2f      	ldr	r6, [pc, #188]	; (a564 <prio_recv_thread+0xc4>)
{
    a4a8:	b082      	sub	sp, #8
    a4aa:	e00c      	b.n	a4c6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a4ac:	f7f9 f938 	bl	3720 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a4b0:	4622      	mov	r2, r4
    a4b2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a4b6:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a4b8:	f001 fa84 	bl	b9c4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    a4bc:	4620      	mov	r0, r4
    a4be:	f7f9 fd7f 	bl	3fc0 <bt_recv_prio>
	z_impl_k_yield();
    a4c2:	f00e f95f 	bl	18784 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a4c6:	f10d 0102 	add.w	r1, sp, #2
    a4ca:	a801      	add	r0, sp, #4
    a4cc:	f001 fd8e 	bl	bfec <ll_rx_get>
    a4d0:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a4d2:	f04f 32ff 	mov.w	r2, #4294967295
    a4d6:	f04f 33ff 	mov.w	r3, #4294967295
    a4da:	2100      	movs	r1, #0
    a4dc:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a4de:	2c00      	cmp	r4, #0
    a4e0:	d1e4      	bne.n	a4ac <prio_recv_thread+0xc>
		if (node_rx) {
    a4e2:	9b01      	ldr	r3, [sp, #4]
    a4e4:	b1b3      	cbz	r3, a514 <prio_recv_thread+0x74>
			ll_rx_dequeue();
    a4e6:	f001 fdf7 	bl	c0d8 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a4ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
    a4ee:	4640      	mov	r0, r8
    a4f0:	f001 fa80 	bl	b9f4 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    a4f4:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a4f6:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    a4fa:	796b      	ldrb	r3, [r5, #5]
    a4fc:	2b03      	cmp	r3, #3
    a4fe:	d102      	bne.n	a506 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    a500:	792b      	ldrb	r3, [r5, #4]
    a502:	2b18      	cmp	r3, #24
    a504:	d00e      	beq.n	a524 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    a506:	4629      	mov	r1, r5
    a508:	4630      	mov	r0, r6
    a50a:	f014 f991 	bl	1e830 <k_queue_append>
		if (iso_received || node_rx) {
    a50e:	9b01      	ldr	r3, [sp, #4]
    a510:	2b00      	cmp	r3, #0
    a512:	d1d8      	bne.n	a4c6 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    a514:	f04f 32ff 	mov.w	r2, #4294967295
    a518:	f04f 33ff 	mov.w	r3, #4294967295
    a51c:	4638      	mov	r0, r7
    a51e:	f00d fd1f 	bl	17f60 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a522:	e7d0      	b.n	a4c6 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a524:	f04f 33ff 	mov.w	r3, #4294967295
    a528:	4621      	mov	r1, r4
    a52a:	f04f 32ff 	mov.w	r2, #4294967295
    a52e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    a530:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a534:	f7f9 f8f4 	bl	3720 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    a538:	4641      	mov	r1, r8
    a53a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a53c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    a53e:	f105 001c 	add.w	r0, r5, #28
    a542:	f000 fe85 	bl	b250 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    a546:	4640      	mov	r0, r8
    a548:	f000 fea2 	bl	b290 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    a54c:	4620      	mov	r0, r4
			if (buf) {
    a54e:	b124      	cbz	r4, a55a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    a550:	f7f9 fd36 	bl	3fc0 <bt_recv_prio>
					net_buf_unref(buf);
    a554:	4620      	mov	r0, r4
    a556:	f00b fbdd 	bl	15d14 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    a55a:	9d01      	ldr	r5, [sp, #4]
    a55c:	e7d3      	b.n	a506 <prio_recv_thread+0x66>
    a55e:	bf00      	nop
    a560:	200019d8 	.word	0x200019d8
    a564:	200019c0 	.word	0x200019c0

0000a568 <hci_driver_open>:
{
    a568:	b5d0      	push	{r4, r6, r7, lr}
    a56a:	b088      	sub	sp, #32
	z_impl_k_queue_init(queue);
    a56c:	481e      	ldr	r0, [pc, #120]	; (a5e8 <hci_driver_open+0x80>)
    a56e:	f014 f953 	bl	1e818 <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    a572:	f04f 32ff 	mov.w	r2, #4294967295
    a576:	2100      	movs	r1, #0
    a578:	481c      	ldr	r0, [pc, #112]	; (a5ec <hci_driver_open+0x84>)
    a57a:	f014 f9aa 	bl	1e8d2 <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
    a57e:	481b      	ldr	r0, [pc, #108]	; (a5ec <hci_driver_open+0x84>)
    a580:	f002 fad4 	bl	cb2c <ll_init>
	if (err) {
    a584:	4604      	mov	r4, r0
    a586:	bb58      	cbnz	r0, a5e0 <hci_driver_open+0x78>
	hci_init(NULL);
    a588:	f001 fa4a 	bl	ba20 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    a58c:	2600      	movs	r6, #0
    a58e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a590:	f06f 0209 	mvn.w	r2, #9
    a594:	e9cd 2403 	strd	r2, r4, [sp, #12]
    a598:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a59c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a5a0:	4b13      	ldr	r3, [pc, #76]	; (a5f0 <hci_driver_open+0x88>)
    a5a2:	4914      	ldr	r1, [pc, #80]	; (a5f4 <hci_driver_open+0x8c>)
    a5a4:	9400      	str	r4, [sp, #0]
    a5a6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    a5aa:	4813      	ldr	r0, [pc, #76]	; (a5f8 <hci_driver_open+0x90>)
    a5ac:	f00d fbda 	bl	17d64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a5b0:	4912      	ldr	r1, [pc, #72]	; (a5fc <hci_driver_open+0x94>)
    a5b2:	4811      	ldr	r0, [pc, #68]	; (a5f8 <hci_driver_open+0x90>)
    a5b4:	f014 f8b4 	bl	1e720 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a5b8:	f06f 0207 	mvn.w	r2, #7
    a5bc:	e9cd 2403 	strd	r2, r4, [sp, #12]
    a5c0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a5c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a5c8:	4b0d      	ldr	r3, [pc, #52]	; (a600 <hci_driver_open+0x98>)
    a5ca:	490e      	ldr	r1, [pc, #56]	; (a604 <hci_driver_open+0x9c>)
    a5cc:	9400      	str	r4, [sp, #0]
    a5ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a5d2:	480d      	ldr	r0, [pc, #52]	; (a608 <hci_driver_open+0xa0>)
    a5d4:	f00d fbc6 	bl	17d64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a5d8:	490c      	ldr	r1, [pc, #48]	; (a60c <hci_driver_open+0xa4>)
    a5da:	480b      	ldr	r0, [pc, #44]	; (a608 <hci_driver_open+0xa0>)
    a5dc:	f014 f8a0 	bl	1e720 <z_impl_k_thread_name_set>
}
    a5e0:	4620      	mov	r0, r4
    a5e2:	b008      	add	sp, #32
    a5e4:	bdd0      	pop	{r4, r6, r7, pc}
    a5e6:	bf00      	nop
    a5e8:	200019c0 	.word	0x200019c0
    a5ec:	200019d8 	.word	0x200019d8
    a5f0:	0000a4a1 	.word	0x0000a4a1
    a5f4:	200035c0 	.word	0x200035c0
    a5f8:	200011a8 	.word	0x200011a8
    a5fc:	0001fc58 	.word	0x0001fc58
    a600:	0000a389 	.word	0x0000a389
    a604:	200037c0 	.word	0x200037c0
    a608:	20001228 	.word	0x20001228
    a60c:	0001fc64 	.word	0x0001fc64

0000a610 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
    a614:	f8df 90a8 	ldr.w	r9, [pc, #168]	; a6c0 <dup_found.part.0+0xb0>
    a618:	f8d9 3000 	ldr.w	r3, [r9]
    a61c:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    a61e:	4680      	mov	r8, r0
    a620:	460f      	mov	r7, r1
    a622:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
    a624:	dd12      	ble.n	a64c <dup_found.part.0+0x3c>
    a626:	4c27      	ldr	r4, [pc, #156]	; (a6c4 <dup_found.part.0+0xb4>)
    a628:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
    a62a:	4621      	mov	r1, r4
    a62c:	2206      	movs	r2, #6
    a62e:	4630      	mov	r0, r6
    a630:	f010 f8fe 	bl	1a830 <memcmp>
    a634:	b918      	cbnz	r0, a63e <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
    a636:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    a63a:	42bb      	cmp	r3, r7
    a63c:	d029      	beq.n	a692 <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
    a63e:	f8d9 3000 	ldr.w	r3, [r9]
    a642:	3501      	adds	r5, #1
    a644:	429d      	cmp	r5, r3
    a646:	f104 0408 	add.w	r4, r4, #8
    a64a:	dbee      	blt.n	a62a <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
    a64c:	4d1e      	ldr	r5, [pc, #120]	; (a6c8 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    a64e:	4c1f      	ldr	r4, [pc, #124]	; (a6cc <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
    a650:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    a654:	4631      	mov	r1, r6
    a656:	ea4f 06ca 	mov.w	r6, sl, lsl #3
    a65a:	1c70      	adds	r0, r6, #1
    a65c:	4420      	add	r0, r4
    a65e:	2206      	movs	r2, #6
    a660:	f010 f8f7 	bl	1a852 <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
    a664:	2301      	movs	r3, #1
    a666:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a66a:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
    a66e:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
    a672:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a674:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
    a676:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a67a:	dc1c      	bgt.n	a6b6 <dup_found.part.0+0xa6>
			dup_count++;
    a67c:	3301      	adds	r3, #1
			dup_curr = dup_count;
    a67e:	461a      	mov	r2, r3
			dup_count++;
    a680:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
    a684:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
    a686:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a688:	2a10      	cmp	r2, #16
			dup_curr = 0U;
    a68a:	bf08      	it	eq
    a68c:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
    a68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
    a692:	4b0e      	ldr	r3, [pc, #56]	; (a6cc <dup_found.part.0+0xbc>)
    a694:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
    a698:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
    a69a:	79ea      	ldrb	r2, [r5, #7]
    a69c:	fa22 f308 	lsr.w	r3, r2, r8
    a6a0:	f013 0301 	ands.w	r3, r3, #1
    a6a4:	d1f3      	bne.n	a68e <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
    a6a6:	fa00 f808 	lsl.w	r8, r0, r8
    a6aa:	ea42 0208 	orr.w	r2, r2, r8
    a6ae:	71ea      	strb	r2, [r5, #7]
		return false;
    a6b0:	4618      	mov	r0, r3
}
    a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    a6b6:	682a      	ldr	r2, [r5, #0]
    a6b8:	3201      	adds	r2, #1
    a6ba:	602a      	str	r2, [r5, #0]
    a6bc:	e7e3      	b.n	a686 <dup_found.part.0+0x76>
    a6be:	bf00      	nop
    a6c0:	200019f4 	.word	0x200019f4
    a6c4:	200019fd 	.word	0x200019fd
    a6c8:	200019f8 	.word	0x200019f8
    a6cc:	200019fc 	.word	0x200019fc

0000a6d0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a6d2:	4c19      	ldr	r4, [pc, #100]	; (a738 <le_remote_feat_complete+0x68>)
    a6d4:	6864      	ldr	r4, [r4, #4]
    a6d6:	00a4      	lsls	r4, r4, #2
    a6d8:	d504      	bpl.n	a6e4 <le_remote_feat_complete+0x14>
    a6da:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    a6dc:	4a17      	ldr	r2, [pc, #92]	; (a73c <le_remote_feat_complete+0x6c>)
    a6de:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a6e0:	0712      	lsls	r2, r2, #28
    a6e2:	d400      	bmi.n	a6e6 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    a6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6e6:	f103 0408 	add.w	r4, r3, #8
    a6ea:	4607      	mov	r7, r0
    a6ec:	460e      	mov	r6, r1
    a6ee:	4620      	mov	r0, r4
    a6f0:	2102      	movs	r1, #2
    a6f2:	f013 fc0a 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    a6f6:	233e      	movs	r3, #62	; 0x3e
    a6f8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    a6fa:	230c      	movs	r3, #12
    a6fc:	7043      	strb	r3, [r0, #1]
    a6fe:	2101      	movs	r1, #1
    a700:	4620      	mov	r0, r4
    a702:	f013 fc02 	bl	1df0a <net_buf_simple_add>
    a706:	4603      	mov	r3, r0
	me->subevent = subevt;
    a708:	2204      	movs	r2, #4
    a70a:	701a      	strb	r2, [r3, #0]
    a70c:	4620      	mov	r0, r4
    a70e:	210b      	movs	r1, #11
    a710:	f013 fbfb 	bl	1df0a <net_buf_simple_add>
		memcpy(&sep->features[0],
    a714:	2208      	movs	r2, #8
	sep->status = status;
    a716:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a718:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    a71c:	b92f      	cbnz	r7, a72a <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    a71e:	1d31      	adds	r1, r6, #4
    a720:	3003      	adds	r0, #3
}
    a722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    a726:	f010 b894 	b.w	1a852 <memcpy>
}
    a72a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a72e:	2100      	movs	r1, #0
    a730:	3003      	adds	r0, #3
    a732:	f010 b899 	b.w	1a868 <memset>
    a736:	bf00      	nop
    a738:	20000158 	.word	0x20000158
    a73c:	20000160 	.word	0x20000160

0000a740 <hci_vendor_cmd_handle_common>:
{
    a740:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    a742:	3801      	subs	r0, #1
{
    a744:	b087      	sub	sp, #28
    a746:	4615      	mov	r5, r2
	switch (ocf) {
    a748:	2809      	cmp	r0, #9
    a74a:	d806      	bhi.n	a75a <hci_vendor_cmd_handle_common+0x1a>
    a74c:	e8df f000 	tbb	[pc, r0]
    a750:	05452809 	.word	0x05452809
    a754:	6d055905 	.word	0x6d055905
    a758:	9f8a      	.short	0x9f8a
    a75a:	f06f 0015 	mvn.w	r0, #21
}
    a75e:	b007      	add	sp, #28
    a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a762:	4b55      	ldr	r3, [pc, #340]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
    a764:	210d      	movs	r1, #13
    a766:	8818      	ldrh	r0, [r3, #0]
    a768:	f010 fcc1 	bl	1b0ee <bt_hci_cmd_complete_create>
    a76c:	210d      	movs	r1, #13
    a76e:	6028      	str	r0, [r5, #0]
    a770:	3008      	adds	r0, #8
    a772:	f013 fbca 	bl	1df0a <net_buf_simple_add>
    a776:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a778:	2202      	movs	r2, #2
	rp->status = 0x00;
    a77a:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    a77c:	2403      	movs	r4, #3
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a77e:	2101      	movs	r1, #1
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a780:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    a782:	70da      	strb	r2, [r3, #3]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a784:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    a786:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a788:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    a78a:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    a78c:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    a78e:	719c      	strb	r4, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a790:	71d9      	strb	r1, [r3, #7]
    a792:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a794:	725a      	strb	r2, [r3, #9]
    a796:	7298      	strb	r0, [r3, #10]
    a798:	72d8      	strb	r0, [r3, #11]
    a79a:	7318      	strb	r0, [r3, #12]
}
    a79c:	b007      	add	sp, #28
    a79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a7a0:	4b45      	ldr	r3, [pc, #276]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
    a7a2:	2141      	movs	r1, #65	; 0x41
    a7a4:	8818      	ldrh	r0, [r3, #0]
    a7a6:	f010 fca2 	bl	1b0ee <bt_hci_cmd_complete_create>
    a7aa:	2141      	movs	r1, #65	; 0x41
    a7ac:	6028      	str	r0, [r5, #0]
    a7ae:	3008      	adds	r0, #8
    a7b0:	f013 fbab 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    a7b4:	2400      	movs	r4, #0
    a7b6:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a7b8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    a7ba:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a7be:	4621      	mov	r1, r4
    a7c0:	f010 f852 	bl	1a868 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    a7c4:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a7c6:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    a7c8:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    a7cc:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    a7d0:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    a7d2:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a7d4:	70ab      	strb	r3, [r5, #2]
}
    a7d6:	b007      	add	sp, #28
    a7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a7da:	4b37      	ldr	r3, [pc, #220]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
    a7dc:	2109      	movs	r1, #9
    a7de:	8818      	ldrh	r0, [r3, #0]
    a7e0:	f010 fc85 	bl	1b0ee <bt_hci_cmd_complete_create>
    a7e4:	2109      	movs	r1, #9
    a7e6:	6028      	str	r0, [r5, #0]
    a7e8:	3008      	adds	r0, #8
    a7ea:	f013 fb8e 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    a7ee:	2400      	movs	r4, #0
    a7f0:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a7f4:	2208      	movs	r2, #8
    a7f6:	4621      	mov	r1, r4
    a7f8:	f010 f836 	bl	1a868 <memset>
	return 0;
    a7fc:	4620      	mov	r0, r4
}
    a7fe:	b007      	add	sp, #28
    a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    a802:	6889      	ldr	r1, [r1, #8]
    a804:	2000      	movs	r0, #0
    a806:	f7ff fd0d 	bl	a224 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a80a:	4b2b      	ldr	r3, [pc, #172]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
    a80c:	2101      	movs	r1, #1
    a80e:	8818      	ldrh	r0, [r3, #0]
    a810:	f010 fc6d 	bl	1b0ee <bt_hci_cmd_complete_create>
    a814:	2101      	movs	r1, #1
    a816:	4604      	mov	r4, r0
    a818:	3008      	adds	r0, #8
    a81a:	f013 fb76 	bl	1df0a <net_buf_simple_add>
    a81e:	4603      	mov	r3, r0
	ccst->status = status;
    a820:	2000      	movs	r0, #0
    a822:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    a824:	602c      	str	r4, [r5, #0]
}
    a826:	b007      	add	sp, #28
    a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    a82a:	4e24      	ldr	r6, [pc, #144]	; (a8bc <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a82c:	4f22      	ldr	r7, [pc, #136]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    a82e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a830:	f10d 0c04 	add.w	ip, sp, #4
    a834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a838:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a83a:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    a83c:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a840:	2113      	movs	r1, #19
    a842:	f010 fc54 	bl	1b0ee <bt_hci_cmd_complete_create>
    a846:	2113      	movs	r1, #19
    a848:	6028      	str	r0, [r5, #0]
    a84a:	3008      	adds	r0, #8
    a84c:	f013 fb5d 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    a850:	2400      	movs	r4, #0
    a852:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    a856:	2212      	movs	r2, #18
    a858:	a901      	add	r1, sp, #4
    a85a:	f00f fffa 	bl	1a852 <memcpy>
	return 0;
    a85e:	4620      	mov	r0, r4
}
    a860:	b007      	add	sp, #28
    a862:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a864:	4b14      	ldr	r3, [pc, #80]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
    a866:	2118      	movs	r1, #24
    a868:	8818      	ldrh	r0, [r3, #0]
    a86a:	f010 fc40 	bl	1b0ee <bt_hci_cmd_complete_create>
    a86e:	2118      	movs	r1, #24
    a870:	6028      	str	r0, [r5, #0]
    a872:	3008      	adds	r0, #8
    a874:	f013 fb49 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    a878:	2400      	movs	r4, #0
    a87a:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    a87c:	2101      	movs	r1, #1
	rp->status = 0x00;
    a87e:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    a882:	f00b f8c7 	bl	15a14 <hci_vendor_read_static_addr>
    a886:	7068      	strb	r0, [r5, #1]
	return 0;
    a888:	4620      	mov	r0, r4
}
    a88a:	b007      	add	sp, #28
    a88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a88e:	4b0a      	ldr	r3, [pc, #40]	; (a8b8 <hci_vendor_cmd_handle_common+0x178>)
    a890:	2121      	movs	r1, #33	; 0x21
    a892:	8818      	ldrh	r0, [r3, #0]
    a894:	f010 fc2b 	bl	1b0ee <bt_hci_cmd_complete_create>
    a898:	2121      	movs	r1, #33	; 0x21
    a89a:	6028      	str	r0, [r5, #0]
    a89c:	3008      	adds	r0, #8
    a89e:	f013 fb34 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    a8a2:	4601      	mov	r1, r0
    a8a4:	2400      	movs	r4, #0
    a8a6:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    a8aa:	3001      	adds	r0, #1
    a8ac:	f00b f926 	bl	15afc <hci_vendor_read_key_hierarchy_roots>
	return 0;
    a8b0:	4620      	mov	r0, r4
}
    a8b2:	b007      	add	sp, #28
    a8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8b6:	bf00      	nop
    a8b8:	200028d8 	.word	0x200028d8
    a8bc:	0001fc90 	.word	0x0001fc90

0000a8c0 <hci_cmd_handle>:
{
    a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    a8c2:	8983      	ldrh	r3, [r0, #12]
{
    a8c4:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    a8c6:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    a8c8:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    a8ca:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    a8cc:	d92e      	bls.n	a92c <hci_cmd_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
    a8ce:	4604      	mov	r4, r0
    a8d0:	2103      	movs	r1, #3
    a8d2:	3008      	adds	r0, #8
    a8d4:	f013 fb56 	bl	1df84 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    a8d8:	89a2      	ldrh	r2, [r4, #12]
    a8da:	7883      	ldrb	r3, [r0, #2]
    a8dc:	429a      	cmp	r2, r3
    a8de:	d325      	bcc.n	a92c <hci_cmd_handle+0x6c>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    a8e0:	8802      	ldrh	r2, [r0, #0]
    a8e2:	4eb2      	ldr	r6, [pc, #712]	; (abac <hci_cmd_handle+0x2ec>)
	switch (BT_OGF(_opcode)) {
    a8e4:	f3c2 2385 	ubfx	r3, r2, #10, #6
    a8e8:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    a8ea:	8032      	strh	r2, [r6, #0]
    a8ec:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    a8ee:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    a8f2:	d809      	bhi.n	a908 <hci_cmd_handle+0x48>
    a8f4:	b19b      	cbz	r3, a91e <hci_cmd_handle+0x5e>
    a8f6:	3b01      	subs	r3, #1
    a8f8:	2b07      	cmp	r3, #7
    a8fa:	d810      	bhi.n	a91e <hci_cmd_handle+0x5e>
    a8fc:	e8df f003 	tbb	[pc, r3]
    a900:	4c290f1a 	.word	0x4c290f1a
    a904:	640f0f0f 	.word	0x640f0f0f
    a908:	2b3f      	cmp	r3, #63	; 0x3f
    a90a:	d108      	bne.n	a91e <hci_cmd_handle+0x5e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    a90c:	aa07      	add	r2, sp, #28
    a90e:	4621      	mov	r1, r4
    a910:	4628      	mov	r0, r5
    a912:	f7ff ff15 	bl	a740 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    a916:	3016      	adds	r0, #22
    a918:	f040 841a 	bne.w	b150 <hci_cmd_handle+0x890>
	return bt_hci_cmd_status_create(_opcode, status);
    a91c:	8830      	ldrh	r0, [r6, #0]
    a91e:	2101      	movs	r1, #1
    a920:	f010 fbf7 	bl	1b112 <bt_hci_cmd_status_create>
    a924:	4604      	mov	r4, r0
}
    a926:	4620      	mov	r0, r4
    a928:	b00d      	add	sp, #52	; 0x34
    a92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    a92c:	2400      	movs	r4, #0
}
    a92e:	4620      	mov	r0, r4
    a930:	b00d      	add	sp, #52	; 0x34
    a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    a934:	2d06      	cmp	r5, #6
    a936:	f000 83b8 	beq.w	b0aa <hci_cmd_handle+0x7ea>
    a93a:	2d1d      	cmp	r5, #29
    a93c:	d1ef      	bne.n	a91e <hci_cmd_handle+0x5e>
	handle = sys_le16_to_cpu(cmd->handle);
    a93e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    a940:	8818      	ldrh	r0, [r3, #0]
    a942:	f003 ffaf 	bl	e8a4 <ll_version_ind_send>
    a946:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a948:	8830      	ldrh	r0, [r6, #0]
    a94a:	f010 fbe2 	bl	1b112 <bt_hci_cmd_status_create>
    a94e:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a950:	e7e9      	b.n	a926 <hci_cmd_handle+0x66>
	switch (ocf) {
    a952:	2d63      	cmp	r5, #99	; 0x63
    a954:	f000 83f4 	beq.w	b140 <hci_cmd_handle+0x880>
    a958:	f200 80e6 	bhi.w	ab28 <hci_cmd_handle+0x268>
    a95c:	2d03      	cmp	r5, #3
    a95e:	f000 83c9 	beq.w	b0f4 <hci_cmd_handle+0x834>
    a962:	2d2d      	cmp	r5, #45	; 0x2d
    a964:	f040 80cc 	bne.w	ab00 <hci_cmd_handle+0x240>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    a968:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a96a:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    a96c:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    a96e:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a970:	f010 fbbd 	bl	1b0ee <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    a974:	2104      	movs	r1, #4
    a976:	9007      	str	r0, [sp, #28]
    a978:	3008      	adds	r0, #8
    a97a:	f013 fac6 	bl	1df0a <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    a97e:	b2b4      	uxth	r4, r6
    a980:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    a982:	1cc3      	adds	r3, r0, #3
    a984:	4621      	mov	r1, r4
    a986:	463a      	mov	r2, r7
    a988:	2002      	movs	r0, #2
    a98a:	f7ff fc9b 	bl	a2c4 <ll_tx_pwr_lvl_get>
	rp->status = status;
    a98e:	7028      	strb	r0, [r5, #0]
	return evt;
    a990:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    a992:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    a996:	e7c6      	b.n	a926 <hci_cmd_handle+0x66>
	switch (ocf) {
    a998:	1e6a      	subs	r2, r5, #1
    a99a:	2a08      	cmp	r2, #8
    a99c:	d8bf      	bhi.n	a91e <hci_cmd_handle+0x5e>
    a99e:	a301      	add	r3, pc, #4	; (adr r3, a9a4 <hci_cmd_handle+0xe4>)
    a9a0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    a9a4:	0000ac65 	.word	0x0000ac65
    a9a8:	0000abb5 	.word	0x0000abb5
    a9ac:	0000ab83 	.word	0x0000ab83
    a9b0:	0000a91f 	.word	0x0000a91f
    a9b4:	0000a91f 	.word	0x0000a91f
    a9b8:	0000a91f 	.word	0x0000a91f
    a9bc:	0000a91f 	.word	0x0000a91f
    a9c0:	0000a91f 	.word	0x0000a91f
    a9c4:	0000ab61 	.word	0x0000ab61
	switch (ocf) {
    a9c8:	1e6a      	subs	r2, r5, #1
    a9ca:	2a4a      	cmp	r2, #74	; 0x4a
    a9cc:	d8a7      	bhi.n	a91e <hci_cmd_handle+0x5e>
    a9ce:	a301      	add	r3, pc, #4	; (adr r3, a9d4 <hci_cmd_handle+0x114>)
    a9d0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    a9d4:	0000aff3 	.word	0x0000aff3
    a9d8:	0000afcf 	.word	0x0000afcf
    a9dc:	0000b041 	.word	0x0000b041
    a9e0:	0000a91f 	.word	0x0000a91f
    a9e4:	0000b037 	.word	0x0000b037
    a9e8:	0000b01b 	.word	0x0000b01b
    a9ec:	0000afff 	.word	0x0000afff
    a9f0:	0000b095 	.word	0x0000b095
    a9f4:	0000b089 	.word	0x0000b089
    a9f8:	0000b0a1 	.word	0x0000b0a1
    a9fc:	0000afb7 	.word	0x0000afb7
    aa00:	0000af87 	.word	0x0000af87
    aa04:	0000a91f 	.word	0x0000a91f
    aa08:	0000a91f 	.word	0x0000a91f
    aa0c:	0000a91f 	.word	0x0000a91f
    aa10:	0000a91f 	.word	0x0000a91f
    aa14:	0000a91f 	.word	0x0000a91f
    aa18:	0000a91f 	.word	0x0000a91f
    aa1c:	0000af61 	.word	0x0000af61
    aa20:	0000a91f 	.word	0x0000a91f
    aa24:	0000af37 	.word	0x0000af37
    aa28:	0000af23 	.word	0x0000af23
    aa2c:	0000aeef 	.word	0x0000aeef
    aa30:	0000aecd 	.word	0x0000aecd
    aa34:	0000a91f 	.word	0x0000a91f
    aa38:	0000aec3 	.word	0x0000aec3
    aa3c:	0000aeb3 	.word	0x0000aeb3
    aa40:	0000ae7d 	.word	0x0000ae7d
    aa44:	0000a91f 	.word	0x0000a91f
    aa48:	0000a91f 	.word	0x0000a91f
    aa4c:	0000a91f 	.word	0x0000a91f
    aa50:	0000ae5f 	.word	0x0000ae5f
    aa54:	0000ae47 	.word	0x0000ae47
    aa58:	0000ae37 	.word	0x0000ae37
    aa5c:	0000ae01 	.word	0x0000ae01
    aa60:	0000adf5 	.word	0x0000adf5
    aa64:	0000a91f 	.word	0x0000a91f
    aa68:	0000a91f 	.word	0x0000a91f
    aa6c:	0000a91f 	.word	0x0000a91f
    aa70:	0000a91f 	.word	0x0000a91f
    aa74:	0000a91f 	.word	0x0000a91f
    aa78:	0000a91f 	.word	0x0000a91f
    aa7c:	0000a91f 	.word	0x0000a91f
    aa80:	0000a91f 	.word	0x0000a91f
    aa84:	0000a91f 	.word	0x0000a91f
    aa88:	0000a91f 	.word	0x0000a91f
    aa8c:	0000ada9 	.word	0x0000ada9
    aa90:	0000ad4f 	.word	0x0000ad4f
    aa94:	0000ad1b 	.word	0x0000ad1b
    aa98:	0000acbf 	.word	0x0000acbf
    aa9c:	0000a91f 	.word	0x0000a91f
    aaa0:	0000a91f 	.word	0x0000a91f
    aaa4:	0000a91f 	.word	0x0000a91f
    aaa8:	0000a91f 	.word	0x0000a91f
    aaac:	0000a91f 	.word	0x0000a91f
    aab0:	0000a91f 	.word	0x0000a91f
    aab4:	0000a91f 	.word	0x0000a91f
    aab8:	0000a91f 	.word	0x0000a91f
    aabc:	0000a91f 	.word	0x0000a91f
    aac0:	0000a91f 	.word	0x0000a91f
    aac4:	0000a91f 	.word	0x0000a91f
    aac8:	0000a91f 	.word	0x0000a91f
    aacc:	0000a91f 	.word	0x0000a91f
    aad0:	0000a91f 	.word	0x0000a91f
    aad4:	0000a91f 	.word	0x0000a91f
    aad8:	0000a91f 	.word	0x0000a91f
    aadc:	0000a91f 	.word	0x0000a91f
    aae0:	0000a91f 	.word	0x0000a91f
    aae4:	0000a91f 	.word	0x0000a91f
    aae8:	0000a91f 	.word	0x0000a91f
    aaec:	0000a91f 	.word	0x0000a91f
    aaf0:	0000a91f 	.word	0x0000a91f
    aaf4:	0000a91f 	.word	0x0000a91f
    aaf8:	0000a91f 	.word	0x0000a91f
    aafc:	0000ac9b 	.word	0x0000ac9b
	switch (ocf) {
    ab00:	2d01      	cmp	r5, #1
    ab02:	f47f af0c 	bne.w	a91e <hci_cmd_handle+0x5e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ab06:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    ab08:	4b29      	ldr	r3, [pc, #164]	; (abb0 <hci_cmd_handle+0x2f0>)
    ab0a:	6811      	ldr	r1, [r2, #0]
    ab0c:	6852      	ldr	r2, [r2, #4]
    ab0e:	6019      	str	r1, [r3, #0]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    ab10:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ab12:	2101      	movs	r1, #1
    ab14:	f010 faeb 	bl	1b0ee <bt_hci_cmd_complete_create>
    ab18:	2101      	movs	r1, #1
    ab1a:	4604      	mov	r4, r0
    ab1c:	3008      	adds	r0, #8
    ab1e:	f013 f9f4 	bl	1df0a <net_buf_simple_add>
	ccst->status = status;
    ab22:	2300      	movs	r3, #0
    ab24:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    ab26:	e6fe      	b.n	a926 <hci_cmd_handle+0x66>
	switch (ocf) {
    ab28:	2d7b      	cmp	r5, #123	; 0x7b
    ab2a:	f000 82c9 	beq.w	b0c0 <hci_cmd_handle+0x800>
    ab2e:	2d7c      	cmp	r5, #124	; 0x7c
    ab30:	f47f aef5 	bne.w	a91e <hci_cmd_handle+0x5e>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    ab34:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ab36:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    ab38:	8859      	ldrh	r1, [r3, #2]
    ab3a:	b2a8      	uxth	r0, r5
    ab3c:	f003 fff2 	bl	eb24 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    ab40:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab42:	2103      	movs	r1, #3
    ab44:	8830      	ldrh	r0, [r6, #0]
    ab46:	f010 fad2 	bl	1b0ee <bt_hci_cmd_complete_create>
    ab4a:	2103      	movs	r1, #3
    ab4c:	4603      	mov	r3, r0
    ab4e:	3008      	adds	r0, #8
    ab50:	9307      	str	r3, [sp, #28]
    ab52:	f013 f9da 	bl	1df0a <net_buf_simple_add>
	rp->status = status;
    ab56:	7004      	strb	r4, [r0, #0]
	return evt;
    ab58:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    ab5a:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    ab5e:	e6e2      	b.n	a926 <hci_cmd_handle+0x66>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab60:	2107      	movs	r1, #7
    ab62:	f010 fac4 	bl	1b0ee <bt_hci_cmd_complete_create>
    ab66:	2107      	movs	r1, #7
    ab68:	4603      	mov	r3, r0
    ab6a:	3008      	adds	r0, #8
    ab6c:	9307      	str	r3, [sp, #28]
    ab6e:	f013 f9cc 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    ab72:	4601      	mov	r1, r0
    ab74:	2000      	movs	r0, #0
    ab76:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    ab7a:	f7ff fb8b 	bl	a294 <ll_addr_read>
	return evt;
    ab7e:	9c07      	ldr	r4, [sp, #28]
    ab80:	e6d1      	b.n	a926 <hci_cmd_handle+0x66>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ab82:	2109      	movs	r1, #9
    ab84:	f010 fab3 	bl	1b0ee <bt_hci_cmd_complete_create>
    ab88:	2109      	movs	r1, #9
    ab8a:	4603      	mov	r3, r0
    ab8c:	3008      	adds	r0, #8
    ab8e:	9307      	str	r3, [sp, #28]
    ab90:	f013 f9bb 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    ab94:	2100      	movs	r1, #0
    ab96:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ab98:	2208      	movs	r2, #8
	rp->status = 0x00;
    ab9a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    ab9e:	f00f fe63 	bl	1a868 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    aba2:	2360      	movs	r3, #96	; 0x60
	return evt;
    aba4:	9c07      	ldr	r4, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
    aba6:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    aba8:	e6bd      	b.n	a926 <hci_cmd_handle+0x66>
    abaa:	bf00      	nop
    abac:	200028d8 	.word	0x200028d8
    abb0:	20000158 	.word	0x20000158
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    abb4:	2141      	movs	r1, #65	; 0x41
    abb6:	f010 fa9a 	bl	1b0ee <bt_hci_cmd_complete_create>
    abba:	2141      	movs	r1, #65	; 0x41
    abbc:	4603      	mov	r3, r0
    abbe:	3008      	adds	r0, #8
    abc0:	9307      	str	r3, [sp, #28]
    abc2:	f013 f9a2 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    abc6:	2100      	movs	r1, #0
    abc8:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    abca:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    abcc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    abd0:	f00f fe4a 	bl	1a868 <memset>
	rp->commands[10] |= BIT(2);
    abd4:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    abd6:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[0] |= BIT(5);
    abd8:	7868      	ldrb	r0, [r5, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    abda:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[10] |= BIT(2);
    abdc:	f043 0304 	orr.w	r3, r3, #4
    abe0:	72eb      	strb	r3, [r5, #11]
	rp->commands[27] |= BIT(6) | BIT(7);
    abe2:	7f2b      	ldrb	r3, [r5, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    abe4:	f063 030b 	orn	r3, r3, #11
    abe8:	772b      	strb	r3, [r5, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    abea:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	rp->commands[5] |= BIT(6) | BIT(7);
    abee:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[33] |= BIT(6) | BIT(7);
    abf2:	f063 030f 	orn	r3, r3, #15
	rp->commands[5] |= BIT(6) | BIT(7);
    abf6:	71a9      	strb	r1, [r5, #6]
	rp->commands[33] |= BIT(6) | BIT(7);
    abf8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	rp->commands[22] |= BIT(2);
    abfc:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[34] |= BIT(0);
    abfe:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	rp->commands[0] |= BIT(5);
    ac02:	f040 0020 	orr.w	r0, r0, #32
	rp->commands[22] |= BIT(2);
    ac06:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[34] |= BIT(0);
    ac0a:	f043 0301 	orr.w	r3, r3, #1
	rp->commands[0] |= BIT(5);
    ac0e:	7068      	strb	r0, [r5, #1]
	rp->commands[22] |= BIT(2);
    ac10:	75e9      	strb	r1, [r5, #23]
	rp->commands[15] |= BIT(1);
    ac12:	7c28      	ldrb	r0, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ac14:	7ea9      	ldrb	r1, [r5, #26]
	rp->commands[34] |= BIT(0);
    ac16:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    ac1a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	return evt;
    ac1e:	9c07      	ldr	r4, [sp, #28]
	rp->commands[14] |= BIT(3) | BIT(5);
    ac20:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[15] |= BIT(1);
    ac24:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ac28:	f061 0108 	orn	r1, r1, #8
	rp->commands[38] |= BIT(7);
    ac2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[14] |= BIT(3) | BIT(5);
    ac30:	73ea      	strb	r2, [r5, #15]
	rp->commands[15] |= BIT(1);
    ac32:	7428      	strb	r0, [r5, #16]
	rp->commands[35] |= BIT(6);
    ac34:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	rp->commands[28] |= BIT(3);
    ac38:	7f68      	ldrb	r0, [r5, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    ac3a:	76a9      	strb	r1, [r5, #26]
	rp->commands[38] |= BIT(7);
    ac3c:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	rp->commands[26] |= BIT(2) | BIT(3);
    ac40:	7ee9      	ldrb	r1, [r5, #27]
	rp->commands[32] |= BIT(4) | BIT(5);
    ac42:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	rp->commands[35] |= BIT(6);
    ac46:	f042 0278 	orr.w	r2, r2, #120	; 0x78
	rp->commands[28] |= BIT(1) | BIT(2);
    ac4a:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[26] |= BIT(2) | BIT(3);
    ac4e:	f041 010f 	orr.w	r1, r1, #15
	rp->commands[32] |= BIT(4) | BIT(5);
    ac52:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[28] |= BIT(1) | BIT(2);
    ac56:	7768      	strb	r0, [r5, #29]
	rp->commands[26] |= BIT(2) | BIT(3);
    ac58:	76e9      	strb	r1, [r5, #27]
	rp->commands[35] |= BIT(6);
    ac5a:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    ac5e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (err == -EINVAL) {
    ac62:	e660      	b.n	a926 <hci_cmd_handle+0x66>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ac64:	2109      	movs	r1, #9
    ac66:	f010 fa42 	bl	1b0ee <bt_hci_cmd_complete_create>
    ac6a:	2109      	movs	r1, #9
    ac6c:	4603      	mov	r3, r0
    ac6e:	3008      	adds	r0, #8
    ac70:	9307      	str	r3, [sp, #28]
    ac72:	f013 f94a 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    ac76:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    ac78:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    ac7a:	f04f 32ff 	mov.w	r2, #4294967295
	rp->status = 0x00;
    ac7e:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ac80:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
    ac84:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    ac86:	7083      	strb	r3, [r0, #2]
    ac88:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ac8a:	2305      	movs	r3, #5
    ac8c:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
    ac8e:	7101      	strb	r1, [r0, #4]
	return evt;
    ac90:	9c07      	ldr	r4, [sp, #28]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    ac92:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    ac94:	71c2      	strb	r2, [r0, #7]
    ac96:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    ac98:	e645      	b.n	a926 <hci_cmd_handle+0x66>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ac9a:	2103      	movs	r1, #3
    ac9c:	f010 fa27 	bl	1b0ee <bt_hci_cmd_complete_create>
    aca0:	2103      	movs	r1, #3
    aca2:	4603      	mov	r3, r0
    aca4:	3008      	adds	r0, #8
    aca6:	9307      	str	r3, [sp, #28]
    aca8:	f013 f92f 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    acac:	4601      	mov	r1, r0
    acae:	2300      	movs	r3, #0
    acb0:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    acb4:	3001      	adds	r0, #1
    acb6:	f7ff fb15 	bl	a2e4 <ll_tx_pwr_get>
	return evt;
    acba:	9c07      	ldr	r4, [sp, #28]
    acbc:	e633      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    acbe:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    acc0:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    acc2:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    acc4:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    acc6:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    acca:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    accc:	bf48      	it	mi
    acce:	f041 0103 	orrmi.w	r1, r1, #3
    acd2:	7913      	ldrb	r3, [r2, #4]
    acd4:	bf48      	it	mi
    acd6:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    acd8:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    acda:	bf44      	itt	mi
    acdc:	f043 0303 	orrmi.w	r3, r3, #3
    ace0:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    ace2:	ea41 0203 	orr.w	r2, r1, r3
    ace6:	f032 0203 	bics.w	r2, r2, #3
    acea:	f040 823a 	bne.w	b162 <hci_cmd_handle+0x8a2>
	if (!(cmd->tx_phys & 0x07) ||
    acee:	074c      	lsls	r4, r1, #29
    acf0:	f000 8231 	beq.w	b156 <hci_cmd_handle+0x896>
    acf4:	075a      	lsls	r2, r3, #29
    acf6:	f000 822e 	beq.w	b156 <hci_cmd_handle+0x896>
	if (phy_opts & 0x03) {
    acfa:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
    acfe:	bf1c      	itt	ne
    ad00:	f105 35ff 	addne.w	r5, r5, #4294967295
		phy_opts &= 1;
    ad04:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    ad08:	4638      	mov	r0, r7
    ad0a:	f003 fe95 	bl	ea38 <ll_phy_req_send>
    ad0e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ad10:	8830      	ldrh	r0, [r6, #0]
    ad12:	f010 f9fe 	bl	1b112 <bt_hci_cmd_status_create>
    ad16:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    ad18:	e605      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    ad1a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ad1c:	781a      	ldrb	r2, [r3, #0]
    ad1e:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    ad20:	bf4a      	itet	mi
    ad22:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ad24:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    ad26:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ad28:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    ad2a:	bf4a      	itet	mi
    ad2c:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ad2e:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    ad30:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ad32:	f003 fe77 	bl	ea24 <ll_phy_default_set>
	status = ll_adv_params_set(min_interval, cmd->type,
    ad36:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ad38:	8830      	ldrh	r0, [r6, #0]
    ad3a:	2101      	movs	r1, #1
    ad3c:	f010 f9d7 	bl	1b0ee <bt_hci_cmd_complete_create>
    ad40:	2101      	movs	r1, #1
    ad42:	4604      	mov	r4, r0
    ad44:	3008      	adds	r0, #8
    ad46:	f013 f8e0 	bl	1df0a <net_buf_simple_add>
	ccst->status = status;
    ad4a:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    ad4c:	e5eb      	b.n	a926 <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    ad4e:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ad50:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    ad52:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ad54:	f010 f9cb 	bl	1b0ee <bt_hci_cmd_complete_create>
    ad58:	2105      	movs	r1, #5
    ad5a:	4603      	mov	r3, r0
    ad5c:	3008      	adds	r0, #8
    ad5e:	9307      	str	r3, [sp, #28]
    ad60:	f013 f8d3 	bl	1df0a <net_buf_simple_add>
    ad64:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ad66:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    ad68:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ad6a:	1ce9      	adds	r1, r5, #3
    ad6c:	f003 fe3c 	bl	e9e8 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    ad70:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    ad72:	7028      	strb	r0, [r5, #0]
    ad74:	2b00      	cmp	r3, #0
    ad76:	fa93 f2a3 	rbit	r2, r3
    ad7a:	792b      	ldrb	r3, [r5, #4]
    ad7c:	fab2 f282 	clz	r2, r2
    ad80:	bf08      	it	eq
    ad82:	f04f 32ff 	moveq.w	r2, #4294967295
    ad86:	2b00      	cmp	r3, #0
    ad88:	fa93 f3a3 	rbit	r3, r3
    ad8c:	fab3 f383 	clz	r3, r3
    ad90:	f102 0201 	add.w	r2, r2, #1
    ad94:	bf08      	it	eq
    ad96:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    ad9a:	70ea      	strb	r2, [r5, #3]
    ad9c:	3301      	adds	r3, #1
	return evt;
    ad9e:	9c07      	ldr	r4, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    ada0:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    ada2:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    ada6:	e5be      	b.n	a926 <hci_cmd_handle+0x66>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ada8:	2109      	movs	r1, #9
    adaa:	f010 f9a0 	bl	1b0ee <bt_hci_cmd_complete_create>
    adae:	2109      	movs	r1, #9
    adb0:	4603      	mov	r3, r0
    adb2:	3008      	adds	r0, #8
    adb4:	9307      	str	r3, [sp, #28]
    adb6:	f013 f8a8 	bl	1df0a <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    adba:	ab08      	add	r3, sp, #32
    adbc:	4605      	mov	r5, r0
    adbe:	f10d 021a 	add.w	r2, sp, #26
    adc2:	a906      	add	r1, sp, #24
    adc4:	f10d 0016 	add.w	r0, sp, #22
    adc8:	f003 fe02 	bl	e9d0 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    adcc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    add0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    add4:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    add8:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    addc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ade0:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
    ade4:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    ade6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    adea:	702a      	strb	r2, [r5, #0]
	return evt;
    adec:	9c07      	ldr	r4, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    adee:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
    adf2:	e598      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    adf4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    adf6:	8859      	ldrh	r1, [r3, #2]
    adf8:	8818      	ldrh	r0, [r3, #0]
    adfa:	f003 fddf 	bl	e9bc <ll_length_default_set>
    adfe:	e79a      	b.n	ad36 <hci_cmd_handle+0x476>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ae00:	2105      	movs	r1, #5
    ae02:	f010 f974 	bl	1b0ee <bt_hci_cmd_complete_create>
    ae06:	2105      	movs	r1, #5
    ae08:	4603      	mov	r3, r0
    ae0a:	3008      	adds	r0, #8
    ae0c:	9307      	str	r3, [sp, #28]
    ae0e:	f013 f87c 	bl	1df0a <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    ae12:	a908      	add	r1, sp, #32
    ae14:	4605      	mov	r5, r0
    ae16:	f10d 001a 	add.w	r0, sp, #26
    ae1a:	f003 fdc3 	bl	e9a4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    ae1e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ae22:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
    ae26:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    ae28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    ae2c:	702a      	strb	r2, [r5, #0]
	return evt;
    ae2e:	9c07      	ldr	r4, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    ae30:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
    ae34:	e577      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    ae36:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ae38:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    ae3a:	889a      	ldrh	r2, [r3, #4]
    ae3c:	8859      	ldrh	r1, [r3, #2]
    ae3e:	b2a8      	uxth	r0, r5
    ae40:	f003 fd56 	bl	e8f0 <ll_length_req_send>
    ae44:	e67c      	b.n	ab40 <hci_cmd_handle+0x280>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    ae46:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ae48:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    ae4a:	7892      	ldrb	r2, [r2, #2]
    ae4c:	2300      	movs	r3, #0
    ae4e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ae52:	9300      	str	r3, [sp, #0]
    ae54:	2102      	movs	r1, #2
    ae56:	b2a8      	uxth	r0, r5
    ae58:	f003 fc00 	bl	e65c <ll_conn_update>
    ae5c:	e670      	b.n	ab40 <hci_cmd_handle+0x280>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    ae5e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    ae60:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ae62:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    ae64:	8853      	ldrh	r3, [r2, #2]
    ae66:	9102      	str	r1, [sp, #8]
    ae68:	88d1      	ldrh	r1, [r2, #6]
    ae6a:	9101      	str	r1, [sp, #4]
    ae6c:	8891      	ldrh	r1, [r2, #4]
    ae6e:	9100      	str	r1, [sp, #0]
    ae70:	2200      	movs	r2, #0
    ae72:	2102      	movs	r1, #2
    ae74:	b2a8      	uxth	r0, r5
    ae76:	f003 fbf1 	bl	e65c <ll_conn_update>
    ae7a:	e661      	b.n	ab40 <hci_cmd_handle+0x280>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ae7c:	2109      	movs	r1, #9
    ae7e:	f010 f936 	bl	1b0ee <bt_hci_cmd_complete_create>
    ae82:	2109      	movs	r1, #9
    ae84:	4603      	mov	r3, r0
    ae86:	3008      	adds	r0, #8
    ae88:	9307      	str	r3, [sp, #28]
    ae8a:	f013 f83e 	bl	1df0a <net_buf_simple_add>
	dst[0] = val;
    ae8e:	24bf      	movs	r4, #191	; 0xbf
	rp->status = 0x00;
    ae90:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    ae92:	21ff      	movs	r1, #255	; 0xff
	dst[0] = val;
    ae94:	2230      	movs	r2, #48	; 0x30
    ae96:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    ae98:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    ae9a:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    ae9c:	24ec      	movs	r4, #236	; 0xec
    ae9e:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    aea0:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    aea2:	2201      	movs	r2, #1
    aea4:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    aea6:	7141      	strb	r1, [r0, #5]
	return evt;
    aea8:	9c07      	ldr	r4, [sp, #28]
	dst[1] = val >> 8;
    aeaa:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    aeac:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    aeae:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    aeb0:	e539      	b.n	a926 <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    aeb2:	68a3      	ldr	r3, [r4, #8]
    aeb4:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    aeb6:	2200      	movs	r2, #0
    aeb8:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    aeba:	b2a8      	uxth	r0, r5
    aebc:	f007 fb18 	bl	124f0 <ll_start_enc_req_send>
    aec0:	e63e      	b.n	ab40 <hci_cmd_handle+0x280>
	handle = sys_le16_to_cpu(cmd->handle);
    aec2:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    aec4:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    aec6:	f832 5b02 	ldrh.w	r5, [r2], #2
    aeca:	e7f6      	b.n	aeba <hci_cmd_handle+0x5fa>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    aecc:	2109      	movs	r1, #9
    aece:	f010 f90e 	bl	1b0ee <bt_hci_cmd_complete_create>
    aed2:	2109      	movs	r1, #9
    aed4:	4603      	mov	r3, r0
    aed6:	3008      	adds	r0, #8
    aed8:	9307      	str	r3, [sp, #28]
    aeda:	f013 f816 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    aede:	2300      	movs	r3, #0
    aee0:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    aee4:	2108      	movs	r1, #8
    aee6:	f007 fea1 	bl	12c2c <lll_csrand_get>
	return evt;
    aeea:	9c07      	ldr	r4, [sp, #28]
    aeec:	e51b      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    aeee:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    aef0:	aa08      	add	r2, sp, #32
    aef2:	2300      	movs	r3, #0
    aef4:	f100 0110 	add.w	r1, r0, #16
    aef8:	f009 ffe8 	bl	14ecc <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    aefc:	2111      	movs	r1, #17
    aefe:	8830      	ldrh	r0, [r6, #0]
    af00:	f010 f8f5 	bl	1b0ee <bt_hci_cmd_complete_create>
    af04:	2111      	movs	r1, #17
    af06:	4603      	mov	r3, r0
    af08:	3008      	adds	r0, #8
    af0a:	9307      	str	r3, [sp, #28]
    af0c:	f012 fffd 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    af10:	2300      	movs	r3, #0
    af12:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    af16:	2210      	movs	r2, #16
    af18:	a908      	add	r1, sp, #32
    af1a:	f00f fc9a 	bl	1a852 <memcpy>
	return evt;
    af1e:	9c07      	ldr	r4, [sp, #28]
    af20:	e501      	b.n	a926 <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    af22:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    af24:	8818      	ldrh	r0, [r3, #0]
    af26:	f003 fc97 	bl	e858 <ll_feature_req_send>
    af2a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    af2c:	8830      	ldrh	r0, [r6, #0]
    af2e:	f010 f8f0 	bl	1b112 <bt_hci_cmd_status_create>
    af32:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    af34:	e4f7      	b.n	a926 <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    af36:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    af38:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    af3a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    af3c:	f010 f8d7 	bl	1b0ee <bt_hci_cmd_complete_create>
    af40:	2108      	movs	r1, #8
    af42:	4603      	mov	r3, r0
    af44:	4408      	add	r0, r1
    af46:	9307      	str	r3, [sp, #28]
    af48:	f012 ffdf 	bl	1df0a <net_buf_simple_add>
    af4c:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    af4e:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    af50:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    af52:	f003 fc17 	bl	e784 <ll_chm_get>
	rp->status = status;
    af56:	7028      	strb	r0, [r5, #0]
	return evt;
    af58:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
    af5a:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    af5e:	e4e2      	b.n	a926 <hci_cmd_handle+0x66>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    af60:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    af62:	890a      	ldrh	r2, [r1, #8]
    af64:	884b      	ldrh	r3, [r1, #2]
    af66:	8808      	ldrh	r0, [r1, #0]
    af68:	9202      	str	r2, [sp, #8]
    af6a:	88ca      	ldrh	r2, [r1, #6]
    af6c:	9201      	str	r2, [sp, #4]
    af6e:	8889      	ldrh	r1, [r1, #4]
    af70:	9100      	str	r1, [sp, #0]
    af72:	2200      	movs	r2, #0
    af74:	4611      	mov	r1, r2
    af76:	f003 fb71 	bl	e65c <ll_conn_update>
    af7a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    af7c:	8830      	ldrh	r0, [r6, #0]
    af7e:	f010 f8c8 	bl	1b112 <bt_hci_cmd_status_create>
    af82:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    af84:	e4cf      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    af86:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    af88:	7818      	ldrb	r0, [r3, #0]
    af8a:	2800      	cmp	r0, #0
    af8c:	f000 80db 	beq.w	b146 <hci_cmd_handle+0x886>
    af90:	785b      	ldrb	r3, [r3, #1]
    af92:	2b00      	cmp	r3, #0
    af94:	f000 80d7 	beq.w	b146 <hci_cmd_handle+0x886>
			dup_count = 0;
    af98:	4975      	ldr	r1, [pc, #468]	; (b170 <hci_cmd_handle+0x8b0>)
			dup_curr = 0U;
    af9a:	4a76      	ldr	r2, [pc, #472]	; (b174 <hci_cmd_handle+0x8b4>)
			dup_count = 0;
    af9c:	2300      	movs	r3, #0
    af9e:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
    afa0:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    afa2:	f002 fc5f 	bl	d864 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    afa6:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
    afa8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    afaa:	f04f 0101 	mov.w	r1, #1
    afae:	8830      	ldrh	r0, [r6, #0]
		status = BT_HCI_ERR_SUCCESS;
    afb0:	bf08      	it	eq
    afb2:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    afb4:	e6c2      	b.n	ad3c <hci_cmd_handle+0x47c>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    afb6:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    afb8:	7963      	ldrb	r3, [r4, #5]
    afba:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    afbe:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    afc2:	7820      	ldrb	r0, [r4, #0]
    afc4:	79a4      	ldrb	r4, [r4, #6]
    afc6:	9400      	str	r4, [sp, #0]
    afc8:	f7f5 fece 	bl	d68 <ll_scan_params_set>
    afcc:	e6b3      	b.n	ad36 <hci_cmd_handle+0x476>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    afce:	2104      	movs	r1, #4
    afd0:	f010 f88d 	bl	1b0ee <bt_hci_cmd_complete_create>
    afd4:	2104      	movs	r1, #4
    afd6:	4603      	mov	r3, r0
    afd8:	3008      	adds	r0, #8
    afda:	9307      	str	r3, [sp, #28]
    afdc:	f012 ff95 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    afe0:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    afe2:	2103      	movs	r1, #3
	rp->status = 0x00;
    afe4:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    afe6:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    afe8:	70c1      	strb	r1, [r0, #3]
	return evt;
    afea:	9c07      	ldr	r4, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    afec:	7042      	strb	r2, [r0, #1]
    afee:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    aff0:	e499      	b.n	a926 <hci_cmd_handle+0x66>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    aff2:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    aff4:	4b60      	ldr	r3, [pc, #384]	; (b178 <hci_cmd_handle+0x8b8>)
    aff6:	6811      	ldr	r1, [r2, #0]
    aff8:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    affa:	6019      	str	r1, [r3, #0]
    affc:	e588      	b.n	ab10 <hci_cmd_handle+0x250>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    affe:	2102      	movs	r1, #2
    b000:	f010 f875 	bl	1b0ee <bt_hci_cmd_complete_create>
    b004:	2102      	movs	r1, #2
    b006:	4603      	mov	r3, r0
    b008:	3008      	adds	r0, #8
    b00a:	9307      	str	r3, [sp, #28]
    b00c:	f012 ff7d 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    b010:	2300      	movs	r3, #0
    b012:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    b014:	7043      	strb	r3, [r0, #1]
	return evt;
    b016:	9c07      	ldr	r4, [sp, #28]
    b018:	e485      	b.n	a926 <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    b01a:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    b01c:	7ba5      	ldrb	r5, [r4, #14]
    b01e:	79a3      	ldrb	r3, [r4, #6]
    b020:	7962      	ldrb	r2, [r4, #5]
    b022:	7921      	ldrb	r1, [r4, #4]
    b024:	8820      	ldrh	r0, [r4, #0]
    b026:	9502      	str	r5, [sp, #8]
    b028:	7b65      	ldrb	r5, [r4, #13]
    b02a:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    b02c:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    b02e:	9400      	str	r4, [sp, #0]
    b030:	f002 f9b0 	bl	d394 <ll_adv_params_set>
    b034:	e67f      	b.n	ad36 <hci_cmd_handle+0x476>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    b036:	68a1      	ldr	r1, [r4, #8]
    b038:	2001      	movs	r0, #1
    b03a:	f7ff f8f3 	bl	a224 <ll_addr_set>
    b03e:	e67a      	b.n	ad36 <hci_cmd_handle+0x476>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b040:	2109      	movs	r1, #9
    b042:	f010 f854 	bl	1b0ee <bt_hci_cmd_complete_create>
    b046:	2109      	movs	r1, #9
    b048:	4603      	mov	r3, r0
    b04a:	3008      	adds	r0, #8
    b04c:	9307      	str	r3, [sp, #28]
    b04e:	f012 ff5c 	bl	1df0a <net_buf_simple_add>
	rp->status = 0x00;
    b052:	2100      	movs	r1, #0
    b054:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b056:	2208      	movs	r2, #8
	rp->status = 0x00;
    b058:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b05c:	f00f fc04 	bl	1a868 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    b060:	f000 fd0c 	bl	ba7c <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    b064:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    b066:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    b06a:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    b06c:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    b06e:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    b070:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
    b072:	70ac      	strb	r4, [r5, #2]
    b074:	f3c1 2007 	ubfx	r0, r1, #8, #8
    b078:	712b      	strb	r3, [r5, #4]
    b07a:	0a13      	lsrs	r3, r2, #8
	return evt;
    b07c:	9c07      	ldr	r4, [sp, #28]
	dst[0] = val;
    b07e:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
    b080:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
    b082:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
    b084:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
    b086:	e44e      	b.n	a926 <hci_cmd_handle+0x66>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    b088:	68a1      	ldr	r1, [r4, #8]
    b08a:	f811 0b01 	ldrb.w	r0, [r1], #1
    b08e:	f002 fb6f 	bl	d770 <ll_adv_scan_rsp_set>
    b092:	e650      	b.n	ad36 <hci_cmd_handle+0x476>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    b094:	68a1      	ldr	r1, [r4, #8]
    b096:	f811 0b01 	ldrb.w	r0, [r1], #1
    b09a:	f002 fb1f 	bl	d6dc <ll_adv_data_set>
    b09e:	e64a      	b.n	ad36 <hci_cmd_handle+0x476>
	status = ll_adv_enable(cmd->enable);
    b0a0:	68a3      	ldr	r3, [r4, #8]
    b0a2:	7818      	ldrb	r0, [r3, #0]
    b0a4:	f7f5 fbec 	bl	880 <ll_adv_enable>
    b0a8:	e645      	b.n	ad36 <hci_cmd_handle+0x476>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    b0aa:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    b0ac:	7899      	ldrb	r1, [r3, #2]
    b0ae:	8818      	ldrh	r0, [r3, #0]
    b0b0:	f003 fb88 	bl	e7c4 <ll_terminate_ind_send>
    b0b4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b0b6:	8830      	ldrh	r0, [r6, #0]
    b0b8:	f010 f82b 	bl	1b112 <bt_hci_cmd_status_create>
    b0bc:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    b0be:	e432      	b.n	a926 <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
    b0c0:	68a3      	ldr	r3, [r4, #8]
    b0c2:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    b0c4:	a908      	add	r1, sp, #32
    b0c6:	b2a8      	uxth	r0, r5
    b0c8:	f003 fd08 	bl	eadc <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b0cc:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    b0ce:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b0d0:	8830      	ldrh	r0, [r6, #0]
    b0d2:	f010 f80c 	bl	1b0ee <bt_hci_cmd_complete_create>
    b0d6:	2105      	movs	r1, #5
    b0d8:	4603      	mov	r3, r0
    b0da:	3008      	adds	r0, #8
    b0dc:	9307      	str	r3, [sp, #28]
    b0de:	f012 ff14 	bl	1df0a <net_buf_simple_add>
	rp->status = status;
    b0e2:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    b0e4:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    b0e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
    b0ec:	9c07      	ldr	r4, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    b0ee:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
    b0f2:	e418      	b.n	a926 <hci_cmd_handle+0x66>
	dup_count = DUP_FILTER_DISABLED;
    b0f4:	481e      	ldr	r0, [pc, #120]	; (b170 <hci_cmd_handle+0x8b0>)
	event_mask = DEFAULT_EVENT_MASK;
    b0f6:	4921      	ldr	r1, [pc, #132]	; (b17c <hci_cmd_handle+0x8bc>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b0f8:	4a21      	ldr	r2, [pc, #132]	; (b180 <hci_cmd_handle+0x8c0>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b0fa:	4b1f      	ldr	r3, [pc, #124]	; (b178 <hci_cmd_handle+0x8b8>)
	dup_count = DUP_FILTER_DISABLED;
    b0fc:	f04f 34ff 	mov.w	r4, #4294967295
    b100:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
    b102:	f641 75ff 	movw	r5, #8191	; 0x1fff
    b106:	f04f 34ff 	mov.w	r4, #4294967295
    b10a:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b10e:	2000      	movs	r0, #0
    b110:	2100      	movs	r1, #0
    b112:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b116:	201f      	movs	r0, #31
    b118:	2100      	movs	r1, #0
    b11a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    b11e:	f001 fd71 	bl	cc04 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    b122:	2101      	movs	r1, #1
    b124:	8830      	ldrh	r0, [r6, #0]
    b126:	f00f ffe2 	bl	1b0ee <bt_hci_cmd_complete_create>
    b12a:	2101      	movs	r1, #1
    b12c:	4604      	mov	r4, r0
    b12e:	3008      	adds	r0, #8
    b130:	f012 feeb 	bl	1df0a <net_buf_simple_add>
	conn_count = 0U;
    b134:	4a13      	ldr	r2, [pc, #76]	; (b184 <hci_cmd_handle+0x8c4>)
	ccst->status = status;
    b136:	2300      	movs	r3, #0
    b138:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    b13a:	6013      	str	r3, [r2, #0]
	if (err == -EINVAL) {
    b13c:	f7ff bbf3 	b.w	a926 <hci_cmd_handle+0x66>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    b140:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    b142:	4b0f      	ldr	r3, [pc, #60]	; (b180 <hci_cmd_handle+0x8c0>)
    b144:	e757      	b.n	aff6 <hci_cmd_handle+0x736>
		dup_count = DUP_FILTER_DISABLED;
    b146:	4b0a      	ldr	r3, [pc, #40]	; (b170 <hci_cmd_handle+0x8b0>)
    b148:	f04f 32ff 	mov.w	r2, #4294967295
    b14c:	601a      	str	r2, [r3, #0]
    b14e:	e728      	b.n	afa2 <hci_cmd_handle+0x6e2>
	return evt;
    b150:	9c07      	ldr	r4, [sp, #28]
    b152:	f7ff bbe8 	b.w	a926 <hci_cmd_handle+0x66>
	return bt_hci_cmd_status_create(_opcode, status);
    b156:	2112      	movs	r1, #18
    b158:	f00f ffdb 	bl	1b112 <bt_hci_cmd_status_create>
    b15c:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    b15e:	f7ff bbe2 	b.w	a926 <hci_cmd_handle+0x66>
	return bt_hci_cmd_status_create(_opcode, status);
    b162:	2111      	movs	r1, #17
    b164:	f00f ffd5 	bl	1b112 <bt_hci_cmd_status_create>
    b168:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    b16a:	f7ff bbdc 	b.w	a926 <hci_cmd_handle+0x66>
    b16e:	bf00      	nop
    b170:	200019f4 	.word	0x200019f4
    b174:	200019f8 	.word	0x200019f8
    b178:	20000160 	.word	0x20000160
    b17c:	20000158 	.word	0x20000158
    b180:	200012a8 	.word	0x200012a8
    b184:	200019f0 	.word	0x200019f0

0000b188 <hci_acl_handle>:
{
    b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    b18c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    b18e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    b190:	2b03      	cmp	r3, #3
	*evt = NULL;
    b192:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    b194:	d918      	bls.n	b1c8 <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
    b196:	4605      	mov	r5, r0
    b198:	4688      	mov	r8, r1
    b19a:	3008      	adds	r0, #8
    b19c:	2104      	movs	r1, #4
    b19e:	f012 fef1 	bl	1df84 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    b1a2:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    b1a4:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    b1a6:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    b1aa:	42b3      	cmp	r3, r6
    b1ac:	d30c      	bcc.n	b1c8 <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    b1ae:	2e1b      	cmp	r6, #27
    b1b0:	d80a      	bhi.n	b1c8 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    b1b2:	f003 f9fb 	bl	e5ac <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    b1b6:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    b1ba:	4604      	mov	r4, r0
    b1bc:	b318      	cbz	r0, b206 <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    b1be:	08bb      	lsrs	r3, r7, #2
    b1c0:	d102      	bne.n	b1c8 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    b1c2:	b1d7      	cbz	r7, b1fa <hci_acl_handle+0x72>
    b1c4:	2f01      	cmp	r7, #1
    b1c6:	d003      	beq.n	b1d0 <hci_acl_handle+0x48>
		return -EINVAL;
    b1c8:	f06f 0015 	mvn.w	r0, #21
}
    b1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b1d0:	7903      	ldrb	r3, [r0, #4]
    b1d2:	f367 0301 	bfi	r3, r7, #0, #2
    b1d6:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    b1d8:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    b1da:	68a9      	ldr	r1, [r5, #8]
    b1dc:	4632      	mov	r2, r6
    b1de:	1de0      	adds	r0, r4, #7
    b1e0:	f00f fb37 	bl	1a852 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    b1e4:	4621      	mov	r1, r4
    b1e6:	f3c9 000b 	ubfx	r0, r9, #0, #12
    b1ea:	f003 f9eb 	bl	e5c4 <ll_tx_mem_enqueue>
    b1ee:	2800      	cmp	r0, #0
    b1f0:	d0ec      	beq.n	b1cc <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    b1f2:	4620      	mov	r0, r4
    b1f4:	f003 f9e0 	bl	e5b8 <ll_tx_mem_release>
    b1f8:	e7e6      	b.n	b1c8 <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    b1fa:	7903      	ldrb	r3, [r0, #4]
    b1fc:	2202      	movs	r2, #2
    b1fe:	f362 0301 	bfi	r3, r2, #0, #2
    b202:	7103      	strb	r3, [r0, #4]
		break;
    b204:	e7e8      	b.n	b1d8 <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    b206:	4b11      	ldr	r3, [pc, #68]	; (b24c <hci_acl_handle+0xc4>)
    b208:	681b      	ldr	r3, [r3, #0]
    b20a:	019b      	lsls	r3, r3, #6
    b20c:	d402      	bmi.n	b214 <hci_acl_handle+0x8c>
		return -ENOBUFS;
    b20e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b212:	e7db      	b.n	b1cc <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b214:	f04f 33ff 	mov.w	r3, #4294967295
    b218:	f04f 32ff 	mov.w	r2, #4294967295
    b21c:	2001      	movs	r0, #1
    b21e:	f7f8 fa55 	bl	36cc <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    b222:	2102      	movs	r1, #2
    b224:	f8c8 0000 	str.w	r0, [r8]
    b228:	3008      	adds	r0, #8
    b22a:	f012 fe6e 	bl	1df0a <net_buf_simple_add>
	hdr->len = len;
    b22e:	2401      	movs	r4, #1
	hdr->evt = evt;
    b230:	221a      	movs	r2, #26
    b232:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    b234:	7044      	strb	r4, [r0, #1]
    b236:	f8d8 0000 	ldr.w	r0, [r8]
    b23a:	4621      	mov	r1, r4
    b23c:	3008      	adds	r0, #8
    b23e:	f012 fe64 	bl	1df0a <net_buf_simple_add>
    b242:	4603      	mov	r3, r0
		return -ENOBUFS;
    b244:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = link_type;
    b248:	701c      	strb	r4, [r3, #0]
    b24a:	e7bf      	b.n	b1cc <hci_acl_handle+0x44>
    b24c:	20000158 	.word	0x20000158

0000b250 <hci_disconn_complete_encode>:
{
    b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b252:	4b0e      	ldr	r3, [pc, #56]	; (b28c <hci_disconn_complete_encode+0x3c>)
    b254:	681b      	ldr	r3, [r3, #0]
    b256:	06db      	lsls	r3, r3, #27
    b258:	d400      	bmi.n	b25c <hci_disconn_complete_encode+0xc>
}
    b25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b25c:	f102 0408 	add.w	r4, r2, #8
    b260:	4605      	mov	r5, r0
    b262:	460e      	mov	r6, r1
    b264:	4620      	mov	r0, r4
    b266:	2102      	movs	r1, #2
    b268:	f012 fe4f 	bl	1df0a <net_buf_simple_add>
    b26c:	4603      	mov	r3, r0
	hdr->len = len;
    b26e:	2104      	movs	r1, #4
	hdr->evt = evt;
    b270:	2205      	movs	r2, #5
	hdr->len = len;
    b272:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    b274:	701a      	strb	r2, [r3, #0]
    b276:	4620      	mov	r0, r4
    b278:	f012 fe47 	bl	1df0a <net_buf_simple_add>
    b27c:	2700      	movs	r7, #0
	ep->status = 0x00;
    b27e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b280:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    b284:	782b      	ldrb	r3, [r5, #0]
    b286:	70c3      	strb	r3, [r0, #3]
}
    b288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b28a:	bf00      	nop
    b28c:	20000158 	.word	0x20000158

0000b290 <hci_disconn_complete_process>:
	conn_count--;
    b290:	4a02      	ldr	r2, [pc, #8]	; (b29c <hci_disconn_complete_process+0xc>)
    b292:	6813      	ldr	r3, [r2, #0]
    b294:	3b01      	subs	r3, #1
    b296:	6013      	str	r3, [r2, #0]
}
    b298:	4770      	bx	lr
    b29a:	bf00      	nop
    b29c:	200019f0 	.word	0x200019f0

0000b2a0 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    b2a0:	7f03      	ldrb	r3, [r0, #28]
    b2a2:	f003 0303 	and.w	r3, r3, #3
    b2a6:	3b01      	subs	r3, #1
    b2a8:	2b01      	cmp	r3, #1
{
    b2aa:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    b2ac:	d90d      	bls.n	b2ca <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    b2ae:	4a16      	ldr	r2, [pc, #88]	; (b308 <hci_acl_encode+0x68>)
    b2b0:	4916      	ldr	r1, [pc, #88]	; (b30c <hci_acl_encode+0x6c>)
    b2b2:	4817      	ldr	r0, [pc, #92]	; (b310 <hci_acl_encode+0x70>)
    b2b4:	f641 73bf 	movw	r3, #8127	; 0x1fbf
    b2b8:	f00e f96b 	bl	19592 <assert_print>
    b2bc:	4040      	eors	r0, r0
    b2be:	f380 8811 	msr	BASEPRI, r0
    b2c2:	f04f 0003 	mov.w	r0, #3
    b2c6:	df02      	svc	2
		break;
	}
}
    b2c8:	bd70      	pop	{r4, r5, r6, pc}
    b2ca:	4604      	mov	r4, r0
    b2cc:	f101 0508 	add.w	r5, r1, #8
    b2d0:	4628      	mov	r0, r5
    b2d2:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    b2d4:	88e6      	ldrh	r6, [r4, #6]
    b2d6:	f012 fe18 	bl	1df0a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    b2da:	7f23      	ldrb	r3, [r4, #28]
    b2dc:	f003 0303 	and.w	r3, r3, #3
    b2e0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    b2e2:	bf0c      	ite	eq
    b2e4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    b2e8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    b2ec:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    b2ee:	7f61      	ldrb	r1, [r4, #29]
    b2f0:	8041      	strh	r1, [r0, #2]
    b2f2:	4628      	mov	r0, r5
    b2f4:	f012 fe09 	bl	1df0a <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    b2f8:	7f62      	ldrb	r2, [r4, #29]
    b2fa:	f104 011f 	add.w	r1, r4, #31
}
    b2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    b302:	f00f baa6 	b.w	1a852 <memcpy>
    b306:	bf00      	nop
    b308:	0001fca4 	.word	0x0001fca4
    b30c:	0001fc54 	.word	0x0001fc54
    b310:	0001fbf4 	.word	0x0001fbf4

0000b314 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b318:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
    b31c:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b31e:	f1bc 0f03 	cmp.w	ip, #3
{
    b322:	b087      	sub	sp, #28
    b324:	4604      	mov	r4, r0
    b326:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    b328:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b32c:	d01f      	beq.n	b36e <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
    b32e:	f1ac 0c05 	sub.w	ip, ip, #5
    b332:	f1bc 0f18 	cmp.w	ip, #24
    b336:	d834      	bhi.n	b3a2 <hci_evt_encode+0x8e>
    b338:	e8df f01c 	tbh	[pc, ip, lsl #1]
    b33c:	00330043 	.word	0x00330043
    b340:	00330033 	.word	0x00330033
    b344:	00330033 	.word	0x00330033
    b348:	00330033 	.word	0x00330033
    b34c:	00330033 	.word	0x00330033
    b350:	00330033 	.word	0x00330033
    b354:	00330033 	.word	0x00330033
    b358:	00330033 	.word	0x00330033
    b35c:	00330033 	.word	0x00330033
    b360:	00db00b2 	.word	0x00db00b2
    b364:	011300e3 	.word	0x011300e3
    b368:	013d012a 	.word	0x013d012a
    b36c:	015e      	.short	0x015e
	switch (pdu_data->llctrl.opcode) {
    b36e:	7fc3      	ldrb	r3, [r0, #31]
    b370:	3b03      	subs	r3, #3
    b372:	2b12      	cmp	r3, #18
    b374:	f200 8178 	bhi.w	b668 <hci_evt_encode+0x354>
    b378:	e8df f013 	tbh	[pc, r3, lsl #1]
    b37c:	01760227 	.word	0x01760227
    b380:	01bb0176 	.word	0x01bb0176
    b384:	017601d4 	.word	0x017601d4
    b388:	017601e2 	.word	0x017601e2
    b38c:	01760176 	.word	0x01760176
    b390:	017601e7 	.word	0x017601e7
    b394:	01760202 	.word	0x01760202
    b398:	01760020 	.word	0x01760020
    b39c:	01940176 	.word	0x01940176
    b3a0:	0194      	.short	0x0194
		LL_ASSERT(0);
    b3a2:	4ab8      	ldr	r2, [pc, #736]	; (b684 <hci_evt_encode+0x370>)
    b3a4:	49b8      	ldr	r1, [pc, #736]	; (b688 <hci_evt_encode+0x374>)
    b3a6:	48b9      	ldr	r0, [pc, #740]	; (b68c <hci_evt_encode+0x378>)
    b3a8:	f641 63af 	movw	r3, #7855	; 0x1eaf
    b3ac:	f00e f8f1 	bl	19592 <assert_print>
    b3b0:	4040      	eors	r0, r0
    b3b2:	f380 8811 	msr	BASEPRI, r0
    b3b6:	f04f 0003 	mov.w	r0, #3
    b3ba:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    b3bc:	b007      	add	sp, #28
    b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b3c2:	4bb3      	ldr	r3, [pc, #716]	; (b690 <hci_evt_encode+0x37c>)
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3c4:	4ab3      	ldr	r2, [pc, #716]	; (b694 <hci_evt_encode+0x380>)
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b3c6:	e893 0003 	ldmia.w	r3, {r0, r1}
    b3ca:	0c0b      	lsrs	r3, r1, #16
    b3cc:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    b3d0:	7e23      	ldrb	r3, [r4, #24]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3d2:	6852      	ldr	r2, [r2, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b3d4:	f8ad 1014 	strh.w	r1, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    b3d8:	425b      	negs	r3, r3
    b3da:	b25e      	sxtb	r6, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
    b3dc:	7e63      	ldrb	r3, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b3de:	9004      	str	r0, [sp, #16]
	if (direct_report) {
    b3e0:	07d9      	lsls	r1, r3, #31
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3e2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
	if (direct_report) {
    b3e6:	f100 826b 	bmi.w	b8c0 <hci_evt_encode+0x5ac>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3ea:	2a00      	cmp	r2, #0
    b3ec:	d0e6      	beq.n	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    b3ee:	4baa      	ldr	r3, [pc, #680]	; (b698 <hci_evt_encode+0x384>)
    b3f0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3f2:	079b      	lsls	r3, r3, #30
    b3f4:	d5e2      	bpl.n	b3bc <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
    b3f6:	4ba9      	ldr	r3, [pc, #676]	; (b69c <hci_evt_encode+0x388>)
    b3f8:	681b      	ldr	r3, [r3, #0]
    b3fa:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    b3fc:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
    b400:	db09      	blt.n	b416 <hci_evt_encode+0x102>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    b402:	7f20      	ldrb	r0, [r4, #28]
    b404:	465a      	mov	r2, fp
    b406:	f3c0 1180 	ubfx	r1, r0, #6, #1
    b40a:	f000 000f 	and.w	r0, r0, #15
    b40e:	f7ff f8ff 	bl	a610 <dup_found.part.0>
	if (dup_scan &&
    b412:	2800      	cmp	r0, #0
    b414:	d1d2      	bne.n	b3bc <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    b416:	7f23      	ldrb	r3, [r4, #28]
    b418:	f003 030f 	and.w	r3, r3, #15
    b41c:	2b01      	cmp	r3, #1
    b41e:	f000 82b6 	beq.w	b98e <hci_evt_encode+0x67a>
		data_len = (adv->len - BDADDR_SIZE);
    b422:	7f63      	ldrb	r3, [r4, #29]
    b424:	1f9f      	subs	r7, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b426:	f103 0a06 	add.w	sl, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
    b42a:	b2ff      	uxtb	r7, r7
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    b42c:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b42e:	fa5f fa8a 	uxtb.w	sl, sl
	return net_buf_add(buf, melen);
    b432:	fa5f f983 	uxtb.w	r9, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    b436:	46b8      	mov	r8, r7
    b438:	3508      	adds	r5, #8
    b43a:	2102      	movs	r1, #2
    b43c:	4628      	mov	r0, r5
    b43e:	f012 fd64 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b442:	233e      	movs	r3, #62	; 0x3e
    b444:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b446:	f880 a001 	strb.w	sl, [r0, #1]
    b44a:	2101      	movs	r1, #1
    b44c:	4628      	mov	r0, r5
    b44e:	f012 fd5c 	bl	1df0a <net_buf_simple_add>
    b452:	4603      	mov	r3, r0
	me->subevent = subevt;
    b454:	2202      	movs	r2, #2
    b456:	4649      	mov	r1, r9
    b458:	701a      	strb	r2, [r3, #0]
    b45a:	4628      	mov	r0, r5
    b45c:	f012 fd55 	bl	1df0a <net_buf_simple_add>
	sep->num_reports = 1U;
    b460:	2301      	movs	r3, #1
    b462:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    b464:	7f23      	ldrb	r3, [r4, #28]
    b466:	aa06      	add	r2, sp, #24
    b468:	f003 030f 	and.w	r3, r3, #15
    b46c:	4413      	add	r3, r2
    b46e:	4605      	mov	r5, r0
    b470:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    b474:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    b476:	7f23      	ldrb	r3, [r4, #28]
    b478:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b47c:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    b47e:	f100 090a 	add.w	r9, r0, #10
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    b482:	4659      	mov	r1, fp
    b484:	2206      	movs	r2, #6
    b486:	3003      	adds	r0, #3
    b488:	f00f f9e3 	bl	1a852 <memcpy>
	adv_info->length = data_len;
    b48c:	726f      	strb	r7, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    b48e:	4642      	mov	r2, r8
    b490:	f104 0124 	add.w	r1, r4, #36	; 0x24
    b494:	4648      	mov	r0, r9
    b496:	f00f f9dc 	bl	1a852 <memcpy>
	*prssi = rssi;
    b49a:	f809 6008 	strb.w	r6, [r9, r8]
    b49e:	e78d      	b.n	b3bc <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    b4a0:	07ff      	lsls	r7, r7, #31
    b4a2:	f100 81c1 	bmi.w	b828 <hci_evt_encode+0x514>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b4a6:	4b7b      	ldr	r3, [pc, #492]	; (b694 <hci_evt_encode+0x380>)
    b4a8:	685b      	ldr	r3, [r3, #4]
    b4aa:	0098      	lsls	r0, r3, #2
    b4ac:	d586      	bpl.n	b3bc <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b4ae:	4b7a      	ldr	r3, [pc, #488]	; (b698 <hci_evt_encode+0x384>)
    b4b0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b4b2:	07d9      	lsls	r1, r3, #31
    b4b4:	d582      	bpl.n	b3bc <hci_evt_encode+0xa8>
	status = cc->status;
    b4b6:	7f27      	ldrb	r7, [r4, #28]
    b4b8:	3508      	adds	r5, #8
	if (!status) {
    b4ba:	2f00      	cmp	r7, #0
    b4bc:	f000 81cc 	beq.w	b858 <hci_evt_encode+0x544>
    b4c0:	2102      	movs	r1, #2
    b4c2:	4628      	mov	r0, r5
    b4c4:	f012 fd21 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b4c8:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    b4ca:	2313      	movs	r3, #19
	hdr->evt = evt;
    b4cc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    b4ce:	7043      	strb	r3, [r0, #1]
    b4d0:	2101      	movs	r1, #1
    b4d2:	4628      	mov	r0, r5
    b4d4:	f012 fd19 	bl	1df0a <net_buf_simple_add>
	me->subevent = subevt;
    b4d8:	2301      	movs	r3, #1
    b4da:	7003      	strb	r3, [r0, #0]
    b4dc:	2112      	movs	r1, #18
    b4de:	4628      	mov	r0, r5
    b4e0:	f012 fd13 	bl	1df0a <net_buf_simple_add>
    b4e4:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b4e6:	2212      	movs	r2, #18
    b4e8:	2100      	movs	r1, #0
    b4ea:	f00f f9bd 	bl	1a868 <memset>
		lecc->status = status;
    b4ee:	7027      	strb	r7, [r4, #0]
		return;
    b4f0:	e764      	b.n	b3bc <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    b4f2:	460a      	mov	r2, r1
    b4f4:	4638      	mov	r0, r7
    b4f6:	4631      	mov	r1, r6
}
    b4f8:	b007      	add	sp, #28
    b4fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    b4fe:	f7ff bea7 	b.w	b250 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b502:	4b64      	ldr	r3, [pc, #400]	; (b694 <hci_evt_encode+0x380>)
    b504:	685b      	ldr	r3, [r3, #4]
    b506:	009a      	lsls	r2, r3, #2
    b508:	f57f af58 	bpl.w	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    b50c:	4b62      	ldr	r3, [pc, #392]	; (b698 <hci_evt_encode+0x384>)
    b50e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b510:	075b      	lsls	r3, r3, #29
    b512:	f57f af53 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b516:	3508      	adds	r5, #8
    b518:	2102      	movs	r1, #2
    b51a:	4628      	mov	r0, r5
    b51c:	f012 fcf5 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b520:	233e      	movs	r3, #62	; 0x3e
    b522:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b524:	230a      	movs	r3, #10
    b526:	7043      	strb	r3, [r0, #1]
    b528:	2101      	movs	r1, #1
    b52a:	4628      	mov	r0, r5
    b52c:	f012 fced 	bl	1df0a <net_buf_simple_add>
    b530:	4603      	mov	r3, r0
	me->subevent = subevt;
    b532:	2203      	movs	r2, #3
    b534:	4628      	mov	r0, r5
    b536:	701a      	strb	r2, [r3, #0]
    b538:	2109      	movs	r1, #9
    b53a:	f012 fce6 	bl	1df0a <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    b53e:	07ff      	lsls	r7, r7, #31
    b540:	4605      	mov	r5, r0
    b542:	f100 8216 	bmi.w	b972 <hci_evt_encode+0x65e>
	sep->status = cu->status;
    b546:	7f23      	ldrb	r3, [r4, #28]
    b548:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b54a:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b54c:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b54e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b550:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
    b554:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b558:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b55c:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b560:	e72c      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    b562:	4b4c      	ldr	r3, [pc, #304]	; (b694 <hci_evt_encode+0x380>)
    b564:	685b      	ldr	r3, [r3, #4]
    b566:	0418      	lsls	r0, r3, #16
    b568:	f04f 0400 	mov.w	r4, #0
    b56c:	f57f af26 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b570:	3508      	adds	r5, #8
    b572:	2102      	movs	r1, #2
    b574:	4628      	mov	r0, r5
    b576:	f012 fcc8 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b57a:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    b57c:	2103      	movs	r1, #3
	hdr->evt = evt;
    b57e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b580:	7041      	strb	r1, [r0, #1]
    b582:	4628      	mov	r0, r5
    b584:	f012 fcc1 	bl	1df0a <net_buf_simple_add>
	ep->status = 0x00;
    b588:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b58a:	f8a0 6001 	strh.w	r6, [r0, #1]
    b58e:	e715      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    b590:	4b43      	ldr	r3, [pc, #268]	; (b6a0 <hci_evt_encode+0x38c>)
    b592:	681b      	ldr	r3, [r3, #0]
    b594:	0219      	lsls	r1, r3, #8
    b596:	f57f af11 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b59a:	3508      	adds	r5, #8
    b59c:	2102      	movs	r1, #2
    b59e:	4628      	mov	r0, r5
    b5a0:	f012 fcb3 	bl	1df0a <net_buf_simple_add>
	hdr->len = len;
    b5a4:	2102      	movs	r1, #2
	hdr->evt = evt;
    b5a6:	2357      	movs	r3, #87	; 0x57
    b5a8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b5aa:	7041      	strb	r1, [r0, #1]
    b5ac:	4628      	mov	r0, r5
    b5ae:	f012 fcac 	bl	1df0a <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    b5b2:	8006      	strh	r6, [r0, #0]
    b5b4:	e702      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b5b6:	4b37      	ldr	r3, [pc, #220]	; (b694 <hci_evt_encode+0x380>)
    b5b8:	685b      	ldr	r3, [r3, #4]
    b5ba:	009a      	lsls	r2, r3, #2
    b5bc:	f57f aefe 	bpl.w	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    b5c0:	4b35      	ldr	r3, [pc, #212]	; (b698 <hci_evt_encode+0x384>)
    b5c2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b5c4:	031b      	lsls	r3, r3, #12
    b5c6:	f57f aef9 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b5ca:	3508      	adds	r5, #8
    b5cc:	2102      	movs	r1, #2
    b5ce:	4628      	mov	r0, r5
    b5d0:	f012 fc9b 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b5d4:	233e      	movs	r3, #62	; 0x3e
    b5d6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b5d8:	2304      	movs	r3, #4
    b5da:	7043      	strb	r3, [r0, #1]
    b5dc:	2101      	movs	r1, #1
    b5de:	4628      	mov	r0, r5
    b5e0:	f012 fc93 	bl	1df0a <net_buf_simple_add>
	me->subevent = subevt;
    b5e4:	2314      	movs	r3, #20
    b5e6:	7003      	strb	r3, [r0, #0]
    b5e8:	2103      	movs	r1, #3
    b5ea:	4628      	mov	r0, r5
    b5ec:	f012 fc8d 	bl	1df0a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    b5f0:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    b5f2:	7f23      	ldrb	r3, [r4, #28]
    b5f4:	7083      	strb	r3, [r0, #2]
    b5f6:	e6e1      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b5f8:	4b26      	ldr	r3, [pc, #152]	; (b694 <hci_evt_encode+0x380>)
    b5fa:	685b      	ldr	r3, [r3, #4]
    b5fc:	009f      	lsls	r7, r3, #2
    b5fe:	f57f aedd 	bpl.w	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    b602:	4b25      	ldr	r3, [pc, #148]	; (b698 <hci_evt_encode+0x384>)
    b604:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b606:	0518      	lsls	r0, r3, #20
    b608:	f57f aed8 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b60c:	3508      	adds	r5, #8
    b60e:	2102      	movs	r1, #2
    b610:	4628      	mov	r0, r5
    b612:	f012 fc7a 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b616:	233e      	movs	r3, #62	; 0x3e
    b618:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b61a:	2306      	movs	r3, #6
    b61c:	7043      	strb	r3, [r0, #1]
    b61e:	2101      	movs	r1, #1
    b620:	4628      	mov	r0, r5
    b622:	f012 fc72 	bl	1df0a <net_buf_simple_add>
	me->subevent = subevt;
    b626:	230c      	movs	r3, #12
    b628:	7003      	strb	r3, [r0, #0]
    b62a:	2105      	movs	r1, #5
    b62c:	4628      	mov	r0, r5
    b62e:	f012 fc6c 	bl	1df0a <net_buf_simple_add>
	sep->status = pu->status;
    b632:	7f23      	ldrb	r3, [r4, #28]
    b634:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b636:	f8a0 6001 	strh.w	r6, [r0, #1]
    b63a:	7f62      	ldrb	r2, [r4, #29]
    b63c:	2a00      	cmp	r2, #0
    b63e:	fa92 f3a2 	rbit	r3, r2
    b642:	fab3 f383 	clz	r3, r3
    b646:	bf08      	it	eq
    b648:	f04f 33ff 	moveq.w	r3, #4294967295
    b64c:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    b64e:	70c3      	strb	r3, [r0, #3]
    b650:	7fa2      	ldrb	r2, [r4, #30]
    b652:	fa92 f3a2 	rbit	r3, r2
    b656:	2a00      	cmp	r2, #0
    b658:	fab3 f383 	clz	r3, r3
    b65c:	bf08      	it	eq
    b65e:	f04f 33ff 	moveq.w	r3, #4294967295
    b662:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    b664:	7103      	strb	r3, [r0, #4]
    b666:	e6a9      	b.n	b3bc <hci_evt_encode+0xa8>
		LL_ASSERT(0);
    b668:	4a06      	ldr	r2, [pc, #24]	; (b684 <hci_evt_encode+0x370>)
    b66a:	4907      	ldr	r1, [pc, #28]	; (b688 <hci_evt_encode+0x374>)
    b66c:	4807      	ldr	r0, [pc, #28]	; (b68c <hci_evt_encode+0x378>)
    b66e:	f641 7393 	movw	r3, #8083	; 0x1f93
    b672:	f00d ff8e 	bl	19592 <assert_print>
    b676:	4040      	eors	r0, r0
    b678:	f380 8811 	msr	BASEPRI, r0
    b67c:	f04f 0003 	mov.w	r0, #3
    b680:	df02      	svc	2
}
    b682:	e69b      	b.n	b3bc <hci_evt_encode+0xa8>
    b684:	0001fca4 	.word	0x0001fca4
    b688:	0001fc54 	.word	0x0001fc54
    b68c:	0001fbf4 	.word	0x0001fbf4
    b690:	0001f3c0 	.word	0x0001f3c0
    b694:	20000158 	.word	0x20000158
    b698:	20000160 	.word	0x20000160
    b69c:	200019f4 	.word	0x200019f4
    b6a0:	200012a8 	.word	0x200012a8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b6a4:	4bbe      	ldr	r3, [pc, #760]	; (b9a0 <hci_evt_encode+0x68c>)
    b6a6:	685b      	ldr	r3, [r3, #4]
    b6a8:	009a      	lsls	r2, r3, #2
    b6aa:	f57f ae87 	bpl.w	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    b6ae:	4bbd      	ldr	r3, [pc, #756]	; (b9a4 <hci_evt_encode+0x690>)
    b6b0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b6b2:	065b      	lsls	r3, r3, #25
    b6b4:	f57f ae82 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b6b8:	3508      	adds	r5, #8
    b6ba:	2102      	movs	r1, #2
    b6bc:	4628      	mov	r0, r5
    b6be:	f012 fc24 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b6c2:	233e      	movs	r3, #62	; 0x3e
    b6c4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b6c6:	230b      	movs	r3, #11
    b6c8:	7043      	strb	r3, [r0, #1]
    b6ca:	2101      	movs	r1, #1
    b6cc:	4628      	mov	r0, r5
    b6ce:	f012 fc1c 	bl	1df0a <net_buf_simple_add>
	me->subevent = subevt;
    b6d2:	2307      	movs	r3, #7
    b6d4:	7003      	strb	r3, [r0, #0]
    b6d6:	210a      	movs	r1, #10
    b6d8:	4628      	mov	r0, r5
    b6da:	f012 fc16 	bl	1df0a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    b6de:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    b6e0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b6e2:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    b6e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b6e6:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    b6e8:	8c23      	ldrh	r3, [r4, #32]
    b6ea:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    b6ec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b6ee:	8103      	strh	r3, [r0, #8]
    b6f0:	e664      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b6f2:	4bab      	ldr	r3, [pc, #684]	; (b9a0 <hci_evt_encode+0x68c>)
    b6f4:	681b      	ldr	r3, [r3, #0]
    b6f6:	061b      	lsls	r3, r3, #24
    b6f8:	f04f 0400 	mov.w	r4, #0
    b6fc:	f57f ae5e 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b700:	3508      	adds	r5, #8
    b702:	2102      	movs	r1, #2
    b704:	4628      	mov	r0, r5
    b706:	f012 fc00 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b70a:	2308      	movs	r3, #8
	hdr->len = len;
    b70c:	2104      	movs	r1, #4
	hdr->evt = evt;
    b70e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b710:	7041      	strb	r1, [r0, #1]
    b712:	4628      	mov	r0, r5
    b714:	f012 fbf9 	bl	1df0a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    b718:	2301      	movs	r3, #1
	ep->status = err;
    b71a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b71c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    b720:	70c3      	strb	r3, [r0, #3]
    b722:	e64b      	b.n	b3bc <hci_evt_encode+0xa8>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    b724:	f890 3020 	ldrb.w	r3, [r0, #32]
    b728:	2b0e      	cmp	r3, #14
    b72a:	f47f ae47 	bne.w	b3bc <hci_evt_encode+0xa8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b72e:	460b      	mov	r3, r1
    b730:	4632      	mov	r2, r6
    b732:	2100      	movs	r1, #0
    b734:	201a      	movs	r0, #26
}
    b736:	b007      	add	sp, #28
    b738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b73c:	f7fe bfc8 	b.w	a6d0 <le_remote_feat_complete>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    b740:	460b      	mov	r3, r1
    b742:	4632      	mov	r2, r6
    b744:	4639      	mov	r1, r7
    b746:	2000      	movs	r0, #0
    b748:	e7f5      	b.n	b736 <hci_evt_encode+0x422>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b74a:	4b95      	ldr	r3, [pc, #596]	; (b9a0 <hci_evt_encode+0x68c>)
    b74c:	681b      	ldr	r3, [r3, #0]
    b74e:	061f      	lsls	r7, r3, #24
    b750:	f57f ae34 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b754:	3508      	adds	r5, #8
    b756:	2102      	movs	r1, #2
    b758:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    b75a:	f894 4020 	ldrb.w	r4, [r4, #32]
    b75e:	f012 fbd4 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b762:	2308      	movs	r3, #8
	hdr->len = len;
    b764:	2104      	movs	r1, #4
	hdr->evt = evt;
    b766:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b768:	7041      	strb	r1, [r0, #1]
    b76a:	4628      	mov	r0, r5
    b76c:	f012 fbcd 	bl	1df0a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    b770:	fab4 f384 	clz	r3, r4
    b774:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    b776:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b778:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    b77c:	70c3      	strb	r3, [r0, #3]
    b77e:	e61d      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b780:	4b87      	ldr	r3, [pc, #540]	; (b9a0 <hci_evt_encode+0x68c>)
    b782:	685b      	ldr	r3, [r3, #4]
    b784:	0098      	lsls	r0, r3, #2
    b786:	d55d      	bpl.n	b844 <hci_evt_encode+0x530>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    b788:	4b86      	ldr	r3, [pc, #536]	; (b9a4 <hci_evt_encode+0x690>)
    b78a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b78c:	0699      	lsls	r1, r3, #26
    b78e:	d559      	bpl.n	b844 <hci_evt_encode+0x530>
    b790:	3508      	adds	r5, #8
    b792:	2102      	movs	r1, #2
    b794:	4628      	mov	r0, r5
    b796:	f012 fbb8 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b79a:	233e      	movs	r3, #62	; 0x3e
    b79c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b79e:	230b      	movs	r3, #11
    b7a0:	7043      	strb	r3, [r0, #1]
    b7a2:	2101      	movs	r1, #1
    b7a4:	4628      	mov	r0, r5
    b7a6:	f012 fbb0 	bl	1df0a <net_buf_simple_add>
	me->subevent = subevt;
    b7aa:	2306      	movs	r3, #6
    b7ac:	7003      	strb	r3, [r0, #0]
    b7ae:	210a      	movs	r1, #10
    b7b0:	4628      	mov	r0, r5
    b7b2:	f012 fbaa 	bl	1df0a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    b7b6:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    b7b8:	8c23      	ldrh	r3, [r4, #32]
    b7ba:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    b7bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b7be:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    b7c0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b7c2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    b7c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b7c6:	8103      	strh	r3, [r0, #8]
    b7c8:	e5f8      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b7ca:	4b75      	ldr	r3, [pc, #468]	; (b9a0 <hci_evt_encode+0x68c>)
    b7cc:	685b      	ldr	r3, [r3, #4]
    b7ce:	0099      	lsls	r1, r3, #2
    b7d0:	f57f adf4 	bpl.w	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    b7d4:	4b73      	ldr	r3, [pc, #460]	; (b9a4 <hci_evt_encode+0x690>)
    b7d6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b7d8:	06da      	lsls	r2, r3, #27
    b7da:	f57f adef 	bpl.w	b3bc <hci_evt_encode+0xa8>
    b7de:	3508      	adds	r5, #8
    b7e0:	2102      	movs	r1, #2
    b7e2:	4628      	mov	r0, r5
    b7e4:	f012 fb91 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b7e8:	233e      	movs	r3, #62	; 0x3e
    b7ea:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b7ec:	230d      	movs	r3, #13
    b7ee:	7043      	strb	r3, [r0, #1]
    b7f0:	2101      	movs	r1, #1
    b7f2:	4628      	mov	r0, r5
    b7f4:	f012 fb89 	bl	1df0a <net_buf_simple_add>
	me->subevent = subevt;
    b7f8:	2305      	movs	r3, #5
    b7fa:	7003      	strb	r3, [r0, #0]
    b7fc:	210c      	movs	r1, #12
    b7fe:	4628      	mov	r0, r5
    b800:	f012 fb83 	bl	1df0a <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    b804:	f104 0120 	add.w	r1, r4, #32
    b808:	4605      	mov	r5, r0
    b80a:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    b80c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    b810:	f00f f81f 	bl	1a852 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    b814:	2202      	movs	r2, #2
    b816:	f104 0128 	add.w	r1, r4, #40	; 0x28
    b81a:	f105 000a 	add.w	r0, r5, #10
}
    b81e:	b007      	add	sp, #28
    b820:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    b824:	f00f b815 	b.w	1a852 <memcpy>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    b828:	4a5f      	ldr	r2, [pc, #380]	; (b9a8 <hci_evt_encode+0x694>)
    b82a:	4960      	ldr	r1, [pc, #384]	; (b9ac <hci_evt_encode+0x698>)
    b82c:	4860      	ldr	r0, [pc, #384]	; (b9b0 <hci_evt_encode+0x69c>)
    b82e:	f641 43ef 	movw	r3, #7407	; 0x1cef
    b832:	f00d feae 	bl	19592 <assert_print>
    b836:	4040      	eors	r0, r0
    b838:	f380 8811 	msr	BASEPRI, r0
    b83c:	f04f 0003 	mov.w	r0, #3
    b840:	df02      	svc	2
    b842:	e630      	b.n	b4a6 <hci_evt_encode+0x192>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    b844:	2300      	movs	r3, #0
    b846:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b84a:	9300      	str	r3, [sp, #0]
    b84c:	221a      	movs	r2, #26
    b84e:	2102      	movs	r1, #2
    b850:	4630      	mov	r0, r6
    b852:	f002 ff03 	bl	e65c <ll_conn_update>
		return;
    b856:	e5b1      	b.n	b3bc <hci_evt_encode+0xa8>
		conn_count++;
    b858:	4a56      	ldr	r2, [pc, #344]	; (b9b4 <hci_evt_encode+0x6a0>)
    b85a:	6813      	ldr	r3, [r2, #0]
    b85c:	2102      	movs	r1, #2
    b85e:	3301      	adds	r3, #1
    b860:	4628      	mov	r0, r5
    b862:	6013      	str	r3, [r2, #0]
    b864:	f012 fb51 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b868:	233e      	movs	r3, #62	; 0x3e
    b86a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b86c:	2313      	movs	r3, #19
    b86e:	7043      	strb	r3, [r0, #1]
    b870:	2101      	movs	r1, #1
    b872:	4628      	mov	r0, r5
    b874:	f012 fb49 	bl	1df0a <net_buf_simple_add>
    b878:	4603      	mov	r3, r0
	me->subevent = subevt;
    b87a:	2201      	movs	r2, #1
    b87c:	701a      	strb	r2, [r3, #0]
    b87e:	4628      	mov	r0, r5
    b880:	2112      	movs	r1, #18
    b882:	f012 fb42 	bl	1df0a <net_buf_simple_add>
	lecc->status = 0x00;
    b886:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    b888:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    b88c:	7f63      	ldrb	r3, [r4, #29]
    b88e:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    b890:	7fa3      	ldrb	r3, [r4, #30]
    b892:	f003 0301 	and.w	r3, r3, #1
    b896:	4605      	mov	r5, r0
    b898:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    b89a:	2206      	movs	r2, #6
    b89c:	f104 011f 	add.w	r1, r4, #31
    b8a0:	3005      	adds	r0, #5
    b8a2:	f00e ffd6 	bl	1a852 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b8a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	lecc->interval = sys_cpu_to_le16(cc->interval);
    b8a8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
	lecc->latency = sys_cpu_to_le16(cc->latency);
    b8aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    b8ac:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    b8b0:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b8b4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    b8b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b8bc:	746b      	strb	r3, [r5, #17]
    b8be:	e57d      	b.n	b3bc <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b8c0:	2a00      	cmp	r2, #0
    b8c2:	f43f ad7b 	beq.w	b3bc <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    b8c6:	4b37      	ldr	r3, [pc, #220]	; (b9a4 <hci_evt_encode+0x690>)
    b8c8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b8ca:	055a      	lsls	r2, r3, #21
    b8cc:	f57f ad76 	bpl.w	b3bc <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    b8d0:	7f23      	ldrb	r3, [r4, #28]
    b8d2:	f003 030f 	and.w	r3, r3, #15
    b8d6:	2b01      	cmp	r3, #1
    b8d8:	d00c      	beq.n	b8f4 <hci_evt_encode+0x5e0>
    b8da:	4a33      	ldr	r2, [pc, #204]	; (b9a8 <hci_evt_encode+0x694>)
    b8dc:	4936      	ldr	r1, [pc, #216]	; (b9b8 <hci_evt_encode+0x6a4>)
    b8de:	4834      	ldr	r0, [pc, #208]	; (b9b0 <hci_evt_encode+0x69c>)
    b8e0:	f241 630a 	movw	r3, #5642	; 0x160a
    b8e4:	f00d fe55 	bl	19592 <assert_print>
    b8e8:	4040      	eors	r0, r0
    b8ea:	f380 8811 	msr	BASEPRI, r0
    b8ee:	f04f 0003 	mov.w	r0, #3
    b8f2:	df02      	svc	2
	if (dup_count >= 0) {
    b8f4:	4b31      	ldr	r3, [pc, #196]	; (b9bc <hci_evt_encode+0x6a8>)
    b8f6:	681b      	ldr	r3, [r3, #0]
    b8f8:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    b8fa:	f104 071e 	add.w	r7, r4, #30
	if (dup_count >= 0) {
    b8fe:	db0a      	blt.n	b916 <hci_evt_encode+0x602>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    b900:	7f20      	ldrb	r0, [r4, #28]
    b902:	463a      	mov	r2, r7
    b904:	f3c0 1180 	ubfx	r1, r0, #6, #1
    b908:	f000 000f 	and.w	r0, r0, #15
    b90c:	f7fe fe80 	bl	a610 <dup_found.part.0>
	if (dup_scan &&
    b910:	2800      	cmp	r0, #0
    b912:	f47f ad53 	bne.w	b3bc <hci_evt_encode+0xa8>
    b916:	3508      	adds	r5, #8
    b918:	2102      	movs	r1, #2
    b91a:	4628      	mov	r0, r5
    b91c:	f012 faf5 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b920:	233e      	movs	r3, #62	; 0x3e
    b922:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b924:	2312      	movs	r3, #18
    b926:	7043      	strb	r3, [r0, #1]
    b928:	2101      	movs	r1, #1
    b92a:	4628      	mov	r0, r5
    b92c:	f012 faed 	bl	1df0a <net_buf_simple_add>
    b930:	4603      	mov	r3, r0
	me->subevent = subevt;
    b932:	220b      	movs	r2, #11
    b934:	701a      	strb	r2, [r3, #0]
    b936:	4628      	mov	r0, r5
    b938:	2111      	movs	r1, #17
    b93a:	f012 fae6 	bl	1df0a <net_buf_simple_add>
	drp->num_reports = 1U;
    b93e:	2301      	movs	r3, #1
    b940:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    b942:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
    b944:	7f23      	ldrb	r3, [r4, #28]
    b946:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b94a:	4605      	mov	r5, r0
    b94c:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    b94e:	4639      	mov	r1, r7
    b950:	2206      	movs	r2, #6
    b952:	3003      	adds	r0, #3
    b954:	f00e ff7d 	bl	1a852 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
    b958:	7f23      	ldrb	r3, [r4, #28]
    b95a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
    b95e:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
    b960:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    b962:	f104 0124 	add.w	r1, r4, #36	; 0x24
    b966:	f105 000a 	add.w	r0, r5, #10
    b96a:	f00e ff72 	bl	1a852 <memcpy>
	dir_info->rssi = rssi;
    b96e:	742e      	strb	r6, [r5, #16]
    b970:	e524      	b.n	b3bc <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    b972:	4a0d      	ldr	r2, [pc, #52]	; (b9a8 <hci_evt_encode+0x694>)
    b974:	4912      	ldr	r1, [pc, #72]	; (b9c0 <hci_evt_encode+0x6ac>)
    b976:	480e      	ldr	r0, [pc, #56]	; (b9b0 <hci_evt_encode+0x69c>)
    b978:	f641 5374 	movw	r3, #7540	; 0x1d74
    b97c:	f00d fe09 	bl	19592 <assert_print>
    b980:	4040      	eors	r0, r0
    b982:	f380 8811 	msr	BASEPRI, r0
    b986:	f04f 0003 	mov.w	r0, #3
    b98a:	df02      	svc	2
    b98c:	e5db      	b.n	b546 <hci_evt_encode+0x232>
    b98e:	f04f 0800 	mov.w	r8, #0
    b992:	f04f 090b 	mov.w	r9, #11
    b996:	f04f 0a0c 	mov.w	sl, #12
		data_len = 0U;
    b99a:	4647      	mov	r7, r8
    b99c:	e54c      	b.n	b438 <hci_evt_encode+0x124>
    b99e:	bf00      	nop
    b9a0:	20000158 	.word	0x20000158
    b9a4:	20000160 	.word	0x20000160
    b9a8:	0001fca4 	.word	0x0001fca4
    b9ac:	0001fd08 	.word	0x0001fd08
    b9b0:	0001fbf4 	.word	0x0001fbf4
    b9b4:	200019f0 	.word	0x200019f0
    b9b8:	0001fce0 	.word	0x0001fce0
    b9bc:	200019f4 	.word	0x200019f4
    b9c0:	0001fd44 	.word	0x0001fd44

0000b9c4 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    b9c4:	b570      	push	{r4, r5, r6, lr}
    b9c6:	f100 0408 	add.w	r4, r0, #8
    b9ca:	460e      	mov	r6, r1
    b9cc:	4620      	mov	r0, r4
    b9ce:	2102      	movs	r1, #2
    b9d0:	4615      	mov	r5, r2
    b9d2:	f012 fa9a 	bl	1df0a <net_buf_simple_add>
	hdr->evt = evt;
    b9d6:	2313      	movs	r3, #19
	hdr->len = len;
    b9d8:	2105      	movs	r1, #5
	hdr->evt = evt;
    b9da:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    b9dc:	7041      	strb	r1, [r0, #1]
    b9de:	4620      	mov	r0, r4
    b9e0:	f012 fa93 	bl	1df0a <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    b9e4:	2301      	movs	r3, #1
    b9e6:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    b9e8:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    b9ec:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    b9f0:	bd70      	pop	{r4, r5, r6, pc}
    b9f2:	bf00      	nop

0000b9f4 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b9f4:	7903      	ldrb	r3, [r0, #4]
    b9f6:	2b03      	cmp	r3, #3
    b9f8:	d008      	beq.n	ba0c <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    b9fa:	3b05      	subs	r3, #5
    b9fc:	b2db      	uxtb	r3, r3
    b9fe:	2b18      	cmp	r3, #24
    ba00:	d901      	bls.n	ba06 <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ba02:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    ba04:	4770      	bx	lr
    ba06:	4a05      	ldr	r2, [pc, #20]	; (ba1c <hci_get_class+0x28>)
    ba08:	5cd0      	ldrb	r0, [r2, r3]
    ba0a:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    ba0c:	7f03      	ldrb	r3, [r0, #28]
    ba0e:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    ba12:	2b03      	cmp	r3, #3
    ba14:	bf0c      	ite	eq
    ba16:	2004      	moveq	r0, #4
    ba18:	2005      	movne	r0, #5
    ba1a:	4770      	bx	lr
    ba1c:	0001fd80 	.word	0x0001fd80

0000ba20 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    ba20:	480d      	ldr	r0, [pc, #52]	; (ba58 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ba22:	4a0e      	ldr	r2, [pc, #56]	; (ba5c <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ba24:	490e      	ldr	r1, [pc, #56]	; (ba60 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
    ba26:	4b0f      	ldr	r3, [pc, #60]	; (ba64 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    ba28:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    ba2a:	f04f 34ff 	mov.w	r4, #4294967295
    ba2e:	f641 75ff 	movw	r5, #8191	; 0x1fff
    ba32:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ba36:	2400      	movs	r4, #0
    ba38:	2500      	movs	r5, #0
    ba3a:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
    ba3e:	4a0a      	ldr	r2, [pc, #40]	; (ba68 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ba40:	241f      	movs	r4, #31
    ba42:	2500      	movs	r5, #0
    ba44:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    ba48:	2100      	movs	r1, #0
    ba4a:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
    ba4c:	f04f 32ff 	mov.w	r2, #4294967295
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    ba50:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
    ba52:	601a      	str	r2, [r3, #0]
}
    ba54:	4770      	bx	lr
    ba56:	bf00      	nop
    ba58:	20000158 	.word	0x20000158
    ba5c:	200012a8 	.word	0x200012a8
    ba60:	20000160 	.word	0x20000160
    ba64:	200019f4 	.word	0x200019f4
    ba68:	200019f0 	.word	0x200019f0

0000ba6c <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    ba6c:	f007 b8de 	b.w	12c2c <lll_csrand_get>

0000ba70 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    ba70:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    ba72:	2300      	movs	r3, #0
    ba74:	f009 fa2a 	bl	14ecc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    ba78:	2000      	movs	r0, #0
    ba7a:	bd08      	pop	{r3, pc}

0000ba7c <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    ba7c:	4801      	ldr	r0, [pc, #4]	; (ba84 <ll_feat_get+0x8>)
    ba7e:	2100      	movs	r1, #0
    ba80:	4770      	bx	lr
    ba82:	bf00      	nop
    ba84:	000141bf 	.word	0x000141bf

0000ba88 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    ba88:	b510      	push	{r4, lr}
    ba8a:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    ba8c:	f007 f904 	bl	12c98 <lll_reset>
	LL_ASSERT(!err);
    ba90:	b970      	cbnz	r0, bab0 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    ba92:	f007 fd01 	bl	13498 <lll_adv_reset>
	LL_ASSERT(!err);
    ba96:	b9e0      	cbnz	r0, bad2 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    ba98:	f008 fc4e 	bl	14338 <lll_scan_reset>
	LL_ASSERT(!err);
    ba9c:	bb50      	cbnz	r0, baf4 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    ba9e:	f008 fcef 	bl	14480 <lll_conn_reset>
	LL_ASSERT(!err);
    baa2:	2800      	cmp	r0, #0
    baa4:	d137      	bne.n	bb16 <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
    baa6:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    baa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    baac:	f00c ba32 	b.w	17f14 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    bab0:	4a22      	ldr	r2, [pc, #136]	; (bb3c <perform_lll_reset+0xb4>)
    bab2:	4923      	ldr	r1, [pc, #140]	; (bb40 <perform_lll_reset+0xb8>)
    bab4:	4823      	ldr	r0, [pc, #140]	; (bb44 <perform_lll_reset+0xbc>)
    bab6:	f640 038f 	movw	r3, #2191	; 0x88f
    baba:	f00d fd6a 	bl	19592 <assert_print>
    babe:	4040      	eors	r0, r0
    bac0:	f380 8811 	msr	BASEPRI, r0
    bac4:	f04f 0003 	mov.w	r0, #3
    bac8:	df02      	svc	2
	err = lll_adv_reset();
    baca:	f007 fce5 	bl	13498 <lll_adv_reset>
	LL_ASSERT(!err);
    bace:	2800      	cmp	r0, #0
    bad0:	d0e2      	beq.n	ba98 <perform_lll_reset+0x10>
    bad2:	4a1a      	ldr	r2, [pc, #104]	; (bb3c <perform_lll_reset+0xb4>)
    bad4:	491a      	ldr	r1, [pc, #104]	; (bb40 <perform_lll_reset+0xb8>)
    bad6:	481b      	ldr	r0, [pc, #108]	; (bb44 <perform_lll_reset+0xbc>)
    bad8:	f640 0394 	movw	r3, #2196	; 0x894
    badc:	f00d fd59 	bl	19592 <assert_print>
    bae0:	4040      	eors	r0, r0
    bae2:	f380 8811 	msr	BASEPRI, r0
    bae6:	f04f 0003 	mov.w	r0, #3
    baea:	df02      	svc	2
	err = lll_scan_reset();
    baec:	f008 fc24 	bl	14338 <lll_scan_reset>
	LL_ASSERT(!err);
    baf0:	2800      	cmp	r0, #0
    baf2:	d0d4      	beq.n	ba9e <perform_lll_reset+0x16>
    baf4:	4a11      	ldr	r2, [pc, #68]	; (bb3c <perform_lll_reset+0xb4>)
    baf6:	4912      	ldr	r1, [pc, #72]	; (bb40 <perform_lll_reset+0xb8>)
    baf8:	4812      	ldr	r0, [pc, #72]	; (bb44 <perform_lll_reset+0xbc>)
    bafa:	f640 039a 	movw	r3, #2202	; 0x89a
    bafe:	f00d fd48 	bl	19592 <assert_print>
    bb02:	4040      	eors	r0, r0
    bb04:	f380 8811 	msr	BASEPRI, r0
    bb08:	f04f 0003 	mov.w	r0, #3
    bb0c:	df02      	svc	2
	err = lll_conn_reset();
    bb0e:	f008 fcb7 	bl	14480 <lll_conn_reset>
	LL_ASSERT(!err);
    bb12:	2800      	cmp	r0, #0
    bb14:	d0c7      	beq.n	baa6 <perform_lll_reset+0x1e>
    bb16:	4a09      	ldr	r2, [pc, #36]	; (bb3c <perform_lll_reset+0xb4>)
    bb18:	4909      	ldr	r1, [pc, #36]	; (bb40 <perform_lll_reset+0xb8>)
    bb1a:	480a      	ldr	r0, [pc, #40]	; (bb44 <perform_lll_reset+0xbc>)
    bb1c:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
    bb20:	f00d fd37 	bl	19592 <assert_print>
    bb24:	4040      	eors	r0, r0
    bb26:	f380 8811 	msr	BASEPRI, r0
    bb2a:	f04f 0003 	mov.w	r0, #3
    bb2e:	df02      	svc	2
    bb30:	4620      	mov	r0, r4
}
    bb32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb36:	f00c b9ed 	b.w	17f14 <z_impl_k_sem_give>
    bb3a:	bf00      	nop
    bb3c:	0001fd9c 	.word	0x0001fd9c
    bb40:	0001fdd8 	.word	0x0001fdd8
    bb44:	0001fbf4 	.word	0x0001fbf4

0000bb48 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    bb48:	6008      	str	r0, [r1, #0]
    bb4a:	4801      	ldr	r0, [pc, #4]	; (bb50 <ull_ticker_status_give+0x8>)
    bb4c:	f00c b9e2 	b.w	17f14 <z_impl_k_sem_give>
    bb50:	20001d24 	.word	0x20001d24

0000bb54 <disabled_cb>:
    bb54:	f00c b9de 	b.w	17f14 <z_impl_k_sem_give>

0000bb58 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    bb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bb5c:	4d2c      	ldr	r5, [pc, #176]	; (bc10 <tx_cmplt_get+0xb8>)
{
    bb5e:	460c      	mov	r4, r1
    bb60:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bb62:	78a9      	ldrb	r1, [r5, #2]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    bb64:	7822      	ldrb	r2, [r4, #0]
    bb66:	782b      	ldrb	r3, [r5, #0]
    bb68:	4291      	cmp	r1, r2
    bb6a:	bf9c      	itt	ls
    bb6c:	792a      	ldrbls	r2, [r5, #4]
		*idx = first;
    bb6e:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
    bb70:	454a      	cmp	r2, r9
{
    bb72:	4682      	mov	sl, r0
    bb74:	d042      	beq.n	bbfc <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    bb76:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
    bb7a:	3201      	adds	r2, #1
    bb7c:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    bb7e:	4f25      	ldr	r7, [pc, #148]	; (bc14 <tx_cmplt_get+0xbc>)
		i = 0U;
    bb80:	4291      	cmp	r1, r2
    bb82:	bf08      	it	eq
    bb84:	2200      	moveq	r2, #0

	*idx = i;
    bb86:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    bb88:	5afa      	ldrh	r2, [r7, r3]
    bb8a:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
    bb8c:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
    bb8e:	443b      	add	r3, r7
    bb90:	f04f 0b01 	mov.w	fp, #1
    bb94:	f04f 0802 	mov.w	r8, #2
    bb98:	e021      	b.n	bbde <tx_cmplt_get+0x86>
			struct node_tx *tx_node;
			struct pdu_data *p;

			tx_node = tx->node;
			p = (void *)tx_node->pdu;
			if (!tx_node || (tx_node == (void *)1) ||
    bb9a:	b362      	cbz	r2, bbf6 <tx_cmplt_get+0x9e>
			    (((uint32_t)tx_node & ~3) &&
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    bb9c:	7902      	ldrb	r2, [r0, #4]
    bb9e:	f002 0203 	and.w	r2, r2, #3
			    (((uint32_t)tx_node & ~3) &&
    bba2:	3a01      	subs	r2, #1
    bba4:	2a01      	cmp	r2, #1
    bba6:	d92d      	bls.n	bc04 <tx_cmplt_get+0xac>
    bba8:	f8c3 8004 	str.w	r8, [r3, #4]
				/* ctrl packet or flushed, hence dont count num cmplt */
				tx->node = (void *)2;
			}

			if (((uint32_t)tx_node & ~3)) {
				ll_tx_mem_release(tx_node);
    bbac:	f002 fd04 	bl	e5b8 <ll_tx_mem_release>
	if (*idx >= count) {
    bbb0:	7823      	ldrb	r3, [r4, #0]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    bbb2:	78a9      	ldrb	r1, [r5, #2]
    bbb4:	7828      	ldrb	r0, [r5, #0]
    bbb6:	4299      	cmp	r1, r3
    bbb8:	bf9c      	itt	ls
    bbba:	792b      	ldrbls	r3, [r5, #4]
		*idx = first;
    bbbc:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    bbbe:	4599      	cmp	r9, r3
    bbc0:	d01d      	beq.n	bbfe <tx_cmplt_get+0xa6>
	i = *idx + 1;
    bbc2:	1c5a      	adds	r2, r3, #1
    bbc4:	b2d2      	uxtb	r2, r2
		i = 0U;
    bbc6:	4291      	cmp	r1, r2
    bbc8:	bf08      	it	eq
    bbca:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    bbcc:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    bbd0:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    bbd2:	5af9      	ldrh	r1, [r7, r3]
    bbd4:	f8ba 2000 	ldrh.w	r2, [sl]
    bbd8:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
    bbda:	443b      	add	r3, r7
    bbdc:	d10f      	bne.n	bbfe <tx_cmplt_get+0xa6>
			tx_node = tx->node;
    bbde:	6858      	ldr	r0, [r3, #4]
			if (!tx_node || (tx_node == (void *)1) ||
    bbe0:	2801      	cmp	r0, #1
			    (((uint32_t)tx_node & ~3) &&
    bbe2:	f020 0203 	bic.w	r2, r0, #3
			if (!tx_node || (tx_node == (void *)1) ||
    bbe6:	d8d8      	bhi.n	bb9a <tx_cmplt_get+0x42>
				cmplt++;
    bbe8:	3601      	adds	r6, #1
    bbea:	b2f6      	uxtb	r6, r6
    bbec:	f8c3 b004 	str.w	fp, [r3, #4]
			if (((uint32_t)tx_node & ~3)) {
    bbf0:	2a00      	cmp	r2, #0
    bbf2:	d0dd      	beq.n	bbb0 <tx_cmplt_get+0x58>
    bbf4:	e7da      	b.n	bbac <tx_cmplt_get+0x54>
    bbf6:	f8c3 8004 	str.w	r8, [r3, #4]
    bbfa:	e7d9      	b.n	bbb0 <tx_cmplt_get+0x58>
		return 0;
    bbfc:	2600      	movs	r6, #0

	return cmplt;
}
    bbfe:	4630      	mov	r0, r6
    bc00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
    bc04:	3601      	adds	r6, #1
    bc06:	f8c3 b004 	str.w	fp, [r3, #4]
    bc0a:	b2f6      	uxtb	r6, r6
			if (((uint32_t)tx_node & ~3)) {
    bc0c:	e7ce      	b.n	bbac <tx_cmplt_get+0x54>
    bc0e:	bf00      	nop
    bc10:	2000056c 	.word	0x2000056c
    bc14:	20000574 	.word	0x20000574

0000bc18 <rx_replenish>:
{
    bc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    bc1c:	4f34      	ldr	r7, [pc, #208]	; (bcf0 <rx_replenish+0xd8>)
    bc1e:	883b      	ldrh	r3, [r7, #0]
    bc20:	4298      	cmp	r0, r3
    bc22:	d95c      	bls.n	bcde <rx_replenish+0xc6>
		max = mem_link_rx.quota_pdu;
    bc24:	b2de      	uxtb	r6, r3
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc26:	b34b      	cbz	r3, bc7c <rx_replenish+0x64>
    bc28:	4d32      	ldr	r5, [pc, #200]	; (bcf4 <rx_replenish+0xdc>)
		link = mem_acquire(&mem_link_rx.free);
    bc2a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; bcf8 <rx_replenish+0xe0>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc2e:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    bc30:	f8df 90c8 	ldr.w	r9, [pc, #200]	; bcfc <rx_replenish+0xe4>
	if (last == count) {
    bc34:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc36:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
    bc38:	3401      	adds	r4, #1
    bc3a:	b2e4      	uxtb	r4, r4
		last = 0U;
    bc3c:	42a2      	cmp	r2, r4
    bc3e:	bf08      	it	eq
    bc40:	2400      	moveq	r4, #0
	if (last == first) {
    bc42:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    bc44:	4640      	mov	r0, r8
    bc46:	d01b      	beq.n	bc80 <rx_replenish+0x68>
    bc48:	f7fd f804 	bl	8c54 <mem_acquire>
    bc4c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    bc4e:	4648      	mov	r0, r9
		if (!link) {
    bc50:	f1ba 0f00 	cmp.w	sl, #0
    bc54:	d012      	beq.n	bc7c <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    bc56:	f7fc fffd 	bl	8c54 <mem_acquire>
		if (!rx) {
    bc5a:	2800      	cmp	r0, #0
    bc5c:	d041      	beq.n	bce2 <rx_replenish+0xca>
		rx->link = link;
    bc5e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bc62:	796a      	ldrb	r2, [r5, #5]
    bc64:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bc66:	fb02 5303 	mla	r3, r2, r3, r5
    bc6a:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
    bc6c:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    bc6e:	716c      	strb	r4, [r5, #5]
		max--;
    bc70:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    bc72:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc74:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    bc78:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc7a:	d1db      	bne.n	bc34 <rx_replenish+0x1c>
}
    bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    bc80:	883b      	ldrh	r3, [r7, #0]
    bc82:	2b00      	cmp	r3, #0
    bc84:	d0fa      	beq.n	bc7c <rx_replenish+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bc86:	4d1e      	ldr	r5, [pc, #120]	; (bd00 <rx_replenish+0xe8>)
		link = mem_acquire(&mem_link_rx.free);
    bc88:	4e1b      	ldr	r6, [pc, #108]	; (bcf8 <rx_replenish+0xe0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bc8a:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    bc8c:	f8df 806c 	ldr.w	r8, [pc, #108]	; bcfc <rx_replenish+0xe4>
		link->mem = NULL;
    bc90:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    bc94:	78aa      	ldrb	r2, [r5, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bc96:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
    bc98:	3401      	adds	r4, #1
    bc9a:	b2e4      	uxtb	r4, r4
		last = 0U;
    bc9c:	42a2      	cmp	r2, r4
    bc9e:	bf08      	it	eq
    bca0:	2400      	moveq	r4, #0
	if (last == first) {
    bca2:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    bca4:	4630      	mov	r0, r6
    bca6:	d0e9      	beq.n	bc7c <rx_replenish+0x64>
    bca8:	f7fc ffd4 	bl	8c54 <mem_acquire>
    bcac:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    bcae:	4640      	mov	r0, r8
		if (!link) {
    bcb0:	f1ba 0f00 	cmp.w	sl, #0
    bcb4:	d0e2      	beq.n	bc7c <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    bcb6:	f7fc ffcd 	bl	8c54 <mem_acquire>
		if (!rx) {
    bcba:	b190      	cbz	r0, bce2 <rx_replenish+0xca>
		link->mem = NULL;
    bcbc:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    bcc0:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bcc4:	796a      	ldrb	r2, [r5, #5]
    bcc6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bcc8:	fb02 5303 	mla	r3, r2, r3, r5
    bccc:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
    bcce:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    bcd0:	716c      	strb	r4, [r5, #5]
    bcd2:	3b01      	subs	r3, #1
    bcd4:	b29b      	uxth	r3, r3
    bcd6:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    bcd8:	2b00      	cmp	r3, #0
    bcda:	d1db      	bne.n	bc94 <rx_replenish+0x7c>
    bcdc:	e7ce      	b.n	bc7c <rx_replenish+0x64>
    bcde:	4606      	mov	r6, r0
    bce0:	e7a2      	b.n	bc28 <rx_replenish+0x10>
	mem_release(link, &mem_link_rx.free);
    bce2:	4650      	mov	r0, sl
    bce4:	4904      	ldr	r1, [pc, #16]	; (bcf8 <rx_replenish+0xe0>)
}
    bce6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mem_release(link, &mem_link_rx.free);
    bcea:	f7fc bfcd 	b.w	8c88 <mem_release>
    bcee:	bf00      	nop
    bcf0:	20001ad8 	.word	0x20001ad8
    bcf4:	20000448 	.word	0x20000448
    bcf8:	20001adc 	.word	0x20001adc
    bcfc:	20001b28 	.word	0x20001b28
    bd00:	20000438 	.word	0x20000438

0000bd04 <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    bd04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd08:	4e3c      	ldr	r6, [pc, #240]	; (bdfc <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    bd0a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; be00 <ull_done+0xfc>
    bd0e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; be04 <ull_done+0x100>
{
    bd12:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    bd14:	e9d6 0100 	ldrd	r0, r1, [r6]
    bd18:	aa01      	add	r2, sp, #4
    bd1a:	f7fd f809 	bl	8d30 <memq_peek>
		if (link) {
    bd1e:	4604      	mov	r4, r0
    bd20:	2800      	cmp	r0, #0
    bd22:	d03e      	beq.n	bda2 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    bd24:	6870      	ldr	r0, [r6, #4]
    bd26:	2200      	movs	r2, #0
    bd28:	4631      	mov	r1, r6
    bd2a:	f7fd f809 	bl	8d40 <memq_dequeue>
			rx_demux_event_done(link, done);
    bd2e:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    bd30:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    bd32:	b135      	cbz	r5, bd42 <ull_done+0x3e>
	return hdr->ref;
    bd34:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    bd36:	2b00      	cmp	r3, #0
    bd38:	d052      	beq.n	bde0 <ull_done+0xdc>
	return hdr->ref--;
    bd3a:	782b      	ldrb	r3, [r5, #0]
    bd3c:	3b01      	subs	r3, #1
    bd3e:	b2db      	uxtb	r3, r3
    bd40:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    bd42:	f897 3020 	ldrb.w	r3, [r7, #32]
    bd46:	b123      	cbz	r3, bd52 <ull_done+0x4e>
    bd48:	2b01      	cmp	r3, #1
    bd4a:	d13b      	bne.n	bdc4 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    bd4c:	4638      	mov	r0, r7
    bd4e:	f005 fe71 	bl	11a34 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    bd52:	4a2d      	ldr	r2, [pc, #180]	; (be08 <ull_done+0x104>)
	last = last + 1;
    bd54:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
    bd56:	f892 c002 	ldrb.w	ip, [r2, #2]
    bd5a:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
    bd5c:	3301      	adds	r3, #1
	done->extra.type = 0U;
    bd5e:	2100      	movs	r1, #0
    bd60:	b2db      	uxtb	r3, r3
		last = 0U;
    bd62:	459c      	cmp	ip, r3
    bd64:	bf08      	it	eq
    bd66:	460b      	moveq	r3, r1
	if (last == first) {
    bd68:	4298      	cmp	r0, r3
    bd6a:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
    bd6e:	7811      	ldrb	r1, [r2, #0]
    bd70:	d01a      	beq.n	bda8 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    bd72:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bd74:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bd76:	fb00 2101 	mla	r1, r0, r1, r2
    bd7a:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
    bd7c:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    bd7e:	2d00      	cmp	r5, #0
    bd80:	d0c8      	beq.n	bd14 <ull_done+0x10>
	return hdr->ref;
    bd82:	782b      	ldrb	r3, [r5, #0]
    bd84:	2b00      	cmp	r3, #0
    bd86:	d1c5      	bne.n	bd14 <ull_done+0x10>
    bd88:	696b      	ldr	r3, [r5, #20]
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d0c2      	beq.n	bd14 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    bd8e:	69a8      	ldr	r0, [r5, #24]
    bd90:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    bd92:	e9d6 0100 	ldrd	r0, r1, [r6]
    bd96:	aa01      	add	r2, sp, #4
    bd98:	f7fc ffca 	bl	8d30 <memq_peek>
		if (link) {
    bd9c:	4604      	mov	r4, r0
    bd9e:	2800      	cmp	r0, #0
    bda0:	d1c0      	bne.n	bd24 <ull_done+0x20>
}
    bda2:	b003      	add	sp, #12
    bda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    bda8:	4918      	ldr	r1, [pc, #96]	; (be0c <ull_done+0x108>)
    bdaa:	4819      	ldr	r0, [pc, #100]	; (be10 <ull_done+0x10c>)
    bdac:	f640 3324 	movw	r3, #2852	; 0xb24
    bdb0:	4642      	mov	r2, r8
    bdb2:	f00d fbee 	bl	19592 <assert_print>
    bdb6:	4040      	eors	r0, r0
    bdb8:	f380 8811 	msr	BASEPRI, r0
    bdbc:	f04f 0003 	mov.w	r0, #3
    bdc0:	df02      	svc	2
    bdc2:	e7dc      	b.n	bd7e <ull_done+0x7a>
		LL_ASSERT(0);
    bdc4:	4913      	ldr	r1, [pc, #76]	; (be14 <ull_done+0x110>)
    bdc6:	4812      	ldr	r0, [pc, #72]	; (be10 <ull_done+0x10c>)
    bdc8:	f640 331d 	movw	r3, #2845	; 0xb1d
    bdcc:	4642      	mov	r2, r8
    bdce:	f00d fbe0 	bl	19592 <assert_print>
    bdd2:	4040      	eors	r0, r0
    bdd4:	f380 8811 	msr	BASEPRI, r0
    bdd8:	f04f 0003 	mov.w	r0, #3
    bddc:	df02      	svc	2
		break;
    bdde:	e7b8      	b.n	bd52 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    bde0:	480b      	ldr	r0, [pc, #44]	; (be10 <ull_done+0x10c>)
    bde2:	f640 23c6 	movw	r3, #2758	; 0xac6
    bde6:	4642      	mov	r2, r8
    bde8:	4649      	mov	r1, r9
    bdea:	f00d fbd2 	bl	19592 <assert_print>
    bdee:	4040      	eors	r0, r0
    bdf0:	f380 8811 	msr	BASEPRI, r0
    bdf4:	f04f 0003 	mov.w	r0, #3
    bdf8:	df02      	svc	2
    bdfa:	e79e      	b.n	bd3a <ull_done+0x36>
    bdfc:	20001d10 	.word	0x20001d10
    be00:	0001fd9c 	.word	0x0001fd9c
    be04:	0001fde0 	.word	0x0001fde0
    be08:	2000041c 	.word	0x2000041c
    be0c:	0001fdf8 	.word	0x0001fdf8
    be10:	0001fbf4 	.word	0x0001fbf4
    be14:	0001fc54 	.word	0x0001fc54

0000be18 <rx_demux>:
{
    be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; bfcc <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    be20:	f8df 91ac 	ldr.w	r9, [pc, #428]	; bfd0 <rx_demux+0x1b8>
		LL_ASSERT(0);
    be24:	f8df a1ac 	ldr.w	sl, [pc, #428]	; bfd4 <rx_demux+0x1bc>
    be28:	f8df b1ac 	ldr.w	fp, [pc, #428]	; bfd8 <rx_demux+0x1c0>
{
    be2c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    be2e:	e9d8 0100 	ldrd	r0, r1, [r8]
    be32:	aa03      	add	r2, sp, #12
    be34:	f7fc ff7c 	bl	8d30 <memq_peek>
		if (link) {
    be38:	4605      	mov	r5, r0
    be3a:	2800      	cmp	r0, #0
    be3c:	d035      	beq.n	beaa <rx_demux+0x92>
			LL_ASSERT(rx);
    be3e:	9b03      	ldr	r3, [sp, #12]
    be40:	2b00      	cmp	r3, #0
    be42:	f000 80a6 	beq.w	bf92 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    be46:	7818      	ldrb	r0, [r3, #0]
    be48:	aa04      	add	r2, sp, #16
    be4a:	a902      	add	r1, sp, #8
    be4c:	f006 f8a8 	bl	11fa0 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    be50:	4604      	mov	r4, r0
    be52:	2800      	cmp	r0, #0
    be54:	d055      	beq.n	bf02 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    be56:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    be5a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    be5e:	780f      	ldrb	r7, [r1, #0]
    be60:	f8ad 200a 	strh.w	r2, [sp, #10]
    be64:	ae05      	add	r6, sp, #20
    be66:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    be68:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    be6c:	f006 f8b2 	bl	11fd4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    be70:	4621      	mov	r1, r4
    be72:	9a05      	ldr	r2, [sp, #20]
    be74:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    be78:	f006 f8f6 	bl	12068 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    be7c:	4620      	mov	r0, r4
    be7e:	f006 f867 	bl	11f50 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    be82:	4632      	mov	r2, r6
    be84:	4629      	mov	r1, r5
    be86:	4638      	mov	r0, r7
    be88:	f006 f88a 	bl	11fa0 <ull_conn_ack_by_last_peek>
	} while (link);
    be8c:	4604      	mov	r4, r0
    be8e:	2800      	cmp	r0, #0
    be90:	d1ec      	bne.n	be6c <rx_demux+0x54>
	k_sem_give(sem_recv);
    be92:	f8d9 0000 	ldr.w	r0, [r9]
    be96:	f00c f83d 	bl	17f14 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    be9a:	e9d8 0100 	ldrd	r0, r1, [r8]
    be9e:	aa03      	add	r2, sp, #12
    bea0:	f7fc ff46 	bl	8d30 <memq_peek>
		if (link) {
    bea4:	4605      	mov	r5, r0
    bea6:	2800      	cmp	r0, #0
    bea8:	d1c9      	bne.n	be3e <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    beaa:	aa04      	add	r2, sp, #16
    beac:	a902      	add	r1, sp, #8
    beae:	f10d 0007 	add.w	r0, sp, #7
    beb2:	f006 f859 	bl	11f68 <ull_conn_ack_peek>
			if (link) {
    beb6:	4604      	mov	r4, r0
    beb8:	2800      	cmp	r0, #0
    beba:	d067      	beq.n	bf8c <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    bebc:	9b04      	ldr	r3, [sp, #16]
    bebe:	9305      	str	r3, [sp, #20]
    bec0:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    bec4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    bec8:	f8ad 300a 	strh.w	r3, [sp, #10]
    becc:	ae05      	add	r6, sp, #20
    bece:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    bed2:	f006 f87f 	bl	11fd4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    bed6:	4621      	mov	r1, r4
    bed8:	9a05      	ldr	r2, [sp, #20]
    beda:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    bede:	f006 f8c3 	bl	12068 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    bee2:	4620      	mov	r0, r4
    bee4:	f006 f834 	bl	11f50 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    bee8:	4632      	mov	r2, r6
    beea:	4629      	mov	r1, r5
    beec:	4638      	mov	r0, r7
    beee:	f006 f857 	bl	11fa0 <ull_conn_ack_by_last_peek>
	} while (link);
    bef2:	4604      	mov	r4, r0
    bef4:	2800      	cmp	r0, #0
    bef6:	d1ec      	bne.n	bed2 <rx_demux+0xba>
	k_sem_give(sem_recv);
    bef8:	f8d9 0000 	ldr.w	r0, [r9]
    befc:	f00c f80a 	bl	17f14 <z_impl_k_sem_give>
			if (nack) {
    bf00:	e7cb      	b.n	be9a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    bf02:	9b03      	ldr	r3, [sp, #12]
    bf04:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    bf06:	791b      	ldrb	r3, [r3, #4]
    bf08:	3b01      	subs	r3, #1
    bf0a:	2b17      	cmp	r3, #23
    bf0c:	d80d      	bhi.n	bf2a <rx_demux+0x112>
    bf0e:	e8df f003 	tbb	[pc, r3]
    bf12:	0c1a      	.short	0x0c1a
    bf14:	0c1a0c38 	.word	0x0c1a0c38
    bf18:	0c0c0c0c 	.word	0x0c0c0c0c
    bf1c:	0c0c0c0c 	.word	0x0c0c0c0c
    bf20:	0c0c0c0c 	.word	0x0c0c0c0c
    bf24:	0c0c0c0c 	.word	0x0c0c0c0c
    bf28:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
    bf2a:	482c      	ldr	r0, [pc, #176]	; (bfdc <rx_demux+0x1c4>)
    bf2c:	f640 23b3 	movw	r3, #2739	; 0xab3
    bf30:	4652      	mov	r2, sl
    bf32:	4659      	mov	r1, fp
    bf34:	f00d fb2d 	bl	19592 <assert_print>
    bf38:	4040      	eors	r0, r0
    bf3a:	f380 8811 	msr	BASEPRI, r0
    bf3e:	f04f 0003 	mov.w	r0, #3
    bf42:	df02      	svc	2
			if (nack) {
    bf44:	e773      	b.n	be2e <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bf46:	4921      	ldr	r1, [pc, #132]	; (bfcc <rx_demux+0x1b4>)
    bf48:	f8d8 0004 	ldr.w	r0, [r8, #4]
    bf4c:	2200      	movs	r2, #0
    bf4e:	f7fc fef7 	bl	8d40 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bf52:	4b23      	ldr	r3, [pc, #140]	; (bfe0 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    bf54:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bf56:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bf58:	4628      	mov	r0, r5
    bf5a:	4a22      	ldr	r2, [pc, #136]	; (bfe4 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bf5c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bf5e:	f7fc fedd 	bl	8d1c <memq_enqueue>
	k_sem_give(sem_recv);
    bf62:	f8d9 0000 	ldr.w	r0, [r9]
    bf66:	f00b ffd5 	bl	17f14 <z_impl_k_sem_give>
			if (nack) {
    bf6a:	e796      	b.n	be9a <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bf6c:	4917      	ldr	r1, [pc, #92]	; (bfcc <rx_demux+0x1b4>)
    bf6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    bf72:	2200      	movs	r2, #0
    bf74:	f7fc fee4 	bl	8d40 <memq_dequeue>
		ull_conn_setup(link, rx);
    bf78:	9905      	ldr	r1, [sp, #20]
    bf7a:	4628      	mov	r0, r5
    bf7c:	f002 fe46 	bl	ec0c <ull_conn_setup>
			if (nack) {
    bf80:	e755      	b.n	be2e <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    bf82:	a905      	add	r1, sp, #20
    bf84:	4628      	mov	r0, r5
    bf86:	f002 fe69 	bl	ec5c <ull_conn_rx>
		if (nack) {
    bf8a:	b188      	cbz	r0, bfb0 <rx_demux+0x198>
}
    bf8c:	b007      	add	sp, #28
    bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    bf92:	4915      	ldr	r1, [pc, #84]	; (bfe8 <rx_demux+0x1d0>)
    bf94:	4811      	ldr	r0, [pc, #68]	; (bfdc <rx_demux+0x1c4>)
    bf96:	f640 133d 	movw	r3, #2365	; 0x93d
    bf9a:	4652      	mov	r2, sl
    bf9c:	f00d faf9 	bl	19592 <assert_print>
    bfa0:	4040      	eors	r0, r0
    bfa2:	f380 8811 	msr	BASEPRI, r0
    bfa6:	f04f 0003 	mov.w	r0, #3
    bfaa:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    bfac:	9b03      	ldr	r3, [sp, #12]
    bfae:	e74a      	b.n	be46 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    bfb0:	4906      	ldr	r1, [pc, #24]	; (bfcc <rx_demux+0x1b4>)
    bfb2:	4602      	mov	r2, r0
    bfb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    bfb8:	f7fc fec2 	bl	8d40 <memq_dequeue>
		if (rx) {
    bfbc:	9905      	ldr	r1, [sp, #20]
    bfbe:	2900      	cmp	r1, #0
    bfc0:	f43f af35 	beq.w	be2e <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bfc4:	4b06      	ldr	r3, [pc, #24]	; (bfe0 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bfc6:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bfc8:	795b      	ldrb	r3, [r3, #5]
    bfca:	e7c6      	b.n	bf5a <rx_demux+0x142>
    bfcc:	20001d18 	.word	0x20001d18
    bfd0:	20001d20 	.word	0x20001d20
    bfd4:	0001fd9c 	.word	0x0001fd9c
    bfd8:	0001fc54 	.word	0x0001fc54
    bfdc:	0001fbf4 	.word	0x0001fbf4
    bfe0:	2000056c 	.word	0x2000056c
    bfe4:	20001d0c 	.word	0x20001d0c
    bfe8:	0001fe08 	.word	0x0001fe08

0000bfec <ll_rx_get>:
{
    bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bff0:	4c31      	ldr	r4, [pc, #196]	; (c0b8 <ll_rx_get+0xcc>)
	mem_release(link, &mem_link_rx.free);
    bff2:	4f32      	ldr	r7, [pc, #200]	; (c0bc <ll_rx_get+0xd0>)
    bff4:	4e32      	ldr	r6, [pc, #200]	; (c0c0 <ll_rx_get+0xd4>)
{
    bff6:	b085      	sub	sp, #20
    bff8:	4689      	mov	r9, r1
    bffa:	9001      	str	r0, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    bffc:	f104 0a04 	add.w	sl, r4, #4
	mem_release(link, &mem_link_rx.free);
    c000:	f107 0b04 	add.w	fp, r7, #4
	*node_rx = NULL;
    c004:	9a01      	ldr	r2, [sp, #4]
    c006:	2300      	movs	r3, #0
    c008:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    c00a:	e9d6 0100 	ldrd	r0, r1, [r6]
    c00e:	aa03      	add	r2, sp, #12
    c010:	f7fc fe8e 	bl	8d30 <memq_peek>
	if (link) {
    c014:	4605      	mov	r5, r0
    c016:	2800      	cmp	r0, #0
    c018:	d03f      	beq.n	c09a <ll_rx_get+0xae>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c01a:	9b03      	ldr	r3, [sp, #12]
    c01c:	4651      	mov	r1, sl
    c01e:	781a      	ldrb	r2, [r3, #0]
    c020:	4648      	mov	r0, r9
    c022:	f7ff fd99 	bl	bb58 <tx_cmplt_get>
		if (!cmplt) {
    c026:	2800      	cmp	r0, #0
    c028:	d13c      	bne.n	c0a4 <ll_rx_get+0xb8>
			f = mfifo_tx_ack.f;
    c02a:	7923      	ldrb	r3, [r4, #4]
    c02c:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    c030:	7962      	ldrb	r2, [r4, #5]
    c032:	4680      	mov	r8, r0
    c034:	f10d 0109 	add.w	r1, sp, #9
    c038:	f10d 000a 	add.w	r0, sp, #10
    c03c:	f7ff fd8c 	bl	bb58 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    c040:	ea48 0200 	orr.w	r2, r8, r0
    c044:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    c048:	d1f2      	bne.n	c030 <ll_rx_get+0x44>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    c04a:	9b03      	ldr	r3, [sp, #12]
    c04c:	7919      	ldrb	r1, [r3, #4]
    c04e:	2901      	cmp	r1, #1
    c050:	d12b      	bne.n	c0aa <ll_rx_get+0xbe>
	(void)memq_dequeue(memq_ll_rx.tail,
    c052:	491b      	ldr	r1, [pc, #108]	; (c0c0 <ll_rx_get+0xd4>)
    c054:	6870      	ldr	r0, [r6, #4]
    c056:	f7fc fe73 	bl	8d40 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
    c05a:	4659      	mov	r1, fp
    c05c:	4628      	mov	r0, r5
    c05e:	f7fc fe13 	bl	8c88 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c062:	883b      	ldrh	r3, [r7, #0]
    c064:	2b04      	cmp	r3, #4
    c066:	d809      	bhi.n	c07c <ll_rx_get+0x90>
	mem_release(node_rx, &mem_pdu_rx.free);
    c068:	9803      	ldr	r0, [sp, #12]
    c06a:	4916      	ldr	r1, [pc, #88]	; (c0c4 <ll_rx_get+0xd8>)
	mem_link_rx.quota_pdu += delta;
    c06c:	3301      	adds	r3, #1
    c06e:	803b      	strh	r3, [r7, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
    c070:	f7fc fe0a 	bl	8c88 <mem_release>
	rx_replenish(1U);
    c074:	2001      	movs	r0, #1
    c076:	f7ff fdcf 	bl	bc18 <rx_replenish>
				goto ll_rx_get_again;
    c07a:	e7c3      	b.n	c004 <ll_rx_get+0x18>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c07c:	4a12      	ldr	r2, [pc, #72]	; (c0c8 <ll_rx_get+0xdc>)
    c07e:	4913      	ldr	r1, [pc, #76]	; (c0cc <ll_rx_get+0xe0>)
    c080:	4813      	ldr	r0, [pc, #76]	; (c0d0 <ll_rx_get+0xe4>)
    c082:	f240 633b 	movw	r3, #1595	; 0x63b
    c086:	f00d fa84 	bl	19592 <assert_print>
    c08a:	4040      	eors	r0, r0
    c08c:	f380 8811 	msr	BASEPRI, r0
    c090:	f04f 0003 	mov.w	r0, #3
    c094:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    c096:	883b      	ldrh	r3, [r7, #0]
    c098:	e7e6      	b.n	c068 <ll_rx_get+0x7c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    c09a:	7962      	ldrb	r2, [r4, #5]
    c09c:	490d      	ldr	r1, [pc, #52]	; (c0d4 <ll_rx_get+0xe8>)
    c09e:	4648      	mov	r0, r9
    c0a0:	f7ff fd5a 	bl	bb58 <tx_cmplt_get>
}
    c0a4:	b005      	add	sp, #20
    c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*node_rx = rx;
    c0aa:	9901      	ldr	r1, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c0ac:	4610      	mov	r0, r2
			*node_rx = rx;
    c0ae:	600b      	str	r3, [r1, #0]
}
    c0b0:	b005      	add	sp, #20
    c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0b6:	bf00      	nop
    c0b8:	2000056c 	.word	0x2000056c
    c0bc:	20001ad8 	.word	0x20001ad8
    c0c0:	20001d08 	.word	0x20001d08
    c0c4:	20001b28 	.word	0x20001b28
    c0c8:	0001fd9c 	.word	0x0001fd9c
    c0cc:	0001fe0c 	.word	0x0001fe0c
    c0d0:	0001fbf4 	.word	0x0001fbf4
    c0d4:	20000570 	.word	0x20000570

0000c0d8 <ll_rx_dequeue>:
{
    c0d8:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c0da:	495a      	ldr	r1, [pc, #360]	; (c244 <ll_rx_dequeue+0x16c>)
{
    c0dc:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    c0de:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c0e0:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    c0e2:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c0e4:	aa01      	add	r2, sp, #4
    c0e6:	f7fc fe2b 	bl	8d40 <memq_dequeue>
	LL_ASSERT(link);
    c0ea:	4604      	mov	r4, r0
    c0ec:	2800      	cmp	r0, #0
    c0ee:	d05c      	beq.n	c1aa <ll_rx_dequeue+0xd2>
	mem_release(link, &mem_link_rx.free);
    c0f0:	4955      	ldr	r1, [pc, #340]	; (c248 <ll_rx_dequeue+0x170>)
    c0f2:	4620      	mov	r0, r4
    c0f4:	f7fc fdc8 	bl	8c88 <mem_release>
	switch (rx->type) {
    c0f8:	9a01      	ldr	r2, [sp, #4]
    c0fa:	7913      	ldrb	r3, [r2, #4]
    c0fc:	2b1d      	cmp	r3, #29
    c0fe:	d810      	bhi.n	c122 <ll_rx_dequeue+0x4a>
    c100:	e8df f003 	tbb	[pc, r3]
    c104:	1e0f0f1e 	.word	0x1e0f0f1e
    c108:	0f0f1e0f 	.word	0x0f0f1e0f
    c10c:	0f0f0f0f 	.word	0x0f0f0f0f
    c110:	0f0f0f0f 	.word	0x0f0f0f0f
    c114:	0f0f0f0f 	.word	0x0f0f0f0f
    c118:	2f0f0f0f 	.word	0x2f0f0f0f
    c11c:	1e1e1e1e 	.word	0x1e1e1e1e
    c120:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
    c122:	4a4a      	ldr	r2, [pc, #296]	; (c24c <ll_rx_dequeue+0x174>)
    c124:	494a      	ldr	r1, [pc, #296]	; (c250 <ll_rx_dequeue+0x178>)
    c126:	484b      	ldr	r0, [pc, #300]	; (c254 <ll_rx_dequeue+0x17c>)
    c128:	f240 43fa 	movw	r3, #1274	; 0x4fa
    c12c:	f00d fa31 	bl	19592 <assert_print>
    c130:	4040      	eors	r0, r0
    c132:	f380 8811 	msr	BASEPRI, r0
    c136:	f04f 0003 	mov.w	r0, #3
    c13a:	df02      	svc	2
}
    c13c:	b002      	add	sp, #8
    c13e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    c140:	2b00      	cmp	r3, #0
    c142:	d1fb      	bne.n	c13c <ll_rx_dequeue+0x64>
    c144:	4a41      	ldr	r2, [pc, #260]	; (c24c <ll_rx_dequeue+0x174>)
    c146:	4944      	ldr	r1, [pc, #272]	; (c258 <ll_rx_dequeue+0x180>)
    c148:	4842      	ldr	r0, [pc, #264]	; (c254 <ll_rx_dequeue+0x17c>)
    c14a:	f240 43f6 	movw	r3, #1270	; 0x4f6
    c14e:	f00d fa20 	bl	19592 <assert_print>
    c152:	4040      	eors	r0, r0
    c154:	f380 8811 	msr	BASEPRI, r0
    c158:	f04f 0003 	mov.w	r0, #3
    c15c:	df02      	svc	2
}
    c15e:	b002      	add	sp, #8
    c160:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    c162:	7f13      	ldrb	r3, [r2, #28]
    c164:	2b3c      	cmp	r3, #60	; 0x3c
    c166:	d02e      	beq.n	c1c6 <ll_rx_dequeue+0xee>
    c168:	7f53      	ldrb	r3, [r2, #29]
    c16a:	b183      	cbz	r3, c18e <ll_rx_dequeue+0xb6>
			adv = HDR_LLL2ULL(lll);
    c16c:	6893      	ldr	r3, [r2, #8]
    c16e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    c170:	6e60      	ldr	r0, [r4, #100]	; 0x64
    c172:	b120      	cbz	r0, c17e <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
    c174:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
    c176:	4939      	ldr	r1, [pc, #228]	; (c25c <ll_rx_dequeue+0x184>)
					adv->node_rx_cc_free = NULL;
    c178:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
    c17a:	f7fc fd85 	bl	8c88 <mem_release>
			adv->is_enabled = 0U;
    c17e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    c182:	f36f 0300 	bfc	r3, #0, #1
    c186:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    c18a:	b002      	add	sp, #8
    c18c:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    c18e:	4a2f      	ldr	r2, [pc, #188]	; (c24c <ll_rx_dequeue+0x174>)
    c190:	492f      	ldr	r1, [pc, #188]	; (c250 <ll_rx_dequeue+0x178>)
    c192:	4830      	ldr	r0, [pc, #192]	; (c254 <ll_rx_dequeue+0x17c>)
    c194:	f240 4383 	movw	r3, #1155	; 0x483
    c198:	f00d f9fb 	bl	19592 <assert_print>
    c19c:	4040      	eors	r0, r0
    c19e:	f380 8811 	msr	BASEPRI, r0
    c1a2:	f04f 0003 	mov.w	r0, #3
    c1a6:	df02      	svc	2
    c1a8:	e7c8      	b.n	c13c <ll_rx_dequeue+0x64>
	LL_ASSERT(link);
    c1aa:	4a28      	ldr	r2, [pc, #160]	; (c24c <ll_rx_dequeue+0x174>)
    c1ac:	492c      	ldr	r1, [pc, #176]	; (c260 <ll_rx_dequeue+0x188>)
    c1ae:	4829      	ldr	r0, [pc, #164]	; (c254 <ll_rx_dequeue+0x17c>)
    c1b0:	f44f 7374 	mov.w	r3, #976	; 0x3d0
    c1b4:	f00d f9ed 	bl	19592 <assert_print>
    c1b8:	4040      	eors	r0, r0
    c1ba:	f380 8811 	msr	BASEPRI, r0
    c1be:	f04f 0003 	mov.w	r0, #3
    c1c2:	df02      	svc	2
    c1c4:	e794      	b.n	c0f0 <ll_rx_dequeue+0x18>
			lll = ftr->param;
    c1c6:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    c1c8:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    c1cc:	b1ed      	cbz	r5, c20a <ll_rx_dequeue+0x132>
				LL_ASSERT(!conn_lll->link_tx_free);
    c1ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
    c1d0:	2200      	movs	r2, #0
    c1d2:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    c1d4:	b163      	cbz	r3, c1f0 <ll_rx_dequeue+0x118>
    c1d6:	4a1d      	ldr	r2, [pc, #116]	; (c24c <ll_rx_dequeue+0x174>)
    c1d8:	4922      	ldr	r1, [pc, #136]	; (c264 <ll_rx_dequeue+0x18c>)
    c1da:	481e      	ldr	r0, [pc, #120]	; (c254 <ll_rx_dequeue+0x17c>)
    c1dc:	f240 4349 	movw	r3, #1097	; 0x449
    c1e0:	f00d f9d7 	bl	19592 <assert_print>
    c1e4:	4040      	eors	r0, r0
    c1e6:	f380 8811 	msr	BASEPRI, r0
    c1ea:	f04f 0003 	mov.w	r0, #3
    c1ee:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    c1f0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    c1f4:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c1f8:	f7fc fd86 	bl	8d08 <memq_deinit>
				LL_ASSERT(link);
    c1fc:	4606      	mov	r6, r0
    c1fe:	b190      	cbz	r0, c226 <ll_rx_dequeue+0x14e>
				ll_conn_release(conn);
    c200:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    c202:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
    c204:	f002 f9aa 	bl	e55c <ll_conn_release>
    c208:	e7b9      	b.n	c17e <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
    c20a:	4a10      	ldr	r2, [pc, #64]	; (c24c <ll_rx_dequeue+0x174>)
    c20c:	4916      	ldr	r1, [pc, #88]	; (c268 <ll_rx_dequeue+0x190>)
    c20e:	4811      	ldr	r0, [pc, #68]	; (c254 <ll_rx_dequeue+0x17c>)
    c210:	f240 4346 	movw	r3, #1094	; 0x446
    c214:	f00d f9bd 	bl	19592 <assert_print>
    c218:	4040      	eors	r0, r0
    c21a:	f380 8811 	msr	BASEPRI, r0
    c21e:	f04f 0003 	mov.w	r0, #3
    c222:	df02      	svc	2
    c224:	e7d3      	b.n	c1ce <ll_rx_dequeue+0xf6>
				LL_ASSERT(link);
    c226:	4a09      	ldr	r2, [pc, #36]	; (c24c <ll_rx_dequeue+0x174>)
    c228:	490d      	ldr	r1, [pc, #52]	; (c260 <ll_rx_dequeue+0x188>)
    c22a:	480a      	ldr	r0, [pc, #40]	; (c254 <ll_rx_dequeue+0x17c>)
    c22c:	f240 434c 	movw	r3, #1100	; 0x44c
    c230:	f00d f9af 	bl	19592 <assert_print>
    c234:	4040      	eors	r0, r0
    c236:	f380 8811 	msr	BASEPRI, r0
    c23a:	f04f 0003 	mov.w	r0, #3
    c23e:	df02      	svc	2
    c240:	e7de      	b.n	c200 <ll_rx_dequeue+0x128>
    c242:	bf00      	nop
    c244:	20001d08 	.word	0x20001d08
    c248:	20001adc 	.word	0x20001adc
    c24c:	0001fd9c 	.word	0x0001fd9c
    c250:	0001fc54 	.word	0x0001fc54
    c254:	0001fbf4 	.word	0x0001fbf4
    c258:	0001fe6c 	.word	0x0001fe6c
    c25c:	20001b28 	.word	0x20001b28
    c260:	00020198 	.word	0x00020198
    c264:	0001fe54 	.word	0x0001fe54
    c268:	0001fe48 	.word	0x0001fe48

0000c26c <ll_rx_mem_release>:
{
    c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    c270:	6804      	ldr	r4, [r0, #0]
{
    c272:	4680      	mov	r8, r0
	while (rx) {
    c274:	b344      	cbz	r4, c2c8 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    c276:	4f56      	ldr	r7, [pc, #344]	; (c3d0 <ll_rx_mem_release+0x164>)
    c278:	f8df 9158 	ldr.w	r9, [pc, #344]	; c3d4 <ll_rx_mem_release+0x168>
    c27c:	4e56      	ldr	r6, [pc, #344]	; (c3d8 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
    c27e:	4625      	mov	r5, r4
    c280:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    c282:	792b      	ldrb	r3, [r5, #4]
    c284:	2b1d      	cmp	r3, #29
    c286:	d810      	bhi.n	c2aa <ll_rx_mem_release+0x3e>
    c288:	e8df f003 	tbb	[pc, r3]
    c28c:	380f0f38 	.word	0x380f0f38
    c290:	0f0f380f 	.word	0x0f0f380f
    c294:	0f0f0f0f 	.word	0x0f0f0f0f
    c298:	0f0f0f0f 	.word	0x0f0f0f0f
    c29c:	0f0f0f0f 	.word	0x0f0f0f0f
    c2a0:	260f0f0f 	.word	0x260f0f0f
    c2a4:	38383856 	.word	0x38383856
    c2a8:	3838      	.short	0x3838
			LL_ASSERT(0);
    c2aa:	f240 632f 	movw	r3, #1583	; 0x62f
    c2ae:	463a      	mov	r2, r7
    c2b0:	4649      	mov	r1, r9
    c2b2:	4630      	mov	r0, r6
    c2b4:	f00d f96d 	bl	19592 <assert_print>
    c2b8:	4040      	eors	r0, r0
    c2ba:	f380 8811 	msr	BASEPRI, r0
    c2be:	f04f 0003 	mov.w	r0, #3
    c2c2:	df02      	svc	2
	while (rx) {
    c2c4:	2c00      	cmp	r4, #0
    c2c6:	d1da      	bne.n	c27e <ll_rx_mem_release+0x12>
	*node_rx = rx;
    c2c8:	2300      	movs	r3, #0
    c2ca:	f8c8 3000 	str.w	r3, [r8]
	rx_replenish(UINT8_MAX);
    c2ce:	20ff      	movs	r0, #255	; 0xff
}
    c2d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
    c2d4:	f7ff bca0 	b.w	bc18 <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    c2d8:	7f2b      	ldrb	r3, [r5, #28]
    c2da:	2b3c      	cmp	r3, #60	; 0x3c
    c2dc:	d062      	beq.n	c3a4 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
    c2de:	b1db      	cbz	r3, c318 <ll_rx_mem_release+0xac>
    c2e0:	493e      	ldr	r1, [pc, #248]	; (c3dc <ll_rx_mem_release+0x170>)
    c2e2:	f240 535e 	movw	r3, #1374	; 0x55e
    c2e6:	463a      	mov	r2, r7
    c2e8:	4630      	mov	r0, r6
    c2ea:	f00d f952 	bl	19592 <assert_print>
    c2ee:	4040      	eors	r0, r0
    c2f0:	f380 8811 	msr	BASEPRI, r0
    c2f4:	f04f 0003 	mov.w	r0, #3
    c2f8:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    c2fa:	792b      	ldrb	r3, [r5, #4]
    c2fc:	b963      	cbnz	r3, c318 <ll_rx_mem_release+0xac>
    c2fe:	4938      	ldr	r1, [pc, #224]	; (c3e0 <ll_rx_mem_release+0x174>)
    c300:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
    c304:	463a      	mov	r2, r7
    c306:	4630      	mov	r0, r6
    c308:	f00d f943 	bl	19592 <assert_print>
    c30c:	4040      	eors	r0, r0
    c30e:	f380 8811 	msr	BASEPRI, r0
    c312:	f04f 0003 	mov.w	r0, #3
    c316:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c3e4 <ll_rx_mem_release+0x178>
    c31c:	f8ba 3000 	ldrh.w	r3, [sl]
    c320:	2b04      	cmp	r3, #4
    c322:	d82f      	bhi.n	c384 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
    c324:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
    c326:	4930      	ldr	r1, [pc, #192]	; (c3e8 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
    c328:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
    c32c:	4628      	mov	r0, r5
    c32e:	f7fc fcab 	bl	8c88 <mem_release>
	while (rx) {
    c332:	2c00      	cmp	r4, #0
    c334:	d1a3      	bne.n	c27e <ll_rx_mem_release+0x12>
    c336:	e7c7      	b.n	c2c8 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    c338:	88e8      	ldrh	r0, [r5, #6]
    c33a:	2800      	cmp	r0, #0
    c33c:	d1c2      	bne.n	c2c4 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    c33e:	f002 f91b 	bl	e578 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    c342:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
    c344:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    c346:	b163      	cbz	r3, c362 <ll_rx_mem_release+0xf6>
    c348:	4928      	ldr	r1, [pc, #160]	; (c3ec <ll_rx_mem_release+0x180>)
    c34a:	f240 6321 	movw	r3, #1569	; 0x621
    c34e:	463a      	mov	r2, r7
    c350:	4630      	mov	r0, r6
    c352:	f00d f91e 	bl	19592 <assert_print>
    c356:	4040      	eors	r0, r0
    c358:	f380 8811 	msr	BASEPRI, r0
    c35c:	f04f 0003 	mov.w	r0, #3
    c360:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    c362:	f105 0168 	add.w	r1, r5, #104	; 0x68
    c366:	f105 0064 	add.w	r0, r5, #100	; 0x64
    c36a:	f7fc fccd 	bl	8d08 <memq_deinit>
				LL_ASSERT(link);
    c36e:	4682      	mov	sl, r0
    c370:	b300      	cbz	r0, c3b4 <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
    c372:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
    c376:	4628      	mov	r0, r5
    c378:	f002 f8f0 	bl	e55c <ll_conn_release>
	while (rx) {
    c37c:	2c00      	cmp	r4, #0
    c37e:	f47f af7e 	bne.w	c27e <ll_rx_mem_release+0x12>
    c382:	e7a1      	b.n	c2c8 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c384:	491a      	ldr	r1, [pc, #104]	; (c3f0 <ll_rx_mem_release+0x184>)
    c386:	f240 633b 	movw	r3, #1595	; 0x63b
    c38a:	463a      	mov	r2, r7
    c38c:	4630      	mov	r0, r6
    c38e:	f00d f900 	bl	19592 <assert_print>
    c392:	4040      	eors	r0, r0
    c394:	f380 8811 	msr	BASEPRI, r0
    c398:	f04f 0003 	mov.w	r0, #3
    c39c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    c39e:	f8ba 3000 	ldrh.w	r3, [sl]
    c3a2:	e7bf      	b.n	c324 <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
    c3a4:	4910      	ldr	r1, [pc, #64]	; (c3e8 <ll_rx_mem_release+0x17c>)
    c3a6:	4628      	mov	r0, r5
    c3a8:	f7fc fc6e 	bl	8c88 <mem_release>
	while (rx) {
    c3ac:	2c00      	cmp	r4, #0
    c3ae:	f47f af66 	bne.w	c27e <ll_rx_mem_release+0x12>
    c3b2:	e789      	b.n	c2c8 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    c3b4:	490f      	ldr	r1, [pc, #60]	; (c3f4 <ll_rx_mem_release+0x188>)
    c3b6:	f240 6324 	movw	r3, #1572	; 0x624
    c3ba:	463a      	mov	r2, r7
    c3bc:	4630      	mov	r0, r6
    c3be:	f00d f8e8 	bl	19592 <assert_print>
    c3c2:	4040      	eors	r0, r0
    c3c4:	f380 8811 	msr	BASEPRI, r0
    c3c8:	f04f 0003 	mov.w	r0, #3
    c3cc:	df02      	svc	2
    c3ce:	e7d0      	b.n	c372 <ll_rx_mem_release+0x106>
    c3d0:	0001fd9c 	.word	0x0001fd9c
    c3d4:	0001fc54 	.word	0x0001fc54
    c3d8:	0001fbf4 	.word	0x0001fbf4
    c3dc:	0001fe8c 	.word	0x0001fe8c
    c3e0:	0001fe98 	.word	0x0001fe98
    c3e4:	20001ad8 	.word	0x20001ad8
    c3e8:	20001b28 	.word	0x20001b28
    c3ec:	0001febc 	.word	0x0001febc
    c3f0:	0001fe0c 	.word	0x0001fe0c
    c3f4:	00020198 	.word	0x00020198

0000c3f8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    c3f8:	4801      	ldr	r0, [pc, #4]	; (c400 <ll_rx_link_alloc+0x8>)
    c3fa:	f7fc bc2b 	b.w	8c54 <mem_acquire>
    c3fe:	bf00      	nop
    c400:	20001adc 	.word	0x20001adc

0000c404 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    c404:	4901      	ldr	r1, [pc, #4]	; (c40c <ll_rx_link_release+0x8>)
    c406:	f7fc bc3f 	b.w	8c88 <mem_release>
    c40a:	bf00      	nop
    c40c:	20001adc 	.word	0x20001adc

0000c410 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    c410:	4801      	ldr	r0, [pc, #4]	; (c418 <ll_rx_alloc+0x8>)
    c412:	f7fc bc1f 	b.w	8c54 <mem_acquire>
    c416:	bf00      	nop
    c418:	20001b28 	.word	0x20001b28

0000c41c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    c41c:	4901      	ldr	r1, [pc, #4]	; (c424 <ll_rx_release+0x8>)
    c41e:	f7fc bc33 	b.w	8c88 <mem_release>
    c422:	bf00      	nop
    c424:	20001b28 	.word	0x20001b28

0000c428 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    c428:	4b02      	ldr	r3, [pc, #8]	; (c434 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    c42a:	4a03      	ldr	r2, [pc, #12]	; (c438 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    c42c:	795b      	ldrb	r3, [r3, #5]
    c42e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    c430:	f7fc bc74 	b.w	8d1c <memq_enqueue>
    c434:	2000056c 	.word	0x2000056c
    c438:	20001d0c 	.word	0x20001d0c

0000c43c <ll_rx_sched>:
	k_sem_give(sem_recv);
    c43c:	4b01      	ldr	r3, [pc, #4]	; (c444 <ll_rx_sched+0x8>)
    c43e:	6818      	ldr	r0, [r3, #0]
    c440:	f00b bd68 	b.w	17f14 <z_impl_k_sem_give>
    c444:	20001d20 	.word	0x20001d20

0000c448 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    c448:	4b0e      	ldr	r3, [pc, #56]	; (c484 <ll_pdu_rx_alloc_peek+0x3c>)
    c44a:	7919      	ldrb	r1, [r3, #4]
    c44c:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
    c44e:	4291      	cmp	r1, r2
    c450:	d80a      	bhi.n	c468 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    c452:	eba2 0c01 	sub.w	ip, r2, r1
    c456:	fa5f fc8c 	uxtb.w	ip, ip
    c45a:	4560      	cmp	r0, ip
    c45c:	d802      	bhi.n	c464 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    c45e:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    c460:	7818      	ldrb	r0, [r3, #0]
    c462:	d10a      	bne.n	c47a <ll_pdu_rx_alloc_peek+0x32>
		return NULL;
    c464:	2000      	movs	r0, #0
}
    c466:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    c468:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
    c46c:	ebac 0c01 	sub.w	ip, ip, r1
    c470:	4462      	add	r2, ip
    c472:	b2d2      	uxtb	r2, r2
    c474:	4290      	cmp	r0, r2
    c476:	d8f5      	bhi.n	c464 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    c478:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    c47a:	fb01 3300 	mla	r3, r1, r0, r3
    c47e:	6898      	ldr	r0, [r3, #8]
    c480:	4770      	bx	lr
    c482:	bf00      	nop
    c484:	20000438 	.word	0x20000438

0000c488 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    c488:	4b09      	ldr	r3, [pc, #36]	; (c4b0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    c48a:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    c48c:	795a      	ldrb	r2, [r3, #5]
    c48e:	7818      	ldrb	r0, [r3, #0]
    c490:	f893 c002 	ldrb.w	ip, [r3, #2]
    c494:	428a      	cmp	r2, r1
    c496:	d009      	beq.n	c4ac <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    c498:	1c4a      	adds	r2, r1, #1
    c49a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    c49c:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    c4a0:	4594      	cmp	ip, r2
    c4a2:	bf08      	it	eq
    c4a4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    c4a6:	6888      	ldr	r0, [r1, #8]
	}

	*first = _first; /* Write back read-index */
    c4a8:	711a      	strb	r2, [r3, #4]

	return mem;
    c4aa:	4770      	bx	lr
		return NULL;
    c4ac:	2000      	movs	r0, #0
}
    c4ae:	4770      	bx	lr
    c4b0:	20000438 	.word	0x20000438

0000c4b4 <ll_tx_ack_put>:
{
    c4b4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    c4b6:	4a15      	ldr	r2, [pc, #84]	; (c50c <ll_tx_ack_put+0x58>)
    c4b8:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
    c4bc:	7894      	ldrb	r4, [r2, #2]
    c4be:	f892 e004 	ldrb.w	lr, [r2, #4]
    c4c2:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    c4c4:	f10c 0301 	add.w	r3, ip, #1
    c4c8:	b2db      	uxtb	r3, r3
		last = 0U;
    c4ca:	429c      	cmp	r4, r3
    c4cc:	bf08      	it	eq
    c4ce:	2300      	moveq	r3, #0
	if (last == first) {
    c4d0:	459e      	cmp	lr, r3
    c4d2:	d00a      	beq.n	c4ea <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c4d4:	fb1c fc05 	smulbb	ip, ip, r5
    c4d8:	f102 0e08 	add.w	lr, r2, #8
	tx->handle = handle;
    c4dc:	f82e 000c 	strh.w	r0, [lr, ip]
    c4e0:	44f4      	add	ip, lr
	tx->node = node_tx;
    c4e2:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    c4e6:	7153      	strb	r3, [r2, #5]
}
    c4e8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    c4ea:	4a09      	ldr	r2, [pc, #36]	; (c510 <ll_tx_ack_put+0x5c>)
    c4ec:	4909      	ldr	r1, [pc, #36]	; (c514 <ll_tx_ack_put+0x60>)
    c4ee:	480a      	ldr	r0, [pc, #40]	; (c518 <ll_tx_ack_put+0x64>)
    c4f0:	f240 638f 	movw	r3, #1679	; 0x68f
    c4f4:	f00d f84d 	bl	19592 <assert_print>
    c4f8:	4040      	eors	r0, r0
    c4fa:	f380 8811 	msr	BASEPRI, r0
    c4fe:	f04f 0003 	mov.w	r0, #3
    c502:	df02      	svc	2
	tx->handle = handle;
    c504:	2300      	movs	r3, #0
    c506:	801b      	strh	r3, [r3, #0]
    c508:	deff      	udf	#255	; 0xff
    c50a:	bf00      	nop
    c50c:	2000056c 	.word	0x2000056c
    c510:	0001fd9c 	.word	0x0001fd9c
    c514:	0002018c 	.word	0x0002018c
    c518:	0001fbf4 	.word	0x0001fbf4

0000c51c <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c51c:	f030 0302 	bics.w	r3, r0, #2
{
    c520:	b510      	push	{r4, lr}
    c522:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c524:	d002      	beq.n	c52c <ull_ticker_status_take+0x10>
    c526:	680b      	ldr	r3, [r1, #0]
    c528:	2b02      	cmp	r3, #2
    c52a:	d008      	beq.n	c53e <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    c52c:	f04f 32ff 	mov.w	r2, #4294967295
    c530:	f04f 33ff 	mov.w	r3, #4294967295
    c534:	4809      	ldr	r0, [pc, #36]	; (c55c <ull_ticker_status_take+0x40>)
    c536:	f00b fd13 	bl	17f60 <z_impl_k_sem_take>
	return *ret_cb;
    c53a:	6820      	ldr	r0, [r4, #0]
}
    c53c:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c53e:	4a08      	ldr	r2, [pc, #32]	; (c560 <ull_ticker_status_take+0x44>)
    c540:	4908      	ldr	r1, [pc, #32]	; (c564 <ull_ticker_status_take+0x48>)
    c542:	4809      	ldr	r0, [pc, #36]	; (c568 <ull_ticker_status_take+0x4c>)
    c544:	f240 63c3 	movw	r3, #1731	; 0x6c3
    c548:	f00d f823 	bl	19592 <assert_print>
    c54c:	4040      	eors	r0, r0
    c54e:	f380 8811 	msr	BASEPRI, r0
    c552:	f04f 0003 	mov.w	r0, #3
    c556:	df02      	svc	2
    c558:	e7e8      	b.n	c52c <ull_ticker_status_take+0x10>
    c55a:	bf00      	nop
    c55c:	20001d24 	.word	0x20001d24
    c560:	0001fd9c 	.word	0x0001fd9c
    c564:	0001fedc 	.word	0x0001fedc
    c568:	0001fbf4 	.word	0x0001fbf4

0000c56c <ull_disable_mark>:
	if (!*m) {
    c56c:	4a03      	ldr	r2, [pc, #12]	; (c57c <ull_disable_mark+0x10>)
{
    c56e:	4603      	mov	r3, r0
	if (!*m) {
    c570:	6810      	ldr	r0, [r2, #0]
    c572:	b100      	cbz	r0, c576 <ull_disable_mark+0xa>
}
    c574:	4770      	bx	lr
		*m = param;
    c576:	6013      	str	r3, [r2, #0]
    c578:	4618      	mov	r0, r3
}
    c57a:	4770      	bx	lr
    c57c:	20001aa4 	.word	0x20001aa4

0000c580 <ull_disable_unmark>:
	if (*m && *m == param) {
    c580:	4a04      	ldr	r2, [pc, #16]	; (c594 <ull_disable_unmark+0x14>)
    c582:	6813      	ldr	r3, [r2, #0]
    c584:	b123      	cbz	r3, c590 <ull_disable_unmark+0x10>
    c586:	4298      	cmp	r0, r3
		*m = NULL;
    c588:	bf06      	itte	eq
    c58a:	2100      	moveq	r1, #0
    c58c:	6011      	streq	r1, [r2, #0]
	return NULL;
    c58e:	2300      	movne	r3, #0
}
    c590:	4618      	mov	r0, r3
    c592:	4770      	bx	lr
    c594:	20001aa4 	.word	0x20001aa4

0000c598 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    c598:	4b01      	ldr	r3, [pc, #4]	; (c5a0 <ull_disable_mark_get+0x8>)
}
    c59a:	6818      	ldr	r0, [r3, #0]
    c59c:	4770      	bx	lr
    c59e:	bf00      	nop
    c5a0:	20001aa4 	.word	0x20001aa4

0000c5a4 <ull_update_mark>:
	if (!*m) {
    c5a4:	4a03      	ldr	r2, [pc, #12]	; (c5b4 <ull_update_mark+0x10>)
{
    c5a6:	4603      	mov	r3, r0
	if (!*m) {
    c5a8:	6810      	ldr	r0, [r2, #0]
    c5aa:	b100      	cbz	r0, c5ae <ull_update_mark+0xa>
}
    c5ac:	4770      	bx	lr
		*m = param;
    c5ae:	6013      	str	r3, [r2, #0]
    c5b0:	4618      	mov	r0, r3
}
    c5b2:	4770      	bx	lr
    c5b4:	20001aa8 	.word	0x20001aa8

0000c5b8 <ull_update_unmark>:
	if (*m && *m == param) {
    c5b8:	4a04      	ldr	r2, [pc, #16]	; (c5cc <ull_update_unmark+0x14>)
    c5ba:	6813      	ldr	r3, [r2, #0]
    c5bc:	b123      	cbz	r3, c5c8 <ull_update_unmark+0x10>
    c5be:	4298      	cmp	r0, r3
		*m = NULL;
    c5c0:	bf06      	itte	eq
    c5c2:	2100      	moveq	r1, #0
    c5c4:	6011      	streq	r1, [r2, #0]
	return NULL;
    c5c6:	2300      	movne	r3, #0
}
    c5c8:	4618      	mov	r0, r3
    c5ca:	4770      	bx	lr
    c5cc:	20001aa8 	.word	0x20001aa8

0000c5d0 <ull_update_mark_get>:
	return mark_get(mark_update);
    c5d0:	4b01      	ldr	r3, [pc, #4]	; (c5d8 <ull_update_mark_get+0x8>)
}
    c5d2:	6818      	ldr	r0, [r3, #0]
    c5d4:	4770      	bx	lr
    c5d6:	bf00      	nop
    c5d8:	20001aa8 	.word	0x20001aa8

0000c5dc <ull_disable>:
{
    c5dc:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    c5de:	6805      	ldr	r5, [r0, #0]
    c5e0:	782b      	ldrb	r3, [r5, #0]
{
    c5e2:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
    c5e4:	b353      	cbz	r3, c63c <ull_disable+0x60>
	compiler_barrier();
    c5e6:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    c5e8:	2201      	movs	r2, #1
    c5ea:	2100      	movs	r1, #0
    c5ec:	4668      	mov	r0, sp
    c5ee:	f012 f970 	bl	1e8d2 <z_impl_k_sem_init>
    c5f2:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    c5f4:	4a13      	ldr	r2, [pc, #76]	; (c644 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    c5f6:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    c5fa:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    c5fc:	b1f3      	cbz	r3, c63c <ull_disable+0x60>
	mfy.param = lll;
    c5fe:	4b12      	ldr	r3, [pc, #72]	; (c648 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    c600:	2200      	movs	r2, #0
    c602:	4611      	mov	r1, r2
    c604:	2003      	movs	r0, #3
	mfy.param = lll;
    c606:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    c608:	f7fc fbfc 	bl	8e04 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c60c:	b940      	cbnz	r0, c620 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    c60e:	f04f 32ff 	mov.w	r2, #4294967295
    c612:	f04f 33ff 	mov.w	r3, #4294967295
    c616:	4668      	mov	r0, sp
    c618:	f00b fca2 	bl	17f60 <z_impl_k_sem_take>
}
    c61c:	b007      	add	sp, #28
    c61e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    c620:	4a0a      	ldr	r2, [pc, #40]	; (c64c <ull_disable+0x70>)
    c622:	490b      	ldr	r1, [pc, #44]	; (c650 <ull_disable+0x74>)
    c624:	480b      	ldr	r0, [pc, #44]	; (c654 <ull_disable+0x78>)
    c626:	f44f 63e8 	mov.w	r3, #1856	; 0x740
    c62a:	f00c ffb2 	bl	19592 <assert_print>
    c62e:	4040      	eors	r0, r0
    c630:	f380 8811 	msr	BASEPRI, r0
    c634:	f04f 0003 	mov.w	r0, #3
    c638:	df02      	svc	2
    c63a:	e7e8      	b.n	c60e <ull_disable+0x32>
		return -EALREADY;
    c63c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c640:	e7ec      	b.n	c61c <ull_disable+0x40>
    c642:	bf00      	nop
    c644:	0000bb55 	.word	0x0000bb55
    c648:	200005d4 	.word	0x200005d4
    c64c:	0001fd9c 	.word	0x0001fd9c
    c650:	0001fed4 	.word	0x0001fed4
    c654:	0001fbf4 	.word	0x0001fbf4

0000c658 <ull_ticker_stop_with_mark>:
{
    c658:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    c65a:	4e20      	ldr	r6, [pc, #128]	; (c6dc <ull_ticker_stop_with_mark+0x84>)
    c65c:	6833      	ldr	r3, [r6, #0]
{
    c65e:	b085      	sub	sp, #20
    c660:	460c      	mov	r4, r1
    c662:	4617      	mov	r7, r2
	if (!*m) {
    c664:	b353      	cbz	r3, c6bc <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
    c666:	4299      	cmp	r1, r3
    c668:	d113      	bne.n	c692 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    c66a:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    c66c:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    c66e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    c670:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    c672:	9500      	str	r5, [sp, #0]
    c674:	4b1a      	ldr	r3, [pc, #104]	; (c6e0 <ull_ticker_stop_with_mark+0x88>)
    c676:	2103      	movs	r1, #3
    c678:	2000      	movs	r0, #0
    c67a:	f7fd fd8f 	bl	a19c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    c67e:	4629      	mov	r1, r5
    c680:	f7ff ff4c 	bl	c51c <ull_ticker_status_take>
	if (ret) {
    c684:	4605      	mov	r5, r0
    c686:	b140      	cbz	r0, c69a <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
    c688:	6833      	ldr	r3, [r6, #0]
    c68a:	b10b      	cbz	r3, c690 <ull_ticker_stop_with_mark+0x38>
    c68c:	429c      	cmp	r4, r3
    c68e:	d017      	beq.n	c6c0 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
    c690:	b304      	cbz	r4, c6d4 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
    c692:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    c696:	b005      	add	sp, #20
    c698:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    c69a:	4638      	mov	r0, r7
    c69c:	f7ff ff9e 	bl	c5dc <ull_disable>
	if (*m && *m == param) {
    c6a0:	6833      	ldr	r3, [r6, #0]
    c6a2:	b10b      	cbz	r3, c6a8 <ull_ticker_stop_with_mark+0x50>
    c6a4:	429c      	cmp	r4, r3
    c6a6:	d011      	beq.n	c6cc <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
    c6a8:	2c00      	cmp	r4, #0
    c6aa:	d1f2      	bne.n	c692 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
    c6ac:	2800      	cmp	r0, #0
    c6ae:	d0f2      	beq.n	c696 <ull_ticker_stop_with_mark+0x3e>
	return 0;
    c6b0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    c6b4:	bf08      	it	eq
    c6b6:	2000      	moveq	r0, #0
}
    c6b8:	b005      	add	sp, #20
    c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    c6bc:	6031      	str	r1, [r6, #0]
	if (mark != param) {
    c6be:	e7d4      	b.n	c66a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    c6c0:	2300      	movs	r3, #0
		return -EALREADY;
    c6c2:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    c6c6:	6033      	str	r3, [r6, #0]
}
    c6c8:	b005      	add	sp, #20
    c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    c6cc:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
    c6ce:	2800      	cmp	r0, #0
    c6d0:	d0e1      	beq.n	c696 <ull_ticker_stop_with_mark+0x3e>
    c6d2:	e7ed      	b.n	c6b0 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
    c6d4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c6d8:	e7dd      	b.n	c696 <ull_ticker_stop_with_mark+0x3e>
    c6da:	bf00      	nop
    c6dc:	20001aa4 	.word	0x20001aa4
    c6e0:	0000bb49 	.word	0x0000bb49

0000c6e4 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    c6e4:	4b0e      	ldr	r3, [pc, #56]	; (c720 <ull_pdu_rx_alloc_peek+0x3c>)
    c6e6:	7919      	ldrb	r1, [r3, #4]
    c6e8:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
    c6ea:	4291      	cmp	r1, r2
    c6ec:	d80a      	bhi.n	c704 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    c6ee:	eba2 0c01 	sub.w	ip, r2, r1
    c6f2:	fa5f fc8c 	uxtb.w	ip, ip
    c6f6:	4560      	cmp	r0, ip
    c6f8:	d802      	bhi.n	c700 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    c6fa:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    c6fc:	7818      	ldrb	r0, [r3, #0]
    c6fe:	d10a      	bne.n	c716 <ull_pdu_rx_alloc_peek+0x32>
		return NULL;
    c700:	2000      	movs	r0, #0
}
    c702:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    c704:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
    c708:	ebac 0c01 	sub.w	ip, ip, r1
    c70c:	4462      	add	r2, ip
    c70e:	b2d2      	uxtb	r2, r2
    c710:	4290      	cmp	r0, r2
    c712:	d8f5      	bhi.n	c700 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    c714:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    c716:	fb01 3300 	mla	r3, r1, r0, r3
    c71a:	6898      	ldr	r0, [r3, #8]
    c71c:	4770      	bx	lr
    c71e:	bf00      	nop
    c720:	20000448 	.word	0x20000448

0000c724 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    c724:	4b09      	ldr	r3, [pc, #36]	; (c74c <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    c726:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    c728:	795a      	ldrb	r2, [r3, #5]
    c72a:	7818      	ldrb	r0, [r3, #0]
    c72c:	f893 c002 	ldrb.w	ip, [r3, #2]
    c730:	428a      	cmp	r2, r1
    c732:	d009      	beq.n	c748 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    c734:	1c4a      	adds	r2, r1, #1
    c736:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    c738:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    c73c:	4594      	cmp	ip, r2
    c73e:	bf08      	it	eq
    c740:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    c742:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
    c744:	711a      	strb	r2, [r3, #4]
	return mem;
    c746:	4770      	bx	lr
		return NULL;
    c748:	2000      	movs	r0, #0
}
    c74a:	4770      	bx	lr
    c74c:	20000448 	.word	0x20000448

0000c750 <ull_rx_put>:
{
    c750:	b538      	push	{r3, r4, r5, lr}
    c752:	460c      	mov	r4, r1
    c754:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    c756:	f005 fc01 	bl	11f5c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c75a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    c75c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c75e:	4a03      	ldr	r2, [pc, #12]	; (c76c <ull_rx_put+0x1c>)
    c760:	4628      	mov	r0, r5
}
    c762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c766:	f7fc bad9 	b.w	8d1c <memq_enqueue>
    c76a:	bf00      	nop
    c76c:	20001d1c 	.word	0x20001d1c

0000c770 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    c770:	2201      	movs	r2, #1
    c772:	4b02      	ldr	r3, [pc, #8]	; (c77c <ull_rx_sched+0xc>)
    c774:	4611      	mov	r1, r2
    c776:	2000      	movs	r0, #0
    c778:	f7fc bb44 	b.w	8e04 <mayfly_enqueue>
    c77c:	200005c4 	.word	0x200005c4

0000c780 <ull_prepare_enqueue>:
{
    c780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c784:	4e16      	ldr	r6, [pc, #88]	; (c7e0 <ull_prepare_enqueue+0x60>)
{
    c786:	f89d a020 	ldrb.w	sl, [sp, #32]
    c78a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c78c:	7973      	ldrb	r3, [r6, #5]
{
    c78e:	460f      	mov	r7, r1
	last = last + 1;
    c790:	1c5d      	adds	r5, r3, #1
    c792:	4611      	mov	r1, r2
	if (last == count) {
    c794:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
    c796:	b2ed      	uxtb	r5, r5
		last = 0U;
    c798:	42aa      	cmp	r2, r5
    c79a:	bf08      	it	eq
    c79c:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c79e:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
    c7a0:	42aa      	cmp	r2, r5
{
    c7a2:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c7a4:	7830      	ldrb	r0, [r6, #0]
    c7a6:	d016      	beq.n	c7d6 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c7a8:	f106 0408 	add.w	r4, r6, #8
    c7ac:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    c7b0:	2210      	movs	r2, #16
    c7b2:	4620      	mov	r0, r4
    c7b4:	f00e f84d 	bl	1a852 <memcpy>
	e->is_resume = is_resume;
    c7b8:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    c7ba:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    c7bc:	f00a 0a01 	and.w	sl, sl, #1
    c7c0:	f023 0303 	bic.w	r3, r3, #3
    c7c4:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    c7c8:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    c7cc:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    c7ce:	7175      	strb	r5, [r6, #5]
}
    c7d0:	4620      	mov	r0, r4
    c7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    c7d6:	2400      	movs	r4, #0
}
    c7d8:	4620      	mov	r0, r4
    c7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7de:	bf00      	nop
    c7e0:	20000464 	.word	0x20000464

0000c7e4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    c7e4:	4b05      	ldr	r3, [pc, #20]	; (c7fc <ull_prepare_dequeue_get+0x18>)
    c7e6:	7918      	ldrb	r0, [r3, #4]
	if (first == last) {
    c7e8:	795a      	ldrb	r2, [r3, #5]
    c7ea:	7819      	ldrb	r1, [r3, #0]
    c7ec:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    c7ee:	bf1a      	itte	ne
    c7f0:	3308      	addne	r3, #8
    c7f2:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    c7f6:	2000      	moveq	r0, #0
}
    c7f8:	4770      	bx	lr
    c7fa:	bf00      	nop
    c7fc:	20000464 	.word	0x20000464

0000c800 <ull_prepare_dequeue_iter>:
{
    c800:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    c802:	4b0d      	ldr	r3, [pc, #52]	; (c838 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    c804:	7802      	ldrb	r2, [r0, #0]
    c806:	7899      	ldrb	r1, [r3, #2]
    c808:	f893 c005 	ldrb.w	ip, [r3, #5]
    c80c:	f893 e000 	ldrb.w	lr, [r3]
    c810:	4291      	cmp	r1, r2
    c812:	bf9c      	itt	ls
    c814:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
    c816:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    c818:	4594      	cmp	ip, r2
    c81a:	d00a      	beq.n	c832 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    c81c:	1c53      	adds	r3, r2, #1
    c81e:	b2db      	uxtb	r3, r3
		i = 0U;
    c820:	4299      	cmp	r1, r3
    c822:	bf08      	it	eq
    c824:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    c826:	4905      	ldr	r1, [pc, #20]	; (c83c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    c828:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    c82a:	fb02 100e 	mla	r0, r2, lr, r1
}
    c82e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    c832:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    c834:	e7fb      	b.n	c82e <ull_prepare_dequeue_iter+0x2e>
    c836:	bf00      	nop
    c838:	20000464 	.word	0x20000464
    c83c:	2000046c 	.word	0x2000046c

0000c840 <ull_prepare_dequeue>:
{
    c840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    c844:	4c2a      	ldr	r4, [pc, #168]	; (c8f0 <ull_prepare_dequeue+0xb0>)
    c846:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
    c848:	7961      	ldrb	r1, [r4, #5]
    c84a:	7823      	ldrb	r3, [r4, #0]
    c84c:	4291      	cmp	r1, r2
    c84e:	d032      	beq.n	c8b6 <ull_prepare_dequeue+0x76>
	return (void *)(fifo + first * size);
    c850:	f104 0908 	add.w	r9, r4, #8
    c854:	fb02 9303 	mla	r3, r2, r3, r9
		void *param = next->prepare_param.param;
    c858:	f04f 0800 	mov.w	r8, #0
    c85c:	68de      	ldr	r6, [r3, #12]
    c85e:	4683      	mov	fp, r0
    c860:	46c2      	mov	sl, r8
		uint8_t is_aborted = next->is_aborted;
    c862:	7f1a      	ldrb	r2, [r3, #28]
		if (!is_aborted) {
    c864:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
    c866:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
    c86a:	f002 0701 	and.w	r7, r2, #1
		if (!is_aborted) {
    c86e:	d524      	bpl.n	c8ba <ull_prepare_dequeue+0x7a>
		MFIFO_DEQUEUE(prep);
    c870:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
    c872:	7923      	ldrb	r3, [r4, #4]
    c874:	7822      	ldrb	r2, [r4, #0]
    c876:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
    c878:	4299      	cmp	r1, r3
    c87a:	d01c      	beq.n	c8b6 <ull_prepare_dequeue+0x76>
	_first += 1U;
    c87c:	3301      	adds	r3, #1
    c87e:	b2db      	uxtb	r3, r3
		_first = 0U;
    c880:	4298      	cmp	r0, r3
    c882:	bf08      	it	eq
    c884:	2300      	moveq	r3, #0
	if (first == last) {
    c886:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    c888:	7123      	strb	r3, [r4, #4]
	if (first == last) {
    c88a:	d014      	beq.n	c8b6 <ull_prepare_dequeue+0x76>
	return (void *)(fifo + first * size);
    c88c:	fb03 9302 	mla	r3, r3, r2, r9
		if (!is_aborted) {
    c890:	b10d      	cbz	r5, c896 <ull_prepare_dequeue+0x56>
			    ((next->prepare_param.param ==
    c892:	68de      	ldr	r6, [r3, #12]
    c894:	e7e5      	b.n	c862 <ull_prepare_dequeue+0x22>
			if (!is_resume) {
    c896:	b177      	cbz	r7, c8b6 <ull_prepare_dequeue+0x76>
			if (!param_resume_head) {
    c898:	f1ba 0f00 	cmp.w	sl, #0
    c89c:	d025      	beq.n	c8ea <ull_prepare_dequeue+0xaa>
				param_resume_next = param;
    c89e:	f1b8 0f00 	cmp.w	r8, #0
    c8a2:	bf08      	it	eq
    c8a4:	46b0      	moveq	r8, r6
			if (next->is_resume &&
    c8a6:	7f1a      	ldrb	r2, [r3, #28]
			    ((next->prepare_param.param ==
    c8a8:	68de      	ldr	r6, [r3, #12]
			if (next->is_resume &&
    c8aa:	07d2      	lsls	r2, r2, #31
    c8ac:	d5d9      	bpl.n	c862 <ull_prepare_dequeue+0x22>
    c8ae:	45b2      	cmp	sl, r6
    c8b0:	d001      	beq.n	c8b6 <ull_prepare_dequeue+0x76>
			      param_resume_head) ||
    c8b2:	45b0      	cmp	r8, r6
    c8b4:	d1d5      	bne.n	c862 <ull_prepare_dequeue+0x22>
}
    c8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    c8ba:	4a0e      	ldr	r2, [pc, #56]	; (c8f4 <ull_prepare_dequeue+0xb4>)
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    c8bc:	4629      	mov	r1, r5
			mfy.param = next;
    c8be:	6093      	str	r3, [r2, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    c8c0:	4658      	mov	r0, fp
    c8c2:	4613      	mov	r3, r2
    c8c4:	462a      	mov	r2, r5
    c8c6:	f7fc fa9d 	bl	8e04 <mayfly_enqueue>
			LL_ASSERT(!ret);
    c8ca:	2800      	cmp	r0, #0
    c8cc:	d0d0      	beq.n	c870 <ull_prepare_dequeue+0x30>
    c8ce:	480a      	ldr	r0, [pc, #40]	; (c8f8 <ull_prepare_dequeue+0xb8>)
    c8d0:	4a0a      	ldr	r2, [pc, #40]	; (c8fc <ull_prepare_dequeue+0xbc>)
    c8d2:	490b      	ldr	r1, [pc, #44]	; (c900 <ull_prepare_dequeue+0xc0>)
    c8d4:	f240 73bd 	movw	r3, #1981	; 0x7bd
    c8d8:	f00c fe5b 	bl	19592 <assert_print>
    c8dc:	4040      	eors	r0, r0
    c8de:	f380 8811 	msr	BASEPRI, r0
    c8e2:	f04f 0003 	mov.w	r0, #3
    c8e6:	df02      	svc	2
    c8e8:	e7c2      	b.n	c870 <ull_prepare_dequeue+0x30>
				param_resume_head = param;
    c8ea:	46b2      	mov	sl, r6
    c8ec:	e7db      	b.n	c8a6 <ull_prepare_dequeue+0x66>
    c8ee:	bf00      	nop
    c8f0:	20000464 	.word	0x20000464
    c8f4:	20000594 	.word	0x20000594
    c8f8:	0001fbf4 	.word	0x0001fbf4
    c8fc:	0001fd9c 	.word	0x0001fd9c
    c900:	0001fed4 	.word	0x0001fed4

0000c904 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    c904:	4b06      	ldr	r3, [pc, #24]	; (c920 <ull_event_done_extra_get+0x1c>)
    c906:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
    c908:	7959      	ldrb	r1, [r3, #5]
    c90a:	7818      	ldrb	r0, [r3, #0]
    c90c:	4291      	cmp	r1, r2
    c90e:	d005      	beq.n	c91c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    c910:	fb02 3300 	mla	r3, r2, r0, r3
    c914:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
    c916:	b110      	cbz	r0, c91e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    c918:	3020      	adds	r0, #32
    c91a:	4770      	bx	lr
		return NULL;
    c91c:	2000      	movs	r0, #0
}
    c91e:	4770      	bx	lr
    c920:	2000041c 	.word	0x2000041c

0000c924 <ull_event_done>:
{
    c924:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    c926:	4a13      	ldr	r2, [pc, #76]	; (c974 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    c928:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
    c92a:	7954      	ldrb	r4, [r2, #5]
    c92c:	7811      	ldrb	r1, [r2, #0]
    c92e:	429c      	cmp	r4, r3
{
    c930:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    c932:	7890      	ldrb	r0, [r2, #2]
    c934:	d01b      	beq.n	c96e <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    c936:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    c93a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    c93c:	688c      	ldr	r4, [r1, #8]
	_first += 1U;
    c93e:	b2db      	uxtb	r3, r3
		_first = 0U;
    c940:	4298      	cmp	r0, r3
    c942:	bf08      	it	eq
    c944:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    c946:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
    c948:	b17c      	cbz	r4, c96a <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    c94a:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    c94c:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    c94e:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    c950:	4a09      	ldr	r2, [pc, #36]	; (c978 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    c952:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    c954:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    c956:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    c958:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    c95a:	f7fc f9df 	bl	8d1c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    c95e:	2201      	movs	r2, #1
    c960:	4b06      	ldr	r3, [pc, #24]	; (c97c <ull_event_done+0x58>)
    c962:	4611      	mov	r1, r2
    c964:	4628      	mov	r0, r5
    c966:	f7fc fa4d 	bl	8e04 <mayfly_enqueue>
}
    c96a:	4620      	mov	r0, r4
    c96c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    c96e:	2400      	movs	r4, #0
    c970:	e7fb      	b.n	c96a <ull_event_done+0x46>
    c972:	bf00      	nop
    c974:	2000041c 	.word	0x2000041c
    c978:	20001d14 	.word	0x20001d14
    c97c:	200005b4 	.word	0x200005b4

0000c980 <ull_rxfifo_alloc>:
{
    c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c984:	b083      	sub	sp, #12
    c986:	461d      	mov	r5, r3
    c988:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c98a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    c98e:	e9cd 0400 	strd	r0, r4, [sp]
    c992:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    c996:	b33b      	cbz	r3, c9e8 <ull_rxfifo_alloc+0x68>
    c998:	1e5c      	subs	r4, r3, #1
    c99a:	f895 b000 	ldrb.w	fp, [r5]
    c99e:	4688      	mov	r8, r1
    c9a0:	4617      	mov	r7, r2
    c9a2:	b2e4      	uxtb	r4, r4
	last = last + 1;
    c9a4:	f10b 0301 	add.w	r3, fp, #1
    c9a8:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
    c9ac:	45d8      	cmp	r8, fp
    c9ae:	bf08      	it	eq
    c9b0:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
    c9b4:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
    c9b6:	4648      	mov	r0, r9
    c9b8:	d016      	beq.n	c9e8 <ull_rxfifo_alloc+0x68>
    c9ba:	f7fc f94b 	bl	8c54 <mem_acquire>
    c9be:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
    c9c0:	4650      	mov	r0, sl
		if (!link) {
    c9c2:	b18e      	cbz	r6, c9e8 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
    c9c4:	f7fc f946 	bl	8c54 <mem_acquire>
		if (!rx) {
    c9c8:	b188      	cbz	r0, c9ee <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
    c9ca:	2300      	movs	r3, #0
    c9cc:	6073      	str	r3, [r6, #4]
		rx->link = link;
    c9ce:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c9d0:	782a      	ldrb	r2, [r5, #0]
    c9d2:	9b00      	ldr	r3, [sp, #0]
    c9d4:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c9d8:	9b01      	ldr	r3, [sp, #4]
    c9da:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    c9dc:	3c01      	subs	r4, #1
    c9de:	b2e4      	uxtb	r4, r4
    c9e0:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    c9e2:	f885 b000 	strb.w	fp, [r5]
    c9e6:	d1dd      	bne.n	c9a4 <ull_rxfifo_alloc+0x24>
}
    c9e8:	b003      	add	sp, #12
    c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    c9ee:	4649      	mov	r1, r9
    c9f0:	4630      	mov	r0, r6
}
    c9f2:	b003      	add	sp, #12
    c9f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    c9f8:	f7fc b946 	b.w	8c88 <mem_release>

0000c9fc <init_reset>:
{
    c9fc:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    c9fe:	4c3f      	ldr	r4, [pc, #252]	; (cafc <init_reset+0x100>)
    ca00:	4d3f      	ldr	r5, [pc, #252]	; (cb00 <init_reset+0x104>)
    ca02:	79a2      	ldrb	r2, [r4, #6]
    ca04:	88a1      	ldrh	r1, [r4, #4]
    ca06:	4e3f      	ldr	r6, [pc, #252]	; (cb04 <init_reset+0x108>)
    ca08:	2000      	movs	r0, #0
{
    ca0a:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    ca0c:	4623      	mov	r3, r4
    ca0e:	80a8      	strh	r0, [r5, #4]
    ca10:	f104 0008 	add.w	r0, r4, #8
    ca14:	f7fc f8ee 	bl	8bf4 <mem_init>
    ca18:	79e3      	ldrb	r3, [r4, #7]
    ca1a:	79a2      	ldrb	r2, [r4, #6]
    ca1c:	1d30      	adds	r0, r6, #4
    ca1e:	441a      	add	r2, r3
    ca20:	2108      	movs	r1, #8
    ca22:	4633      	mov	r3, r6
    ca24:	f7fc f8e6 	bl	8bf4 <mem_init>
    ca28:	9602      	str	r6, [sp, #8]
    ca2a:	462e      	mov	r6, r5
    ca2c:	79a3      	ldrb	r3, [r4, #6]
    ca2e:	f816 0b08 	ldrb.w	r0, [r6], #8
    ca32:	792a      	ldrb	r2, [r5, #4]
    ca34:	78a9      	ldrb	r1, [r5, #2]
    ca36:	9303      	str	r3, [sp, #12]
    ca38:	e9cd 6400 	strd	r6, r4, [sp]
    ca3c:	1d6b      	adds	r3, r5, #5
    ca3e:	f7ff ff9f 	bl	c980 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    ca42:	4b31      	ldr	r3, [pc, #196]	; (cb08 <init_reset+0x10c>)
    ca44:	2207      	movs	r2, #7
    ca46:	1d18      	adds	r0, r3, #4
    ca48:	2144      	movs	r1, #68	; 0x44
    ca4a:	f7fc f8d3 	bl	8bf4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    ca4e:	4b2f      	ldr	r3, [pc, #188]	; (cb0c <init_reset+0x110>)
    ca50:	2209      	movs	r2, #9
    ca52:	1d18      	adds	r0, r3, #4
    ca54:	2108      	movs	r1, #8
    ca56:	f7fc f8cd 	bl	8bf4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    ca5a:	482c      	ldr	r0, [pc, #176]	; (cb0c <init_reset+0x110>)
    ca5c:	f7fc f8fa 	bl	8c54 <mem_acquire>
	LL_ASSERT(link);
    ca60:	4604      	mov	r4, r0
    ca62:	b308      	cbz	r0, caa8 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    ca64:	4a2a      	ldr	r2, [pc, #168]	; (cb10 <init_reset+0x114>)
    ca66:	4620      	mov	r0, r4
    ca68:	1f11      	subs	r1, r2, #4
    ca6a:	f7fc f949 	bl	8d00 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    ca6e:	4825      	ldr	r0, [pc, #148]	; (cb04 <init_reset+0x108>)
    ca70:	f7fc f8f0 	bl	8c54 <mem_acquire>
	LL_ASSERT(link);
    ca74:	4604      	mov	r4, r0
    ca76:	b328      	cbz	r0, cac4 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    ca78:	4a26      	ldr	r2, [pc, #152]	; (cb14 <init_reset+0x118>)
    ca7a:	4620      	mov	r0, r4
    ca7c:	1f11      	subs	r1, r2, #4
    ca7e:	f7fc f93f 	bl	8d00 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    ca82:	4822      	ldr	r0, [pc, #136]	; (cb0c <init_reset+0x110>)
    ca84:	f7fc f8e6 	bl	8c54 <mem_acquire>
	LL_ASSERT(link);
    ca88:	4604      	mov	r4, r0
    ca8a:	b348      	cbz	r0, cae0 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    ca8c:	4a22      	ldr	r2, [pc, #136]	; (cb18 <init_reset+0x11c>)
    ca8e:	4620      	mov	r0, r4
    ca90:	1f11      	subs	r1, r2, #4
    ca92:	f7fc f935 	bl	8d00 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    ca96:	4b21      	ldr	r3, [pc, #132]	; (cb1c <init_reset+0x120>)
    ca98:	2205      	movs	r2, #5
	rx_replenish(UINT8_MAX);
    ca9a:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    ca9c:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
    ca9e:	f7ff f8bb 	bl	bc18 <rx_replenish>
}
    caa2:	2000      	movs	r0, #0
    caa4:	b004      	add	sp, #16
    caa6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    caa8:	4a1d      	ldr	r2, [pc, #116]	; (cb20 <init_reset+0x124>)
    caaa:	491e      	ldr	r1, [pc, #120]	; (cb24 <init_reset+0x128>)
    caac:	481e      	ldr	r0, [pc, #120]	; (cb28 <init_reset+0x12c>)
    caae:	f640 036d 	movw	r3, #2157	; 0x86d
    cab2:	f00c fd6e 	bl	19592 <assert_print>
    cab6:	4040      	eors	r0, r0
    cab8:	f380 8811 	msr	BASEPRI, r0
    cabc:	f04f 0003 	mov.w	r0, #3
    cac0:	df02      	svc	2
    cac2:	e7cf      	b.n	ca64 <init_reset+0x68>
	LL_ASSERT(link);
    cac4:	4a16      	ldr	r2, [pc, #88]	; (cb20 <init_reset+0x124>)
    cac6:	4917      	ldr	r1, [pc, #92]	; (cb24 <init_reset+0x128>)
    cac8:	4817      	ldr	r0, [pc, #92]	; (cb28 <init_reset+0x12c>)
    caca:	f640 0375 	movw	r3, #2165	; 0x875
    cace:	f00c fd60 	bl	19592 <assert_print>
    cad2:	4040      	eors	r0, r0
    cad4:	f380 8811 	msr	BASEPRI, r0
    cad8:	f04f 0003 	mov.w	r0, #3
    cadc:	df02      	svc	2
    cade:	e7cb      	b.n	ca78 <init_reset+0x7c>
	LL_ASSERT(link);
    cae0:	4a0f      	ldr	r2, [pc, #60]	; (cb20 <init_reset+0x124>)
    cae2:	4910      	ldr	r1, [pc, #64]	; (cb24 <init_reset+0x128>)
    cae4:	4810      	ldr	r0, [pc, #64]	; (cb28 <init_reset+0x12c>)
    cae6:	f640 037d 	movw	r3, #2173	; 0x87d
    caea:	f00c fd52 	bl	19592 <assert_print>
    caee:	4040      	eors	r0, r0
    caf0:	f380 8811 	msr	BASEPRI, r0
    caf4:	f04f 0003 	mov.w	r0, #3
    caf8:	df02      	svc	2
    cafa:	e7c7      	b.n	ca8c <init_reset+0x90>
    cafc:	20000344 	.word	0x20000344
    cb00:	2000041c 	.word	0x2000041c
    cb04:	20001aac 	.word	0x20001aac
    cb08:	20001b28 	.word	0x20001b28
    cb0c:	20001adc 	.word	0x20001adc
    cb10:	20001d1c 	.word	0x20001d1c
    cb14:	20001d14 	.word	0x20001d14
    cb18:	20001d0c 	.word	0x20001d0c
    cb1c:	20001ad8 	.word	0x20001ad8
    cb20:	0001fd9c 	.word	0x0001fd9c
    cb24:	00020198 	.word	0x00020198
    cb28:	0001fbf4 	.word	0x0001fbf4

0000cb2c <ll_init>:
{
    cb2c:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    cb2e:	4b2a      	ldr	r3, [pc, #168]	; (cbd8 <ll_init+0xac>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    cb30:	4d2a      	ldr	r5, [pc, #168]	; (cbdc <ll_init+0xb0>)
	sem_recv = sem_rx;
    cb32:	6018      	str	r0, [r3, #0]
{
    cb34:	b087      	sub	sp, #28
	cntr_init();
    cb36:	f008 f94f 	bl	14dd8 <cntr_init>
	mayfly_init();
    cb3a:	f7fc f911 	bl	8d60 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    cb3e:	4a28      	ldr	r2, [pc, #160]	; (cbe0 <ll_init+0xb4>)
    cb40:	4c28      	ldr	r4, [pc, #160]	; (cbe4 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    cb42:	4929      	ldr	r1, [pc, #164]	; (cbe8 <ll_init+0xbc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    cb44:	e9cd 2504 	strd	r2, r5, [sp, #16]
    cb48:	4a28      	ldr	r2, [pc, #160]	; (cbec <ll_init+0xc0>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    cb4a:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    cb4c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    cb50:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    cb52:	240c      	movs	r4, #12
    cb54:	e9cd 1400 	strd	r1, r4, [sp]
    cb58:	4a25      	ldr	r2, [pc, #148]	; (cbf0 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    cb5a:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    cb5c:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    cb5e:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    cb60:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    cb62:	2000      	movs	r0, #0
    cb64:	2106      	movs	r1, #6
    cb66:	f7fd f9dd 	bl	9f24 <ticker_init>
	LL_ASSERT(!err);
    cb6a:	bb30      	cbnz	r0, cbba <ll_init+0x8e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    cb6c:	2201      	movs	r2, #1
    cb6e:	2100      	movs	r1, #0
    cb70:	4820      	ldr	r0, [pc, #128]	; (cbf4 <ll_init+0xc8>)
    cb72:	f011 feae 	bl	1e8d2 <z_impl_k_sem_init>
	err = lll_init();
    cb76:	f006 f815 	bl	12ba4 <lll_init>
	if (err) {
    cb7a:	b108      	cbz	r0, cb80 <ll_init+0x54>
}
    cb7c:	b007      	add	sp, #28
    cb7e:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    cb80:	f7ff ff3c 	bl	c9fc <init_reset>
	if (err) {
    cb84:	2800      	cmp	r0, #0
    cb86:	d1f9      	bne.n	cb7c <ll_init+0x50>
	err = lll_adv_init();
    cb88:	f006 fc6e 	bl	13468 <lll_adv_init>
	if (err) {
    cb8c:	2800      	cmp	r0, #0
    cb8e:	d1f5      	bne.n	cb7c <ll_init+0x50>
	err = ull_adv_init();
    cb90:	f000 fce2 	bl	d558 <ull_adv_init>
	if (err) {
    cb94:	2800      	cmp	r0, #0
    cb96:	d1f1      	bne.n	cb7c <ll_init+0x50>
	err = lll_scan_init();
    cb98:	f007 fbcc 	bl	14334 <lll_scan_init>
	if (err) {
    cb9c:	2800      	cmp	r0, #0
    cb9e:	d1ed      	bne.n	cb7c <ll_init+0x50>
	err = ull_scan_init();
    cba0:	f000 fe3c 	bl	d81c <ull_scan_init>
	if (err) {
    cba4:	2800      	cmp	r0, #0
    cba6:	d1e9      	bne.n	cb7c <ll_init+0x50>
	err = lll_conn_init();
    cba8:	f007 fc5e 	bl	14468 <lll_conn_init>
	if (err) {
    cbac:	2800      	cmp	r0, #0
    cbae:	d1e5      	bne.n	cb7c <ll_init+0x50>
}
    cbb0:	b007      	add	sp, #28
    cbb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = ull_conn_init();
    cbb6:	f001 bfd7 	b.w	eb68 <ull_conn_init>
	LL_ASSERT(!err);
    cbba:	4a0f      	ldr	r2, [pc, #60]	; (cbf8 <ll_init+0xcc>)
    cbbc:	490f      	ldr	r1, [pc, #60]	; (cbfc <ll_init+0xd0>)
    cbbe:	4810      	ldr	r0, [pc, #64]	; (cc00 <ll_init+0xd4>)
    cbc0:	f240 232f 	movw	r3, #559	; 0x22f
    cbc4:	f00c fce5 	bl	19592 <assert_print>
    cbc8:	4040      	eors	r0, r0
    cbca:	f380 8811 	msr	BASEPRI, r0
    cbce:	f04f 0003 	mov.w	r0, #3
    cbd2:	df02      	svc	2
    cbd4:	e7ca      	b.n	cb6c <ll_init+0x40>
    cbd6:	bf00      	nop
    cbd8:	20001d20 	.word	0x20001d20
    cbdc:	00015a0d 	.word	0x00015a0d
    cbe0:	000158bd 	.word	0x000158bd
    cbe4:	00015859 	.word	0x00015859
    cbe8:	200020cc 	.word	0x200020cc
    cbec:	20001e5c 	.word	0x20001e5c
    cbf0:	20001d3c 	.word	0x20001d3c
    cbf4:	20001d24 	.word	0x20001d24
    cbf8:	0001fd9c 	.word	0x0001fd9c
    cbfc:	0001fdd8 	.word	0x0001fdd8
    cc00:	0001fbf4 	.word	0x0001fbf4

0000cc04 <ll_reset>:
{
    cc04:	b510      	push	{r4, lr}
    cc06:	b086      	sub	sp, #24
	err = ull_adv_reset();
    cc08:	f000 fcb6 	bl	d578 <ull_adv_reset>
	LL_ASSERT(!err);
    cc0c:	2800      	cmp	r0, #0
    cc0e:	d135      	bne.n	cc7c <ll_reset+0x78>
	err = ull_scan_reset();
    cc10:	f000 fe50 	bl	d8b4 <ull_scan_reset>
	LL_ASSERT(!err);
    cc14:	2800      	cmp	r0, #0
    cc16:	d142      	bne.n	cc9e <ll_reset+0x9a>
	err = ull_conn_reset();
    cc18:	f001 ffa8 	bl	eb6c <ull_conn_reset>
	LL_ASSERT(!err);
    cc1c:	2800      	cmp	r0, #0
    cc1e:	d14f      	bne.n	ccc0 <ll_reset+0xbc>
	MFIFO_INIT(tx_ack);
    cc20:	4843      	ldr	r0, [pc, #268]	; (cd30 <ll_reset+0x12c>)
	MFIFO_INIT(prep);
    cc22:	4944      	ldr	r1, [pc, #272]	; (cd34 <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
    cc24:	4a44      	ldr	r2, [pc, #272]	; (cd38 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
    cc26:	4b45      	ldr	r3, [pc, #276]	; (cd3c <ll_reset+0x138>)
	MFIFO_INIT(tx_ack);
    cc28:	2400      	movs	r4, #0
    cc2a:	8084      	strh	r4, [r0, #4]
	MFIFO_INIT(prep);
    cc2c:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
    cc2e:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
    cc30:	809c      	strh	r4, [r3, #4]
    cc32:	2201      	movs	r2, #1
    cc34:	4621      	mov	r1, r4
    cc36:	4668      	mov	r0, sp
    cc38:	f011 fe4b 	bl	1e8d2 <z_impl_k_sem_init>
		mfy.param = &sem;
    cc3c:	4b40      	ldr	r3, [pc, #256]	; (cd40 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    cc3e:	4622      	mov	r2, r4
    cc40:	4621      	mov	r1, r4
    cc42:	2003      	movs	r0, #3
		mfy.param = &sem;
    cc44:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    cc48:	f7fc f8dc 	bl	8e04 <mayfly_enqueue>
		LL_ASSERT(!retval);
    cc4c:	2800      	cmp	r0, #0
    cc4e:	d161      	bne.n	cd14 <ll_reset+0x110>
	return z_impl_k_sem_take(sem, timeout);
    cc50:	f04f 32ff 	mov.w	r2, #4294967295
    cc54:	f04f 33ff 	mov.w	r3, #4294967295
    cc58:	4668      	mov	r0, sp
    cc5a:	f00b f981 	bl	17f60 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    cc5e:	f000 fca5 	bl	d5ac <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    cc62:	2800      	cmp	r0, #0
    cc64:	d148      	bne.n	ccf8 <ll_reset+0xf4>
	err = init_reset();
    cc66:	f7ff fec9 	bl	c9fc <init_reset>
	LL_ASSERT(!err);
    cc6a:	2800      	cmp	r0, #0
    cc6c:	d136      	bne.n	ccdc <ll_reset+0xd8>
	(void)ll_addr_set(1U, NULL);
    cc6e:	2100      	movs	r1, #0
    cc70:	2001      	movs	r0, #1
}
    cc72:	b006      	add	sp, #24
    cc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
    cc78:	f7fd bad4 	b.w	a224 <ll_addr_set>
	LL_ASSERT(!err);
    cc7c:	4a31      	ldr	r2, [pc, #196]	; (cd44 <ll_reset+0x140>)
    cc7e:	4932      	ldr	r1, [pc, #200]	; (cd48 <ll_reset+0x144>)
    cc80:	4832      	ldr	r0, [pc, #200]	; (cd4c <ll_reset+0x148>)
    cc82:	f240 23d5 	movw	r3, #725	; 0x2d5
    cc86:	f00c fc84 	bl	19592 <assert_print>
    cc8a:	4040      	eors	r0, r0
    cc8c:	f380 8811 	msr	BASEPRI, r0
    cc90:	f04f 0003 	mov.w	r0, #3
    cc94:	df02      	svc	2
	err = ull_scan_reset();
    cc96:	f000 fe0d 	bl	d8b4 <ull_scan_reset>
	LL_ASSERT(!err);
    cc9a:	2800      	cmp	r0, #0
    cc9c:	d0bc      	beq.n	cc18 <ll_reset+0x14>
    cc9e:	4a29      	ldr	r2, [pc, #164]	; (cd44 <ll_reset+0x140>)
    cca0:	4929      	ldr	r1, [pc, #164]	; (cd48 <ll_reset+0x144>)
    cca2:	482a      	ldr	r0, [pc, #168]	; (cd4c <ll_reset+0x148>)
    cca4:	f240 23e7 	movw	r3, #743	; 0x2e7
    cca8:	f00c fc73 	bl	19592 <assert_print>
    ccac:	4040      	eors	r0, r0
    ccae:	f380 8811 	msr	BASEPRI, r0
    ccb2:	f04f 0003 	mov.w	r0, #3
    ccb6:	df02      	svc	2
	err = ull_conn_reset();
    ccb8:	f001 ff58 	bl	eb6c <ull_conn_reset>
	LL_ASSERT(!err);
    ccbc:	2800      	cmp	r0, #0
    ccbe:	d0af      	beq.n	cc20 <ll_reset+0x1c>
    ccc0:	4a20      	ldr	r2, [pc, #128]	; (cd44 <ll_reset+0x140>)
    ccc2:	4921      	ldr	r1, [pc, #132]	; (cd48 <ll_reset+0x144>)
    ccc4:	4821      	ldr	r0, [pc, #132]	; (cd4c <ll_reset+0x148>)
    ccc6:	f240 3307 	movw	r3, #775	; 0x307
    ccca:	f00c fc62 	bl	19592 <assert_print>
    ccce:	4040      	eors	r0, r0
    ccd0:	f380 8811 	msr	BASEPRI, r0
    ccd4:	f04f 0003 	mov.w	r0, #3
    ccd8:	df02      	svc	2
    ccda:	e7a1      	b.n	cc20 <ll_reset+0x1c>
	LL_ASSERT(!err);
    ccdc:	4a19      	ldr	r2, [pc, #100]	; (cd44 <ll_reset+0x140>)
    ccde:	491a      	ldr	r1, [pc, #104]	; (cd48 <ll_reset+0x144>)
    cce0:	481a      	ldr	r0, [pc, #104]	; (cd4c <ll_reset+0x148>)
    cce2:	f44f 7354 	mov.w	r3, #848	; 0x350
    cce6:	f00c fc54 	bl	19592 <assert_print>
    ccea:	4040      	eors	r0, r0
    ccec:	f380 8811 	msr	BASEPRI, r0
    ccf0:	f04f 0003 	mov.w	r0, #3
    ccf4:	df02      	svc	2
    ccf6:	e7ba      	b.n	cc6e <ll_reset+0x6a>
	LL_ASSERT(!err);
    ccf8:	4a12      	ldr	r2, [pc, #72]	; (cd44 <ll_reset+0x140>)
    ccfa:	4913      	ldr	r1, [pc, #76]	; (cd48 <ll_reset+0x144>)
    ccfc:	4813      	ldr	r0, [pc, #76]	; (cd4c <ll_reset+0x148>)
    ccfe:	f240 3343 	movw	r3, #835	; 0x343
    cd02:	f00c fc46 	bl	19592 <assert_print>
    cd06:	4040      	eors	r0, r0
    cd08:	f380 8811 	msr	BASEPRI, r0
    cd0c:	f04f 0003 	mov.w	r0, #3
    cd10:	df02      	svc	2
    cd12:	e7a8      	b.n	cc66 <ll_reset+0x62>
		LL_ASSERT(!retval);
    cd14:	4a0b      	ldr	r2, [pc, #44]	; (cd44 <ll_reset+0x140>)
    cd16:	490e      	ldr	r1, [pc, #56]	; (cd50 <ll_reset+0x14c>)
    cd18:	480c      	ldr	r0, [pc, #48]	; (cd4c <ll_reset+0x148>)
    cd1a:	f240 3336 	movw	r3, #822	; 0x336
    cd1e:	f00c fc38 	bl	19592 <assert_print>
    cd22:	4040      	eors	r0, r0
    cd24:	f380 8811 	msr	BASEPRI, r0
    cd28:	f04f 0003 	mov.w	r0, #3
    cd2c:	df02      	svc	2
    cd2e:	e78f      	b.n	cc50 <ll_reset+0x4c>
    cd30:	2000056c 	.word	0x2000056c
    cd34:	20000464 	.word	0x20000464
    cd38:	20000448 	.word	0x20000448
    cd3c:	20000438 	.word	0x20000438
    cd40:	200005a4 	.word	0x200005a4
    cd44:	0001fd9c 	.word	0x0001fd9c
    cd48:	0001fdd8 	.word	0x0001fdd8
    cd4c:	0001fbf4 	.word	0x0001fbf4
    cd50:	0001fefc 	.word	0x0001fefc

0000cd54 <ll_deinit>:
{
    cd54:	b508      	push	{r3, lr}
	ll_reset();
    cd56:	f7ff ff55 	bl	cc04 <ll_reset>
}
    cd5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
    cd5e:	f005 bf55 	b.w	12c0c <lll_deinit>
    cd62:	bf00      	nop

0000cd64 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    cd64:	b510      	push	{r4, lr}
    cd66:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    cd68:	2400      	movs	r4, #0
    cd6a:	e9cd 4400 	strd	r4, r4, [sp]
    cd6e:	9b04      	ldr	r3, [sp, #16]
    cd70:	f006 f94a 	bl	13008 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    cd74:	b002      	add	sp, #8
    cd76:	bd10      	pop	{r4, pc}

0000cd78 <lll_resume>:

void lll_resume(void *param)
{
    cd78:	b510      	push	{r4, lr}
    cd7a:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    cd7c:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    cd7e:	691a      	ldr	r2, [r3, #16]
    cd80:	6999      	ldr	r1, [r3, #24]
    cd82:	2401      	movs	r4, #1
{
    cd84:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    cd86:	4020      	ands	r0, r4
    cd88:	e9cd 0400 	strd	r0, r4, [sp]
    cd8c:	6958      	ldr	r0, [r3, #20]
    cd8e:	f006 f93b 	bl	13008 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    cd92:	b108      	cbz	r0, cd98 <lll_resume+0x20>
    cd94:	3077      	adds	r0, #119	; 0x77
    cd96:	d101      	bne.n	cd9c <lll_resume+0x24>
}
    cd98:	b002      	add	sp, #8
    cd9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    cd9c:	4a06      	ldr	r2, [pc, #24]	; (cdb8 <lll_resume+0x40>)
    cd9e:	4907      	ldr	r1, [pc, #28]	; (cdbc <lll_resume+0x44>)
    cda0:	4807      	ldr	r0, [pc, #28]	; (cdc0 <lll_resume+0x48>)
    cda2:	234f      	movs	r3, #79	; 0x4f
    cda4:	f00c fbf5 	bl	19592 <assert_print>
    cda8:	4040      	eors	r0, r0
    cdaa:	f380 8811 	msr	BASEPRI, r0
    cdae:	f04f 0003 	mov.w	r0, #3
    cdb2:	df02      	svc	2
}
    cdb4:	b002      	add	sp, #8
    cdb6:	bd10      	pop	{r4, pc}
    cdb8:	0001ff04 	.word	0x0001ff04
    cdbc:	0001ff48 	.word	0x0001ff48
    cdc0:	0001fbf4 	.word	0x0001fbf4

0000cdc4 <ticker_stop_cb>:
{
    cdc4:	b530      	push	{r4, r5, lr}
    cdc6:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    cdc8:	4c18      	ldr	r4, [pc, #96]	; (ce2c <ticker_stop_cb+0x68>)
{
    cdca:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    cdcc:	4a18      	ldr	r2, [pc, #96]	; (ce30 <ticker_stop_cb+0x6c>)
    cdce:	1b2c      	subs	r4, r5, r4
    cdd0:	08a4      	lsrs	r4, r4, #2
    cdd2:	fba2 3404 	umull	r3, r4, r2, r4
	handle = ull_adv_handle_get(adv);
    cdd6:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    cdda:	b9cc      	cbnz	r4, ce10 <ticker_stop_cb+0x4c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    cddc:	1ca2      	adds	r2, r4, #2
    cdde:	4b15      	ldr	r3, [pc, #84]	; (ce34 <ticker_stop_cb+0x70>)
    cde0:	9500      	str	r5, [sp, #0]
    cde2:	b2d2      	uxtb	r2, r2
    cde4:	2101      	movs	r1, #1
    cde6:	2000      	movs	r0, #0
    cde8:	f7fd f9d8 	bl	a19c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cdec:	f030 0302 	bics.w	r3, r0, #2
    cdf0:	d00c      	beq.n	ce0c <ticker_stop_cb+0x48>
    cdf2:	4a11      	ldr	r2, [pc, #68]	; (ce38 <ticker_stop_cb+0x74>)
    cdf4:	4911      	ldr	r1, [pc, #68]	; (ce3c <ticker_stop_cb+0x78>)
    cdf6:	4812      	ldr	r0, [pc, #72]	; (ce40 <ticker_stop_cb+0x7c>)
    cdf8:	f640 1307 	movw	r3, #2311	; 0x907
    cdfc:	f00c fbc9 	bl	19592 <assert_print>
    ce00:	4040      	eors	r0, r0
    ce02:	f380 8811 	msr	BASEPRI, r0
    ce06:	f04f 0003 	mov.w	r0, #3
    ce0a:	df02      	svc	2
}
    ce0c:	b003      	add	sp, #12
    ce0e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ce10:	4a09      	ldr	r2, [pc, #36]	; (ce38 <ticker_stop_cb+0x74>)
    ce12:	490c      	ldr	r1, [pc, #48]	; (ce44 <ticker_stop_cb+0x80>)
    ce14:	480a      	ldr	r0, [pc, #40]	; (ce40 <ticker_stop_cb+0x7c>)
    ce16:	f640 1302 	movw	r3, #2306	; 0x902
    ce1a:	f00c fbba 	bl	19592 <assert_print>
    ce1e:	4040      	eors	r0, r0
    ce20:	f380 8811 	msr	BASEPRI, r0
    ce24:	f04f 0003 	mov.w	r0, #3
    ce28:	df02      	svc	2
    ce2a:	e7d7      	b.n	cddc <ticker_stop_cb+0x18>
    ce2c:	20002104 	.word	0x20002104
    ce30:	4bda12f7 	.word	0x4bda12f7
    ce34:	0000cedd 	.word	0x0000cedd
    ce38:	0001ff5c 	.word	0x0001ff5c
    ce3c:	0001ffa8 	.word	0x0001ffa8
    ce40:	0001fbf4 	.word	0x0001fbf4
    ce44:	0001ff9c 	.word	0x0001ff9c

0000ce48 <disabled_cb>:
{
    ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    ce4a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    ce4c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    ce4e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    ce50:	b1d7      	cbz	r7, ce88 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    ce52:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    ce54:	2300      	movs	r3, #0
    ce56:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    ce58:	b34c      	cbz	r4, ceae <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    ce5a:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ce5c:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
    ce5e:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ce60:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    ce62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce66:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    ce68:	2212      	movs	r2, #18
    ce6a:	f104 001c 	add.w	r0, r4, #28
    ce6e:	f00d fcfb 	bl	1a868 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    ce72:	233c      	movs	r3, #60	; 0x3c
    ce74:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    ce76:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    ce78:	4621      	mov	r1, r4
    ce7a:	4638      	mov	r0, r7
    ce7c:	f7ff fad4 	bl	c428 <ll_rx_put>
}
    ce80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    ce84:	f7ff bada 	b.w	c43c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    ce88:	4a10      	ldr	r2, [pc, #64]	; (cecc <disabled_cb+0x84>)
    ce8a:	4911      	ldr	r1, [pc, #68]	; (ced0 <disabled_cb+0x88>)
    ce8c:	4811      	ldr	r0, [pc, #68]	; (ced4 <disabled_cb+0x8c>)
    ce8e:	f640 134f 	movw	r3, #2383	; 0x94f
    ce92:	f00c fb7e 	bl	19592 <assert_print>
    ce96:	4040      	eors	r0, r0
    ce98:	f380 8811 	msr	BASEPRI, r0
    ce9c:	f04f 0003 	mov.w	r0, #3
    cea0:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    cea2:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    cea4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    cea6:	2300      	movs	r3, #0
    cea8:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    ceaa:	2c00      	cmp	r4, #0
    ceac:	d1d5      	bne.n	ce5a <disabled_cb+0x12>
    ceae:	4a07      	ldr	r2, [pc, #28]	; (cecc <disabled_cb+0x84>)
    ceb0:	4909      	ldr	r1, [pc, #36]	; (ced8 <disabled_cb+0x90>)
    ceb2:	4808      	ldr	r0, [pc, #32]	; (ced4 <disabled_cb+0x8c>)
    ceb4:	f640 1353 	movw	r3, #2387	; 0x953
    ceb8:	f00c fb6b 	bl	19592 <assert_print>
    cebc:	4040      	eors	r0, r0
    cebe:	f380 8811 	msr	BASEPRI, r0
    cec2:	f04f 0003 	mov.w	r0, #3
    cec6:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    cec8:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    ceca:	e7c6      	b.n	ce5a <disabled_cb+0x12>
    cecc:	0001ff5c 	.word	0x0001ff5c
    ced0:	0001ffc4 	.word	0x0001ffc4
    ced4:	0001fbf4 	.word	0x0001fbf4
    ced8:	0001ffd8 	.word	0x0001ffd8

0000cedc <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    cedc:	b100      	cbz	r0, cee0 <ticker_stop_op_cb+0x4>
    cede:	4770      	bx	lr
	mfy.param = param;
    cee0:	4b0c      	ldr	r3, [pc, #48]	; (cf14 <ticker_stop_op_cb+0x38>)
{
    cee2:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    cee4:	4602      	mov	r2, r0
    cee6:	460c      	mov	r4, r1
    cee8:	2002      	movs	r0, #2
    ceea:	2101      	movs	r1, #1
	mfy.param = param;
    ceec:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ceee:	f7fb ff89 	bl	8e04 <mayfly_enqueue>
	LL_ASSERT(!ret);
    cef2:	b900      	cbnz	r0, cef6 <ticker_stop_op_cb+0x1a>
}
    cef4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    cef6:	4a08      	ldr	r2, [pc, #32]	; (cf18 <ticker_stop_op_cb+0x3c>)
    cef8:	4908      	ldr	r1, [pc, #32]	; (cf1c <ticker_stop_op_cb+0x40>)
    cefa:	4809      	ldr	r0, [pc, #36]	; (cf20 <ticker_stop_op_cb+0x44>)
    cefc:	f640 1323 	movw	r3, #2339	; 0x923
    cf00:	f00c fb47 	bl	19592 <assert_print>
    cf04:	4040      	eors	r0, r0
    cf06:	f380 8811 	msr	BASEPRI, r0
    cf0a:	f04f 0003 	mov.w	r0, #3
    cf0e:	df02      	svc	2
}
    cf10:	bd10      	pop	{r4, pc}
    cf12:	bf00      	nop
    cf14:	20000604 	.word	0x20000604
    cf18:	0001ff5c 	.word	0x0001ff5c
    cf1c:	0001fed4 	.word	0x0001fed4
    cf20:	0001fbf4 	.word	0x0001fbf4

0000cf24 <adv_disable>:
{
    cf24:	b538      	push	{r3, r4, r5, lr}
    cf26:	4604      	mov	r4, r0
    cf28:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    cf2c:	b353      	cbz	r3, cf84 <adv_disable+0x60>
		mfy.param = &adv->lll;
    cf2e:	4d17      	ldr	r5, [pc, #92]	; (cf8c <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    cf30:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
    cf32:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    cf34:	b16b      	cbz	r3, cf52 <adv_disable+0x2e>
    cf36:	4a16      	ldr	r2, [pc, #88]	; (cf90 <adv_disable+0x6c>)
    cf38:	4916      	ldr	r1, [pc, #88]	; (cf94 <adv_disable+0x70>)
    cf3a:	4817      	ldr	r0, [pc, #92]	; (cf98 <adv_disable+0x74>)
    cf3c:	f640 1338 	movw	r3, #2360	; 0x938
    cf40:	f00c fb27 	bl	19592 <assert_print>
    cf44:	4040      	eors	r0, r0
    cf46:	f380 8811 	msr	BASEPRI, r0
    cf4a:	f04f 0003 	mov.w	r0, #3
    cf4e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    cf50:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    cf52:	4912      	ldr	r1, [pc, #72]	; (cf9c <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    cf54:	4b0d      	ldr	r3, [pc, #52]	; (cf8c <adv_disable+0x68>)
    cf56:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    cf58:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    cf5c:	4611      	mov	r1, r2
    cf5e:	2001      	movs	r0, #1
    cf60:	f7fb ff50 	bl	8e04 <mayfly_enqueue>
		LL_ASSERT(!ret);
    cf64:	b900      	cbnz	r0, cf68 <adv_disable+0x44>
}
    cf66:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    cf68:	4a09      	ldr	r2, [pc, #36]	; (cf90 <adv_disable+0x6c>)
    cf6a:	490d      	ldr	r1, [pc, #52]	; (cfa0 <adv_disable+0x7c>)
    cf6c:	480a      	ldr	r0, [pc, #40]	; (cf98 <adv_disable+0x74>)
    cf6e:	f640 133f 	movw	r3, #2367	; 0x93f
    cf72:	f00c fb0e 	bl	19592 <assert_print>
    cf76:	4040      	eors	r0, r0
    cf78:	f380 8811 	msr	BASEPRI, r0
    cf7c:	f04f 0003 	mov.w	r0, #3
    cf80:	df02      	svc	2
}
    cf82:	bd38      	pop	{r3, r4, r5, pc}
    cf84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    cf88:	f7ff bf5e 	b.w	ce48 <disabled_cb>
    cf8c:	200005f4 	.word	0x200005f4
    cf90:	0001ff5c 	.word	0x0001ff5c
    cf94:	0001fff0 	.word	0x0001fff0
    cf98:	0001fbf4 	.word	0x0001fbf4
    cf9c:	0000ce49 	.word	0x0000ce49
    cfa0:	0001fed4 	.word	0x0001fed4

0000cfa4 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    cfa4:	b900      	cbnz	r0, cfa8 <ticker_update_op_cb+0x4>
    cfa6:	4770      	bx	lr
{
    cfa8:	b510      	push	{r4, lr}
    cfaa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    cfac:	f7ff faf4 	bl	c598 <ull_disable_mark_get>
    cfb0:	4284      	cmp	r4, r0
    cfb2:	d00c      	beq.n	cfce <ticker_update_op_cb+0x2a>
    cfb4:	4a06      	ldr	r2, [pc, #24]	; (cfd0 <ticker_update_op_cb+0x2c>)
    cfb6:	4907      	ldr	r1, [pc, #28]	; (cfd4 <ticker_update_op_cb+0x30>)
    cfb8:	4807      	ldr	r0, [pc, #28]	; (cfd8 <ticker_update_op_cb+0x34>)
    cfba:	f640 03f4 	movw	r3, #2292	; 0x8f4
    cfbe:	f00c fae8 	bl	19592 <assert_print>
    cfc2:	4040      	eors	r0, r0
    cfc4:	f380 8811 	msr	BASEPRI, r0
    cfc8:	f04f 0003 	mov.w	r0, #3
    cfcc:	df02      	svc	2
}
    cfce:	bd10      	pop	{r4, pc}
    cfd0:	0001ff5c 	.word	0x0001ff5c
    cfd4:	00020004 	.word	0x00020004
    cfd8:	0001fbf4 	.word	0x0001fbf4

0000cfdc <init_set.constprop.0>:
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    cfdc:	4b0f      	ldr	r3, [pc, #60]	; (d01c <init_set.constprop.0+0x40>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    cfde:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    cfe0:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
    cfe4:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    cfe8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cfec:	f022 0202 	bic.w	r2, r2, #2
    cff0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    cff2:	f042 020e 	orr.w	r2, r2, #14
    cff6:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    cff8:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    cffa:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    cffc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    d000:	f8a3 c068 	strh.w	ip, [r3, #104]	; 0x68
	pdu->len = BDADDR_SIZE;
    d004:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    d006:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d008:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    d00c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d010:	2204      	movs	r2, #4
    d012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d014:	701a      	strb	r2, [r3, #0]
	pdu->len = BDADDR_SIZE;
    d016:	7058      	strb	r0, [r3, #1]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    d018:	4770      	bx	lr
    d01a:	bf00      	nop
    d01c:	20002104 	.word	0x20002104

0000d020 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    d020:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    d022:	4c1b      	ldr	r4, [pc, #108]	; (d090 <conn_release.constprop.0+0x70>)
    d024:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    d026:	6dab      	ldr	r3, [r5, #88]	; 0x58
    d028:	b163      	cbz	r3, d044 <conn_release.constprop.0+0x24>
    d02a:	4a1a      	ldr	r2, [pc, #104]	; (d094 <conn_release.constprop.0+0x74>)
    d02c:	491a      	ldr	r1, [pc, #104]	; (d098 <conn_release.constprop.0+0x78>)
    d02e:	481b      	ldr	r0, [pc, #108]	; (d09c <conn_release.constprop.0+0x7c>)
    d030:	f640 137d 	movw	r3, #2429	; 0x97d
    d034:	f00c faad 	bl	19592 <assert_print>
    d038:	4040      	eors	r0, r0
    d03a:	f380 8811 	msr	BASEPRI, r0
    d03e:	f04f 0003 	mov.w	r0, #3
    d042:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    d044:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    d048:	f105 0048 	add.w	r0, r5, #72	; 0x48
    d04c:	f7fb fe5c 	bl	8d08 <memq_deinit>
	LL_ASSERT(link);
    d050:	4606      	mov	r6, r0
    d052:	b170      	cbz	r0, d072 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    d054:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    d056:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
    d058:	f001 fa80 	bl	e55c <ll_conn_release>
	adv->lll.conn = NULL;
    d05c:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    d05e:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    d060:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    d062:	f7ff f9db 	bl	c41c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    d066:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    d068:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    d06a:	f7ff f9cb 	bl	c404 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    d06e:	6625      	str	r5, [r4, #96]	; 0x60
}
    d070:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    d072:	4a08      	ldr	r2, [pc, #32]	; (d094 <conn_release.constprop.0+0x74>)
    d074:	490a      	ldr	r1, [pc, #40]	; (d0a0 <conn_release.constprop.0+0x80>)
    d076:	4809      	ldr	r0, [pc, #36]	; (d09c <conn_release.constprop.0+0x7c>)
    d078:	f640 137f 	movw	r3, #2431	; 0x97f
    d07c:	f00c fa89 	bl	19592 <assert_print>
    d080:	4040      	eors	r0, r0
    d082:	f380 8811 	msr	BASEPRI, r0
    d086:	f04f 0003 	mov.w	r0, #3
    d08a:	df02      	svc	2
    d08c:	e7e2      	b.n	d054 <conn_release.constprop.0+0x34>
    d08e:	bf00      	nop
    d090:	20002104 	.word	0x20002104
    d094:	0001ff5c 	.word	0x0001ff5c
    d098:	00020034 	.word	0x00020034
    d09c:	0001fbf4 	.word	0x0001fbf4
    d0a0:	00020198 	.word	0x00020198

0000d0a4 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
    d0a4:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
    d0a6:	4c4a      	ldr	r4, [pc, #296]	; (d1d0 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
    d0a8:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
    d0aa:	4620      	mov	r0, r4
    d0ac:	f7ff fa5e 	bl	c56c <ull_disable_mark>
	LL_ASSERT(mark == adv);
    d0b0:	4284      	cmp	r4, r0
    d0b2:	d00c      	beq.n	d0ce <disable.part.0+0x2a>
    d0b4:	4a47      	ldr	r2, [pc, #284]	; (d1d4 <disable.part.0+0x130>)
    d0b6:	4948      	ldr	r1, [pc, #288]	; (d1d8 <disable.part.0+0x134>)
    d0b8:	4848      	ldr	r0, [pc, #288]	; (d1dc <disable.part.0+0x138>)
    d0ba:	f640 234a 	movw	r3, #2634	; 0xa4a
    d0be:	f00c fa68 	bl	19592 <assert_print>
    d0c2:	4040      	eors	r0, r0
    d0c4:	f380 8811 	msr	BASEPRI, r0
    d0c8:	f04f 0003 	mov.w	r0, #3
    d0cc:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    d0ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d0d2:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d0d4:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    d0d6:	d50d      	bpl.n	d0f4 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
    d0d8:	2102      	movs	r1, #2
    d0da:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d0dc:	4b40      	ldr	r3, [pc, #256]	; (d1e0 <disable.part.0+0x13c>)
    d0de:	9500      	str	r5, [sp, #0]
    d0e0:	2103      	movs	r1, #3
    d0e2:	2201      	movs	r2, #1
    d0e4:	2000      	movs	r0, #0
    d0e6:	f7fd f859 	bl	a19c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    d0ea:	4629      	mov	r1, r5
    d0ec:	f7ff fa16 	bl	c51c <ull_ticker_status_take>
		if (ret) {
    d0f0:	2800      	cmp	r0, #0
    d0f2:	d158      	bne.n	d1a6 <disable.part.0+0x102>
	ret_cb = TICKER_STATUS_BUSY;
    d0f4:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d0f6:	2103      	movs	r1, #3
    d0f8:	4b39      	ldr	r3, [pc, #228]	; (d1e0 <disable.part.0+0x13c>)
    d0fa:	9500      	str	r5, [sp, #0]
    d0fc:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    d0fe:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    d100:	f7fd f84c 	bl	a19c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    d104:	4629      	mov	r1, r5
    d106:	f7ff fa09 	bl	c51c <ull_ticker_status_take>
	if (ret) {
    d10a:	bb20      	cbnz	r0, d156 <disable.part.0+0xb2>
	err = ull_disable(&adv->lll);
    d10c:	4835      	ldr	r0, [pc, #212]	; (d1e4 <disable.part.0+0x140>)
    d10e:	f7ff fa65 	bl	c5dc <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
    d112:	b108      	cbz	r0, d118 <disable.part.0+0x74>
    d114:	3078      	adds	r0, #120	; 0x78
    d116:	d133      	bne.n	d180 <disable.part.0+0xdc>
	mark = ull_disable_unmark(adv);
    d118:	482d      	ldr	r0, [pc, #180]	; (d1d0 <disable.part.0+0x12c>)
    d11a:	f7ff fa31 	bl	c580 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    d11e:	4284      	cmp	r4, r0
    d120:	d00c      	beq.n	d13c <disable.part.0+0x98>
    d122:	4a2c      	ldr	r2, [pc, #176]	; (d1d4 <disable.part.0+0x130>)
    d124:	492c      	ldr	r1, [pc, #176]	; (d1d8 <disable.part.0+0x134>)
    d126:	482d      	ldr	r0, [pc, #180]	; (d1dc <disable.part.0+0x138>)
    d128:	f640 236c 	movw	r3, #2668	; 0xa6c
    d12c:	f00c fa31 	bl	19592 <assert_print>
    d130:	4040      	eors	r0, r0
    d132:	f380 8811 	msr	BASEPRI, r0
    d136:	f04f 0003 	mov.w	r0, #3
    d13a:	df02      	svc	2
	if (adv->lll.conn) {
    d13c:	6a23      	ldr	r3, [r4, #32]
    d13e:	b10b      	cbz	r3, d144 <disable.part.0+0xa0>
		conn_release(adv);
    d140:	f7ff ff6e 	bl	d020 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    d144:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	return 0;
    d148:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
    d14a:	f36f 0300 	bfc	r3, #0, #1
    d14e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    d152:	b005      	add	sp, #20
    d154:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
    d156:	481e      	ldr	r0, [pc, #120]	; (d1d0 <disable.part.0+0x12c>)
    d158:	f7ff fa12 	bl	c580 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    d15c:	4284      	cmp	r4, r0
    d15e:	d034      	beq.n	d1ca <disable.part.0+0x126>
    d160:	4a1c      	ldr	r2, [pc, #112]	; (d1d4 <disable.part.0+0x130>)
    d162:	491d      	ldr	r1, [pc, #116]	; (d1d8 <disable.part.0+0x134>)
    d164:	481d      	ldr	r0, [pc, #116]	; (d1dc <disable.part.0+0x138>)
    d166:	f640 2363 	movw	r3, #2659	; 0xa63
    d16a:	f00c fa12 	bl	19592 <assert_print>
    d16e:	4040      	eors	r0, r0
    d170:	f380 8811 	msr	BASEPRI, r0
    d174:	f04f 0003 	mov.w	r0, #3
    d178:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    d17a:	200c      	movs	r0, #12
}
    d17c:	b005      	add	sp, #20
    d17e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
    d180:	4a14      	ldr	r2, [pc, #80]	; (d1d4 <disable.part.0+0x130>)
    d182:	4919      	ldr	r1, [pc, #100]	; (d1e8 <disable.part.0+0x144>)
    d184:	4815      	ldr	r0, [pc, #84]	; (d1dc <disable.part.0+0x138>)
    d186:	f640 2369 	movw	r3, #2665	; 0xa69
    d18a:	f00c fa02 	bl	19592 <assert_print>
    d18e:	4040      	eors	r0, r0
    d190:	f380 8811 	msr	BASEPRI, r0
    d194:	f04f 0003 	mov.w	r0, #3
    d198:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    d19a:	480d      	ldr	r0, [pc, #52]	; (d1d0 <disable.part.0+0x12c>)
    d19c:	f7ff f9f0 	bl	c580 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    d1a0:	4284      	cmp	r4, r0
    d1a2:	d1be      	bne.n	d122 <disable.part.0+0x7e>
    d1a4:	e7ca      	b.n	d13c <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
    d1a6:	480a      	ldr	r0, [pc, #40]	; (d1d0 <disable.part.0+0x12c>)
    d1a8:	f7ff f9ea 	bl	c580 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    d1ac:	4284      	cmp	r4, r0
    d1ae:	d00c      	beq.n	d1ca <disable.part.0+0x126>
    d1b0:	4a08      	ldr	r2, [pc, #32]	; (d1d4 <disable.part.0+0x130>)
    d1b2:	4909      	ldr	r1, [pc, #36]	; (d1d8 <disable.part.0+0x134>)
    d1b4:	4809      	ldr	r0, [pc, #36]	; (d1dc <disable.part.0+0x138>)
    d1b6:	f640 2355 	movw	r3, #2645	; 0xa55
    d1ba:	f00c f9ea 	bl	19592 <assert_print>
    d1be:	4040      	eors	r0, r0
    d1c0:	f380 8811 	msr	BASEPRI, r0
    d1c4:	f04f 0003 	mov.w	r0, #3
    d1c8:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    d1ca:	200c      	movs	r0, #12
}
    d1cc:	b005      	add	sp, #20
    d1ce:	bd30      	pop	{r4, r5, pc}
    d1d0:	20002104 	.word	0x20002104
    d1d4:	0001ff5c 	.word	0x0001ff5c
    d1d8:	00020048 	.word	0x00020048
    d1dc:	0001fbf4 	.word	0x0001fbf4
    d1e0:	0000bb49 	.word	0x0000bb49
    d1e4:	20002120 	.word	0x20002120
    d1e8:	00020054 	.word	0x00020054

0000d1ec <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
    d1ec:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    d1ee:	7804      	ldrb	r4, [r0, #0]
    d1f0:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
    d1f4:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    d1f6:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    d1f8:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    d1fc:	d01f      	beq.n	d23e <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    d1fe:	2c01      	cmp	r4, #1
    d200:	d009      	beq.n	d216 <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    d202:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    d204:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    d206:	b18c      	cbz	r4, d22c <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    d208:	2c06      	cmp	r4, #6
    d20a:	d00f      	beq.n	d22c <adv_time_get.constprop.0.isra.0+0x40>
    d20c:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    d210:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
    d214:	e003      	b.n	d21e <adv_time_get.constprop.0.isra.0+0x32>
    d216:	f44f 6387 	mov.w	r3, #1080	; 0x438
    d21a:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
    d21e:	fb0c 3302 	mla	r3, ip, r2, r3
    d222:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    d226:	4018      	ands	r0, r3
}
    d228:	bc10      	pop	{r4}
    d22a:	4770      	bx	lr
				adv_size += pdu->len;
    d22c:	7843      	ldrb	r3, [r0, #1]
    d22e:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
    d230:	00db      	lsls	r3, r3, #3
    d232:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    d236:	f503 72b3 	add.w	r2, r3, #358	; 0x166
    d23a:	440b      	add	r3, r1
    d23c:	e7ef      	b.n	d21e <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
    d23e:	7840      	ldrb	r0, [r0, #1]
}
    d240:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    d242:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    d246:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    d24a:	3010      	adds	r0, #16
    d24c:	005b      	lsls	r3, r3, #1
    d24e:	00c1      	lsls	r1, r0, #3
    d250:	f503 70c8 	add.w	r0, r3, #400	; 0x190
    d254:	fb01 0002 	mla	r0, r1, r2, r0
    d258:	b280      	uxth	r0, r0
}
    d25a:	4770      	bx	lr

0000d25c <ticker_cb>:
{
    d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d260:	461d      	mov	r5, r3
    d262:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    d264:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d268:	429d      	cmp	r5, r3
{
    d26a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    d26e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    d270:	d018      	beq.n	d2a4 <ticker_cb+0x48>
	return ++hdr->ref;
    d272:	7823      	ldrb	r3, [r4, #0]
    d274:	3301      	adds	r3, #1
    d276:	b2db      	uxtb	r3, r3
    d278:	4607      	mov	r7, r0
    d27a:	4616      	mov	r6, r2
    d27c:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    d27e:	2b00      	cmp	r3, #0
    d280:	d064      	beq.n	d34c <ticker_cb+0xf0>
		p.ticks_at_expire = ticks_at_expire;
    d282:	4939      	ldr	r1, [pc, #228]	; (d368 <ticker_cb+0x10c>)
		mfy.param = &p;
    d284:	4b39      	ldr	r3, [pc, #228]	; (d36c <ticker_cb+0x110>)
		p.lazy = lazy;
    d286:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    d288:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    d28c:	2200      	movs	r2, #0
		p.param = lll;
    d28e:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    d290:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    d294:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    d298:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    d29a:	2001      	movs	r0, #1
    d29c:	4611      	mov	r1, r2
    d29e:	f7fb fdb1 	bl	8e04 <mayfly_enqueue>
		LL_ASSERT(!ret);
    d2a2:	b938      	cbnz	r0, d2b4 <ticker_cb+0x58>
	if (!lll->is_hdcd)
    d2a4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d2a8:	f010 0501 	ands.w	r5, r0, #1
    d2ac:	d014      	beq.n	d2d8 <ticker_cb+0x7c>
}
    d2ae:	b00a      	add	sp, #40	; 0x28
    d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    d2b4:	4a2e      	ldr	r2, [pc, #184]	; (d370 <ticker_cb+0x114>)
    d2b6:	492f      	ldr	r1, [pc, #188]	; (d374 <ticker_cb+0x118>)
    d2b8:	482f      	ldr	r0, [pc, #188]	; (d378 <ticker_cb+0x11c>)
    d2ba:	f640 03c6 	movw	r3, #2246	; 0x8c6
    d2be:	f00c f968 	bl	19592 <assert_print>
    d2c2:	4040      	eors	r0, r0
    d2c4:	f380 8811 	msr	BASEPRI, r0
    d2c8:	f04f 0003 	mov.w	r0, #3
    d2cc:	df02      	svc	2
	if (!lll->is_hdcd)
    d2ce:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d2d2:	f010 0501 	ands.w	r5, r0, #1
    d2d6:	d1ea      	bne.n	d2ae <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    d2d8:	2104      	movs	r1, #4
    d2da:	a809      	add	r0, sp, #36	; 0x24
    d2dc:	f005 fcc8 	bl	12c70 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    d2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d2e2:	4a26      	ldr	r2, [pc, #152]	; (d37c <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d2e4:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
    d2e6:	fba2 1203 	umull	r1, r2, r2, r3
    d2ea:	1a99      	subs	r1, r3, r2
    d2ec:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d2f0:	0a12      	lsrs	r2, r2, #8
    d2f2:	f240 1147 	movw	r1, #327	; 0x147
    d2f6:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d2fa:	4a21      	ldr	r2, [pc, #132]	; (d380 <ticker_cb+0x124>)
    d2fc:	4921      	ldr	r1, [pc, #132]	; (d384 <ticker_cb+0x128>)
    d2fe:	1aa2      	subs	r2, r4, r2
    d300:	0892      	lsrs	r2, r2, #2
    d302:	fba1 1202 	umull	r1, r2, r1, r2
    d306:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d308:	491f      	ldr	r1, [pc, #124]	; (d388 <ticker_cb+0x12c>)
    d30a:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
    d30c:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d30e:	e9cd 5104 	strd	r5, r1, [sp, #16]
    d312:	e9cd 5502 	strd	r5, r5, [sp, #8]
    d316:	e9cd 5500 	strd	r5, r5, [sp]
    d31a:	b2d2      	uxtb	r2, r2
    d31c:	2101      	movs	r1, #1
    d31e:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
    d320:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    d322:	f7fc ff23 	bl	a16c <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d326:	f030 0302 	bics.w	r3, r0, #2
    d32a:	d0c0      	beq.n	d2ae <ticker_cb+0x52>
    d32c:	4a10      	ldr	r2, [pc, #64]	; (d370 <ticker_cb+0x114>)
    d32e:	4917      	ldr	r1, [pc, #92]	; (d38c <ticker_cb+0x130>)
    d330:	4811      	ldr	r0, [pc, #68]	; (d378 <ticker_cb+0x11c>)
    d332:	f240 735b 	movw	r3, #1883	; 0x75b
    d336:	f00c f92c 	bl	19592 <assert_print>
    d33a:	4040      	eors	r0, r0
    d33c:	f380 8811 	msr	BASEPRI, r0
    d340:	f04f 0003 	mov.w	r0, #3
    d344:	df02      	svc	2
}
    d346:	b00a      	add	sp, #40	; 0x28
    d348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
    d34c:	4a08      	ldr	r2, [pc, #32]	; (d370 <ticker_cb+0x114>)
    d34e:	4910      	ldr	r1, [pc, #64]	; (d390 <ticker_cb+0x134>)
    d350:	4809      	ldr	r0, [pc, #36]	; (d378 <ticker_cb+0x11c>)
    d352:	f640 03b9 	movw	r3, #2233	; 0x8b9
    d356:	f00c f91c 	bl	19592 <assert_print>
    d35a:	4040      	eors	r0, r0
    d35c:	f380 8811 	msr	BASEPRI, r0
    d360:	f04f 0003 	mov.w	r0, #3
    d364:	df02      	svc	2
    d366:	e78c      	b.n	d282 <ticker_cb+0x26>
    d368:	2000217c 	.word	0x2000217c
    d36c:	200005e4 	.word	0x200005e4
    d370:	0001ff5c 	.word	0x0001ff5c
    d374:	0001fed4 	.word	0x0001fed4
    d378:	0001fbf4 	.word	0x0001fbf4
    d37c:	90d4f121 	.word	0x90d4f121
    d380:	20002104 	.word	0x20002104
    d384:	4bda12f7 	.word	0x4bda12f7
    d388:	0000cfa5 	.word	0x0000cfa5
    d38c:	00020070 	.word	0x00020070
    d390:	0002006c 	.word	0x0002006c

0000d394 <ll_adv_params_set>:
{
    d394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
    d398:	4c69      	ldr	r4, [pc, #420]	; (d540 <ll_adv_params_set+0x1ac>)
{
    d39a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d39c:	4b69      	ldr	r3, [pc, #420]	; (d544 <ll_adv_params_set+0x1b0>)
	if (!adv || adv->is_enabled) {
    d39e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    d3a2:	4680      	mov	r8, r0
    d3a4:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d3a6:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    d3aa:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    d3ac:	f016 0601 	ands.w	r6, r6, #1
{
    d3b0:	4615      	mov	r5, r2
    d3b2:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    d3b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    d3ba:	9000      	str	r0, [sp, #0]
    d3bc:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    d3c0:	f040 8082 	bne.w	d4c8 <ll_adv_params_set+0x134>
	adv->lll.chan_map = chan_map;
    d3c4:	f00c 0c07 	and.w	ip, ip, #7
    d3c8:	f002 0203 	and.w	r2, r2, #3
    d3cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    d3d0:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    d3d4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
    d3d8:	f1be 0f01 	cmp.w	lr, #1
    d3dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    d3e0:	bf08      	it	eq
    d3e2:	f04f 0800 	moveq.w	r8, #0
    d3e6:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
    d3ea:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    d3ee:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu->type = pdu_adv_type[adv_type];
    d3f0:	ab02      	add	r3, sp, #8
    d3f2:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
    d3f4:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    d3f8:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
    d3fc:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
    d400:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu_type_prev = pdu->type;
    d404:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
    d408:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    d40c:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
    d410:	f022 001f 	bic.w	r0, r2, #31
    d414:	f003 030f 	and.w	r3, r3, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    d418:	bf0c      	ite	eq
    d41a:	2101      	moveq	r1, #1
    d41c:	2100      	movne	r1, #0
    d41e:	4303      	orrs	r3, r0
    d420:	f361 1345 	bfi	r3, r1, #5, #1
    d424:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    d428:	f003 030f 	and.w	r3, r3, #15
    d42c:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    d42e:	f002 020f 	and.w	r2, r2, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    d432:	d02d      	beq.n	d490 <ll_adv_params_set+0xfc>
	} else if (pdu->len == 0) {
    d434:	f898 3001 	ldrb.w	r3, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    d438:	f005 0501 	and.w	r5, r5, #1
	} else if (pdu->len == 0) {
    d43c:	b9eb      	cbnz	r3, d47a <ll_adv_params_set+0xe6>
		pdu->tx_addr = own_addr_type & 0x1;
    d43e:	f898 3000 	ldrb.w	r3, [r8]
    d442:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    d446:	f36f 13c7 	bfc	r3, #7, #1
    d44a:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    d44e:	2306      	movs	r3, #6
    d450:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d454:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    d458:	61e4      	str	r4, [r4, #28]
    d45a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d45e:	01ad      	lsls	r5, r5, #6
    d460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
    d462:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d464:	f045 0504 	orr.w	r5, r5, #4
    d468:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    d46a:	b912      	cbnz	r2, d472 <ll_adv_params_set+0xde>
			pdu->len = BDADDR_SIZE;
    d46c:	2106      	movs	r1, #6
    d46e:	7059      	strb	r1, [r3, #1]
	return 0;
    d470:	4616      	mov	r6, r2
}
    d472:	4630      	mov	r0, r6
    d474:	b003      	add	sp, #12
    d476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    d47a:	2a01      	cmp	r2, #1
    d47c:	d042      	beq.n	d504 <ll_adv_params_set+0x170>
		pdu->tx_addr = own_addr_type & 0x1;
    d47e:	f898 3000 	ldrb.w	r3, [r8]
    d482:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    d486:	f36f 13c7 	bfc	r3, #7, #1
    d48a:	f888 3000 	strb.w	r3, [r8]
    d48e:	e7e1      	b.n	d454 <ll_adv_params_set+0xc0>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    d490:	2a01      	cmp	r2, #1
    d492:	d004      	beq.n	d49e <ll_adv_params_set+0x10a>
		if (pdu->len == 0U) {
    d494:	f898 2001 	ldrb.w	r2, [r8, #1]
    d498:	b9da      	cbnz	r2, d4d2 <ll_adv_params_set+0x13e>
			adv->ad_data_backup.len = 0U;
    d49a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    d49e:	f108 0908 	add.w	r9, r8, #8
		pdu->tx_addr = own_addr_type & 0x1;
    d4a2:	f898 3000 	ldrb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    d4a6:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->tx_addr = own_addr_type & 0x1;
    d4a8:	f005 0501 	and.w	r5, r5, #1
    d4ac:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    d4b0:	f367 13c7 	bfi	r3, r7, #7, #1
    d4b4:	f888 3000 	strb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    d4b8:	4648      	mov	r0, r9
    d4ba:	2206      	movs	r2, #6
    d4bc:	f00d f9c9 	bl	1a852 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    d4c0:	230c      	movs	r3, #12
    d4c2:	f888 3001 	strb.w	r3, [r8, #1]
    d4c6:	e7c5      	b.n	d454 <ll_adv_params_set+0xc0>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d4c8:	260c      	movs	r6, #12
}
    d4ca:	4630      	mov	r0, r6
    d4cc:	b003      	add	sp, #12
    d4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LL_ASSERT(pdu->len >=
    d4d2:	2a05      	cmp	r2, #5
    d4d4:	d924      	bls.n	d520 <ll_adv_params_set+0x18c>
			adv->ad_data_backup.len = pdu->len -
    d4d6:	3a06      	subs	r2, #6
    d4d8:	b2d2      	uxtb	r2, r2
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    d4da:	f108 0908 	add.w	r9, r8, #8
    d4de:	481a      	ldr	r0, [pc, #104]	; (d548 <ll_adv_params_set+0x1b4>)
			adv->ad_data_backup.len = pdu->len -
    d4e0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    d4e4:	4649      	mov	r1, r9
    d4e6:	f00d f9b4 	bl	1a852 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    d4ea:	f898 3000 	ldrb.w	r3, [r8]
    d4ee:	f003 030f 	and.w	r3, r3, #15
    d4f2:	2b01      	cmp	r3, #1
    d4f4:	d0d5      	beq.n	d4a2 <ll_adv_params_set+0x10e>
	} else if (pdu->len == 0) {
    d4f6:	f898 3001 	ldrb.w	r3, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    d4fa:	f005 0501 	and.w	r5, r5, #1
	} else if (pdu->len == 0) {
    d4fe:	2b00      	cmp	r3, #0
    d500:	d1bd      	bne.n	d47e <ll_adv_params_set+0xea>
    d502:	e79c      	b.n	d43e <ll_adv_params_set+0xaa>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    d504:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    d508:	f104 0141 	add.w	r1, r4, #65	; 0x41
    d50c:	f108 0008 	add.w	r0, r8, #8
    d510:	f00d f99f 	bl	1a852 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    d514:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    d518:	3306      	adds	r3, #6
    d51a:	f888 3001 	strb.w	r3, [r8, #1]
    d51e:	e7ae      	b.n	d47e <ll_adv_params_set+0xea>
			LL_ASSERT(pdu->len >=
    d520:	4a0a      	ldr	r2, [pc, #40]	; (d54c <ll_adv_params_set+0x1b8>)
    d522:	490b      	ldr	r1, [pc, #44]	; (d550 <ll_adv_params_set+0x1bc>)
    d524:	480b      	ldr	r0, [pc, #44]	; (d554 <ll_adv_params_set+0x1c0>)
    d526:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    d52a:	f00c f832 	bl	19592 <assert_print>
    d52e:	4040      	eors	r0, r0
    d530:	f380 8811 	msr	BASEPRI, r0
    d534:	f04f 0003 	mov.w	r0, #3
    d538:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    d53a:	f898 2001 	ldrb.w	r2, [r8, #1]
    d53e:	e7ca      	b.n	d4d6 <ll_adv_params_set+0x142>
    d540:	20002104 	.word	0x20002104
    d544:	0001f3c8 	.word	0x0001f3c8
    d548:	20002145 	.word	0x20002145
    d54c:	0001ff5c 	.word	0x0001ff5c
    d550:	000200a8 	.word	0x000200a8
    d554:	0001fbf4 	.word	0x0001fbf4

0000d558 <ull_adv_init>:
{
    d558:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    d55a:	4c06      	ldr	r4, [pc, #24]	; (d574 <ull_adv_init+0x1c>)
    d55c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d560:	f005 ffb2 	bl	134c8 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    d564:	f104 0034 	add.w	r0, r4, #52	; 0x34
    d568:	f005 ffae 	bl	134c8 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    d56c:	f7ff fd36 	bl	cfdc <init_set.constprop.0>
}
    d570:	2000      	movs	r0, #0
    d572:	bd10      	pop	{r4, pc}
    d574:	20002104 	.word	0x20002104

0000d578 <ull_adv_reset>:
{
    d578:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
    d57a:	4b0b      	ldr	r3, [pc, #44]	; (d5a8 <ull_adv_reset+0x30>)
    d57c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    d580:	07d2      	lsls	r2, r2, #31
    d582:	d50e      	bpl.n	d5a2 <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
    d584:	6a1a      	ldr	r2, [r3, #32]
    d586:	b152      	cbz	r2, d59e <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
    d588:	f892 1020 	ldrb.w	r1, [r2, #32]
    d58c:	f041 0102 	orr.w	r1, r1, #2
    d590:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    d594:	6a1b      	ldr	r3, [r3, #32]
    d596:	f893 3020 	ldrb.w	r3, [r3, #32]
    d59a:	07db      	lsls	r3, r3, #31
    d59c:	d401      	bmi.n	d5a2 <ull_adv_reset+0x2a>
    d59e:	f7ff fd81 	bl	d0a4 <disable.part.0>
}
    d5a2:	2000      	movs	r0, #0
    d5a4:	bd08      	pop	{r3, pc}
    d5a6:	bf00      	nop
    d5a8:	20002104 	.word	0x20002104

0000d5ac <ull_adv_reset_finalize>:
{
    d5ac:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    d5ae:	4c0a      	ldr	r4, [pc, #40]	; (d5d8 <ull_adv_reset_finalize+0x2c>)
    d5b0:	f104 0528 	add.w	r5, r4, #40	; 0x28
    d5b4:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
    d5b6:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
    d5b8:	f005 ff96 	bl	134e8 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    d5bc:	4620      	mov	r0, r4
    d5be:	f005 ff93 	bl	134e8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    d5c2:	4628      	mov	r0, r5
    d5c4:	f005 ff80 	bl	134c8 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    d5c8:	4620      	mov	r0, r4
    d5ca:	f005 ff7d 	bl	134c8 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    d5ce:	f7ff fd05 	bl	cfdc <init_set.constprop.0>
}
    d5d2:	2000      	movs	r0, #0
    d5d4:	bd38      	pop	{r3, r4, r5, pc}
    d5d6:	bf00      	nop
    d5d8:	20002104 	.word	0x20002104

0000d5dc <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d5dc:	4a04      	ldr	r2, [pc, #16]	; (d5f0 <ull_adv_handle_get+0x14>)
    d5de:	4b05      	ldr	r3, [pc, #20]	; (d5f4 <ull_adv_handle_get+0x18>)
    d5e0:	1a80      	subs	r0, r0, r2
    d5e2:	0880      	lsrs	r0, r0, #2
    d5e4:	fba3 3000 	umull	r3, r0, r3, r0
}
    d5e8:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    d5ec:	4770      	bx	lr
    d5ee:	bf00      	nop
    d5f0:	20002104 	.word	0x20002104
    d5f4:	4bda12f7 	.word	0x4bda12f7

0000d5f8 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    d5f8:	4a04      	ldr	r2, [pc, #16]	; (d60c <ull_adv_lll_handle_get+0x14>)
    d5fa:	6800      	ldr	r0, [r0, #0]
    d5fc:	4b04      	ldr	r3, [pc, #16]	; (d610 <ull_adv_lll_handle_get+0x18>)
    d5fe:	1a80      	subs	r0, r0, r2
    d600:	0880      	lsrs	r0, r0, #2
    d602:	fba3 3000 	umull	r3, r0, r3, r0
}
    d606:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    d60a:	4770      	bx	lr
    d60c:	20002104 	.word	0x20002104
    d610:	4bda12f7 	.word	0x4bda12f7

0000d614 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    d614:	b928      	cbnz	r0, d622 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    d616:	4b04      	ldr	r3, [pc, #16]	; (d628 <ull_adv_is_enabled+0x14>)
    d618:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    d61c:	f000 0001 	and.w	r0, r0, #1
    d620:	4770      	bx	lr
    d622:	2000      	movs	r0, #0
}
    d624:	4770      	bx	lr
    d626:	bf00      	nop
    d628:	20002104 	.word	0x20002104

0000d62c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    d62c:	291f      	cmp	r1, #31
    d62e:	d849      	bhi.n	d6c4 <ull_adv_data_set+0x98>
{
    d630:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    d632:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    d636:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d63a:	b083      	sub	sp, #12
    d63c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    d63e:	7833      	ldrb	r3, [r6, #0]
    d640:	f003 030f 	and.w	r3, r3, #15
    d644:	2b01      	cmp	r3, #1
    d646:	460d      	mov	r5, r1
    d648:	4604      	mov	r4, r0
    d64a:	4617      	mov	r7, r2
    d64c:	d03c      	beq.n	d6c8 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    d64e:	f10d 0107 	add.w	r1, sp, #7
    d652:	3028      	adds	r0, #40	; 0x28
    d654:	f005 ffb8 	bl	135c8 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    d658:	4631      	mov	r1, r6
    d65a:	4606      	mov	r6, r0
    d65c:	f811 2b02 	ldrb.w	r2, [r1], #2
    d660:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
    d664:	f3c2 0303 	ubfx	r3, r2, #0, #4
    d668:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    d66c:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
    d670:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    d674:	f002 0280 	and.w	r2, r2, #128	; 0x80
    d678:	4630      	mov	r0, r6
    d67a:	4313      	orrs	r3, r2
    d67c:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    d680:	2206      	movs	r2, #6
    d682:	f00d f8e6 	bl	1a852 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    d686:	462a      	mov	r2, r5
    d688:	4639      	mov	r1, r7
    d68a:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    d68e:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    d690:	f00d f8df 	bl	1a852 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    d694:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
    d696:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    d69a:	07db      	lsls	r3, r3, #31
    d69c:	d406      	bmi.n	d6ac <ull_adv_data_set+0x80>
	pdu->last = idx;
    d69e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6a2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
    d6a6:	2000      	movs	r0, #0
}
    d6a8:	b003      	add	sp, #12
    d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    d6ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    d6b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    d6b4:	4631      	mov	r1, r6
    d6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d6b8:	4620      	mov	r0, r4
    d6ba:	f7f3 faf9 	bl	cb0 <ull_adv_time_update>
		if (err) {
    d6be:	2800      	cmp	r0, #0
    d6c0:	d0ed      	beq.n	d69e <ull_adv_data_set+0x72>
    d6c2:	e7f1      	b.n	d6a8 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
    d6c4:	2012      	movs	r0, #18
}
    d6c6:	4770      	bx	lr
		adv->ad_data_backup.len = len;
    d6c8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
    d6cc:	460a      	mov	r2, r1
    d6ce:	3041      	adds	r0, #65	; 0x41
    d6d0:	4639      	mov	r1, r7
    d6d2:	f00d f8be 	bl	1a852 <memcpy>
		return 0;
    d6d6:	2000      	movs	r0, #0
}
    d6d8:	b003      	add	sp, #12
    d6da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d6dc <ll_adv_data_set>:
{
    d6dc:	4603      	mov	r3, r0
    d6de:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    d6e0:	4801      	ldr	r0, [pc, #4]	; (d6e8 <ll_adv_data_set+0xc>)
    d6e2:	4619      	mov	r1, r3
    d6e4:	f7ff bfa2 	b.w	d62c <ull_adv_data_set>
    d6e8:	20002104 	.word	0x20002104

0000d6ec <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
    d6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ee:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    d6f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d6f6:	b083      	sub	sp, #12
    d6f8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    d6fa:	460e      	mov	r6, r1
    d6fc:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    d6fe:	f10d 0107 	add.w	r1, sp, #7
    d702:	3034      	adds	r0, #52	; 0x34
    d704:	4617      	mov	r7, r2
    d706:	f005 ff5f 	bl	135c8 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    d70a:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    d70c:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
    d70e:	f811 3b02 	ldrb.w	r3, [r1], #2
    d712:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d716:	019b      	lsls	r3, r3, #6
    d718:	f043 0304 	orr.w	r3, r3, #4
    d71c:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    d71e:	1db3      	adds	r3, r6, #6
    d720:	7043      	strb	r3, [r0, #1]
    d722:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    d724:	3002      	adds	r0, #2
    d726:	f00d f894 	bl	1a852 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    d72a:	4632      	mov	r2, r6
    d72c:	4639      	mov	r1, r7
    d72e:	f105 0008 	add.w	r0, r5, #8
    d732:	f00d f88e 	bl	1a852 <memcpy>
	if (adv->is_enabled) {
    d736:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    d73a:	07db      	lsls	r3, r3, #31
    d73c:	d50a      	bpl.n	d754 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    d73e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    d742:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d746:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    d748:	780b      	ldrb	r3, [r1, #0]
    d74a:	f013 030f 	ands.w	r3, r3, #15
    d74e:	d008      	beq.n	d762 <ull_scan_rsp_set.part.0+0x76>
    d750:	2b06      	cmp	r3, #6
    d752:	d006      	beq.n	d762 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
    d754:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d758:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
    d75c:	2000      	movs	r0, #0
}
    d75e:	b003      	add	sp, #12
    d760:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    d762:	462a      	mov	r2, r5
    d764:	4620      	mov	r0, r4
    d766:	f7f3 faa3 	bl	cb0 <ull_adv_time_update>
			if (err) {
    d76a:	2800      	cmp	r0, #0
    d76c:	d0f2      	beq.n	d754 <ull_scan_rsp_set.part.0+0x68>
    d76e:	e7f6      	b.n	d75e <ull_scan_rsp_set.part.0+0x72>

0000d770 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    d770:	281f      	cmp	r0, #31
{
    d772:	4603      	mov	r3, r0
    d774:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
    d776:	d803      	bhi.n	d780 <ll_adv_scan_rsp_set+0x10>
    d778:	4802      	ldr	r0, [pc, #8]	; (d784 <ll_adv_scan_rsp_set+0x14>)
    d77a:	4619      	mov	r1, r3
    d77c:	f7ff bfb6 	b.w	d6ec <ull_scan_rsp_set.part.0>
}
    d780:	2012      	movs	r0, #18
    d782:	4770      	bx	lr
    d784:	20002104 	.word	0x20002104

0000d788 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
    d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d78c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d78e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    d792:	4625      	mov	r5, r4
{
    d794:	4680      	mov	r8, r0
    d796:	f815 1b1c 	ldrb.w	r1, [r5], #28
    d79a:	3101      	adds	r1, #1
    d79c:	b2c9      	uxtb	r1, r1
    d79e:	4617      	mov	r7, r2
    d7a0:	461e      	mov	r6, r3
    d7a2:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    d7a4:	b181      	cbz	r1, d7c8 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    d7a6:	4c17      	ldr	r4, [pc, #92]	; (d804 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
    d7a8:	4b17      	ldr	r3, [pc, #92]	; (d808 <ticker_cb+0x80>)
	p.lazy = lazy;
    d7aa:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d7ac:	2200      	movs	r2, #0
    d7ae:	4611      	mov	r1, r2
    d7b0:	2001      	movs	r0, #1
	p.remainder = remainder;
    d7b2:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
    d7b6:	60e5      	str	r5, [r4, #12]
	p.force = force;
    d7b8:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
    d7bc:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d7be:	f7fb fb21 	bl	8e04 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    d7c2:	b978      	cbnz	r0, d7e4 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
    d7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
    d7c8:	4a10      	ldr	r2, [pc, #64]	; (d80c <ticker_cb+0x84>)
    d7ca:	4911      	ldr	r1, [pc, #68]	; (d810 <ticker_cb+0x88>)
    d7cc:	4811      	ldr	r0, [pc, #68]	; (d814 <ticker_cb+0x8c>)
    d7ce:	f240 23fe 	movw	r3, #766	; 0x2fe
    d7d2:	f00b fede 	bl	19592 <assert_print>
    d7d6:	4040      	eors	r0, r0
    d7d8:	f380 8811 	msr	BASEPRI, r0
    d7dc:	f04f 0003 	mov.w	r0, #3
    d7e0:	df02      	svc	2
    d7e2:	e7e0      	b.n	d7a6 <ticker_cb+0x1e>
	LL_ASSERT(!ret);
    d7e4:	4a09      	ldr	r2, [pc, #36]	; (d80c <ticker_cb+0x84>)
    d7e6:	490c      	ldr	r1, [pc, #48]	; (d818 <ticker_cb+0x90>)
    d7e8:	480a      	ldr	r0, [pc, #40]	; (d814 <ticker_cb+0x8c>)
    d7ea:	f240 330b 	movw	r3, #779	; 0x30b
    d7ee:	f00b fed0 	bl	19592 <assert_print>
    d7f2:	4040      	eors	r0, r0
    d7f4:	f380 8811 	msr	BASEPRI, r0
    d7f8:	f04f 0003 	mov.w	r0, #3
    d7fc:	df02      	svc	2
}
    d7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d802:	bf00      	nop
    d804:	200021c8 	.word	0x200021c8
    d808:	20000614 	.word	0x20000614
    d80c:	000200e8 	.word	0x000200e8
    d810:	0002006c 	.word	0x0002006c
    d814:	0001fbf4 	.word	0x0001fbf4
    d818:	0001fed4 	.word	0x0001fed4

0000d81c <ull_scan_init>:
}
    d81c:	2000      	movs	r0, #0
    d81e:	4770      	bx	lr

0000d820 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    d820:	3004      	adds	r0, #4
{
    d822:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    d824:	f101 021c 	add.w	r2, r1, #28
    d828:	b2c0      	uxtb	r0, r0
    d82a:	f7fe ff15 	bl	c658 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    d82e:	b110      	cbz	r0, d836 <ull_scan_disable+0x16>
    d830:	3078      	adds	r0, #120	; 0x78
    d832:	d101      	bne.n	d838 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d834:	200c      	movs	r0, #12
}
    d836:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    d838:	4a07      	ldr	r2, [pc, #28]	; (d858 <ull_scan_disable+0x38>)
    d83a:	4908      	ldr	r1, [pc, #32]	; (d85c <ull_scan_disable+0x3c>)
    d83c:	4808      	ldr	r0, [pc, #32]	; (d860 <ull_scan_disable+0x40>)
    d83e:	f240 2301 	movw	r3, #513	; 0x201
    d842:	f00b fea6 	bl	19592 <assert_print>
    d846:	4040      	eors	r0, r0
    d848:	f380 8811 	msr	BASEPRI, r0
    d84c:	f04f 0003 	mov.w	r0, #3
    d850:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    d852:	200c      	movs	r0, #12
}
    d854:	bd08      	pop	{r3, pc}
    d856:	bf00      	nop
    d858:	000200e8 	.word	0x000200e8
    d85c:	00020128 	.word	0x00020128
    d860:	0001fbf4 	.word	0x0001fbf4

0000d864 <ll_scan_enable>:
{
    d864:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    d866:	4c12      	ldr	r4, [pc, #72]	; (d8b0 <ll_scan_enable+0x4c>)
    d868:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    d86c:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
    d870:	b170      	cbz	r0, d890 <ll_scan_enable+0x2c>
	if (!scan || scan->is_enabled) {
    d872:	b9da      	cbnz	r2, d8ac <ll_scan_enable+0x48>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
    d874:	079b      	lsls	r3, r3, #30
    d876:	d506      	bpl.n	d886 <ll_scan_enable+0x22>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
    d878:	2001      	movs	r0, #1
    d87a:	f7fc fcfb 	bl	a274 <ll_addr_get>
    d87e:	2106      	movs	r1, #6
    d880:	f7fb fa32 	bl	8ce8 <mem_nz>
    d884:	b180      	cbz	r0, d8a8 <ll_scan_enable+0x44>
}
    d886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
    d88a:	4809      	ldr	r0, [pc, #36]	; (d8b0 <ll_scan_enable+0x4c>)
    d88c:	f7f3 baa4 	b.w	dd8 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
    d890:	b162      	cbz	r2, d8ac <ll_scan_enable+0x48>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
    d892:	4621      	mov	r1, r4
    d894:	f7ff ffc4 	bl	d820 <ull_scan_disable>
	if (ret) {
    d898:	b928      	cbnz	r0, d8a6 <ll_scan_enable+0x42>
		return ret;
	}

	scan->is_enabled = 0U;
    d89a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    d89e:	f360 0300 	bfi	r3, r0, #0, #1
    d8a2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    d8a6:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_INVALID_PARAM;
    d8a8:	2012      	movs	r0, #18
}
    d8aa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d8ac:	200c      	movs	r0, #12
}
    d8ae:	bd10      	pop	{r4, pc}
    d8b0:	20002194 	.word	0x20002194

0000d8b4 <ull_scan_reset>:
{
    d8b4:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    d8b6:	4c09      	ldr	r4, [pc, #36]	; (d8dc <ull_scan_reset+0x28>)
    d8b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    d8bc:	07db      	lsls	r3, r3, #31
    d8be:	d50a      	bpl.n	d8d6 <ull_scan_reset+0x22>
	ret = ull_scan_disable(handle, scan);
    d8c0:	4621      	mov	r1, r4
    d8c2:	2000      	movs	r0, #0
    d8c4:	f7ff ffac 	bl	d820 <ull_scan_disable>
	if (ret) {
    d8c8:	b928      	cbnz	r0, d8d6 <ull_scan_reset+0x22>
	scan->is_enabled = 0U;
    d8ca:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    d8ce:	f360 0300 	bfi	r3, r0, #0, #1
    d8d2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    d8d6:	2000      	movs	r0, #0
    d8d8:	bd10      	pop	{r4, pc}
    d8da:	bf00      	nop
    d8dc:	20002194 	.word	0x20002194

0000d8e0 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    d8e0:	4a04      	ldr	r2, [pc, #16]	; (d8f4 <ull_scan_lll_handle_get+0x14>)
    d8e2:	6800      	ldr	r0, [r0, #0]
    d8e4:	4b04      	ldr	r3, [pc, #16]	; (d8f8 <ull_scan_lll_handle_get+0x18>)
    d8e6:	1a80      	subs	r0, r0, r2
    d8e8:	fba3 3000 	umull	r3, r0, r3, r0
}
    d8ec:	f3c0 1007 	ubfx	r0, r0, #4, #8
    d8f0:	4770      	bx	lr
    d8f2:	bf00      	nop
    d8f4:	20002194 	.word	0x20002194
    d8f8:	4ec4ec4f 	.word	0x4ec4ec4f

0000d8fc <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
    d8fc:	b970      	cbnz	r0, d91c <ull_scan_is_enabled+0x20>
	if (!scan || !scan->is_enabled) {
    d8fe:	4a08      	ldr	r2, [pc, #32]	; (d920 <ull_scan_is_enabled+0x24>)
    d900:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d904:	f013 0001 	ands.w	r0, r3, #1
    d908:	d009      	beq.n	d91e <ull_scan_is_enabled+0x22>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    d90a:	f892 0020 	ldrb.w	r0, [r2, #32]
    d90e:	f003 0301 	and.w	r3, r3, #1
    d912:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d916:	fa03 f000 	lsl.w	r0, r3, r0
    d91a:	4770      	bx	lr
		return 0U;
    d91c:	2000      	movs	r0, #0
}
    d91e:	4770      	bx	lr
    d920:	20002194 	.word	0x20002194

0000d924 <init_reset>:
{
    d924:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    d926:	4b15      	ldr	r3, [pc, #84]	; (d97c <init_reset+0x58>)
    d928:	4815      	ldr	r0, [pc, #84]	; (d980 <init_reset+0x5c>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d92a:	4c16      	ldr	r4, [pc, #88]	; (d984 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    d92c:	2201      	movs	r2, #1
    d92e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    d932:	f7fb f95f 	bl	8bf4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
    d936:	4b14      	ldr	r3, [pc, #80]	; (d988 <init_reset+0x64>)
    d938:	2204      	movs	r2, #4
    d93a:	1898      	adds	r0, r3, r2
    d93c:	2124      	movs	r1, #36	; 0x24
    d93e:	f7fb f959 	bl	8bf4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    d942:	4b12      	ldr	r3, [pc, #72]	; (d98c <init_reset+0x68>)
    d944:	2204      	movs	r2, #4
    d946:	1898      	adds	r0, r3, r2
    d948:	212c      	movs	r1, #44	; 0x2c
    d94a:	f7fb f953 	bl	8bf4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    d94e:	4b10      	ldr	r3, [pc, #64]	; (d990 <init_reset+0x6c>)
    d950:	2208      	movs	r2, #8
    d952:	1d18      	adds	r0, r3, #4
    d954:	4611      	mov	r1, r2
    d956:	f7fb f94d 	bl	8bf4 <mem_init>
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
    d95a:	4a0e      	ldr	r2, [pc, #56]	; (d994 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d95c:	4b0e      	ldr	r3, [pc, #56]	; (d998 <init_reset+0x74>)
	default_phy_tx |= PHY_2M;
    d95e:	490f      	ldr	r1, [pc, #60]	; (d99c <init_reset+0x78>)
    d960:	2000      	movs	r0, #0
    d962:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d964:	221b      	movs	r2, #27
    d966:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
    d968:	4a0d      	ldr	r2, [pc, #52]	; (d9a0 <init_reset+0x7c>)
	default_phy_tx |= PHY_2M;
    d96a:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d96c:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_tx |= PHY_2M;
    d970:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
    d972:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d974:	f8a4 c000 	strh.w	ip, [r4]
}
    d978:	bd10      	pop	{r4, pc}
    d97a:	bf00      	nop
    d97c:	200021d8 	.word	0x200021d8
    d980:	200012b0 	.word	0x200012b0
    d984:	200028dc 	.word	0x200028dc
    d988:	20002200 	.word	0x20002200
    d98c:	20002294 	.word	0x20002294
    d990:	20002348 	.word	0x20002348
    d994:	200021dc 	.word	0x200021dc
    d998:	200028da 	.word	0x200028da
    d99c:	20002995 	.word	0x20002995
    d9a0:	20002994 	.word	0x20002994

0000d9a4 <ctrl_tx_pause_enqueue>:
{
    d9a4:	b538      	push	{r3, r4, r5, lr}
    d9a6:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
    d9a8:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
    d9ac:	460d      	mov	r5, r1
	if (
    d9ae:	b11b      	cbz	r3, d9b8 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    d9b0:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    d9b4:	0789      	lsls	r1, r1, #30
    d9b6:	d50c      	bpl.n	d9d2 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
    d9b8:	b340      	cbz	r0, da0c <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
    d9ba:	2a00      	cmp	r2, #0
    d9bc:	d130      	bne.n	da20 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
    d9be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d9c2:	681a      	ldr	r2, [r3, #0]
    d9c4:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    d9c6:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    d9c8:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    d9ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d9ce:	b1d3      	cbz	r3, da06 <ctrl_tx_pause_enqueue+0x62>
}
    d9d0:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    d9d2:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    d9d6:	07c9      	lsls	r1, r1, #31
    d9d8:	d4ee      	bmi.n	d9b8 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    d9da:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    d9de:	428b      	cmp	r3, r1
    d9e0:	d02c      	beq.n	da3c <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
    d9e2:	2800      	cmp	r0, #0
    d9e4:	d036      	beq.n	da54 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
    d9e6:	2a00      	cmp	r2, #0
    d9e8:	d0e9      	beq.n	d9be <ctrl_tx_pause_enqueue+0x1a>
    d9ea:	4a22      	ldr	r2, [pc, #136]	; (da74 <ctrl_tx_pause_enqueue+0xd0>)
    d9ec:	4922      	ldr	r1, [pc, #136]	; (da78 <ctrl_tx_pause_enqueue+0xd4>)
    d9ee:	4823      	ldr	r0, [pc, #140]	; (da7c <ctrl_tx_pause_enqueue+0xd8>)
    d9f0:	f640 3313 	movw	r3, #2835	; 0xb13
    d9f4:	f00b fdcd 	bl	19592 <assert_print>
    d9f8:	4040      	eors	r0, r0
    d9fa:	f380 8811 	msr	BASEPRI, r0
    d9fe:	f04f 0003 	mov.w	r0, #3
    da02:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    da04:	e7db      	b.n	d9be <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
    da06:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
    da0a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    da0c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    da0e:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
    da12:	2a00      	cmp	r2, #0
    da14:	d1db      	bne.n	d9ce <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
    da16:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
    da1a:	2b00      	cmp	r3, #0
    da1c:	d1d8      	bne.n	d9d0 <ctrl_tx_pause_enqueue+0x2c>
    da1e:	e7f2      	b.n	da06 <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
    da20:	4a14      	ldr	r2, [pc, #80]	; (da74 <ctrl_tx_pause_enqueue+0xd0>)
    da22:	4915      	ldr	r1, [pc, #84]	; (da78 <ctrl_tx_pause_enqueue+0xd4>)
    da24:	4815      	ldr	r0, [pc, #84]	; (da7c <ctrl_tx_pause_enqueue+0xd8>)
    da26:	f640 3325 	movw	r3, #2853	; 0xb25
    da2a:	f00b fdb2 	bl	19592 <assert_print>
    da2e:	4040      	eors	r0, r0
    da30:	f380 8811 	msr	BASEPRI, r0
    da34:	f04f 0003 	mov.w	r0, #3
    da38:	df02      	svc	2
    da3a:	e7c0      	b.n	d9be <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
    da3c:	6819      	ldr	r1, [r3, #0]
    da3e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    da42:	2800      	cmp	r0, #0
    da44:	d1cf      	bne.n	d9e6 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
    da46:	6819      	ldr	r1, [r3, #0]
    da48:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    da4a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    da4c:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    da4e:	2a00      	cmp	r2, #0
    da50:	d0e1      	beq.n	da16 <ctrl_tx_pause_enqueue+0x72>
    da52:	e7bc      	b.n	d9ce <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    da54:	7919      	ldrb	r1, [r3, #4]
    da56:	f001 0103 	and.w	r1, r1, #3
    da5a:	2903      	cmp	r1, #3
    da5c:	d004      	beq.n	da68 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    da5e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
    da62:	2a00      	cmp	r2, #0
    da64:	d0ab      	beq.n	d9be <ctrl_tx_pause_enqueue+0x1a>
    da66:	e7c0      	b.n	d9ea <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
    da68:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    da6a:	2903      	cmp	r1, #3
    da6c:	d0eb      	beq.n	da46 <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    da6e:	290a      	cmp	r1, #10
    da70:	d1f5      	bne.n	da5e <ctrl_tx_pause_enqueue+0xba>
    da72:	e7e8      	b.n	da46 <ctrl_tx_pause_enqueue+0xa2>
    da74:	00020140 	.word	0x00020140
    da78:	00020180 	.word	0x00020180
    da7c:	0001fbf4 	.word	0x0001fbf4

0000da80 <tx_lll_flush>:
{
    da80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    da84:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    da88:	4934      	ldr	r1, [pc, #208]	; (db5c <tx_lll_flush+0xdc>)
{
    da8a:	b083      	sub	sp, #12
    da8c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    da8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    da92:	4640      	mov	r0, r8
    da94:	f7fb f914 	bl	8cc0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    da98:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
    da9c:	4629      	mov	r1, r5
    da9e:	f006 fcf1 	bl	14484 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    daa2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    daa4:	aa01      	add	r2, sp, #4
    daa6:	4631      	mov	r1, r6
    daa8:	f7fb f94a 	bl	8d40 <memq_dequeue>
	while (link) {
    daac:	b328      	cbz	r0, dafa <tx_lll_flush+0x7a>
    daae:	4c2c      	ldr	r4, [pc, #176]	; (db60 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
    dab0:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    dab4:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    dab8:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    daba:	f894 c002 	ldrb.w	ip, [r4, #2]
    dabe:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
    dac0:	1c53      	adds	r3, r2, #1
    dac2:	b2db      	uxtb	r3, r3
		last = 0U;
    dac4:	459c      	cmp	ip, r3
    dac6:	bf08      	it	eq
    dac8:	2300      	moveq	r3, #0
	if (last == first) {
    daca:	4299      	cmp	r1, r3
    dacc:	f894 c000 	ldrb.w	ip, [r4]
    dad0:	d033      	beq.n	db3a <tx_lll_flush+0xba>
		lll_tx->node = tx;
    dad2:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    dad4:	fb12 f20c 	smulbb	r2, r2, ip
    dad8:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
    dadc:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    dae0:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    dae2:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    dae6:	6002      	str	r2, [r0, #0]
		tx->next = link;
    dae8:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    daea:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
    daec:	7163      	strb	r3, [r4, #5]
    daee:	aa01      	add	r2, sp, #4
    daf0:	4631      	mov	r1, r6
    daf2:	f7fb f925 	bl	8d40 <memq_dequeue>
	while (link) {
    daf6:	2800      	cmp	r0, #0
    daf8:	d1de      	bne.n	dab8 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    dafa:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
    dafe:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
    db02:	b150      	cbz	r0, db1a <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    db04:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    db06:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    db08:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
    db0c:	f7fe fe20 	bl	c750 <ull_rx_put>
	ull_rx_sched();
    db10:	f7fe fe2e 	bl	c770 <ull_rx_sched>
}
    db14:	b003      	add	sp, #12
    db16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    db1a:	4a12      	ldr	r2, [pc, #72]	; (db64 <tx_lll_flush+0xe4>)
    db1c:	4912      	ldr	r1, [pc, #72]	; (db68 <tx_lll_flush+0xe8>)
    db1e:	4813      	ldr	r0, [pc, #76]	; (db6c <tx_lll_flush+0xec>)
    db20:	f640 237f 	movw	r3, #2687	; 0xa7f
    db24:	f00b fd35 	bl	19592 <assert_print>
    db28:	4040      	eors	r0, r0
    db2a:	f380 8811 	msr	BASEPRI, r0
    db2e:	f04f 0003 	mov.w	r0, #3
    db32:	df02      	svc	2
	link = rx->hdr.link;
    db34:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
    db38:	e7e4      	b.n	db04 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    db3a:	4a0a      	ldr	r2, [pc, #40]	; (db64 <tx_lll_flush+0xe4>)
    db3c:	490c      	ldr	r1, [pc, #48]	; (db70 <tx_lll_flush+0xf0>)
    db3e:	480b      	ldr	r0, [pc, #44]	; (db6c <tx_lll_flush+0xec>)
    db40:	f640 236b 	movw	r3, #2667	; 0xa6b
    db44:	f00b fd25 	bl	19592 <assert_print>
    db48:	4040      	eors	r0, r0
    db4a:	f380 8811 	msr	BASEPRI, r0
    db4e:	f04f 0003 	mov.w	r0, #3
    db52:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    db54:	2300      	movs	r3, #0
    db56:	801b      	strh	r3, [r3, #0]
    db58:	deff      	udf	#255	; 0xff
    db5a:	bf00      	nop
    db5c:	200012b0 	.word	0x200012b0
    db60:	20000624 	.word	0x20000624
    db64:	00020140 	.word	0x00020140
    db68:	00020190 	.word	0x00020190
    db6c:	0001fbf4 	.word	0x0001fbf4
    db70:	00020188 	.word	0x00020188

0000db74 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    db74:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    db78:	f012 0202 	ands.w	r2, r2, #2
    db7c:	d00a      	beq.n	db94 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    db7e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
    db82:	b1d3      	cbz	r3, dbba <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    db84:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
    db88:	681a      	ldr	r2, [r3, #0]
    db8a:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    db8c:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    db8e:	680b      	ldr	r3, [r1, #0]
    db90:	b1d3      	cbz	r3, dbc8 <ctrl_tx_sec_enqueue+0x54>
    db92:	4770      	bx	lr
		if (conn->tx_head) {
    db94:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    db98:	b1cb      	cbz	r3, dbce <ctrl_tx_sec_enqueue+0x5a>
{
    db9a:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    db9c:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
    dba0:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
    dba4:	45e6      	cmp	lr, ip
    dba6:	d004      	beq.n	dbb2 <ctrl_tx_sec_enqueue+0x3e>
    dba8:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
    dbac:	f1bc 0f03 	cmp.w	ip, #3
    dbb0:	d010      	beq.n	dbd4 <ctrl_tx_sec_enqueue+0x60>
}
    dbb2:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    dbb6:	f7ff bef5 	b.w	d9a4 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    dbba:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    dbbe:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    dbc0:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d1e4      	bne.n	db92 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    dbc8:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
    dbcc:	4770      	bx	lr
	bool pause = false;
    dbce:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    dbd0:	f7ff bee8 	b.w	d9a4 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    dbd4:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    dbd8:	f00c 0c03 	and.w	ip, ip, #3
    dbdc:	f1bc 0f03 	cmp.w	ip, #3
    dbe0:	d1e7      	bne.n	dbb2 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    dbe2:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    dbe4:	2a03      	cmp	r2, #3
    dbe6:	d005      	beq.n	dbf4 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    dbe8:	f1a2 020a 	sub.w	r2, r2, #10
    dbec:	fab2 f282 	clz	r2, r2
    dbf0:	0952      	lsrs	r2, r2, #5
    dbf2:	e7de      	b.n	dbb2 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    dbf4:	2201      	movs	r2, #1
    dbf6:	e7dc      	b.n	dbb2 <ctrl_tx_sec_enqueue+0x3e>

0000dbf8 <ticker_stop_op_cb>:
{
    dbf8:	b510      	push	{r4, lr}
    dbfa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dbfc:	b9b0      	cbnz	r0, dc2c <ticker_stop_op_cb+0x34>
	mfy.param = param;
    dbfe:	4b12      	ldr	r3, [pc, #72]	; (dc48 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    dc00:	2200      	movs	r2, #0
    dc02:	2101      	movs	r1, #1
    dc04:	2002      	movs	r0, #2
	mfy.param = param;
    dc06:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    dc08:	f7fb f8fc 	bl	8e04 <mayfly_enqueue>
	LL_ASSERT(!ret);
    dc0c:	b900      	cbnz	r0, dc10 <ticker_stop_op_cb+0x18>
}
    dc0e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    dc10:	4a0e      	ldr	r2, [pc, #56]	; (dc4c <ticker_stop_op_cb+0x54>)
    dc12:	490f      	ldr	r1, [pc, #60]	; (dc50 <ticker_stop_op_cb+0x58>)
    dc14:	480f      	ldr	r0, [pc, #60]	; (dc54 <ticker_stop_op_cb+0x5c>)
    dc16:	f640 2325 	movw	r3, #2597	; 0xa25
    dc1a:	f00b fcba 	bl	19592 <assert_print>
    dc1e:	4040      	eors	r0, r0
    dc20:	f380 8811 	msr	BASEPRI, r0
    dc24:	f04f 0003 	mov.w	r0, #3
    dc28:	df02      	svc	2
}
    dc2a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dc2c:	4a07      	ldr	r2, [pc, #28]	; (dc4c <ticker_stop_op_cb+0x54>)
    dc2e:	490a      	ldr	r1, [pc, #40]	; (dc58 <ticker_stop_op_cb+0x60>)
    dc30:	4808      	ldr	r0, [pc, #32]	; (dc54 <ticker_stop_op_cb+0x5c>)
    dc32:	f640 231f 	movw	r3, #2591	; 0xa1f
    dc36:	f00b fcac 	bl	19592 <assert_print>
    dc3a:	4040      	eors	r0, r0
    dc3c:	f380 8811 	msr	BASEPRI, r0
    dc40:	f04f 0003 	mov.w	r0, #3
    dc44:	df02      	svc	2
    dc46:	e7da      	b.n	dbfe <ticker_stop_op_cb+0x6>
    dc48:	200006c4 	.word	0x200006c4
    dc4c:	00020140 	.word	0x00020140
    dc50:	0001fed4 	.word	0x0001fed4
    dc54:	0001fbf4 	.word	0x0001fbf4
    dc58:	000201a0 	.word	0x000201a0

0000dc5c <disabled_cb>:
{
    dc5c:	b508      	push	{r3, lr}
	mfy.param = param;
    dc5e:	4b0b      	ldr	r3, [pc, #44]	; (dc8c <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dc60:	2200      	movs	r2, #0
	mfy.param = param;
    dc62:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dc64:	4611      	mov	r1, r2
    dc66:	2001      	movs	r0, #1
    dc68:	f7fb f8cc 	bl	8e04 <mayfly_enqueue>
	LL_ASSERT(!ret);
    dc6c:	b900      	cbnz	r0, dc70 <disabled_cb+0x14>
}
    dc6e:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    dc70:	4a07      	ldr	r2, [pc, #28]	; (dc90 <disabled_cb+0x34>)
    dc72:	4908      	ldr	r1, [pc, #32]	; (dc94 <disabled_cb+0x38>)
    dc74:	4808      	ldr	r0, [pc, #32]	; (dc98 <disabled_cb+0x3c>)
    dc76:	f640 2351 	movw	r3, #2641	; 0xa51
    dc7a:	f00b fc8a 	bl	19592 <assert_print>
    dc7e:	4040      	eors	r0, r0
    dc80:	f380 8811 	msr	BASEPRI, r0
    dc84:	f04f 0003 	mov.w	r0, #3
    dc88:	df02      	svc	2
}
    dc8a:	bd08      	pop	{r3, pc}
    dc8c:	200006a4 	.word	0x200006a4
    dc90:	00020140 	.word	0x00020140
    dc94:	0001fed4 	.word	0x0001fed4
    dc98:	0001fbf4 	.word	0x0001fbf4

0000dc9c <conn_disable>:
{
    dc9c:	b538      	push	{r3, r4, r5, lr}
    dc9e:	4604      	mov	r4, r0
	return hdr->ref;
    dca0:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    dca4:	b353      	cbz	r3, dcfc <conn_disable+0x60>
		mfy.param = &conn->lll;
    dca6:	4d17      	ldr	r5, [pc, #92]	; (dd04 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    dca8:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    dcaa:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    dcac:	b16b      	cbz	r3, dcca <conn_disable+0x2e>
    dcae:	4a16      	ldr	r2, [pc, #88]	; (dd08 <conn_disable+0x6c>)
    dcb0:	4916      	ldr	r1, [pc, #88]	; (dd0c <conn_disable+0x70>)
    dcb2:	4817      	ldr	r0, [pc, #92]	; (dd10 <conn_disable+0x74>)
    dcb4:	f640 233a 	movw	r3, #2618	; 0xa3a
    dcb8:	f00b fc6b 	bl	19592 <assert_print>
    dcbc:	4040      	eors	r0, r0
    dcbe:	f380 8811 	msr	BASEPRI, r0
    dcc2:	f04f 0003 	mov.w	r0, #3
    dcc6:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    dcc8:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    dcca:	4912      	ldr	r1, [pc, #72]	; (dd14 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dccc:	4b0d      	ldr	r3, [pc, #52]	; (dd04 <conn_disable+0x68>)
    dcce:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    dcd0:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    dcd4:	4611      	mov	r1, r2
    dcd6:	2001      	movs	r0, #1
    dcd8:	f7fb f894 	bl	8e04 <mayfly_enqueue>
		LL_ASSERT(!ret);
    dcdc:	b900      	cbnz	r0, dce0 <conn_disable+0x44>
}
    dcde:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    dce0:	4a09      	ldr	r2, [pc, #36]	; (dd08 <conn_disable+0x6c>)
    dce2:	490d      	ldr	r1, [pc, #52]	; (dd18 <conn_disable+0x7c>)
    dce4:	480a      	ldr	r0, [pc, #40]	; (dd10 <conn_disable+0x74>)
    dce6:	f640 2341 	movw	r3, #2625	; 0xa41
    dcea:	f00b fc52 	bl	19592 <assert_print>
    dcee:	4040      	eors	r0, r0
    dcf0:	f380 8811 	msr	BASEPRI, r0
    dcf4:	f04f 0003 	mov.w	r0, #3
    dcf8:	df02      	svc	2
}
    dcfa:	bd38      	pop	{r3, r4, r5, pc}
    dcfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    dd00:	f7ff bfac 	b.w	dc5c <disabled_cb>
    dd04:	200006b4 	.word	0x200006b4
    dd08:	00020140 	.word	0x00020140
    dd0c:	0001fff0 	.word	0x0001fff0
    dd10:	0001fbf4 	.word	0x0001fbf4
    dd14:	0000dc5d 	.word	0x0000dc5d
    dd18:	0001fed4 	.word	0x0001fed4

0000dd1c <conn_setup_adv_scan_disabled_cb>:
{
    dd1c:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    dd1e:	6883      	ldr	r3, [r0, #8]
    dd20:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    dd22:	7f53      	ldrb	r3, [r2, #29]
    dd24:	09db      	lsrs	r3, r3, #7
    dd26:	d10d      	bne.n	dd44 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
    dd28:	4a09      	ldr	r2, [pc, #36]	; (dd50 <conn_setup_adv_scan_disabled_cb+0x34>)
    dd2a:	490a      	ldr	r1, [pc, #40]	; (dd54 <conn_setup_adv_scan_disabled_cb+0x38>)
    dd2c:	480a      	ldr	r0, [pc, #40]	; (dd58 <conn_setup_adv_scan_disabled_cb+0x3c>)
    dd2e:	f640 137a 	movw	r3, #2426	; 0x97a
    dd32:	f00b fc2e 	bl	19592 <assert_print>
    dd36:	4040      	eors	r0, r0
    dd38:	f380 8811 	msr	BASEPRI, r0
    dd3c:	f04f 0003 	mov.w	r0, #3
    dd40:	df02      	svc	2
}
    dd42:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
    dd44:	4601      	mov	r1, r0
}
    dd46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
    dd4a:	3108      	adds	r1, #8
    dd4c:	f7f3 bb90 	b.w	1470 <ull_periph_setup>
    dd50:	00020140 	.word	0x00020140
    dd54:	0001fc54 	.word	0x0001fc54
    dd58:	0001fbf4 	.word	0x0001fbf4

0000dd5c <ticker_start_conn_op_cb>:
{
    dd5c:	b510      	push	{r4, lr}
    dd5e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dd60:	b990      	cbnz	r0, dd88 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    dd62:	4620      	mov	r0, r4
    dd64:	f7fe fc28 	bl	c5b8 <ull_update_unmark>
	LL_ASSERT(p == param);
    dd68:	4284      	cmp	r4, r0
    dd6a:	d00c      	beq.n	dd86 <ticker_start_conn_op_cb+0x2a>
    dd6c:	4a0d      	ldr	r2, [pc, #52]	; (dda4 <ticker_start_conn_op_cb+0x48>)
    dd6e:	490e      	ldr	r1, [pc, #56]	; (dda8 <ticker_start_conn_op_cb+0x4c>)
    dd70:	480e      	ldr	r0, [pc, #56]	; (ddac <ticker_start_conn_op_cb+0x50>)
    dd72:	f640 1353 	movw	r3, #2387	; 0x953
    dd76:	f00b fc0c 	bl	19592 <assert_print>
    dd7a:	4040      	eors	r0, r0
    dd7c:	f380 8811 	msr	BASEPRI, r0
    dd80:	f04f 0003 	mov.w	r0, #3
    dd84:	df02      	svc	2
}
    dd86:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dd88:	4a06      	ldr	r2, [pc, #24]	; (dda4 <ticker_start_conn_op_cb+0x48>)
    dd8a:	4909      	ldr	r1, [pc, #36]	; (ddb0 <ticker_start_conn_op_cb+0x54>)
    dd8c:	4807      	ldr	r0, [pc, #28]	; (ddac <ticker_start_conn_op_cb+0x50>)
    dd8e:	f44f 6315 	mov.w	r3, #2384	; 0x950
    dd92:	f00b fbfe 	bl	19592 <assert_print>
    dd96:	4040      	eors	r0, r0
    dd98:	f380 8811 	msr	BASEPRI, r0
    dd9c:	f04f 0003 	mov.w	r0, #3
    dda0:	df02      	svc	2
    dda2:	e7de      	b.n	dd62 <ticker_start_conn_op_cb+0x6>
    dda4:	00020140 	.word	0x00020140
    dda8:	000201ac 	.word	0x000201ac
    ddac:	0001fbf4 	.word	0x0001fbf4
    ddb0:	000201a0 	.word	0x000201a0

0000ddb4 <ticker_stop_conn_op_cb>:
{
    ddb4:	b510      	push	{r4, lr}
    ddb6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ddb8:	b990      	cbnz	r0, dde0 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    ddba:	4620      	mov	r0, r4
    ddbc:	f7fe fbf2 	bl	c5a4 <ull_update_mark>
	LL_ASSERT(p == param);
    ddc0:	4284      	cmp	r4, r0
    ddc2:	d00c      	beq.n	ddde <ticker_stop_conn_op_cb+0x2a>
    ddc4:	4a0d      	ldr	r2, [pc, #52]	; (ddfc <ticker_stop_conn_op_cb+0x48>)
    ddc6:	490e      	ldr	r1, [pc, #56]	; (de00 <ticker_stop_conn_op_cb+0x4c>)
    ddc8:	480e      	ldr	r0, [pc, #56]	; (de04 <ticker_stop_conn_op_cb+0x50>)
    ddca:	f640 1349 	movw	r3, #2377	; 0x949
    ddce:	f00b fbe0 	bl	19592 <assert_print>
    ddd2:	4040      	eors	r0, r0
    ddd4:	f380 8811 	msr	BASEPRI, r0
    ddd8:	f04f 0003 	mov.w	r0, #3
    dddc:	df02      	svc	2
}
    ddde:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    dde0:	4a06      	ldr	r2, [pc, #24]	; (ddfc <ticker_stop_conn_op_cb+0x48>)
    dde2:	4909      	ldr	r1, [pc, #36]	; (de08 <ticker_stop_conn_op_cb+0x54>)
    dde4:	4807      	ldr	r0, [pc, #28]	; (de04 <ticker_stop_conn_op_cb+0x50>)
    dde6:	f640 1346 	movw	r3, #2374	; 0x946
    ddea:	f00b fbd2 	bl	19592 <assert_print>
    ddee:	4040      	eors	r0, r0
    ddf0:	f380 8811 	msr	BASEPRI, r0
    ddf4:	f04f 0003 	mov.w	r0, #3
    ddf8:	df02      	svc	2
    ddfa:	e7de      	b.n	ddba <ticker_stop_conn_op_cb+0x6>
    ddfc:	00020140 	.word	0x00020140
    de00:	000201ac 	.word	0x000201ac
    de04:	0001fbf4 	.word	0x0001fbf4
    de08:	000201a0 	.word	0x000201a0

0000de0c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    de0c:	b900      	cbnz	r0, de10 <ticker_update_conn_op_cb+0x4>
    de0e:	4770      	bx	lr
{
    de10:	b510      	push	{r4, lr}
    de12:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    de14:	f7fe fbdc 	bl	c5d0 <ull_update_mark_get>
    de18:	4284      	cmp	r4, r0
    de1a:	d010      	beq.n	de3e <ticker_update_conn_op_cb+0x32>
    de1c:	f7fe fbbc 	bl	c598 <ull_disable_mark_get>
    de20:	4284      	cmp	r4, r0
    de22:	d00c      	beq.n	de3e <ticker_update_conn_op_cb+0x32>
    de24:	4a06      	ldr	r2, [pc, #24]	; (de40 <ticker_update_conn_op_cb+0x34>)
    de26:	4907      	ldr	r1, [pc, #28]	; (de44 <ticker_update_conn_op_cb+0x38>)
    de28:	4807      	ldr	r0, [pc, #28]	; (de48 <ticker_update_conn_op_cb+0x3c>)
    de2a:	f640 133d 	movw	r3, #2365	; 0x93d
    de2e:	f00b fbb0 	bl	19592 <assert_print>
    de32:	4040      	eors	r0, r0
    de34:	f380 8811 	msr	BASEPRI, r0
    de38:	f04f 0003 	mov.w	r0, #3
    de3c:	df02      	svc	2
}
    de3e:	bd10      	pop	{r4, pc}
    de40:	00020140 	.word	0x00020140
    de44:	000201b8 	.word	0x000201b8
    de48:	0001fbf4 	.word	0x0001fbf4

0000de4c <tx_ull_dequeue>:
{
    de4c:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    de4e:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
    de52:	4603      	mov	r3, r0
    de54:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    de56:	b164      	cbz	r4, de72 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    de58:	4294      	cmp	r4, r2
    de5a:	d021      	beq.n	dea0 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    de5c:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
    de60:	428a      	cmp	r2, r1
    de62:	d00b      	beq.n	de7c <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
    de64:	6811      	ldr	r1, [r2, #0]
    de66:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
    de6a:	2200      	movs	r2, #0
}
    de6c:	bc10      	pop	{r4}
		tx->next = NULL;
    de6e:	6002      	str	r2, [r0, #0]
}
    de70:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    de72:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
    de76:	4291      	cmp	r1, r2
    de78:	d104      	bne.n	de84 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
    de7a:	b18a      	cbz	r2, dea0 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
    de7c:	6809      	ldr	r1, [r1, #0]
    de7e:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    de82:	e7ef      	b.n	de64 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    de84:	7911      	ldrb	r1, [r2, #4]
    de86:	f001 0103 	and.w	r1, r1, #3
    de8a:	2903      	cmp	r1, #3
    de8c:	d013      	beq.n	deb6 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
    de8e:	6812      	ldr	r2, [r2, #0]
    de90:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
    de94:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    de96:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
    de9a:	bc10      	pop	{r4}
		tx->next = tx;
    de9c:	6000      	str	r0, [r0, #0]
}
    de9e:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    dea0:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
    dea4:	6812      	ldr	r2, [r2, #0]
    dea6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    deaa:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    deac:	bf18      	it	ne
    deae:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    deb2:	d1f2      	bne.n	de9a <tx_ull_dequeue+0x4e>
    deb4:	e7ee      	b.n	de94 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
    deb6:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    deb8:	2903      	cmp	r1, #3
    deba:	d0d3      	beq.n	de64 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    debc:	290a      	cmp	r1, #10
    debe:	d1e6      	bne.n	de8e <tx_ull_dequeue+0x42>
    dec0:	e7d0      	b.n	de64 <tx_ull_dequeue+0x18>
    dec2:	bf00      	nop

0000dec4 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dec6:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    dec8:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    decc:	0787      	lsls	r7, r0, #30
{
    dece:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    ded0:	d433      	bmi.n	df3a <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ded2:	482e      	ldr	r0, [pc, #184]	; (df8c <reject_ext_ind_send+0xc8>)
    ded4:	4617      	mov	r7, r2
    ded6:	461e      	mov	r6, r3
    ded8:	f7fa febc 	bl	8c54 <mem_acquire>
	if (!tx) {
    dedc:	2800      	cmp	r0, #0
    dede:	d038      	beq.n	df52 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
    dee0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    dee4:	f043 0302 	orr.w	r3, r3, #2
    dee8:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    deec:	2303      	movs	r3, #3
    deee:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    def0:	2211      	movs	r2, #17
	    conn->tx_head &&
    def2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    def6:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    def8:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
    defa:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    defe:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df00:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    df04:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df06:	7102      	strb	r2, [r0, #4]
	if (
    df08:	b1db      	cbz	r3, df42 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
    df0a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    df0e:	0796      	lsls	r6, r2, #30
    df10:	d417      	bmi.n	df42 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
    df12:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    df16:	07d2      	lsls	r2, r2, #31
    df18:	d413      	bmi.n	df42 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
    df1a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    df1e:	4293      	cmp	r3, r2
    df20:	d022      	beq.n	df68 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
    df22:	b1c9      	cbz	r1, df58 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
    df24:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    df28:	681a      	ldr	r2, [r3, #0]
    df2a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    df2c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    df2e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    df30:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    df34:	b90b      	cbnz	r3, df3a <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
    df36:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    df3a:	2301      	movs	r3, #1
    df3c:	712b      	strb	r3, [r5, #4]
		*err = 0U;
    df3e:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
    df40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
    df42:	2900      	cmp	r1, #0
    df44:	d1ee      	bne.n	df24 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
    df46:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    df48:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    df4c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    df50:	e7f0      	b.n	df34 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
    df52:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    df56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    df58:	791a      	ldrb	r2, [r3, #4]
    df5a:	f002 0203 	and.w	r2, r2, #3
    df5e:	2a03      	cmp	r2, #3
    df60:	d00e      	beq.n	df80 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    df62:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    df66:	e7df      	b.n	df28 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
    df68:	681a      	ldr	r2, [r3, #0]
    df6a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    df6e:	2900      	cmp	r1, #0
    df70:	d1d8      	bne.n	df24 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
    df72:	681a      	ldr	r2, [r3, #0]
    df74:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    df76:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    df78:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    df7a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    df7e:	e7d9      	b.n	df34 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
    df80:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    df82:	2a03      	cmp	r2, #3
    df84:	d0f5      	beq.n	df72 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    df86:	2a0a      	cmp	r2, #10
    df88:	d1eb      	bne.n	df62 <reject_ext_ind_send+0x9e>
    df8a:	e7f2      	b.n	df72 <reject_ext_ind_send+0xae>
    df8c:	20002294 	.word	0x20002294

0000df90 <event_len_prep>:
{
    df90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
    df92:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    df96:	f003 0207 	and.w	r2, r3, #7
{
    df9a:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
    df9c:	2a06      	cmp	r2, #6
    df9e:	f200 80d4 	bhi.w	e14a <event_len_prep+0x1ba>
    dfa2:	e8df f002 	tbb	[pc, r2]
    dfa6:	4704      	.short	0x4704
    dfa8:	48484747 	.word	0x48484747
    dfac:	47          	.byte	0x47
    dfad:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dfae:	486e      	ldr	r0, [pc, #440]	; (e168 <event_len_prep+0x1d8>)
    dfb0:	f7fa fe50 	bl	8c54 <mem_acquire>
		if (!tx) {
    dfb4:	2800      	cmp	r0, #0
    dfb6:	d03d      	beq.n	e034 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    dfb8:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    dfbc:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
    dfc0:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    dfc4:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    dfc8:	2301      	movs	r3, #1
    dfca:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
    dfce:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    dfd2:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    dfd6:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    dfd8:	72c3      	strb	r3, [r0, #11]
    dfda:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    dfdc:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
    dfde:	2309      	movs	r3, #9
    dfe0:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    dfe2:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    dfe4:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    dfe6:	2214      	movs	r2, #20
	    conn->tx_head &&
    dfe8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    dfec:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    dfee:	2100      	movs	r1, #0
    dff0:	221b      	movs	r2, #27
    dff2:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
    dff4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    dff8:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dffa:	7902      	ldrb	r2, [r0, #4]
    dffc:	f042 0203 	orr.w	r2, r2, #3
    e000:	7102      	strb	r2, [r0, #4]
	if (
    e002:	b13b      	cbz	r3, e014 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
    e004:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e008:	0795      	lsls	r5, r2, #30
    e00a:	d403      	bmi.n	e014 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
    e00c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e010:	07d2      	lsls	r2, r2, #31
    e012:	d573      	bpl.n	e0fc <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
    e014:	2900      	cmp	r1, #0
    e016:	d07f      	beq.n	e118 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
    e018:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e01c:	681a      	ldr	r2, [r3, #0]
    e01e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e020:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    e022:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    e024:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e028:	2b00      	cmp	r3, #0
    e02a:	d056      	beq.n	e0da <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
    e02c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    e030:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
    e034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    e036:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    e03a:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
    e03e:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
    e042:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
    e046:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    e04a:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    e04e:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    e050:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    e054:	d024      	beq.n	e0a0 <event_len_prep+0x110>
			conn->llcp_length.state =
    e056:	2206      	movs	r2, #6
    e058:	f362 0302 	bfi	r3, r2, #0, #3
    e05c:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
    e060:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    e064:	b335      	cbz	r5, e0b4 <event_len_prep+0x124>
    e066:	6828      	ldr	r0, [r5, #0]
    e068:	b320      	cbz	r0, e0b4 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e06a:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    e06c:	6842      	ldr	r2, [r0, #4]
    e06e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e072:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
    e076:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e078:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
    e07a:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
    e07c:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
    e07e:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e080:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e082:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    e084:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    e086:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    e08a:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    e08c:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    e08e:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e090:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e092:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    e094:	f7fe f9c8 	bl	c428 <ll_rx_put>
}
    e098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
    e09c:	f7fe b9ce 	b.w	c43c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
    e0a0:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
    e0a4:	b9e2      	cbnz	r2, e0e0 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
    e0a6:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
    e0aa:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
    e0ae:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
    e0b2:	e7d5      	b.n	e060 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
    e0b4:	4a2d      	ldr	r2, [pc, #180]	; (e16c <event_len_prep+0x1dc>)
    e0b6:	492e      	ldr	r1, [pc, #184]	; (e170 <event_len_prep+0x1e0>)
    e0b8:	482e      	ldr	r0, [pc, #184]	; (e174 <event_len_prep+0x1e4>)
    e0ba:	f241 134b 	movw	r3, #4427	; 0x114b
    e0be:	f00b fa68 	bl	19592 <assert_print>
    e0c2:	4040      	eors	r0, r0
    e0c4:	f380 8811 	msr	BASEPRI, r0
    e0c8:	f04f 0003 	mov.w	r0, #3
    e0cc:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    e0ce:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    e0d0:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    e0d4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e0d8:	e7c7      	b.n	e06a <event_len_prep+0xda>
		conn->tx_data_last = tx;
    e0da:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    e0de:	e7a5      	b.n	e02c <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
    e0e0:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
    e0e4:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e0e6:	f362 0302 	bfi	r3, r2, #0, #3
    e0ea:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
    e0ee:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
    e0f2:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
    e0f6:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e0fa:	e7b1      	b.n	e060 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
    e0fc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    e100:	4293      	cmp	r3, r2
    e102:	d00f      	beq.n	e124 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
    e104:	2900      	cmp	r1, #0
    e106:	d187      	bne.n	e018 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e108:	791a      	ldrb	r2, [r3, #4]
    e10a:	f002 0203 	and.w	r2, r2, #3
    e10e:	2a03      	cmp	r2, #3
    e110:	d015      	beq.n	e13e <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e112:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    e116:	e781      	b.n	e01c <event_len_prep+0x8c>
			tx->next = conn->tx_head;
    e118:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    e11a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e11e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    e122:	e781      	b.n	e028 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
    e124:	681a      	ldr	r2, [r3, #0]
    e126:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e12a:	2900      	cmp	r1, #0
    e12c:	f47f af74 	bne.w	e018 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
    e130:	681a      	ldr	r2, [r3, #0]
    e132:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    e134:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    e136:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    e138:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    e13c:	e774      	b.n	e028 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
    e13e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e140:	2a03      	cmp	r2, #3
    e142:	d0f5      	beq.n	e130 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e144:	2a0a      	cmp	r2, #10
    e146:	d1e4      	bne.n	e112 <event_len_prep+0x182>
    e148:	e7f2      	b.n	e130 <event_len_prep+0x1a0>
		LL_ASSERT(0);
    e14a:	4a08      	ldr	r2, [pc, #32]	; (e16c <event_len_prep+0x1dc>)
    e14c:	490a      	ldr	r1, [pc, #40]	; (e178 <event_len_prep+0x1e8>)
    e14e:	4809      	ldr	r0, [pc, #36]	; (e174 <event_len_prep+0x1e4>)
    e150:	f241 1375 	movw	r3, #4469	; 0x1175
    e154:	f00b fa1d 	bl	19592 <assert_print>
    e158:	4040      	eors	r0, r0
    e15a:	f380 8811 	msr	BASEPRI, r0
    e15e:	f04f 0003 	mov.w	r0, #3
    e162:	df02      	svc	2
}
    e164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e166:	bf00      	nop
    e168:	20002294 	.word	0x20002294
    e16c:	00020140 	.word	0x00020140
    e170:	0002020c 	.word	0x0002020c
    e174:	0001fbf4 	.word	0x0001fbf4
    e178:	0001fc54 	.word	0x0001fc54

0000e17c <event_phy_upd_ind_prep>:
{
    e17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
    e180:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
    e184:	f013 0601 	ands.w	r6, r3, #1
{
    e188:	4604      	mov	r4, r0
    e18a:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
    e18c:	f040 8096 	bne.w	e2bc <event_phy_upd_ind_prep+0x140>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    e190:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
    e194:	1a69      	subs	r1, r5, r1
    e196:	0409      	lsls	r1, r1, #16
    e198:	f100 8097 	bmi.w	e2ca <event_phy_upd_ind_prep+0x14e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e19c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
    e1a0:	2900      	cmp	r1, #0
    e1a2:	f2c0 8117 	blt.w	e3d4 <event_phy_upd_ind_prep+0x258>
		rx = conn->llcp_rx;
    e1a6:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
    e1aa:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
    e1ac:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    e1b0:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
    e1b4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
    e1b8:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
    e1bc:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
    e1c0:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
    e1c4:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
    e1c8:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
    e1cc:	d17f      	bne.n	e2ce <event_phy_upd_ind_prep+0x152>
		uint16_t eff_tx_time = lll->max_tx_time;
    e1ce:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
    e1d2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    e1d6:	d00c      	beq.n	e1f2 <event_phy_upd_ind_prep+0x76>
			if (conn->llcp.phy_upd_ind.rx & phy_bitmask) {
    e1d8:	f013 0f60 	tst.w	r3, #96	; 0x60
    e1dc:	f3c3 1141 	ubfx	r1, r3, #5, #2
				lll->phy_rx = conn->llcp.phy_upd_ind.rx &
    e1e0:	bf1e      	ittt	ne
    e1e2:	f894 3061 	ldrbne.w	r3, [r4, #97]	; 0x61
    e1e6:	f361 0302 	bfine	r3, r1, #0, #3
    e1ea:	f884 3061 	strbne.w	r3, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    e1ee:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
    e1f2:	2d00      	cmp	r5, #0
    e1f4:	f000 80ce 	beq.w	e394 <event_phy_upd_ind_prep+0x218>
    e1f8:	6828      	ldr	r0, [r5, #0]
    e1fa:	2800      	cmp	r0, #0
    e1fc:	f000 80ca 	beq.w	e394 <event_phy_upd_ind_prep+0x218>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    e200:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
    e204:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
    e208:	f8d0 c004 	ldr.w	ip, [r0, #4]
    e20c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    e210:	0792      	lsls	r2, r2, #30
    e212:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    e216:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    e21a:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    e21e:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    e222:	d402      	bmi.n	e22a <event_phy_upd_ind_prep+0xae>
    e224:	4599      	cmp	r9, r3
    e226:	f000 80f1 	beq.w	e40c <event_phy_upd_ind_prep+0x290>
		rx->hdr.handle = lll->handle;
    e22a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e22c:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e22e:	231d      	movs	r3, #29
    e230:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
    e232:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    e234:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    e238:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    e23c:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
    e23e:	4629      	mov	r1, r5
    e240:	f7fe f8f2 	bl	c428 <ll_rx_put>
		rx = conn->llcp_rx;
    e244:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    e248:	2d00      	cmp	r5, #0
    e24a:	f000 80b4 	beq.w	e3b6 <event_phy_upd_ind_prep+0x23a>
    e24e:	6828      	ldr	r0, [r5, #0]
    e250:	2800      	cmp	r0, #0
    e252:	f000 80b0 	beq.w	e3b6 <event_phy_upd_ind_prep+0x23a>
		if ((eff_tx_time <= lll->max_tx_time) &&
    e256:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
    e25a:	6842      	ldr	r2, [r0, #4]
    e25c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
    e260:	42b3      	cmp	r3, r6
    e262:	d30a      	bcc.n	e27a <event_phy_upd_ind_prep+0xfe>
    e264:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    e268:	d807      	bhi.n	e27a <event_phy_upd_ind_prep+0xfe>
		    (eff_rx_time <= lll->max_rx_time) &&
    e26a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
    e26e:	42bb      	cmp	r3, r7
    e270:	d303      	bcc.n	e27a <event_phy_upd_ind_prep+0xfe>
		    (eff_rx_time <= lll->max_rx_time) &&
    e272:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    e276:	f240 8102 	bls.w	e47e <event_phy_upd_ind_prep+0x302>
		lll->max_tx_time = eff_tx_time;
    e27a:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
    e27e:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    e282:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    e284:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e286:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    e288:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e28c:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e290:	2109      	movs	r1, #9
    e292:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e294:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    e298:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    e29a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    e29e:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    e2a0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    e2a4:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e2a6:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    e2a8:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    e2aa:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    e2ac:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e2ae:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    e2b0:	f7fe f8ba 	bl	c428 <ll_rx_put>
}
    e2b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    e2b8:	f7fe b8c0 	b.w	c43c <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    e2bc:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
    e2c0:	2200      	movs	r2, #0
    e2c2:	f7fa fd35 	bl	8d30 <memq_peek>
    e2c6:	4606      	mov	r6, r0
    e2c8:	b168      	cbz	r0, e2e6 <event_phy_upd_ind_prep+0x16a>
}
    e2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (conn->llcp.phy_upd_ind.tx & phy_bitmask) {
    e2ce:	f013 0f0c 	tst.w	r3, #12
				lll->phy_tx = conn->llcp.phy_upd_ind.tx &
    e2d2:	f3c3 0081 	ubfx	r0, r3, #2, #2
    e2d6:	bf1c      	itt	ne
    e2d8:	f360 0102 	bfine	r1, r0, #0, #3
    e2dc:	f884 1060 	strbne.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    e2e0:	f44f 76a4 	mov.w	r6, #328	; 0x148
    e2e4:	e775      	b.n	e1d2 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
    e2e6:	2002      	movs	r0, #2
    e2e8:	f7fe f8ae 	bl	c448 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    e2ec:	4680      	mov	r8, r0
    e2ee:	2800      	cmp	r0, #0
    e2f0:	d0eb      	beq.n	e2ca <event_phy_upd_ind_prep+0x14e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e2f2:	4893      	ldr	r0, [pc, #588]	; (e540 <event_phy_upd_ind_prep+0x3c4>)
    e2f4:	f7fa fcae 	bl	8c54 <mem_acquire>
		if (!tx) {
    e2f8:	4607      	mov	r7, r0
    e2fa:	2800      	cmp	r0, #0
    e2fc:	d0e5      	beq.n	e2ca <event_phy_upd_ind_prep+0x14e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    e2fe:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e302:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    e306:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    e30a:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    e30e:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    e312:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
    e316:	b2db      	uxtb	r3, r3
    e318:	f040 8093 	bne.w	e442 <event_phy_upd_ind_prep+0x2c6>
			conn->llcp_ack = conn->llcp_req;
    e31c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
    e320:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
    e324:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    e326:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
    e32a:	f100 80ba 	bmi.w	e4a2 <event_phy_upd_ind_prep+0x326>
    e32e:	4633      	mov	r3, r6
    e330:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    e332:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    e334:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    e336:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    e338:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    e33a:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    e33c:	2218      	movs	r2, #24
	    conn->tx_head &&
    e33e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
    e342:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
    e346:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e348:	793a      	ldrb	r2, [r7, #4]
    e34a:	f042 0203 	orr.w	r2, r2, #3
    e34e:	713a      	strb	r2, [r7, #4]
	if (
    e350:	2b00      	cmp	r3, #0
    e352:	f000 809d 	beq.w	e490 <event_phy_upd_ind_prep+0x314>
	    !conn->llcp_enc.pause_tx &&
    e356:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e35a:	0795      	lsls	r5, r2, #30
    e35c:	f100 8098 	bmi.w	e490 <event_phy_upd_ind_prep+0x314>
	    !conn->llcp_phy.pause_tx &&
    e360:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e364:	07d0      	lsls	r0, r2, #31
    e366:	f100 8093 	bmi.w	e490 <event_phy_upd_ind_prep+0x314>
		if (conn->tx_head == conn->tx_data) {
    e36a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    e36e:	4293      	cmp	r3, r2
    e370:	f000 80cb 	beq.w	e50a <event_phy_upd_ind_prep+0x38e>
		} else if (!conn->tx_ctrl) {
    e374:	2900      	cmp	r1, #0
    e376:	f000 80d5 	beq.w	e524 <event_phy_upd_ind_prep+0x3a8>
	tx->next = conn->tx_ctrl_last->next;
    e37a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e37e:	681a      	ldr	r2, [r3, #0]
    e380:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    e382:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    e384:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
    e386:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e38a:	2b00      	cmp	r3, #0
    e38c:	d19d      	bne.n	e2ca <event_phy_upd_ind_prep+0x14e>
		conn->tx_data_last = tx;
    e38e:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
    e392:	e79a      	b.n	e2ca <event_phy_upd_ind_prep+0x14e>
		LL_ASSERT(rx && rx->hdr.link);
    e394:	4a6b      	ldr	r2, [pc, #428]	; (e544 <event_phy_upd_ind_prep+0x3c8>)
    e396:	496c      	ldr	r1, [pc, #432]	; (e548 <event_phy_upd_ind_prep+0x3cc>)
    e398:	486c      	ldr	r0, [pc, #432]	; (e54c <event_phy_upd_ind_prep+0x3d0>)
    e39a:	f241 23b5 	movw	r3, #4789	; 0x12b5
    e39e:	f00b f8f8 	bl	19592 <assert_print>
    e3a2:	4040      	eors	r0, r0
    e3a4:	f380 8811 	msr	BASEPRI, r0
    e3a8:	f04f 0003 	mov.w	r0, #3
    e3ac:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    e3ae:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    e3b0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    e3b4:	e724      	b.n	e200 <event_phy_upd_ind_prep+0x84>
		LL_ASSERT(rx && rx->hdr.link);
    e3b6:	4a63      	ldr	r2, [pc, #396]	; (e544 <event_phy_upd_ind_prep+0x3c8>)
    e3b8:	4963      	ldr	r1, [pc, #396]	; (e548 <event_phy_upd_ind_prep+0x3cc>)
    e3ba:	4864      	ldr	r0, [pc, #400]	; (e54c <event_phy_upd_ind_prep+0x3d0>)
    e3bc:	f241 23e9 	movw	r3, #4841	; 0x12e9
    e3c0:	f00b f8e7 	bl	19592 <assert_print>
    e3c4:	4040      	eors	r0, r0
    e3c6:	f380 8811 	msr	BASEPRI, r0
    e3ca:	f04f 0003 	mov.w	r0, #3
    e3ce:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    e3d0:	6828      	ldr	r0, [r5, #0]
    e3d2:	e740      	b.n	e256 <event_phy_upd_ind_prep+0xda>
			rx = ll_pdu_rx_alloc();
    e3d4:	f7fe f858 	bl	c488 <ll_pdu_rx_alloc>
			if (!rx) {
    e3d8:	4605      	mov	r5, r0
    e3da:	2800      	cmp	r0, #0
    e3dc:	f43f af75 	beq.w	e2ca <event_phy_upd_ind_prep+0x14e>
			rx->hdr.link->mem = conn->llcp_rx;
    e3e0:	6803      	ldr	r3, [r0, #0]
    e3e2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    e3e6:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e3e8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
    e3ec:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e3f0:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
    e3f2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    e3f6:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e3f8:	f6bf aed8 	bge.w	e1ac <event_phy_upd_ind_prep+0x30>
    e3fc:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    e400:	2900      	cmp	r1, #0
    e402:	f43f aed3 	beq.w	e1ac <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
    e406:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
    e40a:	e6d3      	b.n	e1b4 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    e40c:	4588      	cmp	r8, r1
    e40e:	f47f af0c 	bne.w	e22a <event_phy_upd_ind_prep+0xae>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e412:	2301      	movs	r3, #1
    e414:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    e416:	4629      	mov	r1, r5
    e418:	f7fe f806 	bl	c428 <ll_rx_put>
				rx = conn->llcp_rx;
    e41c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
    e420:	2d00      	cmp	r5, #0
    e422:	d063      	beq.n	e4ec <event_phy_upd_ind_prep+0x370>
    e424:	6828      	ldr	r0, [r5, #0]
    e426:	2800      	cmp	r0, #0
    e428:	d060      	beq.n	e4ec <event_phy_upd_ind_prep+0x370>
				conn->llcp_rx = rx->hdr.link->mem;
    e42a:	6842      	ldr	r2, [r0, #4]
    e42c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e430:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
    e432:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e434:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    e436:	f7fd fff7 	bl	c428 <ll_rx_put>
}
    e43a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    e43e:	f7fd bffd 	b.w	c43c <ll_rx_sched>
							 lll->latency +
    e442:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    e444:	1da9      	adds	r1, r5, #6
    e446:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
    e448:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
    e44c:	f7fe f81c 	bl	c488 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    e450:	f8d8 3000 	ldr.w	r3, [r8]
    e454:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    e458:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    e45a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
    e45e:	f7fe f813 	bl	c488 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    e462:	6803      	ldr	r3, [r0, #0]
    e464:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    e468:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    e46a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    e46e:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
    e472:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    e476:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    e47a:	095b      	lsrs	r3, r3, #5
    e47c:	e759      	b.n	e332 <event_phy_upd_ind_prep+0x1b6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e47e:	2301      	movs	r3, #1
    e480:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    e482:	4629      	mov	r1, r5
    e484:	f7fd ffd0 	bl	c428 <ll_rx_put>
}
    e488:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    e48c:	f7fd bfd6 	b.w	c43c <ll_rx_sched>
		if (!conn->tx_ctrl) {
    e490:	2900      	cmp	r1, #0
    e492:	f47f af72 	bne.w	e37a <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head;
    e496:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    e498:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e49c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
    e4a0:	e773      	b.n	e38a <event_phy_upd_ind_prep+0x20e>
				(void)ll_pdu_rx_alloc();
    e4a2:	f7fd fff1 	bl	c488 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    e4a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e4a8:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e4ac:	231d      	movs	r3, #29
				upd->status = 0U;
    e4ae:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e4b2:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    e4b6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
    e4ba:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    e4be:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4c2:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    e4c6:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    e4ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4ce:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    e4d2:	4641      	mov	r1, r8
    e4d4:	f7fd ffa8 	bl	c428 <ll_rx_put>
				ll_rx_sched();
    e4d8:	f7fd ffb0 	bl	c43c <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    e4dc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    e4e0:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    e4e4:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    e4e8:	095b      	lsrs	r3, r3, #5
    e4ea:	e722      	b.n	e332 <event_phy_upd_ind_prep+0x1b6>
				LL_ASSERT(rx && rx->hdr.link);
    e4ec:	4a15      	ldr	r2, [pc, #84]	; (e544 <event_phy_upd_ind_prep+0x3c8>)
    e4ee:	4916      	ldr	r1, [pc, #88]	; (e548 <event_phy_upd_ind_prep+0x3cc>)
    e4f0:	4816      	ldr	r0, [pc, #88]	; (e54c <event_phy_upd_ind_prep+0x3d0>)
    e4f2:	f241 23c7 	movw	r3, #4807	; 0x12c7
    e4f6:	f00b f84c 	bl	19592 <assert_print>
    e4fa:	4040      	eors	r0, r0
    e4fc:	f380 8811 	msr	BASEPRI, r0
    e500:	f04f 0003 	mov.w	r0, #3
    e504:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
    e506:	6828      	ldr	r0, [r5, #0]
    e508:	e78f      	b.n	e42a <event_phy_upd_ind_prep+0x2ae>
			conn->tx_data = conn->tx_data->next;
    e50a:	681a      	ldr	r2, [r3, #0]
    e50c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e510:	2900      	cmp	r1, #0
    e512:	f47f af32 	bne.w	e37a <event_phy_upd_ind_prep+0x1fe>
			tx->next = conn->tx_head->next;
    e516:	681a      	ldr	r2, [r3, #0]
    e518:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    e51a:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    e51c:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    e51e:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
    e522:	e732      	b.n	e38a <event_phy_upd_ind_prep+0x20e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e524:	791a      	ldrb	r2, [r3, #4]
    e526:	f002 0203 	and.w	r2, r2, #3
    e52a:	2a03      	cmp	r2, #3
    e52c:	d002      	beq.n	e534 <event_phy_upd_ind_prep+0x3b8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e52e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e532:	e722      	b.n	e37a <event_phy_upd_ind_prep+0x1fe>
	    ((pdu_data_tx->llctrl.opcode !=
    e534:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e536:	2a03      	cmp	r2, #3
    e538:	d0ed      	beq.n	e516 <event_phy_upd_ind_prep+0x39a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e53a:	2a0a      	cmp	r2, #10
    e53c:	d1f7      	bne.n	e52e <event_phy_upd_ind_prep+0x3b2>
    e53e:	e7ea      	b.n	e516 <event_phy_upd_ind_prep+0x39a>
    e540:	20002294 	.word	0x20002294
    e544:	00020140 	.word	0x00020140
    e548:	0002020c 	.word	0x0002020c
    e54c:	0001fbf4 	.word	0x0001fbf4

0000e550 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    e550:	4801      	ldr	r0, [pc, #4]	; (e558 <ll_conn_acquire+0x8>)
    e552:	f7fa bb7f 	b.w	8c54 <mem_acquire>
    e556:	bf00      	nop
    e558:	200021d8 	.word	0x200021d8

0000e55c <ll_conn_release>:
	mem_release(conn, &conn_free);
    e55c:	4901      	ldr	r1, [pc, #4]	; (e564 <ll_conn_release+0x8>)
    e55e:	f7fa bb93 	b.w	8c88 <mem_release>
    e562:	bf00      	nop
    e564:	200021d8 	.word	0x200021d8

0000e568 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    e568:	4902      	ldr	r1, [pc, #8]	; (e574 <ll_conn_handle_get+0xc>)
    e56a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    e56e:	f7fa bba7 	b.w	8cc0 <mem_index_get>
    e572:	bf00      	nop
    e574:	200012b0 	.word	0x200012b0

0000e578 <ll_conn_get>:
{
    e578:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e57a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e57e:	4801      	ldr	r0, [pc, #4]	; (e584 <ll_conn_get+0xc>)
    e580:	f7fa bb9a 	b.w	8cb8 <mem_get>
    e584:	200012b0 	.word	0x200012b0

0000e588 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e588:	b958      	cbnz	r0, e5a2 <ll_connected_get+0x1a>
{
    e58a:	b508      	push	{r3, lr}
    e58c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e58e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e592:	4805      	ldr	r0, [pc, #20]	; (e5a8 <ll_connected_get+0x20>)
    e594:	f7fa fb90 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e598:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    e59a:	b903      	cbnz	r3, e59e <ll_connected_get+0x16>
}
    e59c:	bd08      	pop	{r3, pc}
		return NULL;
    e59e:	2000      	movs	r0, #0
}
    e5a0:	bd08      	pop	{r3, pc}
		return NULL;
    e5a2:	2000      	movs	r0, #0
}
    e5a4:	4770      	bx	lr
    e5a6:	bf00      	nop
    e5a8:	200012b0 	.word	0x200012b0

0000e5ac <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    e5ac:	4801      	ldr	r0, [pc, #4]	; (e5b4 <ll_tx_mem_acquire+0x8>)
    e5ae:	f7fa bb51 	b.w	8c54 <mem_acquire>
    e5b2:	bf00      	nop
    e5b4:	20002200 	.word	0x20002200

0000e5b8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    e5b8:	4901      	ldr	r1, [pc, #4]	; (e5c0 <ll_tx_mem_release+0x8>)
    e5ba:	f7fa bb65 	b.w	8c88 <mem_release>
    e5be:	bf00      	nop
    e5c0:	20002200 	.word	0x20002200

0000e5c4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e5c4:	2800      	cmp	r0, #0
    e5c6:	d140      	bne.n	e64a <ll_tx_mem_enqueue+0x86>
{
    e5c8:	b570      	push	{r4, r5, r6, lr}
    e5ca:	4602      	mov	r2, r0
    e5cc:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e5ce:	4820      	ldr	r0, [pc, #128]	; (e650 <ll_tx_mem_enqueue+0x8c>)
    e5d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e5d4:	f7fa fb70 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e5d8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e5da:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    e5dc:	bb7a      	cbnz	r2, e63e <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    e5de:	4c1d      	ldr	r4, [pc, #116]	; (e654 <ll_tx_mem_enqueue+0x90>)
    e5e0:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
    e5e4:	78a1      	ldrb	r1, [r4, #2]
    e5e6:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    e5e8:	f10c 0301 	add.w	r3, ip, #1
    e5ec:	b2db      	uxtb	r3, r3
		last = 0U;
    e5ee:	4299      	cmp	r1, r3
    e5f0:	bf08      	it	eq
    e5f2:	2300      	moveq	r3, #0
    e5f4:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
    e5f6:	4299      	cmp	r1, r3
    e5f8:	d024      	beq.n	e644 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    e5fa:	fb1c fc00 	smulbb	ip, ip, r0
    e5fe:	f104 0008 	add.w	r0, r4, #8
	lll_tx->handle = handle;
    e602:	f820 200c 	strh.w	r2, [r0, ip]
    e606:	4484      	add	ip, r0
	lll_tx->node = tx;
    e608:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
    e60c:	7163      	strb	r3, [r4, #5]
    e60e:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
    e610:	b92b      	cbnz	r3, e61e <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e612:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e616:	2b00      	cmp	r3, #0
    e618:	db0b      	blt.n	e632 <ll_tx_mem_enqueue+0x6e>
	return 0;
    e61a:	2000      	movs	r0, #0
}
    e61c:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
    e61e:	4b0e      	ldr	r3, [pc, #56]	; (e658 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    e620:	2101      	movs	r1, #1
    e622:	2003      	movs	r0, #3
	mfy.param = conn;
    e624:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    e626:	f7fa fbed 	bl	8e04 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e62a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e62e:	2b00      	cmp	r3, #0
    e630:	daf3      	bge.n	e61a <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
    e632:	4628      	mov	r0, r5
    e634:	2100      	movs	r1, #0
    e636:	f003 ff23 	bl	12480 <ull_periph_latency_cancel>
	return 0;
    e63a:	2000      	movs	r0, #0
}
    e63c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    e63e:	f06f 0015 	mvn.w	r0, #21
}
    e642:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e644:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    e648:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    e64a:	f06f 0015 	mvn.w	r0, #21
}
    e64e:	4770      	bx	lr
    e650:	200012b0 	.word	0x200012b0
    e654:	20000674 	.word	0x20000674
    e658:	200006d4 	.word	0x200006d4

0000e65c <ll_conn_update>:
{
    e65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e660:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    e664:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    e668:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    e66c:	2800      	cmp	r0, #0
    e66e:	d155      	bne.n	e71c <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e670:	460c      	mov	r4, r1
    e672:	4615      	mov	r5, r2
    e674:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e678:	4602      	mov	r2, r0
    e67a:	4841      	ldr	r0, [pc, #260]	; (e780 <ll_conn_update+0x124>)
    e67c:	461e      	mov	r6, r3
    e67e:	f7fa fb1b 	bl	8cb8 <mem_get>
    e682:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
    e684:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    e686:	2800      	cmp	r0, #0
    e688:	d148      	bne.n	e71c <ll_conn_update+0xc0>
	if (!cmd) {
    e68a:	bb3c      	cbnz	r4, e6dc <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
    e68c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
    e690:	0699      	lsls	r1, r3, #26
    e692:	d44a      	bmi.n	e72a <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
    e694:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
    e698:	07da      	lsls	r2, r3, #31
    e69a:	d442      	bmi.n	e722 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
    e69c:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
    e6a0:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
    e6a4:	4293      	cmp	r3, r2
    e6a6:	d136      	bne.n	e716 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    e6a8:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e6ac:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
    e6b0:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
    e6b4:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
    e6b8:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
    e6ba:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e6be:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
    e6c0:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
    e6c4:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
    e6c8:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
    e6cc:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
    e6d0:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e6d4:	db4e      	blt.n	e774 <ll_conn_update+0x118>
	return 0;
    e6d6:	2000      	movs	r0, #0
}
    e6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
    e6dc:	3c01      	subs	r4, #1
		if (cmd) {
    e6de:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    e6e2:	d0db      	beq.n	e69c <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
    e6e4:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
    e6e8:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
    e6ec:	429a      	cmp	r2, r3
    e6ee:	d012      	beq.n	e716 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
    e6f0:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
    e6f4:	f003 020f 	and.w	r2, r3, #15
    e6f8:	2a03      	cmp	r2, #3
    e6fa:	d10c      	bne.n	e716 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    e6fc:	f004 040f 	and.w	r4, r4, #15
    e700:	f023 031f 	bic.w	r3, r3, #31
    e704:	f044 0410 	orr.w	r4, r4, #16
    e708:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
    e70a:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
    e70e:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
    e712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    e716:	200c      	movs	r0, #12
}
    e718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e71c:	2002      	movs	r0, #2
}
    e71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
    e722:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
    e726:	079b      	lsls	r3, r3, #30
    e728:	d4b8      	bmi.n	e69c <ll_conn_update+0x40>
		} else if (conn->lll.role) {
    e72a:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
    e72e:	2b00      	cmp	r3, #0
    e730:	db1e      	blt.n	e770 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    e732:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
    e736:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
    e73a:	4293      	cmp	r3, r2
    e73c:	d1eb      	bne.n	e716 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e73e:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
    e742:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
    e746:	3301      	adds	r3, #1
    e748:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e74c:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
    e750:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e752:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
    e756:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
    e758:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
    e75c:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
    e760:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e764:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
    e768:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
    e76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e770:	201a      	movs	r0, #26
    e772:	e7d1      	b.n	e718 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
    e774:	4660      	mov	r0, ip
    e776:	2100      	movs	r1, #0
    e778:	f003 fe82 	bl	12480 <ull_periph_latency_cancel>
	return 0;
    e77c:	2000      	movs	r0, #0
    e77e:	e7cb      	b.n	e718 <ll_conn_update+0xbc>
    e780:	200012b0 	.word	0x200012b0

0000e784 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e784:	b9d0      	cbnz	r0, e7bc <ll_chm_get+0x38>
{
    e786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e788:	4602      	mov	r2, r0
    e78a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e78c:	480c      	ldr	r0, [pc, #48]	; (e7c0 <ll_chm_get+0x3c>)
    e78e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e792:	f7fa fa91 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e796:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e798:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    e79a:	b96e      	cbnz	r6, e7b8 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
    e79c:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
    e7a0:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
    e7a4:	2205      	movs	r2, #5
    e7a6:	4639      	mov	r1, r7
    e7a8:	4628      	mov	r0, r5
    e7aa:	f00c f852 	bl	1a852 <memcpy>
	} while (conn->chm_updated);
    e7ae:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
    e7b2:	2800      	cmp	r0, #0
    e7b4:	d1f4      	bne.n	e7a0 <ll_chm_get+0x1c>
}
    e7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e7b8:	2002      	movs	r0, #2
}
    e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e7bc:	2002      	movs	r0, #2
}
    e7be:	4770      	bx	lr
    e7c0:	200012b0 	.word	0x200012b0

0000e7c4 <ll_terminate_ind_send>:
	if (!IS_ACL_HANDLE(handle)) {
    e7c4:	2800      	cmp	r0, #0
    e7c6:	d13e      	bne.n	e846 <ll_terminate_ind_send+0x82>
{
    e7c8:	b510      	push	{r4, lr}
    e7ca:	4602      	mov	r2, r0
    e7cc:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e7ce:	4821      	ldr	r0, [pc, #132]	; (e854 <ll_terminate_ind_send+0x90>)
    e7d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e7d4:	f7fa fa70 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e7d8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    e7da:	bb93      	cbnz	r3, e842 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
    e7dc:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    e7e0:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
    e7e4:	429a      	cmp	r2, r3
    e7e6:	d11b      	bne.n	e820 <ll_terminate_ind_send+0x5c>
	switch (reason) {
    e7e8:	2c29      	cmp	r4, #41	; 0x29
    e7ea:	d81b      	bhi.n	e824 <ll_terminate_ind_send+0x60>
    e7ec:	2c04      	cmp	r4, #4
    e7ee:	d91b      	bls.n	e828 <ll_terminate_ind_send+0x64>
    e7f0:	1f62      	subs	r2, r4, #5
    e7f2:	2a24      	cmp	r2, #36	; 0x24
    e7f4:	d818      	bhi.n	e828 <ll_terminate_ind_send+0x64>
    e7f6:	e8df f002 	tbb	[pc, r2]
    e7fa:	1719      	.short	0x1719
    e7fc:	17171717 	.word	0x17171717
    e800:	17171717 	.word	0x17171717
    e804:	17171717 	.word	0x17171717
    e808:	17191919 	.word	0x17191919
    e80c:	19171717 	.word	0x19171717
    e810:	17171717 	.word	0x17171717
    e814:	17171717 	.word	0x17171717
    e818:	17171717 	.word	0x17171717
    e81c:	1717      	.short	0x1717
    e81e:	19          	.byte	0x19
    e81f:	00          	.byte	0x00
		return BT_HCI_ERR_CMD_DISALLOWED;
    e820:	200c      	movs	r0, #12
}
    e822:	bd10      	pop	{r4, pc}
	switch (reason) {
    e824:	2c3b      	cmp	r4, #59	; 0x3b
    e826:	d001      	beq.n	e82c <ll_terminate_ind_send+0x68>
    e828:	2012      	movs	r0, #18
}
    e82a:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e82c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
    e830:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    e834:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e836:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    e838:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e83c:	db05      	blt.n	e84a <ll_terminate_ind_send+0x86>
	return 0;
    e83e:	2000      	movs	r0, #0
}
    e840:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e842:	2002      	movs	r0, #2
}
    e844:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e846:	2002      	movs	r0, #2
}
    e848:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
    e84a:	2100      	movs	r1, #0
    e84c:	f003 fe18 	bl	12480 <ull_periph_latency_cancel>
	return 0;
    e850:	2000      	movs	r0, #0
}
    e852:	bd10      	pop	{r4, pc}
    e854:	200012b0 	.word	0x200012b0

0000e858 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e858:	bb00      	cbnz	r0, e89c <ll_feature_req_send+0x44>
{
    e85a:	b510      	push	{r4, lr}
    e85c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e85e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e862:	480f      	ldr	r0, [pc, #60]	; (e8a0 <ll_feature_req_send+0x48>)
    e864:	f7fa fa28 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e868:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    e86a:	b984      	cbnz	r4, e88e <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    e86c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    e870:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
    e874:	428a      	cmp	r2, r1
    e876:	d108      	bne.n	e88a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e878:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
    e87c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e87e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
    e880:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e884:	db05      	blt.n	e892 <ll_feature_req_send+0x3a>
	return 0;
    e886:	4620      	mov	r0, r4
}
    e888:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e88a:	200c      	movs	r0, #12
}
    e88c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e88e:	2002      	movs	r0, #2
}
    e890:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
    e892:	4621      	mov	r1, r4
    e894:	f003 fdf4 	bl	12480 <ull_periph_latency_cancel>
	return 0;
    e898:	4620      	mov	r0, r4
}
    e89a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e89c:	2002      	movs	r0, #2
}
    e89e:	4770      	bx	lr
    e8a0:	200012b0 	.word	0x200012b0

0000e8a4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e8a4:	bb00      	cbnz	r0, e8e8 <ll_version_ind_send+0x44>
{
    e8a6:	b510      	push	{r4, lr}
    e8a8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e8aa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e8ae:	480f      	ldr	r0, [pc, #60]	; (e8ec <ll_version_ind_send+0x48>)
    e8b0:	f7fa fa02 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e8b4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    e8b6:	b984      	cbnz	r4, e8da <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    e8b8:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    e8bc:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
    e8c0:	428a      	cmp	r2, r1
    e8c2:	d108      	bne.n	e8d6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e8c4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
    e8c8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e8ca:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
    e8cc:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e8d0:	db05      	blt.n	e8de <ll_version_ind_send+0x3a>
	return 0;
    e8d2:	4620      	mov	r0, r4
}
    e8d4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e8d6:	200c      	movs	r0, #12
}
    e8d8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e8da:	2002      	movs	r0, #2
}
    e8dc:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
    e8de:	4621      	mov	r1, r4
    e8e0:	f003 fdce 	bl	12480 <ull_periph_latency_cancel>
	return 0;
    e8e4:	4620      	mov	r0, r4
}
    e8e6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e8e8:	2002      	movs	r0, #2
}
    e8ea:	4770      	bx	lr
    e8ec:	200012b0 	.word	0x200012b0

0000e8f0 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e8f0:	2800      	cmp	r0, #0
    e8f2:	d153      	bne.n	e99c <ll_length_req_send+0xac>
{
    e8f4:	b538      	push	{r3, r4, r5, lr}
    e8f6:	460c      	mov	r4, r1
    e8f8:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e8fa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e8fe:	4602      	mov	r2, r0
    e900:	4827      	ldr	r0, [pc, #156]	; (e9a0 <ll_length_req_send+0xb0>)
    e902:	f7fa f9d9 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    e906:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    e908:	2b00      	cmp	r3, #0
    e90a:	d13e      	bne.n	e98a <ll_length_req_send+0x9a>
	if (conn->llcp_length.disabled ||
    e90c:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    e910:	071a      	lsls	r2, r3, #28
    e912:	d438      	bmi.n	e986 <ll_length_req_send+0x96>
	    (conn->common.fex_valid &&
    e914:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
    e918:	07d1      	lsls	r1, r2, #31
    e91a:	d503      	bpl.n	e924 <ll_length_req_send+0x34>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
    e91c:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
    e920:	0692      	lsls	r2, r2, #26
    e922:	d530      	bpl.n	e986 <ll_length_req_send+0x96>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    e924:	f890 c1ac 	ldrb.w	ip, [r0, #428]	; 0x1ac
    e928:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    e92c:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
    e930:	462a      	mov	r2, r5
    e932:	bf28      	it	cs
    e934:	f44f 72a4 	movcs.w	r2, #328	; 0x148
    e938:	4561      	cmp	r1, ip
    e93a:	d011      	beq.n	e960 <ll_length_req_send+0x70>
		switch (conn->llcp_length.state) {
    e93c:	f003 0307 	and.w	r3, r3, #7
    e940:	2b03      	cmp	r3, #3
    e942:	d004      	beq.n	e94e <ll_length_req_send+0x5e>
    e944:	3303      	adds	r3, #3
    e946:	f003 0307 	and.w	r3, r3, #7
    e94a:	2b01      	cmp	r3, #1
    e94c:	d824      	bhi.n	e998 <ll_length_req_send+0xa8>
			if (!conn->llcp_length.cache.tx_octets) {
    e94e:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
    e952:	bb0b      	cbnz	r3, e998 <ll_length_req_send+0xa8>
				conn->llcp_length.cache.tx_octets = tx_octets;
    e954:	f8a0 41b8 	strh.w	r4, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
    e958:	f8a0 21ba 	strh.w	r2, [r0, #442]	; 0x1ba
				return 0;
    e95c:	4618      	mov	r0, r3
}
    e95e:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e960:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
    e964:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e968:	f36f 0302 	bfc	r3, #0, #3
    e96c:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e970:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
    e974:	f8a0 21b6 	strh.w	r2, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
    e978:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e97a:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
    e97c:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    e980:	db05      	blt.n	e98e <ll_length_req_send+0x9e>
	return 0;
    e982:	2000      	movs	r0, #0
}
    e984:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e986:	201a      	movs	r0, #26
}
    e988:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e98a:	2002      	movs	r0, #2
}
    e98c:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    e98e:	2100      	movs	r1, #0
    e990:	f003 fd76 	bl	12480 <ull_periph_latency_cancel>
	return 0;
    e994:	2000      	movs	r0, #0
}
    e996:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    e998:	200c      	movs	r0, #12
}
    e99a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e99c:	2002      	movs	r0, #2
}
    e99e:	4770      	bx	lr
    e9a0:	200012b0 	.word	0x200012b0

0000e9a4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    e9a4:	4a03      	ldr	r2, [pc, #12]	; (e9b4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    e9a6:	4b04      	ldr	r3, [pc, #16]	; (e9b8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    e9a8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    e9aa:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    e9ac:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    e9ae:	800b      	strh	r3, [r1, #0]
}
    e9b0:	4770      	bx	lr
    e9b2:	bf00      	nop
    e9b4:	200028da 	.word	0x200028da
    e9b8:	200028dc 	.word	0x200028dc

0000e9bc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    e9bc:	4a02      	ldr	r2, [pc, #8]	; (e9c8 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    e9be:	4b03      	ldr	r3, [pc, #12]	; (e9cc <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    e9c0:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    e9c2:	8019      	strh	r1, [r3, #0]
}
    e9c4:	2000      	movs	r0, #0
    e9c6:	4770      	bx	lr
    e9c8:	200028da 	.word	0x200028da
    e9cc:	200028dc 	.word	0x200028dc

0000e9d0 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    e9d0:	f04f 0c1b 	mov.w	ip, #27
    e9d4:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    e9d8:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    e9dc:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    e9e0:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    e9e2:	8018      	strh	r0, [r3, #0]
}
    e9e4:	4770      	bx	lr
    e9e6:	bf00      	nop

0000e9e8 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    e9e8:	b9c0      	cbnz	r0, ea1c <ll_phy_get+0x34>
{
    e9ea:	b538      	push	{r3, r4, r5, lr}
    e9ec:	460d      	mov	r5, r1
    e9ee:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e9f0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e9f4:	4602      	mov	r2, r0
    e9f6:	480a      	ldr	r0, [pc, #40]	; (ea20 <ll_phy_get+0x38>)
    e9f8:	f7fa f95e 	bl	8cb8 <mem_get>
    e9fc:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    e9fe:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    ea00:	b950      	cbnz	r0, ea18 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    ea02:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    ea06:	f3c2 0202 	ubfx	r2, r2, #0, #3
    ea0a:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    ea0c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    ea10:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ea14:	7023      	strb	r3, [r4, #0]
}
    ea16:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ea18:	2002      	movs	r0, #2
}
    ea1a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ea1c:	2002      	movs	r0, #2
}
    ea1e:	4770      	bx	lr
    ea20:	200012b0 	.word	0x200012b0

0000ea24 <ll_phy_default_set>:
	default_phy_tx = tx;
    ea24:	4a02      	ldr	r2, [pc, #8]	; (ea30 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    ea26:	4b03      	ldr	r3, [pc, #12]	; (ea34 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    ea28:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    ea2a:	7019      	strb	r1, [r3, #0]
}
    ea2c:	2000      	movs	r0, #0
    ea2e:	4770      	bx	lr
    ea30:	20002995 	.word	0x20002995
    ea34:	20002994 	.word	0x20002994

0000ea38 <ll_phy_req_send>:
{
    ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    ea3a:	2800      	cmp	r0, #0
    ea3c:	d143      	bne.n	eac6 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ea3e:	460c      	mov	r4, r1
    ea40:	4616      	mov	r6, r2
    ea42:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    ea46:	4602      	mov	r2, r0
    ea48:	4823      	ldr	r0, [pc, #140]	; (ead8 <ll_phy_req_send+0xa0>)
    ea4a:	461f      	mov	r7, r3
    ea4c:	f7fa f934 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    ea50:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    ea52:	bbc3      	cbnz	r3, eac6 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
    ea54:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
    ea58:	f015 0508 	ands.w	r5, r5, #8
    ea5c:	d130      	bne.n	eac0 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
    ea5e:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
    ea62:	07db      	lsls	r3, r3, #31
    ea64:	d504      	bpl.n	ea70 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
    ea66:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    ea6a:	f413 6f10 	tst.w	r3, #2304	; 0x900
    ea6e:	d027      	beq.n	eac0 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
    ea70:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
    ea74:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
    ea78:	4299      	cmp	r1, r3
    ea7a:	d11e      	bne.n	eaba <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    ea7c:	f004 0407 	and.w	r4, r4, #7
    ea80:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
    ea84:	00a4      	lsls	r4, r4, #2
    ea86:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    ea8a:	f007 0307 	and.w	r3, r7, #7
    ea8e:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    ea92:	f006 0601 	and.w	r6, r6, #1
    ea96:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
    ea9a:	f022 0207 	bic.w	r2, r2, #7
    ea9e:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
    eaa2:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    eaa4:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    eaa8:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
    eaac:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    eaae:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
    eab0:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    eab4:	db0a      	blt.n	eacc <ll_phy_req_send+0x94>
}
    eab6:	4628      	mov	r0, r5
    eab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    eaba:	250c      	movs	r5, #12
}
    eabc:	4628      	mov	r0, r5
    eabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    eac0:	251a      	movs	r5, #26
}
    eac2:	4628      	mov	r0, r5
    eac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    eac6:	2502      	movs	r5, #2
}
    eac8:	4628      	mov	r0, r5
    eaca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
    eacc:	2100      	movs	r1, #0
    eace:	f003 fcd7 	bl	12480 <ull_periph_latency_cancel>
}
    ead2:	4628      	mov	r0, r5
    ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ead6:	bf00      	nop
    ead8:	200012b0 	.word	0x200012b0

0000eadc <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    eadc:	b9d8      	cbnz	r0, eb16 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    eade:	4602      	mov	r2, r0
{
    eae0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    eae2:	480e      	ldr	r0, [pc, #56]	; (eb1c <ll_apto_get+0x40>)
    eae4:	460c      	mov	r4, r1
    eae6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    eaea:	f7fa f8e5 	bl	8cb8 <mem_get>
    eaee:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    eaf0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    eaf2:	b970      	cbnz	r0, eb12 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    eaf4:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
    eaf8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    eafa:	fb02 f303 	mul.w	r3, r2, r3
    eafe:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    eb02:	4a07      	ldr	r2, [pc, #28]	; (eb20 <ll_apto_get+0x44>)
    eb04:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    eb08:	fba2 2303 	umull	r2, r3, r2, r3
    eb0c:	099b      	lsrs	r3, r3, #6
    eb0e:	8023      	strh	r3, [r4, #0]
}
    eb10:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    eb12:	2002      	movs	r0, #2
}
    eb14:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    eb16:	2002      	movs	r0, #2
}
    eb18:	4770      	bx	lr
    eb1a:	bf00      	nop
    eb1c:	200012b0 	.word	0x200012b0
    eb20:	10624dd3 	.word	0x10624dd3

0000eb24 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    eb24:	b9e0      	cbnz	r0, eb60 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    eb26:	4602      	mov	r2, r0
{
    eb28:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    eb2a:	480e      	ldr	r0, [pc, #56]	; (eb64 <ll_apto_set+0x40>)
    eb2c:	460c      	mov	r4, r1
    eb2e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    eb32:	f7fa f8c1 	bl	8cb8 <mem_get>
    eb36:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    eb38:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    eb3a:	b978      	cbnz	r0, eb5c <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    eb3c:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
    eb40:	f240 43e2 	movw	r3, #1250	; 0x4e2
    eb44:	fb03 fc0c 	mul.w	ip, r3, ip
    eb48:	f242 7310 	movw	r3, #10000	; 0x2710
    eb4c:	fb03 c304 	mla	r3, r3, r4, ip
    eb50:	3b01      	subs	r3, #1
    eb52:	fbb3 f3fc 	udiv	r3, r3, ip
    eb56:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
    eb5a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    eb5c:	2002      	movs	r0, #2
}
    eb5e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    eb60:	2002      	movs	r0, #2
}
    eb62:	4770      	bx	lr
    eb64:	200012b0 	.word	0x200012b0

0000eb68 <ull_conn_init>:
	err = init_reset();
    eb68:	f7fe bedc 	b.w	d924 <init_reset>

0000eb6c <ull_conn_reset>:
{
    eb6c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    eb6e:	2200      	movs	r2, #0
    eb70:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    eb74:	4813      	ldr	r0, [pc, #76]	; (ebc4 <ull_conn_reset+0x58>)
    eb76:	f7fa f89f 	bl	8cb8 <mem_get>
    eb7a:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    eb7c:	f100 021c 	add.w	r2, r0, #28
    eb80:	4601      	mov	r1, r0
    eb82:	2005      	movs	r0, #5
    eb84:	f7fd fd68 	bl	c658 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    eb88:	b108      	cbz	r0, eb8e <ull_conn_reset+0x22>
    eb8a:	3078      	adds	r0, #120	; 0x78
    eb8c:	d10c      	bne.n	eba8 <ull_conn_reset+0x3c>
	MFIFO_INIT(conn_tx);
    eb8e:	490e      	ldr	r1, [pc, #56]	; (ebc8 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
    eb90:	4a0e      	ldr	r2, [pc, #56]	; (ebcc <ull_conn_reset+0x60>)
	conn->lll.link_tx_free = NULL;
    eb92:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    eb94:	f64f 70ff 	movw	r0, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
    eb98:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
    eb9a:	8093      	strh	r3, [r2, #4]
	conn->lll.handle = LLL_HANDLE_INVALID;
    eb9c:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    eb9e:	6763      	str	r3, [r4, #116]	; 0x74
}
    eba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
    eba4:	f7fe bebe 	b.w	d924 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    eba8:	4a09      	ldr	r2, [pc, #36]	; (ebd0 <ull_conn_reset+0x64>)
    ebaa:	490a      	ldr	r1, [pc, #40]	; (ebd4 <ull_conn_reset+0x68>)
    ebac:	480a      	ldr	r0, [pc, #40]	; (ebd8 <ull_conn_reset+0x6c>)
    ebae:	f640 1388 	movw	r3, #2440	; 0x988
    ebb2:	f00a fcee 	bl	19592 <assert_print>
    ebb6:	4040      	eors	r0, r0
    ebb8:	f380 8811 	msr	BASEPRI, r0
    ebbc:	f04f 0003 	mov.w	r0, #3
    ebc0:	df02      	svc	2
    ebc2:	e7e4      	b.n	eb8e <ull_conn_reset+0x22>
    ebc4:	200012b0 	.word	0x200012b0
    ebc8:	20000674 	.word	0x20000674
    ebcc:	20000624 	.word	0x20000624
    ebd0:	00020140 	.word	0x00020140
    ebd4:	00020128 	.word	0x00020128
    ebd8:	0001fbf4 	.word	0x0001fbf4

0000ebdc <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    ebdc:	4b01      	ldr	r3, [pc, #4]	; (ebe4 <ull_conn_default_tx_octets_get+0x8>)
}
    ebde:	8818      	ldrh	r0, [r3, #0]
    ebe0:	4770      	bx	lr
    ebe2:	bf00      	nop
    ebe4:	200028da 	.word	0x200028da

0000ebe8 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    ebe8:	4b01      	ldr	r3, [pc, #4]	; (ebf0 <ull_conn_default_tx_time_get+0x8>)
}
    ebea:	8818      	ldrh	r0, [r3, #0]
    ebec:	4770      	bx	lr
    ebee:	bf00      	nop
    ebf0:	200028dc 	.word	0x200028dc

0000ebf4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    ebf4:	4b01      	ldr	r3, [pc, #4]	; (ebfc <ull_conn_default_phy_tx_get+0x8>)
}
    ebf6:	7818      	ldrb	r0, [r3, #0]
    ebf8:	4770      	bx	lr
    ebfa:	bf00      	nop
    ebfc:	20002995 	.word	0x20002995

0000ec00 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    ec00:	4b01      	ldr	r3, [pc, #4]	; (ec08 <ull_conn_default_phy_rx_get+0x8>)
}
    ec02:	7818      	ldrb	r0, [r3, #0]
    ec04:	4770      	bx	lr
    ec06:	bf00      	nop
    ec08:	20002994 	.word	0x20002994

0000ec0c <ull_conn_setup>:
{
    ec0c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    ec0e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    ec10:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    ec12:	681d      	ldr	r5, [r3, #0]
    ec14:	782b      	ldrb	r3, [r5, #0]
{
    ec16:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    ec18:	b193      	cbz	r3, ec40 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    ec1a:	696b      	ldr	r3, [r5, #20]
    ec1c:	b163      	cbz	r3, ec38 <ull_conn_setup+0x2c>
    ec1e:	4a0b      	ldr	r2, [pc, #44]	; (ec4c <ull_conn_setup+0x40>)
    ec20:	490b      	ldr	r1, [pc, #44]	; (ec50 <ull_conn_setup+0x44>)
    ec22:	480c      	ldr	r0, [pc, #48]	; (ec54 <ull_conn_setup+0x48>)
    ec24:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    ec28:	f00a fcb3 	bl	19592 <assert_print>
    ec2c:	4040      	eors	r0, r0
    ec2e:	f380 8811 	msr	BASEPRI, r0
    ec32:	f04f 0003 	mov.w	r0, #3
    ec36:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    ec38:	4b07      	ldr	r3, [pc, #28]	; (ec58 <ull_conn_setup+0x4c>)
    ec3a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    ec3e:	bd38      	pop	{r3, r4, r5, pc}
    ec40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    ec44:	4608      	mov	r0, r1
    ec46:	f7ff b869 	b.w	dd1c <conn_setup_adv_scan_disabled_cb>
    ec4a:	bf00      	nop
    ec4c:	00020140 	.word	0x00020140
    ec50:	0001fff0 	.word	0x0001fff0
    ec54:	0001fbf4 	.word	0x0001fbf4
    ec58:	0000dd1d 	.word	0x0000dd1d

0000ec5c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    ec5c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    ec5e:	88da      	ldrh	r2, [r3, #6]
    ec60:	2a00      	cmp	r2, #0
    ec62:	f040 80cd 	bne.w	ee00 <ull_conn_rx+0x1a4>
{
    ec66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec6a:	460e      	mov	r6, r1
    ec6c:	b085      	sub	sp, #20
    ec6e:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ec70:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    ec74:	48bb      	ldr	r0, [pc, #748]	; (ef64 <ull_conn_rx+0x308>)
    ec76:	f7fa f81f 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
    ec7a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ec7c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    ec7e:	2b00      	cmp	r3, #0
    ec80:	f040 80b7 	bne.w	edf2 <ull_conn_rx+0x196>
	pdu_rx = (void *)(*rx)->pdu;
    ec84:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    ec86:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
    ec8a:	7f29      	ldrb	r1, [r5, #28]
    ec8c:	f001 0103 	and.w	r1, r1, #3
    ec90:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    ec92:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
    ec96:	d128      	bne.n	ecea <ull_conn_rx+0x8e>
	opcode = pdu_rx->llctrl.opcode;
    ec98:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
    ec9c:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    eca0:	b3c8      	cbz	r0, ed16 <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    eca2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    eca6:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
    eca8:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    ecac:	f2c0 80ac 	blt.w	ee08 <ull_conn_rx+0x1ac>
	return (!conn->lll.role &&
    ecb0:	2900      	cmp	r1, #0
    ecb2:	f040 80fd 	bne.w	eeb0 <ull_conn_rx+0x254>
		((!conn->llcp_enc.refresh &&
    ecb6:	f1b8 0f02 	cmp.w	r8, #2
    ecba:	f000 810d 	beq.w	eed8 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    ecbe:	f1b8 0f05 	cmp.w	r8, #5
    ecc2:	d04a      	beq.n	ed5a <ull_conn_rx+0xfe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    ecc4:	f1b8 0f06 	cmp.w	r8, #6
    ecc8:	f000 836a 	beq.w	f3a0 <ull_conn_rx+0x744>
    eccc:	f1b8 0f0d 	cmp.w	r8, #13
    ecd0:	f000 81da 	beq.w	f088 <ull_conn_rx+0x42c>
    ecd4:	f1b8 0f11 	cmp.w	r8, #17
    ecd8:	f000 826c 	beq.w	f1b4 <ull_conn_rx+0x558>
		conn->llcp_terminate.reason_final =
    ecdc:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ecde:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
    ece0:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
    ece4:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ece6:	712b      	strb	r3, [r5, #4]
		return 0;
    ece8:	e007      	b.n	ecfa <ull_conn_rx+0x9e>
	switch (pdu_rx->ll_id) {
    ecea:	b949      	cbnz	r1, ed00 <ull_conn_rx+0xa4>
		if (conn->llcp_enc.pause_rx) {
    ecec:	b110      	cbz	r0, ecf4 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
    ecee:	233d      	movs	r3, #61	; 0x3d
    ecf0:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ecf4:	2301      	movs	r3, #1
    ecf6:	712b      	strb	r3, [r5, #4]
	return 0;
    ecf8:	2000      	movs	r0, #0
}
    ecfa:	b005      	add	sp, #20
    ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    ed00:	2800      	cmp	r0, #0
    ed02:	d0f9      	beq.n	ecf8 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_final =
    ed04:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ed06:	2201      	movs	r2, #1
	return 0;
    ed08:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
    ed0a:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ed0e:	712a      	strb	r2, [r5, #4]
}
    ed10:	b005      	add	sp, #20
    ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    ed16:	f1b8 0f18 	cmp.w	r8, #24
    ed1a:	d81e      	bhi.n	ed5a <ull_conn_rx+0xfe>
    ed1c:	e8df f018 	tbh	[pc, r8, lsl #1]
    ed20:	02800126 	.word	0x02800126
    ed24:	001900dc 	.word	0x001900dc
    ed28:	001d001d 	.word	0x001d001d
    ed2c:	03e80340 	.word	0x03e80340
    ed30:	0303036b 	.word	0x0303036b
    ed34:	047a02ba 	.word	0x047a02ba
    ed38:	01b401f7 	.word	0x01b401f7
    ed3c:	019f001d 	.word	0x019f001d
    ed40:	024a001d 	.word	0x024a001d
    ed44:	01950226 	.word	0x01950226
    ed48:	00e800e8 	.word	0x00e800e8
    ed4c:	001d044b 	.word	0x001d044b
    ed50:	040e      	.short	0x040e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
    ed52:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ed56:	2b00      	cmp	r3, #0
    ed58:	db63      	blt.n	ee22 <ull_conn_rx+0x1c6>
	if (conn->common.txn_lock) {
    ed5a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    ed5e:	0798      	lsls	r0, r3, #30
    ed60:	d4c8      	bmi.n	ecf4 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ed62:	4881      	ldr	r0, [pc, #516]	; (ef68 <ull_conn_rx+0x30c>)
    ed64:	f7f9 ff76 	bl	8c54 <mem_acquire>
	if (!tx) {
    ed68:	2800      	cmp	r0, #0
    ed6a:	f000 851f 	beq.w	f7ac <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
    ed6e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    ed72:	f043 0302 	orr.w	r3, r3, #2
    ed76:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed7a:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    ed7c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ed80:	f043 0303 	orr.w	r3, r3, #3
    ed84:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    ed86:	2302      	movs	r3, #2
    ed88:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    ed8a:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ed8e:	2307      	movs	r3, #7
    ed90:	71c3      	strb	r3, [r0, #7]
	if (
    ed92:	b1f2      	cbz	r2, edd2 <ull_conn_rx+0x176>
	    !conn->llcp_enc.pause_tx &&
    ed94:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
    ed98:	0799      	lsls	r1, r3, #30
    ed9a:	d41a      	bmi.n	edd2 <ull_conn_rx+0x176>
	    !conn->llcp_phy.pause_tx &&
    ed9c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    eda0:	07db      	lsls	r3, r3, #31
    eda2:	d416      	bmi.n	edd2 <ull_conn_rx+0x176>
		if (conn->tx_head == conn->tx_data) {
    eda4:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
    eda8:	429a      	cmp	r2, r3
    edaa:	f000 8508 	beq.w	f7be <ull_conn_rx+0xb62>
		} else if (!conn->tx_ctrl) {
    edae:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    edb2:	2b00      	cmp	r3, #0
    edb4:	f000 8556 	beq.w	f864 <ull_conn_rx+0xc08>
	tx->next = conn->tx_ctrl_last->next;
    edb8:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    edbc:	6813      	ldr	r3, [r2, #0]
    edbe:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    edc0:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    edc2:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    edc4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    edc8:	2a00      	cmp	r2, #0
    edca:	d193      	bne.n	ecf4 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
    edcc:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    edd0:	e790      	b.n	ecf4 <ull_conn_rx+0x98>
		if (!conn->tx_ctrl) {
    edd2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    edd6:	2b00      	cmp	r3, #0
    edd8:	f000 84de 	beq.w	f798 <ull_conn_rx+0xb3c>
	tx->next = conn->tx_ctrl_last->next;
    eddc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    ede0:	681a      	ldr	r2, [r3, #0]
    ede2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    ede4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ede6:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    ede8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    edec:	2a00      	cmp	r2, #0
    edee:	d181      	bne.n	ecf4 <ull_conn_rx+0x98>
    edf0:	e7ec      	b.n	edcc <ull_conn_rx+0x170>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    edf2:	6833      	ldr	r3, [r6, #0]
    edf4:	2201      	movs	r2, #1
		return 0;
    edf6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    edf8:	711a      	strb	r2, [r3, #4]
}
    edfa:	b005      	add	sp, #20
    edfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ee00:	2201      	movs	r2, #1
    ee02:	711a      	strb	r2, [r3, #4]
		return 0;
    ee04:	2000      	movs	r0, #0
}
    ee06:	4770      	bx	lr
	       (conn->lll.role &&
    ee08:	2900      	cmp	r1, #0
    ee0a:	d05d      	beq.n	eec8 <ull_conn_rx+0x26c>
		 (conn->llcp_enc.refresh &&
    ee0c:	f1b8 0f02 	cmp.w	r8, #2
    ee10:	d062      	beq.n	eed8 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    ee12:	f1b8 0f0b 	cmp.w	r8, #11
    ee16:	f000 84e5 	beq.w	f7e4 <ull_conn_rx+0xb88>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    ee1a:	f1b8 0f03 	cmp.w	r8, #3
    ee1e:	f47f af51 	bne.w	ecc4 <ull_conn_rx+0x68>
		if (!conn->lll.role ||
    ee22:	7f6b      	ldrb	r3, [r5, #29]
    ee24:	2b17      	cmp	r3, #23
    ee26:	d198      	bne.n	ed5a <ull_conn_rx+0xfe>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    ee28:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    ee2c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    ee30:	1a9b      	subs	r3, r3, r2
    ee32:	f003 0303 	and.w	r3, r3, #3
    ee36:	2b02      	cmp	r3, #2
    ee38:	f001 8190 	beq.w	1015c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15d>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
    ee3c:	2208      	movs	r2, #8
    ee3e:	f105 0120 	add.w	r1, r5, #32
    ee42:	f204 1069 	addw	r0, r4, #361	; 0x169
    ee46:	f00b fd04 	bl	1a852 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
    ee4a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ee4e:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    ee52:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ee56:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    ee5a:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ee5e:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ee60:	2301      	movs	r3, #1
    ee62:	f363 0201 	bfi	r2, r3, #0, #2
    ee66:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ee6a:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
    ee6c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
    ee70:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
    ee72:	3b02      	subs	r3, #2
    ee74:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
    ee78:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
    ee7a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
    ee7e:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    ee82:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    ee86:	f00b fce4 	bl	1a852 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
    ee8a:	2204      	movs	r2, #4
    ee8c:	f105 0132 	add.w	r1, r5, #50	; 0x32
    ee90:	f104 0094 	add.w	r0, r4, #148	; 0x94
    ee94:	f00b fcdd 	bl	1a852 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
    ee98:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    ee9c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    eea0:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
    eea4:	f043 0301 	orr.w	r3, r3, #1
    eea8:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
    eeac:	2000      	movs	r0, #0

		break;
    eeae:	e724      	b.n	ecfa <ull_conn_rx+0x9e>
		 (conn->llcp_enc.refresh &&
    eeb0:	f1b8 0f02 	cmp.w	r8, #2
    eeb4:	d010      	beq.n	eed8 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    eeb6:	f1b8 0f0b 	cmp.w	r8, #11
    eeba:	f000 847b 	beq.w	f7b4 <ull_conn_rx+0xb58>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    eebe:	f1b8 0f04 	cmp.w	r8, #4
    eec2:	f47f aefc 	bne.w	ecbe <ull_conn_rx+0x62>
    eec6:	e748      	b.n	ed5a <ull_conn_rx+0xfe>
		((!conn->llcp_enc.refresh &&
    eec8:	f1b8 0f07 	cmp.w	r8, #7
    eecc:	f000 8310 	beq.w	f4f0 <ull_conn_rx+0x894>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    eed0:	f1b8 0f02 	cmp.w	r8, #2
    eed4:	f47f aef6 	bne.w	ecc4 <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    eed8:	7f6b      	ldrb	r3, [r5, #29]
    eeda:	2b02      	cmp	r3, #2
    eedc:	f47f af3d 	bne.w	ed5a <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_final =
    eee0:	f895 2020 	ldrb.w	r2, [r5, #32]
    eee4:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    eee8:	2301      	movs	r3, #1
	int nack = 0;
    eeea:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    eeec:	712b      	strb	r3, [r5, #4]
}
    eeee:	e704      	b.n	ecfa <ull_conn_rx+0x9e>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
    eef0:	7f6b      	ldrb	r3, [r5, #29]
    eef2:	2b09      	cmp	r3, #9
    eef4:	f47f af31 	bne.w	ed5a <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    eef8:	f1b8 0f14 	cmp.w	r8, #20
    eefc:	f000 84bc 	beq.w	f878 <ull_conn_rx+0xc1c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    ef00:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
    ef04:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    ef08:	4293      	cmp	r3, r2
    ef0a:	f001 804e 	beq.w	ffaa <ull_conn_rx+0x134e>
	eff_rx_octets = conn->lll.max_rx_octets;
    ef0e:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
    ef12:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
    ef16:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
    ef1a:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    ef1e:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
    ef22:	2300      	movs	r3, #0
	       tx) ||
    ef24:	f001 0107 	and.w	r1, r1, #7
    ef28:	2902      	cmp	r1, #2
    ef2a:	f000 84c5 	beq.w	f8b8 <ull_conn_rx+0xc5c>
    ef2e:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    ef32:	f1b8 0f15 	cmp.w	r8, #21
    ef36:	f43f aedf 	beq.w	ecf8 <ull_conn_rx+0x9c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    ef3a:	4618      	mov	r0, r3
    ef3c:	490a      	ldr	r1, [pc, #40]	; (ef68 <ull_conn_rx+0x30c>)
    ef3e:	f7f9 fea3 	bl	8c88 <mem_release>
			if (conn->llcp_length.state ==
    ef42:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
    ef46:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
    ef4a:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
    ef4e:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
    ef52:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
    ef54:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
    ef58:	f47f aece 	bne.w	ecf8 <ull_conn_rx+0x9c>
				return -EBUSY;
    ef5c:	f06f 000f 	mvn.w	r0, #15
    ef60:	e6cb      	b.n	ecfa <ull_conn_rx+0x9e>
    ef62:	bf00      	nop
    ef64:	200012b0 	.word	0x200012b0
    ef68:	20002294 	.word	0x20002294
		if (!conn->lll.role ||
    ef6c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ef70:	2b00      	cmp	r3, #0
    ef72:	f6bf aef2 	bge.w	ed5a <ull_conn_rx+0xfe>
    ef76:	7f6b      	ldrb	r3, [r5, #29]
    ef78:	2b0c      	cmp	r3, #12
    ef7a:	f47f aeee 	bne.w	ed5a <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    ef7e:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    ef82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    ef84:	1ad3      	subs	r3, r2, r3
    ef86:	041b      	lsls	r3, r3, #16
    ef88:	f100 8748 	bmi.w	fe1c <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    ef8c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    ef90:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    ef94:	1a5b      	subs	r3, r3, r1
    ef96:	f003 0303 	and.w	r3, r3, #3
    ef9a:	2b02      	cmp	r3, #2
    ef9c:	f000 87c8 	beq.w	ff30 <ull_conn_rx+0x12d4>
	if (!conn_upd_curr) {
    efa0:	4bba      	ldr	r3, [pc, #744]	; (f28c <ull_conn_rx+0x630>)
    efa2:	6819      	ldr	r1, [r3, #0]
    efa4:	2900      	cmp	r1, #0
    efa6:	f000 87ed 	beq.w	ff84 <ull_conn_rx+0x1328>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    efaa:	f895 3020 	ldrb.w	r3, [r5, #32]
    efae:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
    efb2:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
    efb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    efba:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
    efbe:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    efc2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    efc6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    efca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
    efce:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    efd2:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    efd6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    efda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
    efde:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    efe2:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    efe6:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
    efea:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
    efee:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    eff2:	f023 030f 	bic.w	r3, r3, #15
    eff6:	f043 0308 	orr.w	r3, r3, #8
    effa:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
    effe:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    f002:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
    f006:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
    f00a:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
    f00c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
    f010:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
    f014:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
    f016:	6832      	ldr	r2, [r6, #0]
    f018:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
    f01a:	6832      	ldr	r2, [r6, #0]
    f01c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
    f020:	2300      	movs	r3, #0
    f022:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    f024:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    f028:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    f02c:	4293      	cmp	r3, r2
    f02e:	d007      	beq.n	f040 <ull_conn_rx+0x3e4>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
    f030:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    f034:	f003 030e 	and.w	r3, r3, #14
    f038:	2b04      	cmp	r3, #4
    f03a:	d101      	bne.n	f040 <ull_conn_rx+0x3e4>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f03c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
    f040:	2300      	movs	r3, #0
    f042:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    f046:	4618      	mov	r0, r3
		break;
    f048:	e657      	b.n	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
    f04a:	7f6a      	ldrb	r2, [r5, #29]
    f04c:	2a01      	cmp	r2, #1
    f04e:	f47f ae84 	bne.w	ed5a <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
    f052:	2300      	movs	r3, #0
    f054:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    f058:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    f05a:	712a      	strb	r2, [r5, #4]
		break;
    f05c:	e64d      	b.n	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
    f05e:	7f6b      	ldrb	r3, [r5, #29]
    f060:	2b18      	cmp	r3, #24
    f062:	f47f ae7a 	bne.w	ed5a <ull_conn_rx+0xfe>
	return conn_upd_curr && (conn_upd_curr != conn);
    f066:	4889      	ldr	r0, [pc, #548]	; (f28c <ull_conn_rx+0x630>)
    f068:	6803      	ldr	r3, [r0, #0]
    f06a:	2b00      	cmp	r3, #0
    f06c:	f000 83c6 	beq.w	f7fc <ull_conn_rx+0xba0>
    f070:	429c      	cmp	r4, r3
    f072:	f000 83c3 	beq.w	f7fc <ull_conn_rx+0xba0>
			nack = reject_ext_ind_send(conn, *rx,
    f076:	2320      	movs	r3, #32
    f078:	220f      	movs	r2, #15
    f07a:	4629      	mov	r1, r5
    f07c:	4620      	mov	r0, r4
}
    f07e:	b005      	add	sp, #20
    f080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
    f084:	f7fe bf1e 	b.w	dec4 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
    f088:	7f6b      	ldrb	r3, [r5, #29]
    f08a:	2b02      	cmp	r3, #2
    f08c:	f47f ae65 	bne.w	ed5a <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
    f090:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    f094:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    f098:	4293      	cmp	r3, r2
    f09a:	d004      	beq.n	f0a6 <ull_conn_rx+0x44a>
    f09c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    f0a0:	2b03      	cmp	r3, #3
    f0a2:	f000 86a5 	beq.w	fdf0 <ull_conn_rx+0x1194>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    f0a6:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    f0aa:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    f0ae:	4293      	cmp	r3, r2
    f0b0:	f000 84ef 	beq.w	fa92 <ull_conn_rx+0xe36>
		rej_ext_ind->error_code = rej_ind->error_code;
    f0b4:	f895 1020 	ldrb.w	r1, [r5, #32]
    f0b8:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    f0bc:	2923      	cmp	r1, #35	; 0x23
    f0be:	d012      	beq.n	f0e6 <ull_conn_rx+0x48a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f0c0:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    f0c4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f0c8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
    f0cc:	f36f 0200 	bfc	r2, #0, #1
    f0d0:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
    f0d4:	2200      	movs	r2, #0
    f0d6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f0da:	f3c3 0202 	ubfx	r2, r3, #0, #3
    f0de:	f362 1306 	bfi	r3, r2, #4, #3
    f0e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
    f0e6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    f0ea:	075e      	lsls	r6, r3, #29
    f0ec:	f57f ae02 	bpl.w	ecf4 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f0f0:	231d      	movs	r3, #29
    f0f2:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    f0f4:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
    f0f6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    f0fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f0fe:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
    f100:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    f104:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
    f108:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
    f10a:	77ab      	strb	r3, [r5, #30]
	if (err) {
    f10c:	e5f5      	b.n	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
    f10e:	7f6e      	ldrb	r6, [r5, #29]
    f110:	2e06      	cmp	r6, #6
    f112:	f47f ae22 	bne.w	ed5a <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
    f116:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    f11a:	07df      	lsls	r7, r3, #31
    f11c:	f140 85ae 	bpl.w	fc7c <ull_conn_rx+0x1020>
	} else if (!conn->llcp_version.rx) {
    f120:	f013 0302 	ands.w	r3, r3, #2
    f124:	f47f ade6 	bne.w	ecf4 <ull_conn_rx+0x98>
		conn->llcp_version.ack = conn->llcp_version.req;
    f128:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
    f12c:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
    f130:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
    f134:	f895 3020 	ldrb.w	r3, [r5, #32]
    f138:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    f13c:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    f140:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
    f144:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    f148:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f14c:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
    f150:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    f154:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
    f158:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    f15c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    f160:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
    f164:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
    f168:	2000      	movs	r0, #0
    f16a:	e5c6      	b.n	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
    f16c:	7f6f      	ldrb	r7, [r5, #29]
    f16e:	2f01      	cmp	r7, #1
    f170:	f47f adf3 	bne.w	ed5a <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
    f174:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f178:	f013 0602 	ands.w	r6, r3, #2
    f17c:	f040 85a9 	bne.w	fcd2 <ull_conn_rx+0x1076>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f180:	4843      	ldr	r0, [pc, #268]	; (f290 <ull_conn_rx+0x634>)
    f182:	f7f9 fd67 	bl	8c54 <mem_acquire>
	if (!tx) {
    f186:	4601      	mov	r1, r0
    f188:	2800      	cmp	r0, #0
    f18a:	f000 830f 	beq.w	f7ac <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
    f18e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f192:	f043 0302 	orr.w	r3, r3, #2
    f196:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f19a:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    f19c:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f19e:	f043 0303 	orr.w	r3, r3, #3
    f1a2:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f1a4:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
    f1a6:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f1a8:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    f1aa:	f7fe fce3 	bl	db74 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    f1ae:	712f      	strb	r7, [r5, #4]
	return 0;
    f1b0:	4630      	mov	r0, r6
    f1b2:	e5a2      	b.n	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
    f1b4:	7f6b      	ldrb	r3, [r5, #29]
    f1b6:	2b03      	cmp	r3, #3
    f1b8:	f47f adcf 	bne.w	ed5a <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
    f1bc:	f895 3020 	ldrb.w	r3, [r5, #32]
    f1c0:	3b03      	subs	r3, #3
    f1c2:	2b13      	cmp	r3, #19
    f1c4:	f63f ad96 	bhi.w	ecf4 <ull_conn_rx+0x98>
    f1c8:	a201      	add	r2, pc, #4	; (adr r2, f1d0 <ull_conn_rx+0x574>)
    f1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f1ce:	bf00      	nop
    f1d0:	0000f70b 	.word	0x0000f70b
    f1d4:	0000ecf5 	.word	0x0000ecf5
    f1d8:	0000ecf5 	.word	0x0000ecf5
    f1dc:	0000ecf5 	.word	0x0000ecf5
    f1e0:	0000ecf5 	.word	0x0000ecf5
    f1e4:	0000ecf5 	.word	0x0000ecf5
    f1e8:	0000ecf5 	.word	0x0000ecf5
    f1ec:	0000ecf5 	.word	0x0000ecf5
    f1f0:	0000ecf5 	.word	0x0000ecf5
    f1f4:	0000ecf5 	.word	0x0000ecf5
    f1f8:	0000ecf5 	.word	0x0000ecf5
    f1fc:	0000ecf5 	.word	0x0000ecf5
    f200:	0000f691 	.word	0x0000f691
    f204:	0000ecf5 	.word	0x0000ecf5
    f208:	0000ecf5 	.word	0x0000ecf5
    f20c:	0000ecf5 	.word	0x0000ecf5
    f210:	0000ecf5 	.word	0x0000ecf5
    f214:	0000f653 	.word	0x0000f653
    f218:	0000ecf5 	.word	0x0000ecf5
    f21c:	0000f74b 	.word	0x0000f74b
		if (!conn->lll.role ||
    f220:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f224:	2b00      	cmp	r3, #0
    f226:	f6bf ad98 	bge.w	ed5a <ull_conn_rx+0xfe>
    f22a:	7f6b      	ldrb	r3, [r5, #29]
    f22c:	2b08      	cmp	r3, #8
    f22e:	f47f ad94 	bne.w	ed5a <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    f232:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    f236:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f238:	1af3      	subs	r3, r6, r3
    f23a:	041f      	lsls	r7, r3, #16
    f23c:	f100 85ee 	bmi.w	fe1c <ull_conn_rx+0x11c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    f240:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    f244:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    f248:	1a9b      	subs	r3, r3, r2
    f24a:	f003 0303 	and.w	r3, r3, #3
    f24e:	2b02      	cmp	r3, #2
    f250:	f000 866e 	beq.w	ff30 <ull_conn_rx+0x12d4>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
    f254:	2205      	movs	r2, #5
    f256:	f105 0120 	add.w	r1, r5, #32
    f25a:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
    f25e:	f00b faf8 	bl	1a852 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
    f262:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
    f266:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
    f26a:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
    f26e:	f36f 0200 	bfc	r2, #0, #1
    f272:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
    f276:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
    f278:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    f27a:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
    f27c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
    f280:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
    f284:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    f286:	712a      	strb	r2, [r5, #4]
		if (err) {
    f288:	e537      	b.n	ecfa <ull_conn_rx+0x9e>
    f28a:	bf00      	nop
    f28c:	200021dc 	.word	0x200021dc
    f290:	20002294 	.word	0x20002294
		if (!conn->lll.role ||
    f294:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f298:	2b00      	cmp	r3, #0
    f29a:	f6bf ad5e 	bge.w	ed5a <ull_conn_rx+0xfe>
    f29e:	7f6e      	ldrb	r6, [r5, #29]
    f2a0:	2e01      	cmp	r6, #1
    f2a2:	f47f ad5a 	bne.w	ed5a <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f2a6:	48d9      	ldr	r0, [pc, #868]	; (f60c <ull_conn_rx+0x9b0>)
    f2a8:	f7f9 fcd4 	bl	8c54 <mem_acquire>
		if (!tx) {
    f2ac:	2800      	cmp	r0, #0
    f2ae:	f000 827d 	beq.w	f7ac <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
    f2b2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    f2b6:	f023 0305 	bic.w	r3, r3, #5
    f2ba:	f043 0305 	orr.w	r3, r3, #5
    f2be:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
    f2c2:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    f2c6:	f36f 03c3 	bfc	r3, #3, #1
    f2ca:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2ce:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f2d0:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2d2:	f043 0303 	orr.w	r3, r3, #3
    f2d6:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    f2d8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    f2dc:	220b      	movs	r2, #11
    f2de:	71c2      	strb	r2, [r0, #7]
	if (
    f2e0:	2b00      	cmp	r3, #0
    f2e2:	f000 82b4 	beq.w	f84e <ull_conn_rx+0xbf2>
	    !conn->llcp_enc.pause_tx &&
    f2e6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    f2ea:	0791      	lsls	r1, r2, #30
    f2ec:	f100 82af 	bmi.w	f84e <ull_conn_rx+0xbf2>
	    !conn->llcp_phy.pause_tx &&
    f2f0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    f2f4:	07d2      	lsls	r2, r2, #31
    f2f6:	f100 82aa 	bmi.w	f84e <ull_conn_rx+0xbf2>
		if (conn->tx_head == conn->tx_data) {
    f2fa:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    f2fe:	4293      	cmp	r3, r2
    f300:	f000 8756 	beq.w	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
		} else if (!conn->tx_ctrl) {
    f304:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    f308:	2a00      	cmp	r2, #0
    f30a:	f000 8769 	beq.w	101e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e1>
	tx->next = conn->tx_ctrl_last->next;
    f30e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    f312:	681a      	ldr	r2, [r3, #0]
    f314:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    f316:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    f318:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    f31c:	6803      	ldr	r3, [r0, #0]
    f31e:	2b00      	cmp	r3, #0
    f320:	f47f ace8 	bne.w	ecf4 <ull_conn_rx+0x98>
    f324:	e552      	b.n	edcc <ull_conn_rx+0x170>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
    f326:	7f6b      	ldrb	r3, [r5, #29]
    f328:	2b09      	cmp	r3, #9
    f32a:	f47f ad16 	bne.w	ed5a <ull_conn_rx+0xfe>
    f32e:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
    f330:	49b7      	ldr	r1, [pc, #732]	; (f610 <ull_conn_rx+0x9b4>)
    f332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f334:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    f336:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    f33a:	400a      	ands	r2, r1
    f33c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    f340:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    f344:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
    f348:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    f34c:	4013      	ands	r3, r2
    f34e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    f352:	6a2e      	ldr	r6, [r5, #32]
    f354:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
    f356:	f7fc fb91 	bl	ba7c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    f35a:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    f35e:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
    f362:	4aab      	ldr	r2, [pc, #684]	; (f610 <ull_conn_rx+0x9b4>)
	conn->llcp_feature.features_peer =
    f364:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
    f368:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
    f36c:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
    f36e:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
    f372:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
    f374:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
    f378:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    f37c:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
    f380:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    f384:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
    f388:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    f38a:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
    f38e:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    f390:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    f394:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
    f398:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    f39c:	4618      	mov	r0, r3
}
    f39e:	e4ac      	b.n	ecfa <ull_conn_rx+0x9e>
		if ((conn->llcp_req == conn->llcp_ack) ||
    f3a0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    f3a4:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    f3a8:	4299      	cmp	r1, r3
    f3aa:	f43f acd6 	beq.w	ed5a <ull_conn_rx+0xfe>
    f3ae:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    f3b2:	2903      	cmp	r1, #3
    f3b4:	f47f acd1 	bne.w	ed5a <ull_conn_rx+0xfe>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    f3b8:	7f69      	ldrb	r1, [r5, #29]
    f3ba:	2901      	cmp	r1, #1
    f3bc:	f47f accd 	bne.w	ed5a <ull_conn_rx+0xfe>
		if (conn->lll.role) {
    f3c0:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    f3c4:	2900      	cmp	r1, #0
    f3c6:	f2c0 84e3 	blt.w	fd90 <ull_conn_rx+0x1134>
			conn->llcp_enc.pause_rx = 0U;
    f3ca:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
    f3ce:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
    f3d2:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
    f3d4:	f022 0203 	bic.w	r2, r2, #3
    f3d8:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
    f3dc:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
    f3e0:	0750      	lsls	r0, r2, #29
    f3e2:	f57f ac89 	bpl.w	ecf8 <ull_conn_rx+0x9c>
			conn->llcp_enc.refresh = 0U;
    f3e6:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f3ea:	231a      	movs	r3, #26
			conn->llcp_enc.refresh = 0U;
    f3ec:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
    f3f0:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f3f2:	712b      	strb	r3, [r5, #4]
    f3f4:	e481      	b.n	ecfa <ull_conn_rx+0x9e>
		if (!conn->lll.role ||
    f3f6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f3fa:	2b00      	cmp	r3, #0
    f3fc:	f6bf acad 	bge.w	ed5a <ull_conn_rx+0xfe>
    f400:	f895 901d 	ldrb.w	r9, [r5, #29]
    f404:	f1b9 0f09 	cmp.w	r9, #9
    f408:	f47f aca7 	bne.w	ed5a <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
    f40c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    f410:	f010 0602 	ands.w	r6, r0, #2
    f414:	f47f ac6e 	bne.w	ecf4 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f418:	487c      	ldr	r0, [pc, #496]	; (f60c <ull_conn_rx+0x9b0>)
    f41a:	f7f9 fc1b 	bl	8c54 <mem_acquire>
	if (!tx) {
    f41e:	4607      	mov	r7, r0
    f420:	2800      	cmp	r0, #0
    f422:	f000 81c3 	beq.w	f7ac <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
    f426:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
    f42a:	4979      	ldr	r1, [pc, #484]	; (f610 <ull_conn_rx+0x9b4>)
	conn->common.txn_lock = 1U;
    f42c:	f043 0302 	orr.w	r3, r3, #2
    f430:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
    f434:	6a2a      	ldr	r2, [r5, #32]
    f436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
    f438:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    f43a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    f43e:	400a      	ands	r2, r1
    f440:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    f444:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    f448:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
    f44c:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    f450:	4013      	ands	r3, r2
    f452:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    f456:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    f45a:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    f45e:	f7fc fb0d 	bl	ba7c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    f462:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    f466:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
    f46a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
    f46e:	4b68      	ldr	r3, [pc, #416]	; (f610 <ull_conn_rx+0x9b4>)
    f470:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
    f474:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    f476:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f47a:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
    f47e:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    f482:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
    f486:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    f48a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
    f48e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f492:	f043 0301 	orr.w	r3, r3, #1
    f496:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f49a:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    f49c:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f4a0:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    f4a4:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f4a6:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    f4a8:	18b8      	adds	r0, r7, r2
    f4aa:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    f4ac:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    f4b0:	f00b f9da 	bl	1a868 <memset>
	feat = feat_land_octet0(ll_feat_get(),
    f4b4:	f7fc fae2 	bl	ba7c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    f4b8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[0] = val;
    f4bc:	7339      	strb	r1, [r7, #12]
    f4be:	4002      	ands	r2, r0
	feat_result &= 0xFF;
    f4c0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    f4c4:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
    f4c8:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
    f4ca:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    f4cc:	723b      	strb	r3, [r7, #8]
    f4ce:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
    f4d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f4d4:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
    f4d6:	4620      	mov	r0, r4
    f4d8:	727b      	strb	r3, [r7, #9]
    f4da:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
    f4dc:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
    f4de:	73fe      	strb	r6, [r7, #15]
    f4e0:	72fa      	strb	r2, [r7, #11]
    f4e2:	4639      	mov	r1, r7
    f4e4:	f7fe fb46 	bl	db74 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    f4e8:	2301      	movs	r3, #1
    f4ea:	712b      	strb	r3, [r5, #4]
	return 0;
    f4ec:	4630      	mov	r0, r6
    f4ee:	e404      	b.n	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
    f4f0:	7f6b      	ldrb	r3, [r5, #29]
    f4f2:	2b02      	cmp	r3, #2
    f4f4:	f47f ac31 	bne.w	ed5a <ull_conn_rx+0xfe>
			    conn->llcp_conn_param.req) &&
    f4f8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
    f4fc:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    f500:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
    f504:	4291      	cmp	r1, r2
    f506:	d002      	beq.n	f50e <ull_conn_rx+0x8b2>
			    conn->llcp_conn_param.req) &&
    f508:	2b0f      	cmp	r3, #15
    f50a:	f000 836c 	beq.w	fbe6 <ull_conn_rx+0xf8a>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
    f50e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    f512:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    f516:	4291      	cmp	r1, r2
    f518:	d002      	beq.n	f520 <ull_conn_rx+0x8c4>
    f51a:	2b14      	cmp	r3, #20
    f51c:	f000 83e0 	beq.w	fce0 <ull_conn_rx+0x1084>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
    f520:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    f524:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
    f528:	4291      	cmp	r1, r2
    f52a:	d002      	beq.n	f532 <ull_conn_rx+0x8d6>
    f52c:	2b16      	cmp	r3, #22
    f52e:	f000 843b 	beq.w	fda8 <ull_conn_rx+0x114c>
			switch (llctrl->unknown_rsp.type) {
    f532:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    f534:	bf04      	itt	eq
    f536:	2301      	moveq	r3, #1
    f538:	712b      	strbeq	r3, [r5, #4]
				break;
    f53a:	e581      	b.n	f040 <ull_conn_rx+0x3e4>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
    f53c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f540:	2b00      	cmp	r3, #0
    f542:	f6bf ac0a 	bge.w	ed5a <ull_conn_rx+0xfe>
    f546:	7f6b      	ldrb	r3, [r5, #29]
    f548:	2b05      	cmp	r3, #5
    f54a:	f47f ac06 	bne.w	ed5a <ull_conn_rx+0xfe>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
    f54e:	f895 2020 	ldrb.w	r2, [r5, #32]
    f552:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    f556:	4313      	orrs	r3, r2
    f558:	f013 0307 	ands.w	r3, r3, #7
    f55c:	f040 8470 	bne.w	fe40 <ull_conn_rx+0x11e4>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f560:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    f564:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
    f568:	428a      	cmp	r2, r1
    f56a:	f43f abc3 	beq.w	ecf4 <ull_conn_rx+0x98>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    f56e:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f572:	f002 0203 	and.w	r2, r2, #3
    f576:	2a02      	cmp	r2, #2
    f578:	f47f abbc 	bne.w	ecf4 <ull_conn_rx+0x98>
		conn->llcp_phy.pause_tx = 0U;
    f57c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f580:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f584:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
    f588:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
    f58c:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f590:	4608      	mov	r0, r1
    f592:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    f596:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
    f59a:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f59e:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    f5a2:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
    f5a6:	f040 85e6 	bne.w	10176 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x177>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    f5aa:	6833      	ldr	r3, [r6, #0]
    f5ac:	2101      	movs	r1, #1
    f5ae:	7119      	strb	r1, [r3, #4]
	int nack = 0;
    f5b0:	4610      	mov	r0, r2
    f5b2:	f7ff bba2 	b.w	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
    f5b6:	7f6b      	ldrb	r3, [r5, #29]
    f5b8:	2b03      	cmp	r3, #3
    f5ba:	f47f abce 	bne.w	ed5a <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
    f5be:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	f2c0 828c 	blt.w	fae0 <ull_conn_rx+0xe84>
			if ((conn->llcp_phy.ack !=
    f5c8:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
    f5cc:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
    f5d0:	4281      	cmp	r1, r0
    f5d2:	d007      	beq.n	f5e4 <ull_conn_rx+0x988>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    f5d4:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
    f5d8:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
    f5dc:	3a01      	subs	r2, #1
    f5de:	2a02      	cmp	r2, #2
    f5e0:	f240 83de 	bls.w	fda0 <ull_conn_rx+0x1144>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    f5e4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    f5e8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    f5ec:	1a9b      	subs	r3, r3, r2
    f5ee:	f003 0303 	and.w	r3, r3, #3
    f5f2:	2b02      	cmp	r3, #2
    f5f4:	f000 8367 	beq.w	fcc6 <ull_conn_rx+0x106a>
				     LLCP_ENCRYPTION)) ||
    f5f8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    f5fc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    f600:	429a      	cmp	r2, r3
    f602:	f000 8382 	beq.w	fd0a <ull_conn_rx+0x10ae>
				nack = reject_ext_ind_send(conn, *rx,
    f606:	232a      	movs	r3, #42	; 0x2a
    f608:	2216      	movs	r2, #22
    f60a:	e536      	b.n	f07a <ull_conn_rx+0x41e>
    f60c:	20002294 	.word	0x20002294
    f610:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    f614:	7f6b      	ldrb	r3, [r5, #29]
    f616:	2b01      	cmp	r3, #1
    f618:	f47f ab9f 	bne.w	ed5a <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
    f61c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f620:	2b00      	cmp	r3, #0
    f622:	f2c0 80e3 	blt.w	f7ec <ull_conn_rx+0xb90>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f626:	48d0      	ldr	r0, [pc, #832]	; (f968 <ull_conn_rx+0xd0c>)
    f628:	f7f9 fb14 	bl	8c54 <mem_acquire>
		if (!tx) {
    f62c:	2800      	cmp	r0, #0
    f62e:	f000 80bd 	beq.w	f7ac <ull_conn_rx+0xb50>
	conn->llcp_enc.pause_rx = 1U;
    f632:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
    f636:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
    f63a:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
    f63e:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
    f642:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f646:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
    f648:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f64c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f64e:	7142      	strb	r2, [r0, #5]
    f650:	e63f      	b.n	f2d2 <ull_conn_rx+0x676>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    f652:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    f656:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    f65a:	4293      	cmp	r3, r2
    f65c:	f43f ab4a 	beq.w	ecf4 <ull_conn_rx+0x98>
	conn->procedure_expire = 0U;
    f660:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f662:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
    f664:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
    f668:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f66c:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    f66e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    f672:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    f676:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f678:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    f67a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f67e:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    f680:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    f684:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    f686:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    f688:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
    f68a:	4618      	mov	r0, r3
    f68c:	f7ff bb35 	b.w	ecfa <ull_conn_rx+0x9e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    f690:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    f694:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    f698:	429a      	cmp	r2, r3
    f69a:	f43f ab2b 	beq.w	ecf4 <ull_conn_rx+0x98>
	if (!lll->role && (rej_ext_ind->error_code ==
    f69e:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
    f6a2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    f6a6:	2900      	cmp	r1, #0
    f6a8:	f2c0 8591 	blt.w	101ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cf>
    f6ac:	2a1a      	cmp	r2, #26
    f6ae:	f000 8620 	beq.w	102f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f3>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    f6b2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    f6b6:	f002 010f 	and.w	r1, r2, #15
    f6ba:	2904      	cmp	r1, #4
    f6bc:	d106      	bne.n	f6cc <ull_conn_rx+0xa70>
	conn_upd_curr = NULL;
    f6be:	49ab      	ldr	r1, [pc, #684]	; (f96c <ull_conn_rx+0xd10>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f6c0:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
    f6c4:	2300      	movs	r3, #0
    f6c6:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
    f6c8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
    f6cc:	06d2      	lsls	r2, r2, #27
    f6ce:	f57f ab11 	bpl.w	ecf4 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f6d2:	2319      	movs	r3, #25
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    f6d4:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    f6d8:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    f6da:	f040 8472 	bne.w	ffc2 <ull_conn_rx+0x1366>
	cu->status = rej_ext_ind->error_code;
    f6de:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    f6e2:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
    f6e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
    f6e6:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
    f6ea:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    f6ec:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
    f6ee:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
    f6f0:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
    f6f4:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
    f6f8:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
    f6fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f6fe:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
    f702:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
    f704:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
    f706:	f7ff baf8 	b.w	ecfa <ull_conn_rx+0x9e>
		if ((conn->llcp_ack != conn->llcp_req) &&
    f70a:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    f70e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    f712:	428b      	cmp	r3, r1
    f714:	f43f aaee 	beq.w	ecf4 <ull_conn_rx+0x98>
    f718:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    f71c:	2b03      	cmp	r3, #3
    f71e:	f47f aae9 	bne.w	ecf4 <ull_conn_rx+0x98>
	conn->llcp_enc.pause_rx = 0U;
    f722:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
    f726:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
    f72a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    f72c:	f022 0203 	bic.w	r2, r2, #3
    f730:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
    f734:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    f738:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    f73c:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    f740:	210d      	movs	r1, #13
    f742:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
    f744:	4618      	mov	r0, r3
    f746:	f7ff bad8 	b.w	ecfa <ull_conn_rx+0x9e>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    f74a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    f74e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    f752:	428b      	cmp	r3, r1
    f754:	f43f aace 	beq.w	ecf4 <ull_conn_rx+0x98>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    f758:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    f75c:	2a23      	cmp	r2, #35	; 0x23
    f75e:	d012      	beq.n	f786 <ull_conn_rx+0xb2a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f760:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    f764:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f768:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
    f76c:	f36f 0100 	bfc	r1, #0, #1
    f770:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
    f774:	2100      	movs	r1, #0
    f776:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    f77a:	f3c3 0102 	ubfx	r1, r3, #0, #3
    f77e:	f361 1306 	bfi	r3, r1, #4, #3
    f782:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
    f786:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    f78a:	0759      	lsls	r1, r3, #29
    f78c:	f57f aab2 	bpl.w	ecf4 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f790:	231d      	movs	r3, #29
    f792:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    f794:	772a      	strb	r2, [r5, #28]
    f796:	e4ae      	b.n	f0f6 <ull_conn_rx+0x49a>
			tx->next = conn->tx_head;
    f798:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    f79a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    f79e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    f7a2:	2a00      	cmp	r2, #0
    f7a4:	f47f aaa6 	bne.w	ecf4 <ull_conn_rx+0x98>
    f7a8:	f7ff bb10 	b.w	edcc <ull_conn_rx+0x170>
		*err = -ENOBUFS;
    f7ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f7b0:	f7ff baa3 	b.w	ecfa <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    f7b4:	7f6b      	ldrb	r3, [r5, #29]
    f7b6:	2b01      	cmp	r3, #1
    f7b8:	f47f aacf 	bne.w	ed5a <ull_conn_rx+0xfe>
    f7bc:	e733      	b.n	f626 <ull_conn_rx+0x9ca>
			conn->tx_data = conn->tx_data->next;
    f7be:	6813      	ldr	r3, [r2, #0]
    f7c0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f7c4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    f7c8:	2b00      	cmp	r3, #0
    f7ca:	f47f aaf5 	bne.w	edb8 <ull_conn_rx+0x15c>
			tx->next = conn->tx_head->next;
    f7ce:	6813      	ldr	r3, [r2, #0]
    f7d0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    f7d2:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    f7d4:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    f7d6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    f7da:	2a00      	cmp	r2, #0
    f7dc:	f47f aa8a 	bne.w	ecf4 <ull_conn_rx+0x98>
    f7e0:	f7ff baf4 	b.w	edcc <ull_conn_rx+0x170>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    f7e4:	7f6b      	ldrb	r3, [r5, #29]
    f7e6:	2b01      	cmp	r3, #1
    f7e8:	f47f aab7 	bne.w	ed5a <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
    f7ec:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    f7f0:	f36f 1304 	bfc	r3, #4, #1
    f7f4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
    f7f8:	f7ff ba7c 	b.w	ecf4 <ull_conn_rx+0x98>
		if (!conn->lll.role) {
    f7fc:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
    f800:	f894 6184 	ldrb.w	r6, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
    f804:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
    f808:	2f00      	cmp	r7, #0
    f80a:	f2c0 80b1 	blt.w	f970 <ull_conn_rx+0xd14>
			if ((conn->llcp_conn_param.req !=
    f80e:	42b1      	cmp	r1, r6
    f810:	d00a      	beq.n	f828 <ull_conn_rx+0xbcc>
			    ((conn->llcp_conn_param.state ==
    f812:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
    f816:	f016 0f0b 	tst.w	r6, #11
    f81a:	f000 825e 	beq.w	fcda <ull_conn_rx+0x107e>
			      LLCP_CPR_STATE_RSP_WAIT) ||
    f81e:	f006 060f 	and.w	r6, r6, #15
    f822:	2e06      	cmp	r6, #6
    f824:	f000 8259 	beq.w	fcda <ull_conn_rx+0x107e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    f828:	f894 60e4 	ldrb.w	r6, [r4, #228]	; 0xe4
    f82c:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
    f830:	1bf6      	subs	r6, r6, r7
    f832:	f006 0603 	and.w	r6, r6, #3
    f836:	2e02      	cmp	r6, #2
    f838:	f000 83d2 	beq.w	ffe0 <ull_conn_rx+0x1384>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    f83c:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
    f840:	f894 61bd 	ldrb.w	r6, [r4, #445]	; 0x1bd
    f844:	42b7      	cmp	r7, r6
    f846:	f000 83e5 	beq.w	10014 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15>
				nack = reject_ext_ind_send(conn, *rx,
    f84a:	232a      	movs	r3, #42	; 0x2a
    f84c:	e414      	b.n	f078 <ull_conn_rx+0x41c>
		if (!conn->tx_ctrl) {
    f84e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    f852:	2a00      	cmp	r2, #0
    f854:	f47f ad5b 	bne.w	f30e <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head;
    f858:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    f85a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    f85e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    f862:	e55b      	b.n	f31c <ull_conn_rx+0x6c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f864:	7913      	ldrb	r3, [r2, #4]
    f866:	f003 0303 	and.w	r3, r3, #3
    f86a:	2b03      	cmp	r3, #3
    f86c:	f000 82ce 	beq.w	fe0c <ull_conn_rx+0x11b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f870:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    f874:	f7ff baa2 	b.w	edbc <ull_conn_rx+0x160>
	if (conn->common.txn_lock) {
    f878:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f87c:	079b      	lsls	r3, r3, #30
    f87e:	f53f aa39 	bmi.w	ecf4 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f882:	4839      	ldr	r0, [pc, #228]	; (f968 <ull_conn_rx+0xd0c>)
    f884:	f7f9 f9e6 	bl	8c54 <mem_acquire>
	if (!tx) {
    f888:	4603      	mov	r3, r0
    f88a:	2800      	cmp	r0, #0
    f88c:	d08e      	beq.n	f7ac <ull_conn_rx+0xb50>
	conn->common.txn_lock = 1U;
    f88e:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    f892:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
    f896:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
    f89a:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
    f89e:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
    f8a2:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
    f8a6:	f042 0202 	orr.w	r2, r2, #2
    f8aa:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    f8ae:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
    f8b2:	428a      	cmp	r2, r1
    f8b4:	f040 855b 	bne.w	1036e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x36f>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    f8b8:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    f8ba:	291a      	cmp	r1, #26
    f8bc:	f240 8223 	bls.w	fd06 <ull_conn_rx+0x10aa>
			eff_tx_octets = MIN(max_rx_octets,
    f8c0:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
    f8c4:	4281      	cmp	r1, r0
    f8c6:	bf28      	it	cs
    f8c8:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    f8ca:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    f8cc:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    f8d0:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
    f8d2:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
    f8d4:	bf34      	ite	cc
    f8d6:	46de      	movcc	lr, fp
    f8d8:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    f8dc:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
    f8e0:	bf34      	ite	cc
    f8e2:	4640      	movcc	r0, r8
    f8e4:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    f8e8:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    f8ec:	bf34      	ite	cc
    f8ee:	46cc      	movcc	ip, r9
    f8f0:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    f8f4:	45de      	cmp	lr, fp
    f8f6:	f000 831f 	beq.w	ff38 <ull_conn_rx+0x12dc>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    f8fa:	3a01      	subs	r2, #1
    f8fc:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
    f900:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
    f904:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
    f908:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
    f90c:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
    f910:	2b00      	cmp	r3, #0
    f912:	f000 836b 	beq.w	ffec <ull_conn_rx+0x1390>
				conn->llcp_length.state =
    f916:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    f91a:	2505      	movs	r5, #5
    f91c:	f365 0202 	bfi	r2, r5, #0, #3
    f920:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
    f924:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    f928:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
    f92a:	6832      	ldr	r2, [r6, #0]
    f92c:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
    f92e:	6832      	ldr	r2, [r6, #0]
    f930:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
    f934:	2200      	movs	r2, #0
    f936:	6032      	str	r2, [r6, #0]
	if (tx) {
    f938:	2b00      	cmp	r3, #0
    f93a:	f43f a9dd 	beq.w	ecf8 <ull_conn_rx+0x9c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f93e:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    f940:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f942:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
    f946:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    f948:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f94a:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f94c:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    f94e:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    f950:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    f954:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
    f958:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f95a:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f95c:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    f95e:	f7fe f909 	bl	db74 <ctrl_tx_sec_enqueue>
	return 0;
    f962:	2000      	movs	r0, #0
}
    f964:	f7ff b9c9 	b.w	ecfa <ull_conn_rx+0x9e>
    f968:	20002294 	.word	0x20002294
    f96c:	200021dc 	.word	0x200021dc
		} else if ((conn->llcp_conn_param.req ==
    f970:	42b1      	cmp	r1, r6
    f972:	d005      	beq.n	f980 <ull_conn_rx+0xd24>
			    conn->llcp_conn_param.ack) ||
    f974:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    f978:	f012 0f0b 	tst.w	r2, #11
    f97c:	f47f a9ba 	bne.w	ecf4 <ull_conn_rx+0x98>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    f980:	f8b5 a020 	ldrh.w	sl, [r5, #32]
    f984:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    f988:	2a05      	cmp	r2, #5
    f98a:	f240 80a6 	bls.w	fada <ull_conn_rx+0xe7e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    f98e:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
    f992:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    f996:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
    f99a:	f200 809e 	bhi.w	fada <ull_conn_rx+0xe7e>
			    (interval_max > 3200) ||
    f99e:	42b2      	cmp	r2, r6
    f9a0:	f200 809b 	bhi.w	fada <ull_conn_rx+0xe7e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    f9a4:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
    f9a8:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
    f9ac:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    f9b0:	f080 8093 	bcs.w	fada <ull_conn_rx+0xe7e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    f9b4:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
    f9b8:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
    f9bc:	f1a2 070a 	sub.w	r7, r2, #10
    f9c0:	f640 4b76 	movw	fp, #3190	; 0xc76
    f9c4:	b2bf      	uxth	r7, r7
    f9c6:	455f      	cmp	r7, fp
    f9c8:	f200 8087 	bhi.w	fada <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
    f9cc:	f10c 0701 	add.w	r7, ip, #1
    f9d0:	b2bf      	uxth	r7, r7
    f9d2:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
    f9d6:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
    f9da:	d27e      	bcs.n	fada <ull_conn_rx+0xe7e>
			     ((latency + 1) * interval_max)) ||
    f9dc:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    f9e0:	455e      	cmp	r6, fp
    f9e2:	d37a      	bcc.n	fada <ull_conn_rx+0xe7e>
			conn->llcp_conn_param.interval_min = interval_min;
    f9e4:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
    f9e8:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
    f9ec:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
    f9f0:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
    f9f4:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    f9f8:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
    f9fc:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    fa00:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    fa04:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
    fa08:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
    fa0c:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    fa10:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    fa14:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
    fa18:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
    fa1c:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    fa20:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    fa24:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
    fa28:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
    fa2c:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    fa30:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    fa34:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
    fa38:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
    fa3c:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    fa40:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    fa44:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
    fa48:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
    fa4c:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    fa50:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    fa54:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
    fa58:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    fa5c:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
    fa60:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
    fa64:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
    fa68:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
    fa6a:	42be      	cmp	r6, r7
    fa6c:	f000 840b 	beq.w	10286 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x287>
				conn->llcp_conn_param.state =
    fa70:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    fa74:	2503      	movs	r5, #3
    fa76:	f365 0203 	bfi	r2, r5, #0, #4
    fa7a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
    fa7e:	3901      	subs	r1, #1
    fa80:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
    fa84:	2b00      	cmp	r3, #0
    fa86:	f47f a937 	bne.w	ecf8 <ull_conn_rx+0x9c>
		conn_upd_curr = conn;
    fa8a:	6004      	str	r4, [r0, #0]
	int nack = 0;
    fa8c:	4618      	mov	r0, r3
    fa8e:	f7ff b934 	b.w	ecfa <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    fa92:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    fa96:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    fa9a:	4293      	cmp	r3, r2
    fa9c:	f43f add9 	beq.w	f652 <ull_conn_rx+0x9f6>
		rej_ext_ind->error_code = rej_ind->error_code;
    faa0:	f895 3020 	ldrb.w	r3, [r5, #32]
    faa4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
    faa8:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    faac:	2900      	cmp	r1, #0
    faae:	f2c0 82a9 	blt.w	10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>
    fab2:	2b1a      	cmp	r3, #26
    fab4:	f000 841d 	beq.w	102f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f3>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    fab8:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    fabc:	f003 010f 	and.w	r1, r3, #15
    fac0:	2904      	cmp	r1, #4
    fac2:	d106      	bne.n	fad2 <ull_conn_rx+0xe76>
	conn_upd_curr = NULL;
    fac4:	49d9      	ldr	r1, [pc, #868]	; (fe2c <ull_conn_rx+0x11d0>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fac6:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
    faca:	2200      	movs	r2, #0
    facc:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
    face:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
    fad2:	06d8      	lsls	r0, r3, #27
    fad4:	f57f a90e 	bpl.w	ecf4 <ull_conn_rx+0x98>
    fad8:	e5fb      	b.n	f6d2 <ull_conn_rx+0xa76>
				nack = reject_ext_ind_send(conn, *rx,
    fada:	231e      	movs	r3, #30
    fadc:	f7ff bacc 	b.w	f078 <ull_conn_rx+0x41c>
	if (conn->common.txn_lock) {
    fae0:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
    fae4:	f017 0702 	ands.w	r7, r7, #2
    fae8:	f47f a904 	bne.w	ecf4 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    faec:	48d0      	ldr	r0, [pc, #832]	; (fe30 <ull_conn_rx+0x11d4>)
    faee:	f7f9 f8b1 	bl	8c54 <mem_acquire>
	if (!tx) {
    faf2:	4602      	mov	r2, r0
    faf4:	2800      	cmp	r0, #0
    faf6:	f43f ae59 	beq.w	f7ac <ull_conn_rx+0xb50>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    fafa:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
    fafe:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
    fb02:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    fb06:	2002      	movs	r0, #2
    fb08:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
    fb0c:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    fb10:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
    fb14:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
    fb18:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
    fb1c:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
    fb20:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
    fb22:	f3c3 0602 	ubfx	r6, r3, #0, #3
    fb26:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
    fb2a:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
    fb2e:	d114      	bne.n	fb5a <ull_conn_rx+0xefe>
		conn->llcp_phy.ack--;
    fb30:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
    fb32:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
    fb36:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
    fb3a:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
    fb3e:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
    fb42:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
    fb46:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
    fb4a:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
    fb4e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
    fb52:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
    fb56:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
    fb5a:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
    fb5e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
    fb62:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
    fb66:	f3c1 0c82 	ubfx	ip, r1, #2, #3
    fb6a:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
    fb6e:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    fb72:	009b      	lsls	r3, r3, #2
    fb74:	f001 0103 	and.w	r1, r1, #3
    fb78:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    fb7c:	430b      	orrs	r3, r1
    fb7e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    fb82:	2303      	movs	r3, #3
    fb84:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    fb86:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fb88:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
    fb8a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    fb8e:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    fb90:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fb92:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    fb96:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
    fb98:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fb9c:	7110      	strb	r0, [r2, #4]
	if (
    fb9e:	2b00      	cmp	r3, #0
    fba0:	f000 80a8 	beq.w	fcf4 <ull_conn_rx+0x1098>
	    !conn->llcp_enc.pause_tx &&
    fba4:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
    fba8:	0786      	lsls	r6, r0, #30
    fbaa:	f100 80a3 	bmi.w	fcf4 <ull_conn_rx+0x1098>
	    !conn->llcp_phy.pause_tx &&
    fbae:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
    fbb2:	07c0      	lsls	r0, r0, #31
    fbb4:	f100 809e 	bmi.w	fcf4 <ull_conn_rx+0x1098>
		if (conn->tx_head == conn->tx_data) {
    fbb8:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
    fbbc:	4283      	cmp	r3, r0
    fbbe:	f000 8334 	beq.w	1022a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22b>
		} else if (!conn->tx_ctrl) {
    fbc2:	2900      	cmp	r1, #0
    fbc4:	f000 8375 	beq.w	102b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b3>
	tx->next = conn->tx_ctrl_last->next;
    fbc8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    fbcc:	6819      	ldr	r1, [r3, #0]
    fbce:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    fbd0:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    fbd2:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
    fbd6:	6813      	ldr	r3, [r2, #0]
    fbd8:	2b00      	cmp	r3, #0
    fbda:	f47f a88b 	bne.w	ecf4 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
    fbde:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fbe2:	f7ff b887 	b.w	ecf4 <ull_conn_rx+0x98>
			conn->llcp_conn_param.disabled = 1U;
    fbe6:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    fbea:	f043 0320 	orr.w	r3, r3, #32
    fbee:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
    fbf2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	f2c0 81c7 	blt.w	ff8a <ull_conn_rx+0x132e>
				LL_ASSERT(conn->llcp_cu.req ==
    fbfc:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    fc00:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    fc04:	429a      	cmp	r2, r3
    fc06:	d00e      	beq.n	fc26 <ull_conn_rx+0xfca>
    fc08:	4a8a      	ldr	r2, [pc, #552]	; (fe34 <ull_conn_rx+0x11d8>)
    fc0a:	498b      	ldr	r1, [pc, #556]	; (fe38 <ull_conn_rx+0x11dc>)
    fc0c:	488b      	ldr	r0, [pc, #556]	; (fe3c <ull_conn_rx+0x11e0>)
    fc0e:	f641 43cb 	movw	r3, #7371	; 0x1ccb
    fc12:	f009 fcbe 	bl	19592 <assert_print>
    fc16:	4040      	eors	r0, r0
    fc18:	f380 8811 	msr	BASEPRI, r0
    fc1c:	f04f 0003 	mov.w	r0, #3
    fc20:	df02      	svc	2
    fc22:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
    fc26:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    fc2a:	2106      	movs	r1, #6
    fc2c:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
    fc30:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
    fc32:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
    fc34:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
    fc38:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fc3c:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
    fc3e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    fc42:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    fc46:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    fc4a:	00db      	lsls	r3, r3, #3
    fc4c:	f022 020f 	bic.w	r2, r2, #15
    fc50:	430b      	orrs	r3, r1
    fc52:	4313      	orrs	r3, r2
    fc54:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
    fc58:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
    fc5c:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
    fc60:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
    fc64:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
    fc66:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
    fc6a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
    fc6e:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
    fc72:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fc76:	7129      	strb	r1, [r5, #4]
				break;
    fc78:	f7ff b83f 	b.w	ecfa <ull_conn_rx+0x9e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    fc7c:	486c      	ldr	r0, [pc, #432]	; (fe30 <ull_conn_rx+0x11d4>)
    fc7e:	f7f8 ffe9 	bl	8c54 <mem_acquire>
		if (!tx) {
    fc82:	4601      	mov	r1, r0
    fc84:	2800      	cmp	r0, #0
    fc86:	f43f ad91 	beq.w	f7ac <ull_conn_rx+0xb50>
		conn->llcp_version.tx = 1U;
    fc8a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    fc8e:	f043 0301 	orr.w	r3, r3, #1
    fc92:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    fc96:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
    fc98:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    fc9a:	220c      	movs	r2, #12
    fc9c:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    fc9e:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    fca0:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    fca4:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    fca8:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    fcaa:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
    fcac:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    fcb0:	2205      	movs	r2, #5
		v->sub_version_number =
    fcb2:	72c3      	strb	r3, [r0, #11]
    fcb4:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    fcb6:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    fcb8:	4620      	mov	r0, r4
    fcba:	f7fd ff5b 	bl	db74 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fcbe:	2301      	movs	r3, #1
    fcc0:	712b      	strb	r3, [r5, #4]
    fcc2:	f7ff ba37 	b.w	f134 <ull_conn_rx+0x4d8>
				      0x03) == 0x02) &&
    fcc6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    fcca:	2b03      	cmp	r3, #3
    fccc:	f47f ac9b 	bne.w	f606 <ull_conn_rx+0x9aa>
    fcd0:	e492      	b.n	f5f8 <ull_conn_rx+0x99c>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fcd2:	712f      	strb	r7, [r5, #4]
		*err = 0U;
    fcd4:	2000      	movs	r0, #0
    fcd6:	f7ff b810 	b.w	ecfa <ull_conn_rx+0x9e>
				nack = reject_ext_ind_send(conn, *rx,
    fcda:	2323      	movs	r3, #35	; 0x23
    fcdc:	f7ff b9cc 	b.w	f078 <ull_conn_rx+0x41c>
			conn->llcp_length.disabled = 1U;
    fce0:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
    fce4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
    fce8:	f043 0308 	orr.w	r3, r3, #8
    fcec:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
    fcf0:	f7ff b9a6 	b.w	f040 <ull_conn_rx+0x3e4>
		if (!conn->tx_ctrl) {
    fcf4:	2900      	cmp	r1, #0
    fcf6:	f47f af67 	bne.w	fbc8 <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head;
    fcfa:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    fcfc:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    fd00:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
    fd04:	e767      	b.n	fbd6 <ull_conn_rx+0xf7a>
    fd06:	4651      	mov	r1, sl
    fd08:	e5df      	b.n	f8ca <ull_conn_rx+0xc6e>
				conn->llcp_phy.state =
    fd0a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
    fd0e:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
    fd10:	f043 0303 	orr.w	r3, r3, #3
    fd14:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
    fd18:	d111      	bne.n	fd3e <ull_conn_rx+0x10e2>
					conn->llcp_phy.tx =
    fd1a:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
    fd1e:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
    fd22:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
    fd24:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
    fd28:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
    fd2c:	f240 43fc 	movw	r3, #1276	; 0x4fc
    fd30:	f022 0204 	bic.w	r2, r2, #4
    fd34:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    fd38:	4313      	orrs	r3, r2
    fd3a:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
    fd3e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    fd42:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
    fd46:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
    fd4a:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    fd4e:	f003 0203 	and.w	r2, r3, #3
    fd52:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    fd56:	4003      	ands	r3, r0
    fd58:	009b      	lsls	r3, r3, #2
    fd5a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    fd5e:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    fd60:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    fd64:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    fd68:	d002      	beq.n	fd70 <ull_conn_rx+0x1114>
    fd6a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    fd6e:	d105      	bne.n	fd7c <ull_conn_rx+0x1120>
					conn->llcp_phy.tx = 0;
    fd70:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    fd74:	f003 0303 	and.w	r3, r3, #3
    fd78:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
    fd7c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fd80:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
    fd82:	4313      	orrs	r3, r2
    fd84:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
    fd88:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fd8a:	712a      	strb	r2, [r5, #4]
    fd8c:	f7fe bfb5 	b.w	ecfa <ull_conn_rx+0x9e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    fd90:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    fd94:	f36f 0301 	bfc	r3, #0, #2
    fd98:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    fd9c:	f7ff bb20 	b.w	f3e0 <ull_conn_rx+0x784>
				nack = reject_ext_ind_send(conn, *rx,
    fda0:	2323      	movs	r3, #35	; 0x23
    fda2:	2216      	movs	r2, #22
    fda4:	f7ff b969 	b.w	f07a <ull_conn_rx+0x41e>
			lll->phy_tx_time = lll->phy_tx;
    fda8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
    fdac:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
    fdb0:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
    fdb4:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    fdb8:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
    fdba:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    fdbe:	f361 1206 	bfi	r2, r1, #4, #3
    fdc2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
    fdc6:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
    fdca:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
    fdce:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    fdd2:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
    fdd4:	f000 80ec 	beq.w	ffb0 <ull_conn_rx+0x1354>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    fdd8:	221d      	movs	r2, #29
    fdda:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
    fddc:	2300      	movs	r3, #0
    fdde:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
    fde0:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
    fde2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    fde6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fdea:	77ab      	strb	r3, [r5, #30]
    fdec:	f7ff b928 	b.w	f040 <ull_conn_rx+0x3e4>
	conn->llcp_enc.pause_rx = 0U;
    fdf0:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
    fdf4:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
    fdf8:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    fdfa:	f021 0103 	bic.w	r1, r1, #3
    fdfe:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
    fe02:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    fe06:	4618      	mov	r0, r3
    fe08:	f7fe bf77 	b.w	ecfa <ull_conn_rx+0x9e>
	    ((pdu_data_tx->llctrl.opcode !=
    fe0c:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fe0e:	2b03      	cmp	r3, #3
    fe10:	f43f acdd 	beq.w	f7ce <ull_conn_rx+0xb72>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fe14:	2b0a      	cmp	r3, #10
    fe16:	f47f ad2b 	bne.w	f870 <ull_conn_rx+0xc14>
    fe1a:	e4d8      	b.n	f7ce <ull_conn_rx+0xb72>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    fe1c:	2301      	movs	r3, #1
    fe1e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
    fe20:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
    fe22:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
    fe26:	2000      	movs	r0, #0
    fe28:	f7fe bf67 	b.w	ecfa <ull_conn_rx+0x9e>
    fe2c:	200021dc 	.word	0x200021dc
    fe30:	20002294 	.word	0x20002294
    fe34:	00020140 	.word	0x00020140
    fe38:	00020274 	.word	0x00020274
    fe3c:	0001fbf4 	.word	0x0001fbf4
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    fe40:	2101      	movs	r1, #1
    fe42:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
    fe46:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    fe4a:	f7f9 f8d9 	bl	9000 <util_ones_count_get>
    fe4e:	2801      	cmp	r0, #1
    fe50:	f200 80b2 	bhi.w	ffb8 <ull_conn_rx+0x135c>
	phy = ind->p_to_c_phy;
    fe54:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    fe58:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    fe5c:	f10d 000f 	add.w	r0, sp, #15
    fe60:	2101      	movs	r1, #1
    fe62:	f7f9 f8cd 	bl	9000 <util_ones_count_get>
    fe66:	2801      	cmp	r0, #1
    fe68:	f200 80a6 	bhi.w	ffb8 <ull_conn_rx+0x135c>
	instant = sys_le16_to_cpu(ind->instant);
    fe6c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    fe6e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    fe70:	1ad3      	subs	r3, r2, r3
    fe72:	041b      	lsls	r3, r3, #16
    fe74:	f100 8288 	bmi.w	10388 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x389>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    fe78:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    fe7c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    fe80:	1a5b      	subs	r3, r3, r1
    fe82:	f003 0303 	and.w	r3, r3, #3
    fe86:	2b02      	cmp	r3, #2
    fe88:	f000 8279 	beq.w	1037e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x37f>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    fe8c:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    fe90:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    fe94:	4283      	cmp	r3, r0
    fe96:	d018      	beq.n	feca <ull_conn_rx+0x126e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    fe98:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    fe9c:	f003 0303 	and.w	r3, r3, #3
    fea0:	2b02      	cmp	r3, #2
    fea2:	d112      	bne.n	feca <ull_conn_rx+0x126e>
		conn->llcp_phy.pause_tx = 0U;
    fea4:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
    fea8:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    feac:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    feb0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
    feb4:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    feb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    febc:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
    fec0:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    fec2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
    fec6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
    feca:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
    fece:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
    fed2:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
    fed6:	009b      	lsls	r3, r3, #2
    fed8:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    fedc:	f003 031c 	and.w	r3, r3, #28
    fee0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    fee4:	f002 0202 	and.w	r2, r2, #2
    fee8:	4313      	orrs	r3, r2
    feea:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
    feee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    fef2:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
    fef4:	6833      	ldr	r3, [r6, #0]
    fef6:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    fef8:	6832      	ldr	r2, [r6, #0]
    fefa:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
    fefe:	2300      	movs	r3, #0
    ff00:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
    ff02:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
    ff06:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
    ff08:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
    ff0a:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
    ff0e:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
    ff12:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
    ff16:	f43e aef0 	beq.w	ecfa <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    ff1a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    ff1e:	f3c2 0282 	ubfx	r2, r2, #2, #3
    ff22:	f362 1106 	bfi	r1, r2, #4, #3
    ff26:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
    ff2a:	4618      	mov	r0, r3
    ff2c:	f7fe bee5 	b.w	ecfa <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ff30:	2301      	movs	r3, #1
    ff32:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
    ff34:	232a      	movs	r3, #42	; 0x2a
    ff36:	e774      	b.n	fe22 <ull_conn_rx+0x11c6>
			conn->procedure_expire = 0U;
    ff38:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    ff3a:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
    ff3c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
    ff40:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    ff44:	f000 8129 	beq.w	1019a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19b>
			conn->lll.max_rx_time = eff_rx_time;
    ff48:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	f000 811f 	beq.w	10190 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x191>
					(conn->llcp_length.req - 1);
    ff52:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
    ff54:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
    ff58:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
    ff5c:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
    ff60:	2603      	movs	r6, #3
    ff62:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
    ff66:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
    ff6a:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
    ff6e:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
    ff72:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    ff76:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    ff7a:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    ff7c:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    ff80:	84e8      	strh	r0, [r5, #38]	; 0x26
    ff82:	e4d9      	b.n	f938 <ull_conn_rx+0xcdc>
		conn_upd_curr = conn;
    ff84:	601c      	str	r4, [r3, #0]
    ff86:	f7ff b810 	b.w	efaa <ull_conn_rx+0x34e>
	conn_upd_curr = NULL;
    ff8a:	4bce      	ldr	r3, [pc, #824]	; (102c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c5>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ff8c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
    ff90:	2200      	movs	r2, #0
    ff92:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
    ff94:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    ff98:	f013 0310 	ands.w	r3, r3, #16
    ff9c:	f040 80c5 	bne.w	1012a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12b>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ffa0:	2201      	movs	r2, #1
    ffa2:	712a      	strb	r2, [r5, #4]
	int nack = 0;
    ffa4:	4618      	mov	r0, r3
				break;
    ffa6:	f7fe bea8 	b.w	ecfa <ull_conn_rx+0x9e>
	struct node_tx *tx = NULL;
    ffaa:	2300      	movs	r3, #0
    ffac:	f7fe bfc1 	b.w	ef32 <ull_conn_rx+0x2d6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ffb0:	2201      	movs	r2, #1
    ffb2:	711a      	strb	r2, [r3, #4]
    ffb4:	f7ff b844 	b.w	f040 <ull_conn_rx+0x3e4>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ffb8:	6833      	ldr	r3, [r6, #0]
    ffba:	2201      	movs	r2, #1
    ffbc:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
    ffbe:	231e      	movs	r3, #30
    ffc0:	e72f      	b.n	fe22 <ull_conn_rx+0x11c6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    ffc2:	4ac1      	ldr	r2, [pc, #772]	; (102c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c9>)
    ffc4:	49c1      	ldr	r1, [pc, #772]	; (102cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2cd>)
    ffc6:	48c2      	ldr	r0, [pc, #776]	; (102d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d1>)
    ffc8:	f241 538a 	movw	r3, #5514	; 0x158a
    ffcc:	f009 fae1 	bl	19592 <assert_print>
    ffd0:	4040      	eors	r0, r0
    ffd2:	f380 8811 	msr	BASEPRI, r0
    ffd6:	f04f 0003 	mov.w	r0, #3
    ffda:	df02      	svc	2
    ffdc:	f7ff bb7f 	b.w	f6de <ull_conn_rx+0xa82>
				      0x03) == 0x02) &&
    ffe0:	f894 60e6 	ldrb.w	r6, [r4, #230]	; 0xe6
    ffe4:	2e03      	cmp	r6, #3
    ffe6:	f47f ac30 	bne.w	f84a <ull_conn_rx+0xbee>
    ffea:	e427      	b.n	f83c <ull_conn_rx+0xbe0>
				conn->llcp_length.state =
    ffec:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
    fff0:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
    fff4:	2504      	movs	r5, #4
    fff6:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
    fffa:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
    fffe:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   10002:	e48f      	b.n	f924 <ull_conn_rx+0xcc8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   10004:	2b23      	cmp	r3, #35	; 0x23
   10006:	f43f ad57 	beq.w	fab8 <ull_conn_rx+0xe5c>
			conn->periph.ticks_to_offset =
   1000a:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   1000e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   10012:	e551      	b.n	fab8 <ull_conn_rx+0xe5c>
				uint16_t interval_min =
   10014:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   10018:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1001c:	2e05      	cmp	r6, #5
   1001e:	f67f ad5c 	bls.w	fada <ull_conn_rx+0xe7e>
				uint16_t interval_max =
   10022:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   10026:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1002a:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   1002e:	f63f ad54 	bhi.w	fada <ull_conn_rx+0xe7e>
				    (interval_max > 3200) ||
   10032:	4576      	cmp	r6, lr
   10034:	f63f ad51 	bhi.w	fada <ull_conn_rx+0xe7e>
				uint16_t latency =
   10038:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   1003a:	f8ad 6006 	strh.w	r6, [sp, #6]
   1003e:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   10040:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   10044:	f4bf ad49 	bcs.w	fada <ull_conn_rx+0xe7e>
				uint16_t timeout =
   10048:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   1004a:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   1004e:	f1ac 0a0a 	sub.w	sl, ip, #10
   10052:	f640 4b76 	movw	fp, #3190	; 0xc76
   10056:	fa1f fa8a 	uxth.w	sl, sl
   1005a:	45da      	cmp	sl, fp
   1005c:	f63f ad3d 	bhi.w	fada <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   10060:	f106 0a01 	add.w	sl, r6, #1
   10064:	fa1f fa8a 	uxth.w	sl, sl
   10068:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   1006c:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   10070:	f4bf ad33 	bcs.w	fada <ull_conn_rx+0xe7e>
				     ((latency + 1) * interval_max)) ||
   10074:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   10078:	45de      	cmp	lr, fp
   1007a:	f4ff ad2e 	bcc.w	fada <ull_conn_rx+0xe7e>
				conn->llcp_conn_param.interval_max =
   1007e:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
   10082:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   10086:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.latency =	latency;
   1008a:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   1008e:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   10092:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   10096:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   1009a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1009e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   100a2:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   100a6:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   100aa:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   100ae:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   100b2:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   100b6:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   100ba:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   100be:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   100c2:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   100c6:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   100ca:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   100ce:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   100d2:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   100d6:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   100da:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   100de:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   100e2:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   100e6:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   100ea:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   100ee:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   100f2:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   100f6:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   100fa:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   100fe:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   10102:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   10106:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   10108:	45be      	cmp	lr, r7
   1010a:	f000 809a 	beq.w	10242 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x243>
					if (conn->llcp_enc.pause_tx) {
   1010e:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   10112:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   10116:	f43f acad 	beq.w	fa74 <ull_conn_rx+0xe18>
						conn->llcp_conn_param.state =
   1011a:	2602      	movs	r6, #2
   1011c:	f366 0203 	bfi	r2, r6, #0, #4
   10120:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   10124:	2201      	movs	r2, #1
   10126:	712a      	strb	r2, [r5, #4]
   10128:	e4a9      	b.n	fa7e <ull_conn_rx+0xe22>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1012a:	2319      	movs	r3, #25
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1012c:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   10130:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   10132:	d15e      	bne.n	101f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f3>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10134:	231a      	movs	r3, #26
   10136:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   10138:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   1013a:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   1013e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   10140:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   10142:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   10146:	227d      	movs	r2, #125	; 0x7d
   10148:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1014c:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   1014e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10152:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   10156:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   10158:	f7fe bf72 	b.w	f040 <ull_conn_rx+0x3e4>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1015c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   10160:	3202      	adds	r2, #2
   10162:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   10166:	2b00      	cmp	r3, #0
   10168:	d151      	bne.n	1020e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20f>
			conn->periph.llcp_type = conn->llcp_type;
   1016a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1016e:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   10172:	f7fe be63 	b.w	ee3c <ull_conn_rx+0x1e0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10176:	6832      	ldr	r2, [r6, #0]
   10178:	201d      	movs	r0, #29
   1017a:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   1017c:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   1017e:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   10180:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   10184:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   10186:	f3c2 0302 	ubfx	r3, r2, #0, #3
   1018a:	77ab      	strb	r3, [r5, #30]
		if (err) {
   1018c:	f7fe bdb5 	b.w	ecfa <ull_conn_rx+0x9e>
				conn->lll.max_tx_octets = eff_tx_octets;
   10190:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   10194:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   10198:	e6ed      	b.n	ff76 <ull_conn_rx+0x131a>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1019a:	4540      	cmp	r0, r8
   1019c:	f47f aed4 	bne.w	ff48 <ull_conn_rx+0x12ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   101a0:	45cc      	cmp	ip, r9
   101a2:	f47f aed1 	bne.w	ff48 <ull_conn_rx+0x12ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   101a6:	6832      	ldr	r2, [r6, #0]
   101a8:	2501      	movs	r5, #1
   101aa:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   101ac:	f7ff bbc4 	b.w	f938 <ull_conn_rx+0xcdc>
			conn->tx_data = conn->tx_data->next;
   101b0:	681a      	ldr	r2, [r3, #0]
   101b2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   101b6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   101ba:	2a00      	cmp	r2, #0
   101bc:	f47f a8a7 	bne.w	f30e <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head->next;
   101c0:	681a      	ldr	r2, [r3, #0]
   101c2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   101c4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   101c6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   101ca:	f7ff b8a7 	b.w	f31c <ull_conn_rx+0x6c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   101ce:	2a23      	cmp	r2, #35	; 0x23
   101d0:	f43f aa6f 	beq.w	f6b2 <ull_conn_rx+0xa56>
			conn->periph.ticks_to_offset =
   101d4:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   101d8:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   101dc:	f7ff ba69 	b.w	f6b2 <ull_conn_rx+0xa56>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   101e0:	791a      	ldrb	r2, [r3, #4]
   101e2:	f002 0203 	and.w	r2, r2, #3
   101e6:	2a03      	cmp	r2, #3
   101e8:	d076      	beq.n	102d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d9>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   101ea:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   101ee:	f7ff b88e 	b.w	f30e <ull_conn_rx+0x6b2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   101f2:	4a35      	ldr	r2, [pc, #212]	; (102c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c9>)
   101f4:	4935      	ldr	r1, [pc, #212]	; (102cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2cd>)
   101f6:	4836      	ldr	r0, [pc, #216]	; (102d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d1>)
   101f8:	f641 43f8 	movw	r3, #7416	; 0x1cf8
   101fc:	f009 f9c9 	bl	19592 <assert_print>
   10200:	4040      	eors	r0, r0
   10202:	f380 8811 	msr	BASEPRI, r0
   10206:	f04f 0003 	mov.w	r0, #3
   1020a:	df02      	svc	2
   1020c:	e792      	b.n	10134 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x135>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1020e:	4a2e      	ldr	r2, [pc, #184]	; (102c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c9>)
   10210:	4930      	ldr	r1, [pc, #192]	; (102d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d5>)
   10212:	482f      	ldr	r0, [pc, #188]	; (102d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d1>)
   10214:	f641 2383 	movw	r3, #6787	; 0x1a83
   10218:	f009 f9bb 	bl	19592 <assert_print>
   1021c:	4040      	eors	r0, r0
   1021e:	f380 8811 	msr	BASEPRI, r0
   10222:	f04f 0003 	mov.w	r0, #3
   10226:	df02      	svc	2
   10228:	e79f      	b.n	1016a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16b>
			conn->tx_data = conn->tx_data->next;
   1022a:	6818      	ldr	r0, [r3, #0]
   1022c:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10230:	2900      	cmp	r1, #0
   10232:	f47f acc9 	bne.w	fbc8 <ull_conn_rx+0xf6c>
			tx->next = conn->tx_head->next;
   10236:	6819      	ldr	r1, [r3, #0]
   10238:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1023a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1023c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   10240:	e4c9      	b.n	fbd6 <ull_conn_rx+0xf7a>
				     lll->interval) ||
   10242:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   10246:	45b6      	cmp	lr, r6
   10248:	f47f af61 	bne.w	1010e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10f>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1024c:	f240 46e2 	movw	r6, #1250	; 0x4e2
   10250:	fb06 f707 	mul.w	r7, r6, r7
   10254:	f242 7610 	movw	r6, #10000	; 0x2710
   10258:	fb06 760c 	mla	r6, r6, ip, r7
   1025c:	3e01      	subs	r6, #1
   1025e:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   10262:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   10266:	b2b6      	uxth	r6, r6
   10268:	42b7      	cmp	r7, r6
   1026a:	f47f af50 	bne.w	1010e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10f>
				conn->llcp_conn_param.state =
   1026e:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   10272:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   10276:	f042 0201 	orr.w	r2, r2, #1
   1027a:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1027e:	2201      	movs	r2, #1
   10280:	712a      	strb	r2, [r5, #4]
   10282:	f7ff bbfc 	b.w	fa7e <ull_conn_rx+0xe22>
			     lll->interval) ||
   10286:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   10288:	4567      	cmp	r7, ip
   1028a:	f47f abf1 	bne.w	fa70 <ull_conn_rx+0xe14>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1028e:	f240 47e2 	movw	r7, #1250	; 0x4e2
   10292:	fb07 f606 	mul.w	r6, r7, r6
   10296:	f242 7710 	movw	r7, #10000	; 0x2710
   1029a:	fb07 6202 	mla	r2, r7, r2, r6
   1029e:	3a01      	subs	r2, #1
   102a0:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   102a4:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   102a8:	b292      	uxth	r2, r2
   102aa:	4296      	cmp	r6, r2
   102ac:	f47f abe0 	bne.w	fa70 <ull_conn_rx+0xe14>
   102b0:	e7dd      	b.n	1026e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x26f>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   102b2:	7919      	ldrb	r1, [r3, #4]
   102b4:	f001 0103 	and.w	r1, r1, #3
   102b8:	2903      	cmp	r1, #3
   102ba:	d014      	beq.n	102e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e7>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   102bc:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   102c0:	e482      	b.n	fbc8 <ull_conn_rx+0xf6c>
   102c2:	bf00      	nop
   102c4:	200021dc 	.word	0x200021dc
   102c8:	00020140 	.word	0x00020140
   102cc:	0001fd44 	.word	0x0001fd44
   102d0:	0001fbf4 	.word	0x0001fbf4
   102d4:	00020250 	.word	0x00020250
	    ((pdu_data_tx->llctrl.opcode !=
   102d8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   102da:	2a03      	cmp	r2, #3
   102dc:	f43f af70 	beq.w	101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   102e0:	2a0a      	cmp	r2, #10
   102e2:	d182      	bne.n	101ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1eb>
   102e4:	e76c      	b.n	101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>
	    ((pdu_data_tx->llctrl.opcode !=
   102e6:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   102e8:	2903      	cmp	r1, #3
   102ea:	d0a4      	beq.n	10236 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x237>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   102ec:	290a      	cmp	r1, #10
   102ee:	d1e5      	bne.n	102bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2bd>
   102f0:	e7a1      	b.n	10236 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x237>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   102f2:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   102f6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   102fa:	429a      	cmp	r2, r3
   102fc:	d00e      	beq.n	1031c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31d>
   102fe:	4a25      	ldr	r2, [pc, #148]	; (10394 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x395>)
   10300:	4925      	ldr	r1, [pc, #148]	; (10398 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x399>)
   10302:	4826      	ldr	r0, [pc, #152]	; (1039c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39d>)
   10304:	f241 5359 	movw	r3, #5465	; 0x1559
   10308:	f009 f943 	bl	19592 <assert_print>
   1030c:	4040      	eors	r0, r0
   1030e:	f380 8811 	msr	BASEPRI, r0
   10312:	f04f 0003 	mov.w	r0, #3
   10316:	df02      	svc	2
   10318:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1031c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   10320:	2106      	movs	r1, #6
   10322:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   10326:	3b01      	subs	r3, #1
   10328:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1032c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   10330:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10334:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   10338:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1033a:	00db      	lsls	r3, r3, #3
   1033c:	430b      	orrs	r3, r1
   1033e:	f022 020f 	bic.w	r2, r2, #15
   10342:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   10344:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   10348:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1034c:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10350:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   10354:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   10356:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   1035a:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1035e:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   10362:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   10366:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   1036a:	f7fe bcc3 	b.w	ecf4 <ull_conn_rx+0x98>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1036e:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   10372:	f011 0f06 	tst.w	r1, #6
   10376:	f43f aa9f 	beq.w	f8b8 <ull_conn_rx+0xc5c>
   1037a:	f7fe bdd3 	b.w	ef24 <ull_conn_rx+0x2c8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1037e:	6833      	ldr	r3, [r6, #0]
   10380:	2201      	movs	r2, #1
   10382:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   10384:	232a      	movs	r3, #42	; 0x2a
   10386:	e54c      	b.n	fe22 <ull_conn_rx+0x11c6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10388:	6833      	ldr	r3, [r6, #0]
   1038a:	2201      	movs	r2, #1
   1038c:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   1038e:	2328      	movs	r3, #40	; 0x28
   10390:	e547      	b.n	fe22 <ull_conn_rx+0x11c6>
   10392:	bf00      	nop
   10394:	00020140 	.word	0x00020140
   10398:	00020274 	.word	0x00020274
   1039c:	0001fbf4 	.word	0x0001fbf4

000103a0 <ull_conn_llcp>:
{
   103a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   103a4:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   103a6:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   103aa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   103ae:	4298      	cmp	r0, r3
{
   103b0:	460d      	mov	r5, r1
   103b2:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   103b4:	d030      	beq.n	10418 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   103b6:	1a1b      	subs	r3, r3, r0
   103b8:	f003 0303 	and.w	r3, r3, #3
   103bc:	2b02      	cmp	r3, #2
   103be:	d010      	beq.n	103e2 <ull_conn_llcp+0x42>
   103c0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   103c4:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   103c6:	f1bc 0f00 	cmp.w	ip, #0
   103ca:	db4e      	blt.n	1046a <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   103cc:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   103d0:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   103d4:	1a9b      	subs	r3, r3, r2
   103d6:	b2db      	uxtb	r3, r3
   103d8:	2b01      	cmp	r3, #1
   103da:	d05f      	beq.n	1049c <ull_conn_llcp+0xfc>
	return 0;
   103dc:	2000      	movs	r0, #0
}
   103de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   103e2:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   103e6:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   103ea:	429a      	cmp	r2, r3
   103ec:	d006      	beq.n	103fc <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   103ee:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   103f2:	f003 0306 	and.w	r3, r3, #6
   103f6:	2b04      	cmp	r3, #4
   103f8:	f000 81f4 	beq.w	107e4 <ull_conn_llcp+0x444>
		switch (conn->llcp_type) {
   103fc:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   10400:	1e7b      	subs	r3, r7, #1
   10402:	2b05      	cmp	r3, #5
   10404:	f200 81d8 	bhi.w	107b8 <ull_conn_llcp+0x418>
   10408:	e8df f013 	tbh	[pc, r3, lsl #1]
   1040c:	01720024 	.word	0x01720024
   10410:	01d600eb 	.word	0x01d600eb
   10414:	00a500b0 	.word	0x00a500b0
   10418:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   1041c:	2a00      	cmp	r2, #0
   1041e:	4694      	mov	ip, r2
   10420:	f2c0 81da 	blt.w	107d8 <ull_conn_llcp+0x438>
	    !conn->llcp_enc.pause_rx) {
   10424:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   10428:	f017 0801 	ands.w	r8, r7, #1
   1042c:	d1cb      	bne.n	103c6 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   1042e:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   10432:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   10436:	45ce      	cmp	lr, r9
   10438:	f000 8304 	beq.w	10a44 <ull_conn_llcp+0x6a4>
			conn->llcp_type = LLCP_CONN_UPD;
   1043c:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   1043e:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   10440:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   10444:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   10448:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1044c:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   10450:	429a      	cmp	r2, r3
   10452:	d1cc      	bne.n	103ee <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   10454:	462a      	mov	r2, r5
   10456:	4631      	mov	r1, r6
   10458:	4620      	mov	r0, r4
   1045a:	f7f0 fd51 	bl	f00 <event_conn_upd_prep>
   1045e:	2800      	cmp	r0, #0
   10460:	f040 81b7 	bne.w	107d2 <ull_conn_llcp+0x432>
				return -ECANCELED;
   10464:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   10468:	e7b9      	b.n	103de <ull_conn_llcp+0x3e>
   1046a:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1046e:	2900      	cmp	r1, #0
   10470:	d0ac      	beq.n	103cc <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   10472:	2902      	cmp	r1, #2
   10474:	f000 816e 	beq.w	10754 <ull_conn_llcp+0x3b4>
   10478:	2906      	cmp	r1, #6
   1047a:	d05a      	beq.n	10532 <ull_conn_llcp+0x192>
   1047c:	2901      	cmp	r1, #1
   1047e:	d061      	beq.n	10544 <ull_conn_llcp+0x1a4>
			LL_ASSERT(0);
   10480:	4ac9      	ldr	r2, [pc, #804]	; (107a8 <ull_conn_llcp+0x408>)
   10482:	49ca      	ldr	r1, [pc, #808]	; (107ac <ull_conn_llcp+0x40c>)
   10484:	48ca      	ldr	r0, [pc, #808]	; (107b0 <ull_conn_llcp+0x410>)
   10486:	f240 531d 	movw	r3, #1309	; 0x51d
   1048a:	f009 f882 	bl	19592 <assert_print>
   1048e:	4040      	eors	r0, r0
   10490:	f380 8811 	msr	BASEPRI, r0
   10494:	f04f 0003 	mov.w	r0, #3
   10498:	df02      	svc	2
			break;
   1049a:	e797      	b.n	103cc <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1049c:	48c5      	ldr	r0, [pc, #788]	; (107b4 <ull_conn_llcp+0x414>)
   1049e:	f7f8 fbd9 	bl	8c54 <mem_acquire>
		if (tx) {
   104a2:	2800      	cmp	r0, #0
   104a4:	d038      	beq.n	10518 <ull_conn_llcp+0x178>
			conn->llcp_terminate.ack--;
   104a6:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   104aa:	3b01      	subs	r3, #1
   104ac:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   104b0:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   104b2:	2202      	movs	r2, #2
   104b4:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   104b6:	f043 0303 	orr.w	r3, r3, #3
   104ba:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   104bc:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   104be:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   104c2:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   104c6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   104ca:	7202      	strb	r2, [r0, #8]
	if (
   104cc:	b1b3      	cbz	r3, 104fc <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   104ce:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   104d2:	0795      	lsls	r5, r2, #30
   104d4:	d412      	bmi.n	104fc <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   104d6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   104da:	07d2      	lsls	r2, r2, #31
   104dc:	d40e      	bmi.n	104fc <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   104de:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   104e2:	4293      	cmp	r3, r2
   104e4:	f000 8568 	beq.w	10fb8 <ull_conn_llcp+0xc18>
		} else if (!conn->tx_ctrl) {
   104e8:	b959      	cbnz	r1, 10502 <ull_conn_llcp+0x162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   104ea:	791a      	ldrb	r2, [r3, #4]
   104ec:	f002 0203 	and.w	r2, r2, #3
   104f0:	2a03      	cmp	r2, #3
   104f2:	f000 8705 	beq.w	11300 <ull_conn_llcp+0xf60>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   104f6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   104fa:	e004      	b.n	10506 <ull_conn_llcp+0x166>
		if (!conn->tx_ctrl) {
   104fc:	2900      	cmp	r1, #0
   104fe:	f000 82f5 	beq.w	10aec <ull_conn_llcp+0x74c>
	tx->next = conn->tx_ctrl_last->next;
   10502:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10506:	681a      	ldr	r2, [r3, #0]
   10508:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1050a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1050c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1050e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10512:	2b00      	cmp	r3, #0
   10514:	f000 816a 	beq.w	107ec <ull_conn_llcp+0x44c>
		if (!conn->procedure_expire) {
   10518:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1051c:	2800      	cmp	r0, #0
   1051e:	f47f af5d 	bne.w	103dc <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   10522:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   10526:	2b01      	cmp	r3, #1
   10528:	f240 82dc 	bls.w	10ae4 <ull_conn_llcp+0x744>
			conn->procedure_expire = conn->supervision_reload;
   1052c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   10530:	e754      	b.n	103dc <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   10532:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   10534:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   10536:	440a      	add	r2, r1
   10538:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1053a:	4620      	mov	r0, r4
   1053c:	b291      	uxth	r1, r2
   1053e:	f7fd fe1d 	bl	e17c <event_phy_upd_ind_prep>
		break;
   10542:	e743      	b.n	103cc <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   10544:	462a      	mov	r2, r5
   10546:	4631      	mov	r1, r6
   10548:	4620      	mov	r0, r4
   1054a:	f7f0 fcd9 	bl	f00 <event_conn_upd_prep>
   1054e:	2800      	cmp	r0, #0
   10550:	f47f af3c 	bne.w	103cc <ull_conn_llcp+0x2c>
   10554:	e786      	b.n	10464 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   10556:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   10558:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1055a:	4419      	add	r1, r3
   1055c:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1055e:	b289      	uxth	r1, r1
   10560:	4620      	mov	r0, r4
   10562:	f7fd fe0b 	bl	e17c <event_phy_upd_ind_prep>
		break;
   10566:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1056a:	e72c      	b.n	103c6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1056c:	4891      	ldr	r0, [pc, #580]	; (107b4 <ull_conn_llcp+0x414>)
   1056e:	f7f8 fb71 	bl	8c54 <mem_acquire>
	if (tx) {
   10572:	2800      	cmp	r0, #0
   10574:	f000 812d 	beq.w	107d2 <ull_conn_llcp+0x432>
		conn->llcp_ack = conn->llcp_req;
   10578:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1057c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10580:	7903      	ldrb	r3, [r0, #4]
   10582:	f043 0303 	orr.w	r3, r3, #3
   10586:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   10588:	2301      	movs	r3, #1
   1058a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1058c:	2312      	movs	r3, #18
   1058e:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   10590:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   10594:	2b00      	cmp	r3, #0
   10596:	f000 82b2 	beq.w	10afe <ull_conn_llcp+0x75e>
	    !conn->llcp_enc.pause_tx &&
   1059a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1059e:	078f      	lsls	r7, r1, #30
   105a0:	f100 82ad 	bmi.w	10afe <ull_conn_llcp+0x75e>
	    !conn->llcp_phy.pause_tx &&
   105a4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   105a8:	07c9      	lsls	r1, r1, #31
   105aa:	f100 82a8 	bmi.w	10afe <ull_conn_llcp+0x75e>
		if (conn->tx_head == conn->tx_data) {
   105ae:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   105b2:	428b      	cmp	r3, r1
   105b4:	f000 8681 	beq.w	112ba <ull_conn_llcp+0xf1a>
		} else if (!conn->tx_ctrl) {
   105b8:	2a00      	cmp	r2, #0
   105ba:	f000 86ac 	beq.w	11316 <ull_conn_llcp+0xf76>
	tx->next = conn->tx_ctrl_last->next;
   105be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   105c2:	681a      	ldr	r2, [r3, #0]
   105c4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   105c6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   105c8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   105ca:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   105ce:	2b00      	cmp	r3, #0
   105d0:	f000 83e2 	beq.w	10d98 <ull_conn_llcp+0x9f8>
		conn->procedure_expire = conn->procedure_reload;
   105d4:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   105d8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   105dc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   105e0:	e6f1      	b.n	103c6 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   105e2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   105e6:	f013 0803 	ands.w	r8, r3, #3
   105ea:	f000 8151 	beq.w	10890 <ull_conn_llcp+0x4f0>
		if (lll->role &&
   105ee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   105f2:	2b00      	cmp	r3, #0
   105f4:	f6bf aeea 	bge.w	103cc <ull_conn_llcp+0x2c>
   105f8:	f1b8 0f01 	cmp.w	r8, #1
   105fc:	f47f af35 	bne.w	1046a <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10600:	486c      	ldr	r0, [pc, #432]	; (107b4 <ull_conn_llcp+0x414>)
   10602:	f7f8 fb27 	bl	8c54 <mem_acquire>
	if (!tx) {
   10606:	4607      	mov	r7, r0
   10608:	2800      	cmp	r0, #0
   1060a:	f000 80e2 	beq.w	107d2 <ull_conn_llcp+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1060e:	7903      	ldrb	r3, [r0, #4]
   10610:	f043 0303 	orr.w	r3, r3, #3
   10614:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   10616:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1061a:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1061c:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   10620:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   10622:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   10626:	210c      	movs	r1, #12
   10628:	4640      	mov	r0, r8
   1062a:	f002 fb0d 	bl	12c48 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1062e:	4641      	mov	r1, r8
   10630:	2208      	movs	r2, #8
   10632:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   10636:	f00a f90c 	bl	1a852 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   1063a:	464a      	mov	r2, r9
   1063c:	f107 0110 	add.w	r1, r7, #16
   10640:	f104 0098 	add.w	r0, r4, #152	; 0x98
   10644:	f00a f905 	bl	1a852 <memcpy>
	    conn->tx_head &&
   10648:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1064c:	2b00      	cmp	r3, #0
   1064e:	f000 84a7 	beq.w	10fa0 <ull_conn_llcp+0xc00>
	    !conn->llcp_enc.pause_tx &&
   10652:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10656:	0791      	lsls	r1, r2, #30
   10658:	f100 84a2 	bmi.w	10fa0 <ull_conn_llcp+0xc00>
	    !conn->llcp_phy.pause_tx &&
   1065c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10660:	07d2      	lsls	r2, r2, #31
   10662:	f100 849d 	bmi.w	10fa0 <ull_conn_llcp+0xc00>
		if (conn->tx_head == conn->tx_data) {
   10666:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1066a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1066e:	428b      	cmp	r3, r1
   10670:	f000 8682 	beq.w	11378 <ull_conn_llcp+0xfd8>
		} else if (!conn->tx_ctrl) {
   10674:	2a00      	cmp	r2, #0
   10676:	f000 874a 	beq.w	1150e <ull_conn_llcp+0x116e>
	tx->next = conn->tx_ctrl_last->next;
   1067a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1067e:	681a      	ldr	r2, [r3, #0]
   10680:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   10682:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   10684:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   10686:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1068a:	2b00      	cmp	r3, #0
   1068c:	f000 85a6 	beq.w	111dc <ull_conn_llcp+0xe3c>
			rx = ll_pdu_rx_alloc();
   10690:	f7fb fefa 	bl	c488 <ll_pdu_rx_alloc>
			if (!rx) {
   10694:	4607      	mov	r7, r0
   10696:	2800      	cmp	r0, #0
   10698:	f000 809b 	beq.w	107d2 <ull_conn_llcp+0x432>
			rx->hdr.handle = conn->lll.handle;
   1069c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1069e:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   106a0:	2303      	movs	r3, #3
   106a2:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   106a4:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   106a6:	7f3b      	ldrb	r3, [r7, #28]
   106a8:	f043 0303 	orr.w	r3, r3, #3
   106ac:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   106ae:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   106b0:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   106b2:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   106b4:	f204 1169 	addw	r1, r4, #361	; 0x169
   106b8:	f107 0020 	add.w	r0, r7, #32
   106bc:	f00a f8c9 	bl	1a852 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   106c0:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   106c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   106c8:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   106cc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   106d0:	6838      	ldr	r0, [r7, #0]
   106d2:	4639      	mov	r1, r7
   106d4:	f7fb fea8 	bl	c428 <ll_rx_put>
			ll_rx_sched();
   106d8:	f7fb feb0 	bl	c43c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   106dc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   106e0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   106e4:	2202      	movs	r2, #2
   106e6:	f362 0301 	bfi	r3, r2, #0, #2
   106ea:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   106ee:	e66a      	b.n	103c6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   106f0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   106f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   106f4:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   106f6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   106fa:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   106fc:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   10700:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   10702:	d176      	bne.n	107f2 <ull_conn_llcp+0x452>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   10704:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   10708:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1070c:	1afb      	subs	r3, r7, r3
   1070e:	0418      	lsls	r0, r3, #16
   10710:	f53f ae59 	bmi.w	103c6 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   10714:	f1bc 0f00 	cmp.w	ip, #0
   10718:	f2c0 8336 	blt.w	10d88 <ull_conn_llcp+0x9e8>
			conn->llcp_ack = conn->llcp_req;
   1071c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10720:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   10724:	f104 0734 	add.w	r7, r4, #52	; 0x34
   10728:	2205      	movs	r2, #5
   1072a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1072e:	4638      	mov	r0, r7
   10730:	f00a f88f 	bl	1a852 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   10734:	2105      	movs	r1, #5
   10736:	4638      	mov	r0, r7
   10738:	f7f8 fc62 	bl	9000 <util_ones_count_get>
		lll->data_chan_count =
   1073c:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   10740:	2301      	movs	r3, #1
		lll->data_chan_count =
   10742:	f360 0c05 	bfi	ip, r0, #0, #6
   10746:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1074a:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   1074e:	fa4f fc8c 	sxtb.w	ip, ip
   10752:	e638      	b.n	103c6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   10754:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   10756:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   10758:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   1075c:	440a      	add	r2, r1
   1075e:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   10760:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   10764:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   10766:	f040 8122 	bne.w	109ae <ull_conn_llcp+0x60e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1076a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1076e:	1ab6      	subs	r6, r6, r2
   10770:	0436      	lsls	r6, r6, #16
   10772:	f53f ae2b 	bmi.w	103cc <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   10776:	f104 0534 	add.w	r5, r4, #52	; 0x34
   1077a:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
   1077c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   10780:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   10784:	4628      	mov	r0, r5
   10786:	f00a f864 	bl	1a852 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   1078a:	2105      	movs	r1, #5
   1078c:	4628      	mov	r0, r5
   1078e:	f7f8 fc37 	bl	9000 <util_ones_count_get>
		lll->data_chan_count =
   10792:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   10796:	2201      	movs	r2, #1
		lll->data_chan_count =
   10798:	f360 0305 	bfi	r3, r0, #0, #6
   1079c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   107a0:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   107a4:	e612      	b.n	103cc <ull_conn_llcp+0x2c>
   107a6:	bf00      	nop
   107a8:	00020140 	.word	0x00020140
   107ac:	0001fc54 	.word	0x0001fc54
   107b0:	0001fbf4 	.word	0x0001fbf4
   107b4:	20002294 	.word	0x20002294
			LL_ASSERT(0);
   107b8:	4ad5      	ldr	r2, [pc, #852]	; (10b10 <ull_conn_llcp+0x770>)
   107ba:	49d6      	ldr	r1, [pc, #856]	; (10b14 <ull_conn_llcp+0x774>)
   107bc:	48d6      	ldr	r0, [pc, #856]	; (10b18 <ull_conn_llcp+0x778>)
   107be:	f240 43ec 	movw	r3, #1260	; 0x4ec
   107c2:	f008 fee6 	bl	19592 <assert_print>
   107c6:	4040      	eors	r0, r0
   107c8:	f380 8811 	msr	BASEPRI, r0
   107cc:	f04f 0003 	mov.w	r0, #3
   107d0:	df02      	svc	2
			break;
   107d2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   107d6:	e5f6      	b.n	103c6 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   107d8:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   107dc:	2900      	cmp	r1, #0
   107de:	f47f ae48 	bne.w	10472 <ull_conn_llcp+0xd2>
   107e2:	e61f      	b.n	10424 <ull_conn_llcp+0x84>
				event_len_prep(conn);
   107e4:	4620      	mov	r0, r4
   107e6:	f7fd fbd3 	bl	df90 <event_len_prep>
   107ea:	e607      	b.n	103fc <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   107ec:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   107f0:	e692      	b.n	10518 <ull_conn_llcp+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   107f2:	48ca      	ldr	r0, [pc, #808]	; (10b1c <ull_conn_llcp+0x77c>)
   107f4:	f7f8 fa2e 	bl	8c54 <mem_acquire>
		if (tx) {
   107f8:	4680      	mov	r8, r0
   107fa:	2800      	cmp	r0, #0
   107fc:	d0e9      	beq.n	107d2 <ull_conn_llcp+0x432>
						      conn->lll.latency + 6;
   107fe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   10800:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   10804:	3306      	adds	r3, #6
   10806:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   10808:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1080c:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   1080e:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10812:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   10816:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1081a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1081c:	2308      	movs	r3, #8
   1081e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10820:	2301      	movs	r3, #1
   10822:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   10824:	2205      	movs	r2, #5
   10826:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1082a:	3008      	adds	r0, #8
   1082c:	f00a f811 	bl	1a852 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   10830:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   10834:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   10838:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1083c:	2b00      	cmp	r3, #0
   1083e:	f000 82ae 	beq.w	10d9e <ull_conn_llcp+0x9fe>
	    !conn->llcp_enc.pause_tx &&
   10842:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10846:	0792      	lsls	r2, r2, #30
   10848:	f100 82a9 	bmi.w	10d9e <ull_conn_llcp+0x9fe>
	    !conn->llcp_phy.pause_tx &&
   1084c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10850:	07d7      	lsls	r7, r2, #31
   10852:	f100 82a4 	bmi.w	10d9e <ull_conn_llcp+0x9fe>
		if (conn->tx_head == conn->tx_data) {
   10856:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1085a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1085e:	428b      	cmp	r3, r1
   10860:	f000 8563 	beq.w	1132a <ull_conn_llcp+0xf8a>
		} else if (!conn->tx_ctrl) {
   10864:	2a00      	cmp	r2, #0
   10866:	f000 8607 	beq.w	11478 <ull_conn_llcp+0x10d8>
	tx->next = conn->tx_ctrl_last->next;
   1086a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1086e:	681a      	ldr	r2, [r3, #0]
   10870:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   10874:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   10878:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1087c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10880:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   10884:	2b00      	cmp	r3, #0
   10886:	f47f ad9e 	bne.w	103c6 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   1088a:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   1088e:	e59a      	b.n	103c6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10890:	48a2      	ldr	r0, [pc, #648]	; (10b1c <ull_conn_llcp+0x77c>)
   10892:	f7f8 f9df 	bl	8c54 <mem_acquire>
	if (!tx) {
   10896:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1089a:	4681      	mov	r9, r0
   1089c:	2800      	cmp	r0, #0
   1089e:	f43f ad92 	beq.w	103c6 <ull_conn_llcp+0x26>
	if (!lll->role) {
   108a2:	f1bc 0f00 	cmp.w	ip, #0
   108a6:	f280 82ff 	bge.w	10ea8 <ull_conn_llcp+0xb08>
	else if (!lll->enc_rx) {
   108aa:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   108ae:	071a      	lsls	r2, r3, #28
   108b0:	f100 83fb 	bmi.w	110aa <ull_conn_llcp+0xd0a>
		if (conn->llcp.encryption.error_code) {
   108b4:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   108b8:	f1b8 0f00 	cmp.w	r8, #0
   108bc:	f040 8492 	bne.w	111e4 <ull_conn_llcp+0xe44>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   108c0:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   108c4:	463b      	mov	r3, r7
   108c6:	4642      	mov	r2, r8
   108c8:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   108cc:	f204 1071 	addw	r0, r4, #369	; 0x171
   108d0:	f004 fafc 	bl	14ecc <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   108d4:	4639      	mov	r1, r7
   108d6:	2210      	movs	r2, #16
   108d8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   108dc:	f009 ffb9 	bl	1a852 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   108e0:	2208      	movs	r2, #8
   108e2:	f104 0194 	add.w	r1, r4, #148	; 0x94
   108e6:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   108ea:	f009 ffb2 	bl	1a852 <memcpy>
			lll->ccm_rx.direction = 1U;
   108ee:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   108f2:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   108f6:	f043 0301 	orr.w	r3, r3, #1
   108fa:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   108fe:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   10902:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   10906:	f368 0300 	bfi	r3, r8, #0, #1
   1090a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   1090e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   10912:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   10916:	f043 0308 	orr.w	r3, r3, #8
   1091a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1091e:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   10922:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10926:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   1092a:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   1092e:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   10932:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   10936:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1093a:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1093e:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   10942:	2301      	movs	r3, #1
   10944:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10948:	2305      	movs	r3, #5
   1094a:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   1094e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   10952:	2b00      	cmp	r3, #0
   10954:	f000 8357 	beq.w	11006 <ull_conn_llcp+0xc66>
	    !conn->llcp_enc.pause_tx &&
   10958:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1095c:	0797      	lsls	r7, r2, #30
   1095e:	f100 8352 	bmi.w	11006 <ull_conn_llcp+0xc66>
	    !conn->llcp_phy.pause_tx &&
   10962:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10966:	07d0      	lsls	r0, r2, #31
   10968:	f100 834d 	bmi.w	11006 <ull_conn_llcp+0xc66>
		if (conn->tx_head == conn->tx_data) {
   1096c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10970:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10974:	428b      	cmp	r3, r1
   10976:	f000 85db 	beq.w	11530 <ull_conn_llcp+0x1190>
		} else if (!conn->tx_ctrl) {
   1097a:	2a00      	cmp	r2, #0
   1097c:	f000 86d3 	beq.w	11726 <ull_conn_llcp+0x1386>
	tx->next = conn->tx_ctrl_last->next;
   10980:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10984:	681a      	ldr	r2, [r3, #0]
   10986:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1098a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1098e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10992:	f8d9 3000 	ldr.w	r3, [r9]
   10996:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1099a:	2b00      	cmp	r3, #0
   1099c:	f000 82f3 	beq.w	10f86 <ull_conn_llcp+0xbe6>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   109a0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   109a4:	f043 0303 	orr.w	r3, r3, #3
   109a8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   109ac:	e50b      	b.n	103c6 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   109ae:	485b      	ldr	r0, [pc, #364]	; (10b1c <ull_conn_llcp+0x77c>)
   109b0:	f7f8 f950 	bl	8c54 <mem_acquire>
		if (tx) {
   109b4:	4605      	mov	r5, r0
   109b6:	2800      	cmp	r0, #0
   109b8:	f43f ad08 	beq.w	103cc <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   109bc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   109be:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109c2:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   109c4:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
   109c6:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   109ca:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
   109cc:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   109d0:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109d4:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   109d8:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
   109da:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109dc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   109de:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   109e0:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   109e2:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   109e6:	2205      	movs	r2, #5
   109e8:	3008      	adds	r0, #8
   109ea:	f009 ff32 	bl	1a852 <memcpy>
	    conn->tx_head &&
   109ee:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   109f2:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   109f6:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   109fa:	2b00      	cmp	r3, #0
   109fc:	f000 81db 	beq.w	10db6 <ull_conn_llcp+0xa16>
	    !conn->llcp_enc.pause_tx &&
   10a00:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10a04:	0792      	lsls	r2, r2, #30
   10a06:	f100 81d6 	bmi.w	10db6 <ull_conn_llcp+0xa16>
	    !conn->llcp_phy.pause_tx &&
   10a0a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10a0e:	07d7      	lsls	r7, r2, #31
   10a10:	f100 81d1 	bmi.w	10db6 <ull_conn_llcp+0xa16>
		if (conn->tx_head == conn->tx_data) {
   10a14:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10a18:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10a1c:	428b      	cmp	r3, r1
   10a1e:	f000 8495 	beq.w	1134c <ull_conn_llcp+0xfac>
		} else if (!conn->tx_ctrl) {
   10a22:	2a00      	cmp	r2, #0
   10a24:	f000 85a1 	beq.w	1156a <ull_conn_llcp+0x11ca>
	tx->next = conn->tx_ctrl_last->next;
   10a28:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10a2c:	681a      	ldr	r2, [r3, #0]
   10a2e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   10a30:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   10a32:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   10a34:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10a38:	2b00      	cmp	r3, #0
   10a3a:	f47f acc7 	bne.w	103cc <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   10a3e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   10a42:	e4c3      	b.n	103cc <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   10a44:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   10a48:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   10a4c:	4571      	cmp	r1, lr
   10a4e:	d067      	beq.n	10b20 <ull_conn_llcp+0x780>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   10a50:	eba1 010e 	sub.w	r1, r1, lr
   10a54:	07c8      	lsls	r0, r1, #31
   10a56:	f57f acb6 	bpl.w	103c6 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   10a5a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10a5e:	f013 0701 	ands.w	r7, r3, #1
   10a62:	f000 81b3 	beq.w	10dcc <ull_conn_llcp+0xa2c>
		rx = ll_pdu_rx_alloc();
   10a66:	f7fb fd0f 	bl	c488 <ll_pdu_rx_alloc>
		if (!rx) {
   10a6a:	4607      	mov	r7, r0
   10a6c:	2800      	cmp	r0, #0
   10a6e:	f000 8185 	beq.w	10d7c <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   10a72:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   10a76:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   10a7a:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   10a7c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   10a7e:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   10a80:	f043 0303 	orr.w	r3, r3, #3
   10a84:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   10a86:	2309      	movs	r3, #9
   10a88:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   10a8a:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10a8c:	2303      	movs	r3, #3
   10a8e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   10a90:	4641      	mov	r1, r8
   10a92:	2208      	movs	r2, #8
   10a94:	3020      	adds	r0, #32
   10a96:	f009 fee7 	bl	1a868 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   10a9a:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   10a9e:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   10aa0:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   10aa4:	f3c2 2207 	ubfx	r2, r2, #8, #8
   10aa8:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   10aac:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   10aae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   10ab2:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   10ab6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   10aba:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   10abc:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   10ac0:	0a12      	lsrs	r2, r2, #8
   10ac2:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   10ac6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   10aca:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   10ace:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   10ad0:	6808      	ldr	r0, [r1, #0]
   10ad2:	f7fb fca9 	bl	c428 <ll_rx_put>
	ll_rx_sched();
   10ad6:	f7fb fcb1 	bl	c43c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   10ada:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10ade:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   10ae2:	e468      	b.n	103b6 <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   10ae4:	3301      	adds	r3, #1
   10ae6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   10aea:	e478      	b.n	103de <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   10aec:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10aee:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10af2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10af6:	2b00      	cmp	r3, #0
   10af8:	f47f ad0e 	bne.w	10518 <ull_conn_llcp+0x178>
   10afc:	e676      	b.n	107ec <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   10afe:	2a00      	cmp	r2, #0
   10b00:	f47f ad5d 	bne.w	105be <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head;
   10b04:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10b06:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10b0a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   10b0e:	e55e      	b.n	105ce <ull_conn_llcp+0x22e>
   10b10:	00020140 	.word	0x00020140
   10b14:	0001fc54 	.word	0x0001fc54
   10b18:	0001fbf4 	.word	0x0001fbf4
   10b1c:	20002294 	.word	0x20002294
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   10b20:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   10b24:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   10b28:	4571      	cmp	r1, lr
   10b2a:	d02f      	beq.n	10b8c <ull_conn_llcp+0x7ec>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   10b2c:	eba1 010e 	sub.w	r1, r1, lr
   10b30:	07cf      	lsls	r7, r1, #31
   10b32:	f57f ac48 	bpl.w	103c6 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   10b36:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   10b3a:	07d8      	lsls	r0, r3, #31
   10b3c:	f140 82f9 	bpl.w	11132 <ull_conn_llcp+0xd92>
	} else if (conn->llcp_version.rx) {
   10b40:	079b      	lsls	r3, r3, #30
   10b42:	f140 82e3 	bpl.w	1110c <ull_conn_llcp+0xd6c>
		rx = ll_pdu_rx_alloc();
   10b46:	f7fb fc9f 	bl	c488 <ll_pdu_rx_alloc>
		if (!rx) {
   10b4a:	4601      	mov	r1, r0
   10b4c:	2800      	cmp	r0, #0
   10b4e:	f000 8115 	beq.w	10d7c <ull_conn_llcp+0x9dc>
		conn->llcp_version.ack = conn->llcp_version.req;
   10b52:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   10b56:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   10b5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10b5c:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10b5e:	2303      	movs	r3, #3
   10b60:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   10b62:	7f03      	ldrb	r3, [r0, #28]
   10b64:	f043 0303 	orr.w	r3, r3, #3
   10b68:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   10b6a:	2306      	movs	r3, #6
   10b6c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   10b6e:	230c      	movs	r3, #12
   10b70:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   10b72:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   10b76:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   10b7a:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   10b7e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   10b82:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   10b86:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   10b8a:	e7a1      	b.n	10ad0 <ull_conn_llcp+0x730>
		} else if (conn->llcp_conn_param.ack !=
   10b8c:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   10b90:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   10b94:	458e      	cmp	lr, r1
   10b96:	f000 81f9 	beq.w	10f8c <ull_conn_llcp+0xbec>
	return conn_upd_curr && (conn_upd_curr != conn);
   10b9a:	f8df 8304 	ldr.w	r8, [pc, #772]	; 10ea0 <ull_conn_llcp+0xb00>
   10b9e:	f8d8 1000 	ldr.w	r1, [r8]
   10ba2:	2900      	cmp	r1, #0
   10ba4:	f000 8365 	beq.w	11272 <ull_conn_llcp+0xed2>
   10ba8:	428c      	cmp	r4, r1
   10baa:	f47f ac0c 	bne.w	103c6 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   10bae:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   10bb2:	f001 010f 	and.w	r1, r1, #15
   10bb6:	2906      	cmp	r1, #6
   10bb8:	f200 8671 	bhi.w	1189e <ull_conn_llcp+0x14fe>
   10bbc:	f20f 0e04 	addw	lr, pc, #4
   10bc0:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   10bc4:	00010cb7 	.word	0x00010cb7
   10bc8:	00010c31 	.word	0x00010c31
   10bcc:	00010be1 	.word	0x00010be1
   10bd0:	000103b7 	.word	0x000103b7
   10bd4:	000103b7 	.word	0x000103b7
   10bd8:	000103b7 	.word	0x000103b7
   10bdc:	000103b7 	.word	0x000103b7
	if (conn->llcp_enc.pause_tx) {
   10be0:	07bb      	lsls	r3, r7, #30
   10be2:	f53f abf0 	bmi.w	103c6 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   10be6:	f7fb fc4f 	bl	c488 <ll_pdu_rx_alloc>
	if (!rx) {
   10bea:	4601      	mov	r1, r0
   10bec:	2800      	cmp	r0, #0
   10bee:	f000 80c5 	beq.w	10d7c <ull_conn_llcp+0x9dc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   10bf2:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bf6:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   10bf8:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bfa:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   10bfe:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   10c02:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   10c04:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   10c08:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10c0a:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10c0c:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   10c0e:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   10c10:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   10c14:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   10c16:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   10c1a:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   10c1c:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   10c20:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   10c22:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   10c26:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   10c28:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   10c2a:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   10c2c:	77cb      	strb	r3, [r1, #31]
   10c2e:	e74f      	b.n	10ad0 <ull_conn_llcp+0x730>
	if (conn->llcp_conn_param.status) {
   10c30:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   10c34:	2b00      	cmp	r3, #0
   10c36:	f040 83b8 	bne.w	113aa <ull_conn_llcp+0x100a>
	if (!conn->lll.role) {
   10c3a:	2a00      	cmp	r2, #0
   10c3c:	f2c0 84e2 	blt.w	11604 <ull_conn_llcp+0x1264>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   10c40:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   10c44:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   10c48:	2106      	movs	r1, #6
   10c4a:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   10c4e:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   10c52:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   10c56:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   10c58:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   10c5c:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   10c60:	2900      	cmp	r1, #0
   10c62:	f000 8571 	beq.w	11748 <ull_conn_llcp+0x13a8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   10c66:	fbb2 f3f1 	udiv	r3, r2, r1
   10c6a:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   10c6e:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   10c72:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   10c74:	4299      	cmp	r1, r3
   10c76:	bf98      	it	ls
   10c78:	461a      	movls	r2, r3
   10c7a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   10c7e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   10c82:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   10c86:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   10c8a:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   10c8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   10c92:	00db      	lsls	r3, r3, #3
   10c94:	f022 020f 	bic.w	r2, r2, #15
   10c98:	f043 0302 	orr.w	r3, r3, #2
   10c9c:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   10c9e:	f109 39ff 	add.w	r9, r9, #4294967295
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   10ca2:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   10ca6:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   10caa:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   10cae:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   10cb2:	f7ff bb8b 	b.w	103cc <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10cb6:	487b      	ldr	r0, [pc, #492]	; (10ea4 <ull_conn_llcp+0xb04>)
			event_counter = lll->event_counter +
   10cb8:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   10cba:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10cbe:	f7f7 ffc9 	bl	8c54 <mem_acquire>
	if (!tx) {
   10cc2:	4602      	mov	r2, r0
   10cc4:	2800      	cmp	r0, #0
   10cc6:	d059      	beq.n	10d7c <ull_conn_llcp+0x9dc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10cc8:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   10cca:	f8c8 4000 	str.w	r4, [r8]
   10cce:	f043 0303 	orr.w	r3, r3, #3
   10cd2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   10cd4:	2318      	movs	r3, #24
   10cd6:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   10cd8:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   10cdc:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   10cde:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   10ce2:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   10ce4:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   10ce6:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   10cea:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   10cec:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   10cf0:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   10cf4:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   10cf6:	74d3      	strb	r3, [r2, #19]
   10cf8:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   10cfa:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   10cfe:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   10d00:	7553      	strb	r3, [r2, #21]
   10d02:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   10d04:	75d3      	strb	r3, [r2, #23]
   10d06:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   10d08:	7653      	strb	r3, [r2, #25]
   10d0a:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   10d0c:	76d3      	strb	r3, [r2, #27]
   10d0e:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   10d10:	7753      	strb	r3, [r2, #29]
   10d12:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
   10d14:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   10d16:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   10d1a:	200f      	movs	r0, #15
   10d1c:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   10d1e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   10d22:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   10d26:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   10d2a:	2104      	movs	r1, #4
   10d2c:	f361 0303 	bfi	r3, r1, #0, #4
   10d30:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   10d34:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   10d38:	2b00      	cmp	r3, #0
   10d3a:	f000 832b 	beq.w	11394 <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
   10d3e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   10d42:	078f      	lsls	r7, r1, #30
   10d44:	f100 8326 	bmi.w	11394 <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
   10d48:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   10d4c:	07c8      	lsls	r0, r1, #31
   10d4e:	f100 8321 	bmi.w	11394 <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
   10d52:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   10d56:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   10d58:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10d5c:	f000 8501 	beq.w	11762 <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
   10d60:	2900      	cmp	r1, #0
   10d62:	f000 857b 	beq.w	1185c <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
   10d66:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10d6a:	6819      	ldr	r1, [r3, #0]
   10d6c:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   10d6e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   10d70:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10d74:	6813      	ldr	r3, [r2, #0]
   10d76:	2b00      	cmp	r3, #0
   10d78:	f000 8376 	beq.w	11468 <ull_conn_llcp+0x10c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   10d7c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10d80:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   10d84:	f7ff bb17 	b.w	103b6 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   10d88:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	f43f acc5 	beq.w	1071c <ull_conn_llcp+0x37c>
			conn->periph.llcp_type = LLCP_NONE;
   10d92:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   10d96:	e4c5      	b.n	10724 <ull_conn_llcp+0x384>
		conn->tx_data_last = tx;
   10d98:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   10d9c:	e41a      	b.n	105d4 <ull_conn_llcp+0x234>
		if (!conn->tx_ctrl) {
   10d9e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10da2:	2a00      	cmp	r2, #0
   10da4:	f47f ad61 	bne.w	1086a <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head;
   10da8:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   10dac:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10db0:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   10db4:	e564      	b.n	10880 <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
   10db6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10dba:	2a00      	cmp	r2, #0
   10dbc:	f47f ae34 	bne.w	10a28 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head;
   10dc0:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   10dc2:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10dc6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   10dca:	e635      	b.n	10a38 <ull_conn_llcp+0x698>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10dcc:	4835      	ldr	r0, [pc, #212]	; (10ea4 <ull_conn_llcp+0xb04>)
   10dce:	f7f7 ff41 	bl	8c54 <mem_acquire>
	if (tx) {
   10dd2:	4680      	mov	r8, r0
   10dd4:	2800      	cmp	r0, #0
   10dd6:	d0d1      	beq.n	10d7c <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack--;
   10dd8:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   10ddc:	3b01      	subs	r3, #1
   10dde:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   10de2:	2309      	movs	r3, #9
   10de4:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   10de6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10dea:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   10dec:	7903      	ldrb	r3, [r0, #4]
   10dee:	f043 0303 	orr.w	r3, r3, #3
   10df2:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   10df4:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   10df8:	bfac      	ite	ge
   10dfa:	2308      	movge	r3, #8
   10dfc:	230e      	movlt	r3, #14
   10dfe:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   10e00:	4639      	mov	r1, r7
   10e02:	4410      	add	r0, r2
   10e04:	f009 fd30 	bl	1a868 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   10e08:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   10e0c:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   10e0e:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   10e12:	f3c2 2207 	ubfx	r2, r2, #8, #8
   10e16:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   10e1a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   10e1c:	f888 300c 	strb.w	r3, [r8, #12]
   10e20:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   10e24:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   10e28:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   10e2c:	0a09      	lsrs	r1, r1, #8
   10e2e:	0a12      	lsrs	r2, r2, #8
   10e30:	f888 100b 	strb.w	r1, [r8, #11]
   10e34:	f888 300d 	strb.w	r3, [r8, #13]
   10e38:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   10e3c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   10e40:	2b00      	cmp	r3, #0
   10e42:	f000 80d4 	beq.w	10fee <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
   10e46:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10e4a:	0791      	lsls	r1, r2, #30
   10e4c:	f100 80cf 	bmi.w	10fee <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
   10e50:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10e54:	07d2      	lsls	r2, r2, #31
   10e56:	f100 80ca 	bmi.w	10fee <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
   10e5a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10e5e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10e62:	428b      	cmp	r3, r1
   10e64:	f000 82f0 	beq.w	11448 <ull_conn_llcp+0x10a8>
		} else if (!conn->tx_ctrl) {
   10e68:	2a00      	cmp	r2, #0
   10e6a:	f000 83b4 	beq.w	115d6 <ull_conn_llcp+0x1236>
	tx->next = conn->tx_ctrl_last->next;
   10e6e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10e72:	681a      	ldr	r2, [r3, #0]
   10e74:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   10e78:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   10e7c:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   10e80:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10e84:	2b00      	cmp	r3, #0
   10e86:	f000 8226 	beq.w	112d6 <ull_conn_llcp+0xf36>
		conn->procedure_expire = conn->procedure_reload;
   10e8a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   10e8e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   10e92:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   10e96:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   10e9a:	f7ff ba8c 	b.w	103b6 <ull_conn_llcp+0x16>
   10e9e:	bf00      	nop
   10ea0:	200021dc 	.word	0x200021dc
   10ea4:	20002294 	.word	0x20002294
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   10ea8:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   10eac:	463b      	mov	r3, r7
   10eae:	4642      	mov	r2, r8
   10eb0:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   10eb4:	f204 1071 	addw	r0, r4, #369	; 0x171
   10eb8:	f004 f808 	bl	14ecc <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   10ebc:	4639      	mov	r1, r7
   10ebe:	2210      	movs	r2, #16
   10ec0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   10ec4:	f009 fcc5 	bl	1a852 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   10ec8:	2208      	movs	r2, #8
   10eca:	f104 0194 	add.w	r1, r4, #148	; 0x94
   10ece:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   10ed2:	f009 fcbe 	bl	1a852 <memcpy>
		lll->enc_rx = 1;
   10ed6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   10eda:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   10ede:	f023 0318 	bic.w	r3, r3, #24
   10ee2:	f043 0318 	orr.w	r3, r3, #24
   10ee6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   10eea:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   10eee:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   10ef2:	f368 0300 	bfi	r3, r8, #0, #1
   10ef6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   10efa:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   10efe:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   10f02:	f043 0301 	orr.w	r3, r3, #1
   10f06:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10f0a:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   10f0c:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   10f10:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   10f14:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   10f18:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   10f1c:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   10f20:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10f24:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10f28:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   10f2c:	2306      	movs	r3, #6
   10f2e:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   10f32:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10f36:	f042 0203 	orr.w	r2, r2, #3
   10f3a:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   10f3e:	2b00      	cmp	r3, #0
   10f40:	d04a      	beq.n	10fd8 <ull_conn_llcp+0xc38>
	    !conn->llcp_enc.pause_tx &&
   10f42:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10f46:	0790      	lsls	r0, r2, #30
   10f48:	d446      	bmi.n	10fd8 <ull_conn_llcp+0xc38>
	    !conn->llcp_phy.pause_tx &&
   10f4a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10f4e:	07d1      	lsls	r1, r2, #31
   10f50:	d442      	bmi.n	10fd8 <ull_conn_llcp+0xc38>
		if (conn->tx_head == conn->tx_data) {
   10f52:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10f56:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   10f58:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10f5c:	f000 8264 	beq.w	11428 <ull_conn_llcp+0x1088>
		} else if (!conn->tx_ctrl) {
   10f60:	2a00      	cmp	r2, #0
   10f62:	f000 83b9 	beq.w	116d8 <ull_conn_llcp+0x1338>
	tx->next = conn->tx_ctrl_last->next;
   10f66:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10f6a:	681a      	ldr	r2, [r3, #0]
   10f6c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   10f70:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   10f74:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   10f78:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10f7c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   10f80:	2b00      	cmp	r3, #0
   10f82:	f47f ad0d 	bne.w	109a0 <ull_conn_llcp+0x600>
		conn->tx_data_last = tx;
   10f86:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   10f8a:	e509      	b.n	109a0 <ull_conn_llcp+0x600>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   10f8c:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   10f90:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   10f94:	4299      	cmp	r1, r3
   10f96:	d042      	beq.n	1101e <ull_conn_llcp+0xc7e>
			event_len_prep(conn);
   10f98:	4620      	mov	r0, r4
   10f9a:	f7fc fff9 	bl	df90 <event_len_prep>
   10f9e:	e6ed      	b.n	10d7c <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
   10fa0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10fa4:	2a00      	cmp	r2, #0
   10fa6:	f47f ab68 	bne.w	1067a <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head;
   10faa:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   10fac:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10fb0:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   10fb4:	f7ff bb69 	b.w	1068a <ull_conn_llcp+0x2ea>
			conn->tx_data = conn->tx_data->next;
   10fb8:	681a      	ldr	r2, [r3, #0]
   10fba:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10fbe:	2900      	cmp	r1, #0
   10fc0:	f47f aa9f 	bne.w	10502 <ull_conn_llcp+0x162>
			tx->next = conn->tx_head->next;
   10fc4:	681a      	ldr	r2, [r3, #0]
   10fc6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   10fc8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10fca:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   10fcc:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   10fd0:	2b00      	cmp	r3, #0
   10fd2:	f47f aaa1 	bne.w	10518 <ull_conn_llcp+0x178>
   10fd6:	e409      	b.n	107ec <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
   10fd8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10fdc:	2a00      	cmp	r2, #0
   10fde:	d1c2      	bne.n	10f66 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
   10fe0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   10fe4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10fe8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   10fec:	e7c6      	b.n	10f7c <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
   10fee:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10ff2:	2a00      	cmp	r2, #0
   10ff4:	f47f af3b 	bne.w	10e6e <ull_conn_llcp+0xace>
			tx->next = conn->tx_head;
   10ff8:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   10ffc:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11000:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   11004:	e73e      	b.n	10e84 <ull_conn_llcp+0xae4>
		if (!conn->tx_ctrl) {
   11006:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1100a:	2a00      	cmp	r2, #0
   1100c:	f47f acb8 	bne.w	10980 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head;
   11010:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   11014:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   11018:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1101c:	e4b9      	b.n	10992 <ull_conn_llcp+0x5f2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1101e:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11022:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   11026:	428b      	cmp	r3, r1
   11028:	f43f a9cd 	beq.w	103c6 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   1102c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   11030:	f003 0703 	and.w	r7, r3, #3
   11034:	2f03      	cmp	r7, #3
   11036:	f000 8229 	beq.w	1148c <ull_conn_llcp+0x10ec>
   1103a:	2f00      	cmp	r7, #0
   1103c:	f47f a9c2 	bne.w	103c4 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11040:	48c9      	ldr	r0, [pc, #804]	; (11368 <ull_conn_llcp+0xfc8>)
   11042:	f7f7 fe07 	bl	8c54 <mem_acquire>
		if (!tx) {
   11046:	4601      	mov	r1, r0
   11048:	2800      	cmp	r0, #0
   1104a:	f43f ae97 	beq.w	10d7c <ull_conn_llcp+0x9dc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1104e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   11052:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   11056:	2201      	movs	r2, #1
   11058:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1105c:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   11060:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   11064:	f3c3 0782 	ubfx	r7, r3, #2, #3
   11068:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1106c:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   11070:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11074:	f360 07c3 	bfi	r7, r0, #3, #1
   11078:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1107c:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11080:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   11082:	f367 02c5 	bfi	r2, r7, #3, #3
   11086:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1108a:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   1108e:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11090:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   11094:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   11096:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11098:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   1109a:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   1109c:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   1109e:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   110a0:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   110a2:	4620      	mov	r0, r4
   110a4:	f7fc fc7e 	bl	d9a4 <ctrl_tx_pause_enqueue>
   110a8:	e6ef      	b.n	10e8a <ull_conn_llcp+0xaea>
	conn->lll.enc_tx = 1;
   110aa:	f043 0310 	orr.w	r3, r3, #16
   110ae:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   110b2:	2301      	movs	r3, #1
   110b4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   110b6:	7903      	ldrb	r3, [r0, #4]
   110b8:	f043 0303 	orr.w	r3, r3, #3
   110bc:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   110be:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   110c2:	2206      	movs	r2, #6
   110c4:	71c2      	strb	r2, [r0, #7]
	if (
   110c6:	2b00      	cmp	r3, #0
   110c8:	d07d      	beq.n	111c6 <ull_conn_llcp+0xe26>
	    !conn->llcp_enc.pause_tx &&
   110ca:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   110ce:	0791      	lsls	r1, r2, #30
   110d0:	d479      	bmi.n	111c6 <ull_conn_llcp+0xe26>
	    !conn->llcp_phy.pause_tx &&
   110d2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   110d6:	07d2      	lsls	r2, r2, #31
   110d8:	d475      	bmi.n	111c6 <ull_conn_llcp+0xe26>
		if (conn->tx_head == conn->tx_data) {
   110da:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   110de:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   110e0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   110e4:	f000 8233 	beq.w	1154e <ull_conn_llcp+0x11ae>
		} else if (!conn->tx_ctrl) {
   110e8:	2a00      	cmp	r2, #0
   110ea:	f000 8325 	beq.w	11738 <ull_conn_llcp+0x1398>
	tx->next = conn->tx_ctrl_last->next;
   110ee:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   110f2:	681a      	ldr	r2, [r3, #0]
   110f4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   110f8:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   110fc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11100:	f8d9 3000 	ldr.w	r3, [r9]
   11104:	2b00      	cmp	r3, #0
   11106:	f47f ac4b 	bne.w	109a0 <ull_conn_llcp+0x600>
   1110a:	e73c      	b.n	10f86 <ull_conn_llcp+0xbe6>
		LL_ASSERT(0);
   1110c:	4a97      	ldr	r2, [pc, #604]	; (1136c <ull_conn_llcp+0xfcc>)
   1110e:	4998      	ldr	r1, [pc, #608]	; (11370 <ull_conn_llcp+0xfd0>)
   11110:	f640 732c 	movw	r3, #3884	; 0xf2c
		LL_ASSERT(0);
   11114:	4897      	ldr	r0, [pc, #604]	; (11374 <ull_conn_llcp+0xfd4>)
   11116:	f008 fa3c 	bl	19592 <assert_print>
   1111a:	4040      	eors	r0, r0
   1111c:	f380 8811 	msr	BASEPRI, r0
   11120:	f04f 0003 	mov.w	r0, #3
   11124:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11126:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1112a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   1112e:	f7ff b942 	b.w	103b6 <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11132:	488d      	ldr	r0, [pc, #564]	; (11368 <ull_conn_llcp+0xfc8>)
   11134:	f7f7 fd8e 	bl	8c54 <mem_acquire>
		if (tx) {
   11138:	2800      	cmp	r0, #0
   1113a:	f43f ae1f 	beq.w	10d7c <ull_conn_llcp+0x9dc>
			conn->llcp_version.ack--;
   1113e:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   11142:	3b01      	subs	r3, #1
   11144:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   11148:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1114c:	f043 0301 	orr.w	r3, r3, #1
   11150:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   11154:	7903      	ldrb	r3, [r0, #4]
   11156:	f043 0303 	orr.w	r3, r3, #3
   1115a:	7103      	strb	r3, [r0, #4]
			pdu->len =
   1115c:	2306      	movs	r3, #6
   1115e:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   11160:	230c      	movs	r3, #12
   11162:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   11164:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   11166:	f06f 030e 	mvn.w	r3, #14
   1116a:	7243      	strb	r3, [r0, #9]
   1116c:	2305      	movs	r3, #5
   1116e:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   11170:	f04f 33ff 	mov.w	r3, #4294967295
   11174:	72c3      	strb	r3, [r0, #11]
   11176:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   11178:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1117c:	2b00      	cmp	r3, #0
   1117e:	f000 80b4 	beq.w	112ea <ull_conn_llcp+0xf4a>
	    !conn->llcp_enc.pause_tx &&
   11182:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   11186:	0791      	lsls	r1, r2, #30
   11188:	f100 80af 	bmi.w	112ea <ull_conn_llcp+0xf4a>
	    !conn->llcp_phy.pause_tx &&
   1118c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   11190:	07d2      	lsls	r2, r2, #31
   11192:	f100 80aa 	bmi.w	112ea <ull_conn_llcp+0xf4a>
		if (conn->tx_head == conn->tx_data) {
   11196:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1119a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1119c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   111a0:	f000 82b5 	beq.w	1170e <ull_conn_llcp+0x136e>
		} else if (!conn->tx_ctrl) {
   111a4:	2a00      	cmp	r2, #0
   111a6:	f000 82d3 	beq.w	11750 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   111aa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   111ae:	681a      	ldr	r2, [r3, #0]
   111b0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   111b2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   111b4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   111b8:	6803      	ldr	r3, [r0, #0]
   111ba:	2b00      	cmp	r3, #0
   111bc:	f47f ae65 	bne.w	10e8a <ull_conn_llcp+0xaea>
		conn->tx_data_last = tx;
   111c0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   111c4:	e661      	b.n	10e8a <ull_conn_llcp+0xaea>
		if (!conn->tx_ctrl) {
   111c6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   111ca:	2a00      	cmp	r2, #0
   111cc:	d18f      	bne.n	110ee <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head;
   111ce:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   111d2:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   111d6:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   111da:	e791      	b.n	11100 <ull_conn_llcp+0xd60>
		conn->tx_data_last = tx;
   111dc:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   111e0:	f7ff ba56 	b.w	10690 <ull_conn_llcp+0x2f0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   111e4:	7903      	ldrb	r3, [r0, #4]
   111e6:	f043 0303 	orr.w	r3, r3, #3
   111ea:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   111ec:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   111f0:	07db      	lsls	r3, r3, #31
   111f2:	d573      	bpl.n	112dc <ull_conn_llcp+0xf3c>
	    (conn->llcp_feature.features_conn &
   111f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   111f8:	0758      	lsls	r0, r3, #29
   111fa:	d56f      	bpl.n	112dc <ull_conn_llcp+0xf3c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   111fc:	2311      	movs	r3, #17
   111fe:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   11202:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   11204:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   11208:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   1120c:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   11210:	2300      	movs	r3, #0
   11212:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   11216:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1121a:	2b00      	cmp	r3, #0
   1121c:	d042      	beq.n	112a4 <ull_conn_llcp+0xf04>
	    !conn->llcp_enc.pause_tx &&
   1121e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   11222:	0791      	lsls	r1, r2, #30
   11224:	d43e      	bmi.n	112a4 <ull_conn_llcp+0xf04>
	    !conn->llcp_phy.pause_tx &&
   11226:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1122a:	07d2      	lsls	r2, r2, #31
   1122c:	d43a      	bmi.n	112a4 <ull_conn_llcp+0xf04>
		if (conn->tx_head == conn->tx_data) {
   1122e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   11232:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   11234:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   11238:	f000 81d6 	beq.w	115e8 <ull_conn_llcp+0x1248>
		} else if (!conn->tx_ctrl) {
   1123c:	2a00      	cmp	r2, #0
   1123e:	f000 82c3 	beq.w	117c8 <ull_conn_llcp+0x1428>
	tx->next = conn->tx_ctrl_last->next;
   11242:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11246:	681a      	ldr	r2, [r3, #0]
   11248:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1124c:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   11250:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11254:	f8d9 3000 	ldr.w	r3, [r9]
   11258:	2b00      	cmp	r3, #0
   1125a:	d059      	beq.n	11310 <ull_conn_llcp+0xf70>
			conn->llcp_ack = conn->llcp_req;
   1125c:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   11260:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11264:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   11268:	2900      	cmp	r1, #0
   1126a:	f43f a8af 	beq.w	103cc <ull_conn_llcp+0x2c>
   1126e:	f7ff b900 	b.w	10472 <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   11272:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   11276:	f003 030f 	and.w	r3, r3, #15
   1127a:	2b06      	cmp	r3, #6
   1127c:	f200 830f 	bhi.w	1189e <ull_conn_llcp+0x14fe>
   11280:	a101      	add	r1, pc, #4	; (adr r1, 11288 <ull_conn_llcp+0xee8>)
   11282:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11286:	bf00      	nop
   11288:	00010cb7 	.word	0x00010cb7
   1128c:	00010c31 	.word	0x00010c31
   11290:	00010be1 	.word	0x00010be1
   11294:	000103c7 	.word	0x000103c7
   11298:	000103c7 	.word	0x000103c7
   1129c:	000103c7 	.word	0x000103c7
   112a0:	000103c7 	.word	0x000103c7
		if (!conn->tx_ctrl) {
   112a4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   112a8:	2a00      	cmp	r2, #0
   112aa:	d1ca      	bne.n	11242 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head;
   112ac:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   112b0:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   112b4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   112b8:	e7cc      	b.n	11254 <ull_conn_llcp+0xeb4>
			conn->tx_data = conn->tx_data->next;
   112ba:	6819      	ldr	r1, [r3, #0]
   112bc:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   112c0:	2a00      	cmp	r2, #0
   112c2:	f47f a97c 	bne.w	105be <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head->next;
   112c6:	681a      	ldr	r2, [r3, #0]
   112c8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   112ca:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   112cc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   112ce:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   112d2:	f7ff b97c 	b.w	105ce <ull_conn_llcp+0x22e>
		conn->tx_data_last = tx;
   112d6:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   112da:	e5d6      	b.n	10e8a <ull_conn_llcp+0xaea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   112dc:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   112de:	f889 8008 	strb.w	r8, [r9, #8]
   112e2:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   112e4:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   112e8:	e790      	b.n	1120c <ull_conn_llcp+0xe6c>
		if (!conn->tx_ctrl) {
   112ea:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   112ee:	2a00      	cmp	r2, #0
   112f0:	f47f af5b 	bne.w	111aa <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head;
   112f4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   112f6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   112fa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   112fe:	e75b      	b.n	111b8 <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
   11300:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11302:	2a03      	cmp	r2, #3
   11304:	f43f ae5e 	beq.w	10fc4 <ull_conn_llcp+0xc24>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11308:	2a0a      	cmp	r2, #10
   1130a:	f47f a8f4 	bne.w	104f6 <ull_conn_llcp+0x156>
   1130e:	e659      	b.n	10fc4 <ull_conn_llcp+0xc24>
		conn->tx_data_last = tx;
   11310:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   11314:	e7a2      	b.n	1125c <ull_conn_llcp+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11316:	791a      	ldrb	r2, [r3, #4]
   11318:	f002 0203 	and.w	r2, r2, #3
   1131c:	2a03      	cmp	r2, #3
   1131e:	f000 80ff 	beq.w	11520 <ull_conn_llcp+0x1180>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11322:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   11326:	f7ff b94a 	b.w	105be <ull_conn_llcp+0x21e>
			conn->tx_data = conn->tx_data->next;
   1132a:	6819      	ldr	r1, [r3, #0]
   1132c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11330:	2a00      	cmp	r2, #0
   11332:	f47f aa9a 	bne.w	1086a <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head->next;
   11336:	681a      	ldr	r2, [r3, #0]
   11338:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1133c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   11340:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   11344:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   11348:	f7ff ba9a 	b.w	10880 <ull_conn_llcp+0x4e0>
			conn->tx_data = conn->tx_data->next;
   1134c:	6819      	ldr	r1, [r3, #0]
   1134e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11352:	2a00      	cmp	r2, #0
   11354:	f47f ab68 	bne.w	10a28 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head->next;
   11358:	681a      	ldr	r2, [r3, #0]
   1135a:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   1135c:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1135e:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   11360:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   11364:	f7ff bb68 	b.w	10a38 <ull_conn_llcp+0x698>
   11368:	20002294 	.word	0x20002294
   1136c:	00020140 	.word	0x00020140
   11370:	0001fc54 	.word	0x0001fc54
   11374:	0001fbf4 	.word	0x0001fbf4
			conn->tx_data = conn->tx_data->next;
   11378:	6819      	ldr	r1, [r3, #0]
   1137a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1137e:	2a00      	cmp	r2, #0
   11380:	f47f a97b 	bne.w	1067a <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head->next;
   11384:	681a      	ldr	r2, [r3, #0]
   11386:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   11388:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   1138a:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   1138c:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   11390:	f7ff b97b 	b.w	1068a <ull_conn_llcp+0x2ea>
		if (!conn->tx_ctrl) {
   11394:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11398:	2900      	cmp	r1, #0
   1139a:	f47f ace4 	bne.w	10d66 <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head;
   1139e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   113a0:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   113a4:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   113a8:	e4e4      	b.n	10d74 <ull_conn_llcp+0x9d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   113aa:	48ca      	ldr	r0, [pc, #808]	; (116d4 <ull_conn_llcp+0x1334>)
   113ac:	f7f7 fc52 	bl	8c54 <mem_acquire>
		if (!tx) {
   113b0:	2800      	cmp	r0, #0
   113b2:	f43f ace3 	beq.w	10d7c <ull_conn_llcp+0x9dc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   113b6:	7902      	ldrb	r2, [r0, #4]
   113b8:	f042 0203 	orr.w	r2, r2, #3
   113bc:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   113be:	2211      	movs	r2, #17
   113c0:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   113c2:	2203      	movs	r2, #3
   113c4:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   113c6:	220f      	movs	r2, #15
   113c8:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   113ca:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   113ce:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   113d0:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   113d4:	2a00      	cmp	r2, #0
   113d6:	f000 80df 	beq.w	11598 <ull_conn_llcp+0x11f8>
	    !conn->llcp_enc.pause_tx &&
   113da:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   113de:	0789      	lsls	r1, r1, #30
   113e0:	f100 80da 	bmi.w	11598 <ull_conn_llcp+0x11f8>
	    !conn->llcp_phy.pause_tx &&
   113e4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   113e8:	07cb      	lsls	r3, r1, #31
   113ea:	f100 80d5 	bmi.w	11598 <ull_conn_llcp+0x11f8>
		if (conn->tx_head == conn->tx_data) {
   113ee:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   113f2:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   113f4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   113f8:	f000 81cb 	beq.w	11792 <ull_conn_llcp+0x13f2>
		} else if (!conn->tx_ctrl) {
   113fc:	2900      	cmp	r1, #0
   113fe:	f000 81c0 	beq.w	11782 <ull_conn_llcp+0x13e2>
	tx->next = conn->tx_ctrl_last->next;
   11402:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   11406:	6811      	ldr	r1, [r2, #0]
   11408:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1140a:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   1140c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11410:	6802      	ldr	r2, [r0, #0]
   11412:	2a00      	cmp	r2, #0
   11414:	f000 81b2 	beq.w	1177c <ull_conn_llcp+0x13dc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11418:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1141c:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   11420:	2300      	movs	r3, #0
   11422:	f8c8 3000 	str.w	r3, [r8]
   11426:	e4a9      	b.n	10d7c <ull_conn_llcp+0x9dc>
			conn->tx_data = conn->tx_data->next;
   11428:	6819      	ldr	r1, [r3, #0]
   1142a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1142e:	2a00      	cmp	r2, #0
   11430:	f47f ad99 	bne.w	10f66 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
   11434:	681a      	ldr	r2, [r3, #0]
   11436:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1143a:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   1143e:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   11442:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   11446:	e599      	b.n	10f7c <ull_conn_llcp+0xbdc>
			conn->tx_data = conn->tx_data->next;
   11448:	6819      	ldr	r1, [r3, #0]
   1144a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1144e:	2a00      	cmp	r2, #0
   11450:	f47f ad0d 	bne.w	10e6e <ull_conn_llcp+0xace>
			tx->next = conn->tx_head->next;
   11454:	681a      	ldr	r2, [r3, #0]
   11456:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1145a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1145e:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   11462:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   11466:	e50d      	b.n	10e84 <ull_conn_llcp+0xae4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11468:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1146c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   11470:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   11474:	f7fe bf9f 	b.w	103b6 <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11478:	791a      	ldrb	r2, [r3, #4]
   1147a:	f002 0203 	and.w	r2, r2, #3
   1147e:	2a03      	cmp	r2, #3
   11480:	f000 813d 	beq.w	116fe <ull_conn_llcp+0x135e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11484:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   11488:	f7ff b9ef 	b.w	1086a <ull_conn_llcp+0x4ca>
		if (conn->llcp_phy.tx & PHY_2M) {
   1148c:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1148e:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   11492:	f3c3 0282 	ubfx	r2, r3, #2, #3
   11496:	f140 8093 	bpl.w	115c0 <ull_conn_llcp+0x1220>
			conn->llcp_phy.tx = PHY_2M;
   1149a:	2202      	movs	r2, #2
   1149c:	f362 0384 	bfi	r3, r2, #2, #3
   114a0:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   114a4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   114a8:	065f      	lsls	r7, r3, #25
   114aa:	ea4f 1253 	mov.w	r2, r3, lsr #5
   114ae:	d57e      	bpl.n	115ae <ull_conn_llcp+0x120e>
			conn->llcp_phy.rx = PHY_2M;
   114b0:	2202      	movs	r2, #2
   114b2:	f362 1347 	bfi	r3, r2, #5, #3
   114b6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   114ba:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   114bc:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   114c0:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   114c4:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   114c8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   114cc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   114d0:	f3c2 0182 	ubfx	r1, r2, #2, #3
   114d4:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   114d8:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   114dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   114e0:	428f      	cmp	r7, r1
   114e2:	bf08      	it	eq
   114e4:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   114e6:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   114e8:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   114ec:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   114f0:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   114f4:	bf08      	it	eq
   114f6:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   114f8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   114fc:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   11500:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   11502:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   11506:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1150a:	f7fe bf77 	b.w	103fc <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1150e:	791a      	ldrb	r2, [r3, #4]
   11510:	f002 0203 	and.w	r2, r2, #3
   11514:	2a03      	cmp	r2, #3
   11516:	d031      	beq.n	1157c <ull_conn_llcp+0x11dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11518:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1151c:	f7ff b8ad 	b.w	1067a <ull_conn_llcp+0x2da>
	    ((pdu_data_tx->llctrl.opcode !=
   11520:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11522:	2a03      	cmp	r2, #3
   11524:	f43f aecf 	beq.w	112c6 <ull_conn_llcp+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11528:	2a0a      	cmp	r2, #10
   1152a:	f47f aefa 	bne.w	11322 <ull_conn_llcp+0xf82>
   1152e:	e6ca      	b.n	112c6 <ull_conn_llcp+0xf26>
			conn->tx_data = conn->tx_data->next;
   11530:	6819      	ldr	r1, [r3, #0]
   11532:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11536:	2a00      	cmp	r2, #0
   11538:	f47f aa22 	bne.w	10980 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head->next;
   1153c:	681a      	ldr	r2, [r3, #0]
   1153e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   11542:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   11546:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1154a:	f7ff ba22 	b.w	10992 <ull_conn_llcp+0x5f2>
			conn->tx_data = conn->tx_data->next;
   1154e:	6819      	ldr	r1, [r3, #0]
   11550:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11554:	2a00      	cmp	r2, #0
   11556:	f47f adca 	bne.w	110ee <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head->next;
   1155a:	681a      	ldr	r2, [r3, #0]
   1155c:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   11560:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   11564:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   11568:	e5ca      	b.n	11100 <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1156a:	791a      	ldrb	r2, [r3, #4]
   1156c:	f002 0203 	and.w	r2, r2, #3
   11570:	2a03      	cmp	r2, #3
   11572:	d00a      	beq.n	1158a <ull_conn_llcp+0x11ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11574:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   11578:	f7ff ba56 	b.w	10a28 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   1157c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1157e:	2a03      	cmp	r2, #3
   11580:	f43f af00 	beq.w	11384 <ull_conn_llcp+0xfe4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11584:	2a0a      	cmp	r2, #10
   11586:	d1c7      	bne.n	11518 <ull_conn_llcp+0x1178>
   11588:	e6fc      	b.n	11384 <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
   1158a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1158c:	2a03      	cmp	r2, #3
   1158e:	f43f aee3 	beq.w	11358 <ull_conn_llcp+0xfb8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11592:	2a0a      	cmp	r2, #10
   11594:	d1ee      	bne.n	11574 <ull_conn_llcp+0x11d4>
   11596:	e6df      	b.n	11358 <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
   11598:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1159c:	2900      	cmp	r1, #0
   1159e:	f47f af30 	bne.w	11402 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head;
   115a2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   115a4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   115a8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   115ac:	e730      	b.n	11410 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   115ae:	07d1      	lsls	r1, r2, #31
   115b0:	f140 80fb 	bpl.w	117aa <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   115b4:	2201      	movs	r2, #1
   115b6:	f362 1347 	bfi	r3, r2, #5, #3
   115ba:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   115be:	e77c      	b.n	114ba <ull_conn_llcp+0x111a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   115c0:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   115c2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   115c6:	f140 8152 	bpl.w	1186e <ull_conn_llcp+0x14ce>
			conn->llcp_phy.tx = PHY_1M;
   115ca:	2201      	movs	r2, #1
   115cc:	f362 0384 	bfi	r3, r2, #2, #3
   115d0:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   115d4:	e766      	b.n	114a4 <ull_conn_llcp+0x1104>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   115d6:	791a      	ldrb	r2, [r3, #4]
   115d8:	f002 0203 	and.w	r2, r2, #3
   115dc:	2a03      	cmp	r2, #3
   115de:	f000 80fb 	beq.w	117d8 <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   115e2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   115e6:	e442      	b.n	10e6e <ull_conn_llcp+0xace>
			conn->tx_data = conn->tx_data->next;
   115e8:	6819      	ldr	r1, [r3, #0]
   115ea:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   115ee:	2a00      	cmp	r2, #0
   115f0:	f47f ae27 	bne.w	11242 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head->next;
   115f4:	681a      	ldr	r2, [r3, #0]
   115f6:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   115fa:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   115fe:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   11602:	e627      	b.n	11254 <ull_conn_llcp+0xeb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11604:	4833      	ldr	r0, [pc, #204]	; (116d4 <ull_conn_llcp+0x1334>)
   11606:	f7f7 fb25 	bl	8c54 <mem_acquire>
	if (!tx) {
   1160a:	2800      	cmp	r0, #0
   1160c:	f43f abb6 	beq.w	10d7c <ull_conn_llcp+0x9dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11610:	7902      	ldrb	r2, [r0, #4]
   11612:	f042 0203 	orr.w	r2, r2, #3
   11616:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   11618:	2218      	movs	r2, #24
   1161a:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1161c:	2210      	movs	r2, #16
   1161e:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   11620:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   11624:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   11626:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   1162a:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   1162c:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   11630:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   11632:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   11636:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   11638:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   1163c:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   1163e:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   11642:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   11646:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   1164a:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   1164e:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   11652:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   11656:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   1165a:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   1165e:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   11662:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   11666:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   1166a:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   1166e:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   11672:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   11676:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1167a:	2a00      	cmp	r2, #0
   1167c:	d035      	beq.n	116ea <ull_conn_llcp+0x134a>
	    !conn->llcp_enc.pause_tx &&
   1167e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   11682:	078f      	lsls	r7, r1, #30
   11684:	d431      	bmi.n	116ea <ull_conn_llcp+0x134a>
	    !conn->llcp_phy.pause_tx &&
   11686:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1168a:	07c9      	lsls	r1, r1, #31
   1168c:	d42d      	bmi.n	116ea <ull_conn_llcp+0x134a>
		if (conn->tx_head == conn->tx_data) {
   1168e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11692:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   11694:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   11698:	f000 80c6 	beq.w	11828 <ull_conn_llcp+0x1488>
		} else if (!conn->tx_ctrl) {
   1169c:	2900      	cmp	r1, #0
   1169e:	f000 80bb 	beq.w	11818 <ull_conn_llcp+0x1478>
	tx->next = conn->tx_ctrl_last->next;
   116a2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   116a6:	6811      	ldr	r1, [r2, #0]
   116a8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   116aa:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   116ac:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   116b0:	6802      	ldr	r2, [r0, #0]
   116b2:	2a00      	cmp	r2, #0
   116b4:	f000 80ad 	beq.w	11812 <ull_conn_llcp+0x1472>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   116b8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   116bc:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   116c0:	2305      	movs	r3, #5
   116c2:	f363 0203 	bfi	r2, r3, #0, #4
   116c6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   116ca:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   116ce:	f7fe be72 	b.w	103b6 <ull_conn_llcp+0x16>
   116d2:	bf00      	nop
   116d4:	20002294 	.word	0x20002294
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   116d8:	791a      	ldrb	r2, [r3, #4]
   116da:	f002 0203 	and.w	r2, r2, #3
   116de:	2a03      	cmp	r2, #3
   116e0:	f000 80ae 	beq.w	11840 <ull_conn_llcp+0x14a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   116e4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   116e8:	e43d      	b.n	10f66 <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
   116ea:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   116ee:	2900      	cmp	r1, #0
   116f0:	d1d7      	bne.n	116a2 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
   116f2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   116f4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   116f8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   116fc:	e7d8      	b.n	116b0 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   116fe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11700:	2a03      	cmp	r2, #3
   11702:	f43f ae18 	beq.w	11336 <ull_conn_llcp+0xf96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11706:	2a0a      	cmp	r2, #10
   11708:	f47f aebc 	bne.w	11484 <ull_conn_llcp+0x10e4>
   1170c:	e613      	b.n	11336 <ull_conn_llcp+0xf96>
			conn->tx_data = conn->tx_data->next;
   1170e:	6819      	ldr	r1, [r3, #0]
   11710:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11714:	2a00      	cmp	r2, #0
   11716:	f47f ad48 	bne.w	111aa <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head->next;
   1171a:	681a      	ldr	r2, [r3, #0]
   1171c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1171e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   11720:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   11724:	e548      	b.n	111b8 <ull_conn_llcp+0xe18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11726:	791a      	ldrb	r2, [r3, #4]
   11728:	f002 0203 	and.w	r2, r2, #3
   1172c:	2a03      	cmp	r2, #3
   1172e:	d062      	beq.n	117f6 <ull_conn_llcp+0x1456>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11730:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   11734:	f7ff b924 	b.w	10980 <ull_conn_llcp+0x5e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11738:	791a      	ldrb	r2, [r3, #4]
   1173a:	f002 0203 	and.w	r2, r2, #3
   1173e:	2a03      	cmp	r2, #3
   11740:	d060      	beq.n	11804 <ull_conn_llcp+0x1464>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11742:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   11746:	e4d2      	b.n	110ee <ull_conn_llcp+0xd4e>
			conn->llcp_cu.interval = interval_max;
   11748:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   1174c:	f7ff ba97 	b.w	10c7e <ull_conn_llcp+0x8de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11750:	791a      	ldrb	r2, [r3, #4]
   11752:	f002 0203 	and.w	r2, r2, #3
   11756:	2a03      	cmp	r2, #3
   11758:	f000 8099 	beq.w	1188e <ull_conn_llcp+0x14ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1175c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   11760:	e523      	b.n	111aa <ull_conn_llcp+0xe0a>
			conn->tx_data = conn->tx_data->next;
   11762:	6818      	ldr	r0, [r3, #0]
   11764:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11768:	2900      	cmp	r1, #0
   1176a:	f47f aafc 	bne.w	10d66 <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head->next;
   1176e:	6819      	ldr	r1, [r3, #0]
   11770:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   11772:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   11774:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   11778:	f7ff bafc 	b.w	10d74 <ull_conn_llcp+0x9d4>
		conn->tx_data_last = tx;
   1177c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   11780:	e64a      	b.n	11418 <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11782:	7911      	ldrb	r1, [r2, #4]
   11784:	f001 0103 	and.w	r1, r1, #3
   11788:	2903      	cmp	r1, #3
   1178a:	d017      	beq.n	117bc <ull_conn_llcp+0x141c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1178c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   11790:	e637      	b.n	11402 <ull_conn_llcp+0x1062>
			conn->tx_data = conn->tx_data->next;
   11792:	6813      	ldr	r3, [r2, #0]
   11794:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11798:	2900      	cmp	r1, #0
   1179a:	f47f ae32 	bne.w	11402 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head->next;
   1179e:	6811      	ldr	r1, [r2, #0]
   117a0:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   117a2:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   117a4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   117a8:	e632      	b.n	11410 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   117aa:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   117ae:	bf18      	it	ne
   117b0:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   117b2:	f362 1347 	bfi	r3, r2, #5, #3
   117b6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   117ba:	e67e      	b.n	114ba <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
   117bc:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   117be:	2903      	cmp	r1, #3
   117c0:	d0ed      	beq.n	1179e <ull_conn_llcp+0x13fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   117c2:	290a      	cmp	r1, #10
   117c4:	d1e2      	bne.n	1178c <ull_conn_llcp+0x13ec>
   117c6:	e7ea      	b.n	1179e <ull_conn_llcp+0x13fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   117c8:	791a      	ldrb	r2, [r3, #4]
   117ca:	f002 0203 	and.w	r2, r2, #3
   117ce:	2a03      	cmp	r2, #3
   117d0:	d00a      	beq.n	117e8 <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   117d2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   117d6:	e534      	b.n	11242 <ull_conn_llcp+0xea2>
	    ((pdu_data_tx->llctrl.opcode !=
   117d8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   117da:	2a03      	cmp	r2, #3
   117dc:	f43f ae3a 	beq.w	11454 <ull_conn_llcp+0x10b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   117e0:	2a0a      	cmp	r2, #10
   117e2:	f47f aefe 	bne.w	115e2 <ull_conn_llcp+0x1242>
   117e6:	e635      	b.n	11454 <ull_conn_llcp+0x10b4>
	    ((pdu_data_tx->llctrl.opcode !=
   117e8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   117ea:	2a03      	cmp	r2, #3
   117ec:	f43f af02 	beq.w	115f4 <ull_conn_llcp+0x1254>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   117f0:	2a0a      	cmp	r2, #10
   117f2:	d1ee      	bne.n	117d2 <ull_conn_llcp+0x1432>
   117f4:	e6fe      	b.n	115f4 <ull_conn_llcp+0x1254>
	    ((pdu_data_tx->llctrl.opcode !=
   117f6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   117f8:	2a03      	cmp	r2, #3
   117fa:	f43f ae9f 	beq.w	1153c <ull_conn_llcp+0x119c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   117fe:	2a0a      	cmp	r2, #10
   11800:	d196      	bne.n	11730 <ull_conn_llcp+0x1390>
   11802:	e69b      	b.n	1153c <ull_conn_llcp+0x119c>
	    ((pdu_data_tx->llctrl.opcode !=
   11804:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11806:	2a03      	cmp	r2, #3
   11808:	f43f aea7 	beq.w	1155a <ull_conn_llcp+0x11ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1180c:	2a0a      	cmp	r2, #10
   1180e:	d198      	bne.n	11742 <ull_conn_llcp+0x13a2>
   11810:	e6a3      	b.n	1155a <ull_conn_llcp+0x11ba>
		conn->tx_data_last = tx;
   11812:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   11816:	e74f      	b.n	116b8 <ull_conn_llcp+0x1318>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11818:	7911      	ldrb	r1, [r2, #4]
   1181a:	f001 0103 	and.w	r1, r1, #3
   1181e:	2903      	cmp	r1, #3
   11820:	d016      	beq.n	11850 <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11822:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   11826:	e73c      	b.n	116a2 <ull_conn_llcp+0x1302>
			conn->tx_data = conn->tx_data->next;
   11828:	6813      	ldr	r3, [r2, #0]
   1182a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1182e:	2900      	cmp	r1, #0
   11830:	f47f af37 	bne.w	116a2 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
   11834:	6811      	ldr	r1, [r2, #0]
   11836:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   11838:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1183a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1183e:	e737      	b.n	116b0 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   11840:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11842:	2a03      	cmp	r2, #3
   11844:	f43f adf6 	beq.w	11434 <ull_conn_llcp+0x1094>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11848:	2a0a      	cmp	r2, #10
   1184a:	f47f af4b 	bne.w	116e4 <ull_conn_llcp+0x1344>
   1184e:	e5f1      	b.n	11434 <ull_conn_llcp+0x1094>
	    ((pdu_data_tx->llctrl.opcode !=
   11850:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11852:	2903      	cmp	r1, #3
   11854:	d0ee      	beq.n	11834 <ull_conn_llcp+0x1494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11856:	290a      	cmp	r1, #10
   11858:	d1e3      	bne.n	11822 <ull_conn_llcp+0x1482>
   1185a:	e7eb      	b.n	11834 <ull_conn_llcp+0x1494>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1185c:	7919      	ldrb	r1, [r3, #4]
   1185e:	f001 0103 	and.w	r1, r1, #3
   11862:	2903      	cmp	r1, #3
   11864:	d00c      	beq.n	11880 <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11866:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1186a:	f7ff ba7c 	b.w	10d66 <ull_conn_llcp+0x9c6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   1186e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   11872:	bf18      	it	ne
   11874:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   11876:	f362 0384 	bfi	r3, r2, #2, #3
   1187a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1187e:	e611      	b.n	114a4 <ull_conn_llcp+0x1104>
	    ((pdu_data_tx->llctrl.opcode !=
   11880:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11882:	2903      	cmp	r1, #3
   11884:	f43f af73 	beq.w	1176e <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11888:	290a      	cmp	r1, #10
   1188a:	d1ec      	bne.n	11866 <ull_conn_llcp+0x14c6>
   1188c:	e76f      	b.n	1176e <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
   1188e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11890:	2a03      	cmp	r2, #3
   11892:	f43f af42 	beq.w	1171a <ull_conn_llcp+0x137a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11896:	2a0a      	cmp	r2, #10
   11898:	f47f af60 	bne.w	1175c <ull_conn_llcp+0x13bc>
   1189c:	e73d      	b.n	1171a <ull_conn_llcp+0x137a>
		LL_ASSERT(0);
   1189e:	4a02      	ldr	r2, [pc, #8]	; (118a8 <ull_conn_llcp+0x1508>)
   118a0:	4902      	ldr	r1, [pc, #8]	; (118ac <ull_conn_llcp+0x150c>)
   118a2:	f241 036c 	movw	r3, #4204	; 0x106c
   118a6:	e435      	b.n	11114 <ull_conn_llcp+0xd74>
   118a8:	00020140 	.word	0x00020140
   118ac:	0001fc54 	.word	0x0001fc54

000118b0 <ull_conn_tx_demux>:
{
   118b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   118b4:	4c24      	ldr	r4, [pc, #144]	; (11948 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   118b6:	4f25      	ldr	r7, [pc, #148]	; (1194c <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   118b8:	7962      	ldrb	r2, [r4, #5]
{
   118ba:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   118bc:	f104 0608 	add.w	r6, r4, #8
   118c0:	e021      	b.n	11906 <ull_conn_tx_demux+0x56>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   118c2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   118c6:	4638      	mov	r0, r7
   118c8:	f7f7 f9f6 	bl	8cb8 <mem_get>
	if (conn->lll.handle != handle) {
   118cc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   118ce:	bb2a      	cbnz	r2, 1191c <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   118d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   118d4:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   118d8:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   118da:	b351      	cbz	r1, 11932 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   118dc:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   118e0:	b102      	cbz	r2, 118e4 <ull_conn_tx_demux+0x34>
				conn->tx_data_last->next = tx;
   118e2:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   118e4:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   118e8:	7962      	ldrb	r2, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   118ea:	7923      	ldrb	r3, [r4, #4]
   118ec:	78a1      	ldrb	r1, [r4, #2]
	if (_first == last) {
   118ee:	429a      	cmp	r2, r3
   118f0:	d005      	beq.n	118fe <ull_conn_tx_demux+0x4e>
	_first += 1U;
   118f2:	3301      	adds	r3, #1
   118f4:	b2db      	uxtb	r3, r3
		_first = 0U;
   118f6:	4299      	cmp	r1, r3
   118f8:	bf08      	it	eq
   118fa:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   118fc:	7123      	strb	r3, [r4, #4]
	} while (--count);
   118fe:	3d01      	subs	r5, #1
   11900:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11904:	d01e      	beq.n	11944 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   11906:	7923      	ldrb	r3, [r4, #4]
   11908:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   1190a:	4293      	cmp	r3, r2
   1190c:	d01a      	beq.n	11944 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   1190e:	fb13 f301 	smulbb	r3, r3, r1
   11912:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   11916:	5af2      	ldrh	r2, [r6, r3]
   11918:	2a00      	cmp	r2, #0
   1191a:	d0d2      	beq.n	118c2 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
   1191c:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   11920:	790b      	ldrb	r3, [r1, #4]
   11922:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   11926:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1192a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1192c:	f7fa fdc2 	bl	c4b4 <ll_tx_ack_put>
   11930:	e7da      	b.n	118e8 <ull_conn_tx_demux+0x38>
				if (!conn->tx_head) {
   11932:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   11936:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   1193a:	2a00      	cmp	r2, #0
   1193c:	d1ce      	bne.n	118dc <ull_conn_tx_demux+0x2c>
					conn->tx_head = tx;
   1193e:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   11942:	e7cf      	b.n	118e4 <ull_conn_tx_demux+0x34>
}
   11944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11948:	20000674 	.word	0x20000674
   1194c:	200012b0 	.word	0x200012b0

00011950 <conn_cleanup_finalize>:
{
   11950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   11954:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   11958:	b082      	sub	sp, #8
   1195a:	4606      	mov	r6, r0
	while (rx) {
   1195c:	b144      	cbz	r4, 11970 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   1195e:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   11960:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   11962:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   11964:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   11966:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   11968:	f7fa fd5e 	bl	c428 <ll_rx_put>
	while (rx) {
   1196c:	2c00      	cmp	r4, #0
   1196e:	d1f7      	bne.n	11960 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   11970:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   11974:	b381      	cbz	r1, 119d8 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   11976:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 11a1c <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   1197a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11a20 <conn_cleanup_finalize+0xd0>
   1197e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11a24 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   11982:	f106 0768 	add.w	r7, r6, #104	; 0x68
   11986:	e007      	b.n	11998 <conn_cleanup_finalize+0x48>
   11988:	4629      	mov	r1, r5
   1198a:	463a      	mov	r2, r7
   1198c:	4620      	mov	r0, r4
   1198e:	f7f7 f9c5 	bl	8d1c <memq_enqueue>
	while (conn->tx_head) {
   11992:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   11996:	b1f9      	cbz	r1, 119d8 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   11998:	4630      	mov	r0, r6
   1199a:	f7fc fa57 	bl	de4c <tx_ull_dequeue>
   1199e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   119a0:	4640      	mov	r0, r8
   119a2:	f7f7 f957 	bl	8c54 <mem_acquire>
		LL_ASSERT(link);
   119a6:	4604      	mov	r4, r0
   119a8:	2800      	cmp	r0, #0
   119aa:	d1ed      	bne.n	11988 <conn_cleanup_finalize+0x38>
   119ac:	481e      	ldr	r0, [pc, #120]	; (11a28 <conn_cleanup_finalize+0xd8>)
   119ae:	f640 2303 	movw	r3, #2563	; 0xa03
   119b2:	4652      	mov	r2, sl
   119b4:	4649      	mov	r1, r9
   119b6:	f007 fdec 	bl	19592 <assert_print>
   119ba:	4040      	eors	r0, r0
   119bc:	f380 8811 	msr	BASEPRI, r0
   119c0:	f04f 0003 	mov.w	r0, #3
   119c4:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   119c6:	4629      	mov	r1, r5
   119c8:	463a      	mov	r2, r7
   119ca:	4620      	mov	r0, r4
   119cc:	f7f7 f9a6 	bl	8d1c <memq_enqueue>
	while (conn->tx_head) {
   119d0:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   119d4:	2900      	cmp	r1, #0
   119d6:	d1df      	bne.n	11998 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   119d8:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   119da:	4b14      	ldr	r3, [pc, #80]	; (11a2c <conn_cleanup_finalize+0xdc>)
   119dc:	9600      	str	r6, [sp, #0]
   119de:	3205      	adds	r2, #5
   119e0:	b2d2      	uxtb	r2, r2
   119e2:	2101      	movs	r1, #1
   119e4:	2000      	movs	r0, #0
   119e6:	f7f8 fbd9 	bl	a19c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   119ea:	f030 0302 	bics.w	r3, r0, #2
   119ee:	d00c      	beq.n	11a0a <conn_cleanup_finalize+0xba>
   119f0:	4a0b      	ldr	r2, [pc, #44]	; (11a20 <conn_cleanup_finalize+0xd0>)
   119f2:	490f      	ldr	r1, [pc, #60]	; (11a30 <conn_cleanup_finalize+0xe0>)
   119f4:	480c      	ldr	r0, [pc, #48]	; (11a28 <conn_cleanup_finalize+0xd8>)
   119f6:	f640 13c8 	movw	r3, #2504	; 0x9c8
   119fa:	f007 fdca 	bl	19592 <assert_print>
   119fe:	4040      	eors	r0, r0
   11a00:	f380 8811 	msr	BASEPRI, r0
   11a04:	f04f 0003 	mov.w	r0, #3
   11a08:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   11a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   11a0e:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   11a10:	8533      	strh	r3, [r6, #40]	; 0x28
}
   11a12:	b002      	add	sp, #8
   11a14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   11a18:	f7ff bf4a 	b.w	118b0 <ull_conn_tx_demux>
   11a1c:	20002348 	.word	0x20002348
   11a20:	00020140 	.word	0x00020140
   11a24:	00020198 	.word	0x00020198
   11a28:	0001fbf4 	.word	0x0001fbf4
   11a2c:	0000dbf9 	.word	0x0000dbf9
   11a30:	00020220 	.word	0x00020220

00011a34 <ull_conn_done>:
{
   11a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   11a38:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   11a3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   11a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a40:	429a      	cmp	r2, r3
{
   11a42:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   11a44:	f000 808f 	beq.w	11b66 <ull_conn_done+0x132>
	switch (done->extra.mic_state) {
   11a48:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   11a4c:	2b01      	cmp	r3, #1
   11a4e:	4605      	mov	r5, r0
   11a50:	f000 80e5 	beq.w	11c1e <ull_conn_done+0x1ea>
   11a54:	2b02      	cmp	r3, #2
   11a56:	f000 80cc 	beq.w	11bf2 <ull_conn_done+0x1be>
   11a5a:	2b00      	cmp	r3, #0
   11a5c:	f000 80af 	beq.w	11bbe <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
   11a60:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   11a64:	2e00      	cmp	r6, #0
   11a66:	f040 80c7 	bne.w	11bf8 <ull_conn_done+0x1c4>
	latency_event = lll->latency_event;
   11a6a:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   11a6e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   11a70:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   11a74:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
   11a78:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   11a7a:	2b00      	cmp	r3, #0
   11a7c:	d076      	beq.n	11b6c <ull_conn_done+0x138>
		} else if (lll->role) {
   11a7e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11a82:	2b00      	cmp	r3, #0
   11a84:	f2c0 8111 	blt.w	11caa <ull_conn_done+0x276>
	if (done->extra.crc_valid) {
   11a88:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   11a8c:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   11a8e:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   11a90:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   11a94:	f140 80c9 	bpl.w	11c2a <ull_conn_done+0x1f6>
		conn->supervision_expire = 0U;
   11a98:	2300      	movs	r3, #0
   11a9a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   11a9e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   11aa2:	b12b      	cbz	r3, 11ab0 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
   11aa4:	42bb      	cmp	r3, r7
   11aa6:	f240 8127 	bls.w	11cf8 <ull_conn_done+0x2c4>
			conn->procedure_expire -= elapsed_event;
   11aaa:	1bdb      	subs	r3, r3, r7
   11aac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   11ab0:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   11ab4:	b12b      	cbz	r3, 11ac2 <ull_conn_done+0x8e>
		if (conn->apto_expire > elapsed_event) {
   11ab6:	42bb      	cmp	r3, r7
   11ab8:	f240 80e3 	bls.w	11c82 <ull_conn_done+0x24e>
			conn->apto_expire -= elapsed_event;
   11abc:	1bdb      	subs	r3, r3, r7
   11abe:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   11ac2:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   11ac6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11aca:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   11ace:	b15a      	cbz	r2, 11ae8 <ull_conn_done+0xb4>
		if (conn->appto_expire > elapsed_event) {
   11ad0:	42ba      	cmp	r2, r7
   11ad2:	f200 80ba 	bhi.w	11c4a <ull_conn_done+0x216>
			if ((conn->procedure_expire == 0U) &&
   11ad6:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   11ada:	2000      	movs	r0, #0
   11adc:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   11ae0:	b912      	cbnz	r2, 11ae8 <ull_conn_done+0xb4>
   11ae2:	4299      	cmp	r1, r3
   11ae4:	f000 8124 	beq.w	11d30 <ull_conn_done+0x2fc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11ae8:	1a5b      	subs	r3, r3, r1
   11aea:	f003 0303 	and.w	r3, r3, #3
   11aee:	2b02      	cmp	r3, #2
   11af0:	f000 80b4 	beq.w	11c5c <ull_conn_done+0x228>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   11af4:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   11af8:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   11afc:	429a      	cmp	r2, r3
   11afe:	f000 80d2 	beq.w	11ca6 <ull_conn_done+0x272>
		lll->latency_event = 0U;
   11b02:	2200      	movs	r2, #0
   11b04:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   11b06:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   11b0a:	b916      	cbnz	r6, 11b12 <ull_conn_done+0xde>
   11b0c:	4590      	cmp	r8, r2
   11b0e:	f000 80b2 	beq.w	11c76 <ull_conn_done+0x242>
		lazy = lll->latency_event + 1U;
   11b12:	3201      	adds	r2, #1
   11b14:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   11b16:	b913      	cbnz	r3, 11b1e <ull_conn_done+0xea>
   11b18:	2d00      	cmp	r5, #0
   11b1a:	f000 808f 	beq.w	11c3c <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   11b1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   11b20:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11b22:	9500      	str	r5, [sp, #0]
   11b24:	2000      	movs	r0, #0
   11b26:	4d99      	ldr	r5, [pc, #612]	; (11d8c <ull_conn_done+0x358>)
   11b28:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   11b2a:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11b2c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   11b30:	9604      	str	r6, [sp, #16]
   11b32:	9406      	str	r4, [sp, #24]
   11b34:	b2d2      	uxtb	r2, r2
   11b36:	2101      	movs	r1, #1
   11b38:	9505      	str	r5, [sp, #20]
   11b3a:	f7f8 fb17 	bl	a16c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b3e:	f030 0302 	bics.w	r3, r0, #2
   11b42:	d010      	beq.n	11b66 <ull_conn_done+0x132>
   11b44:	f7fa fd28 	bl	c598 <ull_disable_mark_get>
   11b48:	4284      	cmp	r4, r0
   11b4a:	d00c      	beq.n	11b66 <ull_conn_done+0x132>
   11b4c:	4a90      	ldr	r2, [pc, #576]	; (11d90 <ull_conn_done+0x35c>)
   11b4e:	4991      	ldr	r1, [pc, #580]	; (11d94 <ull_conn_done+0x360>)
   11b50:	4891      	ldr	r0, [pc, #580]	; (11d98 <ull_conn_done+0x364>)
   11b52:	f240 7304 	movw	r3, #1796	; 0x704
   11b56:	f007 fd1c 	bl	19592 <assert_print>
   11b5a:	4040      	eors	r0, r0
   11b5c:	f380 8811 	msr	BASEPRI, r0
   11b60:	f04f 0003 	mov.w	r0, #3
   11b64:	df02      	svc	2
}
   11b66:	b00a      	add	sp, #40	; 0x28
   11b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   11b6c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   11b70:	f013 0301 	ands.w	r3, r3, #1
   11b74:	d190      	bne.n	11a98 <ull_conn_done+0x64>
	else if (conn->connect_expire) {
   11b76:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   11b7a:	2900      	cmp	r1, #0
   11b7c:	d055      	beq.n	11c2a <ull_conn_done+0x1f6>
		if (conn->connect_expire > elapsed_event) {
   11b7e:	42b9      	cmp	r1, r7
   11b80:	f240 80dd 	bls.w	11d3e <ull_conn_done+0x30a>
			conn->connect_expire -= elapsed_event;
   11b84:	1bc9      	subs	r1, r1, r7
	if (conn->supervision_expire) {
   11b86:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   11b8a:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   11b8e:	2b00      	cmp	r3, #0
   11b90:	d085      	beq.n	11a9e <ull_conn_done+0x6a>
		if (conn->supervision_expire > elapsed_event) {
   11b92:	429f      	cmp	r7, r3
   11b94:	f080 809b 	bcs.w	11cce <ull_conn_done+0x29a>
			conn->supervision_expire -= elapsed_event;
   11b98:	1bdb      	subs	r3, r3, r7
   11b9a:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   11b9c:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   11b9e:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   11ba0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   11ba4:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   11ba6:	d908      	bls.n	11bba <ull_conn_done+0x186>
			else if (lll->role) {
   11ba8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11bac:	4293      	cmp	r3, r2
   11bae:	f6bf af76 	bge.w	11a9e <ull_conn_done+0x6a>
				if (latency_event) {
   11bb2:	f1b8 0f00 	cmp.w	r8, #0
   11bb6:	f000 80ad 	beq.w	11d14 <ull_conn_done+0x2e0>
				force = 1U;
   11bba:	2601      	movs	r6, #1
   11bbc:	e76f      	b.n	11a9e <ull_conn_done+0x6a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   11bbe:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   11bc2:	0718      	lsls	r0, r3, #28
   11bc4:	d551      	bpl.n	11c6a <ull_conn_done+0x236>
					    (lll->latency + 6)) ?
   11bc6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   11bc8:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   11bcc:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   11bce:	4299      	cmp	r1, r3
   11bd0:	bfc4      	itt	gt
   11bd2:	1f8b      	subgt	r3, r1, #6
   11bd4:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   11bd6:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   11bda:	bfcc      	ite	gt
   11bdc:	b29b      	uxthgt	r3, r3
   11bde:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   11be0:	4298      	cmp	r0, r3
   11be2:	d06e      	beq.n	11cc2 <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
   11be4:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   11be8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   11bec:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   11bf0:	e736      	b.n	11a60 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_final =
   11bf2:	263d      	movs	r6, #61	; 0x3d
   11bf4:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
   11bf8:	4b68      	ldr	r3, [pc, #416]	; (11d9c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   11bfa:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
   11bfe:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   11c00:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
   11c04:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
   11c06:	bf04      	itt	eq
   11c08:	2100      	moveq	r1, #0
   11c0a:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
   11c0c:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11c0e:	2318      	movs	r3, #24
   11c10:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   11c14:	b00a      	add	sp, #40	; 0x28
   11c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
   11c1a:	f7ff be99 	b.w	11950 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
   11c1e:	2300      	movs	r3, #0
   11c20:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   11c24:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   11c28:	e71a      	b.n	11a60 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   11c2a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   11c2e:	2b00      	cmp	r3, #0
   11c30:	d1af      	bne.n	11b92 <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
   11c32:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   11c36:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   11c3a:	e7a8      	b.n	11b8e <ull_conn_done+0x15a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   11c3c:	2900      	cmp	r1, #0
   11c3e:	f47f af6e 	bne.w	11b1e <ull_conn_done+0xea>
   11c42:	2e00      	cmp	r6, #0
   11c44:	f47f af6b 	bne.w	11b1e <ull_conn_done+0xea>
   11c48:	e78d      	b.n	11b66 <ull_conn_done+0x132>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11c4a:	1a5b      	subs	r3, r3, r1
   11c4c:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   11c50:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11c52:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   11c54:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11c58:	f47f af4c 	bne.w	11af4 <ull_conn_done+0xc0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   11c5c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11c60:	3b01      	subs	r3, #1
   11c62:	2b01      	cmp	r3, #1
   11c64:	f63f af46 	bhi.w	11af4 <ull_conn_done+0xc0>
   11c68:	e74b      	b.n	11b02 <ull_conn_done+0xce>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   11c6a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   11c6e:	07d9      	lsls	r1, r3, #31
   11c70:	f57f aef6 	bpl.w	11a60 <ull_conn_done+0x2c>
   11c74:	e7a7      	b.n	11bc6 <ull_conn_done+0x192>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   11c76:	b913      	cbnz	r3, 11c7e <ull_conn_done+0x24a>
   11c78:	2d00      	cmp	r5, #0
   11c7a:	f43f af74 	beq.w	11b66 <ull_conn_done+0x132>
	lazy = 0U;
   11c7e:	4631      	mov	r1, r6
   11c80:	e74d      	b.n	11b1e <ull_conn_done+0xea>
			rx = ll_pdu_rx_alloc();
   11c82:	f7fa fc01 	bl	c488 <ll_pdu_rx_alloc>
			if (rx) {
   11c86:	4601      	mov	r1, r0
   11c88:	2800      	cmp	r0, #0
   11c8a:	d03f      	beq.n	11d0c <ull_conn_done+0x2d8>
				rx->handle = lll->handle;
   11c8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   11c8e:	2200      	movs	r2, #0
   11c90:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   11c94:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   11c96:	231b      	movs	r3, #27
   11c98:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   11c9a:	6800      	ldr	r0, [r0, #0]
   11c9c:	f7fa fbc4 	bl	c428 <ll_rx_put>
				ll_rx_sched();
   11ca0:	f7fa fbcc 	bl	c43c <ll_rx_sched>
   11ca4:	e70d      	b.n	11ac2 <ull_conn_done+0x8e>
	if ((force) || (latency_event != lll->latency_event)) {
   11ca6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   11ca8:	e72d      	b.n	11b06 <ull_conn_done+0xd2>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   11caa:	aa08      	add	r2, sp, #32
   11cac:	a909      	add	r1, sp, #36	; 0x24
   11cae:	4628      	mov	r0, r5
   11cb0:	f7ee fd9e 	bl	7f0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   11cb4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   11cb8:	2b00      	cmp	r3, #0
   11cba:	d051      	beq.n	11d60 <ull_conn_done+0x32c>
				lll->latency_event = 0;
   11cbc:	2300      	movs	r3, #0
   11cbe:	8623      	strh	r3, [r4, #48]	; 0x30
   11cc0:	e6e2      	b.n	11a88 <ull_conn_done+0x54>
			if (conn->apto_expire == 0U) {
   11cc2:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   11cc6:	2800      	cmp	r0, #0
   11cc8:	f47f aeca 	bne.w	11a60 <ull_conn_done+0x2c>
   11ccc:	e78c      	b.n	11be8 <ull_conn_done+0x1b4>
	if (conn == conn_upd_curr) {
   11cce:	4b33      	ldr	r3, [pc, #204]	; (11d9c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   11cd0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   11cd2:	681a      	ldr	r2, [r3, #0]
   11cd4:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   11cd6:	bf04      	itt	eq
   11cd8:	2200      	moveq	r2, #0
   11cda:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11cdc:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   11cde:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   11ce0:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11ce4:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   11ce8:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   11cec:	4620      	mov	r0, r4
   11cee:	f7ff fe2f 	bl	11950 <conn_cleanup_finalize>
}
   11cf2:	b00a      	add	sp, #40	; 0x28
   11cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn == conn_upd_curr) {
   11cf8:	4b28      	ldr	r3, [pc, #160]	; (11d9c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   11cfa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   11cfc:	681a      	ldr	r2, [r3, #0]
   11cfe:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   11d00:	bf04      	itt	eq
   11d02:	2200      	moveq	r2, #0
   11d04:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11d06:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   11d08:	2322      	movs	r3, #34	; 0x22
   11d0a:	e7e9      	b.n	11ce0 <ull_conn_done+0x2ac>
				conn->apto_expire = 1U;
   11d0c:	2301      	movs	r3, #1
   11d0e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   11d12:	e6d6      	b.n	11ac2 <ull_conn_done+0x8e>
					force = conn->periph.force & 0x01;
   11d14:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   11d18:	085a      	lsrs	r2, r3, #1
					if (force) {
   11d1a:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   11d1e:	bf17      	itett	ne
   11d20:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   11d24:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
   11d28:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
   11d2c:	461e      	movne	r6, r3
   11d2e:	e6b6      	b.n	11a9e <ull_conn_done+0x6a>
				conn->llcp_type = LLCP_PING;
   11d30:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   11d32:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   11d34:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   11d38:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11d3c:	e6da      	b.n	11af4 <ull_conn_done+0xc0>
	if (conn == conn_upd_curr) {
   11d3e:	4917      	ldr	r1, [pc, #92]	; (11d9c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
   11d40:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
   11d44:	6808      	ldr	r0, [r1, #0]
   11d46:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   11d48:	bf08      	it	eq
   11d4a:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11d4c:	2118      	movs	r1, #24
	*((uint8_t *)rx->pdu) = reason;
   11d4e:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11d50:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   11d54:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   11d58:	4620      	mov	r0, r4
   11d5a:	f7ff fdf9 	bl	11950 <conn_cleanup_finalize>
}
   11d5e:	e702      	b.n	11b66 <ull_conn_done+0x132>
				ull_conn_tx_demux(UINT8_MAX);
   11d60:	20ff      	movs	r0, #255	; 0xff
   11d62:	f7ff fda5 	bl	118b0 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   11d66:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   11d6a:	2b00      	cmp	r3, #0
   11d6c:	d1a6      	bne.n	11cbc <ull_conn_done+0x288>
   11d6e:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   11d72:	4632      	mov	r2, r6
   11d74:	f7f6 ffdc 	bl	8d30 <memq_peek>
   11d78:	2800      	cmp	r0, #0
   11d7a:	d19f      	bne.n	11cbc <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
   11d7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   11d80:	075a      	lsls	r2, r3, #29
				lll->latency_event = lll->latency;
   11d82:	bf44      	itt	mi
   11d84:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   11d86:	8623      	strhmi	r3, [r4, #48]	; 0x30
   11d88:	e67e      	b.n	11a88 <ull_conn_done+0x54>
   11d8a:	bf00      	nop
   11d8c:	0000de0d 	.word	0x0000de0d
   11d90:	00020140 	.word	0x00020140
   11d94:	0002029c 	.word	0x0002029c
   11d98:	0001fbf4 	.word	0x0001fbf4
   11d9c:	200021dc 	.word	0x200021dc

00011da0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   11da0:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   11da4:	2b00      	cmp	r3, #0
   11da6:	f000 80be 	beq.w	11f26 <ull_conn_tx_lll_enqueue+0x186>
   11daa:	3901      	subs	r1, #1
{
   11dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   11db0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 11f28 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   11db4:	f8df a174 	ldr.w	sl, [pc, #372]	; 11f2c <ull_conn_tx_lll_enqueue+0x18c>
   11db8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 11f30 <ull_conn_tx_lll_enqueue+0x190>
   11dbc:	4604      	mov	r4, r0
   11dbe:	b2cd      	uxtb	r5, r1
   11dc0:	e010      	b.n	11de4 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   11dc2:	4640      	mov	r0, r8
   11dc4:	f7f6 ff46 	bl	8c54 <mem_acquire>
		LL_ASSERT(link);
   11dc8:	4607      	mov	r7, r0
   11dca:	b3b0      	cbz	r0, 11e3a <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   11dcc:	f104 0268 	add.w	r2, r4, #104	; 0x68
   11dd0:	4631      	mov	r1, r6
   11dd2:	4638      	mov	r0, r7
   11dd4:	f7f6 ffa2 	bl	8d1c <memq_enqueue>
	while (conn->tx_head &&
   11dd8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   11ddc:	3d01      	subs	r5, #1
   11dde:	b2ed      	uxtb	r5, r5
   11de0:	2b00      	cmp	r3, #0
   11de2:	d05c      	beq.n	11e9e <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   11de4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   11de8:	07d1      	lsls	r1, r2, #31
   11dea:	d403      	bmi.n	11df4 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   11dec:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   11df0:	0792      	lsls	r2, r2, #30
   11df2:	d53a      	bpl.n	11e6a <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   11df4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   11df8:	4293      	cmp	r3, r2
   11dfa:	d150      	bne.n	11e9e <ull_conn_tx_lll_enqueue+0xfe>
   11dfc:	2dff      	cmp	r5, #255	; 0xff
   11dfe:	d04e      	beq.n	11e9e <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   11e00:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   11e04:	4620      	mov	r0, r4
   11e06:	f7fc f821 	bl	de4c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   11e0a:	7903      	ldrb	r3, [r0, #4]
   11e0c:	f003 0303 	and.w	r3, r3, #3
   11e10:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   11e12:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   11e14:	d1d5      	bne.n	11dc2 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   11e16:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   11e18:	2b0b      	cmp	r3, #11
   11e1a:	d042      	beq.n	11ea2 <ull_conn_tx_lll_enqueue+0x102>
   11e1c:	d81b      	bhi.n	11e56 <ull_conn_tx_lll_enqueue+0xb6>
   11e1e:	2b04      	cmp	r3, #4
   11e20:	d1cf      	bne.n	11dc2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   11e22:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   11e26:	f043 0302 	orr.w	r3, r3, #2
   11e2a:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   11e2e:	4640      	mov	r0, r8
   11e30:	f7f6 ff10 	bl	8c54 <mem_acquire>
		LL_ASSERT(link);
   11e34:	4607      	mov	r7, r0
   11e36:	2800      	cmp	r0, #0
   11e38:	d1c8      	bne.n	11dcc <ull_conn_tx_lll_enqueue+0x2c>
   11e3a:	483e      	ldr	r0, [pc, #248]	; (11f34 <ull_conn_tx_lll_enqueue+0x194>)
   11e3c:	f240 7369 	movw	r3, #1897	; 0x769
   11e40:	4652      	mov	r2, sl
   11e42:	4649      	mov	r1, r9
   11e44:	f007 fba5 	bl	19592 <assert_print>
   11e48:	4040      	eors	r0, r0
   11e4a:	f380 8811 	msr	BASEPRI, r0
   11e4e:	f04f 0003 	mov.w	r0, #3
   11e52:	df02      	svc	2
   11e54:	e7ba      	b.n	11dcc <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   11e56:	3b16      	subs	r3, #22
   11e58:	2b01      	cmp	r3, #1
   11e5a:	d8b2      	bhi.n	11dc2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   11e5c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   11e60:	f043 0301 	orr.w	r3, r3, #1
   11e64:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   11e68:	e7ab      	b.n	11dc2 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   11e6a:	791a      	ldrb	r2, [r3, #4]
   11e6c:	f002 0203 	and.w	r2, r2, #3
   11e70:	2a03      	cmp	r2, #3
   11e72:	d1c3      	bne.n	11dfc <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   11e74:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   11e76:	2a03      	cmp	r2, #3
   11e78:	d001      	beq.n	11e7e <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   11e7a:	2a0a      	cmp	r2, #10
   11e7c:	d1be      	bne.n	11dfc <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   11e7e:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   11e82:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   11e86:	428a      	cmp	r2, r1
   11e88:	d010      	beq.n	11eac <ull_conn_tx_lll_enqueue+0x10c>
   11e8a:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   11e8e:	2a03      	cmp	r2, #3
   11e90:	d0b4      	beq.n	11dfc <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   11e92:	681a      	ldr	r2, [r3, #0]
   11e94:	b11a      	cbz	r2, 11e9e <ull_conn_tx_lll_enqueue+0xfe>
   11e96:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   11e9a:	428a      	cmp	r2, r1
   11e9c:	d032      	beq.n	11f04 <ull_conn_tx_lll_enqueue+0x164>
}
   11e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   11ea2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11ea6:	2b00      	cmp	r3, #0
   11ea8:	da8b      	bge.n	11dc2 <ull_conn_tx_lll_enqueue+0x22>
   11eaa:	e7ba      	b.n	11e22 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   11eac:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   11eb0:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   11eb4:	4288      	cmp	r0, r1
   11eb6:	d1ec      	bne.n	11e92 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   11eb8:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   11ebc:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   11ec0:	4288      	cmp	r0, r1
   11ec2:	d1e6      	bne.n	11e92 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   11ec4:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   11ec8:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   11ecc:	4288      	cmp	r0, r1
   11ece:	d1e0      	bne.n	11e92 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   11ed0:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   11ed4:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   11ed8:	4288      	cmp	r0, r1
   11eda:	d1da      	bne.n	11e92 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   11edc:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   11ee0:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11ee4:	4288      	cmp	r0, r1
   11ee6:	d1d4      	bne.n	11e92 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   11ee8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   11eec:	3a02      	subs	r2, #2
   11eee:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   11ef2:	2201      	movs	r2, #1
   11ef4:	f362 0301 	bfi	r3, r2, #0, #2
   11ef8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   11efc:	2303      	movs	r3, #3
   11efe:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   11f02:	e77b      	b.n	11dfc <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   11f04:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   11f08:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   11f0c:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   11f10:	6810      	ldr	r0, [r2, #0]
   11f12:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   11f14:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   11f16:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   11f1a:	2900      	cmp	r1, #0
   11f1c:	f47f af6e 	bne.w	11dfc <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   11f20:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   11f24:	e76a      	b.n	11dfc <ull_conn_tx_lll_enqueue+0x5c>
   11f26:	4770      	bx	lr
   11f28:	20002348 	.word	0x20002348
   11f2c:	00020140 	.word	0x00020140
   11f30:	00020198 	.word	0x00020198
   11f34:	0001fbf4 	.word	0x0001fbf4

00011f38 <tx_demux>:
{
   11f38:	b510      	push	{r4, lr}
   11f3a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   11f3c:	2001      	movs	r0, #1
   11f3e:	f7ff fcb7 	bl	118b0 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   11f42:	4620      	mov	r0, r4
   11f44:	2101      	movs	r1, #1
}
   11f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   11f4a:	f7ff bf29 	b.w	11da0 <ull_conn_tx_lll_enqueue>
   11f4e:	bf00      	nop

00011f50 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   11f50:	4901      	ldr	r1, [pc, #4]	; (11f58 <ull_conn_link_tx_release+0x8>)
   11f52:	f7f6 be99 	b.w	8c88 <mem_release>
   11f56:	bf00      	nop
   11f58:	20002348 	.word	0x20002348

00011f5c <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   11f5c:	4b01      	ldr	r3, [pc, #4]	; (11f64 <ull_conn_ack_last_idx_get+0x8>)
}
   11f5e:	7958      	ldrb	r0, [r3, #5]
   11f60:	4770      	bx	lr
   11f62:	bf00      	nop
   11f64:	20000624 	.word	0x20000624

00011f68 <ull_conn_ack_peek>:
{
   11f68:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   11f6a:	4b0c      	ldr	r3, [pc, #48]	; (11f9c <ull_conn_ack_peek+0x34>)
   11f6c:	f893 c004 	ldrb.w	ip, [r3, #4]
   11f70:	f893 e005 	ldrb.w	lr, [r3, #5]
   11f74:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   11f76:	45f4      	cmp	ip, lr
   11f78:	d00d      	beq.n	11f96 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   11f7a:	fb1c fc04 	smulbb	ip, ip, r4
   11f7e:	3308      	adds	r3, #8
   11f80:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   11f84:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   11f88:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   11f8c:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   11f8e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   11f90:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   11f92:	6818      	ldr	r0, [r3, #0]
}
   11f94:	bd10      	pop	{r4, pc}
		return NULL;
   11f96:	2000      	movs	r0, #0
}
   11f98:	bd10      	pop	{r4, pc}
   11f9a:	bf00      	nop
   11f9c:	20000624 	.word	0x20000624

00011fa0 <ull_conn_ack_by_last_peek>:
{
   11fa0:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   11fa2:	4b0b      	ldr	r3, [pc, #44]	; (11fd0 <ull_conn_ack_by_last_peek+0x30>)
   11fa4:	f893 c004 	ldrb.w	ip, [r3, #4]
   11fa8:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   11fac:	4584      	cmp	ip, r0
   11fae:	d00d      	beq.n	11fcc <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   11fb0:	3308      	adds	r3, #8
   11fb2:	fb1c fc0e 	smulbb	ip, ip, lr
   11fb6:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   11fba:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   11fbe:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   11fc2:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   11fc4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   11fc6:	6818      	ldr	r0, [r3, #0]
}
   11fc8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   11fcc:	2000      	movs	r0, #0
   11fce:	e7fb      	b.n	11fc8 <ull_conn_ack_by_last_peek+0x28>
   11fd0:	20000624 	.word	0x20000624

00011fd4 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   11fd4:	4b09      	ldr	r3, [pc, #36]	; (11ffc <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   11fd6:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   11fd8:	795a      	ldrb	r2, [r3, #5]
   11fda:	7818      	ldrb	r0, [r3, #0]
   11fdc:	f893 c002 	ldrb.w	ip, [r3, #2]
   11fe0:	428a      	cmp	r2, r1
   11fe2:	d009      	beq.n	11ff8 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   11fe4:	1c4a      	adds	r2, r1, #1
   11fe6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   11fe8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   11fec:	4594      	cmp	ip, r2
   11fee:	bf08      	it	eq
   11ff0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   11ff2:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
   11ff4:	711a      	strb	r2, [r3, #4]
	return mem;
   11ff6:	4770      	bx	lr
		return NULL;
   11ff8:	2000      	movs	r0, #0
}
   11ffa:	4770      	bx	lr
   11ffc:	20000624 	.word	0x20000624

00012000 <ull_conn_lll_ack_enqueue>:
{
   12000:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   12002:	4a15      	ldr	r2, [pc, #84]	; (12058 <ull_conn_lll_ack_enqueue+0x58>)
   12004:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
   12008:	7894      	ldrb	r4, [r2, #2]
   1200a:	f892 e004 	ldrb.w	lr, [r2, #4]
   1200e:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   12010:	f10c 0301 	add.w	r3, ip, #1
   12014:	b2db      	uxtb	r3, r3
		last = 0U;
   12016:	429c      	cmp	r4, r3
   12018:	bf08      	it	eq
   1201a:	2300      	moveq	r3, #0
	if (last == first) {
   1201c:	459e      	cmp	lr, r3
   1201e:	d00a      	beq.n	12036 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12020:	fb1c fc05 	smulbb	ip, ip, r5
   12024:	f102 0e08 	add.w	lr, r2, #8
	lll_tx->handle = handle;
   12028:	f82e 000c 	strh.w	r0, [lr, ip]
   1202c:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1202e:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   12032:	7153      	strb	r3, [r2, #5]
}
   12034:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   12036:	4a09      	ldr	r2, [pc, #36]	; (1205c <ull_conn_lll_ack_enqueue+0x5c>)
   12038:	4909      	ldr	r1, [pc, #36]	; (12060 <ull_conn_lll_ack_enqueue+0x60>)
   1203a:	480a      	ldr	r0, [pc, #40]	; (12064 <ull_conn_lll_ack_enqueue+0x64>)
   1203c:	f240 73b9 	movw	r3, #1977	; 0x7b9
   12040:	f007 faa7 	bl	19592 <assert_print>
   12044:	4040      	eors	r0, r0
   12046:	f380 8811 	msr	BASEPRI, r0
   1204a:	f04f 0003 	mov.w	r0, #3
   1204e:	df02      	svc	2
	lll_tx->handle = handle;
   12050:	2300      	movs	r3, #0
   12052:	801b      	strh	r3, [r3, #0]
   12054:	deff      	udf	#255	; 0xff
   12056:	bf00      	nop
   12058:	20000624 	.word	0x20000624
   1205c:	00020140 	.word	0x00020140
   12060:	00020188 	.word	0x00020188
   12064:	0001fbf4 	.word	0x0001fbf4

00012068 <ull_conn_tx_ack>:
{
   12068:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1206a:	7953      	ldrb	r3, [r2, #5]
{
   1206c:	b082      	sub	sp, #8
   1206e:	4614      	mov	r4, r2
   12070:	4605      	mov	r5, r0
   12072:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   12074:	b37b      	cbz	r3, 120d6 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   12076:	7923      	ldrb	r3, [r4, #4]
   12078:	f003 0203 	and.w	r2, r3, #3
   1207c:	2a03      	cmp	r2, #3
   1207e:	d00d      	beq.n	1209c <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   12080:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12084:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   12086:	bf04      	itt	eq
   12088:	f36f 0301 	bfceq	r3, #0, #2
   1208c:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1208e:	4621      	mov	r1, r4
   12090:	4628      	mov	r0, r5
}
   12092:	b002      	add	sp, #8
   12094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   12098:	f7fa ba0c 	b.w	c4b4 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   1209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   120a0:	429d      	cmp	r5, r3
   120a2:	d126      	bne.n	120f2 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   120a4:	6833      	ldr	r3, [r6, #0]
   120a6:	429c      	cmp	r4, r3
   120a8:	d03e      	beq.n	12128 <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
   120aa:	2b00      	cmp	r3, #0
   120ac:	d0ef      	beq.n	1208e <ull_conn_tx_ack+0x26>
   120ae:	4a85      	ldr	r2, [pc, #532]	; (122c4 <ull_conn_tx_ack+0x25c>)
   120b0:	4985      	ldr	r1, [pc, #532]	; (122c8 <ull_conn_tx_ack+0x260>)
   120b2:	4886      	ldr	r0, [pc, #536]	; (122cc <ull_conn_tx_ack+0x264>)
   120b4:	f240 73e9 	movw	r3, #2025	; 0x7e9
   120b8:	f007 fa6b 	bl	19592 <assert_print>
   120bc:	4040      	eors	r0, r0
   120be:	f380 8811 	msr	BASEPRI, r0
   120c2:	f04f 0003 	mov.w	r0, #3
   120c6:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   120c8:	4621      	mov	r1, r4
   120ca:	4628      	mov	r0, r5
}
   120cc:	b002      	add	sp, #8
   120ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   120d2:	f7fa b9ef 	b.w	c4b4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   120d6:	4a7b      	ldr	r2, [pc, #492]	; (122c4 <ull_conn_tx_ack+0x25c>)
   120d8:	497d      	ldr	r1, [pc, #500]	; (122d0 <ull_conn_tx_ack+0x268>)
   120da:	487c      	ldr	r0, [pc, #496]	; (122cc <ull_conn_tx_ack+0x264>)
   120dc:	f240 73c6 	movw	r3, #1990	; 0x7c6
   120e0:	f007 fa57 	bl	19592 <assert_print>
   120e4:	4040      	eors	r0, r0
   120e6:	f380 8811 	msr	BASEPRI, r0
   120ea:	f04f 0003 	mov.w	r0, #3
   120ee:	df02      	svc	2
   120f0:	e7c1      	b.n	12076 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   120f2:	462a      	mov	r2, r5
   120f4:	4877      	ldr	r0, [pc, #476]	; (122d4 <ull_conn_tx_ack+0x26c>)
   120f6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   120fa:	f7f6 fddd 	bl	8cb8 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   120fe:	79e2      	ldrb	r2, [r4, #7]
   12100:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12102:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   12104:	2a15      	cmp	r2, #21
   12106:	d80c      	bhi.n	12122 <ull_conn_tx_ack+0xba>
   12108:	e8df f002 	tbb	[pc, r2]
   1210c:	261f0b4e 	.word	0x261f0b4e
   12110:	180b185a 	.word	0x180b185a
   12114:	2d0b1f0b 	.word	0x2d0b1f0b
   12118:	150b0b0b 	.word	0x150b0b0b
   1211c:	8e42180b 	.word	0x8e42180b
   12120:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
   12122:	6833      	ldr	r3, [r6, #0]
   12124:	42a3      	cmp	r3, r4
   12126:	d1c0      	bne.n	120aa <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12128:	496b      	ldr	r1, [pc, #428]	; (122d8 <ull_conn_tx_ack+0x270>)
   1212a:	4620      	mov	r0, r4
}
   1212c:	b002      	add	sp, #8
   1212e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12132:	f7f6 bda9 	b.w	8c88 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   12136:	7a22      	ldrb	r2, [r4, #8]
   12138:	2a03      	cmp	r2, #3
   1213a:	d014      	beq.n	12166 <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   1213c:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   12140:	f36f 0241 	bfc	r2, #1, #1
   12144:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   12148:	e7ac      	b.n	120a4 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   1214a:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1214e:	f042 0202 	orr.w	r2, r2, #2
   12152:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   12156:	e7a5      	b.n	120a4 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   12158:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   1215c:	f042 0203 	orr.w	r2, r2, #3
   12160:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   12164:	e79e      	b.n	120a4 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   12166:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   1216a:	f022 0203 	bic.w	r2, r2, #3
   1216e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   12172:	2200      	movs	r2, #0
   12174:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   12178:	e794      	b.n	120a4 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1217a:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   1217e:	2a00      	cmp	r2, #0
   12180:	db7f      	blt.n	12282 <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
   12182:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   12186:	f36f 0200 	bfc	r2, #0, #1
   1218a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   1218e:	e789      	b.n	120a4 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   12190:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   12194:	f002 0107 	and.w	r1, r2, #7
   12198:	2901      	cmp	r1, #1
   1219a:	d183      	bne.n	120a4 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1219c:	2102      	movs	r1, #2
   1219e:	f361 0202 	bfi	r2, r1, #0, #3
   121a2:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
   121a6:	e77d      	b.n	120a4 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   121a8:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   121aa:	2a13      	cmp	r2, #19
   121ac:	bf08      	it	eq
   121ae:	2216      	moveq	r2, #22
   121b0:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   121b4:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   121b8:	3a01      	subs	r2, #1
   121ba:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   121be:	e771      	b.n	120a4 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   121c0:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   121c4:	2a00      	cmp	r2, #0
   121c6:	dac7      	bge.n	12158 <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   121c8:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   121cc:	f022 0203 	bic.w	r2, r2, #3
   121d0:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   121d4:	2200      	movs	r2, #0
   121d6:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   121da:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   121de:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   121e2:	e75f      	b.n	120a4 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   121e4:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   121e8:	2102      	movs	r1, #2
   121ea:	f361 0201 	bfi	r2, r1, #0, #2
   121ee:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   121f2:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   121f6:	2a00      	cmp	r2, #0
   121f8:	dac3      	bge.n	12182 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   121fa:	4a38      	ldr	r2, [pc, #224]	; (122dc <ull_conn_tx_ack+0x274>)
   121fc:	e892 0003 	ldmia.w	r2, {r0, r1}
   12200:	aa02      	add	r2, sp, #8
   12202:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   12206:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   1220a:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   1220e:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   12212:	f002 0207 	and.w	r2, r2, #7
   12216:	a802      	add	r0, sp, #8
   12218:	4402      	add	r2, r0
   1221a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   1221e:	f362 1106 	bfi	r1, r2, #4, #3
   12222:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   12226:	e7ac      	b.n	12182 <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   12228:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   1222c:	f36f 0241 	bfc	r2, #1, #1
   12230:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   12234:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   12238:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   1223c:	4282      	cmp	r2, r0
   1223e:	f43f af31 	beq.w	120a4 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   12242:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   12246:	f001 0207 	and.w	r2, r1, #7
   1224a:	2a03      	cmp	r2, #3
   1224c:	d005      	beq.n	1225a <ull_conn_tx_ack+0x1f2>
   1224e:	3203      	adds	r2, #3
   12250:	f002 0207 	and.w	r2, r2, #7
   12254:	2a01      	cmp	r2, #1
   12256:	f63f af64 	bhi.w	12122 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   1225a:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   1225e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   12262:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   12266:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1226a:	f001 0207 	and.w	r2, r1, #7
   1226e:	2a05      	cmp	r2, #5
   12270:	d022      	beq.n	122b8 <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
   12272:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   12276:	b98a      	cbnz	r2, 1229c <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
   12278:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   1227c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   12280:	e710      	b.n	120a4 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   12282:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   12286:	4a15      	ldr	r2, [pc, #84]	; (122dc <ull_conn_tx_ack+0x274>)
				conn->common.txn_lock = 0U;
   12288:	f36f 0141 	bfc	r1, #1, #1
   1228c:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   12290:	e892 0003 	ldmia.w	r2, {r0, r1}
   12294:	aa02      	add	r2, sp, #8
   12296:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   1229a:	e7b4      	b.n	12206 <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
   1229c:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   122a0:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   122a2:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   122a6:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   122aa:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   122ae:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   122b2:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   122b6:	e6f5      	b.n	120a4 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   122b8:	2204      	movs	r2, #4
   122ba:	f362 0102 	bfi	r1, r2, #0, #3
   122be:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   122c2:	e6ef      	b.n	120a4 <ull_conn_tx_ack+0x3c>
   122c4:	00020140 	.word	0x00020140
   122c8:	00020304 	.word	0x00020304
   122cc:	0001fbf4 	.word	0x0001fbf4
   122d0:	000202f8 	.word	0x000202f8
   122d4:	200012b0 	.word	0x200012b0
   122d8:	20002294 	.word	0x20002294
   122dc:	00020310 	.word	0x00020310

000122e0 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   122e0:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   122e4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   122e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   122ec:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   122ee:	bf14      	ite	ne
   122f0:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   122f2:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   122f4:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   122f8:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   122fa:	bf14      	ite	ne
   122fc:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   122fe:	3b0b      	subeq	r3, #11
   12300:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   12302:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   12304:	bf44      	itt	mi
   12306:	3b04      	submi	r3, #4
   12308:	b29b      	uxthmi	r3, r3
}
   1230a:	4298      	cmp	r0, r3
   1230c:	bf28      	it	cs
   1230e:	4618      	movcs	r0, r3
   12310:	4770      	bx	lr
   12312:	bf00      	nop

00012314 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   12314:	b510      	push	{r4, lr}
   12316:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12318:	b930      	cbnz	r0, 12328 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   1231a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1231e:	f36f 0382 	bfc	r3, #2, #1
   12322:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   12326:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12328:	4a09      	ldr	r2, [pc, #36]	; (12350 <ticker_update_latency_cancel_op_cb+0x3c>)
   1232a:	490a      	ldr	r1, [pc, #40]	; (12354 <ticker_update_latency_cancel_op_cb+0x40>)
   1232c:	480a      	ldr	r0, [pc, #40]	; (12358 <ticker_update_latency_cancel_op_cb+0x44>)
   1232e:	f240 23a9 	movw	r3, #681	; 0x2a9
   12332:	f007 f92e 	bl	19592 <assert_print>
   12336:	4040      	eors	r0, r0
   12338:	f380 8811 	msr	BASEPRI, r0
   1233c:	f04f 0003 	mov.w	r0, #3
   12340:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   12342:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   12346:	f36f 0382 	bfc	r3, #2, #1
   1234a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1234e:	bd10      	pop	{r4, pc}
   12350:	0002031c 	.word	0x0002031c
   12354:	00020364 	.word	0x00020364
   12358:	0001fbf4 	.word	0x0001fbf4

0001235c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1235c:	b900      	cbnz	r0, 12360 <ticker_op_cb+0x4>
   1235e:	4770      	bx	lr
{
   12360:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12362:	4a07      	ldr	r2, [pc, #28]	; (12380 <ticker_op_cb+0x24>)
   12364:	4907      	ldr	r1, [pc, #28]	; (12384 <ticker_op_cb+0x28>)
   12366:	4808      	ldr	r0, [pc, #32]	; (12388 <ticker_op_cb+0x2c>)
   12368:	f240 23a1 	movw	r3, #673	; 0x2a1
   1236c:	f007 f911 	bl	19592 <assert_print>
   12370:	4040      	eors	r0, r0
   12372:	f380 8811 	msr	BASEPRI, r0
   12376:	f04f 0003 	mov.w	r0, #3
   1237a:	df02      	svc	2
}
   1237c:	bd08      	pop	{r3, pc}
   1237e:	bf00      	nop
   12380:	0002031c 	.word	0x0002031c
   12384:	000201a0 	.word	0x000201a0
   12388:	0001fbf4 	.word	0x0001fbf4

0001238c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1238c:	2801      	cmp	r0, #1
   1238e:	d000      	beq.n	12392 <ticker_op_stop_adv_cb+0x6>
   12390:	4770      	bx	lr
{
   12392:	b510      	push	{r4, lr}
   12394:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12396:	f7fa f8ff 	bl	c598 <ull_disable_mark_get>
   1239a:	4284      	cmp	r4, r0
   1239c:	d00c      	beq.n	123b8 <ticker_op_stop_adv_cb+0x2c>
   1239e:	4a07      	ldr	r2, [pc, #28]	; (123bc <ticker_op_stop_adv_cb+0x30>)
   123a0:	4907      	ldr	r1, [pc, #28]	; (123c0 <ticker_op_stop_adv_cb+0x34>)
   123a2:	4808      	ldr	r0, [pc, #32]	; (123c4 <ticker_op_stop_adv_cb+0x38>)
   123a4:	f240 2399 	movw	r3, #665	; 0x299
   123a8:	f007 f8f3 	bl	19592 <assert_print>
   123ac:	4040      	eors	r0, r0
   123ae:	f380 8811 	msr	BASEPRI, r0
   123b2:	f04f 0003 	mov.w	r0, #3
   123b6:	df02      	svc	2
}
   123b8:	bd10      	pop	{r4, pc}
   123ba:	bf00      	nop
   123bc:	0002031c 	.word	0x0002031c
   123c0:	00020378 	.word	0x00020378
   123c4:	0001fbf4 	.word	0x0001fbf4

000123c8 <ull_periph_ticker_cb>:
{
   123c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123cc:	9c07      	ldr	r4, [sp, #28]
   123ce:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   123d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   123d4:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   123d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   123da:	4299      	cmp	r1, r3
   123dc:	d026      	beq.n	1242c <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   123de:	4606      	mov	r6, r0
   123e0:	4617      	mov	r7, r2
   123e2:	4601      	mov	r1, r0
   123e4:	462a      	mov	r2, r5
   123e6:	4620      	mov	r0, r4
   123e8:	f7fd ffda 	bl	103a0 <ull_conn_llcp>
		if (ret) {
   123ec:	b9f0      	cbnz	r0, 1242c <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   123ee:	7823      	ldrb	r3, [r4, #0]
   123f0:	3301      	adds	r3, #1
   123f2:	b2db      	uxtb	r3, r3
   123f4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   123f6:	b34b      	cbz	r3, 1244c <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   123f8:	491b      	ldr	r1, [pc, #108]	; (12468 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   123fa:	4b1c      	ldr	r3, [pc, #112]	; (1246c <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   123fc:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   123fe:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12402:	2200      	movs	r2, #0
	p.param = &conn->lll;
   12404:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   12406:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1240a:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1240e:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12410:	2001      	movs	r0, #1
   12412:	4611      	mov	r1, r2
   12414:	f7f6 fcf6 	bl	8e04 <mayfly_enqueue>
	LL_ASSERT(!err);
   12418:	b950      	cbnz	r0, 12430 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   1241a:	20ff      	movs	r0, #255	; 0xff
   1241c:	f7ff fa48 	bl	118b0 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12420:	4620      	mov	r0, r4
   12422:	21ff      	movs	r1, #255	; 0xff
}
   12424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12428:	f7ff bcba 	b.w	11da0 <ull_conn_tx_lll_enqueue>
}
   1242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   12430:	4a0f      	ldr	r2, [pc, #60]	; (12470 <ull_periph_ticker_cb+0xa8>)
   12432:	4910      	ldr	r1, [pc, #64]	; (12474 <ull_periph_ticker_cb+0xac>)
   12434:	4810      	ldr	r0, [pc, #64]	; (12478 <ull_periph_ticker_cb+0xb0>)
   12436:	f44f 730c 	mov.w	r3, #560	; 0x230
   1243a:	f007 f8aa 	bl	19592 <assert_print>
   1243e:	4040      	eors	r0, r0
   12440:	f380 8811 	msr	BASEPRI, r0
   12444:	f04f 0003 	mov.w	r0, #3
   12448:	df02      	svc	2
   1244a:	e7e6      	b.n	1241a <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   1244c:	4a08      	ldr	r2, [pc, #32]	; (12470 <ull_periph_ticker_cb+0xa8>)
   1244e:	490b      	ldr	r1, [pc, #44]	; (1247c <ull_periph_ticker_cb+0xb4>)
   12450:	4809      	ldr	r0, [pc, #36]	; (12478 <ull_periph_ticker_cb+0xb0>)
   12452:	f240 2323 	movw	r3, #547	; 0x223
   12456:	f007 f89c 	bl	19592 <assert_print>
   1245a:	4040      	eors	r0, r0
   1245c:	f380 8811 	msr	BASEPRI, r0
   12460:	f04f 0003 	mov.w	r0, #3
   12464:	df02      	svc	2
   12466:	e7c7      	b.n	123f8 <ull_periph_ticker_cb+0x30>
   12468:	20002394 	.word	0x20002394
   1246c:	200006e4 	.word	0x200006e4
   12470:	0002031c 	.word	0x0002031c
   12474:	0001fdd8 	.word	0x0001fdd8
   12478:	0001fbf4 	.word	0x0001fbf4
   1247c:	0002006c 	.word	0x0002006c

00012480 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   12480:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   12482:	b123      	cbz	r3, 1248e <ull_periph_latency_cancel+0xe>
   12484:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   12488:	f012 0304 	ands.w	r3, r2, #4
   1248c:	d000      	beq.n	12490 <ull_periph_latency_cancel+0x10>
   1248e:	4770      	bx	lr
{
   12490:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   12492:	f042 0204 	orr.w	r2, r2, #4
{
   12496:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   12498:	4c11      	ldr	r4, [pc, #68]	; (124e0 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   1249a:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1249e:	3105      	adds	r1, #5
   124a0:	2201      	movs	r2, #1
   124a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   124a6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   124aa:	e9cd 3300 	strd	r3, r3, [sp]
   124ae:	9006      	str	r0, [sp, #24]
   124b0:	b2ca      	uxtb	r2, r1
   124b2:	4618      	mov	r0, r3
   124b4:	2103      	movs	r1, #3
   124b6:	f7f7 fe59 	bl	a16c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124ba:	f030 0302 	bics.w	r3, r0, #2
   124be:	d00c      	beq.n	124da <ull_periph_latency_cancel+0x5a>
   124c0:	4a08      	ldr	r2, [pc, #32]	; (124e4 <ull_periph_latency_cancel+0x64>)
   124c2:	4909      	ldr	r1, [pc, #36]	; (124e8 <ull_periph_latency_cancel+0x68>)
   124c4:	4809      	ldr	r0, [pc, #36]	; (124ec <ull_periph_latency_cancel+0x6c>)
   124c6:	f240 13e9 	movw	r3, #489	; 0x1e9
   124ca:	f007 f862 	bl	19592 <assert_print>
   124ce:	4040      	eors	r0, r0
   124d0:	f380 8811 	msr	BASEPRI, r0
   124d4:	f04f 0003 	mov.w	r0, #3
   124d8:	df02      	svc	2
}
   124da:	b008      	add	sp, #32
   124dc:	bd10      	pop	{r4, pc}
   124de:	bf00      	nop
   124e0:	00012315 	.word	0x00012315
   124e4:	0002031c 	.word	0x0002031c
   124e8:	00020220 	.word	0x00020220
   124ec:	0001fbf4 	.word	0x0001fbf4

000124f0 <ll_start_enc_req_send>:
{
   124f0:	b570      	push	{r4, r5, r6, lr}
   124f2:	460e      	mov	r6, r1
   124f4:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   124f6:	f7fc f847 	bl	e588 <ll_connected_get>
	if (!conn) {
   124fa:	2800      	cmp	r0, #0
   124fc:	d040      	beq.n	12580 <ll_start_enc_req_send+0x90>
	if (error_code) {
   124fe:	4604      	mov	r4, r0
   12500:	b95e      	cbnz	r6, 1251a <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   12502:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   12506:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1250a:	429a      	cmp	r2, r3
   1250c:	d003      	beq.n	12516 <ll_start_enc_req_send+0x26>
   1250e:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   12512:	2b03      	cmp	r3, #3
   12514:	d026      	beq.n	12564 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   12516:	200c      	movs	r0, #12
}
   12518:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1251a:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   1251e:	f010 0004 	ands.w	r0, r0, #4
   12522:	d112      	bne.n	1254a <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   12524:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   12528:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1252c:	429a      	cmp	r2, r3
   1252e:	d0f2      	beq.n	12516 <ll_start_enc_req_send+0x26>
   12530:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   12534:	2b03      	cmp	r3, #3
   12536:	d1ee      	bne.n	12516 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12538:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   1253c:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12540:	f360 0301 	bfi	r3, r0, #0, #2
   12544:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   12548:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1254a:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1254e:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   12552:	4293      	cmp	r3, r2
   12554:	d1df      	bne.n	12516 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   12556:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   12558:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   1255c:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   12560:	2000      	movs	r0, #0
}
   12562:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   12564:	2210      	movs	r2, #16
   12566:	4629      	mov	r1, r5
   12568:	f200 1071 	addw	r0, r0, #369	; 0x171
   1256c:	f008 f971 	bl	1a852 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12570:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   12574:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   12578:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   1257c:	4630      	mov	r0, r6
}
   1257e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12580:	2002      	movs	r0, #2
}
   12582:	bd70      	pop	{r4, r5, r6, pc}

00012584 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   12584:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   12586:	fb02 1c01 	mla	ip, r2, r1, r1
   1258a:	7802      	ldrb	r2, [r0, #0]
   1258c:	491c      	ldr	r1, [pc, #112]	; (12600 <lll_chan_sel_1+0x7c>)
{
   1258e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   12592:	4494      	add	ip, r2
   12594:	fb81 210c 	smull	r2, r1, r1, ip
   12598:	4461      	add	r1, ip
   1259a:	1149      	asrs	r1, r1, #5
   1259c:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   125a0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   125a4:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   125a6:	ebac 0101 	sub.w	r1, ip, r1
   125aa:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   125ac:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   125ae:	08c4      	lsrs	r4, r0, #3
   125b0:	f001 0107 	and.w	r1, r1, #7
   125b4:	f813 c004 	ldrb.w	ip, [r3, r4]
   125b8:	fa4c f101 	asr.w	r1, ip, r1
   125bc:	f011 0101 	ands.w	r1, r1, #1
   125c0:	d11d      	bne.n	125fe <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   125c2:	fbb0 f2f5 	udiv	r2, r0, r5
   125c6:	fb05 0212 	mls	r2, r5, r2, r0
   125ca:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   125cc:	f103 3eff 	add.w	lr, r3, #4294967295
   125d0:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   125d2:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   125d4:	f100 0c08 	add.w	ip, r0, #8
   125d8:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   125dc:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   125e0:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   125e4:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   125e8:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   125ec:	d002      	beq.n	125f4 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   125ee:	b132      	cbz	r2, 125fe <lll_chan_sel_1+0x7a>
				chan_index--;
   125f0:	3a01      	subs	r2, #1
   125f2:	b2d2      	uxtb	r2, r2
			chan_next++;
   125f4:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   125f6:	4584      	cmp	ip, r0
   125f8:	d1f2      	bne.n	125e0 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   125fa:	45a6      	cmp	lr, r4
   125fc:	d1ea      	bne.n	125d4 <lll_chan_sel_1+0x50>
}
   125fe:	bd30      	pop	{r4, r5, pc}
   12600:	dd67c8a7 	.word	0xdd67c8a7

00012604 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   12604:	8842      	ldrh	r2, [r0, #2]
   12606:	8800      	ldrh	r0, [r0, #0]
}
   12608:	4050      	eors	r0, r2
   1260a:	4770      	bx	lr

0001260c <lll_chan_sel_2>:
{
   1260c:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1260e:	4d2f      	ldr	r5, [pc, #188]	; (126cc <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   12610:	4c2f      	ldr	r4, [pc, #188]	; (126d0 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   12612:	4048      	eors	r0, r1
   12614:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   12618:	0a07      	lsrs	r7, r0, #8
   1261a:	b2c0      	uxtb	r0, r0
   1261c:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   12620:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   12624:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   12628:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1262c:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   12630:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   12634:	433e      	orrs	r6, r7
   12636:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1263a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1263e:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   12642:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   12646:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1264a:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1264c:	f3c0 4007 	ubfx	r0, r0, #16, #8
   12650:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   12654:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   12658:	f10c 3cff 	add.w	ip, ip, #4294967295
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1265c:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1265e:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   12662:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   12664:	d1d8      	bne.n	12618 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   12666:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   12668:	481a      	ldr	r0, [pc, #104]	; (126d4 <lll_chan_sel_2+0xc8>)
   1266a:	fba0 4001 	umull	r4, r0, r0, r1
   1266e:	1a0c      	subs	r4, r1, r0
   12670:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   12674:	0940      	lsrs	r0, r0, #5
   12676:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1267a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1267e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   12680:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   12684:	f000 0507 	and.w	r5, r0, #7
   12688:	5d14      	ldrb	r4, [r2, r4]
   1268a:	412c      	asrs	r4, r5
   1268c:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1268e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   12690:	d41a      	bmi.n	126c8 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   12692:	fb01 f303 	mul.w	r3, r1, r3
   12696:	1e56      	subs	r6, r2, #1
   12698:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1269c:	3204      	adds	r2, #4
	chan_next = 0U;
   1269e:	4660      	mov	r0, ip
		bite = *chan_map;
   126a0:	f100 0508 	add.w	r5, r0, #8
   126a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   126a8:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   126aa:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   126ae:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   126b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   126b6:	d002      	beq.n	126be <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   126b8:	b133      	cbz	r3, 126c8 <lll_chan_sel_2+0xbc>
				chan_index--;
   126ba:	3b01      	subs	r3, #1
   126bc:	b2db      	uxtb	r3, r3
			chan_next++;
   126be:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   126c0:	42a8      	cmp	r0, r5
   126c2:	d1f2      	bne.n	126aa <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   126c4:	42b2      	cmp	r2, r6
   126c6:	d1eb      	bne.n	126a0 <lll_chan_sel_2+0x94>
}
   126c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126ca:	bf00      	nop
   126cc:	00022110 	.word	0x00022110
   126d0:	00088440 	.word	0x00088440
   126d4:	bacf914d 	.word	0xbacf914d

000126d8 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   126d8:	4668      	mov	r0, sp
   126da:	f020 0107 	bic.w	r1, r0, #7
   126de:	468d      	mov	sp, r1
   126e0:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   126e2:	f002 fc15 	bl	14f10 <isr_radio>

	ISR_DIRECT_PM();
   126e6:	f7f0 fa6f 	bl	2bc8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   126ea:	f7f0 fb5f 	bl	2dac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   126ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   126f2:	4685      	mov	sp, r0
   126f4:	4770      	bx	lr
   126f6:	bf00      	nop

000126f8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   126f8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   126fa:	4b09      	ldr	r3, [pc, #36]	; (12720 <rtc0_nrf5_isr+0x28>)
   126fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   12700:	b93a      	cbnz	r2, 12712 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   12702:	2001      	movs	r0, #1
   12704:	f7f6 fbd6 	bl	8eb4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   12708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1270c:	2002      	movs	r0, #2
   1270e:	f7f6 bbd1 	b.w	8eb4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   12712:	2000      	movs	r0, #0
   12714:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   12718:	f7f7 fc48 	bl	9fac <ticker_trigger>
   1271c:	e7f1      	b.n	12702 <rtc0_nrf5_isr+0xa>
   1271e:	bf00      	nop
   12720:	4000b000 	.word	0x4000b000

00012724 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   12724:	2000      	movs	r0, #0
   12726:	f7f6 bbc5 	b.w	8eb4 <mayfly_run>
   1272a:	bf00      	nop

0001272c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1272c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1272e:	4b0e      	ldr	r3, [pc, #56]	; (12768 <ticker_stop_op_cb+0x3c>)
   12730:	4c0e      	ldr	r4, [pc, #56]	; (1276c <ticker_stop_op_cb+0x40>)
   12732:	781a      	ldrb	r2, [r3, #0]
   12734:	7823      	ldrb	r3, [r4, #0]
   12736:	429a      	cmp	r2, r3
   12738:	d006      	beq.n	12748 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1273a:	490d      	ldr	r1, [pc, #52]	; (12770 <ticker_stop_op_cb+0x44>)
   1273c:	4a0d      	ldr	r2, [pc, #52]	; (12774 <ticker_stop_op_cb+0x48>)
   1273e:	7809      	ldrb	r1, [r1, #0]
   12740:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   12742:	3301      	adds	r3, #1
   12744:	7023      	strb	r3, [r4, #0]
}
   12746:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   12748:	4a0b      	ldr	r2, [pc, #44]	; (12778 <ticker_stop_op_cb+0x4c>)
   1274a:	490c      	ldr	r1, [pc, #48]	; (1277c <ticker_stop_op_cb+0x50>)
   1274c:	480c      	ldr	r0, [pc, #48]	; (12780 <ticker_stop_op_cb+0x54>)
   1274e:	f240 331d 	movw	r3, #797	; 0x31d
   12752:	f006 ff1e 	bl	19592 <assert_print>
   12756:	4040      	eors	r0, r0
   12758:	f380 8811 	msr	BASEPRI, r0
   1275c:	f04f 0003 	mov.w	r0, #3
   12760:	df02      	svc	2
	preempt_stop_ack++;
   12762:	7823      	ldrb	r3, [r4, #0]
   12764:	e7e9      	b.n	1273a <ticker_stop_op_cb+0xe>
   12766:	bf00      	nop
   12768:	2000299b 	.word	0x2000299b
   1276c:	2000299a 	.word	0x2000299a
   12770:	20002996 	.word	0x20002996
   12774:	20002997 	.word	0x20002997
   12778:	000203a8 	.word	0x000203a8
   1277c:	000203f0 	.word	0x000203f0
   12780:	0001fbf4 	.word	0x0001fbf4

00012784 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   12784:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12786:	b9f8      	cbnz	r0, 127c8 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   12788:	4b1e      	ldr	r3, [pc, #120]	; (12804 <ticker_start_op_cb+0x80>)
   1278a:	4d1f      	ldr	r5, [pc, #124]	; (12808 <ticker_start_op_cb+0x84>)
   1278c:	781a      	ldrb	r2, [r3, #0]
   1278e:	782b      	ldrb	r3, [r5, #0]
   12790:	429a      	cmp	r2, r3
   12792:	d027      	beq.n	127e4 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   12794:	4a1d      	ldr	r2, [pc, #116]	; (1280c <ticker_start_op_cb+0x88>)
   12796:	4c1e      	ldr	r4, [pc, #120]	; (12810 <ticker_start_op_cb+0x8c>)
   12798:	7812      	ldrb	r2, [r2, #0]
   1279a:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1279c:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1279e:	4291      	cmp	r1, r2
	preempt_start_ack++;
   127a0:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   127a2:	b2d3      	uxtb	r3, r2
   127a4:	d00d      	beq.n	127c2 <ticker_start_op_cb+0x3e>
   127a6:	4a1b      	ldr	r2, [pc, #108]	; (12814 <ticker_start_op_cb+0x90>)
   127a8:	491b      	ldr	r1, [pc, #108]	; (12818 <ticker_start_op_cb+0x94>)
   127aa:	481c      	ldr	r0, [pc, #112]	; (1281c <ticker_start_op_cb+0x98>)
   127ac:	f240 332b 	movw	r3, #811	; 0x32b
   127b0:	f006 feef 	bl	19592 <assert_print>
   127b4:	4040      	eors	r0, r0
   127b6:	f380 8811 	msr	BASEPRI, r0
   127ba:	f04f 0003 	mov.w	r0, #3
   127be:	df02      	svc	2
	preempt_req++;
   127c0:	7823      	ldrb	r3, [r4, #0]
   127c2:	3301      	adds	r3, #1
   127c4:	7023      	strb	r3, [r4, #0]
}
   127c6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   127c8:	4a12      	ldr	r2, [pc, #72]	; (12814 <ticker_start_op_cb+0x90>)
   127ca:	4915      	ldr	r1, [pc, #84]	; (12820 <ticker_start_op_cb+0x9c>)
   127cc:	4813      	ldr	r0, [pc, #76]	; (1281c <ticker_start_op_cb+0x98>)
   127ce:	f240 3326 	movw	r3, #806	; 0x326
   127d2:	f006 fede 	bl	19592 <assert_print>
   127d6:	4040      	eors	r0, r0
   127d8:	f380 8811 	msr	BASEPRI, r0
   127dc:	f04f 0003 	mov.w	r0, #3
   127e0:	df02      	svc	2
   127e2:	e7d1      	b.n	12788 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   127e4:	4a0b      	ldr	r2, [pc, #44]	; (12814 <ticker_start_op_cb+0x90>)
   127e6:	490f      	ldr	r1, [pc, #60]	; (12824 <ticker_start_op_cb+0xa0>)
   127e8:	480c      	ldr	r0, [pc, #48]	; (1281c <ticker_start_op_cb+0x98>)
   127ea:	f44f 734a 	mov.w	r3, #808	; 0x328
   127ee:	f006 fed0 	bl	19592 <assert_print>
   127f2:	4040      	eors	r0, r0
   127f4:	f380 8811 	msr	BASEPRI, r0
   127f8:	f04f 0003 	mov.w	r0, #3
   127fc:	df02      	svc	2
	preempt_start_ack++;
   127fe:	782b      	ldrb	r3, [r5, #0]
   12800:	e7c8      	b.n	12794 <ticker_start_op_cb+0x10>
   12802:	bf00      	nop
   12804:	20002999 	.word	0x20002999
   12808:	20002998 	.word	0x20002998
   1280c:	20002996 	.word	0x20002996
   12810:	20002997 	.word	0x20002997
   12814:	000203a8 	.word	0x000203a8
   12818:	00020440 	.word	0x00020440
   1281c:	0001fbf4 	.word	0x0001fbf4
   12820:	000201a0 	.word	0x000201a0
   12824:	00020418 	.word	0x00020418

00012828 <isr_race>:
	radio_status_reset();
   12828:	f002 bc8e 	b.w	15148 <radio_status_reset>

0001282c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1282c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1282e:	4a18      	ldr	r2, [pc, #96]	; (12890 <preempt_ticker_cb+0x64>)
   12830:	4c18      	ldr	r4, [pc, #96]	; (12894 <preempt_ticker_cb+0x68>)
   12832:	7812      	ldrb	r2, [r2, #0]
   12834:	7823      	ldrb	r3, [r4, #0]
   12836:	429a      	cmp	r2, r3
   12838:	d01b      	beq.n	12872 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1283a:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1283c:	4b16      	ldr	r3, [pc, #88]	; (12898 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1283e:	3101      	adds	r1, #1
   12840:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12842:	2200      	movs	r2, #0
	preempt_ack++;
   12844:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   12846:	9903      	ldr	r1, [sp, #12]
   12848:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1284a:	2001      	movs	r0, #1
   1284c:	4611      	mov	r1, r2
   1284e:	f7f6 fad9 	bl	8e04 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   12852:	b900      	cbnz	r0, 12856 <preempt_ticker_cb+0x2a>
}
   12854:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   12856:	4a11      	ldr	r2, [pc, #68]	; (1289c <preempt_ticker_cb+0x70>)
   12858:	4911      	ldr	r1, [pc, #68]	; (128a0 <preempt_ticker_cb+0x74>)
   1285a:	4812      	ldr	r0, [pc, #72]	; (128a4 <preempt_ticker_cb+0x78>)
   1285c:	f240 33a9 	movw	r3, #937	; 0x3a9
   12860:	f006 fe97 	bl	19592 <assert_print>
   12864:	4040      	eors	r0, r0
   12866:	f380 8811 	msr	BASEPRI, r0
   1286a:	f04f 0003 	mov.w	r0, #3
   1286e:	df02      	svc	2
}
   12870:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   12872:	4a0a      	ldr	r2, [pc, #40]	; (1289c <preempt_ticker_cb+0x70>)
   12874:	490c      	ldr	r1, [pc, #48]	; (128a8 <preempt_ticker_cb+0x7c>)
   12876:	480b      	ldr	r0, [pc, #44]	; (128a4 <preempt_ticker_cb+0x78>)
   12878:	f240 33a3 	movw	r3, #931	; 0x3a3
   1287c:	f006 fe89 	bl	19592 <assert_print>
   12880:	4040      	eors	r0, r0
   12882:	f380 8811 	msr	BASEPRI, r0
   12886:	f04f 0003 	mov.w	r0, #3
   1288a:	df02      	svc	2
   1288c:	e7d5      	b.n	1283a <preempt_ticker_cb+0xe>
   1288e:	bf00      	nop
   12890:	20002997 	.word	0x20002997
   12894:	20002996 	.word	0x20002996
   12898:	200006f4 	.word	0x200006f4
   1289c:	000203a8 	.word	0x000203a8
   128a0:	0001fed4 	.word	0x0001fed4
   128a4:	0001fbf4 	.word	0x0001fbf4
   128a8:	0002045c 	.word	0x0002045c

000128ac <preempt_ticker_stop>:
{
   128ac:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   128ae:	4917      	ldr	r1, [pc, #92]	; (1290c <preempt_ticker_stop+0x60>)
   128b0:	4a17      	ldr	r2, [pc, #92]	; (12910 <preempt_ticker_stop+0x64>)
   128b2:	780b      	ldrb	r3, [r1, #0]
   128b4:	7812      	ldrb	r2, [r2, #0]
   128b6:	429a      	cmp	r2, r3
{
   128b8:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   128ba:	d122      	bne.n	12902 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   128bc:	4b15      	ldr	r3, [pc, #84]	; (12914 <preempt_ticker_stop+0x68>)
   128be:	4a16      	ldr	r2, [pc, #88]	; (12918 <preempt_ticker_stop+0x6c>)
   128c0:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   128c2:	7812      	ldrb	r2, [r2, #0]
   128c4:	429a      	cmp	r2, r3
   128c6:	d01c      	beq.n	12902 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   128c8:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   128ca:	4b14      	ldr	r3, [pc, #80]	; (1291c <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   128cc:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   128ce:	2200      	movs	r2, #0
	preempt_stop_req++;
   128d0:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   128d2:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   128d4:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   128d6:	4611      	mov	r1, r2
   128d8:	4610      	mov	r0, r2
   128da:	f7f7 fc5f 	bl	a19c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   128de:	4604      	mov	r4, r0
   128e0:	b178      	cbz	r0, 12902 <preempt_ticker_stop+0x56>
   128e2:	2802      	cmp	r0, #2
   128e4:	d00e      	beq.n	12904 <preempt_ticker_stop+0x58>
   128e6:	4a0e      	ldr	r2, [pc, #56]	; (12920 <preempt_ticker_stop+0x74>)
   128e8:	490e      	ldr	r1, [pc, #56]	; (12924 <preempt_ticker_stop+0x78>)
   128ea:	480f      	ldr	r0, [pc, #60]	; (12928 <preempt_ticker_stop+0x7c>)
   128ec:	f240 3395 	movw	r3, #917	; 0x395
   128f0:	f006 fe4f 	bl	19592 <assert_print>
   128f4:	4040      	eors	r0, r0
   128f6:	f380 8811 	msr	BASEPRI, r0
   128fa:	f04f 0003 	mov.w	r0, #3
   128fe:	df02      	svc	2
   12900:	e000      	b.n	12904 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   12902:	2400      	movs	r4, #0
}
   12904:	4620      	mov	r0, r4
   12906:	b002      	add	sp, #8
   12908:	bd10      	pop	{r4, pc}
   1290a:	bf00      	nop
   1290c:	2000299b 	.word	0x2000299b
   12910:	2000299a 	.word	0x2000299a
   12914:	20002996 	.word	0x20002996
   12918:	20002997 	.word	0x20002997
   1291c:	0001272d 	.word	0x0001272d
   12920:	000203a8 	.word	0x000203a8
   12924:	0001ffa8 	.word	0x0001ffa8
   12928:	0001fbf4 	.word	0x0001fbf4

0001292c <preempt_ticker_start>:
{
   1292c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
   12930:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12a34 <preempt_ticker_start+0x108>
{
   12934:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
   12936:	4a40      	ldr	r2, [pc, #256]	; (12a38 <preempt_ticker_start+0x10c>)
   12938:	f898 3000 	ldrb.w	r3, [r8]
   1293c:	7812      	ldrb	r2, [r2, #0]
   1293e:	429a      	cmp	r2, r3
{
   12940:	b08a      	sub	sp, #40	; 0x28
   12942:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   12944:	d048      	beq.n	129d8 <preempt_ticker_start+0xac>
		if (!prev || prev->is_aborted ||
   12946:	2c00      	cmp	r4, #0
   12948:	d061      	beq.n	12a0e <preempt_ticker_start+0xe2>
   1294a:	7f23      	ldrb	r3, [r4, #28]
   1294c:	079b      	lsls	r3, r3, #30
   1294e:	d45e      	bmi.n	12a0e <preempt_ticker_start+0xe2>
		ull = HDR_LLL2ULL(p->param);
   12950:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
   12952:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
   12956:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   12958:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12a3c <preempt_ticker_start+0x110>
		preempt_to = MAX(ull->ticks_active_to_start,
   1295c:	68df      	ldr	r7, [r3, #12]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1295e:	f8d9 0000 	ldr.w	r0, [r9]
		preempt_to = MAX(ull->ticks_active_to_start,
   12962:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   12966:	4291      	cmp	r1, r2
   12968:	bf2c      	ite	cs
   1296a:	ebc7 0701 	rsbcs	r7, r7, r1
   1296e:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   12972:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   12976:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1297a:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
   1297c:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   12980:	d046      	beq.n	12a10 <preempt_ticker_start+0xe4>
		ret = preempt_ticker_stop();
   12982:	f7ff ff93 	bl	128ac <preempt_ticker_stop>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12986:	f030 0302 	bics.w	r3, r0, #2
   1298a:	d144      	bne.n	12a16 <preempt_ticker_start+0xea>
		prev->is_aborted = 1U;
   1298c:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1298e:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   12990:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
   12994:	f043 0302 	orr.w	r3, r3, #2
   12998:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1299a:	4620      	mov	r0, r4
   1299c:	69a3      	ldr	r3, [r4, #24]
   1299e:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   129a0:	4b27      	ldr	r3, [pc, #156]	; (12a40 <preempt_ticker_start+0x114>)
	preempt_start_req++;
   129a2:	f898 4000 	ldrb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   129a6:	9700      	str	r7, [sp, #0]
   129a8:	e9cd 3507 	strd	r3, r5, [sp, #28]
   129ac:	4b25      	ldr	r3, [pc, #148]	; (12a44 <preempt_ticker_start+0x118>)
	ticks_at_preempt = ticks_at_preempt_new;
   129ae:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   129b2:	2200      	movs	r2, #0
	preempt_start_req++;
   129b4:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   129b6:	e9cd 3505 	strd	r3, r5, [sp, #20]
   129ba:	e9cd 2203 	strd	r2, r2, [sp, #12]
   129be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   129c2:	4653      	mov	r3, sl
   129c4:	4611      	mov	r1, r2
   129c6:	4610      	mov	r0, r2
	preempt_start_req++;
   129c8:	b2e4      	uxtb	r4, r4
   129ca:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   129ce:	f7f7 fb5b 	bl	a088 <ticker_start>
}
   129d2:	b00a      	add	sp, #40	; 0x28
   129d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   129d8:	4b1b      	ldr	r3, [pc, #108]	; (12a48 <preempt_ticker_start+0x11c>)
   129da:	4a1c      	ldr	r2, [pc, #112]	; (12a4c <preempt_ticker_start+0x120>)
   129dc:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   129de:	7812      	ldrb	r2, [r2, #0]
   129e0:	429a      	cmp	r2, r3
   129e2:	d1b0      	bne.n	12946 <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
   129e4:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
   129e6:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
   129ea:	681b      	ldr	r3, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
   129ec:	f8df 904c 	ldr.w	r9, [pc, #76]	; 12a3c <preempt_ticker_start+0x110>
   129f0:	68df      	ldr	r7, [r3, #12]
   129f2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   129f6:	4291      	cmp	r1, r2
   129f8:	bf2c      	ite	cs
   129fa:	ebc7 0701 	rsbcs	r7, r7, r1
   129fe:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   12a02:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   12a06:	4605      	mov	r5, r0
   12a08:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   12a0c:	e7c8      	b.n	129a0 <preempt_ticker_start+0x74>
			return TICKER_STATUS_SUCCESS;
   12a0e:	2000      	movs	r0, #0
}
   12a10:	b00a      	add	sp, #40	; 0x28
   12a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12a16:	4a0e      	ldr	r2, [pc, #56]	; (12a50 <preempt_ticker_start+0x124>)
   12a18:	490e      	ldr	r1, [pc, #56]	; (12a54 <preempt_ticker_start+0x128>)
   12a1a:	480f      	ldr	r0, [pc, #60]	; (12a58 <preempt_ticker_start+0x12c>)
   12a1c:	f44f 7355 	mov.w	r3, #852	; 0x354
   12a20:	f006 fdb7 	bl	19592 <assert_print>
   12a24:	4040      	eors	r0, r0
   12a26:	f380 8811 	msr	BASEPRI, r0
   12a2a:	f04f 0003 	mov.w	r0, #3
   12a2e:	df02      	svc	2
   12a30:	e7ac      	b.n	1298c <preempt_ticker_start+0x60>
   12a32:	bf00      	nop
   12a34:	20002999 	.word	0x20002999
   12a38:	20002998 	.word	0x20002998
   12a3c:	200023bc 	.word	0x200023bc
   12a40:	00012785 	.word	0x00012785
   12a44:	0001282d 	.word	0x0001282d
   12a48:	20002996 	.word	0x20002996
   12a4c:	20002997 	.word	0x20002997
   12a50:	000203a8 	.word	0x000203a8
   12a54:	0001ffa8 	.word	0x0001ffa8
   12a58:	0001fbf4 	.word	0x0001fbf4

00012a5c <preempt>:

static void preempt(void *param)
{
   12a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   12a5e:	4e4b      	ldr	r6, [pc, #300]	; (12b8c <preempt+0x130>)
   12a60:	68b3      	ldr	r3, [r6, #8]
{
   12a62:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   12a64:	b1b3      	cbz	r3, 12a94 <preempt+0x38>
   12a66:	6833      	ldr	r3, [r6, #0]
   12a68:	b1a3      	cbz	r3, 12a94 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   12a6a:	23ff      	movs	r3, #255	; 0xff
   12a6c:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   12a6e:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   12a72:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   12a76:	f7f9 fec3 	bl	c800 <ull_prepare_dequeue_iter>
	if (!next) {
   12a7a:	4602      	mov	r2, r0
   12a7c:	b150      	cbz	r0, 12a94 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   12a7e:	7f11      	ldrb	r1, [r2, #28]
   12a80:	f011 0403 	ands.w	r4, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
   12a84:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   12a88:	d006      	beq.n	12a98 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   12a8a:	f7f9 feb9 	bl	c800 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   12a8e:	4602      	mov	r2, r0
   12a90:	2800      	cmp	r0, #0
   12a92:	d1f4      	bne.n	12a7e <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   12a94:	b009      	add	sp, #36	; 0x24
   12a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   12a98:	4295      	cmp	r5, r2
   12a9a:	d126      	bne.n	12aea <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   12a9c:	6873      	ldr	r3, [r6, #4]
   12a9e:	6831      	ldr	r1, [r6, #0]
   12aa0:	68e8      	ldr	r0, [r5, #12]
   12aa2:	aa03      	add	r2, sp, #12
   12aa4:	4798      	blx	r3
	if (!err) {
   12aa6:	4607      	mov	r7, r0
   12aa8:	b1b0      	cbz	r0, 12ad8 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   12aaa:	68b3      	ldr	r3, [r6, #8]
   12aac:	6831      	ldr	r1, [r6, #0]
   12aae:	4620      	mov	r0, r4
   12ab0:	4798      	blx	r3
	if (err == -EAGAIN) {
   12ab2:	f117 0f0b 	cmn.w	r7, #11
   12ab6:	d02d      	beq.n	12b14 <preempt+0xb8>
		LL_ASSERT(err == -ECANCELED);
   12ab8:	378c      	adds	r7, #140	; 0x8c
   12aba:	d0eb      	beq.n	12a94 <preempt+0x38>
   12abc:	4a34      	ldr	r2, [pc, #208]	; (12b90 <preempt+0x134>)
   12abe:	4935      	ldr	r1, [pc, #212]	; (12b94 <preempt+0x138>)
   12ac0:	4835      	ldr	r0, [pc, #212]	; (12b98 <preempt+0x13c>)
   12ac2:	f240 4303 	movw	r3, #1027	; 0x403
   12ac6:	f006 fd64 	bl	19592 <assert_print>
   12aca:	4040      	eors	r0, r0
   12acc:	f380 8811 	msr	BASEPRI, r0
   12ad0:	f04f 0003 	mov.w	r0, #3
   12ad4:	df02      	svc	2
   12ad6:	e7dd      	b.n	12a94 <preempt+0x38>
		next->is_aborted = 1;
   12ad8:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   12ada:	69aa      	ldr	r2, [r5, #24]
   12adc:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   12ade:	f043 0302 	orr.w	r3, r3, #2
   12ae2:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   12ae4:	4628      	mov	r0, r5
   12ae6:	4790      	blx	r2
		return;
   12ae8:	e7d4      	b.n	12a94 <preempt+0x38>
		ret = preempt_ticker_start(next, NULL, next);
   12aea:	4621      	mov	r1, r4
   12aec:	4610      	mov	r0, r2
   12aee:	f7ff ff1d 	bl	1292c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12af2:	f030 0302 	bics.w	r3, r0, #2
   12af6:	d0cd      	beq.n	12a94 <preempt+0x38>
   12af8:	4a25      	ldr	r2, [pc, #148]	; (12b90 <preempt+0x134>)
   12afa:	4928      	ldr	r1, [pc, #160]	; (12b9c <preempt+0x140>)
   12afc:	4826      	ldr	r0, [pc, #152]	; (12b98 <preempt+0x13c>)
   12afe:	f240 33cf 	movw	r3, #975	; 0x3cf
   12b02:	f006 fd46 	bl	19592 <assert_print>
   12b06:	4040      	eors	r0, r0
   12b08:	f380 8811 	msr	BASEPRI, r0
   12b0c:	f04f 0003 	mov.w	r0, #3
   12b10:	df02      	svc	2
   12b12:	e7bf      	b.n	12a94 <preempt+0x38>
		iter_idx = UINT8_MAX;
   12b14:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   12b16:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   12b1a:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   12b1e:	f7f9 fe6f 	bl	c800 <ull_prepare_dequeue_iter>
		while (iter) {
   12b22:	b928      	cbnz	r0, 12b30 <preempt+0xd4>
   12b24:	e013      	b.n	12b4e <preempt+0xf2>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   12b26:	f10d 000b 	add.w	r0, sp, #11
   12b2a:	f7f9 fe69 	bl	c800 <ull_prepare_dequeue_iter>
		while (iter) {
   12b2e:	b170      	cbz	r0, 12b4e <preempt+0xf2>
			if (!iter->is_aborted &&
   12b30:	7f03      	ldrb	r3, [r0, #28]
   12b32:	079a      	lsls	r2, r3, #30
   12b34:	d4f7      	bmi.n	12b26 <preempt+0xca>
			    event.curr.param == iter->prepare_param.param) {
   12b36:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   12b38:	6831      	ldr	r1, [r6, #0]
   12b3a:	4291      	cmp	r1, r2
   12b3c:	d1f3      	bne.n	12b26 <preempt+0xca>
				iter->is_aborted = 1;
   12b3e:	f043 0302 	orr.w	r3, r3, #2
   12b42:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   12b44:	6983      	ldr	r3, [r0, #24]
   12b46:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   12b48:	f88d 400b 	strb.w	r4, [sp, #11]
   12b4c:	e7eb      	b.n	12b26 <preempt+0xca>
	struct lll_prepare_param prepare_param = {0};
   12b4e:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   12b50:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   12b52:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   12b54:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   12b56:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   12b5a:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   12b5c:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   12b5e:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   12b60:	9b03      	ldr	r3, [sp, #12]
   12b62:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   12b66:	aa04      	add	r2, sp, #16
   12b68:	f7f9 fe0a 	bl	c780 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   12b6c:	2800      	cmp	r0, #0
   12b6e:	d191      	bne.n	12a94 <preempt+0x38>
   12b70:	4a07      	ldr	r2, [pc, #28]	; (12b90 <preempt+0x134>)
   12b72:	490b      	ldr	r1, [pc, #44]	; (12ba0 <preempt+0x144>)
   12b74:	4808      	ldr	r0, [pc, #32]	; (12b98 <preempt+0x13c>)
   12b76:	f240 4301 	movw	r3, #1025	; 0x401
   12b7a:	f006 fd0a 	bl	19592 <assert_print>
   12b7e:	4040      	eors	r0, r0
   12b80:	f380 8811 	msr	BASEPRI, r0
   12b84:	f04f 0003 	mov.w	r0, #3
   12b88:	df02      	svc	2
   12b8a:	e783      	b.n	12a94 <preempt+0x38>
   12b8c:	200023a8 	.word	0x200023a8
   12b90:	000203a8 	.word	0x000203a8
   12b94:	00020480 	.word	0x00020480
   12b98:	0001fbf4 	.word	0x0001fbf4
   12b9c:	0001ffa8 	.word	0x0001ffa8
   12ba0:	00020478 	.word	0x00020478

00012ba4 <lll_init>:
{
   12ba4:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   12ba6:	4816      	ldr	r0, [pc, #88]	; (12c00 <lll_init+0x5c>)
   12ba8:	f004 ff56 	bl	17a58 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   12bac:	4b15      	ldr	r3, [pc, #84]	; (12c04 <lll_init+0x60>)
   12bae:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   12bb0:	b310      	cbz	r0, 12bf8 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   12bb2:	4b15      	ldr	r3, [pc, #84]	; (12c08 <lll_init+0x64>)
   12bb4:	2400      	movs	r4, #0
   12bb6:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   12bb8:	f000 fb1a 	bl	131f0 <lll_clock_init>
	if (err < 0) {
   12bbc:	2800      	cmp	r0, #0
   12bbe:	db1a      	blt.n	12bf6 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   12bc0:	4621      	mov	r1, r4
   12bc2:	2001      	movs	r0, #1
   12bc4:	4622      	mov	r2, r4
   12bc6:	f7ef ffe7 	bl	2b98 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   12bca:	4622      	mov	r2, r4
   12bcc:	200b      	movs	r0, #11
   12bce:	2101      	movs	r1, #1
   12bd0:	f7ef ffe2 	bl	2b98 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   12bd4:	4622      	mov	r2, r4
   12bd6:	4621      	mov	r1, r4
   12bd8:	2018      	movs	r0, #24
   12bda:	f7ef ffdd 	bl	2b98 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   12bde:	2001      	movs	r0, #1
   12be0:	f7ef ffa8 	bl	2b34 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   12be4:	200b      	movs	r0, #11
   12be6:	f7ef ffa5 	bl	2b34 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   12bea:	2018      	movs	r0, #24
   12bec:	f7ef ffa2 	bl	2b34 <arch_irq_enable>
	radio_setup();
   12bf0:	f002 f9be 	bl	14f70 <radio_setup>
	return 0;
   12bf4:	4620      	mov	r0, r4
}
   12bf6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   12bf8:	f06f 0012 	mvn.w	r0, #18
}
   12bfc:	bd10      	pop	{r4, pc}
   12bfe:	bf00      	nop
   12c00:	0002048c 	.word	0x0002048c
   12c04:	200023a4 	.word	0x200023a4
   12c08:	200023a8 	.word	0x200023a8

00012c0c <lll_deinit>:
{
   12c0c:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   12c0e:	f000 faff 	bl	13210 <lll_clock_deinit>
	if (err < 0) {
   12c12:	2800      	cmp	r0, #0
   12c14:	db09      	blt.n	12c2a <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   12c16:	2001      	movs	r0, #1
   12c18:	f7ef ff9c 	bl	2b54 <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   12c1c:	200b      	movs	r0, #11
   12c1e:	f7ef ff99 	bl	2b54 <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   12c22:	2018      	movs	r0, #24
   12c24:	f7ef ff96 	bl	2b54 <arch_irq_disable>
	return 0;
   12c28:	2000      	movs	r0, #0
}
   12c2a:	bd08      	pop	{r3, pc}

00012c2c <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   12c2c:	4a05      	ldr	r2, [pc, #20]	; (12c44 <lll_csrand_get+0x18>)
{
   12c2e:	b410      	push	{r4}
   12c30:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   12c32:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   12c34:	6884      	ldr	r4, [r0, #8]
   12c36:	6824      	ldr	r4, [r4, #0]
   12c38:	b28a      	uxth	r2, r1
   12c3a:	4619      	mov	r1, r3
   12c3c:	4623      	mov	r3, r4
}
   12c3e:	bc10      	pop	{r4}
   12c40:	4718      	bx	r3
   12c42:	bf00      	nop
   12c44:	200023a4 	.word	0x200023a4

00012c48 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   12c48:	4b08      	ldr	r3, [pc, #32]	; (12c6c <lll_csrand_isr_get+0x24>)
{
   12c4a:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   12c4c:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   12c4e:	68ab      	ldr	r3, [r5, #8]
   12c50:	685c      	ldr	r4, [r3, #4]
   12c52:	b13c      	cbz	r4, 12c64 <lll_csrand_isr_get+0x1c>
   12c54:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   12c56:	46a4      	mov	ip, r4
   12c58:	4601      	mov	r1, r0
   12c5a:	b292      	uxth	r2, r2
   12c5c:	4628      	mov	r0, r5
   12c5e:	2300      	movs	r3, #0
}
   12c60:	bc30      	pop	{r4, r5}
   12c62:	4760      	bx	ip
   12c64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12c68:	bc30      	pop	{r4, r5}
   12c6a:	4770      	bx	lr
   12c6c:	200023a4 	.word	0x200023a4

00012c70 <lll_rand_isr_get>:
   12c70:	4b08      	ldr	r3, [pc, #32]	; (12c94 <lll_rand_isr_get+0x24>)
   12c72:	b430      	push	{r4, r5}
   12c74:	681d      	ldr	r5, [r3, #0]
   12c76:	68ab      	ldr	r3, [r5, #8]
   12c78:	685c      	ldr	r4, [r3, #4]
   12c7a:	b13c      	cbz	r4, 12c8c <lll_rand_isr_get+0x1c>
   12c7c:	460a      	mov	r2, r1
   12c7e:	46a4      	mov	ip, r4
   12c80:	4601      	mov	r1, r0
   12c82:	b292      	uxth	r2, r2
   12c84:	4628      	mov	r0, r5
   12c86:	2300      	movs	r3, #0
   12c88:	bc30      	pop	{r4, r5}
   12c8a:	4760      	bx	ip
   12c8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12c90:	bc30      	pop	{r4, r5}
   12c92:	4770      	bx	lr
   12c94:	200023a4 	.word	0x200023a4

00012c98 <lll_reset>:
}
   12c98:	2000      	movs	r0, #0
   12c9a:	4770      	bx	lr

00012c9c <lll_disable>:
{
   12c9c:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   12c9e:	4604      	mov	r4, r0
{
   12ca0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   12ca2:	b378      	cbz	r0, 12d04 <lll_disable+0x68>
   12ca4:	4b23      	ldr	r3, [pc, #140]	; (12d34 <lll_disable+0x98>)
   12ca6:	681a      	ldr	r2, [r3, #0]
   12ca8:	4282      	cmp	r2, r0
   12caa:	d025      	beq.n	12cf8 <lll_disable+0x5c>
		idx = UINT8_MAX;
   12cac:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   12cae:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   12cb2:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   12cb6:	f7f9 fda3 	bl	c800 <ull_prepare_dequeue_iter>
		while (next) {
   12cba:	b938      	cbnz	r0, 12ccc <lll_disable+0x30>
   12cbc:	e01a      	b.n	12cf4 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   12cbe:	428c      	cmp	r4, r1
   12cc0:	d00a      	beq.n	12cd8 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   12cc2:	f10d 0007 	add.w	r0, sp, #7
   12cc6:	f7f9 fd9b 	bl	c800 <ull_prepare_dequeue_iter>
		while (next) {
   12cca:	b198      	cbz	r0, 12cf4 <lll_disable+0x58>
			if (!next->is_aborted &&
   12ccc:	7f03      	ldrb	r3, [r0, #28]
   12cce:	079b      	lsls	r3, r3, #30
   12cd0:	d4f7      	bmi.n	12cc2 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   12cd2:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   12cd4:	2c00      	cmp	r4, #0
   12cd6:	d1f2      	bne.n	12cbe <lll_disable+0x22>
				next->is_aborted = 1;
   12cd8:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   12cda:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   12cdc:	f043 0302 	orr.w	r3, r3, #2
   12ce0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   12ce2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   12ce4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   12ce8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   12cec:	f7f9 fd88 	bl	c800 <ull_prepare_dequeue_iter>
		while (next) {
   12cf0:	2800      	cmp	r0, #0
   12cf2:	d1eb      	bne.n	12ccc <lll_disable+0x30>
}
   12cf4:	b003      	add	sp, #12
   12cf6:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   12cf8:	689b      	ldr	r3, [r3, #8]
   12cfa:	b16b      	cbz	r3, 12d18 <lll_disable+0x7c>
   12cfc:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   12cfe:	2000      	movs	r0, #0
   12d00:	4798      	blx	r3
   12d02:	e7d3      	b.n	12cac <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   12d04:	4a0b      	ldr	r2, [pc, #44]	; (12d34 <lll_disable+0x98>)
   12d06:	6893      	ldr	r3, [r2, #8]
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d0cf      	beq.n	12cac <lll_disable+0x10>
   12d0c:	6811      	ldr	r1, [r2, #0]
   12d0e:	2900      	cmp	r1, #0
   12d10:	d0cc      	beq.n	12cac <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   12d12:	2000      	movs	r0, #0
   12d14:	4798      	blx	r3
   12d16:	e7c9      	b.n	12cac <lll_disable+0x10>
			LL_ASSERT(!param);
   12d18:	4a07      	ldr	r2, [pc, #28]	; (12d38 <lll_disable+0x9c>)
   12d1a:	4908      	ldr	r1, [pc, #32]	; (12d3c <lll_disable+0xa0>)
   12d1c:	4808      	ldr	r0, [pc, #32]	; (12d40 <lll_disable+0xa4>)
   12d1e:	f44f 738a 	mov.w	r3, #276	; 0x114
   12d22:	f006 fc36 	bl	19592 <assert_print>
   12d26:	4040      	eors	r0, r0
   12d28:	f380 8811 	msr	BASEPRI, r0
   12d2c:	f04f 0003 	mov.w	r0, #3
   12d30:	df02      	svc	2
   12d32:	e7bb      	b.n	12cac <lll_disable+0x10>
   12d34:	200023a8 	.word	0x200023a8
   12d38:	000203a8 	.word	0x000203a8
   12d3c:	00020490 	.word	0x00020490
   12d40:	0001fbf4 	.word	0x0001fbf4

00012d44 <lll_prepare_done>:
}
   12d44:	2000      	movs	r0, #0
   12d46:	4770      	bx	lr

00012d48 <lll_done>:
{
   12d48:	b538      	push	{r3, r4, r5, lr}
   12d4a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   12d4c:	f7f9 fd4a 	bl	c7e4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   12d50:	b154      	cbz	r4, 12d68 <lll_done+0x20>
   12d52:	b310      	cbz	r0, 12d9a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   12d54:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   12d56:	2000      	movs	r0, #0
   12d58:	f7f9 fd72 	bl	c840 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   12d5c:	4620      	mov	r0, r4
   12d5e:	f7f9 fde1 	bl	c924 <ull_event_done>
	LL_ASSERT(evdone);
   12d62:	b158      	cbz	r0, 12d7c <lll_done+0x34>
}
   12d64:	2000      	movs	r0, #0
   12d66:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   12d68:	4d1a      	ldr	r5, [pc, #104]	; (12dd4 <lll_done+0x8c>)
   12d6a:	68ab      	ldr	r3, [r5, #8]
   12d6c:	b31b      	cbz	r3, 12db6 <lll_done+0x6e>
		param = event.curr.param;
   12d6e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   12d70:	2300      	movs	r3, #0
   12d72:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   12d74:	602b      	str	r3, [r5, #0]
		if (param) {
   12d76:	2c00      	cmp	r4, #0
   12d78:	d1ec      	bne.n	12d54 <lll_done+0xc>
   12d7a:	e7ec      	b.n	12d56 <lll_done+0xe>
	LL_ASSERT(evdone);
   12d7c:	4a16      	ldr	r2, [pc, #88]	; (12dd8 <lll_done+0x90>)
   12d7e:	4917      	ldr	r1, [pc, #92]	; (12ddc <lll_done+0x94>)
   12d80:	4817      	ldr	r0, [pc, #92]	; (12de0 <lll_done+0x98>)
   12d82:	f44f 73c2 	mov.w	r3, #388	; 0x184
   12d86:	f006 fc04 	bl	19592 <assert_print>
   12d8a:	4040      	eors	r0, r0
   12d8c:	f380 8811 	msr	BASEPRI, r0
   12d90:	f04f 0003 	mov.w	r0, #3
   12d94:	df02      	svc	2
}
   12d96:	2000      	movs	r0, #0
   12d98:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   12d9a:	4a0f      	ldr	r2, [pc, #60]	; (12dd8 <lll_done+0x90>)
   12d9c:	4911      	ldr	r1, [pc, #68]	; (12de4 <lll_done+0x9c>)
   12d9e:	4810      	ldr	r0, [pc, #64]	; (12de0 <lll_done+0x98>)
   12da0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   12da4:	f006 fbf5 	bl	19592 <assert_print>
   12da8:	4040      	eors	r0, r0
   12daa:	f380 8811 	msr	BASEPRI, r0
   12dae:	f04f 0003 	mov.w	r0, #3
   12db2:	df02      	svc	2
   12db4:	e7ce      	b.n	12d54 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   12db6:	4a08      	ldr	r2, [pc, #32]	; (12dd8 <lll_done+0x90>)
   12db8:	490b      	ldr	r1, [pc, #44]	; (12de8 <lll_done+0xa0>)
   12dba:	4809      	ldr	r0, [pc, #36]	; (12de0 <lll_done+0x98>)
   12dbc:	f44f 73aa 	mov.w	r3, #340	; 0x154
   12dc0:	f006 fbe7 	bl	19592 <assert_print>
   12dc4:	4040      	eors	r0, r0
   12dc6:	f380 8811 	msr	BASEPRI, r0
   12dca:	f04f 0003 	mov.w	r0, #3
   12dce:	df02      	svc	2
   12dd0:	e7cd      	b.n	12d6e <lll_done+0x26>
   12dd2:	bf00      	nop
   12dd4:	200023a8 	.word	0x200023a8
   12dd8:	000203a8 	.word	0x000203a8
   12ddc:	000204bc 	.word	0x000204bc
   12de0:	0001fbf4 	.word	0x0001fbf4
   12de4:	00020498 	.word	0x00020498
   12de8:	000204a8 	.word	0x000204a8

00012dec <lll_is_done>:
	*is_resume = (param != event.curr.param);
   12dec:	4a05      	ldr	r2, [pc, #20]	; (12e04 <lll_is_done+0x18>)
   12dee:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   12df0:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   12df2:	1a1b      	subs	r3, r3, r0
   12df4:	bf18      	it	ne
   12df6:	2301      	movne	r3, #1
}
   12df8:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   12dfc:	700b      	strb	r3, [r1, #0]
}
   12dfe:	0940      	lsrs	r0, r0, #5
   12e00:	4770      	bx	lr
   12e02:	bf00      	nop
   12e04:	200023a8 	.word	0x200023a8

00012e08 <lll_is_abort_cb>:
}
   12e08:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   12e0c:	4770      	bx	lr
   12e0e:	bf00      	nop

00012e10 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   12e10:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   12e14:	2a00      	cmp	r2, #0
   12e16:	db04      	blt.n	12e22 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   12e18:	429a      	cmp	r2, r3
   12e1a:	bf38      	it	cc
   12e1c:	461a      	movcc	r2, r3
   12e1e:	4610      	mov	r0, r2
}
   12e20:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   12e22:	68c0      	ldr	r0, [r0, #12]
   12e24:	4298      	cmp	r0, r3
   12e26:	bf38      	it	cc
   12e28:	4618      	movcc	r0, r3
   12e2a:	4770      	bx	lr

00012e2c <lll_preempt_calc>:
{
   12e2c:	b510      	push	{r4, lr}
   12e2e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   12e30:	f7f7 f9f6 	bl	a220 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   12e34:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   12e36:	0203      	lsls	r3, r0, #8
   12e38:	d405      	bmi.n	12e46 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   12e3a:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   12e3c:	2809      	cmp	r0, #9
   12e3e:	bf94      	ite	ls
   12e40:	2000      	movls	r0, #0
   12e42:	2001      	movhi	r0, #1
}
   12e44:	bd10      	pop	{r4, pc}
		return 0;
   12e46:	2000      	movs	r0, #0
}
   12e48:	bd10      	pop	{r4, pc}
   12e4a:	bf00      	nop

00012e4c <lll_chan_set>:
	switch (chan) {
   12e4c:	2826      	cmp	r0, #38	; 0x26
{
   12e4e:	b510      	push	{r4, lr}
   12e50:	4604      	mov	r4, r0
	switch (chan) {
   12e52:	d01c      	beq.n	12e8e <lll_chan_set+0x42>
   12e54:	2827      	cmp	r0, #39	; 0x27
   12e56:	d012      	beq.n	12e7e <lll_chan_set+0x32>
   12e58:	2825      	cmp	r0, #37	; 0x25
   12e5a:	d008      	beq.n	12e6e <lll_chan_set+0x22>
		if (chan < 11) {
   12e5c:	280a      	cmp	r0, #10
   12e5e:	d91e      	bls.n	12e9e <lll_chan_set+0x52>
		} else if (chan < 40) {
   12e60:	2827      	cmp	r0, #39	; 0x27
   12e62:	d821      	bhi.n	12ea8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   12e64:	3003      	adds	r0, #3
   12e66:	0040      	lsls	r0, r0, #1
   12e68:	f002 f8e0 	bl	1502c <radio_freq_chan_set>
   12e6c:	e002      	b.n	12e74 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   12e6e:	2002      	movs	r0, #2
   12e70:	f002 f8dc 	bl	1502c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12e74:	4620      	mov	r0, r4
}
   12e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12e7a:	f002 b8dd 	b.w	15038 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   12e7e:	2050      	movs	r0, #80	; 0x50
   12e80:	f002 f8d4 	bl	1502c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12e84:	4620      	mov	r0, r4
}
   12e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12e8a:	f002 b8d5 	b.w	15038 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   12e8e:	201a      	movs	r0, #26
   12e90:	f002 f8cc 	bl	1502c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12e94:	4620      	mov	r0, r4
}
   12e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12e9a:	f002 b8cd 	b.w	15038 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   12e9e:	3002      	adds	r0, #2
   12ea0:	0040      	lsls	r0, r0, #1
   12ea2:	f002 f8c3 	bl	1502c <radio_freq_chan_set>
   12ea6:	e7e5      	b.n	12e74 <lll_chan_set+0x28>
			LL_ASSERT(0);
   12ea8:	4a06      	ldr	r2, [pc, #24]	; (12ec4 <lll_chan_set+0x78>)
   12eaa:	4907      	ldr	r1, [pc, #28]	; (12ec8 <lll_chan_set+0x7c>)
   12eac:	4807      	ldr	r0, [pc, #28]	; (12ecc <lll_chan_set+0x80>)
   12eae:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   12eb2:	f006 fb6e 	bl	19592 <assert_print>
   12eb6:	4040      	eors	r0, r0
   12eb8:	f380 8811 	msr	BASEPRI, r0
   12ebc:	f04f 0003 	mov.w	r0, #3
   12ec0:	df02      	svc	2
   12ec2:	e7d7      	b.n	12e74 <lll_chan_set+0x28>
   12ec4:	000203a8 	.word	0x000203a8
   12ec8:	0001fc54 	.word	0x0001fc54
   12ecc:	0001fbf4 	.word	0x0001fbf4

00012ed0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   12ed0:	f002 b912 	b.w	150f8 <radio_rx_ready_delay_get>

00012ed4 <lll_isr_tx_status_reset>:
{
   12ed4:	b508      	push	{r3, lr}
	radio_status_reset();
   12ed6:	f002 f937 	bl	15148 <radio_status_reset>
}
   12eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   12ede:	f002 ba77 	b.w	153d0 <radio_tmr_status_reset>
   12ee2:	bf00      	nop

00012ee4 <lll_isr_rx_status_reset>:
{
   12ee4:	b508      	push	{r3, lr}
	radio_status_reset();
   12ee6:	f002 f92f 	bl	15148 <radio_status_reset>
	radio_tmr_status_reset();
   12eea:	f002 fa71 	bl	153d0 <radio_tmr_status_reset>
}
   12eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   12ef2:	f002 ba39 	b.w	15368 <radio_rssi_status_reset>
   12ef6:	bf00      	nop

00012ef8 <lll_isr_status_reset>:
{
   12ef8:	b508      	push	{r3, lr}
	radio_status_reset();
   12efa:	f002 f925 	bl	15148 <radio_status_reset>
	radio_tmr_status_reset();
   12efe:	f002 fa67 	bl	153d0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   12f02:	f002 fa4d 	bl	153a0 <radio_filter_status_reset>
}
   12f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   12f0a:	f002 ba2d 	b.w	15368 <radio_rssi_status_reset>
   12f0e:	bf00      	nop

00012f10 <lll_isr_cleanup>:
{
   12f10:	b508      	push	{r3, lr}
   12f12:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   12f14:	4817      	ldr	r0, [pc, #92]	; (12f74 <lll_isr_cleanup+0x64>)
   12f16:	f002 f80b 	bl	14f30 <radio_isr_set>
	if (!radio_is_idle()) {
   12f1a:	f002 f935 	bl	15188 <radio_is_idle>
   12f1e:	b160      	cbz	r0, 12f3a <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   12f20:	f002 fb24 	bl	1556c <radio_tmr_stop>
	radio_stop();
   12f24:	f002 f86a 	bl	14ffc <radio_stop>
	err = lll_hfclock_off();
   12f28:	f000 f9ae 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12f2c:	2800      	cmp	r0, #0
   12f2e:	db0e      	blt.n	12f4e <lll_isr_cleanup+0x3e>
}
   12f30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12f34:	2000      	movs	r0, #0
   12f36:	f7ff bf07 	b.w	12d48 <lll_done>
		radio_disable();
   12f3a:	f002 f8f1 	bl	15120 <radio_disable>
	radio_tmr_stop();
   12f3e:	f002 fb15 	bl	1556c <radio_tmr_stop>
	radio_stop();
   12f42:	f002 f85b 	bl	14ffc <radio_stop>
	err = lll_hfclock_off();
   12f46:	f000 f99f 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12f4a:	2800      	cmp	r0, #0
   12f4c:	daf0      	bge.n	12f30 <lll_isr_cleanup+0x20>
   12f4e:	4a0a      	ldr	r2, [pc, #40]	; (12f78 <lll_isr_cleanup+0x68>)
   12f50:	490a      	ldr	r1, [pc, #40]	; (12f7c <lll_isr_cleanup+0x6c>)
   12f52:	480b      	ldr	r0, [pc, #44]	; (12f80 <lll_isr_cleanup+0x70>)
   12f54:	f44f 7317 	mov.w	r3, #604	; 0x25c
   12f58:	f006 fb1b 	bl	19592 <assert_print>
   12f5c:	4040      	eors	r0, r0
   12f5e:	f380 8811 	msr	BASEPRI, r0
   12f62:	f04f 0003 	mov.w	r0, #3
   12f66:	df02      	svc	2
	lll_done(NULL);
   12f68:	2000      	movs	r0, #0
}
   12f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12f6e:	f7ff beeb 	b.w	12d48 <lll_done>
   12f72:	bf00      	nop
   12f74:	00012829 	.word	0x00012829
   12f78:	000203a8 	.word	0x000203a8
   12f7c:	000204c4 	.word	0x000204c4
   12f80:	0001fbf4 	.word	0x0001fbf4

00012f84 <lll_isr_abort>:
{
   12f84:	b510      	push	{r4, lr}
   12f86:	4604      	mov	r4, r0
	radio_status_reset();
   12f88:	f002 f8de 	bl	15148 <radio_status_reset>
	radio_tmr_status_reset();
   12f8c:	f002 fa20 	bl	153d0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   12f90:	f002 fa06 	bl	153a0 <radio_filter_status_reset>
	radio_rssi_status_reset();
   12f94:	f002 f9e8 	bl	15368 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   12f98:	4620      	mov	r0, r4
}
   12f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   12f9e:	f7ff bfb7 	b.w	12f10 <lll_isr_cleanup>
   12fa2:	bf00      	nop

00012fa4 <lll_isr_early_abort>:
{
   12fa4:	b508      	push	{r3, lr}
   12fa6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   12fa8:	4813      	ldr	r0, [pc, #76]	; (12ff8 <lll_isr_early_abort+0x54>)
   12faa:	f001 ffc1 	bl	14f30 <radio_isr_set>
	if (!radio_is_idle()) {
   12fae:	f002 f8eb 	bl	15188 <radio_is_idle>
   12fb2:	b140      	cbz	r0, 12fc6 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   12fb4:	f000 f968 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12fb8:	2800      	cmp	r0, #0
   12fba:	db0a      	blt.n	12fd2 <lll_isr_early_abort+0x2e>
}
   12fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12fc0:	2000      	movs	r0, #0
   12fc2:	f7ff bec1 	b.w	12d48 <lll_done>
		radio_disable();
   12fc6:	f002 f8ab 	bl	15120 <radio_disable>
	err = lll_hfclock_off();
   12fca:	f000 f95d 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12fce:	2800      	cmp	r0, #0
   12fd0:	daf4      	bge.n	12fbc <lll_isr_early_abort+0x18>
   12fd2:	4a0a      	ldr	r2, [pc, #40]	; (12ffc <lll_isr_early_abort+0x58>)
   12fd4:	490a      	ldr	r1, [pc, #40]	; (13000 <lll_isr_early_abort+0x5c>)
   12fd6:	480b      	ldr	r0, [pc, #44]	; (13004 <lll_isr_early_abort+0x60>)
   12fd8:	f240 236b 	movw	r3, #619	; 0x26b
   12fdc:	f006 fad9 	bl	19592 <assert_print>
   12fe0:	4040      	eors	r0, r0
   12fe2:	f380 8811 	msr	BASEPRI, r0
   12fe6:	f04f 0003 	mov.w	r0, #3
   12fea:	df02      	svc	2
	lll_done(NULL);
   12fec:	2000      	movs	r0, #0
}
   12fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   12ff2:	f7ff bea9 	b.w	12d48 <lll_done>
   12ff6:	bf00      	nop
   12ff8:	00012829 	.word	0x00012829
   12ffc:	000203a8 	.word	0x000203a8
   13000:	000204c4 	.word	0x000204c4
   13004:	0001fbf4 	.word	0x0001fbf4

00013008 <lll_prepare_resolve>:
{
   13008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1300c:	b084      	sub	sp, #16
   1300e:	4606      	mov	r6, r0
   13010:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   13012:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   13016:	23ff      	movs	r3, #255	; 0xff
{
   13018:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1301c:	f88d 300f 	strb.w	r3, [sp, #15]
{
   13020:	460f      	mov	r7, r1
   13022:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   13024:	f7f9 fbec 	bl	c800 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   13028:	4604      	mov	r4, r0
   1302a:	b920      	cbnz	r0, 13036 <lll_prepare_resolve+0x2e>
   1302c:	e022      	b.n	13074 <lll_prepare_resolve+0x6c>
		p = ull_prepare_dequeue_iter(&idx);
   1302e:	f7f9 fbe7 	bl	c800 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   13032:	4604      	mov	r4, r0
   13034:	b1f0      	cbz	r0, 13074 <lll_prepare_resolve+0x6c>
   13036:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1303a:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1303e:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   13042:	d1f4      	bne.n	1302e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   13044:	f8df a134 	ldr.w	sl, [pc, #308]	; 1317c <lll_prepare_resolve+0x174>
	if ((!is_dequeue && !is_done_sync()) ||
   13048:	f8da 3008 	ldr.w	r3, [sl, #8]
   1304c:	b9cb      	cbnz	r3, 13082 <lll_prepare_resolve+0x7a>
	    (p && is_resume)) {
   1304e:	f1b9 0f00 	cmp.w	r9, #0
   13052:	d03c      	beq.n	130ce <lll_prepare_resolve+0xc6>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   13054:	f8cd 9000 	str.w	r9, [sp]
   13058:	4643      	mov	r3, r8
   1305a:	462a      	mov	r2, r5
   1305c:	4639      	mov	r1, r7
   1305e:	4630      	mov	r0, r6
   13060:	f7f9 fb8e 	bl	c780 <ull_prepare_enqueue>
		LL_ASSERT(next);
   13064:	2800      	cmp	r0, #0
   13066:	d07a      	beq.n	1315e <lll_prepare_resolve+0x156>
		return -EINPROGRESS;
   13068:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1306c:	4620      	mov	r0, r4
   1306e:	b004      	add	sp, #16
   13070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   13074:	f8df a104 	ldr.w	sl, [pc, #260]	; 1317c <lll_prepare_resolve+0x174>
	if ((!is_dequeue && !is_done_sync()) ||
   13078:	f8da 3008 	ldr.w	r3, [sl, #8]
   1307c:	2b00      	cmp	r3, #0
   1307e:	d035      	beq.n	130ec <lll_prepare_resolve+0xe4>
   13080:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   13082:	462a      	mov	r2, r5
   13084:	f8cd 9000 	str.w	r9, [sp]
   13088:	4643      	mov	r3, r8
   1308a:	4639      	mov	r1, r7
   1308c:	4630      	mov	r0, r6
   1308e:	f7f9 fb77 	bl	c780 <ull_prepare_enqueue>
		LL_ASSERT(next);
   13092:	4602      	mov	r2, r0
   13094:	2800      	cmp	r0, #0
   13096:	d062      	beq.n	1315e <lll_prepare_resolve+0x156>
		if (is_resume) {
   13098:	f1b9 0f00 	cmp.w	r9, #0
   1309c:	d1e4      	bne.n	13068 <lll_prepare_resolve+0x60>
		ret  = preempt_ticker_start(first, p, next);
   1309e:	2c00      	cmp	r4, #0
   130a0:	bf14      	ite	ne
   130a2:	4620      	movne	r0, r4
   130a4:	4610      	moveq	r0, r2
   130a6:	4621      	mov	r1, r4
   130a8:	f7ff fc40 	bl	1292c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   130ac:	f030 0302 	bics.w	r3, r0, #2
   130b0:	d0da      	beq.n	13068 <lll_prepare_resolve+0x60>
   130b2:	4a33      	ldr	r2, [pc, #204]	; (13180 <lll_prepare_resolve+0x178>)
   130b4:	4933      	ldr	r1, [pc, #204]	; (13184 <lll_prepare_resolve+0x17c>)
   130b6:	4834      	ldr	r0, [pc, #208]	; (13188 <lll_prepare_resolve+0x180>)
   130b8:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   130bc:	f006 fa69 	bl	19592 <assert_print>
   130c0:	4040      	eors	r0, r0
   130c2:	f380 8811 	msr	BASEPRI, r0
   130c6:	f04f 0003 	mov.w	r0, #3
   130ca:	df02      	svc	2
   130cc:	e7cc      	b.n	13068 <lll_prepare_resolve+0x60>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   130ce:	42ac      	cmp	r4, r5
   130d0:	d00c      	beq.n	130ec <lll_prepare_resolve+0xe4>
   130d2:	4a2b      	ldr	r2, [pc, #172]	; (13180 <lll_prepare_resolve+0x178>)
   130d4:	492d      	ldr	r1, [pc, #180]	; (1318c <lll_prepare_resolve+0x184>)
   130d6:	482c      	ldr	r0, [pc, #176]	; (13188 <lll_prepare_resolve+0x180>)
   130d8:	f240 23da 	movw	r3, #730	; 0x2da
   130dc:	f006 fa59 	bl	19592 <assert_print>
   130e0:	4040      	eors	r0, r0
   130e2:	f380 8811 	msr	BASEPRI, r0
   130e6:	f04f 0003 	mov.w	r0, #3
   130ea:	df02      	svc	2
	event.curr.param = prepare_param->param;
   130ec:	68eb      	ldr	r3, [r5, #12]
   130ee:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   130f2:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   130f6:	4628      	mov	r0, r5
   130f8:	47c0      	blx	r8
   130fa:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   130fc:	f7ff fbd6 	bl	128ac <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13100:	f030 0302 	bics.w	r3, r0, #2
   13104:	d11d      	bne.n	13142 <lll_prepare_resolve+0x13a>
		p = ull_prepare_dequeue_iter(&idx);
   13106:	f10d 000f 	add.w	r0, sp, #15
   1310a:	f7f9 fb79 	bl	c800 <ull_prepare_dequeue_iter>
   1310e:	4602      	mov	r2, r0
		if (!p) {
   13110:	2800      	cmp	r0, #0
   13112:	d0ab      	beq.n	1306c <lll_prepare_resolve+0x64>
	} while (p->is_aborted || p->is_resume);
   13114:	7f01      	ldrb	r1, [r0, #28]
   13116:	f011 0103 	ands.w	r1, r1, #3
   1311a:	d1f4      	bne.n	13106 <lll_prepare_resolve+0xfe>
	ret = preempt_ticker_start(p, NULL, p);
   1311c:	f7ff fc06 	bl	1292c <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13120:	f030 0302 	bics.w	r3, r0, #2
   13124:	d0a2      	beq.n	1306c <lll_prepare_resolve+0x64>
   13126:	4a16      	ldr	r2, [pc, #88]	; (13180 <lll_prepare_resolve+0x178>)
   13128:	4916      	ldr	r1, [pc, #88]	; (13184 <lll_prepare_resolve+0x17c>)
   1312a:	4817      	ldr	r0, [pc, #92]	; (13188 <lll_prepare_resolve+0x180>)
   1312c:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   13130:	f006 fa2f 	bl	19592 <assert_print>
   13134:	4040      	eors	r0, r0
   13136:	f380 8811 	msr	BASEPRI, r0
   1313a:	f04f 0003 	mov.w	r0, #3
   1313e:	df02      	svc	2
   13140:	e794      	b.n	1306c <lll_prepare_resolve+0x64>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13142:	4a0f      	ldr	r2, [pc, #60]	; (13180 <lll_prepare_resolve+0x178>)
   13144:	490f      	ldr	r1, [pc, #60]	; (13184 <lll_prepare_resolve+0x17c>)
   13146:	4810      	ldr	r0, [pc, #64]	; (13188 <lll_prepare_resolve+0x180>)
   13148:	f240 23e7 	movw	r3, #743	; 0x2e7
   1314c:	f006 fa21 	bl	19592 <assert_print>
   13150:	4040      	eors	r0, r0
   13152:	f380 8811 	msr	BASEPRI, r0
   13156:	f04f 0003 	mov.w	r0, #3
   1315a:	df02      	svc	2
   1315c:	e7d3      	b.n	13106 <lll_prepare_resolve+0xfe>
		LL_ASSERT(next);
   1315e:	4a08      	ldr	r2, [pc, #32]	; (13180 <lll_prepare_resolve+0x178>)
   13160:	490b      	ldr	r1, [pc, #44]	; (13190 <lll_prepare_resolve+0x188>)
   13162:	4809      	ldr	r0, [pc, #36]	; (13188 <lll_prepare_resolve+0x180>)
   13164:	f240 23a7 	movw	r3, #679	; 0x2a7
   13168:	f006 fa13 	bl	19592 <assert_print>
   1316c:	4040      	eors	r0, r0
   1316e:	f380 8811 	msr	BASEPRI, r0
   13172:	f04f 0003 	mov.w	r0, #3
   13176:	df02      	svc	2
   13178:	2200      	movs	r2, #0
   1317a:	e78d      	b.n	13098 <lll_prepare_resolve+0x90>
   1317c:	200023a8 	.word	0x200023a8
   13180:	000203a8 	.word	0x000203a8
   13184:	0001ffa8 	.word	0x0001ffa8
   13188:	0001fbf4 	.word	0x0001fbf4
   1318c:	000204d8 	.word	0x000204d8
   13190:	000204d0 	.word	0x000204d0

00013194 <clock_ready>:
	z_impl_k_sem_give(sem);
   13194:	f101 0010 	add.w	r0, r1, #16
   13198:	f004 bebc 	b.w	17f14 <z_impl_k_sem_give>

0001319c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1319c:	b570      	push	{r4, r5, r6, lr}
   1319e:	4605      	mov	r5, r0
   131a0:	b08a      	sub	sp, #40	; 0x28
   131a2:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   131a4:	2201      	movs	r2, #1
   131a6:	2100      	movs	r1, #0
   131a8:	a804      	add	r0, sp, #16
   131aa:	f00b fb92 	bl	1e8d2 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   131ae:	4b0f      	ldr	r3, [pc, #60]	; (131ec <blocking_on+0x50>)
   131b0:	9301      	str	r3, [sp, #4]
   131b2:	2600      	movs	r6, #0
   131b4:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   131b6:	4669      	mov	r1, sp
   131b8:	4628      	mov	r0, r5
   131ba:	9603      	str	r6, [sp, #12]
   131bc:	9302      	str	r3, [sp, #8]
   131be:	f005 ff4e 	bl	1905e <onoff_request>
	if (err < 0) {
   131c2:	2800      	cmp	r0, #0
   131c4:	db10      	blt.n	131e8 <blocking_on+0x4c>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   131c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   131ca:	4631      	mov	r1, r6
   131cc:	f240 30e7 	movw	r0, #999	; 0x3e7
   131d0:	fbe4 0103 	umlal	r0, r1, r4, r3
   131d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   131d8:	2300      	movs	r3, #0
   131da:	f7ec ff91 	bl	100 <__aeabi_uldivmod>
   131de:	4602      	mov	r2, r0
   131e0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   131e2:	a804      	add	r0, sp, #16
   131e4:	f004 febc 	bl	17f60 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   131e8:	b00a      	add	sp, #40	; 0x28
   131ea:	bd70      	pop	{r4, r5, r6, pc}
   131ec:	00013195 	.word	0x00013195

000131f0 <lll_clock_init>:

int lll_clock_init(void)
{
   131f0:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   131f2:	2001      	movs	r0, #1
   131f4:	f002 fef2 	bl	15fdc <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   131f8:	4904      	ldr	r1, [pc, #16]	; (1320c <lll_clock_init+0x1c>)
   131fa:	2300      	movs	r3, #0
   131fc:	2401      	movs	r4, #1
   131fe:	608c      	str	r4, [r1, #8]
   13200:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   13202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13206:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   13208:	f005 bf29 	b.w	1905e <onoff_request>
   1320c:	200023c4 	.word	0x200023c4

00013210 <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   13210:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   13212:	2001      	movs	r0, #1
   13214:	f002 fee2 	bl	15fdc <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   13218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   1321c:	f005 bf68 	b.w	190f0 <onoff_release>

00013220 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   13220:	4b0c      	ldr	r3, [pc, #48]	; (13254 <lll_clock_wait+0x34>)
   13222:	781a      	ldrb	r2, [r3, #0]
   13224:	b10a      	cbz	r2, 1322a <lll_clock_wait+0xa>
		return 0;
   13226:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   13228:	4770      	bx	lr
{
   1322a:	b510      	push	{r4, lr}
	done = true;
   1322c:	2001      	movs	r0, #1
   1322e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   13230:	f002 fed4 	bl	15fdc <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   13234:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   13238:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1323a:	f7ff ffaf 	bl	1319c <blocking_on>
	if (err) {
   1323e:	b938      	cbnz	r0, 13250 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   13240:	4620      	mov	r0, r4
   13242:	f005 ff55 	bl	190f0 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   13246:	2802      	cmp	r0, #2
		return 0;
   13248:	bf0c      	ite	eq
   1324a:	2000      	moveq	r0, #0
		return -EIO;
   1324c:	f06f 0004 	mvnne.w	r0, #4
}
   13250:	bd10      	pop	{r4, pc}
   13252:	bf00      	nop
   13254:	2000299c 	.word	0x2000299c

00013258 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   13258:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1325a:	4b0a      	ldr	r3, [pc, #40]	; (13284 <lll_hfclock_on+0x2c>)
   1325c:	f3bf 8f5b 	dmb	ish
   13260:	e853 2f00 	ldrex	r2, [r3]
   13264:	1c51      	adds	r1, r2, #1
   13266:	e843 1000 	strex	r0, r1, [r3]
   1326a:	2800      	cmp	r0, #0
   1326c:	d1f8      	bne.n	13260 <lll_hfclock_on+0x8>
   1326e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   13272:	2a00      	cmp	r2, #0
   13274:	dd01      	ble.n	1327a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   13276:	2000      	movs	r0, #0
   13278:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1327a:	f002 feb7 	bl	15fec <z_nrf_clock_bt_ctlr_hf_request>
}
   1327e:	2000      	movs	r0, #0
   13280:	bd08      	pop	{r3, pc}
   13282:	bf00      	nop
   13284:	200023c0 	.word	0x200023c0

00013288 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   13288:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1328a:	4b0d      	ldr	r3, [pc, #52]	; (132c0 <lll_hfclock_off+0x38>)
   1328c:	681a      	ldr	r2, [r3, #0]
   1328e:	2a00      	cmp	r2, #0
   13290:	dd12      	ble.n	132b8 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13292:	f3bf 8f5b 	dmb	ish
   13296:	e853 2f00 	ldrex	r2, [r3]
   1329a:	1e51      	subs	r1, r2, #1
   1329c:	e843 1000 	strex	r0, r1, [r3]
   132a0:	2800      	cmp	r0, #0
   132a2:	d1f8      	bne.n	13296 <lll_hfclock_off+0xe>
   132a4:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   132a8:	2a01      	cmp	r2, #1
   132aa:	dd01      	ble.n	132b0 <lll_hfclock_off+0x28>
		return 0;
   132ac:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   132ae:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   132b0:	f002 feb2 	bl	16018 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   132b4:	2000      	movs	r0, #0
}
   132b6:	bd08      	pop	{r3, pc}
		return -EALREADY;
   132b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   132bc:	bd08      	pop	{r3, pc}
   132be:	bf00      	nop
   132c0:	200023c0 	.word	0x200023c0

000132c4 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   132c4:	2032      	movs	r0, #50	; 0x32
   132c6:	4770      	bx	lr

000132c8 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   132c8:	4b01      	ldr	r3, [pc, #4]	; (132d0 <lll_clock_ppm_get+0x8>)
}
   132ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   132ce:	4770      	bx	lr
   132d0:	00020504 	.word	0x00020504

000132d4 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   132d4:	b510      	push	{r4, lr}
   132d6:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   132d8:	f7ff fe0e 	bl	12ef8 <lll_isr_status_reset>

	radio_filter_disable();
   132dc:	f002 f856 	bl	1538c <radio_filter_disable>

	lll_isr_cleanup(param);
   132e0:	4620      	mov	r0, r4
}
   132e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   132e6:	f7ff be13 	b.w	12f10 <lll_isr_cleanup>
   132ea:	bf00      	nop

000132ec <isr_tx>:
{
   132ec:	b538      	push	{r3, r4, r5, lr}
   132ee:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   132f0:	f7ff fdf0 	bl	12ed4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   132f4:	2096      	movs	r0, #150	; 0x96
   132f6:	f002 f87b 	bl	153f0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   132fa:	2300      	movs	r3, #0
   132fc:	4618      	mov	r0, r3
   132fe:	461a      	mov	r2, r3
   13300:	4619      	mov	r1, r3
   13302:	f001 ffb1 	bl	15268 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   13306:	2001      	movs	r0, #1
   13308:	f7f9 f9ec 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1330c:	4604      	mov	r4, r0
   1330e:	b368      	cbz	r0, 1336c <isr_tx+0x80>
	radio_pkt_rx_set(node_rx->pdu);
   13310:	f104 001c 	add.w	r0, r4, #28
   13314:	f001 fee2 	bl	150dc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   13318:	f001 ff22 	bl	15160 <radio_is_ready>
   1331c:	b9c0      	cbnz	r0, 13350 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   1331e:	4629      	mov	r1, r5
   13320:	4819      	ldr	r0, [pc, #100]	; (13388 <isr_tx+0x9c>)
   13322:	f001 fe05 	bl	14f30 <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   13326:	f002 f975 	bl	15614 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1332a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1332c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1332e:	4608      	mov	r0, r1
   13330:	f001 fee4 	bl	150fc <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   13334:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   13336:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   13338:	4608      	mov	r0, r1
   1333a:	f001 fedb 	bl	150f4 <radio_tx_chain_delay_get>
   1333e:	442c      	add	r4, r5
   13340:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   13342:	1a20      	subs	r0, r4, r0
   13344:	f002 f91e 	bl	15584 <radio_tmr_hcto_configure>
}
   13348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1334c:	f002 b954 	b.w	155f8 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   13350:	4a0e      	ldr	r2, [pc, #56]	; (1338c <isr_tx+0xa0>)
   13352:	490f      	ldr	r1, [pc, #60]	; (13390 <isr_tx+0xa4>)
   13354:	480f      	ldr	r0, [pc, #60]	; (13394 <isr_tx+0xa8>)
   13356:	f240 4385 	movw	r3, #1157	; 0x485
   1335a:	f006 f91a 	bl	19592 <assert_print>
   1335e:	4040      	eors	r0, r0
   13360:	f380 8811 	msr	BASEPRI, r0
   13364:	f04f 0003 	mov.w	r0, #3
   13368:	df02      	svc	2
   1336a:	e7d8      	b.n	1331e <isr_tx+0x32>
	LL_ASSERT(node_rx);
   1336c:	4a07      	ldr	r2, [pc, #28]	; (1338c <isr_tx+0xa0>)
   1336e:	490a      	ldr	r1, [pc, #40]	; (13398 <isr_tx+0xac>)
   13370:	4808      	ldr	r0, [pc, #32]	; (13394 <isr_tx+0xa8>)
   13372:	f240 4381 	movw	r3, #1153	; 0x481
   13376:	f006 f90c 	bl	19592 <assert_print>
   1337a:	4040      	eors	r0, r0
   1337c:	f380 8811 	msr	BASEPRI, r0
   13380:	f04f 0003 	mov.w	r0, #3
   13384:	df02      	svc	2
   13386:	e7c3      	b.n	13310 <isr_tx+0x24>
   13388:	000139dd 	.word	0x000139dd
   1338c:	00020514 	.word	0x00020514
   13390:	00020568 	.word	0x00020568
   13394:	0001fbf4 	.word	0x0001fbf4
   13398:	00020560 	.word	0x00020560

0001339c <is_abort_cb>:
	if (next != curr) {
   1339c:	4281      	cmp	r1, r0
{
   1339e:	b508      	push	{r3, lr}
	if (next != curr) {
   133a0:	d00e      	beq.n	133c0 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   133a2:	7a0b      	ldrb	r3, [r1, #8]
   133a4:	07db      	lsls	r3, r3, #31
   133a6:	d402      	bmi.n	133ae <is_abort_cb+0x12>
			return -ECANCELED;
   133a8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   133ac:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   133ae:	4b13      	ldr	r3, [pc, #76]	; (133fc <is_abort_cb+0x60>)
   133b0:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   133b2:	f7ff ff51 	bl	13258 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   133b6:	2800      	cmp	r0, #0
   133b8:	db0f      	blt.n	133da <is_abort_cb+0x3e>
   133ba:	f06f 000a 	mvn.w	r0, #10
}
   133be:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   133c0:	7b0b      	ldrb	r3, [r1, #12]
   133c2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   133c6:	690b      	ldr	r3, [r1, #16]
   133c8:	781b      	ldrb	r3, [r3, #0]
   133ca:	f003 030f 	and.w	r3, r3, #15
		return 0;
   133ce:	2b01      	cmp	r3, #1
   133d0:	bf14      	ite	ne
   133d2:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   133d6:	2000      	moveq	r0, #0
}
   133d8:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   133da:	4a09      	ldr	r2, [pc, #36]	; (13400 <is_abort_cb+0x64>)
   133dc:	4909      	ldr	r1, [pc, #36]	; (13404 <is_abort_cb+0x68>)
   133de:	480a      	ldr	r0, [pc, #40]	; (13408 <is_abort_cb+0x6c>)
   133e0:	f240 433a 	movw	r3, #1082	; 0x43a
   133e4:	f006 f8d5 	bl	19592 <assert_print>
   133e8:	4040      	eors	r0, r0
   133ea:	f380 8811 	msr	BASEPRI, r0
   133ee:	f04f 0003 	mov.w	r0, #3
   133f2:	df02      	svc	2
   133f4:	f06f 000a 	mvn.w	r0, #10
}
   133f8:	bd08      	pop	{r3, pc}
   133fa:	bf00      	nop
   133fc:	000138cd 	.word	0x000138cd
   13400:	00020514 	.word	0x00020514
   13404:	000204c4 	.word	0x000204c4
   13408:	0001fbf4 	.word	0x0001fbf4

0001340c <abort_cb>:
{
   1340c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1340e:	b1d8      	cbz	r0, 13448 <abort_cb+0x3c>
	err = lll_hfclock_off();
   13410:	460c      	mov	r4, r1
   13412:	f7ff ff39 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   13416:	2800      	cmp	r0, #0
   13418:	db04      	blt.n	13424 <abort_cb+0x18>
	lll_done(param);
   1341a:	4620      	mov	r0, r4
}
   1341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   13420:	f7ff bc92 	b.w	12d48 <lll_done>
	LL_ASSERT(err >= 0);
   13424:	4a0c      	ldr	r2, [pc, #48]	; (13458 <abort_cb+0x4c>)
   13426:	490d      	ldr	r1, [pc, #52]	; (1345c <abort_cb+0x50>)
   13428:	480d      	ldr	r0, [pc, #52]	; (13460 <abort_cb+0x54>)
   1342a:	f44f 638c 	mov.w	r3, #1120	; 0x460
   1342e:	f006 f8b0 	bl	19592 <assert_print>
   13432:	4040      	eors	r0, r0
   13434:	f380 8811 	msr	BASEPRI, r0
   13438:	f04f 0003 	mov.w	r0, #3
   1343c:	df02      	svc	2
	lll_done(param);
   1343e:	4620      	mov	r0, r4
}
   13440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   13444:	f7ff bc80 	b.w	12d48 <lll_done>
		radio_isr_set(isr_abort, param);
   13448:	4806      	ldr	r0, [pc, #24]	; (13464 <abort_cb+0x58>)
   1344a:	f001 fd71 	bl	14f30 <radio_isr_set>
}
   1344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   13452:	f001 be65 	b.w	15120 <radio_disable>
   13456:	bf00      	nop
   13458:	00020514 	.word	0x00020514
   1345c:	000204c4 	.word	0x000204c4
   13460:	0001fbf4 	.word	0x0001fbf4
   13464:	000132d5 	.word	0x000132d5

00013468 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   13468:	4b08      	ldr	r3, [pc, #32]	; (1348c <lll_adv_init+0x24>)
   1346a:	2204      	movs	r2, #4
{
   1346c:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1346e:	1898      	adds	r0, r3, r2
   13470:	2128      	movs	r1, #40	; 0x28
   13472:	f7f5 fbbf 	bl	8bf4 <mem_init>
	MFIFO_INIT(pdu_free);
   13476:	4b06      	ldr	r3, [pc, #24]	; (13490 <lll_adv_init+0x28>)
   13478:	2400      	movs	r4, #0
   1347a:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1347c:	2202      	movs	r2, #2
   1347e:	4621      	mov	r1, r4
   13480:	4804      	ldr	r0, [pc, #16]	; (13494 <lll_adv_init+0x2c>)
   13482:	f00b fa26 	bl	1e8d2 <z_impl_k_sem_init>
}
   13486:	4620      	mov	r0, r4
   13488:	bd10      	pop	{r4, pc}
   1348a:	bf00      	nop
   1348c:	200023d4 	.word	0x200023d4
   13490:	20000704 	.word	0x20000704
   13494:	20002478 	.word	0x20002478

00013498 <lll_adv_reset>:
   13498:	4b08      	ldr	r3, [pc, #32]	; (134bc <lll_adv_reset+0x24>)
   1349a:	2204      	movs	r2, #4
   1349c:	b510      	push	{r4, lr}
   1349e:	1898      	adds	r0, r3, r2
   134a0:	2128      	movs	r1, #40	; 0x28
   134a2:	f7f5 fba7 	bl	8bf4 <mem_init>
   134a6:	4b06      	ldr	r3, [pc, #24]	; (134c0 <lll_adv_reset+0x28>)
   134a8:	2400      	movs	r4, #0
   134aa:	809c      	strh	r4, [r3, #4]
   134ac:	2202      	movs	r2, #2
   134ae:	4621      	mov	r1, r4
   134b0:	4804      	ldr	r0, [pc, #16]	; (134c4 <lll_adv_reset+0x2c>)
   134b2:	f00b fa0e 	bl	1e8d2 <z_impl_k_sem_init>
   134b6:	4620      	mov	r0, r4
   134b8:	bd10      	pop	{r4, pc}
   134ba:	bf00      	nop
   134bc:	200023d4 	.word	0x200023d4
   134c0:	20000704 	.word	0x20000704
   134c4:	20002478 	.word	0x20002478

000134c8 <lll_adv_data_init>:
{
   134c8:	b510      	push	{r4, lr}
   134ca:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   134cc:	4805      	ldr	r0, [pc, #20]	; (134e4 <lll_adv_data_init+0x1c>)
   134ce:	f7f5 fbc1 	bl	8c54 <mem_acquire>
	if (!p) {
   134d2:	b120      	cbz	r0, 134de <lll_adv_data_init+0x16>
   134d4:	4603      	mov	r3, r0
	p->len = 0U;
   134d6:	2000      	movs	r0, #0
   134d8:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   134da:	6063      	str	r3, [r4, #4]
}
   134dc:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   134de:	f06f 000b 	mvn.w	r0, #11
}
   134e2:	bd10      	pop	{r4, pc}
   134e4:	200023d4 	.word	0x200023d4

000134e8 <lll_adv_data_reset>:
{
   134e8:	4603      	mov	r3, r0
	pdu->first = 0U;
   134ea:	2000      	movs	r0, #0
   134ec:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   134ee:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   134f0:	6098      	str	r0, [r3, #8]
}
   134f2:	4770      	bx	lr

000134f4 <lll_adv_pdu_alloc_pdu_adv>:
{
   134f4:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   134f6:	4c2d      	ldr	r4, [pc, #180]	; (135ac <lll_adv_pdu_alloc_pdu_adv+0xb8>)
   134f8:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   134fa:	7961      	ldrb	r1, [r4, #5]
   134fc:	7823      	ldrb	r3, [r4, #0]
   134fe:	4291      	cmp	r1, r2
   13500:	d003      	beq.n	1350a <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   13502:	fb02 4303 	mla	r3, r2, r3, r4
   13506:	689d      	ldr	r5, [r3, #8]
	if (p) {
   13508:	b935      	cbnz	r5, 13518 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   1350a:	4829      	ldr	r0, [pc, #164]	; (135b0 <lll_adv_pdu_alloc_pdu_adv+0xbc>)
   1350c:	f7f5 fba2 	bl	8c54 <mem_acquire>
	if (p) {
   13510:	4605      	mov	r5, r0
   13512:	b188      	cbz	r0, 13538 <lll_adv_pdu_alloc_pdu_adv+0x44>
}
   13514:	4628      	mov	r0, r5
   13516:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_reset(sem);
   13518:	4826      	ldr	r0, [pc, #152]	; (135b4 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   1351a:	f004 fd49 	bl	17fb0 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   1351e:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   13520:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   13522:	78a1      	ldrb	r1, [r4, #2]
   13524:	429a      	cmp	r2, r3
   13526:	d0f5      	beq.n	13514 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   13528:	3301      	adds	r3, #1
   1352a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1352c:	4299      	cmp	r1, r3
   1352e:	bf08      	it	eq
   13530:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13532:	7123      	strb	r3, [r4, #4]
}
   13534:	4628      	mov	r0, r5
   13536:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   13538:	481e      	ldr	r0, [pc, #120]	; (135b4 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   1353a:	f04f 32ff 	mov.w	r2, #4294967295
   1353e:	f04f 33ff 	mov.w	r3, #4294967295
   13542:	f004 fd0d 	bl	17f60 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   13546:	bb18      	cbnz	r0, 13590 <lll_adv_pdu_alloc_pdu_adv+0x9c>
	z_impl_k_sem_reset(sem);
   13548:	481a      	ldr	r0, [pc, #104]	; (135b4 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   1354a:	f004 fd31 	bl	17fb0 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   1354e:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   13550:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   13552:	7822      	ldrb	r2, [r4, #0]
   13554:	78a0      	ldrb	r0, [r4, #2]
   13556:	4299      	cmp	r1, r3
   13558:	d00c      	beq.n	13574 <lll_adv_pdu_alloc_pdu_adv+0x80>
	mem = *((void **)(fifo + _first * size));
   1355a:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1355e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   13560:	6892      	ldr	r2, [r2, #8]
	_first += 1U;
   13562:	b2db      	uxtb	r3, r3
		_first = 0U;
   13564:	4298      	cmp	r0, r3
   13566:	bf08      	it	eq
   13568:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1356a:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   1356c:	b112      	cbz	r2, 13574 <lll_adv_pdu_alloc_pdu_adv+0x80>
   1356e:	4615      	mov	r5, r2
}
   13570:	4628      	mov	r0, r5
   13572:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(p);
   13574:	4a10      	ldr	r2, [pc, #64]	; (135b8 <lll_adv_pdu_alloc_pdu_adv+0xc4>)
   13576:	4911      	ldr	r1, [pc, #68]	; (135bc <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   13578:	4811      	ldr	r0, [pc, #68]	; (135c0 <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   1357a:	f240 13b5 	movw	r3, #437	; 0x1b5
   1357e:	f006 f808 	bl	19592 <assert_print>
   13582:	4040      	eors	r0, r0
   13584:	f380 8811 	msr	BASEPRI, r0
   13588:	f04f 0003 	mov.w	r0, #3
   1358c:	df02      	svc	2
   1358e:	e7c1      	b.n	13514 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   13590:	4a09      	ldr	r2, [pc, #36]	; (135b8 <lll_adv_pdu_alloc_pdu_adv+0xc4>)
   13592:	490c      	ldr	r1, [pc, #48]	; (135c4 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   13594:	480a      	ldr	r0, [pc, #40]	; (135c0 <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   13596:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   1359a:	f005 fffa 	bl	19592 <assert_print>
   1359e:	4040      	eors	r0, r0
   135a0:	f380 8811 	msr	BASEPRI, r0
   135a4:	f04f 0003 	mov.w	r0, #3
   135a8:	df02      	svc	2
   135aa:	e7cd      	b.n	13548 <lll_adv_pdu_alloc_pdu_adv+0x54>
   135ac:	20000704 	.word	0x20000704
   135b0:	200023d4 	.word	0x200023d4
   135b4:	20002478 	.word	0x20002478
   135b8:	00020514 	.word	0x00020514
   135bc:	0002057c 	.word	0x0002057c
   135c0:	0001fbf4 	.word	0x0001fbf4
   135c4:	0001fdd8 	.word	0x0001fdd8

000135c8 <lll_adv_pdu_alloc>:
{
   135c8:	b510      	push	{r4, lr}
	first = pdu->first;
   135ca:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   135cc:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   135ce:	429a      	cmp	r2, r3
   135d0:	d014      	beq.n	135fc <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   135d2:	b2d4      	uxtb	r4, r2
   135d4:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   135d6:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   135d8:	4294      	cmp	r4, r2
   135da:	d004      	beq.n	135e6 <lll_adv_pdu_alloc+0x1e>
			last++;
   135dc:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   135de:	7043      	strb	r3, [r0, #1]
			last++;
   135e0:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   135e2:	2b02      	cmp	r3, #2
   135e4:	d00e      	beq.n	13604 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   135e6:	461c      	mov	r4, r3
	*idx = last;
   135e8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   135ec:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   135ee:	6860      	ldr	r0, [r4, #4]
	if (p) {
   135f0:	b100      	cbz	r0, 135f4 <lll_adv_pdu_alloc+0x2c>
}
   135f2:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   135f4:	f7ff ff7e 	bl	134f4 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   135f8:	6060      	str	r0, [r4, #4]
}
   135fa:	bd10      	pop	{r4, pc}
		last++;
   135fc:	3301      	adds	r3, #1
   135fe:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   13600:	2b02      	cmp	r3, #2
   13602:	d1f0      	bne.n	135e6 <lll_adv_pdu_alloc+0x1e>
{
   13604:	2400      	movs	r4, #0
			last = 0U;
   13606:	4623      	mov	r3, r4
   13608:	e7ee      	b.n	135e8 <lll_adv_pdu_alloc+0x20>
   1360a:	bf00      	nop

0001360c <lll_adv_pdu_latest_get>:
{
   1360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1360e:	4604      	mov	r4, r0
	first = pdu->first;
   13610:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   13612:	7840      	ldrb	r0, [r0, #1]
   13614:	4298      	cmp	r0, r3
   13616:	d028      	beq.n	1366a <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   13618:	4a16      	ldr	r2, [pc, #88]	; (13674 <lll_adv_pdu_latest_get+0x68>)
   1361a:	460e      	mov	r6, r1
   1361c:	7951      	ldrb	r1, [r2, #5]
	if (last == count) {
   1361e:	f892 c002 	ldrb.w	ip, [r2, #2]
   13622:	b2dd      	uxtb	r5, r3
	last = last + 1;
   13624:	1c4b      	adds	r3, r1, #1
   13626:	b2db      	uxtb	r3, r3
		last = 0U;
   13628:	459c      	cmp	ip, r3
   1362a:	bf08      	it	eq
   1362c:	2300      	moveq	r3, #0
   1362e:	f892 c004 	ldrb.w	ip, [r2, #4]
   13632:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   13636:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   13638:	6878      	ldr	r0, [r7, #4]
   1363a:	d009      	beq.n	13650 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1363c:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13640:	fb0c 2101 	mla	r1, ip, r1, r2
   13644:	6088      	str	r0, [r1, #8]
	*last = idx; /* Commit: Update write index */
   13646:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   13648:	480b      	ldr	r0, [pc, #44]	; (13678 <lll_adv_pdu_latest_get+0x6c>)
   1364a:	f004 fc63 	bl	17f14 <z_impl_k_sem_give>
			p = next;
   1364e:	2000      	movs	r0, #0
		first += 1U;
   13650:	1c6b      	adds	r3, r5, #1
   13652:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   13654:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   13656:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   13658:	bf04      	itt	eq
   1365a:	2000      	moveq	r0, #0
			first = 0U;
   1365c:	4603      	moveq	r3, r0
		*is_modified = 1U;
   1365e:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   13662:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   13664:	bf18      	it	ne
   13666:	4618      	movne	r0, r3
		*is_modified = 1U;
   13668:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   1366a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   1366e:	6860      	ldr	r0, [r4, #4]
   13670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13672:	bf00      	nop
   13674:	20000704 	.word	0x20000704
   13678:	20002478 	.word	0x20002478

0001367c <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1367c:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1367e:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   13680:	f3c3 1302 	ubfx	r3, r3, #4, #3
   13684:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   13686:	4604      	mov	r4, r0
   13688:	fa93 f0a3 	rbit	r0, r3
   1368c:	fab0 f080 	clz	r0, r0
   13690:	bf08      	it	eq
   13692:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   13696:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   13698:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   1369a:	d039      	beq.n	13710 <chan_prepare.isra.0+0x94>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1369c:	7a21      	ldrb	r1, [r4, #8]
   1369e:	1e5a      	subs	r2, r3, #1
   136a0:	4013      	ands	r3, r2
   136a2:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   136a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   136aa:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   136ac:	f7ff fbce 	bl	12e4c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   136b0:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   136b2:	f10d 0107 	add.w	r1, sp, #7
   136b6:	f104 000c 	add.w	r0, r4, #12
   136ba:	f88d 3007 	strb.w	r3, [sp, #7]
   136be:	f7ff ffa5 	bl	1360c <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   136c2:	4605      	mov	r5, r0
   136c4:	2800      	cmp	r0, #0
   136c6:	d034      	beq.n	13732 <chan_prepare.isra.0+0xb6>

	radio_pkt_tx_set(pdu);
   136c8:	4628      	mov	r0, r5
   136ca:	f001 fd0d 	bl	150e8 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   136ce:	782b      	ldrb	r3, [r5, #0]
   136d0:	f003 030f 	and.w	r3, r3, #15
   136d4:	2b02      	cmp	r3, #2
   136d6:	d013      	beq.n	13700 <chan_prepare.isra.0+0x84>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   136d8:	f10d 0107 	add.w	r1, sp, #7
   136dc:	f104 0018 	add.w	r0, r4, #24
   136e0:	f7ff ff94 	bl	1360c <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   136e4:	2800      	cmp	r0, #0
   136e6:	d032      	beq.n	1374e <chan_prepare.isra.0+0xd2>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   136e8:	4621      	mov	r1, r4
   136ea:	4820      	ldr	r0, [pc, #128]	; (1376c <chan_prepare.isra.0+0xf0>)
   136ec:	f001 fc20 	bl	14f30 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   136f0:	2096      	movs	r0, #150	; 0x96
   136f2:	f001 fe7d 	bl	153f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   136f6:	2000      	movs	r0, #0
   136f8:	f001 fd6e 	bl	151d8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   136fc:	b003      	add	sp, #12
   136fe:	bd30      	pop	{r4, r5, pc}
		radio_isr_set(isr_done, lll);
   13700:	481b      	ldr	r0, [pc, #108]	; (13770 <chan_prepare.isra.0+0xf4>)
   13702:	4621      	mov	r1, r4
   13704:	f001 fc14 	bl	14f30 <radio_isr_set>
		radio_switch_complete_and_disable();
   13708:	f001 fe0e 	bl	15328 <radio_switch_complete_and_disable>
}
   1370c:	b003      	add	sp, #12
   1370e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   13710:	4a18      	ldr	r2, [pc, #96]	; (13774 <chan_prepare.isra.0+0xf8>)
   13712:	4919      	ldr	r1, [pc, #100]	; (13778 <chan_prepare.isra.0+0xfc>)
   13714:	4819      	ldr	r0, [pc, #100]	; (1377c <chan_prepare.isra.0+0x100>)
   13716:	f240 537c 	movw	r3, #1404	; 0x57c
   1371a:	f005 ff3a 	bl	19592 <assert_print>
   1371e:	4040      	eors	r0, r0
   13720:	f380 8811 	msr	BASEPRI, r0
   13724:	f04f 0003 	mov.w	r0, #3
   13728:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1372a:	7a23      	ldrb	r3, [r4, #8]
   1372c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   13730:	e7b4      	b.n	1369c <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   13732:	4a10      	ldr	r2, [pc, #64]	; (13774 <chan_prepare.isra.0+0xf8>)
   13734:	4912      	ldr	r1, [pc, #72]	; (13780 <chan_prepare.isra.0+0x104>)
   13736:	4811      	ldr	r0, [pc, #68]	; (1377c <chan_prepare.isra.0+0x100>)
   13738:	f240 5385 	movw	r3, #1413	; 0x585
   1373c:	f005 ff29 	bl	19592 <assert_print>
   13740:	4040      	eors	r0, r0
   13742:	f380 8811 	msr	BASEPRI, r0
   13746:	f04f 0003 	mov.w	r0, #3
   1374a:	df02      	svc	2
   1374c:	e7bc      	b.n	136c8 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   1374e:	4a09      	ldr	r2, [pc, #36]	; (13774 <chan_prepare.isra.0+0xf8>)
   13750:	490c      	ldr	r1, [pc, #48]	; (13784 <chan_prepare.isra.0+0x108>)
   13752:	480a      	ldr	r0, [pc, #40]	; (1377c <chan_prepare.isra.0+0x100>)
   13754:	f240 538f 	movw	r3, #1423	; 0x58f
   13758:	f005 ff1b 	bl	19592 <assert_print>
   1375c:	4040      	eors	r0, r0
   1375e:	f380 8811 	msr	BASEPRI, r0
   13762:	f04f 0003 	mov.w	r0, #3
   13766:	df02      	svc	2
   13768:	e7be      	b.n	136e8 <chan_prepare.isra.0+0x6c>
   1376a:	bf00      	nop
   1376c:	000132ed 	.word	0x000132ed
   13770:	00013789 	.word	0x00013789
   13774:	00020514 	.word	0x00020514
   13778:	00020580 	.word	0x00020580
   1377c:	0001fbf4 	.word	0x0001fbf4
   13780:	00020588 	.word	0x00020588
   13784:	0002058c 	.word	0x0002058c

00013788 <isr_done>:
{
   13788:	b510      	push	{r4, lr}
   1378a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1378c:	f7ff fbb4 	bl	12ef8 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   13790:	7a23      	ldrb	r3, [r4, #8]
   13792:	f003 0271 	and.w	r2, r3, #113	; 0x71
   13796:	2a01      	cmp	r2, #1
   13798:	d105      	bne.n	137a6 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1379a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1379e:	f362 1306 	bfi	r3, r2, #4, #3
   137a2:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   137a4:	b2db      	uxtb	r3, r3
   137a6:	f013 0f70 	tst.w	r3, #112	; 0x70
   137aa:	d005      	beq.n	137b8 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   137ac:	6863      	ldr	r3, [r4, #4]
   137ae:	b153      	cbz	r3, 137c6 <isr_done+0x3e>
   137b0:	f893 3020 	ldrb.w	r3, [r3, #32]
   137b4:	079b      	lsls	r3, r3, #30
   137b6:	d506      	bpl.n	137c6 <isr_done+0x3e>
	radio_filter_disable();
   137b8:	f001 fde8 	bl	1538c <radio_filter_disable>
	lll_isr_cleanup(param);
   137bc:	4620      	mov	r0, r4
}
   137be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   137c2:	f7ff bba5 	b.w	12f10 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   137c6:	4620      	mov	r0, r4
   137c8:	f7ff ff58 	bl	1367c <chan_prepare.isra.0>
		radio_tx_enable();
   137cc:	f001 fca2 	bl	15114 <radio_tx_enable>
}
   137d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   137d4:	f001 bf10 	b.w	155f8 <radio_tmr_end_capture>

000137d8 <prepare_cb>:
{
   137d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   137da:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   137dc:	6863      	ldr	r3, [r4, #4]
{
   137de:	b083      	sub	sp, #12
   137e0:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   137e2:	2b00      	cmp	r3, #0
   137e4:	d158      	bne.n	13898 <prepare_cb+0xc0>
	radio_reset();
   137e6:	f001 fbe5 	bl	14fb4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   137ea:	2000      	movs	r0, #0
   137ec:	f001 fc18 	bl	15020 <radio_tx_power_set>
	radio_phy_set(0, 0);
   137f0:	2100      	movs	r1, #0
   137f2:	4608      	mov	r0, r1
   137f4:	f001 fc04 	bl	15000 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   137f8:	2200      	movs	r2, #0
   137fa:	2125      	movs	r1, #37	; 0x25
   137fc:	2008      	movs	r0, #8
   137fe:	f001 fc45 	bl	1508c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   13802:	4b2b      	ldr	r3, [pc, #172]	; (138b0 <prepare_cb+0xd8>)
   13804:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   13806:	a801      	add	r0, sp, #4
   13808:	f001 fc28 	bl	1505c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1380c:	4929      	ldr	r1, [pc, #164]	; (138b4 <prepare_cb+0xdc>)
   1380e:	f240 605b 	movw	r0, #1627	; 0x65b
   13812:	f001 fcc3 	bl	1519c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   13816:	7a23      	ldrb	r3, [r4, #8]
   13818:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1381c:	f362 1306 	bfi	r3, r2, #4, #3
   13820:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   13822:	4620      	mov	r0, r4
   13824:	f7ff ff2a 	bl	1367c <chan_prepare.isra.0>
	ull = HDR_LLL2ULL(lll);
   13828:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1382a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1382c:	4638      	mov	r0, r7
   1382e:	f7ff faef 	bl	12e10 <lll_event_offset_get>
   13832:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   13834:	686a      	ldr	r2, [r5, #4]
   13836:	f106 0109 	add.w	r1, r6, #9
   1383a:	2001      	movs	r0, #1
   1383c:	f001 fde4 	bl	15408 <radio_tmr_start>
	radio_tmr_end_capture();
   13840:	f001 feda 	bl	155f8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   13844:	4620      	mov	r0, r4
   13846:	f7f9 fed7 	bl	d5f8 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1384a:	1c81      	adds	r1, r0, #2
   1384c:	4632      	mov	r2, r6
   1384e:	b2c9      	uxtb	r1, r1
   13850:	4638      	mov	r0, r7
   13852:	f7ff faeb 	bl	12e2c <lll_preempt_calc>
   13856:	b930      	cbnz	r0, 13866 <prepare_cb+0x8e>
		ret = lll_prepare_done(lll);
   13858:	4620      	mov	r0, r4
   1385a:	f7ff fa73 	bl	12d44 <lll_prepare_done>
		LL_ASSERT(!ret);
   1385e:	b958      	cbnz	r0, 13878 <prepare_cb+0xa0>
}
   13860:	2000      	movs	r0, #0
   13862:	b003      	add	sp, #12
   13864:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   13866:	4814      	ldr	r0, [pc, #80]	; (138b8 <prepare_cb+0xe0>)
   13868:	4621      	mov	r1, r4
   1386a:	f001 fb61 	bl	14f30 <radio_isr_set>
		radio_disable();
   1386e:	f001 fc57 	bl	15120 <radio_disable>
}
   13872:	2000      	movs	r0, #0
   13874:	b003      	add	sp, #12
   13876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
   13878:	4a10      	ldr	r2, [pc, #64]	; (138bc <prepare_cb+0xe4>)
   1387a:	4911      	ldr	r1, [pc, #68]	; (138c0 <prepare_cb+0xe8>)
   1387c:	4811      	ldr	r0, [pc, #68]	; (138c4 <prepare_cb+0xec>)
   1387e:	f240 4311 	movw	r3, #1041	; 0x411
   13882:	f005 fe86 	bl	19592 <assert_print>
   13886:	4040      	eors	r0, r0
   13888:	f380 8811 	msr	BASEPRI, r0
   1388c:	f04f 0003 	mov.w	r0, #3
   13890:	df02      	svc	2
}
   13892:	2000      	movs	r0, #0
   13894:	b003      	add	sp, #12
   13896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   13898:	f893 3020 	ldrb.w	r3, [r3, #32]
   1389c:	079b      	lsls	r3, r3, #30
   1389e:	d0a2      	beq.n	137e6 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   138a0:	4809      	ldr	r0, [pc, #36]	; (138c8 <prepare_cb+0xf0>)
   138a2:	4621      	mov	r1, r4
   138a4:	f001 fb44 	bl	14f30 <radio_isr_set>
		radio_disable();
   138a8:	f001 fc3a 	bl	15120 <radio_disable>
		return 0;
   138ac:	e7d8      	b.n	13860 <prepare_cb+0x88>
   138ae:	bf00      	nop
   138b0:	8e89bed6 	.word	0x8e89bed6
   138b4:	00555555 	.word	0x00555555
   138b8:	000132d5 	.word	0x000132d5
   138bc:	00020514 	.word	0x00020514
   138c0:	0001fed4 	.word	0x0001fed4
   138c4:	0001fbf4 	.word	0x0001fbf4
   138c8:	00012fa5 	.word	0x00012fa5

000138cc <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   138cc:	68c3      	ldr	r3, [r0, #12]
{
   138ce:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   138d0:	681e      	ldr	r6, [r3, #0]
{
   138d2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   138d4:	f7f6 fca4 	bl	a220 <ticker_ticks_now_get>
   138d8:	4605      	mov	r5, r0
   138da:	4630      	mov	r0, r6
   138dc:	f7ff fa98 	bl	12e10 <lll_event_offset_get>
	p->remainder = 0;
   138e0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   138e2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   138e4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   138e8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   138ea:	4620      	mov	r0, r4
}
   138ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   138f0:	f7ff bf72 	b.w	137d8 <prepare_cb>

000138f4 <lll_adv_prepare>:
{
   138f4:	b510      	push	{r4, lr}
   138f6:	b082      	sub	sp, #8
   138f8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   138fa:	f7ff fcad 	bl	13258 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   138fe:	2800      	cmp	r0, #0
   13900:	db1a      	blt.n	13938 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   13902:	4a14      	ldr	r2, [pc, #80]	; (13954 <lll_adv_prepare+0x60>)
   13904:	4914      	ldr	r1, [pc, #80]	; (13958 <lll_adv_prepare+0x64>)
   13906:	4815      	ldr	r0, [pc, #84]	; (1395c <lll_adv_prepare+0x68>)
   13908:	9400      	str	r4, [sp, #0]
   1390a:	2300      	movs	r3, #0
   1390c:	f7f9 fa2a 	bl	cd64 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13910:	b108      	cbz	r0, 13916 <lll_adv_prepare+0x22>
   13912:	3077      	adds	r0, #119	; 0x77
   13914:	d101      	bne.n	1391a <lll_adv_prepare+0x26>
}
   13916:	b002      	add	sp, #8
   13918:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1391a:	4a11      	ldr	r2, [pc, #68]	; (13960 <lll_adv_prepare+0x6c>)
   1391c:	4911      	ldr	r1, [pc, #68]	; (13964 <lll_adv_prepare+0x70>)
   1391e:	4812      	ldr	r0, [pc, #72]	; (13968 <lll_adv_prepare+0x74>)
   13920:	f240 23a9 	movw	r3, #681	; 0x2a9
   13924:	f005 fe35 	bl	19592 <assert_print>
   13928:	4040      	eors	r0, r0
   1392a:	f380 8811 	msr	BASEPRI, r0
   1392e:	f04f 0003 	mov.w	r0, #3
   13932:	df02      	svc	2
}
   13934:	b002      	add	sp, #8
   13936:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   13938:	4a09      	ldr	r2, [pc, #36]	; (13960 <lll_adv_prepare+0x6c>)
   1393a:	490c      	ldr	r1, [pc, #48]	; (1396c <lll_adv_prepare+0x78>)
   1393c:	480a      	ldr	r0, [pc, #40]	; (13968 <lll_adv_prepare+0x74>)
   1393e:	f240 23a6 	movw	r3, #678	; 0x2a6
   13942:	f005 fe26 	bl	19592 <assert_print>
   13946:	4040      	eors	r0, r0
   13948:	f380 8811 	msr	BASEPRI, r0
   1394c:	f04f 0003 	mov.w	r0, #3
   13950:	df02      	svc	2
   13952:	e7d6      	b.n	13902 <lll_adv_prepare+0xe>
   13954:	000137d9 	.word	0x000137d9
   13958:	0001340d 	.word	0x0001340d
   1395c:	0001339d 	.word	0x0001339d
   13960:	00020514 	.word	0x00020514
   13964:	00020598 	.word	0x00020598
   13968:	0001fbf4 	.word	0x0001fbf4
   1396c:	000204c4 	.word	0x000204c4

00013970 <lll_adv_connect_ind_check>:
{
   13970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13972:	9e07      	ldr	r6, [sp, #28]
   13974:	f89d 7018 	ldrb.w	r7, [sp, #24]
   13978:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1397c:	460d      	mov	r5, r1
	if (tgt_addr) {
   1397e:	b94e      	cbnz	r6, 13994 <lll_adv_connect_ind_check+0x24>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   13980:	7a41      	ldrb	r1, [r0, #9]
		(devmatch_ok)) &&
   13982:	0789      	lsls	r1, r1, #30
   13984:	d500      	bpl.n	13988 <lll_adv_connect_ind_check+0x18>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   13986:	b11c      	cbz	r4, 13990 <lll_adv_connect_ind_check+0x20>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   13988:	7829      	ldrb	r1, [r5, #0]
   1398a:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1398e:	d01b      	beq.n	139c8 <lll_adv_connect_ind_check+0x58>
   13990:	2000      	movs	r0, #0
}
   13992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (tx_addr == ci->rx_addr) &&
   13994:	7809      	ldrb	r1, [r1, #0]
   13996:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1399a:	d1f9      	bne.n	13990 <lll_adv_connect_ind_check+0x20>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1399c:	2206      	movs	r2, #6
   1399e:	4618      	mov	r0, r3
   139a0:	f105 0108 	add.w	r1, r5, #8
   139a4:	f006 ff44 	bl	1a830 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   139a8:	2800      	cmp	r0, #0
   139aa:	d1f1      	bne.n	13990 <lll_adv_connect_ind_check+0x20>
	return (rx_addr == ci->tx_addr) &&
   139ac:	782b      	ldrb	r3, [r5, #0]
   139ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
   139b2:	42bb      	cmp	r3, r7
   139b4:	d1ec      	bne.n	13990 <lll_adv_connect_ind_check+0x20>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   139b6:	2206      	movs	r2, #6
   139b8:	1ca9      	adds	r1, r5, #2
   139ba:	4630      	mov	r0, r6
   139bc:	f006 ff38 	bl	1a830 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   139c0:	fab0 f080 	clz	r0, r0
   139c4:	0940      	lsrs	r0, r0, #5
}
   139c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   139c8:	2206      	movs	r2, #6
   139ca:	f105 0108 	add.w	r1, r5, #8
   139ce:	4618      	mov	r0, r3
   139d0:	f006 ff2e 	bl	1a830 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   139d4:	fab0 f080 	clz	r0, r0
   139d8:	0940      	lsrs	r0, r0, #5
}
   139da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000139dc <isr_rx>:
{
   139dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139e0:	b088      	sub	sp, #32
   139e2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   139e4:	f001 fbc6 	bl	15174 <radio_is_done>
	if (trx_done) {
   139e8:	b2c0      	uxtb	r0, r0
   139ea:	b950      	cbnz	r0, 13a02 <isr_rx+0x26>
	lll_isr_status_reset();
   139ec:	f7ff fa84 	bl	12ef8 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   139f0:	4873      	ldr	r0, [pc, #460]	; (13bc0 <isr_rx+0x1e4>)
   139f2:	4621      	mov	r1, r4
   139f4:	f001 fa9c 	bl	14f30 <radio_isr_set>
}
   139f8:	b008      	add	sp, #32
   139fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_disable();
   139fe:	f001 bb8f 	b.w	15120 <radio_disable>
		crc_ok = radio_crc_is_valid();
   13a02:	f001 fbd7 	bl	151b4 <radio_crc_is_valid>
   13a06:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   13a08:	f001 fcd2 	bl	153b0 <radio_filter_has_match>
	if (crc_ok) {
   13a0c:	b2ed      	uxtb	r5, r5
		devmatch_ok = radio_filter_has_match();
   13a0e:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   13a10:	f001 fcd8 	bl	153c4 <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
   13a14:	f001 fcb0 	bl	15378 <radio_rssi_is_ready>
	lll_isr_status_reset();
   13a18:	f7ff fa6e 	bl	12ef8 <lll_isr_status_reset>
	if (crc_ok) {
   13a1c:	2d00      	cmp	r5, #0
   13a1e:	d0e7      	beq.n	139f0 <isr_rx+0x14>
	uint8_t rl_idx = FILTER_IDX_NONE;
   13a20:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   13a22:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   13a24:	f88d 301f 	strb.w	r3, [sp, #31]
	node_rx = ull_pdu_rx_alloc_peek(1);
   13a28:	f7f8 fe5c 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13a2c:	4605      	mov	r5, r0
   13a2e:	2800      	cmp	r0, #0
   13a30:	f000 809a 	beq.w	13b68 <isr_rx+0x18c>
   13a34:	7b23      	ldrb	r3, [r4, #12]
   13a36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   13a3a:	f105 091c 	add.w	r9, r5, #28
   13a3e:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   13a40:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   13a42:	b2f6      	uxtb	r6, r6
	tx_addr = pdu_adv->tx_addr;
   13a44:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   13a48:	f002 000f 	and.w	r0, r2, #15
   13a4c:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   13a4e:	bf08      	it	eq
   13a50:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13a54:	7f29      	ldrb	r1, [r5, #28]
	tx_addr = pdu_adv->tx_addr;
   13a56:	f3c2 1a80 	ubfx	sl, r2, #6, #1
	rx_addr = pdu_adv->rx_addr;
   13a5a:	ea4f 17d2 	mov.w	r7, r2, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13a5e:	f001 020f 	and.w	r2, r1, #15
		tgt_addr = NULL;
   13a62:	bf18      	it	ne
   13a64:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13a68:	2a03      	cmp	r2, #3
   13a6a:	d050      	beq.n	13b0e <isr_rx+0x132>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13a6c:	2a05      	cmp	r2, #5
   13a6e:	d1bf      	bne.n	139f0 <isr_rx+0x14>
   13a70:	7f6a      	ldrb	r2, [r5, #29]
   13a72:	2a22      	cmp	r2, #34	; 0x22
   13a74:	d1bc      	bne.n	139f0 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   13a76:	6862      	ldr	r2, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   13a78:	2a00      	cmp	r2, #0
   13a7a:	d0b9      	beq.n	139f0 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   13a7c:	f892 2020 	ldrb.w	r2, [r2, #32]
   13a80:	0792      	lsls	r2, r2, #30
   13a82:	d4b5      	bmi.n	139f0 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   13a84:	f10d 051f 	add.w	r5, sp, #31
   13a88:	e9cd 8601 	strd	r8, r6, [sp, #4]
   13a8c:	9700      	str	r7, [sp, #0]
   13a8e:	4652      	mov	r2, sl
   13a90:	4649      	mov	r1, r9
   13a92:	4620      	mov	r0, r4
   13a94:	9503      	str	r5, [sp, #12]
   13a96:	f7ff ff6b 	bl	13970 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   13a9a:	2800      	cmp	r0, #0
   13a9c:	d0a8      	beq.n	139f0 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   13a9e:	2004      	movs	r0, #4
   13aa0:	f7f8 fe20 	bl	c6e4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   13aa4:	2800      	cmp	r0, #0
   13aa6:	d0a3      	beq.n	139f0 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   13aa8:	4846      	ldr	r0, [pc, #280]	; (13bc4 <isr_rx+0x1e8>)
   13aaa:	4621      	mov	r1, r4
   13aac:	f001 fa40 	bl	14f30 <radio_isr_set>
		radio_disable();
   13ab0:	f001 fb36 	bl	15120 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   13ab4:	f001 fb54 	bl	15160 <radio_is_ready>
   13ab8:	2800      	cmp	r0, #0
   13aba:	d147      	bne.n	13b4c <isr_rx+0x170>
		lll->conn->periph.initiated = 1;
   13abc:	6862      	ldr	r2, [r4, #4]
   13abe:	f892 3020 	ldrb.w	r3, [r2, #32]
   13ac2:	f043 0301 	orr.w	r3, r3, #1
   13ac6:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   13aca:	f7f8 fe2b 	bl	c724 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13ace:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   13ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13ad4:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   13ad6:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   13ad8:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   13ada:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   13adc:	f001 fd40 	bl	15560 <radio_tmr_start_get>
   13ae0:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   13ae2:	f001 fd91 	bl	15608 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   13ae6:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   13ae8:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   13aea:	4608      	mov	r0, r1
   13aec:	f001 fb06 	bl	150fc <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   13af0:	1a24      	subs	r4, r4, r0
   13af2:	616c      	str	r4, [r5, #20]
			ftr->extra = ull_pdu_rx_alloc();
   13af4:	f7f8 fe16 	bl	c724 <ull_pdu_rx_alloc>
   13af8:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   13afa:	4629      	mov	r1, r5
   13afc:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   13afe:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   13b00:	f7f8 fe26 	bl	c750 <ull_rx_put>
		ull_rx_sched();
   13b04:	f7f8 fe34 	bl	c770 <ull_rx_sched>
}
   13b08:	b008      	add	sp, #32
   13b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13b0e:	7f6a      	ldrb	r2, [r5, #29]
   13b10:	2a0c      	cmp	r2, #12
   13b12:	f47f af6d 	bne.w	139f0 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   13b16:	f1b8 0f00 	cmp.w	r8, #0
   13b1a:	f47f af69 	bne.w	139f0 <isr_rx+0x14>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   13b1e:	7a62      	ldrb	r2, [r4, #9]
		 devmatch_ok) &&
   13b20:	07d0      	lsls	r0, r2, #31
   13b22:	d502      	bpl.n	13b2a <isr_rx+0x14e>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   13b24:	2e00      	cmp	r6, #0
   13b26:	f43f af63 	beq.w	139f0 <isr_rx+0x14>
	return (tx_addr == sr->rx_addr) &&
   13b2a:	ebba 1fd1 	cmp.w	sl, r1, lsr #7
   13b2e:	f47f af5f 	bne.w	139f0 <isr_rx+0x14>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   13b32:	2206      	movs	r2, #6
   13b34:	f105 0124 	add.w	r1, r5, #36	; 0x24
   13b38:	4618      	mov	r0, r3
   13b3a:	9305      	str	r3, [sp, #20]
   13b3c:	f006 fe78 	bl	1a830 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   13b40:	b300      	cbz	r0, 13b84 <isr_rx+0x1a8>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13b42:	7f2a      	ldrb	r2, [r5, #28]
   13b44:	9b05      	ldr	r3, [sp, #20]
   13b46:	f002 020f 	and.w	r2, r2, #15
   13b4a:	e78f      	b.n	13a6c <isr_rx+0x90>
		LL_ASSERT(!radio_is_ready());
   13b4c:	4a1e      	ldr	r2, [pc, #120]	; (13bc8 <isr_rx+0x1ec>)
   13b4e:	491f      	ldr	r1, [pc, #124]	; (13bcc <isr_rx+0x1f0>)
   13b50:	481f      	ldr	r0, [pc, #124]	; (13bd0 <isr_rx+0x1f4>)
   13b52:	f240 631f 	movw	r3, #1567	; 0x61f
   13b56:	f005 fd1c 	bl	19592 <assert_print>
   13b5a:	4040      	eors	r0, r0
   13b5c:	f380 8811 	msr	BASEPRI, r0
   13b60:	f04f 0003 	mov.w	r0, #3
   13b64:	df02      	svc	2
   13b66:	e7a9      	b.n	13abc <isr_rx+0xe0>
	LL_ASSERT(node_rx);
   13b68:	4a17      	ldr	r2, [pc, #92]	; (13bc8 <isr_rx+0x1ec>)
   13b6a:	491a      	ldr	r1, [pc, #104]	; (13bd4 <isr_rx+0x1f8>)
   13b6c:	4818      	ldr	r0, [pc, #96]	; (13bd0 <isr_rx+0x1f4>)
   13b6e:	f240 53bf 	movw	r3, #1471	; 0x5bf
   13b72:	f005 fd0e 	bl	19592 <assert_print>
   13b76:	4040      	eors	r0, r0
   13b78:	f380 8811 	msr	BASEPRI, r0
   13b7c:	f04f 0003 	mov.w	r0, #3
   13b80:	df02      	svc	2
   13b82:	e757      	b.n	13a34 <isr_rx+0x58>
		radio_isr_set(isr_done, lll);
   13b84:	4621      	mov	r1, r4
   13b86:	480e      	ldr	r0, [pc, #56]	; (13bc0 <isr_rx+0x1e4>)
   13b88:	f001 f9d2 	bl	14f30 <radio_isr_set>
		radio_switch_complete_and_disable();
   13b8c:	f001 fbcc 	bl	15328 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   13b90:	7e23      	ldrb	r3, [r4, #24]
   13b92:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   13b96:	69e0      	ldr	r0, [r4, #28]
   13b98:	f001 faa6 	bl	150e8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   13b9c:	f001 fae0 	bl	15160 <radio_is_ready>
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d0b1      	beq.n	13b08 <isr_rx+0x12c>
   13ba4:	4a08      	ldr	r2, [pc, #32]	; (13bc8 <isr_rx+0x1ec>)
   13ba6:	4909      	ldr	r1, [pc, #36]	; (13bcc <isr_rx+0x1f0>)
   13ba8:	4809      	ldr	r0, [pc, #36]	; (13bd0 <isr_rx+0x1f4>)
   13baa:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
   13bae:	f005 fcf0 	bl	19592 <assert_print>
   13bb2:	4040      	eors	r0, r0
   13bb4:	f380 8811 	msr	BASEPRI, r0
   13bb8:	f04f 0003 	mov.w	r0, #3
   13bbc:	df02      	svc	2
		if (!err) {
   13bbe:	e7a3      	b.n	13b08 <isr_rx+0x12c>
   13bc0:	00013789 	.word	0x00013789
   13bc4:	000132d5 	.word	0x000132d5
   13bc8:	00020514 	.word	0x00020514
   13bcc:	00020568 	.word	0x00020568
   13bd0:	0001fbf4 	.word	0x0001fbf4
   13bd4:	00020560 	.word	0x00020560

00013bd8 <common_prepare_cb>:

	return common_prepare_cb(p, true);
}

static int common_prepare_cb(struct lll_prepare_param *p, bool is_resume)
{
   13bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t aa;

	DEBUG_RADIO_START_O(1);

	lll = p->param;
   13bdc:	68c4      	ldr	r4, [r0, #12]
		return 0;
	}
#endif /* CONFIG_BT_CENTRAL */

	/* Initialize scanning state */
	lll->state = 0U;
   13bde:	7923      	ldrb	r3, [r4, #4]
   13be0:	f36f 0300 	bfc	r3, #0, #1
{
   13be4:	b08c      	sub	sp, #48	; 0x30
	lll->state = 0U;
   13be6:	7123      	strb	r3, [r4, #4]
{
   13be8:	460f      	mov	r7, r1
   13bea:	4605      	mov	r5, r0

	radio_reset();
   13bec:	f001 f9e2 	bl	14fb4 <radio_reset>

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   13bf0:	2000      	movs	r0, #0
   13bf2:	f001 fa15 	bl	15020 <radio_tx_power_set>
			    RADIO_PKT_CONF_PHY(lll->phy));

	lll->is_adv_ind = 0U;
	lll->is_aux_sched = 0U;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	radio_phy_set(0, 0);
   13bf6:	2100      	movs	r1, #0
   13bf8:	4608      	mov	r0, r1
   13bfa:	f001 fa01 	bl	15000 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   13bfe:	2200      	movs	r2, #0
   13c00:	2125      	movs	r1, #37	; 0x25
   13c02:	2008      	movs	r0, #8
   13c04:	f001 fa42 	bl	1508c <radio_pkt_configure>
			    RADIO_PKT_CONF_PHY(RADIO_PKT_CONF_PHY_LEGACY));
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	node_rx = ull_pdu_rx_alloc_peek(1);
   13c08:	2001      	movs	r0, #1
   13c0a:	f7f8 fd6b 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13c0e:	4606      	mov	r6, r0
   13c10:	2800      	cmp	r0, #0
   13c12:	f000 808b 	beq.w	13d2c <common_prepare_cb+0x154>

	radio_pkt_rx_set(node_rx->pdu);
   13c16:	f106 001c 	add.w	r0, r6, #28
   13c1a:	f001 fa5f 	bl	150dc <radio_pkt_rx_set>

	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   13c1e:	4b4a      	ldr	r3, [pc, #296]	; (13d48 <common_prepare_cb+0x170>)
   13c20:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   13c22:	a80b      	add	r0, sp, #44	; 0x2c
   13c24:	f001 fa1a 	bl	1505c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   13c28:	4948      	ldr	r1, [pc, #288]	; (13d4c <common_prepare_cb+0x174>)
   13c2a:	f240 605b 	movw	r0, #1627	; 0x65b
   13c2e:	f001 fab5 	bl	1519c <radio_crc_configure>
					PDU_AC_CRC_IV);

	lll_chan_set(37 + lll->chan);
   13c32:	7920      	ldrb	r0, [r4, #4]
   13c34:	f3c0 0041 	ubfx	r0, r0, #1, #2
   13c38:	3025      	adds	r0, #37	; 0x25
   13c3a:	f7ff f907 	bl	12e4c <lll_chan_set>

	radio_isr_set(isr_rx, lll);
   13c3e:	4844      	ldr	r0, [pc, #272]	; (13d50 <common_prepare_cb+0x178>)
   13c40:	4621      	mov	r1, r4
   13c42:	f001 f975 	bl	14f30 <radio_isr_set>

	/* setup tIFS switching */
	if (0) {
	} else if (lll->type ||
   13c46:	7923      	ldrb	r3, [r4, #4]
   13c48:	069b      	lsls	r3, r3, #26
   13c4a:	d53f      	bpl.n	13ccc <common_prepare_cb+0xf4>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   13c4c:	2096      	movs	r0, #150	; 0x96
   13c4e:	f001 fbcf 	bl	153f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13c52:	2300      	movs	r3, #0
   13c54:	461a      	mov	r2, r3
   13c56:	4619      	mov	r1, r3
   13c58:	4618      	mov	r0, r3
   13c5a:	f001 fb05 	bl	15268 <radio_switch_complete_and_tx>
				       fal->addr_type_bitmask,
				       (uint8_t *)fal->bdaddr);
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   13c5e:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   13c62:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   13c64:	4640      	mov	r0, r8
   13c66:	f7ff f8d3 	bl	12e10 <lll_event_offset_get>
   13c6a:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   13c6c:	686a      	ldr	r2, [r5, #4]
   13c6e:	f106 0109 	add.w	r1, r6, #9
   13c72:	2000      	movs	r0, #0
   13c74:	f001 fbc8 	bl	15408 <radio_tmr_start>

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event or extended scan to schedule auxiliary channel
	 * reception.
	 */
	radio_tmr_end_capture();
   13c78:	f001 fcbe 	bl	155f8 <radio_tmr_end_capture>

	/* scanner always measures RSSI */
	radio_rssi_measure();
   13c7c:	f001 fb64 	bl	15348 <radio_rssi_measure>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
				   ull_scan_lll_handle_get(lll)),
   13c80:	4620      	mov	r0, r4
   13c82:	f7f9 fe2d 	bl	d8e0 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   13c86:	1d01      	adds	r1, r0, #4
   13c88:	b2c9      	uxtb	r1, r1
   13c8a:	4640      	mov	r0, r8
   13c8c:	4632      	mov	r2, r6
   13c8e:	f7ff f8cd 	bl	12e2c <lll_preempt_calc>
   13c92:	b9f0      	cbnz	r0, 13cd2 <common_prepare_cb+0xfa>
	* (EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	*/
	{
		uint32_t ret;

		if (!is_resume && lll->ticks_window) {
   13c94:	b90f      	cbnz	r7, 13c9a <common_prepare_cb+0xc2>
   13c96:	6923      	ldr	r3, [r4, #16]
   13c98:	bb2b      	cbnz	r3, 13ce6 <common_prepare_cb+0x10e>
						&mfy_after_cen_offset_get);
			LL_ASSERT(!retval);
		}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

		ret = lll_prepare_done(lll);
   13c9a:	4620      	mov	r0, r4
   13c9c:	f7ff f852 	bl	12d44 <lll_prepare_done>
		LL_ASSERT(!ret);
   13ca0:	b918      	cbnz	r0, 13caa <common_prepare_cb+0xd2>
	}

	DEBUG_RADIO_START_O(1);

	return 0;
}
   13ca2:	2000      	movs	r0, #0
   13ca4:	b00c      	add	sp, #48	; 0x30
   13ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   13caa:	4a2a      	ldr	r2, [pc, #168]	; (13d54 <common_prepare_cb+0x17c>)
   13cac:	492a      	ldr	r1, [pc, #168]	; (13d58 <common_prepare_cb+0x180>)
   13cae:	482b      	ldr	r0, [pc, #172]	; (13d5c <common_prepare_cb+0x184>)
   13cb0:	f240 2315 	movw	r3, #533	; 0x215
   13cb4:	f005 fc6d 	bl	19592 <assert_print>
   13cb8:	4040      	eors	r0, r0
   13cba:	f380 8811 	msr	BASEPRI, r0
   13cbe:	f04f 0003 	mov.w	r0, #3
   13cc2:	df02      	svc	2
}
   13cc4:	2000      	movs	r0, #0
   13cc6:	b00c      	add	sp, #48	; 0x30
   13cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_disable();
   13ccc:	f001 fb2c 	bl	15328 <radio_switch_complete_and_disable>
   13cd0:	e7c5      	b.n	13c5e <common_prepare_cb+0x86>
		radio_isr_set(isr_abort, lll);
   13cd2:	4823      	ldr	r0, [pc, #140]	; (13d60 <common_prepare_cb+0x188>)
   13cd4:	4621      	mov	r1, r4
   13cd6:	f001 f92b 	bl	14f30 <radio_isr_set>
		radio_disable();
   13cda:	f001 fa21 	bl	15120 <radio_disable>
}
   13cde:	2000      	movs	r0, #0
   13ce0:	b00c      	add	sp, #48	; 0x30
   13ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13ce6:	4d1f      	ldr	r5, [pc, #124]	; (13d64 <common_prepare_cb+0x18c>)
   13ce8:	9507      	str	r5, [sp, #28]
   13cea:	4d1f      	ldr	r5, [pc, #124]	; (13d68 <common_prepare_cb+0x190>)
   13cec:	9505      	str	r5, [sp, #20]
   13cee:	f240 15fb 	movw	r5, #507	; 0x1fb
   13cf2:	9300      	str	r3, [sp, #0]
   13cf4:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13cf8:	4633      	mov	r3, r6
   13cfa:	e9cd 7701 	strd	r7, r7, [sp, #4]
   13cfe:	9406      	str	r4, [sp, #24]
   13d00:	2203      	movs	r2, #3
   13d02:	4639      	mov	r1, r7
   13d04:	9508      	str	r5, [sp, #32]
   13d06:	f7f6 f9bf 	bl	a088 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13d0a:	f030 0302 	bics.w	r3, r0, #2
   13d0e:	d0c4      	beq.n	13c9a <common_prepare_cb+0xc2>
   13d10:	4a10      	ldr	r2, [pc, #64]	; (13d54 <common_prepare_cb+0x17c>)
   13d12:	4916      	ldr	r1, [pc, #88]	; (13d6c <common_prepare_cb+0x194>)
   13d14:	4811      	ldr	r0, [pc, #68]	; (13d5c <common_prepare_cb+0x184>)
   13d16:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   13d1a:	f005 fc3a 	bl	19592 <assert_print>
   13d1e:	4040      	eors	r0, r0
   13d20:	f380 8811 	msr	BASEPRI, r0
   13d24:	f04f 0003 	mov.w	r0, #3
   13d28:	df02      	svc	2
   13d2a:	e7b6      	b.n	13c9a <common_prepare_cb+0xc2>
	LL_ASSERT(node_rx);
   13d2c:	4a09      	ldr	r2, [pc, #36]	; (13d54 <common_prepare_cb+0x17c>)
   13d2e:	4910      	ldr	r1, [pc, #64]	; (13d70 <common_prepare_cb+0x198>)
   13d30:	480a      	ldr	r0, [pc, #40]	; (13d5c <common_prepare_cb+0x184>)
   13d32:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   13d36:	f005 fc2c 	bl	19592 <assert_print>
   13d3a:	4040      	eors	r0, r0
   13d3c:	f380 8811 	msr	BASEPRI, r0
   13d40:	f04f 0003 	mov.w	r0, #3
   13d44:	df02      	svc	2
   13d46:	e766      	b.n	13c16 <common_prepare_cb+0x3e>
   13d48:	8e89bed6 	.word	0x8e89bed6
   13d4c:	00555555 	.word	0x00555555
   13d50:	000140c1 	.word	0x000140c1
   13d54:	000205ac 	.word	0x000205ac
   13d58:	0001fed4 	.word	0x0001fed4
   13d5c:	0001fbf4 	.word	0x0001fbf4
   13d60:	00013e01 	.word	0x00013e01
   13d64:	00013f3d 	.word	0x00013f3d
   13d68:	00013fd1 	.word	0x00013fd1
   13d6c:	0001ffa8 	.word	0x0001ffa8
   13d70:	00020560 	.word	0x00020560

00013d74 <prepare_cb>:
	return common_prepare_cb(p, false);
   13d74:	2100      	movs	r1, #0
   13d76:	f7ff bf2f 	b.w	13bd8 <common_prepare_cb>
   13d7a:	bf00      	nop

00013d7c <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   13d7c:	b538      	push	{r3, r4, r5, lr}
   13d7e:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   13d80:	f7ff f8ba 	bl	12ef8 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   13d84:	7923      	ldrb	r3, [r4, #4]
   13d86:	f36f 0300 	bfc	r3, #0, #1
   13d8a:	7123      	strb	r3, [r4, #4]
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	if (0) {
		/* TODO: Add Rx-Rx switch usecase improvement in the future */
	} else if (lll->type ||
   13d8c:	069b      	lsls	r3, r3, #26
   13d8e:	d519      	bpl.n	13dc4 <isr_common_done+0x48>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
   13d90:	2096      	movs	r0, #150	; 0x96
   13d92:	f001 fb2d 	bl	153f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13d96:	2300      	movs	r3, #0
   13d98:	4618      	mov	r0, r3
   13d9a:	461a      	mov	r2, r3
   13d9c:	4619      	mov	r1, r3
   13d9e:	f001 fa63 	bl	15268 <radio_switch_complete_and_tx>
	} else {
		radio_switch_complete_and_disable();
	}

	node_rx = ull_pdu_rx_alloc_peek(1);
   13da2:	2001      	movs	r0, #1
   13da4:	f7f8 fc9e 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13da8:	4605      	mov	r5, r0
   13daa:	b198      	cbz	r0, 13dd4 <isr_common_done+0x58>
	radio_pkt_rx_set(node_rx->pdu);
   13dac:	f105 001c 	add.w	r0, r5, #28
   13db0:	f001 f994 	bl	150dc <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   13db4:	f001 fac8 	bl	15348 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   13db8:	4621      	mov	r1, r4
   13dba:	480d      	ldr	r0, [pc, #52]	; (13df0 <isr_common_done+0x74>)
}
   13dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   13dc0:	f001 b8b6 	b.w	14f30 <radio_isr_set>
		radio_switch_complete_and_disable();
   13dc4:	f001 fab0 	bl	15328 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   13dc8:	2001      	movs	r0, #1
   13dca:	f7f8 fc8b 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13dce:	4605      	mov	r5, r0
   13dd0:	2800      	cmp	r0, #0
   13dd2:	d1eb      	bne.n	13dac <isr_common_done+0x30>
   13dd4:	4a07      	ldr	r2, [pc, #28]	; (13df4 <isr_common_done+0x78>)
   13dd6:	4908      	ldr	r1, [pc, #32]	; (13df8 <isr_common_done+0x7c>)
   13dd8:	4808      	ldr	r0, [pc, #32]	; (13dfc <isr_common_done+0x80>)
   13dda:	f240 335b 	movw	r3, #859	; 0x35b
   13dde:	f005 fbd8 	bl	19592 <assert_print>
   13de2:	4040      	eors	r0, r0
   13de4:	f380 8811 	msr	BASEPRI, r0
   13de8:	f04f 0003 	mov.w	r0, #3
   13dec:	df02      	svc	2
   13dee:	e7dd      	b.n	13dac <isr_common_done+0x30>
   13df0:	000140c1 	.word	0x000140c1
   13df4:	000205ac 	.word	0x000205ac
   13df8:	00020560 	.word	0x00020560
   13dfc:	0001fbf4 	.word	0x0001fbf4

00013e00 <isr_abort>:
}

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
static void isr_abort(void *param)
{
   13e00:	b510      	push	{r4, lr}
   13e02:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   13e04:	f7ff f878 	bl	12ef8 <lll_isr_status_reset>

	/* Disable Rx filters when aborting scan prepare */
	radio_filter_disable();
   13e08:	f001 fac0 	bl	1538c <radio_filter_disable>
	 */
	extra = ull_done_extra_type_set(EVENT_DONE_EXTRA_TYPE_SCAN);
	LL_ASSERT(extra);
#endif  /* CONFIG_BT_CTLR_ADV_EXT */

	lll_isr_cleanup(param);
   13e0c:	4620      	mov	r0, r4
}
   13e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   13e12:	f7ff b87d 	b.w	12f10 <lll_isr_cleanup>
   13e16:	bf00      	nop

00013e18 <isr_done>:
{
   13e18:	b508      	push	{r3, lr}
	isr_common_done(param);
   13e1a:	f7ff ffaf 	bl	13d7c <isr_common_done>
	radio_rx_enable();
   13e1e:	f001 f973 	bl	15108 <radio_rx_enable>
}
   13e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   13e26:	f001 bbe7 	b.w	155f8 <radio_tmr_end_capture>
   13e2a:	bf00      	nop

00013e2c <isr_tx>:
{
   13e2c:	b570      	push	{r4, r5, r6, lr}
   13e2e:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   13e30:	f7ff f850 	bl	12ed4 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   13e34:	f001 fa78 	bl	15328 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   13e38:	2001      	movs	r0, #1
   13e3a:	f7f8 fc53 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13e3e:	4604      	mov	r4, r0
   13e40:	b368      	cbz	r0, 13e9e <isr_tx+0x72>
	radio_pkt_rx_set(node_rx->pdu);
   13e42:	f104 001c 	add.w	r0, r4, #28
   13e46:	f001 f949 	bl	150dc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   13e4a:	f001 f989 	bl	15160 <radio_is_ready>
   13e4e:	b9c0      	cbnz	r0, 13e82 <isr_tx+0x56>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   13e50:	f001 fbe0 	bl	15614 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   13e54:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   13e56:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   13e58:	4608      	mov	r0, r1
   13e5a:	f001 f94f 	bl	150fc <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   13e5e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   13e60:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   13e62:	4608      	mov	r0, r1
   13e64:	f001 f946 	bl	150f4 <radio_tx_chain_delay_get>
   13e68:	4434      	add	r4, r6
   13e6a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   13e6c:	1a20      	subs	r0, r4, r0
   13e6e:	f001 fb89 	bl	15584 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   13e72:	f001 fa69 	bl	15348 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   13e76:	4629      	mov	r1, r5
   13e78:	4810      	ldr	r0, [pc, #64]	; (13ebc <isr_tx+0x90>)
}
   13e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   13e7e:	f001 b857 	b.w	14f30 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   13e82:	4a0f      	ldr	r2, [pc, #60]	; (13ec0 <isr_tx+0x94>)
   13e84:	490f      	ldr	r1, [pc, #60]	; (13ec4 <isr_tx+0x98>)
   13e86:	4810      	ldr	r0, [pc, #64]	; (13ec8 <isr_tx+0x9c>)
   13e88:	f240 3319 	movw	r3, #793	; 0x319
   13e8c:	f005 fb81 	bl	19592 <assert_print>
   13e90:	4040      	eors	r0, r0
   13e92:	f380 8811 	msr	BASEPRI, r0
   13e96:	f04f 0003 	mov.w	r0, #3
   13e9a:	df02      	svc	2
   13e9c:	e7d8      	b.n	13e50 <isr_tx+0x24>
	LL_ASSERT(node_rx);
   13e9e:	4a08      	ldr	r2, [pc, #32]	; (13ec0 <isr_tx+0x94>)
   13ea0:	490a      	ldr	r1, [pc, #40]	; (13ecc <isr_tx+0xa0>)
   13ea2:	4809      	ldr	r0, [pc, #36]	; (13ec8 <isr_tx+0x9c>)
   13ea4:	f240 3315 	movw	r3, #789	; 0x315
   13ea8:	f005 fb73 	bl	19592 <assert_print>
   13eac:	4040      	eors	r0, r0
   13eae:	f380 8811 	msr	BASEPRI, r0
   13eb2:	f04f 0003 	mov.w	r0, #3
   13eb6:	df02      	svc	2
   13eb8:	e7c3      	b.n	13e42 <isr_tx+0x16>
   13eba:	bf00      	nop
   13ebc:	000140c1 	.word	0x000140c1
   13ec0:	000205ac 	.word	0x000205ac
   13ec4:	00020568 	.word	0x00020568
   13ec8:	0001fbf4 	.word	0x0001fbf4
   13ecc:	00020560 	.word	0x00020560

00013ed0 <isr_window>:
{
   13ed0:	b510      	push	{r4, lr}
   13ed2:	4604      	mov	r4, r0
	isr_common_done(param);
   13ed4:	f7ff ff52 	bl	13d7c <isr_common_done>
	if (++lll->chan == ADV_CHAN_MAX) {
   13ed8:	7922      	ldrb	r2, [r4, #4]
   13eda:	f3c2 0341 	ubfx	r3, r2, #1, #2
   13ede:	3301      	adds	r3, #1
   13ee0:	f003 0303 	and.w	r3, r3, #3
   13ee4:	2b03      	cmp	r3, #3
   13ee6:	d00d      	beq.n	13f04 <isr_window+0x34>
   13ee8:	f363 0242 	bfi	r2, r3, #1, #2
   13eec:	7122      	strb	r2, [r4, #4]
	lll_chan_set(37 + lll->chan);
   13eee:	f103 0025 	add.w	r0, r3, #37	; 0x25
   13ef2:	f7fe ffab 	bl	12e4c <lll_chan_set>
	remainder_us = radio_tmr_start_now(0);
   13ef6:	2000      	movs	r0, #0
   13ef8:	f001 fb08 	bl	1550c <radio_tmr_start_now>
}
   13efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   13f00:	f001 bb7a 	b.w	155f8 <radio_tmr_end_capture>
		lll->chan = 0U;
   13f04:	f36f 0242 	bfc	r2, #1, #2
   13f08:	7122      	strb	r2, [r4, #4]
   13f0a:	2025      	movs	r0, #37	; 0x25
   13f0c:	e7f1      	b.n	13ef2 <isr_window+0x22>
   13f0e:	bf00      	nop

00013f10 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   13f10:	68c3      	ldr	r3, [r0, #12]
{
   13f12:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   13f14:	681e      	ldr	r6, [r3, #0]
{
   13f16:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   13f18:	f7f6 f982 	bl	a220 <ticker_ticks_now_get>
   13f1c:	4605      	mov	r5, r0
   13f1e:	4630      	mov	r0, r6
   13f20:	f7fe ff76 	bl	12e10 <lll_event_offset_get>
	p->remainder = 0;
   13f24:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   13f26:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   13f28:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   13f2c:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   13f2e:	4620      	mov	r0, r4
   13f30:	2101      	movs	r1, #1
}
   13f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   13f36:	f7ff be4f 	b.w	13bd8 <common_prepare_cb>
   13f3a:	bf00      	nop

00013f3c <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13f3c:	b900      	cbnz	r0, 13f40 <ticker_op_start_cb+0x4>
   13f3e:	4770      	bx	lr
{
   13f40:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13f42:	4a07      	ldr	r2, [pc, #28]	; (13f60 <ticker_op_start_cb+0x24>)
   13f44:	4907      	ldr	r1, [pc, #28]	; (13f64 <ticker_op_start_cb+0x28>)
   13f46:	4808      	ldr	r0, [pc, #32]	; (13f68 <ticker_op_start_cb+0x2c>)
   13f48:	f240 2393 	movw	r3, #659	; 0x293
   13f4c:	f005 fb21 	bl	19592 <assert_print>
   13f50:	4040      	eors	r0, r0
   13f52:	f380 8811 	msr	BASEPRI, r0
   13f56:	f04f 0003 	mov.w	r0, #3
   13f5a:	df02      	svc	2
}
   13f5c:	bd08      	pop	{r3, pc}
   13f5e:	bf00      	nop
   13f60:	000205ac 	.word	0x000205ac
   13f64:	000201a0 	.word	0x000201a0
   13f68:	0001fbf4 	.word	0x0001fbf4

00013f6c <is_abort_cb>:
	if (next != curr) {
   13f6c:	4281      	cmp	r1, r0
{
   13f6e:	b508      	push	{r3, lr}
	if (next != curr) {
   13f70:	d00d      	beq.n	13f8e <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   13f72:	690b      	ldr	r3, [r1, #16]
   13f74:	b113      	cbz	r3, 13f7c <is_abort_cb+0x10>
			return -ECANCELED;
   13f76:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   13f7a:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   13f7c:	4b0f      	ldr	r3, [pc, #60]	; (13fbc <is_abort_cb+0x50>)
   13f7e:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   13f80:	f7ff f96a 	bl	13258 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   13f84:	2800      	cmp	r0, #0
   13f86:	db09      	blt.n	13f9c <is_abort_cb+0x30>
				return -EAGAIN;
   13f88:	f06f 000a 	mvn.w	r0, #10
}
   13f8c:	bd08      	pop	{r3, pc}
		radio_isr_set(isr_window, lll);
   13f8e:	480c      	ldr	r0, [pc, #48]	; (13fc0 <is_abort_cb+0x54>)
   13f90:	f000 ffce 	bl	14f30 <radio_isr_set>
	radio_disable();
   13f94:	f001 f8c4 	bl	15120 <radio_disable>
   13f98:	2000      	movs	r0, #0
}
   13f9a:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   13f9c:	4a09      	ldr	r2, [pc, #36]	; (13fc4 <is_abort_cb+0x58>)
   13f9e:	490a      	ldr	r1, [pc, #40]	; (13fc8 <is_abort_cb+0x5c>)
   13fa0:	480a      	ldr	r0, [pc, #40]	; (13fcc <is_abort_cb+0x60>)
   13fa2:	f240 2333 	movw	r3, #563	; 0x233
   13fa6:	f005 faf4 	bl	19592 <assert_print>
   13faa:	4040      	eors	r0, r0
   13fac:	f380 8811 	msr	BASEPRI, r0
   13fb0:	f04f 0003 	mov.w	r0, #3
   13fb4:	df02      	svc	2
				return -EAGAIN;
   13fb6:	f06f 000a 	mvn.w	r0, #10
}
   13fba:	bd08      	pop	{r3, pc}
   13fbc:	00013f11 	.word	0x00013f11
   13fc0:	00013ed1 	.word	0x00013ed1
   13fc4:	000205ac 	.word	0x000205ac
   13fc8:	000204c4 	.word	0x000204c4
   13fcc:	0001fbf4 	.word	0x0001fbf4

00013fd0 <ticker_stop_cb>:
{
   13fd0:	b508      	push	{r3, lr}
	mfy.param = param;
   13fd2:	4b0c      	ldr	r3, [pc, #48]	; (14004 <ticker_stop_cb+0x34>)
{
   13fd4:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   13fd6:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   13fd8:	2200      	movs	r2, #0
   13fda:	4611      	mov	r1, r2
   13fdc:	2001      	movs	r0, #1
   13fde:	f7f4 ff11 	bl	8e04 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13fe2:	b900      	cbnz	r0, 13fe6 <ticker_stop_cb+0x16>
}
   13fe4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   13fe6:	4a08      	ldr	r2, [pc, #32]	; (14008 <ticker_stop_cb+0x38>)
   13fe8:	4908      	ldr	r1, [pc, #32]	; (1400c <ticker_stop_cb+0x3c>)
   13fea:	4809      	ldr	r0, [pc, #36]	; (14010 <ticker_stop_cb+0x40>)
   13fec:	f44f 7323 	mov.w	r3, #652	; 0x28c
   13ff0:	f005 facf 	bl	19592 <assert_print>
   13ff4:	4040      	eors	r0, r0
   13ff6:	f380 8811 	msr	BASEPRI, r0
   13ffa:	f04f 0003 	mov.w	r0, #3
   13ffe:	df02      	svc	2
}
   14000:	bd08      	pop	{r3, pc}
   14002:	bf00      	nop
   14004:	20000718 	.word	0x20000718
   14008:	000205ac 	.word	0x000205ac
   1400c:	0001fed4 	.word	0x0001fed4
   14010:	0001fbf4 	.word	0x0001fbf4

00014014 <abort_cb>:
{
   14014:	b510      	push	{r4, lr}
	if (!prepare_param) {
   14016:	b1d8      	cbz	r0, 14050 <abort_cb+0x3c>
	err = lll_hfclock_off();
   14018:	460c      	mov	r4, r1
   1401a:	f7ff f935 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1401e:	2800      	cmp	r0, #0
   14020:	db04      	blt.n	1402c <abort_cb+0x18>
	lll_done(param);
   14022:	4620      	mov	r0, r4
}
   14024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   14028:	f7fe be8e 	b.w	12d48 <lll_done>
	LL_ASSERT(err >= 0);
   1402c:	4a0c      	ldr	r2, [pc, #48]	; (14060 <abort_cb+0x4c>)
   1402e:	490d      	ldr	r1, [pc, #52]	; (14064 <abort_cb+0x50>)
   14030:	480d      	ldr	r0, [pc, #52]	; (14068 <abort_cb+0x54>)
   14032:	f44f 731f 	mov.w	r3, #636	; 0x27c
   14036:	f005 faac 	bl	19592 <assert_print>
   1403a:	4040      	eors	r0, r0
   1403c:	f380 8811 	msr	BASEPRI, r0
   14040:	f04f 0003 	mov.w	r0, #3
   14044:	df02      	svc	2
	lll_done(param);
   14046:	4620      	mov	r0, r4
}
   14048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1404c:	f7fe be7c 	b.w	12d48 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   14050:	4806      	ldr	r0, [pc, #24]	; (1406c <abort_cb+0x58>)
   14052:	f000 ff6d 	bl	14f30 <radio_isr_set>
}
   14056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1405a:	f001 b861 	b.w	15120 <radio_disable>
   1405e:	bf00      	nop
   14060:	000205ac 	.word	0x000205ac
   14064:	000204c4 	.word	0x000204c4
   14068:	0001fbf4 	.word	0x0001fbf4
   1406c:	00014071 	.word	0x00014071

00014070 <isr_done_cleanup>:
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED &&
	* (EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	*/

static void isr_done_cleanup(void *param)
{
   14070:	b530      	push	{r4, r5, lr}
   14072:	4604      	mov	r4, r0
   14074:	b085      	sub	sp, #20
	struct lll_scan *lll;
	bool is_resume;

	/* Clear radio status and events */
	lll_isr_status_reset();
   14076:	f7fe ff3f 	bl	12ef8 <lll_isr_status_reset>

	/* Under race between duration expire, is_stop is set in this function,
	 * and event preemption, prevent generating duplicate scan done events.
	 */
	if (lll_is_done(param, &is_resume)) {
   1407a:	f10d 010f 	add.w	r1, sp, #15
   1407e:	4620      	mov	r0, r4
   14080:	f7fe feb4 	bl	12dec <lll_is_done>
   14084:	b9c8      	cbnz	r0, 140ba <isr_done_cleanup+0x4a>
		return;
	}

	/* Disable Rx filters when yielding or stopping scan window */
	radio_filter_disable();
   14086:	4605      	mov	r5, r0
   14088:	f001 f980 	bl	1538c <radio_filter_disable>

	/* Next window to use next advertising radio channel */
	lll = param;
	if (++lll->chan == ADV_CHAN_MAX) {
   1408c:	7922      	ldrb	r2, [r4, #4]
   1408e:	f3c2 0341 	ubfx	r3, r2, #1, #2
   14092:	3301      	adds	r3, #1
   14094:	f003 0303 	and.w	r3, r3, #3
   14098:	2b03      	cmp	r3, #3
   1409a:	bf14      	ite	ne
   1409c:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   140a0:	f365 0242 	bfieq	r2, r5, #1, #2

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   140a4:	2300      	movs	r3, #0
		lll->chan = 0U;
   140a6:	7122      	strb	r2, [r4, #4]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   140a8:	4619      	mov	r1, r3
   140aa:	9300      	str	r3, [sp, #0]
   140ac:	2203      	movs	r2, #3
   140ae:	4618      	mov	r0, r3
   140b0:	f7f6 f874 	bl	a19c <ticker_stop>
		ull_rx_put(node_rx->hdr.link, node_rx);
		ull_rx_sched();
	}
#endif  /* CONFIG_BT_CTLR_ADV_EXT */

	lll_isr_cleanup(param);
   140b4:	4620      	mov	r0, r4
   140b6:	f7fe ff2b 	bl	12f10 <lll_isr_cleanup>
}
   140ba:	b005      	add	sp, #20
   140bc:	bd30      	pop	{r4, r5, pc}
   140be:	bf00      	nop

000140c0 <isr_rx>:
{
   140c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140c2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   140c4:	f001 f856 	bl	15174 <radio_is_done>
	if (trx_done) {
   140c8:	b2c0      	uxtb	r0, r0
   140ca:	b948      	cbnz	r0, 140e0 <isr_rx+0x20>
	lll_isr_status_reset();
   140cc:	f7fe ff14 	bl	12ef8 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   140d0:	4621      	mov	r1, r4
   140d2:	4892      	ldr	r0, [pc, #584]	; (1431c <isr_rx+0x25c>)
   140d4:	f000 ff2c 	bl	14f30 <radio_isr_set>
}
   140d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	radio_disable();
   140dc:	f001 b820 	b.w	15120 <radio_disable>
		crc_ok = radio_crc_is_valid();
   140e0:	f001 f868 	bl	151b4 <radio_crc_is_valid>
   140e4:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   140e6:	f001 f963 	bl	153b0 <radio_filter_has_match>
   140ea:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   140ec:	f001 f96a 	bl	153c4 <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
   140f0:	f001 f942 	bl	15378 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
   140f4:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
   140f6:	4606      	mov	r6, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   140f8:	f001 f924 	bl	15344 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   140fc:	f7fe fefc 	bl	12ef8 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   14100:	2d00      	cmp	r5, #0
   14102:	d0e5      	beq.n	140d0 <isr_rx+0x10>
	node_rx = ull_pdu_rx_alloc_peek(1);
   14104:	2001      	movs	r0, #1
   14106:	f7f8 faed 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1410a:	4605      	mov	r5, r0
   1410c:	2800      	cmp	r0, #0
   1410e:	d070      	beq.n	141f2 <isr_rx+0x132>
	return ((lll->filter_policy & SCAN_FP_FILTER) == 0U) ||
   14110:	7923      	ldrb	r3, [r4, #4]
   14112:	071a      	lsls	r2, r3, #28
   14114:	f3c3 0cc1 	ubfx	ip, r3, #3, #2
   14118:	d502      	bpl.n	14120 <isr_rx+0x60>
   1411a:	b2ff      	uxtb	r7, r7
   1411c:	2f00      	cmp	r7, #0
   1411e:	d0d7      	beq.n	140d0 <isr_rx+0x10>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14120:	7f2a      	ldrb	r2, [r5, #28]
   14122:	f012 000f 	ands.w	r0, r2, #15
		rssi_ready = radio_rssi_is_ready();
   14126:	b2f6      	uxtb	r6, r6
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14128:	d057      	beq.n	141da <isr_rx+0x11a>
   1412a:	2806      	cmp	r0, #6
   1412c:	d055      	beq.n	141da <isr_rx+0x11a>
		radio_isr_set(isr_tx, lll);

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1412e:	2802      	cmp	r0, #2
   14130:	d06d      	beq.n	1420e <isr_rx+0x14e>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   14132:	2801      	cmp	r0, #1
   14134:	d118      	bne.n	14168 <isr_rx+0xa8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   14136:	7f69      	ldrb	r1, [r5, #29]
   14138:	290c      	cmp	r1, #12
   1413a:	d1c9      	bne.n	140d0 <isr_rx+0x10>
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == addr_type) &&
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1413c:	f3c3 1180 	ubfx	r1, r3, #6, #1
   14140:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   14144:	ea4f 17d2 	mov.w	r7, r2, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   14148:	f000 80d5 	beq.w	142f6 <isr_rx+0x236>
static inline bool isr_scan_tgta_rpa_check(const struct lll_scan *lll,
					   uint8_t addr_type,
					   const uint8_t *addr,
					   bool *const dir_report)
{
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1414c:	f01c 0f02 	tst.w	ip, #2
   14150:	d0be      	beq.n	140d0 <isr_rx+0x10>
   14152:	b137      	cbz	r7, 14162 <isr_rx+0xa2>
   14154:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   14158:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1415c:	2a40      	cmp	r2, #64	; 0x40
   1415e:	f000 80db 	beq.w	14318 <isr_rx+0x258>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   14162:	7f28      	ldrb	r0, [r5, #28]
   14164:	f000 000f 	and.w	r0, r0, #15
					rl_idx, &dir_report))) ||
   14168:	2804      	cmp	r0, #4
   1416a:	d1b1      	bne.n	140d0 <isr_rx+0x10>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1416c:	7f6a      	ldrb	r2, [r5, #29]
   1416e:	2a25      	cmp	r2, #37	; 0x25
   14170:	d8ae      	bhi.n	140d0 <isr_rx+0x10>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   14172:	07db      	lsls	r3, r3, #31
   14174:	d5ac      	bpl.n	140d0 <isr_rx+0x10>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   14176:	f001 f82b 	bl	151d0 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1417a:	7f2b      	ldrb	r3, [r5, #28]
   1417c:	7802      	ldrb	r2, [r0, #0]
   1417e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14182:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14186:	d1a3      	bne.n	140d0 <isr_rx+0x10>
		(memcmp(&sreq->scan_req.adv_addr[0],
   14188:	2206      	movs	r2, #6
   1418a:	3008      	adds	r0, #8
   1418c:	f105 011e 	add.w	r1, r5, #30
   14190:	f006 fb4e 	bl	1a830 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   14194:	2800      	cmp	r0, #0
   14196:	d19b      	bne.n	140d0 <isr_rx+0x10>
		 (pdu_adv_rx->len != 0) &&
   14198:	7f69      	ldrb	r1, [r5, #29]
   1419a:	4607      	mov	r7, r0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1419c:	2900      	cmp	r1, #0
   1419e:	d097      	beq.n	140d0 <isr_rx+0x10>
			      bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   141a0:	2003      	movs	r0, #3
   141a2:	f7f8 fa9f 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   141a6:	4605      	mov	r5, r0
   141a8:	2800      	cmp	r0, #0
   141aa:	d091      	beq.n	140d0 <isr_rx+0x10>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   141ac:	f7f8 faba 	bl	c724 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   141b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   141b4:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   141b6:	2305      	movs	r3, #5
   141b8:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   141ba:	2e00      	cmp	r6, #0
   141bc:	f040 8082 	bne.w	142c4 <isr_rx+0x204>
   141c0:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   141c2:	7e6b      	ldrb	r3, [r5, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   141c4:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   141c6:	f367 0300 	bfi	r3, r7, #0, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   141ca:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   141cc:	766b      	strb	r3, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   141ce:	4629      	mov	r1, r5
   141d0:	f7f8 fabe 	bl	c750 <ull_rx_put>
	ull_rx_sched();
   141d4:	f7f8 facc 	bl	c770 <ull_rx_sched>
	if (!err) {
   141d8:	e77a      	b.n	140d0 <isr_rx+0x10>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   141da:	7f69      	ldrb	r1, [r5, #29]
   141dc:	2925      	cmp	r1, #37	; 0x25
   141de:	f63f af77 	bhi.w	140d0 <isr_rx+0x10>
		   lll->type &&
   141e2:	069f      	lsls	r7, r3, #26
   141e4:	d419      	bmi.n	1421a <isr_rx+0x15a>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   141e6:	f012 070d 	ands.w	r7, r2, #13
   141ea:	d173      	bne.n	142d4 <isr_rx+0x214>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   141ec:	2925      	cmp	r1, #37	; 0x25
   141ee:	d9d5      	bls.n	1419c <isr_rx+0xdc>
   141f0:	e7ba      	b.n	14168 <isr_rx+0xa8>
	LL_ASSERT(node_rx);
   141f2:	4a4b      	ldr	r2, [pc, #300]	; (14320 <isr_rx+0x260>)
   141f4:	494b      	ldr	r1, [pc, #300]	; (14324 <isr_rx+0x264>)
   141f6:	484c      	ldr	r0, [pc, #304]	; (14328 <isr_rx+0x268>)
   141f8:	f240 23cb 	movw	r3, #715	; 0x2cb
   141fc:	f005 f9c9 	bl	19592 <assert_print>
   14200:	4040      	eors	r0, r0
   14202:	f380 8811 	msr	BASEPRI, r0
   14206:	f04f 0003 	mov.w	r0, #3
   1420a:	df02      	svc	2
   1420c:	e780      	b.n	14110 <isr_rx+0x50>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   1420e:	7f69      	ldrb	r1, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   14210:	2925      	cmp	r1, #37	; 0x25
	bool dir_report = false;
   14212:	bf98      	it	ls
   14214:	2700      	movls	r7, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   14216:	d9c1      	bls.n	1419c <isr_rx+0xdc>
   14218:	e75a      	b.n	140d0 <isr_rx+0x10>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1421a:	2096      	movs	r0, #150	; 0x96
   1421c:	f001 f8e8 	bl	153f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14220:	2000      	movs	r0, #0
   14222:	f000 ffd9 	bl	151d8 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
   14226:	2003      	movs	r0, #3
   14228:	f7f8 fa5c 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1422c:	4607      	mov	r7, r0
   1422e:	2800      	cmp	r0, #0
   14230:	f43f af4e 	beq.w	140d0 <isr_rx+0x10>
	ull_pdu_rx_alloc();
   14234:	f7f8 fa76 	bl	c724 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   14238:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1423c:	80fb      	strh	r3, [r7, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1423e:	2305      	movs	r3, #5
   14240:	713b      	strb	r3, [r7, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   14242:	2e00      	cmp	r6, #0
   14244:	d142      	bne.n	142cc <isr_rx+0x20c>
   14246:	227f      	movs	r2, #127	; 0x7f
	node_rx->hdr.rx_ftr.direct = dir_report;
   14248:	7e7b      	ldrb	r3, [r7, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1424a:	763a      	strb	r2, [r7, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1424c:	f36f 0300 	bfc	r3, #0, #1
   14250:	767b      	strb	r3, [r7, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   14252:	4639      	mov	r1, r7
   14254:	6838      	ldr	r0, [r7, #0]
   14256:	f7f8 fa7b 	bl	c750 <ull_rx_put>
	ull_rx_sched();
   1425a:	f7f8 fa89 	bl	c770 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   1425e:	f000 ffb7 	bl	151d0 <radio_pkt_scratch_get>
			pdu_tx->tx_addr = lll->init_addr_type;
   14262:	7923      	ldrb	r3, [r4, #4]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   14264:	7f2a      	ldrb	r2, [r5, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
   14266:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1426a:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1426c:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   14270:	f043 0303 	orr.w	r3, r3, #3
   14274:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   14278:	7802      	ldrb	r2, [r0, #0]
   1427a:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1427e:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   14280:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   14282:	7003      	strb	r3, [r0, #0]
		pdu_tx = (void *)radio_pkt_scratch_get();
   14284:	4606      	mov	r6, r0
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   14286:	7042      	strb	r2, [r0, #1]
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   14288:	1d61      	adds	r1, r4, #5
   1428a:	2206      	movs	r2, #6
   1428c:	3002      	adds	r0, #2
   1428e:	f006 fae0 	bl	1a852 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   14292:	2206      	movs	r2, #6
   14294:	f105 011e 	add.w	r1, r5, #30
   14298:	f106 0008 	add.w	r0, r6, #8
   1429c:	f006 fad9 	bl	1a852 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   142a0:	4630      	mov	r0, r6
   142a2:	f000 ff21 	bl	150e8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   142a6:	f000 ff5b 	bl	15160 <radio_is_ready>
   142aa:	b9b0      	cbnz	r0, 142da <isr_rx+0x21a>
		radio_tmr_end_capture();
   142ac:	f001 f9a4 	bl	155f8 <radio_tmr_end_capture>
		lll->state = 1U;
   142b0:	7923      	ldrb	r3, [r4, #4]
		radio_isr_set(isr_tx, lll);
   142b2:	481e      	ldr	r0, [pc, #120]	; (1432c <isr_rx+0x26c>)
		lll->state = 1U;
   142b4:	f043 0301 	orr.w	r3, r3, #1
   142b8:	7123      	strb	r3, [r4, #4]
		radio_isr_set(isr_tx, lll);
   142ba:	4621      	mov	r1, r4
}
   142bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_isr_set(isr_tx, lll);
   142c0:	f000 be36 	b.w	14f30 <radio_isr_set>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   142c4:	f001 f84a 	bl	1535c <radio_rssi_get>
   142c8:	b2c0      	uxtb	r0, r0
   142ca:	e77a      	b.n	141c2 <isr_rx+0x102>
   142cc:	f001 f846 	bl	1535c <radio_rssi_get>
   142d0:	b2c2      	uxtb	r2, r0
   142d2:	e7b9      	b.n	14248 <isr_rx+0x188>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   142d4:	2806      	cmp	r0, #6
   142d6:	d09b      	beq.n	14210 <isr_rx+0x150>
   142d8:	e72b      	b.n	14132 <isr_rx+0x72>
		LL_ASSERT(!radio_is_ready());
   142da:	4a11      	ldr	r2, [pc, #68]	; (14320 <isr_rx+0x260>)
   142dc:	4914      	ldr	r1, [pc, #80]	; (14330 <isr_rx+0x270>)
   142de:	4812      	ldr	r0, [pc, #72]	; (14328 <isr_rx+0x268>)
   142e0:	f240 5329 	movw	r3, #1321	; 0x529
   142e4:	f005 f955 	bl	19592 <assert_print>
   142e8:	4040      	eors	r0, r0
   142ea:	f380 8811 	msr	BASEPRI, r0
   142ee:	f04f 0003 	mov.w	r0, #3
   142f2:	df02      	svc	2
   142f4:	e7da      	b.n	142ac <isr_rx+0x1ec>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   142f6:	2206      	movs	r2, #6
   142f8:	f105 0124 	add.w	r1, r5, #36	; 0x24
   142fc:	1d60      	adds	r0, r4, #5
   142fe:	f006 fa97 	bl	1a830 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   14302:	b910      	cbnz	r0, 1430a <isr_rx+0x24a>
		 (pdu_adv_rx->len != 0) &&
   14304:	7f69      	ldrb	r1, [r5, #29]
	bool dir_report = false;
   14306:	4607      	mov	r7, r0
   14308:	e748      	b.n	1419c <isr_rx+0xdc>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1430a:	7923      	ldrb	r3, [r4, #4]
   1430c:	f3c3 02c1 	ubfx	r2, r3, #3, #2
   14310:	0792      	lsls	r2, r2, #30
   14312:	f53f af1e 	bmi.w	14152 <isr_rx+0x92>
   14316:	e724      	b.n	14162 <isr_rx+0xa2>
		 (pdu_adv_rx->len != 0) &&
   14318:	7f69      	ldrb	r1, [r5, #29]
   1431a:	e73f      	b.n	1419c <isr_rx+0xdc>
   1431c:	00013e19 	.word	0x00013e19
   14320:	000205ac 	.word	0x000205ac
   14324:	00020560 	.word	0x00020560
   14328:	0001fbf4 	.word	0x0001fbf4
   1432c:	00013e2d 	.word	0x00013e2d
   14330:	00020568 	.word	0x00020568

00014334 <lll_scan_init>:
}
   14334:	2000      	movs	r0, #0
   14336:	4770      	bx	lr

00014338 <lll_scan_reset>:
   14338:	2000      	movs	r0, #0
   1433a:	4770      	bx	lr

0001433c <lll_scan_prepare>:
{
   1433c:	b510      	push	{r4, lr}
   1433e:	b082      	sub	sp, #8
   14340:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14342:	f7fe ff89 	bl	13258 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14346:	2800      	cmp	r0, #0
   14348:	db19      	blt.n	1437e <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1434a:	4a13      	ldr	r2, [pc, #76]	; (14398 <lll_scan_prepare+0x5c>)
   1434c:	4913      	ldr	r1, [pc, #76]	; (1439c <lll_scan_prepare+0x60>)
   1434e:	4814      	ldr	r0, [pc, #80]	; (143a0 <lll_scan_prepare+0x64>)
   14350:	9400      	str	r4, [sp, #0]
   14352:	2300      	movs	r3, #0
   14354:	f7f8 fd06 	bl	cd64 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14358:	b108      	cbz	r0, 1435e <lll_scan_prepare+0x22>
   1435a:	3077      	adds	r0, #119	; 0x77
   1435c:	d101      	bne.n	14362 <lll_scan_prepare+0x26>
}
   1435e:	b002      	add	sp, #8
   14360:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   14362:	4a10      	ldr	r2, [pc, #64]	; (143a4 <lll_scan_prepare+0x68>)
   14364:	4910      	ldr	r1, [pc, #64]	; (143a8 <lll_scan_prepare+0x6c>)
   14366:	4811      	ldr	r0, [pc, #68]	; (143ac <lll_scan_prepare+0x70>)
   14368:	238c      	movs	r3, #140	; 0x8c
   1436a:	f005 f912 	bl	19592 <assert_print>
   1436e:	4040      	eors	r0, r0
   14370:	f380 8811 	msr	BASEPRI, r0
   14374:	f04f 0003 	mov.w	r0, #3
   14378:	df02      	svc	2
}
   1437a:	b002      	add	sp, #8
   1437c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1437e:	4a09      	ldr	r2, [pc, #36]	; (143a4 <lll_scan_prepare+0x68>)
   14380:	490b      	ldr	r1, [pc, #44]	; (143b0 <lll_scan_prepare+0x74>)
   14382:	480a      	ldr	r0, [pc, #40]	; (143ac <lll_scan_prepare+0x70>)
   14384:	2389      	movs	r3, #137	; 0x89
   14386:	f005 f904 	bl	19592 <assert_print>
   1438a:	4040      	eors	r0, r0
   1438c:	f380 8811 	msr	BASEPRI, r0
   14390:	f04f 0003 	mov.w	r0, #3
   14394:	df02      	svc	2
   14396:	e7d8      	b.n	1434a <lll_scan_prepare+0xe>
   14398:	00013d75 	.word	0x00013d75
   1439c:	00014015 	.word	0x00014015
   143a0:	00013f6d 	.word	0x00013f6d
   143a4:	000205ac 	.word	0x000205ac
   143a8:	00020598 	.word	0x00020598
   143ac:	0001fbf4 	.word	0x0001fbf4
   143b0:	000204c4 	.word	0x000204c4

000143b4 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   143b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143b6:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   143b8:	f7fe fd9e 	bl	12ef8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   143bc:	f7f8 faa2 	bl	c904 <ull_event_done_extra_get>
	LL_ASSERT(e);
   143c0:	4604      	mov	r4, r0
   143c2:	2800      	cmp	r0, #0
   143c4:	d036      	beq.n	14434 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   143c6:	4922      	ldr	r1, [pc, #136]	; (14450 <isr_done+0x9c>)
   143c8:	79a2      	ldrb	r2, [r4, #6]
   143ca:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   143cc:	4b21      	ldr	r3, [pc, #132]	; (14454 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   143ce:	f360 0200 	bfi	r2, r0, #0, #1
   143d2:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   143d4:	4a20      	ldr	r2, [pc, #128]	; (14458 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   143d6:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   143d8:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   143da:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   143dc:	2101      	movs	r1, #1
   143de:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   143e0:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   143e2:	b11b      	cbz	r3, 143ec <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   143e4:	f995 301d 	ldrsb.w	r3, [r5, #29]
   143e8:	2b00      	cmp	r3, #0
   143ea:	db04      	blt.n	143f6 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   143ec:	4628      	mov	r0, r5
}
   143ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   143f2:	f7fe bd8d 	b.w	12f10 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   143f6:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   143fa:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   143fe:	2b02      	cmp	r3, #2
   14400:	d016      	beq.n	14430 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   14402:	2b04      	cmp	r3, #4
   14404:	bf14      	ite	ne
   14406:	2728      	movne	r7, #40	; 0x28
   14408:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1440c:	f001 f8e8 	bl	155e0 <radio_tmr_aa_restore>
   14410:	4606      	mov	r6, r0
   14412:	f001 f8eb 	bl	155ec <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   14416:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   14418:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1441a:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1441c:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   14420:	2300      	movs	r3, #0
   14422:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   14424:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   14426:	4628      	mov	r0, r5
}
   14428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1442c:	f7fe bd70 	b.w	12f10 <lll_isr_cleanup>
	switch (phy) {
   14430:	2718      	movs	r7, #24
   14432:	e7eb      	b.n	1440c <isr_done+0x58>
	LL_ASSERT(e);
   14434:	4a09      	ldr	r2, [pc, #36]	; (1445c <isr_done+0xa8>)
   14436:	490a      	ldr	r1, [pc, #40]	; (14460 <isr_done+0xac>)
   14438:	480a      	ldr	r0, [pc, #40]	; (14464 <isr_done+0xb0>)
   1443a:	f240 3339 	movw	r3, #825	; 0x339
   1443e:	f005 f8a8 	bl	19592 <assert_print>
   14442:	4040      	eors	r0, r0
   14444:	f380 8811 	msr	BASEPRI, r0
   14448:	f04f 0003 	mov.w	r0, #3
   1444c:	df02      	svc	2
   1444e:	e7ba      	b.n	143c6 <isr_done+0x12>
   14450:	2000299e 	.word	0x2000299e
   14454:	200028de 	.word	0x200028de
   14458:	2000299f 	.word	0x2000299f
   1445c:	000205f8 	.word	0x000205f8
   14460:	0001ffd4 	.word	0x0001ffd4
   14464:	0001fbf4 	.word	0x0001fbf4

00014468 <lll_conn_init>:
{
   14468:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1446a:	f000 fead 	bl	151c8 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1446e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   14470:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   14472:	2101      	movs	r1, #1
   14474:	f361 0201 	bfi	r2, r1, #0, #2
}
   14478:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1447a:	701a      	strb	r2, [r3, #0]
}
   1447c:	bd08      	pop	{r3, pc}
   1447e:	bf00      	nop

00014480 <lll_conn_reset>:
}
   14480:	2000      	movs	r0, #0
   14482:	4770      	bx	lr

00014484 <lll_conn_flush>:
}
   14484:	4770      	bx	lr
   14486:	bf00      	nop

00014488 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   14488:	4805      	ldr	r0, [pc, #20]	; (144a0 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1448a:	4906      	ldr	r1, [pc, #24]	; (144a4 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1448c:	4a06      	ldr	r2, [pc, #24]	; (144a8 <lll_conn_prepare_reset+0x20>)
{
   1448e:	b410      	push	{r4}
	trx_cnt = 0U;
   14490:	2300      	movs	r3, #0
   14492:	4c06      	ldr	r4, [pc, #24]	; (144ac <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   14494:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   14496:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   14498:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1449a:	8023      	strh	r3, [r4, #0]
}
   1449c:	bc10      	pop	{r4}
   1449e:	4770      	bx	lr
   144a0:	2000299e 	.word	0x2000299e
   144a4:	2000299d 	.word	0x2000299d
   144a8:	2000299f 	.word	0x2000299f
   144ac:	200028de 	.word	0x200028de

000144b0 <lll_conn_abort_cb>:
{
   144b0:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   144b2:	b1e8      	cbz	r0, 144f0 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   144b4:	460d      	mov	r5, r1
   144b6:	4604      	mov	r4, r0
   144b8:	f7fe fee6 	bl	13288 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   144bc:	2800      	cmp	r0, #0
   144be:	db0a      	blt.n	144d6 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   144c0:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   144c2:	8923      	ldrh	r3, [r4, #8]
   144c4:	8a51      	ldrh	r1, [r2, #18]
   144c6:	3301      	adds	r3, #1
   144c8:	440b      	add	r3, r1
   144ca:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   144cc:	4628      	mov	r0, r5
}
   144ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   144d2:	f7fe bc39 	b.w	12d48 <lll_done>
	LL_ASSERT(err >= 0);
   144d6:	4a0a      	ldr	r2, [pc, #40]	; (14500 <lll_conn_abort_cb+0x50>)
   144d8:	490a      	ldr	r1, [pc, #40]	; (14504 <lll_conn_abort_cb+0x54>)
   144da:	480b      	ldr	r0, [pc, #44]	; (14508 <lll_conn_abort_cb+0x58>)
   144dc:	23aa      	movs	r3, #170	; 0xaa
   144de:	f005 f858 	bl	19592 <assert_print>
   144e2:	4040      	eors	r0, r0
   144e4:	f380 8811 	msr	BASEPRI, r0
   144e8:	f04f 0003 	mov.w	r0, #3
   144ec:	df02      	svc	2
   144ee:	e7e7      	b.n	144c0 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   144f0:	4806      	ldr	r0, [pc, #24]	; (1450c <lll_conn_abort_cb+0x5c>)
   144f2:	f000 fd1d 	bl	14f30 <radio_isr_set>
}
   144f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   144fa:	f000 be11 	b.w	15120 <radio_disable>
   144fe:	bf00      	nop
   14500:	000205f8 	.word	0x000205f8
   14504:	000204c4 	.word	0x000204c4
   14508:	0001fbf4 	.word	0x0001fbf4
   1450c:	000143b5 	.word	0x000143b5

00014510 <lll_conn_rx_pkt_set>:
{
   14510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14512:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   14514:	2001      	movs	r0, #1
   14516:	f7f8 f8e5 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1451a:	4604      	mov	r4, r0
   1451c:	b348      	cbz	r0, 14572 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1451e:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   14522:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   14524:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   14528:	2100      	movs	r1, #0
   1452a:	4630      	mov	r0, r6
   1452c:	f000 fd68 	bl	15000 <radio_phy_set>
	} else if (lll->enc_rx) {
   14530:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   14534:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   14536:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   14538:	b2f9      	uxtb	r1, r7
   1453a:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   1453e:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   14542:	d50e      	bpl.n	14562 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   14544:	3104      	adds	r1, #4
   14546:	b2c9      	uxtb	r1, r1
   14548:	2008      	movs	r0, #8
   1454a:	f000 fd9f 	bl	1508c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1454e:	4622      	mov	r2, r4
   14550:	4631      	mov	r1, r6
   14552:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   14556:	f001 f863 	bl	15620 <radio_ccm_rx_pkt_set>
}
   1455a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1455e:	f000 bdbd 	b.w	150dc <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   14562:	2008      	movs	r0, #8
   14564:	f000 fd92 	bl	1508c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   14568:	4620      	mov	r0, r4
}
   1456a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1456e:	f000 bdb5 	b.w	150dc <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   14572:	4a07      	ldr	r2, [pc, #28]	; (14590 <lll_conn_rx_pkt_set+0x80>)
   14574:	4907      	ldr	r1, [pc, #28]	; (14594 <lll_conn_rx_pkt_set+0x84>)
   14576:	4808      	ldr	r0, [pc, #32]	; (14598 <lll_conn_rx_pkt_set+0x88>)
   14578:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1457c:	f005 f809 	bl	19592 <assert_print>
   14580:	4040      	eors	r0, r0
   14582:	f380 8811 	msr	BASEPRI, r0
   14586:	f04f 0003 	mov.w	r0, #3
   1458a:	df02      	svc	2
   1458c:	e7c7      	b.n	1451e <lll_conn_rx_pkt_set+0xe>
   1458e:	bf00      	nop
   14590:	000205f8 	.word	0x000205f8
   14594:	00020560 	.word	0x00020560
   14598:	0001fbf4 	.word	0x0001fbf4

0001459c <lll_conn_isr_tx>:
{
   1459c:	b538      	push	{r3, r4, r5, lr}
   1459e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   145a0:	f7fe fc98 	bl	12ed4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   145a4:	2096      	movs	r0, #150	; 0x96
   145a6:	f000 ff23 	bl	153f0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   145aa:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   145ae:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   145b2:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   145b6:	f000 0007 	and.w	r0, r0, #7
   145ba:	f002 0207 	and.w	r2, r2, #7
   145be:	2100      	movs	r1, #0
   145c0:	f000 fe52 	bl	15268 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   145c4:	4620      	mov	r0, r4
   145c6:	f7ff ffa3 	bl	14510 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   145ca:	f000 fdc9 	bl	15160 <radio_is_ready>
   145ce:	bb58      	cbnz	r0, 14628 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   145d0:	f001 f820 	bl	15614 <radio_tmr_tifs_base_get>
   145d4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   145d6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   145da:	2101      	movs	r1, #1
   145dc:	f000 0007 	and.w	r0, r0, #7
   145e0:	f000 fd8c 	bl	150fc <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   145e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   145e8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   145ec:	4405      	add	r5, r0
   145ee:	2b02      	cmp	r3, #2
   145f0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   145f4:	d016      	beq.n	14624 <lll_conn_isr_tx+0x88>
		return 376;
   145f6:	2b04      	cmp	r3, #4
   145f8:	bf14      	ite	ne
   145fa:	2328      	movne	r3, #40	; 0x28
   145fc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   14600:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   14604:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   14608:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1460c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1460e:	f000 fd71 	bl	150f4 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   14612:	1a28      	subs	r0, r5, r0
   14614:	f000 ffb6 	bl	15584 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   14618:	4621      	mov	r1, r4
   1461a:	480a      	ldr	r0, [pc, #40]	; (14644 <lll_conn_isr_tx+0xa8>)
}
   1461c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   14620:	f000 bc86 	b.w	14f30 <radio_isr_set>
	switch (phy) {
   14624:	2318      	movs	r3, #24
   14626:	e7eb      	b.n	14600 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   14628:	4a07      	ldr	r2, [pc, #28]	; (14648 <lll_conn_isr_tx+0xac>)
   1462a:	4908      	ldr	r1, [pc, #32]	; (1464c <lll_conn_isr_tx+0xb0>)
   1462c:	4808      	ldr	r0, [pc, #32]	; (14650 <lll_conn_isr_tx+0xb4>)
   1462e:	f240 2331 	movw	r3, #561	; 0x231
   14632:	f004 ffae 	bl	19592 <assert_print>
   14636:	4040      	eors	r0, r0
   14638:	f380 8811 	msr	BASEPRI, r0
   1463c:	f04f 0003 	mov.w	r0, #3
   14640:	df02      	svc	2
   14642:	e7c5      	b.n	145d0 <lll_conn_isr_tx+0x34>
   14644:	0001478d 	.word	0x0001478d
   14648:	000205f8 	.word	0x000205f8
   1464c:	00020568 	.word	0x00020568
   14650:	0001fbf4 	.word	0x0001fbf4

00014654 <lll_conn_tx_pkt_set>:
{
   14654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14656:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   14658:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   1465c:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   1465e:	f001 0407 	and.w	r4, r1, #7
{
   14662:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   14664:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   14668:	4620      	mov	r0, r4
   1466a:	f000 fcc9 	bl	15000 <radio_phy_set>
	} else if (lll->enc_tx) {
   1466e:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   14672:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   14674:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   14676:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1467a:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   1467c:	d50d      	bpl.n	1469a <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1467e:	3104      	adds	r1, #4
   14680:	b2c9      	uxtb	r1, r1
   14682:	2008      	movs	r0, #8
   14684:	f000 fd02 	bl	1508c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   14688:	4639      	mov	r1, r7
   1468a:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1468e:	f001 f80f 	bl	156b0 <radio_ccm_tx_pkt_set>
}
   14692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   14696:	f000 bd27 	b.w	150e8 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1469a:	2008      	movs	r0, #8
   1469c:	f000 fcf6 	bl	1508c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   146a0:	4638      	mov	r0, r7
}
   146a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   146a6:	f000 bd1f 	b.w	150e8 <radio_pkt_tx_set>
   146aa:	bf00      	nop

000146ac <lll_conn_pdu_tx_prep>:
{
   146ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   146b0:	4604      	mov	r4, r0
   146b2:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   146b4:	aa01      	add	r2, sp, #4
   146b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   146b8:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   146ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   146bc:	f7f4 fb38 	bl	8d30 <memq_peek>
	if (lll->empty || !link) {
   146c0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   146c4:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   146c6:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   146c8:	d432      	bmi.n	14730 <lll_conn_pdu_tx_prep+0x84>
   146ca:	2800      	cmp	r0, #0
   146cc:	d04e      	beq.n	1476c <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   146ce:	9b01      	ldr	r3, [sp, #4]
   146d0:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   146d4:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   146d8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   146dc:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   146e0:	b913      	cbnz	r3, 146e8 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   146e2:	786b      	ldrb	r3, [r5, #1]
   146e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   146e8:	b137      	cbz	r7, 146f8 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   146ea:	f818 2007 	ldrb.w	r2, [r8, r7]
   146ee:	2101      	movs	r1, #1
   146f0:	f361 0201 	bfi	r2, r1, #0, #2
   146f4:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   146f8:	1bdb      	subs	r3, r3, r7
   146fa:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   146fc:	4620      	mov	r0, r4
   146fe:	f7fd fdef 	bl	122e0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   14702:	786b      	ldrb	r3, [r5, #1]
   14704:	4283      	cmp	r3, r0
   14706:	d924      	bls.n	14752 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   14708:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1470a:	f818 3007 	ldrb.w	r3, [r8, r7]
   1470e:	f043 0310 	orr.w	r3, r3, #16
   14712:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   14716:	f818 3007 	ldrb.w	r3, [r8, r7]
   1471a:	f36f 1347 	bfc	r3, #5, #3
   1471e:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   14722:	2300      	movs	r3, #0
   14724:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   14726:	f8c9 5000 	str.w	r5, [r9]
}
   1472a:	b003      	add	sp, #12
   1472c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   14730:	f043 0304 	orr.w	r3, r3, #4
   14734:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   14738:	f000 fd46 	bl	151c8 <radio_pkt_empty_get>
   1473c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1473e:	b1e6      	cbz	r6, 1477a <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   14740:	7803      	ldrb	r3, [r0, #0]
   14742:	f043 0310 	orr.w	r3, r3, #16
   14746:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   14748:	f8c9 5000 	str.w	r5, [r9]
}
   1474c:	b003      	add	sp, #12
   1474e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   14752:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14754:	6832      	ldr	r2, [r6, #0]
   14756:	429a      	cmp	r2, r3
			p->md = 1U;
   14758:	f818 3007 	ldrb.w	r3, [r8, r7]
   1475c:	bf14      	ite	ne
   1475e:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   14762:	f36f 1304 	bfceq	r3, #4, #1
   14766:	f808 3007 	strb.w	r3, [r8, r7]
   1476a:	e7d4      	b.n	14716 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1476c:	f043 0304 	orr.w	r3, r3, #4
   14770:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   14774:	f000 fd28 	bl	151c8 <radio_pkt_empty_get>
   14778:	4605      	mov	r5, r0
			p->md = 0U;
   1477a:	782b      	ldrb	r3, [r5, #0]
   1477c:	f36f 1304 	bfc	r3, #4, #1
   14780:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   14782:	f8c9 5000 	str.w	r5, [r9]
}
   14786:	b003      	add	sp, #12
   14788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001478c <lll_conn_isr_rx>:
{
   1478c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1478e:	b083      	sub	sp, #12
   14790:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   14792:	f000 fcef 	bl	15174 <radio_is_done>
	if (trx_done) {
   14796:	b2c0      	uxtb	r0, r0
   14798:	b950      	cbnz	r0, 147b0 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1479a:	f7fe fba3 	bl	12ee4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1479e:	48ae      	ldr	r0, [pc, #696]	; (14a58 <lll_conn_isr_rx+0x2cc>)
   147a0:	4621      	mov	r1, r4
   147a2:	f000 fbc5 	bl	14f30 <radio_isr_set>
}
   147a6:	b003      	add	sp, #12
   147a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   147ac:	f000 bcb8 	b.w	15120 <radio_disable>
		crc_ok = radio_crc_is_valid();
   147b0:	f000 fd00 	bl	151b4 <radio_crc_is_valid>
   147b4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   147b6:	f000 fddf 	bl	15378 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   147ba:	f7fe fb93 	bl	12ee4 <lll_isr_rx_status_reset>
	trx_cnt++;
   147be:	4aa7      	ldr	r2, [pc, #668]	; (14a5c <lll_conn_isr_rx+0x2d0>)
   147c0:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   147c2:	2001      	movs	r0, #1
	trx_cnt++;
   147c4:	4403      	add	r3, r0
   147c6:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   147c8:	f7f7 ff8c 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   147cc:	4607      	mov	r7, r0
   147ce:	2800      	cmp	r0, #0
   147d0:	f000 80cd 	beq.w	1496e <lll_conn_isr_rx+0x1e2>
	if (crc_ok) {
   147d4:	2d00      	cmp	r5, #0
   147d6:	d155      	bne.n	14884 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   147d8:	4ba1      	ldr	r3, [pc, #644]	; (14a60 <lll_conn_isr_rx+0x2d4>)
   147da:	781e      	ldrb	r6, [r3, #0]
   147dc:	2e00      	cmp	r6, #0
   147de:	f040 80a7 	bne.w	14930 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   147e2:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   147e4:	a901      	add	r1, sp, #4
   147e6:	4620      	mov	r0, r4
		crc_expire--;
   147e8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   147ea:	f7ff ff5f 	bl	146ac <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   147ee:	2096      	movs	r0, #150	; 0x96
   147f0:	f000 fdfe 	bl	153f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   147f4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   147f8:	f000 0007 	and.w	r0, r0, #7
   147fc:	f000 fcec 	bl	151d8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   14800:	4898      	ldr	r0, [pc, #608]	; (14a64 <lll_conn_isr_rx+0x2d8>)
   14802:	4621      	mov	r1, r4
   14804:	f000 fb94 	bl	14f30 <radio_isr_set>
		radio_tmr_end_capture();
   14808:	f000 fef6 	bl	155f8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1480c:	9901      	ldr	r1, [sp, #4]
   1480e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   14812:	780b      	ldrb	r3, [r1, #0]
   14814:	f023 000c 	bic.w	r0, r3, #12
   14818:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1481c:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1481e:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   14822:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   14826:	4303      	orrs	r3, r0
   14828:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1482a:	4620      	mov	r0, r4
   1482c:	f7ff ff12 	bl	14654 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   14830:	f000 fc96 	bl	15160 <radio_is_ready>
   14834:	2800      	cmp	r0, #0
   14836:	f040 808c 	bne.w	14952 <lll_conn_isr_rx+0x1c6>
	if (!radio_tmr_aa_restore()) {
   1483a:	f000 fed1 	bl	155e0 <radio_tmr_aa_restore>
   1483e:	b170      	cbz	r0, 1485e <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   14840:	b19d      	cbz	r5, 1486a <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   14842:	89a0      	ldrh	r0, [r4, #12]
   14844:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14848:	4298      	cmp	r0, r3
   1484a:	f000 80bf 	beq.w	149cc <lll_conn_isr_rx+0x240>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1484e:	4629      	mov	r1, r5
   14850:	f7fd fbd6 	bl	12000 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   14854:	b95e      	cbnz	r6, 1486e <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   14856:	f7f7 ff8b 	bl	c770 <ull_rx_sched>
}
   1485a:	b003      	add	sp, #12
   1485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1485e:	f000 feb3 	bl	155c8 <radio_tmr_aa_get>
   14862:	f000 feb7 	bl	155d4 <radio_tmr_aa_save>
	if (tx_release) {
   14866:	2d00      	cmp	r5, #0
   14868:	d1eb      	bne.n	14842 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1486a:	2e00      	cmp	r6, #0
   1486c:	d0f5      	beq.n	1485a <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   1486e:	f7f7 ff59 	bl	c724 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14872:	2303      	movs	r3, #3
   14874:	713b      	strb	r3, [r7, #4]
		node_rx->hdr.handle = lll->handle;
   14876:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   14878:	6838      	ldr	r0, [r7, #0]
		node_rx->hdr.handle = lll->handle;
   1487a:	80fb      	strh	r3, [r7, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1487c:	4639      	mov	r1, r7
   1487e:	f7f7 ff67 	bl	c750 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   14882:	e7e8      	b.n	14856 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   14884:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   14888:	7f3a      	ldrb	r2, [r7, #28]
   1488a:	f003 0101 	and.w	r1, r3, #1
   1488e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   14892:	4288      	cmp	r0, r1
   14894:	d07b      	beq.n	1498e <lll_conn_isr_rx+0x202>
		if (lll->role) {
   14896:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   1489a:	f081 0101 	eor.w	r1, r1, #1
   1489e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   148a2:	2a00      	cmp	r2, #0
		lll->sn++;
   148a4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   148a8:	da05      	bge.n	148b6 <lll_conn_isr_rx+0x12a>
			lll->periph.latency_enabled = 1;
   148aa:	f894 3020 	ldrb.w	r3, [r4, #32]
   148ae:	f043 0304 	orr.w	r3, r3, #4
   148b2:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   148b6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   148ba:	075a      	lsls	r2, r3, #29
   148bc:	f100 8095 	bmi.w	149ea <lll_conn_isr_rx+0x25e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   148c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   148c4:	aa01      	add	r2, sp, #4
   148c6:	f7f4 fa33 	bl	8d30 <memq_peek>
		if (link) {
   148ca:	4605      	mov	r5, r0
   148cc:	2800      	cmp	r0, #0
   148ce:	f000 80bf 	beq.w	14a50 <lll_conn_isr_rx+0x2c4>
					       lll->packet_tx_head_offset);
   148d2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   148d6:	9b01      	ldr	r3, [sp, #4]
   148d8:	4413      	add	r3, r2
   148da:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   148dc:	b171      	cbz	r1, 148fc <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   148de:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   148e2:	06de      	lsls	r6, r3, #27
   148e4:	d50a      	bpl.n	148fc <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   148e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   148ea:	3301      	adds	r3, #1
   148ec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   148f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   148f4:	f143 0300 	adc.w	r3, r3, #0
   148f8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   148fc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   14900:	440a      	add	r2, r1
   14902:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   14904:	429a      	cmp	r2, r3
   14906:	d37b      	bcc.n	14a00 <lll_conn_isr_rx+0x274>
			} else if (offset == lll->packet_tx_head_len) {
   14908:	f000 8095 	beq.w	14a36 <lll_conn_isr_rx+0x2aa>
				LL_ASSERT(0);
   1490c:	4a56      	ldr	r2, [pc, #344]	; (14a68 <lll_conn_isr_rx+0x2dc>)
   1490e:	4957      	ldr	r1, [pc, #348]	; (14a6c <lll_conn_isr_rx+0x2e0>)
   14910:	4857      	ldr	r0, [pc, #348]	; (14a70 <lll_conn_isr_rx+0x2e4>)
   14912:	f240 33c5 	movw	r3, #965	; 0x3c5
   14916:	f004 fe3c 	bl	19592 <assert_print>
   1491a:	4040      	eors	r0, r0
   1491c:	f380 8811 	msr	BASEPRI, r0
   14920:	f04f 0003 	mov.w	r0, #3
   14924:	df02      	svc	2
	tx_release = NULL;
   14926:	2500      	movs	r5, #0
   14928:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1492c:	7f3a      	ldrb	r2, [r7, #28]
   1492e:	e02f      	b.n	14990 <lll_conn_isr_rx+0x204>
		crc_expire--;
   14930:	3e01      	subs	r6, #1
   14932:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   14934:	a901      	add	r1, sp, #4
   14936:	4620      	mov	r0, r4
		crc_expire--;
   14938:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1493a:	f7ff feb7 	bl	146ac <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1493e:	2e00      	cmp	r6, #0
   14940:	f040 8106 	bne.w	14b50 <lll_conn_isr_rx+0x3c4>
		radio_isr_set(isr_done, param);
   14944:	4844      	ldr	r0, [pc, #272]	; (14a58 <lll_conn_isr_rx+0x2cc>)
   14946:	4621      	mov	r1, r4
   14948:	f000 faf2 	bl	14f30 <radio_isr_set>
			radio_switch_complete_and_disable();
   1494c:	f000 fcec 	bl	15328 <radio_switch_complete_and_disable>
   14950:	e75c      	b.n	1480c <lll_conn_isr_rx+0x80>
	LL_ASSERT(!radio_is_ready());
   14952:	4a45      	ldr	r2, [pc, #276]	; (14a68 <lll_conn_isr_rx+0x2dc>)
   14954:	4947      	ldr	r1, [pc, #284]	; (14a74 <lll_conn_isr_rx+0x2e8>)
   14956:	4846      	ldr	r0, [pc, #280]	; (14a70 <lll_conn_isr_rx+0x2e4>)
   14958:	f44f 73c0 	mov.w	r3, #384	; 0x180
   1495c:	f004 fe19 	bl	19592 <assert_print>
   14960:	4040      	eors	r0, r0
   14962:	f380 8811 	msr	BASEPRI, r0
   14966:	f04f 0003 	mov.w	r0, #3
   1496a:	df02      	svc	2
   1496c:	e765      	b.n	1483a <lll_conn_isr_rx+0xae>
	LL_ASSERT(node_rx);
   1496e:	4a3e      	ldr	r2, [pc, #248]	; (14a68 <lll_conn_isr_rx+0x2dc>)
   14970:	4941      	ldr	r1, [pc, #260]	; (14a78 <lll_conn_isr_rx+0x2ec>)
   14972:	483f      	ldr	r0, [pc, #252]	; (14a70 <lll_conn_isr_rx+0x2e4>)
   14974:	23f2      	movs	r3, #242	; 0xf2
   14976:	f004 fe0c 	bl	19592 <assert_print>
   1497a:	4040      	eors	r0, r0
   1497c:	f380 8811 	msr	BASEPRI, r0
   14980:	f04f 0003 	mov.w	r0, #3
   14984:	df02      	svc	2
	if (crc_ok) {
   14986:	2d00      	cmp	r5, #0
   14988:	f43f af26 	beq.w	147d8 <lll_conn_isr_rx+0x4c>
   1498c:	e77a      	b.n	14884 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1498e:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   14990:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14994:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14998:	429a      	cmp	r2, r3
   1499a:	d038      	beq.n	14a0e <lll_conn_isr_rx+0x282>
	is_rx_enqueue = 0U;
   1499c:	2600      	movs	r6, #0
		crc_expire = 0U;
   1499e:	4a30      	ldr	r2, [pc, #192]	; (14a60 <lll_conn_isr_rx+0x2d4>)
		crc_valid = 1U;
   149a0:	4b36      	ldr	r3, [pc, #216]	; (14a7c <lll_conn_isr_rx+0x2f0>)
		crc_expire = 0U;
   149a2:	2100      	movs	r1, #0
   149a4:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   149a6:	4620      	mov	r0, r4
		crc_valid = 1U;
   149a8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   149aa:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   149ac:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   149ae:	f7ff fe7d 	bl	146ac <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   149b2:	7f3b      	ldrb	r3, [r7, #28]
   149b4:	06d9      	lsls	r1, r3, #27
   149b6:	f53f af1a 	bmi.w	147ee <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   149ba:	9b01      	ldr	r3, [sp, #4]
   149bc:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   149be:	06d2      	lsls	r2, r2, #27
   149c0:	f53f af15 	bmi.w	147ee <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   149c4:	785b      	ldrb	r3, [r3, #1]
   149c6:	2b00      	cmp	r3, #0
   149c8:	d0bc      	beq.n	14944 <lll_conn_isr_rx+0x1b8>
   149ca:	e710      	b.n	147ee <lll_conn_isr_rx+0x62>
		LL_ASSERT(lll->handle != 0xFFFF);
   149cc:	4a26      	ldr	r2, [pc, #152]	; (14a68 <lll_conn_isr_rx+0x2dc>)
   149ce:	492c      	ldr	r1, [pc, #176]	; (14a80 <lll_conn_isr_rx+0x2f4>)
   149d0:	4827      	ldr	r0, [pc, #156]	; (14a70 <lll_conn_isr_rx+0x2e4>)
   149d2:	f44f 73cb 	mov.w	r3, #406	; 0x196
   149d6:	f004 fddc 	bl	19592 <assert_print>
   149da:	4040      	eors	r0, r0
   149dc:	f380 8811 	msr	BASEPRI, r0
   149e0:	f04f 0003 	mov.w	r0, #3
   149e4:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   149e6:	89a0      	ldrh	r0, [r4, #12]
   149e8:	e731      	b.n	1484e <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   149ea:	f36f 0382 	bfc	r3, #2, #1
   149ee:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   149f2:	f000 fbe9 	bl	151c8 <radio_pkt_empty_get>
	tx_release = NULL;
   149f6:	2500      	movs	r5, #0
   149f8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   149fc:	7f3a      	ldrb	r2, [r7, #28]
   149fe:	e7c7      	b.n	14990 <lll_conn_isr_rx+0x204>
				lll->packet_tx_head_offset = offset;
   14a00:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   14a04:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   14a08:	7f3a      	ldrb	r2, [r7, #28]
	tx_release = NULL;
   14a0a:	2500      	movs	r5, #0
   14a0c:	e7c0      	b.n	14990 <lll_conn_isr_rx+0x204>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   14a0e:	2003      	movs	r0, #3
   14a10:	f7f7 fe68 	bl	c6e4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   14a14:	2800      	cmp	r0, #0
   14a16:	d0c1      	beq.n	1499c <lll_conn_isr_rx+0x210>
		lll->nesn++;
   14a18:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   14a1c:	f083 0302 	eor.w	r3, r3, #2
   14a20:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   14a24:	7f7b      	ldrb	r3, [r7, #29]
   14a26:	2b00      	cmp	r3, #0
   14a28:	d0b8      	beq.n	1499c <lll_conn_isr_rx+0x210>
			if (lll->enc_rx) {
   14a2a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   14a2e:	0718      	lsls	r0, r3, #28
   14a30:	d428      	bmi.n	14a84 <lll_conn_isr_rx+0x2f8>
			*is_rx_enqueue = 1U;
   14a32:	2601      	movs	r6, #1
   14a34:	e7b3      	b.n	1499e <lll_conn_isr_rx+0x212>
				lll->packet_tx_head_len = 0;
   14a36:	2200      	movs	r2, #0
   14a38:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   14a3c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14a3e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   14a42:	f7f4 f97d 	bl	8d40 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   14a46:	9b01      	ldr	r3, [sp, #4]
   14a48:	681a      	ldr	r2, [r3, #0]
   14a4a:	602a      	str	r2, [r5, #0]
				tx->next = link;
   14a4c:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   14a4e:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   14a50:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   14a54:	7f3a      	ldrb	r2, [r7, #28]
   14a56:	e79b      	b.n	14990 <lll_conn_isr_rx+0x204>
   14a58:	000143b5 	.word	0x000143b5
   14a5c:	200028de 	.word	0x200028de
   14a60:	2000299d 	.word	0x2000299d
   14a64:	0001459d 	.word	0x0001459d
   14a68:	000205f8 	.word	0x000205f8
   14a6c:	0001fc54 	.word	0x0001fc54
   14a70:	0001fbf4 	.word	0x0001fbf4
   14a74:	00020568 	.word	0x00020568
   14a78:	00020560 	.word	0x00020560
   14a7c:	2000299e 	.word	0x2000299e
   14a80:	0002064c 	.word	0x0002064c
				done = radio_ccm_is_done();
   14a84:	f000 fe3e 	bl	15704 <radio_ccm_is_done>
				LL_ASSERT(done);
   14a88:	2800      	cmp	r0, #0
   14a8a:	d053      	beq.n	14b34 <lll_conn_isr_rx+0x3a8>
				bool mic_failure = !radio_ccm_mic_is_valid();
   14a8c:	f000 fe5c 	bl	15748 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   14a90:	2800      	cmp	r0, #0
   14a92:	d13f      	bne.n	14b14 <lll_conn_isr_rx+0x388>
				    lll->ccm_rx.counter == 0 &&
   14a94:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   14a98:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   14a9c:	4313      	orrs	r3, r2
   14a9e:	d104      	bne.n	14aaa <lll_conn_isr_rx+0x31e>
				    (pdu_data_rx->ll_id ==
   14aa0:	7f3b      	ldrb	r3, [r7, #28]
				    lll->ccm_rx.counter == 0 &&
   14aa2:	f003 0303 	and.w	r3, r3, #3
   14aa6:	2b03      	cmp	r3, #3
   14aa8:	d01d      	beq.n	14ae6 <lll_conn_isr_rx+0x35a>
					mic_state = LLL_CONN_MIC_FAIL;
   14aaa:	4b2a      	ldr	r3, [pc, #168]	; (14b54 <lll_conn_isr_rx+0x3c8>)
			radio_isr_set(isr_done, param);
   14aac:	482a      	ldr	r0, [pc, #168]	; (14b58 <lll_conn_isr_rx+0x3cc>)
					mic_state = LLL_CONN_MIC_FAIL;
   14aae:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   14ab0:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   14ab2:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   14ab4:	f000 fa3c 	bl	14f30 <radio_isr_set>
			radio_disable();
   14ab8:	f000 fb32 	bl	15120 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   14abc:	f000 fb50 	bl	15160 <radio_is_ready>
   14ac0:	4606      	mov	r6, r0
   14ac2:	2800      	cmp	r0, #0
   14ac4:	f43f aeb9 	beq.w	1483a <lll_conn_isr_rx+0xae>
   14ac8:	4a24      	ldr	r2, [pc, #144]	; (14b5c <lll_conn_isr_rx+0x3d0>)
   14aca:	4925      	ldr	r1, [pc, #148]	; (14b60 <lll_conn_isr_rx+0x3d4>)
   14acc:	4825      	ldr	r0, [pc, #148]	; (14b64 <lll_conn_isr_rx+0x3d8>)
   14ace:	f240 1303 	movw	r3, #259	; 0x103
   14ad2:	f004 fd5e 	bl	19592 <assert_print>
   14ad6:	4040      	eors	r0, r0
   14ad8:	f380 8811 	msr	BASEPRI, r0
   14adc:	f04f 0003 	mov.w	r0, #3
   14ae0:	df02      	svc	2
	is_rx_enqueue = 0U;
   14ae2:	2600      	movs	r6, #0
   14ae4:	e6a9      	b.n	1483a <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   14ae6:	f000 fb73 	bl	151d0 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   14aea:	7843      	ldrb	r3, [r0, #1]
   14aec:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   14aee:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   14af0:	d8db      	bhi.n	14aaa <lll_conn_isr_rx+0x31e>
						memcpy(pdu_data_rx,
   14af2:	3303      	adds	r3, #3
   14af4:	b2da      	uxtb	r2, r3
   14af6:	f107 001c 	add.w	r0, r7, #28
   14afa:	f005 feaa 	bl	1a852 <memcpy>
						lll->ccm_rx.counter--;
   14afe:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   14b02:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   14b06:	3b01      	subs	r3, #1
   14b08:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   14b0c:	f142 33ff 	adc.w	r3, r2, #4294967295
   14b10:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   14b14:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   14b18:	4a0e      	ldr	r2, [pc, #56]	; (14b54 <lll_conn_isr_rx+0x3c8>)
				lll->ccm_rx.counter++;
   14b1a:	3301      	adds	r3, #1
   14b1c:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   14b20:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   14b24:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   14b28:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   14b2c:	2601      	movs	r6, #1
				lll->ccm_rx.counter++;
   14b2e:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   14b30:	7016      	strb	r6, [r2, #0]
		if (err) {
   14b32:	e734      	b.n	1499e <lll_conn_isr_rx+0x212>
				LL_ASSERT(done);
   14b34:	4a09      	ldr	r2, [pc, #36]	; (14b5c <lll_conn_isr_rx+0x3d0>)
   14b36:	490c      	ldr	r1, [pc, #48]	; (14b68 <lll_conn_isr_rx+0x3dc>)
   14b38:	480a      	ldr	r0, [pc, #40]	; (14b64 <lll_conn_isr_rx+0x3d8>)
   14b3a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   14b3e:	f004 fd28 	bl	19592 <assert_print>
   14b42:	4040      	eors	r0, r0
   14b44:	f380 8811 	msr	BASEPRI, r0
   14b48:	f04f 0003 	mov.w	r0, #3
   14b4c:	df02      	svc	2
   14b4e:	e79d      	b.n	14a8c <lll_conn_isr_rx+0x300>
	is_rx_enqueue = 0U;
   14b50:	462e      	mov	r6, r5
   14b52:	e64c      	b.n	147ee <lll_conn_isr_rx+0x62>
   14b54:	2000299f 	.word	0x2000299f
   14b58:	000143b5 	.word	0x000143b5
   14b5c:	000205f8 	.word	0x000205f8
   14b60:	00020568 	.word	0x00020568
   14b64:	0001fbf4 	.word	0x0001fbf4
   14b68:	00020644 	.word	0x00020644

00014b6c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   14b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   14b6e:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   14b70:	89a2      	ldrh	r2, [r4, #12]
   14b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b76:	429a      	cmp	r2, r3
{
   14b78:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   14b7a:	f000 80d0 	beq.w	14d1e <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   14b7e:	4605      	mov	r5, r0
   14b80:	f7ff fc82 	bl	14488 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   14b84:	892b      	ldrh	r3, [r5, #8]
   14b86:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   14b88:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   14b8a:	441a      	add	r2, r3
   14b8c:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   14b8e:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   14b90:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   14b92:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   14b94:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   14b96:	1c41      	adds	r1, r0, #1
   14b98:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   14b9a:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   14b9c:	f04f 0100 	mov.w	r1, #0
   14ba0:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   14ba2:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   14ba6:	f100 808d 	bmi.w	14cc4 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   14baa:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   14bae:	460b      	mov	r3, r1
   14bb0:	7fa1      	ldrb	r1, [r4, #30]
   14bb2:	9000      	str	r0, [sp, #0]
   14bb4:	f104 001f 	add.w	r0, r4, #31
   14bb8:	f7fd fce4 	bl	12584 <lll_chan_sel_1>
   14bbc:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   14bbe:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   14bc2:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   14bc4:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   14bc8:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   14bca:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   14bcc:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   14bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   14bd0:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   14bd2:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   14bd4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   14bd8:	428b      	cmp	r3, r1
   14bda:	bf28      	it	cs
   14bdc:	460b      	movcs	r3, r1
	if (!lll->empty) {
   14bde:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   14be2:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   14be4:	f000 808d 	beq.w	14d02 <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   14be8:	f000 f9e4 	bl	14fb4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14bec:	2000      	movs	r0, #0
   14bee:	f000 fa17 	bl	15020 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	radio_aa_set(lll->access_addr);
   14bf2:	1d20      	adds	r0, r4, #4
   14bf4:	f000 fa32 	bl	1505c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   14bf8:	8923      	ldrh	r3, [r4, #8]
   14bfa:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   14bfc:	f240 605b 	movw	r0, #1627	; 0x65b
   14c00:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   14c04:	f000 faca 	bl	1519c <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   14c08:	4630      	mov	r0, r6
   14c0a:	f7fe f91f 	bl	12e4c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   14c0e:	4621      	mov	r1, r4
   14c10:	4847      	ldr	r0, [pc, #284]	; (14d30 <prepare_cb+0x1c4>)
   14c12:	f000 f98d 	bl	14f30 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   14c16:	2096      	movs	r0, #150	; 0x96
   14c18:	f000 fbea 	bl	153f0 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   14c1c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   14c20:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   14c24:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   14c28:	2100      	movs	r1, #0
   14c2a:	f002 0207 	and.w	r2, r2, #7
   14c2e:	f000 0007 	and.w	r0, r0, #7
   14c32:	f000 fb19 	bl	15268 <radio_switch_complete_and_tx>
	}

	/* The call can use Radio interface that alternates NRF_RADIO->SHORTS. The register is
	 * set by radio_switch_complete_XXX functions, hence any changes done before are cleared.
	 */
	lll_conn_rx_pkt_set(lll);
   14c36:	4620      	mov	r0, r4
   14c38:	f7ff fc6a 	bl	14510 <lll_conn_rx_pkt_set>

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   14c3c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   14c3e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   14c40:	4638      	mov	r0, r7
   14c42:	f7fe f8e5 	bl	12e10 <lll_event_offset_get>
   14c46:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14c48:	686a      	ldr	r2, [r5, #4]
   14c4a:	f106 0109 	add.w	r1, r6, #9
   14c4e:	2000      	movs	r0, #0
   14c50:	f000 fbda 	bl	15408 <radio_tmr_start>
   14c54:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   14c56:	f000 fca3 	bl	155a0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   14c5a:	2000      	movs	r0, #0
   14c5c:	f000 fcba 	bl	155d4 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   14c60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c62:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   14c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14c68:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   14c6c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   14c70:	2101      	movs	r1, #1
   14c72:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   14c76:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   14c78:	f000 fa3e 	bl	150f8 <radio_rx_ready_delay_get>
   14c7c:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   14c7e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   14c82:	f000 0007 	and.w	r0, r0, #7
   14c86:	2802      	cmp	r0, #2
   14c88:	d039      	beq.n	14cfe <prepare_cb+0x192>
		return 40;
   14c8a:	2804      	cmp	r0, #4
   14c8c:	bf0c      	ite	eq
   14c8e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   14c92:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   14c94:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   14c96:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   14c98:	f000 fa30 	bl	150fc <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   14c9c:	4428      	add	r0, r5
   14c9e:	f000 fc71 	bl	15584 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   14ca2:	89a1      	ldrh	r1, [r4, #12]
   14ca4:	3105      	adds	r1, #5
   14ca6:	4632      	mov	r2, r6
   14ca8:	b2c9      	uxtb	r1, r1
   14caa:	4638      	mov	r0, r7
   14cac:	f7fe f8be 	bl	12e2c <lll_preempt_calc>
   14cb0:	b180      	cbz	r0, 14cd4 <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   14cb2:	4820      	ldr	r0, [pc, #128]	; (14d34 <prepare_cb+0x1c8>)
   14cb4:	4621      	mov	r1, r4
   14cb6:	f000 f93b 	bl	14f30 <radio_isr_set>
		radio_disable();
   14cba:	f000 fa31 	bl	15120 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   14cbe:	2000      	movs	r0, #0
   14cc0:	b003      	add	sp, #12
   14cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   14cc4:	460a      	mov	r2, r1
   14cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14cca:	8be1      	ldrh	r1, [r4, #30]
   14ccc:	f7fd fc9e 	bl	1260c <lll_chan_sel_2>
   14cd0:	4606      	mov	r6, r0
   14cd2:	e774      	b.n	14bbe <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   14cd4:	4620      	mov	r0, r4
   14cd6:	f7fe f835 	bl	12d44 <lll_prepare_done>
		LL_ASSERT(!ret);
   14cda:	2800      	cmp	r0, #0
   14cdc:	d0ef      	beq.n	14cbe <prepare_cb+0x152>
   14cde:	4a16      	ldr	r2, [pc, #88]	; (14d38 <prepare_cb+0x1cc>)
   14ce0:	4916      	ldr	r1, [pc, #88]	; (14d3c <prepare_cb+0x1d0>)
   14ce2:	4817      	ldr	r0, [pc, #92]	; (14d40 <prepare_cb+0x1d4>)
   14ce4:	f240 1351 	movw	r3, #337	; 0x151
   14ce8:	f004 fc53 	bl	19592 <assert_print>
   14cec:	4040      	eors	r0, r0
   14cee:	f380 8811 	msr	BASEPRI, r0
   14cf2:	f04f 0003 	mov.w	r0, #3
   14cf6:	df02      	svc	2
}
   14cf8:	2000      	movs	r0, #0
   14cfa:	b003      	add	sp, #12
   14cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   14cfe:	2318      	movs	r3, #24
   14d00:	e7c8      	b.n	14c94 <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   14d02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   14d06:	f7f4 f813 	bl	8d30 <memq_peek>
		if (!link) {
   14d0a:	2800      	cmp	r0, #0
   14d0c:	f47f af6c 	bne.w	14be8 <prepare_cb+0x7c>
			lll->empty = 1U;
   14d10:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   14d14:	f043 0304 	orr.w	r3, r3, #4
   14d18:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   14d1c:	e764      	b.n	14be8 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   14d1e:	4809      	ldr	r0, [pc, #36]	; (14d44 <prepare_cb+0x1d8>)
   14d20:	4621      	mov	r1, r4
   14d22:	f000 f905 	bl	14f30 <radio_isr_set>
		radio_disable();
   14d26:	f000 f9fb 	bl	15120 <radio_disable>
}
   14d2a:	2000      	movs	r0, #0
   14d2c:	b003      	add	sp, #12
   14d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d30:	0001478d 	.word	0x0001478d
   14d34:	00012f85 	.word	0x00012f85
   14d38:	00020664 	.word	0x00020664
   14d3c:	0001fed4 	.word	0x0001fed4
   14d40:	0001fbf4 	.word	0x0001fbf4
   14d44:	00012fa5 	.word	0x00012fa5

00014d48 <lll_periph_prepare>:
{
   14d48:	b510      	push	{r4, lr}
   14d4a:	b082      	sub	sp, #8
   14d4c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14d4e:	f7fe fa83 	bl	13258 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14d52:	2800      	cmp	r0, #0
   14d54:	db25      	blt.n	14da2 <lll_periph_prepare+0x5a>
	lll = p->param;
   14d56:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   14d58:	8920      	ldrh	r0, [r4, #8]
   14d5a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   14d5c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   14d5e:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   14d62:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   14d64:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   14d66:	4283      	cmp	r3, r0
   14d68:	bf28      	it	cs
   14d6a:	4603      	movcs	r3, r0
   14d6c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   14d6e:	4a13      	ldr	r2, [pc, #76]	; (14dbc <lll_periph_prepare+0x74>)
   14d70:	4913      	ldr	r1, [pc, #76]	; (14dc0 <lll_periph_prepare+0x78>)
   14d72:	4814      	ldr	r0, [pc, #80]	; (14dc4 <lll_periph_prepare+0x7c>)
   14d74:	9400      	str	r4, [sp, #0]
   14d76:	2300      	movs	r3, #0
   14d78:	f7f7 fff4 	bl	cd64 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14d7c:	b108      	cbz	r0, 14d82 <lll_periph_prepare+0x3a>
   14d7e:	3077      	adds	r0, #119	; 0x77
   14d80:	d101      	bne.n	14d86 <lll_periph_prepare+0x3e>
}
   14d82:	b002      	add	sp, #8
   14d84:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   14d86:	4a10      	ldr	r2, [pc, #64]	; (14dc8 <lll_periph_prepare+0x80>)
   14d88:	4910      	ldr	r1, [pc, #64]	; (14dcc <lll_periph_prepare+0x84>)
   14d8a:	4811      	ldr	r0, [pc, #68]	; (14dd0 <lll_periph_prepare+0x88>)
   14d8c:	235e      	movs	r3, #94	; 0x5e
   14d8e:	f004 fc00 	bl	19592 <assert_print>
   14d92:	4040      	eors	r0, r0
   14d94:	f380 8811 	msr	BASEPRI, r0
   14d98:	f04f 0003 	mov.w	r0, #3
   14d9c:	df02      	svc	2
}
   14d9e:	b002      	add	sp, #8
   14da0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   14da2:	4a09      	ldr	r2, [pc, #36]	; (14dc8 <lll_periph_prepare+0x80>)
   14da4:	490b      	ldr	r1, [pc, #44]	; (14dd4 <lll_periph_prepare+0x8c>)
   14da6:	480a      	ldr	r0, [pc, #40]	; (14dd0 <lll_periph_prepare+0x88>)
   14da8:	234d      	movs	r3, #77	; 0x4d
   14daa:	f004 fbf2 	bl	19592 <assert_print>
   14dae:	4040      	eors	r0, r0
   14db0:	f380 8811 	msr	BASEPRI, r0
   14db4:	f04f 0003 	mov.w	r0, #3
   14db8:	df02      	svc	2
   14dba:	e7cc      	b.n	14d56 <lll_periph_prepare+0xe>
   14dbc:	00014b6d 	.word	0x00014b6d
   14dc0:	000144b1 	.word	0x000144b1
   14dc4:	00012e09 	.word	0x00012e09
   14dc8:	00020664 	.word	0x00020664
   14dcc:	00020598 	.word	0x00020598
   14dd0:	0001fbf4 	.word	0x0001fbf4
   14dd4:	000204c4 	.word	0x000204c4

00014dd8 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   14dd8:	4b05      	ldr	r3, [pc, #20]	; (14df0 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14dde:	2100      	movs	r1, #0
   14de0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   14de4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   14de8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   14dec:	4770      	bx	lr
   14dee:	bf00      	nop
   14df0:	4000b000 	.word	0x4000b000

00014df4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   14df4:	4b05      	ldr	r3, [pc, #20]	; (14e0c <cntr_start+0x18>)
   14df6:	7818      	ldrb	r0, [r3, #0]
   14df8:	1c42      	adds	r2, r0, #1
   14dfa:	701a      	strb	r2, [r3, #0]
   14dfc:	b918      	cbnz	r0, 14e06 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14dfe:	4b04      	ldr	r3, [pc, #16]	; (14e10 <cntr_start+0x1c>)
   14e00:	2201      	movs	r2, #1
   14e02:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   14e04:	4770      	bx	lr
		return 1;
   14e06:	2001      	movs	r0, #1
}
   14e08:	4770      	bx	lr
   14e0a:	bf00      	nop
   14e0c:	200029a0 	.word	0x200029a0
   14e10:	4000b000 	.word	0x4000b000

00014e14 <cntr_stop>:

uint32_t cntr_stop(void)
{
   14e14:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   14e16:	4c0d      	ldr	r4, [pc, #52]	; (14e4c <cntr_stop+0x38>)
   14e18:	7820      	ldrb	r0, [r4, #0]
   14e1a:	b148      	cbz	r0, 14e30 <cntr_stop+0x1c>

	if (--_refcount) {
   14e1c:	3801      	subs	r0, #1
   14e1e:	b2c0      	uxtb	r0, r0
   14e20:	7020      	strb	r0, [r4, #0]
   14e22:	b918      	cbnz	r0, 14e2c <cntr_stop+0x18>
   14e24:	4b0a      	ldr	r3, [pc, #40]	; (14e50 <cntr_stop+0x3c>)
   14e26:	2201      	movs	r2, #1
   14e28:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   14e2a:	bd10      	pop	{r4, pc}
		return 1;
   14e2c:	2001      	movs	r0, #1
}
   14e2e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   14e30:	4a08      	ldr	r2, [pc, #32]	; (14e54 <cntr_stop+0x40>)
   14e32:	4909      	ldr	r1, [pc, #36]	; (14e58 <cntr_stop+0x44>)
   14e34:	4809      	ldr	r0, [pc, #36]	; (14e5c <cntr_stop+0x48>)
   14e36:	232d      	movs	r3, #45	; 0x2d
   14e38:	f004 fbab 	bl	19592 <assert_print>
   14e3c:	4040      	eors	r0, r0
   14e3e:	f380 8811 	msr	BASEPRI, r0
   14e42:	f04f 0003 	mov.w	r0, #3
   14e46:	df02      	svc	2
	if (--_refcount) {
   14e48:	7820      	ldrb	r0, [r4, #0]
   14e4a:	e7e7      	b.n	14e1c <cntr_stop+0x8>
   14e4c:	200029a0 	.word	0x200029a0
   14e50:	4000b000 	.word	0x4000b000
   14e54:	000206b8 	.word	0x000206b8
   14e58:	00020704 	.word	0x00020704
   14e5c:	0001fbf4 	.word	0x0001fbf4

00014e60 <cntr_cnt_get>:
     return p_reg->COUNTER;
   14e60:	4b01      	ldr	r3, [pc, #4]	; (14e68 <cntr_cnt_get+0x8>)
   14e62:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   14e66:	4770      	bx	lr
   14e68:	4000b000 	.word	0x4000b000

00014e6c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   14e6c:	4b02      	ldr	r3, [pc, #8]	; (14e78 <cntr_cmp_set+0xc>)
   14e6e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14e72:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   14e76:	4770      	bx	lr
   14e78:	4000b000 	.word	0x4000b000

00014e7c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e7c:	4b12      	ldr	r3, [pc, #72]	; (14ec8 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   14e7e:	b430      	push	{r4, r5}
   14e80:	2101      	movs	r1, #1
   14e82:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   14e84:	2000      	movs	r0, #0
   14e86:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   14e88:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   14e8c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   14e90:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   14e94:	6019      	str	r1, [r3, #0]
}
   14e96:	e005      	b.n	14ea4 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14e98:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14e9c:	b932      	cbnz	r2, 14eac <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   14e9e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14ea2:	b11a      	cbz	r2, 14eac <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14ea4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   14ea8:	2a00      	cmp	r2, #0
   14eaa:	d0f5      	beq.n	14e98 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14eac:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   14eae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14eb2:	2a00      	cmp	r2, #0
   14eb4:	d1e7      	bne.n	14e86 <do_ecb+0xa>
   14eb6:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   14eba:	2d00      	cmp	r5, #0
   14ebc:	d0e3      	beq.n	14e86 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   14ebe:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   14ec0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   14ec4:	4770      	bx	lr
   14ec6:	bf00      	nop
   14ec8:	4000e000 	.word	0x4000e000

00014ecc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   14ecc:	b570      	push	{r4, r5, r6, lr}
   14ece:	b08c      	sub	sp, #48	; 0x30
   14ed0:	460e      	mov	r6, r1
   14ed2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   14ed4:	4601      	mov	r1, r0
   14ed6:	2210      	movs	r2, #16
   14ed8:	4668      	mov	r0, sp
{
   14eda:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   14edc:	f7f3 fef6 	bl	8ccc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   14ee0:	2210      	movs	r2, #16
   14ee2:	eb0d 0002 	add.w	r0, sp, r2
   14ee6:	4631      	mov	r1, r6
   14ee8:	f7f3 fef0 	bl	8ccc <mem_rcopy>

	do_ecb(&ecb);
   14eec:	4668      	mov	r0, sp
   14eee:	f7ff ffc5 	bl	14e7c <do_ecb>

	if (cipher_text_le) {
   14ef2:	b125      	cbz	r5, 14efe <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   14ef4:	2210      	movs	r2, #16
   14ef6:	a908      	add	r1, sp, #32
   14ef8:	4628      	mov	r0, r5
   14efa:	f7f3 fee7 	bl	8ccc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   14efe:	b124      	cbz	r4, 14f0a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   14f00:	2210      	movs	r2, #16
   14f02:	a908      	add	r1, sp, #32
   14f04:	4620      	mov	r0, r4
   14f06:	f005 fca4 	bl	1a852 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   14f0a:	b00c      	add	sp, #48	; 0x30
   14f0c:	bd70      	pop	{r4, r5, r6, pc}
   14f0e:	bf00      	nop

00014f10 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   14f10:	4b04      	ldr	r3, [pc, #16]	; (14f24 <isr_radio+0x14>)
   14f12:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   14f16:	b123      	cbz	r3, 14f22 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   14f18:	4a03      	ldr	r2, [pc, #12]	; (14f28 <isr_radio+0x18>)
   14f1a:	4b04      	ldr	r3, [pc, #16]	; (14f2c <isr_radio+0x1c>)
   14f1c:	6810      	ldr	r0, [r2, #0]
   14f1e:	681b      	ldr	r3, [r3, #0]
   14f20:	4718      	bx	r3
}
   14f22:	4770      	bx	lr
   14f24:	40001000 	.word	0x40001000
   14f28:	200026b0 	.word	0x200026b0
   14f2c:	200026ac 	.word	0x200026ac

00014f30 <radio_isr_set>:
{
   14f30:	b538      	push	{r3, r4, r5, lr}
   14f32:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   14f34:	2001      	movs	r0, #1
{
   14f36:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   14f38:	f7ed fe0c 	bl	2b54 <arch_irq_disable>
	isr_cb = cb;
   14f3c:	4b08      	ldr	r3, [pc, #32]	; (14f60 <radio_isr_set+0x30>)
	isr_cb_param = param;
   14f3e:	4a09      	ldr	r2, [pc, #36]	; (14f64 <radio_isr_set+0x34>)
	isr_cb = cb;
   14f40:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14f42:	4909      	ldr	r1, [pc, #36]	; (14f68 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14f44:	4b09      	ldr	r3, [pc, #36]	; (14f6c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   14f46:	6015      	str	r5, [r2, #0]
   14f48:	2010      	movs	r0, #16
   14f4a:	2202      	movs	r2, #2
   14f4c:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   14f50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   14f54:	2001      	movs	r0, #1
}
   14f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   14f5a:	f7ed bdeb 	b.w	2b34 <arch_irq_enable>
   14f5e:	bf00      	nop
   14f60:	200026ac 	.word	0x200026ac
   14f64:	200026b0 	.word	0x200026b0
   14f68:	40001000 	.word	0x40001000
   14f6c:	e000e100 	.word	0xe000e100

00014f70 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   14f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14f74:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   14f78:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   14f7a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   14f7e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   14f82:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   14f86:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   14f8a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   14f8e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   14f92:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   14f96:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   14f9a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   14f9e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   14fa2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   14fa6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   14faa:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   14fae:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   14fb2:	4770      	bx	lr

00014fb4 <radio_reset>:
{
   14fb4:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   14fb6:	2001      	movs	r0, #1
   14fb8:	f7ed fdcc 	bl	2b54 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   14fbc:	4a0d      	ldr	r2, [pc, #52]	; (14ff4 <radio_reset+0x40>)
   14fbe:	2100      	movs	r1, #0
   14fc0:	2301      	movs	r3, #1
   14fc2:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   14fc6:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   14fca:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   14fce:	490a      	ldr	r1, [pc, #40]	; (14ff8 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   14fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   14fd4:	f023 0301 	bic.w	r3, r3, #1
   14fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   14fdc:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   14fe0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   14fe4:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   14fe8:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   14fec:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   14ff0:	bd10      	pop	{r4, pc}
   14ff2:	bf00      	nop
   14ff4:	40001000 	.word	0x40001000
   14ff8:	4001f000 	.word	0x4001f000

00014ffc <radio_stop>:
}
   14ffc:	4770      	bx	lr
   14ffe:	bf00      	nop

00015000 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   15000:	4b06      	ldr	r3, [pc, #24]	; (1501c <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   15002:	2802      	cmp	r0, #2
   15004:	bf14      	ite	ne
   15006:	2203      	movne	r2, #3
   15008:	2204      	moveq	r2, #4
   1500a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1500e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   15012:	f042 0201 	orr.w	r2, r2, #1
   15016:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1501a:	4770      	bx	lr
   1501c:	40001000 	.word	0x40001000

00015020 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   15020:	4b01      	ldr	r3, [pc, #4]	; (15028 <radio_tx_power_set+0x8>)
   15022:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   15026:	4770      	bx	lr
   15028:	40001000 	.word	0x40001000

0001502c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1502c:	4b01      	ldr	r3, [pc, #4]	; (15034 <radio_freq_chan_set+0x8>)
   1502e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   15032:	4770      	bx	lr
   15034:	40001000 	.word	0x40001000

00015038 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   15038:	4b07      	ldr	r3, [pc, #28]	; (15058 <radio_whiten_iv_set+0x20>)
   1503a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1503e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   15042:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   15046:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1504a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1504e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   15052:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   15056:	4770      	bx	lr
   15058:	40001000 	.word	0x40001000

0001505c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1505c:	4a0a      	ldr	r2, [pc, #40]	; (15088 <radio_aa_set+0x2c>)
   1505e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   15060:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   15062:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   15066:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1506a:	78c3      	ldrb	r3, [r0, #3]
   1506c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   15070:	7843      	ldrb	r3, [r0, #1]
   15072:	f890 c002 	ldrb.w	ip, [r0, #2]
   15076:	7801      	ldrb	r1, [r0, #0]
   15078:	041b      	lsls	r3, r3, #16
   1507a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1507e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   15082:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   15086:	4770      	bx	lr
   15088:	40001000 	.word	0x40001000

0001508c <radio_pkt_configure>:
	switch (phy) {
   1508c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   15090:	2b02      	cmp	r3, #2
   15092:	bf14      	ite	ne
   15094:	f04f 0c00 	movne.w	ip, #0
   15098:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1509c:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1509e:	bf48      	it	mi
   150a0:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   150a4:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   150a8:	4b0a      	ldr	r3, [pc, #40]	; (150d4 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   150aa:	4a0b      	ldr	r2, [pc, #44]	; (150d8 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   150ac:	ea40 000c 	orr.w	r0, r0, ip
   150b0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   150b4:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   150b8:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   150bc:	4002      	ands	r2, r0
   150be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   150c2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   150c6:	4311      	orrs	r1, r2
   150c8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   150cc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   150d0:	4770      	bx	lr
   150d2:	bf00      	nop
   150d4:	40001000 	.word	0x40001000
   150d8:	fef80000 	.word	0xfef80000

000150dc <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   150dc:	4b01      	ldr	r3, [pc, #4]	; (150e4 <radio_pkt_rx_set+0x8>)
   150de:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   150e2:	4770      	bx	lr
   150e4:	40001000 	.word	0x40001000

000150e8 <radio_pkt_tx_set>:
   150e8:	4b01      	ldr	r3, [pc, #4]	; (150f0 <radio_pkt_tx_set+0x8>)
   150ea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   150ee:	4770      	bx	lr
   150f0:	40001000 	.word	0x40001000

000150f4 <radio_tx_chain_delay_get>:
}
   150f4:	2001      	movs	r0, #1
   150f6:	4770      	bx	lr

000150f8 <radio_rx_ready_delay_get>:
}
   150f8:	2029      	movs	r0, #41	; 0x29
   150fa:	4770      	bx	lr

000150fc <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   150fc:	2802      	cmp	r0, #2
}
   150fe:	bf14      	ite	ne
   15100:	200a      	movne	r0, #10
   15102:	2005      	moveq	r0, #5
   15104:	4770      	bx	lr
   15106:	bf00      	nop

00015108 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15108:	4b01      	ldr	r3, [pc, #4]	; (15110 <radio_rx_enable+0x8>)
   1510a:	2201      	movs	r2, #1
   1510c:	605a      	str	r2, [r3, #4]
}
   1510e:	4770      	bx	lr
   15110:	40001000 	.word	0x40001000

00015114 <radio_tx_enable>:
   15114:	4b01      	ldr	r3, [pc, #4]	; (1511c <radio_tx_enable+0x8>)
   15116:	2201      	movs	r2, #1
   15118:	601a      	str	r2, [r3, #0]
}
   1511a:	4770      	bx	lr
   1511c:	40001000 	.word	0x40001000

00015120 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   15120:	4a07      	ldr	r2, [pc, #28]	; (15140 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   15122:	4908      	ldr	r1, [pc, #32]	; (15144 <radio_disable+0x24>)
{
   15124:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   15126:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   15128:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1512c:	2000      	movs	r0, #0
   1512e:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   15132:	6053      	str	r3, [r2, #4]
}
   15134:	bc10      	pop	{r4}
   15136:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   15138:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1513c:	610b      	str	r3, [r1, #16]
}
   1513e:	4770      	bx	lr
   15140:	4001f000 	.word	0x4001f000
   15144:	40001000 	.word	0x40001000

00015148 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   15148:	4b04      	ldr	r3, [pc, #16]	; (1515c <radio_status_reset+0x14>)
   1514a:	2200      	movs	r2, #0
   1514c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   15150:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   15154:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   15158:	4770      	bx	lr
   1515a:	bf00      	nop
   1515c:	40001000 	.word	0x40001000

00015160 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   15160:	4b03      	ldr	r3, [pc, #12]	; (15170 <radio_is_ready+0x10>)
   15162:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   15166:	3800      	subs	r0, #0
   15168:	bf18      	it	ne
   1516a:	2001      	movne	r0, #1
   1516c:	4770      	bx	lr
   1516e:	bf00      	nop
   15170:	40001000 	.word	0x40001000

00015174 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   15174:	4b03      	ldr	r3, [pc, #12]	; (15184 <radio_is_done+0x10>)
   15176:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1517a:	3800      	subs	r0, #0
   1517c:	bf18      	it	ne
   1517e:	2001      	movne	r0, #1
   15180:	4770      	bx	lr
   15182:	bf00      	nop
   15184:	40001000 	.word	0x40001000

00015188 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   15188:	4b03      	ldr	r3, [pc, #12]	; (15198 <radio_is_idle+0x10>)
   1518a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1518e:	fab0 f080 	clz	r0, r0
   15192:	0940      	lsrs	r0, r0, #5
   15194:	4770      	bx	lr
   15196:	bf00      	nop
   15198:	40001000 	.word	0x40001000

0001519c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1519c:	4b04      	ldr	r3, [pc, #16]	; (151b0 <radio_crc_configure+0x14>)
   1519e:	f240 1203 	movw	r2, #259	; 0x103
   151a2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   151a6:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   151aa:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   151ae:	4770      	bx	lr
   151b0:	40001000 	.word	0x40001000

000151b4 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   151b4:	4b03      	ldr	r3, [pc, #12]	; (151c4 <radio_crc_is_valid+0x10>)
   151b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   151ba:	3800      	subs	r0, #0
   151bc:	bf18      	it	ne
   151be:	2001      	movne	r0, #1
   151c0:	4770      	bx	lr
   151c2:	bf00      	nop
   151c4:	40001000 	.word	0x40001000

000151c8 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   151c8:	4800      	ldr	r0, [pc, #0]	; (151cc <radio_pkt_empty_get+0x4>)
   151ca:	4770      	bx	lr
   151cc:	200025a4 	.word	0x200025a4

000151d0 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   151d0:	4800      	ldr	r0, [pc, #0]	; (151d4 <radio_pkt_scratch_get+0x4>)
   151d2:	4770      	bx	lr
   151d4:	200025a8 	.word	0x200025a8

000151d8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   151d8:	4b1d      	ldr	r3, [pc, #116]	; (15250 <radio_switch_complete_and_rx+0x78>)
{
   151da:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   151dc:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   151de:	4d1d      	ldr	r5, [pc, #116]	; (15254 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   151e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   151e4:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   151e6:	4e1c      	ldr	r6, [pc, #112]	; (15258 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   151e8:	4c1c      	ldr	r4, [pc, #112]	; (1525c <radio_switch_complete_and_rx+0x84>)
   151ea:	4f1d      	ldr	r7, [pc, #116]	; (15260 <radio_switch_complete_and_rx+0x88>)
   151ec:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   151f0:	f102 030c 	add.w	r3, r2, #12
   151f4:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   151f6:	00d0      	lsls	r0, r2, #3
   151f8:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   151fa:	0091      	lsls	r1, r2, #2
   151fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   15200:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   15204:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   15208:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1520c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15210:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   15214:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   15218:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1521c:	4811      	ldr	r0, [pc, #68]	; (15264 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1521e:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15222:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   15226:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1522a:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1522c:	bf8a      	itet	hi
   1522e:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   15232:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   15234:	3b2d      	subhi	r3, #45	; 0x2d
   15236:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1523a:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1523c:	4b06      	ldr	r3, [pc, #24]	; (15258 <radio_switch_complete_and_rx+0x80>)
   1523e:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   15242:	f002 0201 	and.w	r2, r2, #1
   15246:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1524a:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1524c:	bcf0      	pop	{r4, r5, r6, r7}
   1524e:	4770      	bx	lr
   15250:	40001000 	.word	0x40001000
   15254:	200029a1 	.word	0x200029a1
   15258:	4001f000 	.word	0x4001f000
   1525c:	40009140 	.word	0x40009140
   15260:	4000110c 	.word	0x4000110c
   15264:	40001004 	.word	0x40001004

00015268 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   15268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1526c:	4e28      	ldr	r6, [pc, #160]	; (15310 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1526e:	4c29      	ldr	r4, [pc, #164]	; (15314 <radio_switch_complete_and_tx+0xac>)
   15270:	4f29      	ldr	r7, [pc, #164]	; (15318 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15272:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1531c <radio_switch_complete_and_tx+0xb4>
   15276:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 15320 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1527a:	2303      	movs	r3, #3
   1527c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15280:	7821      	ldrb	r1, [r4, #0]
   15282:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   15286:	f101 030c 	add.w	r3, r1, #12
   1528a:	b2db      	uxtb	r3, r3
   1528c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1528e:	00cd      	lsls	r5, r1, #3
   15290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15294:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   15298:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1529c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   152a0:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   152a4:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   152a8:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   152ac:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   152b0:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   152b4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   152b8:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   152bc:	2a02      	cmp	r2, #2
   152be:	bf18      	it	ne
   152c0:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   152c2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   152c6:	f241 3288 	movw	r2, #5000	; 0x1388
   152ca:	f242 43b8 	movw	r3, #9400	; 0x24b8
   152ce:	2802      	cmp	r0, #2
   152d0:	bf08      	it	eq
   152d2:	4613      	moveq	r3, r2
   152d4:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   152d8:	4a12      	ldr	r2, [pc, #72]	; (15324 <radio_switch_complete_and_tx+0xbc>)
   152da:	442b      	add	r3, r5
   152dc:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   152e0:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   152e4:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   152e8:	bf85      	ittet	hi
   152ea:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   152ec:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   152f0:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   152f2:	1a1b      	subhi	r3, r3, r0
   152f4:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   152f8:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   152fa:	4b08      	ldr	r3, [pc, #32]	; (1531c <radio_switch_complete_and_tx+0xb4>)
   152fc:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   15300:	f001 0101 	and.w	r1, r1, #1
   15304:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   15308:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1530e:	bf00      	nop
   15310:	40001000 	.word	0x40001000
   15314:	200029a1 	.word	0x200029a1
   15318:	40009140 	.word	0x40009140
   1531c:	4001f000 	.word	0x4001f000
   15320:	4000110c 	.word	0x4000110c
   15324:	10624dd3 	.word	0x10624dd3

00015328 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   15328:	4904      	ldr	r1, [pc, #16]	; (1533c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1532a:	4b05      	ldr	r3, [pc, #20]	; (15340 <radio_switch_complete_and_disable+0x18>)
   1532c:	2003      	movs	r0, #3
   1532e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   15332:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   15336:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1533a:	4770      	bx	lr
   1533c:	40001000 	.word	0x40001000
   15340:	4001f000 	.word	0x4001f000

00015344 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   15344:	2000      	movs	r0, #0
   15346:	4770      	bx	lr

00015348 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   15348:	4a03      	ldr	r2, [pc, #12]	; (15358 <radio_rssi_measure+0x10>)
   1534a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1534e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   15352:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   15356:	4770      	bx	lr
   15358:	40001000 	.word	0x40001000

0001535c <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1535c:	4b01      	ldr	r3, [pc, #4]	; (15364 <radio_rssi_get+0x8>)
   1535e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   15362:	4770      	bx	lr
   15364:	40001000 	.word	0x40001000

00015368 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   15368:	4b02      	ldr	r3, [pc, #8]	; (15374 <radio_rssi_status_reset+0xc>)
   1536a:	2200      	movs	r2, #0
   1536c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   15370:	4770      	bx	lr
   15372:	bf00      	nop
   15374:	40001000 	.word	0x40001000

00015378 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   15378:	4b03      	ldr	r3, [pc, #12]	; (15388 <radio_rssi_is_ready+0x10>)
   1537a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1537e:	3800      	subs	r0, #0
   15380:	bf18      	it	ne
   15382:	2001      	movne	r0, #1
   15384:	4770      	bx	lr
   15386:	bf00      	nop
   15388:	40001000 	.word	0x40001000

0001538c <radio_filter_disable>:
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1538c:	4a03      	ldr	r2, [pc, #12]	; (1539c <radio_filter_disable+0x10>)
   1538e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   15392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15396:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1539a:	4770      	bx	lr
   1539c:	40001000 	.word	0x40001000

000153a0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   153a0:	4b02      	ldr	r3, [pc, #8]	; (153ac <radio_filter_status_reset+0xc>)
   153a2:	2200      	movs	r2, #0
   153a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   153a8:	4770      	bx	lr
   153aa:	bf00      	nop
   153ac:	40001000 	.word	0x40001000

000153b0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   153b0:	4b03      	ldr	r3, [pc, #12]	; (153c0 <radio_filter_has_match+0x10>)
   153b2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   153b6:	3800      	subs	r0, #0
   153b8:	bf18      	it	ne
   153ba:	2001      	movne	r0, #1
   153bc:	4770      	bx	lr
   153be:	bf00      	nop
   153c0:	40001000 	.word	0x40001000

000153c4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   153c4:	4b01      	ldr	r3, [pc, #4]	; (153cc <radio_filter_match_get+0x8>)
   153c6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   153ca:	4770      	bx	lr
   153cc:	40001000 	.word	0x40001000

000153d0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   153d0:	4904      	ldr	r1, [pc, #16]	; (153e4 <radio_tmr_status_reset+0x14>)
   153d2:	4b05      	ldr	r3, [pc, #20]	; (153e8 <radio_tmr_status_reset+0x18>)
   153d4:	4a05      	ldr	r2, [pc, #20]	; (153ec <radio_tmr_status_reset+0x1c>)
   153d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   153da:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   153de:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   153e2:	4770      	bx	lr
   153e4:	4000b000 	.word	0x4000b000
   153e8:	4001f000 	.word	0x4001f000
   153ec:	0e7000c0 	.word	0x0e7000c0

000153f0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   153f0:	4b03      	ldr	r3, [pc, #12]	; (15400 <radio_tmr_tifs_set+0x10>)
   153f2:	4a04      	ldr	r2, [pc, #16]	; (15404 <radio_tmr_tifs_set+0x14>)
   153f4:	781b      	ldrb	r3, [r3, #0]
   153f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   153fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   153fe:	4770      	bx	lr
   15400:	200029a1 	.word	0x200029a1
   15404:	40009000 	.word	0x40009000

00015408 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   15408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1540c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   15410:	4d31      	ldr	r5, [pc, #196]	; (154d8 <radio_tmr_start+0xd0>)
   15412:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   15416:	42ab      	cmp	r3, r5
{
   15418:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1541a:	d906      	bls.n	1542a <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1541c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   15420:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   15424:	3901      	subs	r1, #1
		remainder += 30517578UL;
   15426:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1542a:	4b2c      	ldr	r3, [pc, #176]	; (154dc <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1542c:	482c      	ldr	r0, [pc, #176]	; (154e0 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1542e:	4d2d      	ldr	r5, [pc, #180]	; (154e4 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15430:	4e2d      	ldr	r6, [pc, #180]	; (154e8 <radio_tmr_start+0xe0>)
   15432:	2701      	movs	r7, #1
   15434:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   15436:	2700      	movs	r7, #0
   15438:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1543c:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   15440:	2704      	movs	r7, #4
   15442:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   15446:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   15448:	2702      	movs	r7, #2
   1544a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1544e:	4a27      	ldr	r2, [pc, #156]	; (154ec <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   15450:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   15454:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   15458:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1545c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   15460:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15462:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15466:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1546a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1546e:	bb64      	cbnz	r4, 154ca <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   15470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   15474:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   15478:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1547c:	4b1b      	ldr	r3, [pc, #108]	; (154ec <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1547e:	4a1c      	ldr	r2, [pc, #112]	; (154f0 <radio_tmr_start+0xe8>)
   15480:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   15484:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   15486:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15488:	f8df 8068 	ldr.w	r8, [pc, #104]	; 154f4 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1548c:	f8df e068 	ldr.w	lr, [pc, #104]	; 154f8 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15490:	f8df c068 	ldr.w	ip, [pc, #104]	; 154fc <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15494:	4f1a      	ldr	r7, [pc, #104]	; (15500 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15496:	4e1b      	ldr	r6, [pc, #108]	; (15504 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15498:	4d1b      	ldr	r5, [pc, #108]	; (15508 <radio_tmr_start+0x100>)
   1549a:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1549c:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   154a0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   154a4:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   154a8:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   154ac:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   154ae:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   154b2:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   154b6:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   154ba:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   154be:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   154c2:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   154c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   154ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   154ce:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   154d2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   154d6:	e7d1      	b.n	1547c <radio_tmr_start+0x74>
   154d8:	7ff0bdbf 	.word	0x7ff0bdbf
   154dc:	40008000 	.word	0x40008000
   154e0:	431bde83 	.word	0x431bde83
   154e4:	4000b000 	.word	0x4000b000
   154e8:	4000b148 	.word	0x4000b148
   154ec:	4001f000 	.word	0x4001f000
   154f0:	40009000 	.word	0x40009000
   154f4:	4000110c 	.word	0x4000110c
   154f8:	4000900c 	.word	0x4000900c
   154fc:	40009140 	.word	0x40009140
   15500:	4001f004 	.word	0x4001f004
   15504:	40009144 	.word	0x40009144
   15508:	4001f00c 	.word	0x4001f00c

0001550c <radio_tmr_start_now>:
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

uint32_t radio_tmr_start_now(uint8_t trx)
{
   1550c:	b410      	push	{r4}
	nrf_ppi_channels_disable(
   1550e:	b1d8      	cbz	r0, 15548 <radio_tmr_start_now+0x3c>
   15510:	4b11      	ldr	r3, [pc, #68]	; (15558 <radio_tmr_start_now+0x4c>)
   15512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15516:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1551a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1551e:	4a0f      	ldr	r2, [pc, #60]	; (1555c <radio_tmr_start_now+0x50>)
    p_reg->CHENSET = mask;
   15520:	490d      	ldr	r1, [pc, #52]	; (15558 <radio_tmr_start_now+0x4c>)
   15522:	2401      	movs	r4, #1
   15524:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   15528:	6454      	str	r4, [r2, #68]	; 0x44
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	/* Capture the current time */
	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);
	now = EVENT_TIMER->CC[1];
   1552a:	f8d2 1544 	ldr.w	r1, [r2, #1348]	; 0x544
	start = now;
   1552e:	460b      	mov	r3, r1

	/* Setup PPI while determining the latency in doing so */
	do {
		/* Set start to be, now plus the determined latency */
		start = (now << 1) - start;
   15530:	ebc3 0341 	rsb	r3, r3, r1, lsl #1

		/* Setup compare event with min. 1 us offset */
		nrf_timer_cc_set(EVENT_TIMER, 0, start + 1);
   15534:	1c58      	adds	r0, r3, #1
    p_reg->CC[cc_channel] = cc_value;
   15536:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1553a:	6454      	str	r4, [r2, #68]	; 0x44

		/* Capture the current time */
		nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);

		now = EVENT_TIMER->CC[1];
   1553c:	f8d2 1544 	ldr.w	r1, [r2, #1348]	; 0x544
	} while (now > start);
   15540:	428b      	cmp	r3, r1
   15542:	d3f5      	bcc.n	15530 <radio_tmr_start_now+0x24>

	return start + 1;
}
   15544:	bc10      	pop	{r4}
   15546:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   15548:	4b03      	ldr	r3, [pc, #12]	; (15558 <radio_tmr_start_now+0x4c>)
   1554a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1554e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   15552:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   15556:	e7e2      	b.n	1551e <radio_tmr_start_now+0x12>
   15558:	4001f000 	.word	0x4001f000
   1555c:	40008000 	.word	0x40008000

00015560 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   15560:	4b01      	ldr	r3, [pc, #4]	; (15568 <radio_tmr_start_get+0x8>)
   15562:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   15566:	4770      	bx	lr
   15568:	4000b000 	.word	0x4000b000

0001556c <radio_tmr_stop>:
   1556c:	4903      	ldr	r1, [pc, #12]	; (1557c <radio_tmr_stop+0x10>)
   1556e:	4a04      	ldr	r2, [pc, #16]	; (15580 <radio_tmr_stop+0x14>)
   15570:	2301      	movs	r3, #1
   15572:	604b      	str	r3, [r1, #4]
   15574:	610b      	str	r3, [r1, #16]
   15576:	6053      	str	r3, [r2, #4]
   15578:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1557a:	4770      	bx	lr
   1557c:	40008000 	.word	0x40008000
   15580:	40009000 	.word	0x40009000

00015584 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   15584:	4904      	ldr	r1, [pc, #16]	; (15598 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   15586:	4b05      	ldr	r3, [pc, #20]	; (1559c <radio_tmr_hcto_configure+0x18>)
   15588:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1558c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   15590:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   15594:	4770      	bx	lr
   15596:	bf00      	nop
   15598:	40008000 	.word	0x40008000
   1559c:	4001f000 	.word	0x4001f000

000155a0 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   155a0:	4b05      	ldr	r3, [pc, #20]	; (155b8 <radio_tmr_aa_capture+0x18>)
   155a2:	4806      	ldr	r0, [pc, #24]	; (155bc <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   155a4:	4906      	ldr	r1, [pc, #24]	; (155c0 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   155a6:	4a07      	ldr	r2, [pc, #28]	; (155c4 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   155a8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   155ac:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   155b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   155b4:	4770      	bx	lr
   155b6:	bf00      	nop
   155b8:	4001f000 	.word	0x4001f000
   155bc:	40001100 	.word	0x40001100
   155c0:	40008040 	.word	0x40008040
   155c4:	04000080 	.word	0x04000080

000155c8 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   155c8:	4b01      	ldr	r3, [pc, #4]	; (155d0 <radio_tmr_aa_get+0x8>)
   155ca:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   155ce:	4770      	bx	lr
   155d0:	40008000 	.word	0x40008000

000155d4 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   155d4:	4b01      	ldr	r3, [pc, #4]	; (155dc <radio_tmr_aa_save+0x8>)
   155d6:	6018      	str	r0, [r3, #0]
}
   155d8:	4770      	bx	lr
   155da:	bf00      	nop
   155dc:	200026b4 	.word	0x200026b4

000155e0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   155e0:	4b01      	ldr	r3, [pc, #4]	; (155e8 <radio_tmr_aa_restore+0x8>)
}
   155e2:	6818      	ldr	r0, [r3, #0]
   155e4:	4770      	bx	lr
   155e6:	bf00      	nop
   155e8:	200026b4 	.word	0x200026b4

000155ec <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   155ec:	4b01      	ldr	r3, [pc, #4]	; (155f4 <radio_tmr_ready_get+0x8>)
   155ee:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   155f2:	4770      	bx	lr
   155f4:	40008000 	.word	0x40008000

000155f8 <radio_tmr_end_capture>:
   155f8:	4b02      	ldr	r3, [pc, #8]	; (15604 <radio_tmr_end_capture+0xc>)
   155fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   155fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   15602:	4770      	bx	lr
   15604:	4001f000 	.word	0x4001f000

00015608 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   15608:	4b01      	ldr	r3, [pc, #4]	; (15610 <radio_tmr_end_get+0x8>)
   1560a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1560e:	4770      	bx	lr
   15610:	40008000 	.word	0x40008000

00015614 <radio_tmr_tifs_base_get>:
   15614:	4b01      	ldr	r3, [pc, #4]	; (1561c <radio_tmr_tifs_base_get+0x8>)
   15616:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1561a:	4770      	bx	lr
   1561c:	40008000 	.word	0x40008000

00015620 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   15620:	4b1c      	ldr	r3, [pc, #112]	; (15694 <radio_ccm_rx_pkt_set+0x74>)
{
   15622:	b430      	push	{r4, r5}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   15624:	2400      	movs	r4, #0
   15626:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1562a:	2902      	cmp	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1562c:	f04f 0402 	mov.w	r4, #2
   15630:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   15634:	4604      	mov	r4, r0
	switch (phy) {
   15636:	d026      	beq.n	15686 <radio_ccm_rx_pkt_set+0x66>
   15638:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1563c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   15640:	4d15      	ldr	r5, [pc, #84]	; (15698 <radio_ccm_rx_pkt_set+0x78>)
   15642:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   15646:	4915      	ldr	r1, [pc, #84]	; (1569c <radio_ccm_rx_pkt_set+0x7c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   15648:	4b12      	ldr	r3, [pc, #72]	; (15694 <radio_ccm_rx_pkt_set+0x74>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1564a:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1564e:	4814      	ldr	r0, [pc, #80]	; (156a0 <radio_ccm_rx_pkt_set+0x80>)
   15650:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   15652:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   15656:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   1565a:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1565c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   15660:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   15664:	4c0f      	ldr	r4, [pc, #60]	; (156a4 <radio_ccm_rx_pkt_set+0x84>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   15666:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1566a:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1566c:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   15670:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   15674:	bc30      	pop	{r4, r5}
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   15676:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1567a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1567e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   15682:	601a      	str	r2, [r3, #0]
}
   15684:	4770      	bx	lr
   15686:	4b08      	ldr	r3, [pc, #32]	; (156a8 <radio_ccm_rx_pkt_set+0x88>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   15688:	4d08      	ldr	r5, [pc, #32]	; (156ac <radio_ccm_rx_pkt_set+0x8c>)
   1568a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1568e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   15692:	e7d8      	b.n	15646 <radio_ccm_rx_pkt_set+0x26>
   15694:	4000f000 	.word	0x4000f000
   15698:	01000001 	.word	0x01000001
   1569c:	40001000 	.word	0x40001000
   156a0:	200025a8 	.word	0x200025a8
   156a4:	20002498 	.word	0x20002498
   156a8:	4001f000 	.word	0x4001f000
   156ac:	01010001 	.word	0x01010001

000156b0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   156b0:	4b10      	ldr	r3, [pc, #64]	; (156f4 <radio_ccm_tx_pkt_set+0x44>)
{
   156b2:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   156b4:	2200      	movs	r2, #0
{
   156b6:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   156b8:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   156ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   156be:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   156c2:	480d      	ldr	r0, [pc, #52]	; (156f8 <radio_ccm_tx_pkt_set+0x48>)
   156c4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   156c8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   156cc:	480b      	ldr	r0, [pc, #44]	; (156fc <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   156ce:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   156d2:	4c0b      	ldr	r4, [pc, #44]	; (15700 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   156d4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   156d8:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   156da:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   156de:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   156e2:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   156e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   156e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   156ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   156f0:	6019      	str	r1, [r3, #0]
}
   156f2:	4770      	bx	lr
   156f4:	4000f000 	.word	0x4000f000
   156f8:	01010000 	.word	0x01010000
   156fc:	200025a8 	.word	0x200025a8
   15700:	20002498 	.word	0x20002498

00015704 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15704:	4a0e      	ldr	r2, [pc, #56]	; (15740 <radio_ccm_is_done+0x3c>)
   15706:	2302      	movs	r3, #2
   15708:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1570c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   15710:	b933      	cbnz	r3, 15720 <radio_ccm_is_done+0x1c>
		__WFE();
   15712:	bf20      	wfe
		__SEV();
   15714:	bf40      	sev
		__WFE();
   15716:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   15718:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1571c:	2b00      	cmp	r3, #0
   1571e:	d0f8      	beq.n	15712 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   15720:	4b07      	ldr	r3, [pc, #28]	; (15740 <radio_ccm_is_done+0x3c>)
   15722:	4a08      	ldr	r2, [pc, #32]	; (15744 <radio_ccm_is_done+0x40>)
   15724:	2002      	movs	r0, #2
   15726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1572a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1572e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   15732:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   15736:	fab0 f080 	clz	r0, r0
   1573a:	0940      	lsrs	r0, r0, #5
   1573c:	4770      	bx	lr
   1573e:	bf00      	nop
   15740:	4000f000 	.word	0x4000f000
   15744:	e000e100 	.word	0xe000e100

00015748 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   15748:	4b03      	ldr	r3, [pc, #12]	; (15758 <radio_ccm_mic_is_valid+0x10>)
   1574a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1574e:	3800      	subs	r0, #0
   15750:	bf18      	it	ne
   15752:	2001      	movne	r0, #1
   15754:	4770      	bx	lr
   15756:	bf00      	nop
   15758:	4000f000 	.word	0x4000f000

0001575c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1575c:	2902      	cmp	r1, #2
{
   1575e:	b510      	push	{r4, lr}
   15760:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   15762:	d00b      	beq.n	1577c <mayfly_enable_cb+0x20>
   15764:	4a0a      	ldr	r2, [pc, #40]	; (15790 <mayfly_enable_cb+0x34>)
   15766:	490b      	ldr	r1, [pc, #44]	; (15794 <mayfly_enable_cb+0x38>)
   15768:	480b      	ldr	r0, [pc, #44]	; (15798 <mayfly_enable_cb+0x3c>)
   1576a:	231e      	movs	r3, #30
   1576c:	f003 ff11 	bl	19592 <assert_print>
   15770:	4040      	eors	r0, r0
   15772:	f380 8811 	msr	BASEPRI, r0
   15776:	f04f 0003 	mov.w	r0, #3
   1577a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1577c:	200b      	movs	r0, #11
	if (enable) {
   1577e:	b11c      	cbz	r4, 15788 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   15780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   15784:	f7ed b9d6 	b.w	2b34 <arch_irq_enable>
}
   15788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1578c:	f7ed b9e2 	b.w	2b54 <arch_irq_disable>
   15790:	00020710 	.word	0x00020710
   15794:	00020760 	.word	0x00020760
   15798:	0001fbf4 	.word	0x0001fbf4

0001579c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1579c:	b129      	cbz	r1, 157aa <mayfly_is_enabled+0xe>
   1579e:	3901      	subs	r1, #1
   157a0:	2901      	cmp	r1, #1
   157a2:	d805      	bhi.n	157b0 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   157a4:	200b      	movs	r0, #11
   157a6:	f7ed b9e9 	b.w	2b7c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   157aa:	2018      	movs	r0, #24
   157ac:	f7ed b9e6 	b.w	2b7c <arch_irq_is_enabled>
{
   157b0:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   157b2:	4a07      	ldr	r2, [pc, #28]	; (157d0 <mayfly_is_enabled+0x34>)
   157b4:	4907      	ldr	r1, [pc, #28]	; (157d4 <mayfly_is_enabled+0x38>)
   157b6:	4808      	ldr	r0, [pc, #32]	; (157d8 <mayfly_is_enabled+0x3c>)
   157b8:	2336      	movs	r3, #54	; 0x36
   157ba:	f003 feea 	bl	19592 <assert_print>
   157be:	4040      	eors	r0, r0
   157c0:	f380 8811 	msr	BASEPRI, r0
   157c4:	f04f 0003 	mov.w	r0, #3
   157c8:	df02      	svc	2
		break;
	}

	return 0;
}
   157ca:	2000      	movs	r0, #0
   157cc:	bd08      	pop	{r3, pc}
   157ce:	bf00      	nop
   157d0:	00020710 	.word	0x00020710
   157d4:	0001fc54 	.word	0x0001fc54
   157d8:	0001fbf4 	.word	0x0001fbf4

000157dc <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   157dc:	4288      	cmp	r0, r1
   157de:	d00b      	beq.n	157f8 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   157e0:	2801      	cmp	r0, #1
   157e2:	d003      	beq.n	157ec <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   157e4:	2802      	cmp	r0, #2
   157e6:	d009      	beq.n	157fc <mayfly_prio_is_equal+0x20>
   157e8:	2000      	movs	r0, #0
#endif
	       0;
}
   157ea:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   157ec:	f1a1 0002 	sub.w	r0, r1, #2
   157f0:	fab0 f080 	clz	r0, r0
   157f4:	0940      	lsrs	r0, r0, #5
   157f6:	4770      	bx	lr
   157f8:	2001      	movs	r0, #1
   157fa:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   157fc:	f1a1 0001 	sub.w	r0, r1, #1
   15800:	fab0 f080 	clz	r0, r0
   15804:	0940      	lsrs	r0, r0, #5
   15806:	4770      	bx	lr

00015808 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   15808:	2901      	cmp	r1, #1
{
   1580a:	b508      	push	{r3, lr}
	switch (callee_id) {
   1580c:	d00f      	beq.n	1582e <mayfly_pend+0x26>
   1580e:	2902      	cmp	r1, #2
   15810:	d00d      	beq.n	1582e <mayfly_pend+0x26>
   15812:	b191      	cbz	r1, 1583a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   15814:	4a0c      	ldr	r2, [pc, #48]	; (15848 <mayfly_pend+0x40>)
   15816:	490d      	ldr	r1, [pc, #52]	; (1584c <mayfly_pend+0x44>)
   15818:	480d      	ldr	r0, [pc, #52]	; (15850 <mayfly_pend+0x48>)
   1581a:	2367      	movs	r3, #103	; 0x67
   1581c:	f003 feb9 	bl	19592 <assert_print>
   15820:	4040      	eors	r0, r0
   15822:	f380 8811 	msr	BASEPRI, r0
   15826:	f04f 0003 	mov.w	r0, #3
   1582a:	df02      	svc	2
		break;
	}
}
   1582c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1582e:	4b09      	ldr	r3, [pc, #36]	; (15854 <mayfly_pend+0x4c>)
   15830:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15834:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15838:	bd08      	pop	{r3, pc}
   1583a:	4b06      	ldr	r3, [pc, #24]	; (15854 <mayfly_pend+0x4c>)
   1583c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   15840:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15844:	bd08      	pop	{r3, pc}
   15846:	bf00      	nop
   15848:	00020710 	.word	0x00020710
   1584c:	0001fc54 	.word	0x0001fc54
   15850:	0001fbf4 	.word	0x0001fbf4
   15854:	e000e100 	.word	0xe000e100

00015858 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   15858:	2803      	cmp	r0, #3
{
   1585a:	b510      	push	{r4, lr}
   1585c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1585e:	d804      	bhi.n	1586a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   15860:	4b11      	ldr	r3, [pc, #68]	; (158a8 <hal_ticker_instance0_caller_id_get+0x50>)
   15862:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   15864:	b18c      	cbz	r4, 1588a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   15866:	4620      	mov	r0, r4
   15868:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1586a:	4a10      	ldr	r2, [pc, #64]	; (158ac <hal_ticker_instance0_caller_id_get+0x54>)
   1586c:	4910      	ldr	r1, [pc, #64]	; (158b0 <hal_ticker_instance0_caller_id_get+0x58>)
   1586e:	4811      	ldr	r0, [pc, #68]	; (158b4 <hal_ticker_instance0_caller_id_get+0x5c>)
   15870:	232b      	movs	r3, #43	; 0x2b
   15872:	f003 fe8e 	bl	19592 <assert_print>
   15876:	4040      	eors	r0, r0
   15878:	f380 8811 	msr	BASEPRI, r0
   1587c:	f04f 0003 	mov.w	r0, #3
   15880:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   15882:	4b09      	ldr	r3, [pc, #36]	; (158a8 <hal_ticker_instance0_caller_id_get+0x50>)
   15884:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   15886:	2c00      	cmp	r4, #0
   15888:	d1ed      	bne.n	15866 <hal_ticker_instance0_caller_id_get+0xe>
   1588a:	4a08      	ldr	r2, [pc, #32]	; (158ac <hal_ticker_instance0_caller_id_get+0x54>)
   1588c:	490a      	ldr	r1, [pc, #40]	; (158b8 <hal_ticker_instance0_caller_id_get+0x60>)
   1588e:	4809      	ldr	r0, [pc, #36]	; (158b4 <hal_ticker_instance0_caller_id_get+0x5c>)
   15890:	232e      	movs	r3, #46	; 0x2e
   15892:	f003 fe7e 	bl	19592 <assert_print>
   15896:	4040      	eors	r0, r0
   15898:	f380 8811 	msr	BASEPRI, r0
   1589c:	f04f 0003 	mov.w	r0, #3
   158a0:	df02      	svc	2
}
   158a2:	4620      	mov	r0, r4
   158a4:	bd10      	pop	{r4, pc}
   158a6:	bf00      	nop
   158a8:	000207f0 	.word	0x000207f0
   158ac:	00020770 	.word	0x00020770
   158b0:	000207c0 	.word	0x000207c0
   158b4:	0001fbf4 	.word	0x0001fbf4
   158b8:	000207e0 	.word	0x000207e0

000158bc <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   158bc:	3801      	subs	r0, #1
{
   158be:	b510      	push	{r4, lr}
   158c0:	461c      	mov	r4, r3
	switch (caller_id) {
   158c2:	2804      	cmp	r0, #4
   158c4:	f200 8082 	bhi.w	159cc <hal_ticker_instance0_sched+0x110>
   158c8:	e8df f000 	tbb	[pc, r0]
   158cc:	3f302112 	.word	0x3f302112
   158d0:	03          	.byte	0x03
   158d1:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   158d2:	2904      	cmp	r1, #4
   158d4:	d04a      	beq.n	1596c <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   158d6:	4a44      	ldr	r2, [pc, #272]	; (159e8 <hal_ticker_instance0_sched+0x12c>)
   158d8:	4944      	ldr	r1, [pc, #272]	; (159ec <hal_ticker_instance0_sched+0x130>)
   158da:	4845      	ldr	r0, [pc, #276]	; (159f0 <hal_ticker_instance0_sched+0x134>)
   158dc:	23ba      	movs	r3, #186	; 0xba
   158de:	f003 fe58 	bl	19592 <assert_print>
   158e2:	4040      	eors	r0, r0
   158e4:	f380 8811 	msr	BASEPRI, r0
   158e8:	f04f 0003 	mov.w	r0, #3
   158ec:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   158ee:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   158f0:	2904      	cmp	r1, #4
   158f2:	d043      	beq.n	1597c <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   158f4:	4a3c      	ldr	r2, [pc, #240]	; (159e8 <hal_ticker_instance0_sched+0x12c>)
   158f6:	493d      	ldr	r1, [pc, #244]	; (159ec <hal_ticker_instance0_sched+0x130>)
   158f8:	483d      	ldr	r0, [pc, #244]	; (159f0 <hal_ticker_instance0_sched+0x134>)
   158fa:	234e      	movs	r3, #78	; 0x4e
   158fc:	f003 fe49 	bl	19592 <assert_print>
   15900:	4040      	eors	r0, r0
   15902:	f380 8811 	msr	BASEPRI, r0
   15906:	f04f 0003 	mov.w	r0, #3
   1590a:	df02      	svc	2
}
   1590c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1590e:	2903      	cmp	r1, #3
   15910:	d03c      	beq.n	1598c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   15912:	4a35      	ldr	r2, [pc, #212]	; (159e8 <hal_ticker_instance0_sched+0x12c>)
   15914:	4935      	ldr	r1, [pc, #212]	; (159ec <hal_ticker_instance0_sched+0x130>)
   15916:	4836      	ldr	r0, [pc, #216]	; (159f0 <hal_ticker_instance0_sched+0x134>)
   15918:	2365      	movs	r3, #101	; 0x65
   1591a:	f003 fe3a 	bl	19592 <assert_print>
   1591e:	4040      	eors	r0, r0
   15920:	f380 8811 	msr	BASEPRI, r0
   15924:	f04f 0003 	mov.w	r0, #3
   15928:	df02      	svc	2
}
   1592a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1592c:	2904      	cmp	r1, #4
   1592e:	d035      	beq.n	1599c <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   15930:	4a2d      	ldr	r2, [pc, #180]	; (159e8 <hal_ticker_instance0_sched+0x12c>)
   15932:	492e      	ldr	r1, [pc, #184]	; (159ec <hal_ticker_instance0_sched+0x130>)
   15934:	482e      	ldr	r0, [pc, #184]	; (159f0 <hal_ticker_instance0_sched+0x134>)
   15936:	237c      	movs	r3, #124	; 0x7c
   15938:	f003 fe2b 	bl	19592 <assert_print>
   1593c:	4040      	eors	r0, r0
   1593e:	f380 8811 	msr	BASEPRI, r0
   15942:	f04f 0003 	mov.w	r0, #3
   15946:	df02      	svc	2
}
   15948:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1594a:	2903      	cmp	r1, #3
   1594c:	d036      	beq.n	159bc <hal_ticker_instance0_sched+0x100>
   1594e:	2904      	cmp	r1, #4
   15950:	d02c      	beq.n	159ac <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   15952:	4a25      	ldr	r2, [pc, #148]	; (159e8 <hal_ticker_instance0_sched+0x12c>)
   15954:	4925      	ldr	r1, [pc, #148]	; (159ec <hal_ticker_instance0_sched+0x130>)
   15956:	4826      	ldr	r0, [pc, #152]	; (159f0 <hal_ticker_instance0_sched+0x134>)
   15958:	23a2      	movs	r3, #162	; 0xa2
   1595a:	f003 fe1a 	bl	19592 <assert_print>
   1595e:	4040      	eors	r0, r0
   15960:	f380 8811 	msr	BASEPRI, r0
   15964:	f04f 0003 	mov.w	r0, #3
   15968:	df02      	svc	2
}
   1596a:	bd10      	pop	{r4, pc}
			m.param = instance;
   1596c:	4b21      	ldr	r3, [pc, #132]	; (159f4 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1596e:	2102      	movs	r1, #2
			m.param = instance;
   15970:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   15972:	2003      	movs	r0, #3
}
   15974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   15978:	f7f3 ba44 	b.w	8e04 <mayfly_enqueue>
			m.param = instance;
   1597c:	4b1e      	ldr	r3, [pc, #120]	; (159f8 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1597e:	2102      	movs	r1, #2
			m.param = instance;
   15980:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   15982:	2000      	movs	r0, #0
}
   15984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   15988:	f7f3 ba3c 	b.w	8e04 <mayfly_enqueue>
			m.param = instance;
   1598c:	4b1b      	ldr	r3, [pc, #108]	; (159fc <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1598e:	2101      	movs	r1, #1
			m.param = instance;
   15990:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   15992:	4608      	mov	r0, r1
}
   15994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   15998:	f7f3 ba34 	b.w	8e04 <mayfly_enqueue>
			m.param = instance;
   1599c:	4b18      	ldr	r3, [pc, #96]	; (15a00 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1599e:	2102      	movs	r1, #2
			m.param = instance;
   159a0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   159a2:	2001      	movs	r0, #1
}
   159a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   159a8:	f7f3 ba2c 	b.w	8e04 <mayfly_enqueue>
			m.param = instance;
   159ac:	4b15      	ldr	r3, [pc, #84]	; (15a04 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   159ae:	2102      	movs	r1, #2
			m.param = instance;
   159b0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   159b2:	4608      	mov	r0, r1
}
   159b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   159b8:	f7f3 ba24 	b.w	8e04 <mayfly_enqueue>
			m.param = instance;
   159bc:	4b12      	ldr	r3, [pc, #72]	; (15a08 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   159be:	2101      	movs	r1, #1
			m.param = instance;
   159c0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   159c2:	2002      	movs	r0, #2
}
   159c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   159c8:	f7f3 ba1c 	b.w	8e04 <mayfly_enqueue>
		LL_ASSERT(0);
   159cc:	4a06      	ldr	r2, [pc, #24]	; (159e8 <hal_ticker_instance0_sched+0x12c>)
   159ce:	4907      	ldr	r1, [pc, #28]	; (159ec <hal_ticker_instance0_sched+0x130>)
   159d0:	4807      	ldr	r0, [pc, #28]	; (159f0 <hal_ticker_instance0_sched+0x134>)
   159d2:	23c0      	movs	r3, #192	; 0xc0
   159d4:	f003 fddd 	bl	19592 <assert_print>
   159d8:	4040      	eors	r0, r0
   159da:	f380 8811 	msr	BASEPRI, r0
   159de:	f04f 0003 	mov.w	r0, #3
   159e2:	df02      	svc	2
}
   159e4:	bd10      	pop	{r4, pc}
   159e6:	bf00      	nop
   159e8:	00020770 	.word	0x00020770
   159ec:	0001fc54 	.word	0x0001fc54
   159f0:	0001fbf4 	.word	0x0001fbf4
   159f4:	20000748 	.word	0x20000748
   159f8:	20000738 	.word	0x20000738
   159fc:	20000728 	.word	0x20000728
   15a00:	20000778 	.word	0x20000778
   15a04:	20000758 	.word	0x20000758
   15a08:	20000768 	.word	0x20000768

00015a0c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   15a0c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   15a0e:	2000      	movs	r0, #0
   15a10:	f7ff ba2c 	b.w	14e6c <cntr_cmp_set>

00015a14 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   15a14:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   15a16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15a1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   15a1e:	3201      	adds	r2, #1
   15a20:	d008      	beq.n	15a34 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   15a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15a26:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   15a2a:	f013 0301 	ands.w	r3, r3, #1
   15a2e:	d10a      	bne.n	15a46 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   15a30:	4618      	mov	r0, r3
}
   15a32:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   15a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   15a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15a3c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   15a3e:	4293      	cmp	r3, r2
   15a40:	d1ef      	bne.n	15a22 <hci_vendor_read_static_addr+0xe>
	return 0;
   15a42:	2000      	movs	r0, #0
}
   15a44:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   15a46:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   15a4a:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   15a4c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   15a4e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   15a52:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15a56:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   15a58:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   15a5a:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   15a5e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   15a62:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   15a64:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   15a68:	f063 033f 	orn	r3, r3, #63	; 0x3f
   15a6c:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   15a6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   15a72:	3301      	adds	r3, #1
   15a74:	d03b      	beq.n	15aee <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   15a76:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   15a7a:	3301      	adds	r3, #1
   15a7c:	d037      	beq.n	15aee <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   15a7e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   15a82:	3301      	adds	r3, #1
   15a84:	d033      	beq.n	15aee <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   15a86:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   15a8a:	3301      	adds	r3, #1
   15a8c:	d02f      	beq.n	15aee <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   15a8e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   15a92:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   15a94:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   15a96:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   15a9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   15a9e:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   15aa0:	f880 c009 	strb.w	ip, [r0, #9]
   15aa4:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   15aa6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   15aaa:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   15aac:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   15aae:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   15ab2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   15ab6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   15ab8:	f880 c00d 	strb.w	ip, [r0, #13]
   15abc:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   15abe:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   15ac2:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   15ac4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   15ac6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   15aca:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   15ace:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   15ad0:	73c3      	strb	r3, [r0, #15]
   15ad2:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   15ad6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   15ada:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   15adc:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   15ade:	0a11      	lsrs	r1, r2, #8
   15ae0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15ae4:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   15ae6:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   15ae8:	7541      	strb	r1, [r0, #21]
		return 1;
   15aea:	2001      	movs	r0, #1
}
   15aec:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   15aee:	2210      	movs	r2, #16
   15af0:	2100      	movs	r1, #0
   15af2:	3006      	adds	r0, #6
   15af4:	f004 feb8 	bl	1a868 <memset>
		return 1;
   15af8:	2001      	movs	r0, #1
}
   15afa:	bd08      	pop	{r3, pc}

00015afc <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   15afc:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   15afe:	2210      	movs	r2, #16
{
   15b00:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   15b02:	2100      	movs	r1, #0
   15b04:	f004 feb0 	bl	1a868 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   15b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15b0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   15b10:	3201      	adds	r2, #1
   15b12:	d034      	beq.n	15b7e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   15b14:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   15b18:	3201      	adds	r2, #1
   15b1a:	d030      	beq.n	15b7e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   15b1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   15b20:	3201      	adds	r2, #1
   15b22:	d02c      	beq.n	15b7e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   15b24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   15b28:	3201      	adds	r2, #1
   15b2a:	d028      	beq.n	15b7e <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   15b2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   15b30:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   15b32:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   15b34:	0a08      	lsrs	r0, r1, #8
   15b36:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   15b3a:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   15b3c:	70e0      	strb	r0, [r4, #3]
   15b3e:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   15b40:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   15b44:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   15b46:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   15b48:	0a08      	lsrs	r0, r1, #8
   15b4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   15b4e:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   15b50:	71e0      	strb	r0, [r4, #7]
   15b52:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   15b54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   15b58:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   15b5a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   15b5c:	0a08      	lsrs	r0, r1, #8
   15b5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   15b62:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   15b64:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   15b66:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   15b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   15b6c:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   15b6e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   15b70:	0a11      	lsrs	r1, r2, #8
   15b72:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15b76:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   15b78:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   15b7a:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   15b7c:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   15b7e:	4620      	mov	r0, r4
   15b80:	2210      	movs	r2, #16
}
   15b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   15b86:	2100      	movs	r1, #0
   15b88:	f004 be6e 	b.w	1a868 <memset>

00015b8c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   15b8c:	4b02      	ldr	r3, [pc, #8]	; (15b98 <net_buf_pool_get+0xc>)
   15b8e:	222c      	movs	r2, #44	; 0x2c
   15b90:	fb02 3000 	mla	r0, r2, r0, r3
   15b94:	4770      	bx	lr
   15b96:	bf00      	nop
   15b98:	20000af0 	.word	0x20000af0

00015b9c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15b9c:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   15b9e:	4b06      	ldr	r3, [pc, #24]	; (15bb8 <net_buf_id+0x1c>)
   15ba0:	212c      	movs	r1, #44	; 0x2c
   15ba2:	fb01 3302 	mla	r3, r1, r2, r3
   15ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15ba8:	7f1b      	ldrb	r3, [r3, #28]
   15baa:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   15bac:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15bae:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   15bb2:	fbb0 f0f3 	udiv	r0, r0, r3
   15bb6:	4770      	bx	lr
   15bb8:	20000af0 	.word	0x20000af0

00015bbc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   15bbc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15bbe:	4b0a      	ldr	r3, [pc, #40]	; (15be8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15bc0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15bc2:	242c      	movs	r4, #44	; 0x2c
   15bc4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   15bc8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15bcc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15bce:	6823      	ldr	r3, [r4, #0]
   15bd0:	429a      	cmp	r2, r3
   15bd2:	bf94      	ite	ls
   15bd4:	600a      	strls	r2, [r1, #0]
   15bd6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15bd8:	f7ff ffe0 	bl	15b9c <net_buf_id>
   15bdc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15be0:	fb02 3000 	mla	r0, r2, r0, r3
   15be4:	bd10      	pop	{r4, pc}
   15be6:	bf00      	nop
   15be8:	20000af0 	.word	0x20000af0

00015bec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bf0:	4605      	mov	r5, r0
   15bf2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15bf4:	4610      	mov	r0, r2
   15bf6:	4619      	mov	r1, r3
{
   15bf8:	4691      	mov	r9, r2
   15bfa:	4698      	mov	r8, r3
   15bfc:	4617      	mov	r7, r2
   15bfe:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15c00:	f009 f8a7 	bl	1ed52 <sys_clock_timeout_end_calc>
   15c04:	4682      	mov	sl, r0
   15c06:	468b      	mov	fp, r1
	__asm__ volatile(
   15c08:	f04f 0320 	mov.w	r3, #32
   15c0c:	f3ef 8111 	mrs	r1, BASEPRI
   15c10:	f383 8812 	msr	BASEPRI_MAX, r3
   15c14:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15c18:	8b6b      	ldrh	r3, [r5, #26]
   15c1a:	2b00      	cmp	r3, #0
   15c1c:	d05a      	beq.n	15cd4 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   15c1e:	8b2a      	ldrh	r2, [r5, #24]
   15c20:	429a      	cmp	r2, r3
   15c22:	d93e      	bls.n	15ca2 <net_buf_alloc_len+0xb6>
   15c24:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   15c26:	2200      	movs	r2, #0
   15c28:	2300      	movs	r3, #0
   15c2a:	4628      	mov	r0, r5
   15c2c:	f002 f93e 	bl	17eac <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   15c30:	9900      	ldr	r1, [sp, #0]
   15c32:	4604      	mov	r4, r0
   15c34:	2800      	cmp	r0, #0
   15c36:	d034      	beq.n	15ca2 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   15c38:	f381 8811 	msr	BASEPRI, r1
   15c3c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15c40:	9b01      	ldr	r3, [sp, #4]
   15c42:	2b00      	cmp	r3, #0
   15c44:	d056      	beq.n	15cf4 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15c46:	ea58 0309 	orrs.w	r3, r8, r9
   15c4a:	d00f      	beq.n	15c6c <net_buf_alloc_len+0x80>
   15c4c:	f1b8 3fff 	cmp.w	r8, #4294967295
   15c50:	bf08      	it	eq
   15c52:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   15c56:	d009      	beq.n	15c6c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   15c58:	f002 ffe8 	bl	18c2c <sys_clock_tick_get>
   15c5c:	ebba 0700 	subs.w	r7, sl, r0
   15c60:	eb6b 0601 	sbc.w	r6, fp, r1
   15c64:	2e00      	cmp	r6, #0
   15c66:	bfbc      	itt	lt
   15c68:	2700      	movlt	r7, #0
   15c6a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15c6c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   15c6e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 15d0c <net_buf_alloc_len+0x120>
   15c72:	f04f 092c 	mov.w	r9, #44	; 0x2c
   15c76:	fb09 8303 	mla	r3, r9, r3, r8
   15c7a:	463a      	mov	r2, r7
   15c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15c7e:	681b      	ldr	r3, [r3, #0]
   15c80:	a901      	add	r1, sp, #4
   15c82:	681d      	ldr	r5, [r3, #0]
   15c84:	4620      	mov	r0, r4
   15c86:	4633      	mov	r3, r6
   15c88:	47a8      	blx	r5
   15c8a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   15c8c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   15c8e:	2800      	cmp	r0, #0
   15c90:	d131      	bne.n	15cf6 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   15c92:	79a0      	ldrb	r0, [r4, #6]
   15c94:	4621      	mov	r1, r4
   15c96:	fb00 8009 	mla	r0, r0, r9, r8
   15c9a:	f008 fdd4 	bl	1e846 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   15c9e:	462c      	mov	r4, r5
}
   15ca0:	e024      	b.n	15cec <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   15ca2:	8b68      	ldrh	r0, [r5, #26]
   15ca4:	1e43      	subs	r3, r0, #1
   15ca6:	836b      	strh	r3, [r5, #26]
   15ca8:	f381 8811 	msr	BASEPRI, r1
   15cac:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15cb0:	7f2a      	ldrb	r2, [r5, #28]
   15cb2:	f102 0417 	add.w	r4, r2, #23
   15cb6:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   15cba:	8b2c      	ldrh	r4, [r5, #24]
   15cbc:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   15cbe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   15cc0:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   15cc4:	4811      	ldr	r0, [pc, #68]	; (15d0c <net_buf_alloc_len+0x120>)
   15cc6:	4b12      	ldr	r3, [pc, #72]	; (15d10 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   15cc8:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   15cca:	1a2d      	subs	r5, r5, r0
   15ccc:	10ad      	asrs	r5, r5, #2
   15cce:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15cd0:	71a5      	strb	r5, [r4, #6]
		goto success;
   15cd2:	e7b5      	b.n	15c40 <net_buf_alloc_len+0x54>
   15cd4:	f381 8811 	msr	BASEPRI, r1
   15cd8:	f3bf 8f6f 	isb	sy
   15cdc:	464a      	mov	r2, r9
   15cde:	4643      	mov	r3, r8
   15ce0:	4628      	mov	r0, r5
   15ce2:	f002 f8e3 	bl	17eac <z_impl_k_queue_get>
	if (!buf) {
   15ce6:	4604      	mov	r4, r0
   15ce8:	2800      	cmp	r0, #0
   15cea:	d1a9      	bne.n	15c40 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15cec:	4620      	mov	r0, r4
   15cee:	b003      	add	sp, #12
   15cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   15cf4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   15cf6:	2300      	movs	r3, #0
	buf->ref   = 1U;
   15cf8:	2201      	movs	r2, #1
	buf->frags = NULL;
   15cfa:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15cfc:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   15cfe:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   15d00:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   15d02:	6923      	ldr	r3, [r4, #16]
   15d04:	81e2      	strh	r2, [r4, #14]
   15d06:	60a3      	str	r3, [r4, #8]
	return buf;
   15d08:	e7f0      	b.n	15cec <net_buf_alloc_len+0x100>
   15d0a:	bf00      	nop
   15d0c:	20000af0 	.word	0x20000af0
   15d10:	ba2e8ba3 	.word	0xba2e8ba3

00015d14 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d18:	4d16      	ldr	r5, [pc, #88]	; (15d74 <net_buf_unref+0x60>)
   15d1a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   15d1c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   15d1e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   15d20:	b90c      	cbnz	r4, 15d26 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   15d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   15d26:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15d28:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   15d2c:	3b01      	subs	r3, #1
   15d2e:	b2db      	uxtb	r3, r3
   15d30:	7123      	strb	r3, [r4, #4]
   15d32:	2b00      	cmp	r3, #0
   15d34:	d1f5      	bne.n	15d22 <net_buf_unref+0xe>
		if (buf->__buf) {
   15d36:	6921      	ldr	r1, [r4, #16]
   15d38:	b159      	cbz	r1, 15d52 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15d3a:	7963      	ldrb	r3, [r4, #5]
   15d3c:	079b      	lsls	r3, r3, #30
   15d3e:	d407      	bmi.n	15d50 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15d40:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   15d42:	fb07 5303 	mla	r3, r7, r3, r5
   15d46:	4620      	mov	r0, r4
   15d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15d4a:	681b      	ldr	r3, [r3, #0]
   15d4c:	689b      	ldr	r3, [r3, #8]
   15d4e:	4798      	blx	r3
			buf->__buf = NULL;
   15d50:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   15d52:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   15d54:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   15d56:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   15d5a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   15d5c:	6a1b      	ldr	r3, [r3, #32]
   15d5e:	b11b      	cbz	r3, 15d68 <net_buf_unref+0x54>
			pool->destroy(buf);
   15d60:	4620      	mov	r0, r4
   15d62:	4798      	blx	r3
{
   15d64:	4644      	mov	r4, r8
   15d66:	e7db      	b.n	15d20 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   15d68:	4621      	mov	r1, r4
   15d6a:	fb00 5007 	mla	r0, r0, r7, r5
   15d6e:	f008 fd6a 	bl	1e846 <k_queue_prepend>
}
   15d72:	e7f7      	b.n	15d64 <net_buf_unref+0x50>
   15d74:	20000af0 	.word	0x20000af0

00015d78 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   15d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d7c:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   15d80:	4606      	mov	r6, r0
   15d82:	460d      	mov	r5, r1
   15d84:	4617      	mov	r7, r2
	while (buf->frags) {
   15d86:	4604      	mov	r4, r0
   15d88:	4621      	mov	r1, r4
   15d8a:	6824      	ldr	r4, [r4, #0]
   15d8c:	2c00      	cmp	r4, #0
   15d8e:	d1fb      	bne.n	15d88 <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   15d90:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   15d94:	f101 0b08 	add.w	fp, r1, #8
   15d98:	4658      	mov	r0, fp
   15d9a:	f008 f90f 	bl	1dfbc <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   15d9e:	4285      	cmp	r5, r0
   15da0:	bf2c      	ite	cs
   15da2:	b282      	uxthcs	r2, r0
   15da4:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15da6:	4639      	mov	r1, r7
   15da8:	4658      	mov	r0, fp
   15daa:	9201      	str	r2, [sp, #4]
   15dac:	f008 f8b3 	bl	1df16 <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   15db0:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   15db2:	1aad      	subs	r5, r5, r2
		added_len += count;
   15db4:	4414      	add	r4, r2
		value8 += count;
   15db6:	4417      	add	r7, r2
		if (len == 0) {
   15db8:	d016      	beq.n	15de8 <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   15dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15dbc:	b14b      	cbz	r3, 15dd2 <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   15dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15dc0:	4640      	mov	r0, r8
   15dc2:	4649      	mov	r1, r9
   15dc4:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   15dc6:	4601      	mov	r1, r0
		}

		if (!frag) {
   15dc8:	b170      	cbz	r0, 15de8 <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   15dca:	4630      	mov	r0, r6
   15dcc:	f008 f880 	bl	1ded0 <net_buf_frag_add>
	do {
   15dd0:	e7e0      	b.n	15d94 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   15dd2:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   15dd4:	f8df c018 	ldr.w	ip, [pc, #24]	; 15df0 <net_buf_append_bytes+0x78>
   15dd8:	4642      	mov	r2, r8
   15dda:	464b      	mov	r3, r9
   15ddc:	4629      	mov	r1, r5
   15dde:	fb00 c00a 	mla	r0, r0, sl, ip
   15de2:	f7ff ff03 	bl	15bec <net_buf_alloc_len>
   15de6:	e7ee      	b.n	15dc6 <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   15de8:	4620      	mov	r0, r4
   15dea:	b003      	add	sp, #12
   15dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df0:	20000af0 	.word	0x20000af0

00015df4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   15df4:	4b08      	ldr	r3, [pc, #32]	; (15e18 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15df6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15df8:	1ac3      	subs	r3, r0, r3
{
   15dfa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15dfc:	4907      	ldr	r1, [pc, #28]	; (15e1c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   15dfe:	109b      	asrs	r3, r3, #2
{
   15e00:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15e02:	4359      	muls	r1, r3
   15e04:	4806      	ldr	r0, [pc, #24]	; (15e20 <onoff_stop+0x2c>)
   15e06:	2240      	movs	r2, #64	; 0x40
   15e08:	f008 f8fc 	bl	1e004 <stop>
	notify(mgr, res);
   15e0c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15e0e:	4601      	mov	r1, r0
	notify(mgr, res);
   15e10:	4620      	mov	r0, r4
}
   15e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   15e16:	4718      	bx	r3
   15e18:	200026f8 	.word	0x200026f8
   15e1c:	b6db6db7 	.word	0xb6db6db7
   15e20:	0001f0dc 	.word	0x0001f0dc

00015e24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15e26:	4c0c      	ldr	r4, [pc, #48]	; (15e58 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15e28:	4a0c      	ldr	r2, [pc, #48]	; (15e5c <onoff_start+0x38>)
   15e2a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   15e2c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15e2e:	9300      	str	r3, [sp, #0]
{
   15e30:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15e32:	460b      	mov	r3, r1
   15e34:	490a      	ldr	r1, [pc, #40]	; (15e60 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   15e36:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15e38:	4361      	muls	r1, r4
{
   15e3a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15e3c:	4809      	ldr	r0, [pc, #36]	; (15e64 <onoff_start+0x40>)
   15e3e:	f008 f90d 	bl	1e05c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   15e42:	1e01      	subs	r1, r0, #0
   15e44:	da05      	bge.n	15e52 <onoff_start+0x2e>
		notify(mgr, err);
   15e46:	4630      	mov	r0, r6
   15e48:	462b      	mov	r3, r5
	}
}
   15e4a:	b002      	add	sp, #8
   15e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   15e50:	4718      	bx	r3
}
   15e52:	b002      	add	sp, #8
   15e54:	bd70      	pop	{r4, r5, r6, pc}
   15e56:	bf00      	nop
   15e58:	200026f8 	.word	0x200026f8
   15e5c:	0001e0cd 	.word	0x0001e0cd
   15e60:	b6db6db7 	.word	0xb6db6db7
   15e64:	0001f0dc 	.word	0x0001f0dc

00015e68 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15e68:	2200      	movs	r2, #0
{
   15e6a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15e6c:	2101      	movs	r1, #1
{
   15e6e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15e70:	4610      	mov	r0, r2
   15e72:	f7ec fe91 	bl	2b98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15e76:	480f      	ldr	r0, [pc, #60]	; (15eb4 <clk_init+0x4c>)
   15e78:	f001 f9ee 	bl	17258 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   15e7c:	4b0e      	ldr	r3, [pc, #56]	; (15eb8 <clk_init+0x50>)
   15e7e:	4298      	cmp	r0, r3
   15e80:	d115      	bne.n	15eae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15e82:	f008 fad9 	bl	1e438 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   15e86:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   15e88:	490c      	ldr	r1, [pc, #48]	; (15ebc <clk_init+0x54>)
   15e8a:	4630      	mov	r0, r6
   15e8c:	f003 f8d4 	bl	19038 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   15e90:	2800      	cmp	r0, #0
   15e92:	db0b      	blt.n	15eac <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   15e94:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   15e96:	4909      	ldr	r1, [pc, #36]	; (15ebc <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15e98:	2501      	movs	r5, #1
   15e9a:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   15e9c:	f104 001c 	add.w	r0, r4, #28
   15ea0:	f003 f8ca 	bl	19038 <onoff_manager_init>
		if (err < 0) {
   15ea4:	2800      	cmp	r0, #0
   15ea6:	db01      	blt.n	15eac <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15ea8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   15eaa:	2000      	movs	r0, #0
}
   15eac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   15eae:	f06f 0004 	mvn.w	r0, #4
   15eb2:	e7fb      	b.n	15eac <clk_init+0x44>
   15eb4:	00015ef5 	.word	0x00015ef5
   15eb8:	0bad0000 	.word	0x0bad0000
   15ebc:	0002082c 	.word	0x0002082c

00015ec0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   15ec0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   15ec2:	230c      	movs	r3, #12
   15ec4:	4809      	ldr	r0, [pc, #36]	; (15eec <clkstarted_handle.constprop.0+0x2c>)
   15ec6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   15ec8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   15eca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   15ecc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   15ed0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   15ed2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   15ed4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   15ed6:	4418      	add	r0, r3
   15ed8:	f008 f881 	bl	1dfde <set_on_state>
	if (callback) {
   15edc:	b12d      	cbz	r5, 15eea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   15ede:	4632      	mov	r2, r6
   15ee0:	462b      	mov	r3, r5
   15ee2:	4803      	ldr	r0, [pc, #12]	; (15ef0 <clkstarted_handle.constprop.0+0x30>)
}
   15ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   15ee8:	4718      	bx	r3
}
   15eea:	bd70      	pop	{r4, r5, r6, pc}
   15eec:	200026f8 	.word	0x200026f8
   15ef0:	0001f0dc 	.word	0x0001f0dc

00015ef4 <clock_event_handler>:
	switch (event) {
   15ef4:	b110      	cbz	r0, 15efc <clock_event_handler+0x8>
   15ef6:	2801      	cmp	r0, #1
   15ef8:	d004      	beq.n	15f04 <clock_event_handler+0x10>
   15efa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15efc:	4b03      	ldr	r3, [pc, #12]	; (15f0c <clock_event_handler+0x18>)
   15efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15f00:	075b      	lsls	r3, r3, #29
   15f02:	d101      	bne.n	15f08 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15f04:	f7ff bfdc 	b.w	15ec0 <clkstarted_handle.constprop.0>
}
   15f08:	4770      	bx	lr
   15f0a:	bf00      	nop
   15f0c:	200026f8 	.word	0x200026f8

00015f10 <generic_hfclk_start>:
{
   15f10:	b508      	push	{r3, lr}
	__asm__ volatile(
   15f12:	f04f 0320 	mov.w	r3, #32
   15f16:	f3ef 8111 	mrs	r1, BASEPRI
   15f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   15f1e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   15f22:	4a12      	ldr	r2, [pc, #72]	; (15f6c <generic_hfclk_start+0x5c>)
   15f24:	6813      	ldr	r3, [r2, #0]
   15f26:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   15f2a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   15f2e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15f30:	d00c      	beq.n	15f4c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15f36:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15f3a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   15f3e:	f013 0301 	ands.w	r3, r3, #1
   15f42:	d003      	beq.n	15f4c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   15f44:	480a      	ldr	r0, [pc, #40]	; (15f70 <generic_hfclk_start+0x60>)
   15f46:	f008 f84a 	bl	1dfde <set_on_state>
			already_started = true;
   15f4a:	2301      	movs	r3, #1
	__asm__ volatile(
   15f4c:	f381 8811 	msr	BASEPRI, r1
   15f50:	f3bf 8f6f 	isb	sy
	if (already_started) {
   15f54:	b123      	cbz	r3, 15f60 <generic_hfclk_start+0x50>
}
   15f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   15f5a:	2000      	movs	r0, #0
   15f5c:	f7ff bfb0 	b.w	15ec0 <clkstarted_handle.constprop.0>
}
   15f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   15f64:	2001      	movs	r0, #1
   15f66:	f008 ba74 	b.w	1e452 <nrfx_clock_start>
   15f6a:	bf00      	nop
   15f6c:	20002748 	.word	0x20002748
   15f70:	20002738 	.word	0x20002738

00015f74 <api_blocking_start>:
{
   15f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15f76:	2200      	movs	r2, #0
   15f78:	2301      	movs	r3, #1
   15f7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15f7e:	ab04      	add	r3, sp, #16
   15f80:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15f84:	4a09      	ldr	r2, [pc, #36]	; (15fac <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15f86:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15f8a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15f8c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15f90:	f008 f895 	bl	1e0be <api_start>
	if (err < 0) {
   15f94:	2800      	cmp	r0, #0
   15f96:	db05      	blt.n	15fa4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   15f98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   15f9c:	2300      	movs	r3, #0
   15f9e:	4668      	mov	r0, sp
   15fa0:	f001 ffde 	bl	17f60 <z_impl_k_sem_take>
}
   15fa4:	b007      	add	sp, #28
   15fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   15faa:	bf00      	nop
   15fac:	0001e0eb 	.word	0x0001e0eb

00015fb0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15fb0:	4b09      	ldr	r3, [pc, #36]	; (15fd8 <generic_hfclk_stop+0x28>)
   15fb2:	f3bf 8f5b 	dmb	ish
   15fb6:	e853 2f00 	ldrex	r2, [r3]
   15fba:	f022 0102 	bic.w	r1, r2, #2
   15fbe:	e843 1000 	strex	r0, r1, [r3]
   15fc2:	2800      	cmp	r0, #0
   15fc4:	d1f7      	bne.n	15fb6 <generic_hfclk_stop+0x6>
   15fc6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   15fca:	07d3      	lsls	r3, r2, #31
   15fcc:	d402      	bmi.n	15fd4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15fce:	2001      	movs	r0, #1
   15fd0:	f008 ba7c 	b.w	1e4cc <nrfx_clock_stop>
}
   15fd4:	4770      	bx	lr
   15fd6:	bf00      	nop
   15fd8:	20002748 	.word	0x20002748

00015fdc <z_nrf_clock_control_get_onoff>:
}
   15fdc:	4a02      	ldr	r2, [pc, #8]	; (15fe8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   15fde:	b2c3      	uxtb	r3, r0
}
   15fe0:	201c      	movs	r0, #28
   15fe2:	fb03 2000 	mla	r0, r3, r0, r2
   15fe6:	4770      	bx	lr
   15fe8:	200026f8 	.word	0x200026f8

00015fec <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15fec:	4b09      	ldr	r3, [pc, #36]	; (16014 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   15fee:	f3bf 8f5b 	dmb	ish
   15ff2:	e853 2f00 	ldrex	r2, [r3]
   15ff6:	f042 0101 	orr.w	r1, r2, #1
   15ffa:	e843 1000 	strex	r0, r1, [r3]
   15ffe:	2800      	cmp	r0, #0
   16000:	d1f7      	bne.n	15ff2 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   16002:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   16006:	0793      	lsls	r3, r2, #30
   16008:	d402      	bmi.n	16010 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1600a:	2001      	movs	r0, #1
   1600c:	f008 ba21 	b.w	1e452 <nrfx_clock_start>
}
   16010:	4770      	bx	lr
   16012:	bf00      	nop
   16014:	20002748 	.word	0x20002748

00016018 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16018:	4b09      	ldr	r3, [pc, #36]	; (16040 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   1601a:	f3bf 8f5b 	dmb	ish
   1601e:	e853 2f00 	ldrex	r2, [r3]
   16022:	f022 0101 	bic.w	r1, r2, #1
   16026:	e843 1000 	strex	r0, r1, [r3]
   1602a:	2800      	cmp	r0, #0
   1602c:	d1f7      	bne.n	1601e <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1602e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   16032:	0793      	lsls	r3, r2, #30
   16034:	d402      	bmi.n	1603c <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   16036:	2001      	movs	r0, #1
   16038:	f008 ba48 	b.w	1e4cc <nrfx_clock_stop>
}
   1603c:	4770      	bx	lr
   1603e:	bf00      	nop
   16040:	20002748 	.word	0x20002748

00016044 <z_nrf_clock_control_lf_on>:
{
   16044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16048:	4939      	ldr	r1, [pc, #228]	; (16130 <z_nrf_clock_control_lf_on+0xec>)
   1604a:	f3bf 8f5b 	dmb	ish
   1604e:	4607      	mov	r7, r0
   16050:	2201      	movs	r2, #1
   16052:	e851 3f00 	ldrex	r3, [r1]
   16056:	e841 2000 	strex	r0, r2, [r1]
   1605a:	2800      	cmp	r0, #0
   1605c:	d1f9      	bne.n	16052 <z_nrf_clock_control_lf_on+0xe>
   1605e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   16062:	b933      	cbnz	r3, 16072 <z_nrf_clock_control_lf_on+0x2e>
   16064:	4933      	ldr	r1, [pc, #204]	; (16134 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   16066:	4834      	ldr	r0, [pc, #208]	; (16138 <z_nrf_clock_control_lf_on+0xf4>)
   16068:	604b      	str	r3, [r1, #4]
   1606a:	60cb      	str	r3, [r1, #12]
   1606c:	608a      	str	r2, [r1, #8]
   1606e:	f002 fff6 	bl	1905e <onoff_request>
	switch (start_mode) {
   16072:	1e7b      	subs	r3, r7, #1
   16074:	2b01      	cmp	r3, #1
   16076:	d82f      	bhi.n	160d8 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16078:	2f01      	cmp	r7, #1
   1607a:	d107      	bne.n	1608c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1607c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16080:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   16084:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   16088:	2b01      	cmp	r3, #1
   1608a:	d025      	beq.n	160d8 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1608c:	f008 fb42 	bl	1e714 <k_is_in_isr>
   16090:	4604      	mov	r4, r0
   16092:	b918      	cbnz	r0, 1609c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   16094:	4b29      	ldr	r3, [pc, #164]	; (1613c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   16096:	781b      	ldrb	r3, [r3, #0]
   16098:	2b00      	cmp	r3, #0
   1609a:	d141      	bne.n	16120 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   1609c:	f04f 0320 	mov.w	r3, #32
   160a0:	f3ef 8611 	mrs	r6, BASEPRI
   160a4:	f383 8812 	msr	BASEPRI_MAX, r3
   160a8:	f3bf 8f6f 	isb	sy
   160ac:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16140 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   160b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   160b6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   160ba:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   160be:	03d2      	lsls	r2, r2, #15
   160c0:	d50c      	bpl.n	160dc <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   160c2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   160c6:	2b01      	cmp	r3, #1
   160c8:	d001      	beq.n	160ce <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   160ca:	2f01      	cmp	r7, #1
   160cc:	d106      	bne.n	160dc <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   160ce:	b30c      	cbz	r4, 16114 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   160d0:	f386 8811 	msr	BASEPRI, r6
   160d4:	f3bf 8f6f 	isb	sy
}
   160d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   160dc:	b1ac      	cbz	r4, 1610a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   160de:	4630      	mov	r0, r6
   160e0:	f7ec fd1e 	bl	2b20 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   160e4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   160e8:	2b00      	cmp	r3, #0
   160ea:	d1e4      	bne.n	160b6 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   160ec:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   160f0:	2a00      	cmp	r2, #0
   160f2:	d0e0      	beq.n	160b6 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   160f4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   160f8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   160fc:	2301      	movs	r3, #1
   160fe:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   16102:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16106:	60ab      	str	r3, [r5, #8]
}
   16108:	e7d5      	b.n	160b6 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   1610a:	2100      	movs	r1, #0
   1610c:	2021      	movs	r0, #33	; 0x21
   1610e:	f002 fbc1 	bl	18894 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16112:	e7e7      	b.n	160e4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   16114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16118:	2202      	movs	r2, #2
   1611a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1611e:	e7db      	b.n	160d8 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   16120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16124:	2202      	movs	r2, #2
   16126:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1612a:	4606      	mov	r6, r0
}
   1612c:	e7bf      	b.n	160ae <z_nrf_clock_control_lf_on+0x6a>
   1612e:	bf00      	nop
   16130:	2000274c 	.word	0x2000274c
   16134:	200026e8 	.word	0x200026e8
   16138:	20002714 	.word	0x20002714
   1613c:	20002db6 	.word	0x20002db6
   16140:	e000e100 	.word	0xe000e100

00016144 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   16144:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   16146:	4b08      	ldr	r3, [pc, #32]	; (16168 <uart_console_init+0x24>)
   16148:	4808      	ldr	r0, [pc, #32]	; (1616c <uart_console_init+0x28>)
   1614a:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1614c:	f008 fa1e 	bl	1e58c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   16150:	b138      	cbz	r0, 16162 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   16152:	4807      	ldr	r0, [pc, #28]	; (16170 <uart_console_init+0x2c>)
   16154:	f7ed f838 	bl	31c8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   16158:	4805      	ldr	r0, [pc, #20]	; (16170 <uart_console_init+0x2c>)
   1615a:	f7eb fd29 	bl	1bb0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1615e:	2000      	movs	r0, #0
}
   16160:	bd08      	pop	{r3, pc}
		return -ENODEV;
   16162:	f06f 0012 	mvn.w	r0, #18
   16166:	e7fb      	b.n	16160 <uart_console_init+0x1c>
   16168:	20002750 	.word	0x20002750
   1616c:	0001f154 	.word	0x0001f154
   16170:	00016175 	.word	0x00016175

00016174 <console_out>:
	if ('\n' == c) {
   16174:	280a      	cmp	r0, #10
{
   16176:	b538      	push	{r3, r4, r5, lr}
   16178:	4d07      	ldr	r5, [pc, #28]	; (16198 <console_out+0x24>)
   1617a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1617c:	d104      	bne.n	16188 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1617e:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   16180:	6883      	ldr	r3, [r0, #8]
   16182:	210d      	movs	r1, #13
   16184:	685b      	ldr	r3, [r3, #4]
   16186:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   16188:	6828      	ldr	r0, [r5, #0]
   1618a:	6883      	ldr	r3, [r0, #8]
   1618c:	b2e1      	uxtb	r1, r4
   1618e:	685b      	ldr	r3, [r3, #4]
   16190:	4798      	blx	r3
}
   16192:	4620      	mov	r0, r4
   16194:	bd38      	pop	{r3, r4, r5, pc}
   16196:	bf00      	nop
   16198:	20002750 	.word	0x20002750

0001619c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1619c:	b530      	push	{r4, r5, lr}
	return port->config;
   1619e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   161a0:	7b04      	ldrb	r4, [r0, #12]
   161a2:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   161a6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   161aa:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   161ae:	b085      	sub	sp, #20
   161b0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   161b4:	d104      	bne.n	161c0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   161b6:	4628      	mov	r0, r5
   161b8:	f001 fad0 	bl	1775c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   161bc:	2000      	movs	r0, #0
   161be:	e032      	b.n	16226 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   161c0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   161c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   161c8:	d12f      	bne.n	1622a <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   161ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   161ce:	bf0c      	ite	eq
   161d0:	2304      	moveq	r3, #4
   161d2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   161d4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   161d8:	6883      	ldr	r3, [r0, #8]
   161da:	fa23 f101 	lsr.w	r1, r3, r1
   161de:	07c9      	lsls	r1, r1, #31
   161e0:	d42f      	bmi.n	16242 <gpio_nrfx_pin_interrupt_configure+0xa6>
   161e2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   161e6:	d12c      	bne.n	16242 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   161e8:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   161ea:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   161ec:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   161f0:	4a1c      	ldr	r2, [pc, #112]	; (16264 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   161f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   161f6:	bf18      	it	ne
   161f8:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   161fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16200:	07db      	lsls	r3, r3, #31
   16202:	d41e      	bmi.n	16242 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   16204:	f10d 0407 	add.w	r4, sp, #7
   16208:	4621      	mov	r1, r4
   1620a:	4628      	mov	r0, r5
   1620c:	f001 fa0a 	bl	17624 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   16210:	4b15      	ldr	r3, [pc, #84]	; (16268 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   16212:	4298      	cmp	r0, r3
   16214:	d114      	bne.n	16240 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   16216:	4620      	mov	r0, r4
   16218:	f001 fa52 	bl	176c0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1621c:	4b13      	ldr	r3, [pc, #76]	; (1626c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1621e:	4298      	cmp	r0, r3
   16220:	d00e      	beq.n	16240 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   16222:	f06f 000b 	mvn.w	r0, #11
}
   16226:	b005      	add	sp, #20
   16228:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1622a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1622e:	d005      	beq.n	1623c <gpio_nrfx_pin_interrupt_configure+0xa0>
   16230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   16234:	bf0c      	ite	eq
   16236:	2302      	moveq	r3, #2
   16238:	2301      	movne	r3, #1
   1623a:	e7cb      	b.n	161d4 <gpio_nrfx_pin_interrupt_configure+0x38>
   1623c:	2303      	movs	r3, #3
   1623e:	e7c9      	b.n	161d4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   16240:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   16242:	2300      	movs	r3, #0
   16244:	4619      	mov	r1, r3
   16246:	aa02      	add	r2, sp, #8
   16248:	4628      	mov	r0, r5
   1624a:	f001 f8c5 	bl	173d8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1624e:	4b07      	ldr	r3, [pc, #28]	; (1626c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   16250:	4298      	cmp	r0, r3
   16252:	d104      	bne.n	1625e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   16254:	2101      	movs	r1, #1
   16256:	4628      	mov	r0, r5
   16258:	f001 fa38 	bl	176cc <nrfx_gpiote_trigger_enable>
   1625c:	e7ae      	b.n	161bc <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1625e:	f06f 0004 	mvn.w	r0, #4
   16262:	e7e0      	b.n	16226 <gpio_nrfx_pin_interrupt_configure+0x8a>
   16264:	50000300 	.word	0x50000300
   16268:	0bad0004 	.word	0x0bad0004
   1626c:	0bad0000 	.word	0x0bad0000

00016270 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16270:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   16272:	f001 fa15 	bl	176a0 <nrfx_gpiote_is_init>
   16276:	4604      	mov	r4, r0
   16278:	b968      	cbnz	r0, 16296 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1627a:	f001 f9e9 	bl	17650 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1627e:	4b08      	ldr	r3, [pc, #32]	; (162a0 <gpio_nrfx_init+0x30>)
   16280:	4298      	cmp	r0, r3
   16282:	d10a      	bne.n	1629a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   16284:	4807      	ldr	r0, [pc, #28]	; (162a4 <gpio_nrfx_init+0x34>)
   16286:	4621      	mov	r1, r4
   16288:	f001 f9c6 	bl	17618 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1628c:	4622      	mov	r2, r4
   1628e:	2105      	movs	r1, #5
   16290:	2006      	movs	r0, #6
   16292:	f7ec fc81 	bl	2b98 <z_arm_irq_priority_set>
		return 0;
   16296:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   16298:	bd10      	pop	{r4, pc}
		return -EIO;
   1629a:	f06f 0004 	mvn.w	r0, #4
   1629e:	e7fb      	b.n	16298 <gpio_nrfx_init+0x28>
   162a0:	0bad0000 	.word	0x0bad0000
   162a4:	000162a9 	.word	0x000162a9

000162a8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   162a8:	0942      	lsrs	r2, r0, #5
{
   162aa:	b570      	push	{r4, r5, r6, lr}
   162ac:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   162ae:	d002      	beq.n	162b6 <nrfx_gpio_handler+0xe>
   162b0:	2a01      	cmp	r2, #1
   162b2:	d015      	beq.n	162e0 <nrfx_gpio_handler+0x38>
}
   162b4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   162b6:	4e0b      	ldr	r6, [pc, #44]	; (162e4 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   162b8:	6932      	ldr	r2, [r6, #16]
   162ba:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   162bc:	2900      	cmp	r1, #0
   162be:	d0f9      	beq.n	162b4 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   162c0:	f003 031f 	and.w	r3, r3, #31
   162c4:	2501      	movs	r5, #1
   162c6:	680c      	ldr	r4, [r1, #0]
   162c8:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   162ca:	688a      	ldr	r2, [r1, #8]
   162cc:	402a      	ands	r2, r5
   162ce:	d002      	beq.n	162d6 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   162d0:	684b      	ldr	r3, [r1, #4]
   162d2:	4630      	mov	r0, r6
   162d4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   162d6:	2c00      	cmp	r4, #0
   162d8:	d0ec      	beq.n	162b4 <nrfx_gpio_handler+0xc>
   162da:	4621      	mov	r1, r4
   162dc:	6824      	ldr	r4, [r4, #0]
   162de:	e7f4      	b.n	162ca <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   162e0:	4e01      	ldr	r6, [pc, #4]	; (162e8 <nrfx_gpio_handler+0x40>)
   162e2:	e7e9      	b.n	162b8 <nrfx_gpio_handler+0x10>
   162e4:	0001f0f4 	.word	0x0001f0f4
   162e8:	0001f10c 	.word	0x0001f10c

000162ec <gpio_nrfx_pin_configure>:
{
   162ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   162f0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   162f2:	7b3b      	ldrb	r3, [r7, #12]
   162f4:	f001 051f 	and.w	r5, r1, #31
{
   162f8:	b085      	sub	sp, #20
   162fa:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   162fc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   16300:	4614      	mov	r4, r2
   16302:	b9ca      	cbnz	r2, 16338 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   16304:	a902      	add	r1, sp, #8
   16306:	4628      	mov	r0, r5
   16308:	f001 f98c 	bl	17624 <nrfx_gpiote_channel_get>
   1630c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1630e:	4628      	mov	r0, r5
   16310:	f001 fa4c 	bl	177ac <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   16314:	4b4a      	ldr	r3, [pc, #296]	; (16440 <gpio_nrfx_pin_configure+0x154>)
   16316:	4298      	cmp	r0, r3
   16318:	d004      	beq.n	16324 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1631a:	f06f 0004 	mvn.w	r0, #4
}
   1631e:	b005      	add	sp, #20
   16320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   16324:	4284      	cmp	r4, r0
   16326:	d105      	bne.n	16334 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   16328:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1632c:	f001 f9c2 	bl	176b4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   16330:	42a0      	cmp	r0, r4
   16332:	d1f2      	bne.n	1631a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   16334:	2000      	movs	r0, #0
   16336:	e7f2      	b.n	1631e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   16338:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1633c:	f10d 0103 	add.w	r1, sp, #3
   16340:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   16342:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   16346:	f001 f96d 	bl	17624 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1634a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1634c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1634e:	aa02      	add	r2, sp, #8
   16350:	4649      	mov	r1, r9
   16352:	4628      	mov	r0, r5
   16354:	f001 f840 	bl	173d8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   16358:	4b39      	ldr	r3, [pc, #228]	; (16440 <gpio_nrfx_pin_configure+0x154>)
   1635a:	4298      	cmp	r0, r3
   1635c:	d002      	beq.n	16364 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1635e:	f06f 0015 	mvn.w	r0, #21
   16362:	e7dc      	b.n	1631e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   16364:	4580      	cmp	r8, r0
   16366:	d103      	bne.n	16370 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   16368:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1636c:	f001 f9a2 	bl	176b4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   16370:	03a3      	lsls	r3, r4, #14
   16372:	d551      	bpl.n	16418 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   16374:	f240 6306 	movw	r3, #1542	; 0x606
   16378:	4023      	ands	r3, r4
   1637a:	f240 2206 	movw	r2, #518	; 0x206
   1637e:	4293      	cmp	r3, r2
   16380:	d03b      	beq.n	163fa <gpio_nrfx_pin_configure+0x10e>
   16382:	d80c      	bhi.n	1639e <gpio_nrfx_pin_configure+0xb2>
   16384:	2b06      	cmp	r3, #6
   16386:	d015      	beq.n	163b4 <gpio_nrfx_pin_configure+0xc8>
   16388:	d804      	bhi.n	16394 <gpio_nrfx_pin_configure+0xa8>
   1638a:	b19b      	cbz	r3, 163b4 <gpio_nrfx_pin_configure+0xc8>
   1638c:	2b02      	cmp	r3, #2
   1638e:	d1e6      	bne.n	1635e <gpio_nrfx_pin_configure+0x72>
   16390:	2304      	movs	r3, #4
   16392:	e00f      	b.n	163b4 <gpio_nrfx_pin_configure+0xc8>
   16394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16398:	d1e1      	bne.n	1635e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1639a:	2301      	movs	r3, #1
   1639c:	e00a      	b.n	163b4 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1639e:	f240 4202 	movw	r2, #1026	; 0x402
   163a2:	4293      	cmp	r3, r2
   163a4:	d02b      	beq.n	163fe <gpio_nrfx_pin_configure+0x112>
   163a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   163aa:	d02a      	beq.n	16402 <gpio_nrfx_pin_configure+0x116>
   163ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   163b0:	d1d5      	bne.n	1635e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   163b2:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   163b4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   163b8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   163bc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   163c0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   163c2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   163c6:	bf54      	ite	pl
   163c8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   163cc:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   163ce:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   163d0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   163d4:	d517      	bpl.n	16406 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   163d6:	687b      	ldr	r3, [r7, #4]
   163d8:	2101      	movs	r1, #1
   163da:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   163de:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   163e2:	2200      	movs	r2, #0
   163e4:	a901      	add	r1, sp, #4
   163e6:	4628      	mov	r0, r5
   163e8:	f001 f8a4 	bl	17534 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   163ec:	4b14      	ldr	r3, [pc, #80]	; (16440 <gpio_nrfx_pin_configure+0x154>)
   163ee:	4298      	cmp	r0, r3
   163f0:	bf14      	ite	ne
   163f2:	f06f 0015 	mvnne.w	r0, #21
   163f6:	2000      	moveq	r0, #0
   163f8:	e791      	b.n	1631e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   163fa:	2307      	movs	r3, #7
   163fc:	e7da      	b.n	163b4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   163fe:	2305      	movs	r3, #5
   16400:	e7d8      	b.n	163b4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   16402:	2303      	movs	r3, #3
   16404:	e7d6      	b.n	163b4 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   16406:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   16408:	bf41      	itttt	mi
   1640a:	687b      	ldrmi	r3, [r7, #4]
   1640c:	2101      	movmi	r1, #1
   1640e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   16412:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   16416:	e7e4      	b.n	163e2 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   16418:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1641a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1641e:	bf54      	ite	pl
   16420:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   16424:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16426:	461a      	mov	r2, r3
   16428:	a901      	add	r1, sp, #4
   1642a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1642c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   16430:	f000 ffd2 	bl	173d8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   16434:	4b02      	ldr	r3, [pc, #8]	; (16440 <gpio_nrfx_pin_configure+0x154>)
   16436:	4298      	cmp	r0, r3
   16438:	f43f af7c 	beq.w	16334 <gpio_nrfx_pin_configure+0x48>
   1643c:	e78f      	b.n	1635e <gpio_nrfx_pin_configure+0x72>
   1643e:	bf00      	nop
   16440:	0bad0000 	.word	0x0bad0000

00016444 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16444:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   16446:	794b      	ldrb	r3, [r1, #5]
   16448:	2b01      	cmp	r3, #1
   1644a:	d026      	beq.n	1649a <uarte_nrfx_configure+0x56>
   1644c:	2b03      	cmp	r3, #3
   1644e:	d121      	bne.n	16494 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16450:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16452:	798b      	ldrb	r3, [r1, #6]
   16454:	2b03      	cmp	r3, #3
   16456:	d11d      	bne.n	16494 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16458:	79cc      	ldrb	r4, [r1, #7]
   1645a:	b10c      	cbz	r4, 16460 <uarte_nrfx_configure+0x1c>
   1645c:	2c01      	cmp	r4, #1
   1645e:	d119      	bne.n	16494 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16460:	790a      	ldrb	r2, [r1, #4]
   16462:	b112      	cbz	r2, 1646a <uarte_nrfx_configure+0x26>
   16464:	2a02      	cmp	r2, #2
   16466:	d115      	bne.n	16494 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16468:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1646a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1646c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1646e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16472:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   16474:	d065      	beq.n	16542 <uarte_nrfx_configure+0xfe>
   16476:	d82d      	bhi.n	164d4 <uarte_nrfx_configure+0x90>
   16478:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1647c:	d064      	beq.n	16548 <uarte_nrfx_configure+0x104>
   1647e:	d816      	bhi.n	164ae <uarte_nrfx_configure+0x6a>
   16480:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16484:	d062      	beq.n	1654c <uarte_nrfx_configure+0x108>
   16486:	d80a      	bhi.n	1649e <uarte_nrfx_configure+0x5a>
   16488:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1648c:	d061      	beq.n	16552 <uarte_nrfx_configure+0x10e>
   1648e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16492:	d061      	beq.n	16558 <uarte_nrfx_configure+0x114>
   16494:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16498:	e052      	b.n	16540 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1649a:	2600      	movs	r6, #0
   1649c:	e7d9      	b.n	16452 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1649e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   164a2:	d05c      	beq.n	1655e <uarte_nrfx_configure+0x11a>
   164a4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   164a8:	d1f4      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   164aa:	4b37      	ldr	r3, [pc, #220]	; (16588 <uarte_nrfx_configure+0x144>)
   164ac:	e03c      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   164ae:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   164b2:	d057      	beq.n	16564 <uarte_nrfx_configure+0x120>
   164b4:	d807      	bhi.n	164c6 <uarte_nrfx_configure+0x82>
   164b6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   164ba:	d055      	beq.n	16568 <uarte_nrfx_configure+0x124>
   164bc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   164c0:	d1e8      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   164c2:	4b32      	ldr	r3, [pc, #200]	; (1658c <uarte_nrfx_configure+0x148>)
   164c4:	e030      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   164c6:	f647 2712 	movw	r7, #31250	; 0x7a12
   164ca:	42bb      	cmp	r3, r7
   164cc:	d1e2      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   164ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   164d2:	e029      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   164d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   164d8:	d048      	beq.n	1656c <uarte_nrfx_configure+0x128>
   164da:	d813      	bhi.n	16504 <uarte_nrfx_configure+0xc0>
   164dc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   164e0:	d047      	beq.n	16572 <uarte_nrfx_configure+0x12e>
   164e2:	d809      	bhi.n	164f8 <uarte_nrfx_configure+0xb4>
   164e4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   164e8:	42bb      	cmp	r3, r7
   164ea:	d044      	beq.n	16576 <uarte_nrfx_configure+0x132>
   164ec:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   164f0:	d1d0      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   164f2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   164f6:	e017      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   164f8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   164fc:	d1ca      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   164fe:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16502:	e011      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   16504:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16508:	d038      	beq.n	1657c <uarte_nrfx_configure+0x138>
   1650a:	d808      	bhi.n	1651e <uarte_nrfx_configure+0xda>
   1650c:	4f20      	ldr	r7, [pc, #128]	; (16590 <uarte_nrfx_configure+0x14c>)
   1650e:	42bb      	cmp	r3, r7
   16510:	d037      	beq.n	16582 <uarte_nrfx_configure+0x13e>
   16512:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16516:	d1bd      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16518:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1651c:	e004      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1651e:	4f1d      	ldr	r7, [pc, #116]	; (16594 <uarte_nrfx_configure+0x150>)
   16520:	42bb      	cmp	r3, r7
   16522:	d1b7      	bne.n	16494 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16524:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   16528:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1652a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1652e:	1d03      	adds	r3, r0, #4
   16530:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   16532:	4334      	orrs	r4, r6
   16534:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16536:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1653a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1653e:	2000      	movs	r0, #0
}
   16540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16542:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16546:	e7ef      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16548:	4b13      	ldr	r3, [pc, #76]	; (16598 <uarte_nrfx_configure+0x154>)
   1654a:	e7ed      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1654c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16550:	e7ea      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   16552:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16556:	e7e7      	b.n	16528 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   16558:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1655c:	e7e4      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1655e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16562:	e7e1      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16564:	4b0d      	ldr	r3, [pc, #52]	; (1659c <uarte_nrfx_configure+0x158>)
   16566:	e7df      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16568:	4b0d      	ldr	r3, [pc, #52]	; (165a0 <uarte_nrfx_configure+0x15c>)
   1656a:	e7dd      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1656c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16570:	e7da      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16572:	4b0c      	ldr	r3, [pc, #48]	; (165a4 <uarte_nrfx_configure+0x160>)
   16574:	e7d8      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16576:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1657a:	e7d5      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1657c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16580:	e7d2      	b.n	16528 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16582:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16586:	e7cf      	b.n	16528 <uarte_nrfx_configure+0xe4>
   16588:	0013b000 	.word	0x0013b000
   1658c:	004ea000 	.word	0x004ea000
   16590:	0003d090 	.word	0x0003d090
   16594:	000f4240 	.word	0x000f4240
   16598:	00275000 	.word	0x00275000
   1659c:	0075c000 	.word	0x0075c000
   165a0:	003af000 	.word	0x003af000
   165a4:	013a9000 	.word	0x013a9000

000165a8 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   165a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   165ac:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   165b0:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   165b2:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   165b6:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   165ba:	2100      	movs	r1, #0
   165bc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   165c0:	4607      	mov	r7, r0
	data->dev = dev;
   165c2:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   165c4:	aa01      	add	r2, sp, #4
   165c6:	4648      	mov	r0, r9
   165c8:	f007 fe6e 	bl	1e2a8 <pinctrl_lookup_state>
	if (ret < 0) {
   165cc:	1e05      	subs	r5, r0, #0
   165ce:	db55      	blt.n	1667c <uarte_instance_init.constprop.0+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   165d0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   165d2:	f8d9 2000 	ldr.w	r2, [r9]
   165d6:	7919      	ldrb	r1, [r3, #4]
   165d8:	6818      	ldr	r0, [r3, #0]
   165da:	f007 fe82 	bl	1e2e2 <pinctrl_configure_pins>
	if (err < 0) {
   165de:	1e05      	subs	r5, r0, #0
   165e0:	db4c      	blt.n	1667c <uarte_instance_init.constprop.0+0xd4>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   165e2:	1d31      	adds	r1, r6, #4
   165e4:	4638      	mov	r0, r7
   165e6:	f7ff ff2d 	bl	16444 <uarte_nrfx_configure>
	if (err) {
   165ea:	4605      	mov	r5, r0
   165ec:	2800      	cmp	r0, #0
   165ee:	d145      	bne.n	1667c <uarte_instance_init.constprop.0+0xd4>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   165f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   165f4:	0799      	lsls	r1, r3, #30
   165f6:	d519      	bpl.n	1662c <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   165f8:	f106 0018 	add.w	r0, r6, #24
   165fc:	f001 f9d0 	bl	179a0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16600:	4b22      	ldr	r3, [pc, #136]	; (1668c <uarte_instance_init.constprop.0+0xe4>)
   16602:	4298      	cmp	r0, r3
   16604:	d13e      	bne.n	16684 <uarte_instance_init.constprop.0+0xdc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   16606:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   16608:	00c3      	lsls	r3, r0, #3
   1660a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1660e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   16612:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   16616:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1661a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1661e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   16622:	4a1b      	ldr	r2, [pc, #108]	; (16690 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16624:	2301      	movs	r3, #1
   16626:	4083      	lsls	r3, r0
   16628:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1662c:	2308      	movs	r3, #8
   1662e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   16632:	f898 3008 	ldrb.w	r3, [r8, #8]
   16636:	b953      	cbnz	r3, 1664e <uarte_instance_init.constprop.0+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16638:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1663c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16640:	6973      	ldr	r3, [r6, #20]
   16642:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16646:	2301      	movs	r3, #1
   16648:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1664c:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1664e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16652:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   16654:	bf5c      	itt	pl
   16656:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1665a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1665e:	06db      	lsls	r3, r3, #27
   16660:	bf44      	itt	mi
   16662:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   16666:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1666a:	6933      	ldr	r3, [r6, #16]
   1666c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16670:	2300      	movs	r3, #0
   16672:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16676:	2301      	movs	r3, #1
   16678:	60a3      	str	r3, [r4, #8]
   1667a:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1667c:	4628      	mov	r0, r5
   1667e:	b003      	add	sp, #12
   16680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   16684:	f06f 0504 	mvn.w	r5, #4
   16688:	e7f8      	b.n	1667c <uarte_instance_init.constprop.0+0xd4>
   1668a:	bf00      	nop
   1668c:	0bad0000 	.word	0x0bad0000
   16690:	4001f000 	.word	0x4001f000

00016694 <uarte_nrfx_poll_out>:
{
   16694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   16696:	6906      	ldr	r6, [r0, #16]
{
   16698:	4605      	mov	r5, r0
   1669a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1669c:	f008 f83a 	bl	1e714 <k_is_in_isr>
   166a0:	b910      	cbnz	r0, 166a8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   166a2:	4b2c      	ldr	r3, [pc, #176]	; (16754 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
   166a4:	781b      	ldrb	r3, [r3, #0]
   166a6:	b983      	cbnz	r3, 166ca <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   166a8:	f04f 0320 	mov.w	r3, #32
   166ac:	f3ef 8411 	mrs	r4, BASEPRI
   166b0:	f383 8812 	msr	BASEPRI_MAX, r3
   166b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   166b8:	6868      	ldr	r0, [r5, #4]
   166ba:	f007 fd8d 	bl	1e1d8 <is_tx_ready.isra.0>
   166be:	bb28      	cbnz	r0, 1670c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   166c0:	f384 8811 	msr	BASEPRI, r4
   166c4:	f3bf 8f6f 	isb	sy
}
   166c8:	e7ee      	b.n	166a8 <uarte_nrfx_poll_out+0x14>
{
   166ca:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   166cc:	6868      	ldr	r0, [r5, #4]
   166ce:	f007 fd83 	bl	1e1d8 <is_tx_ready.isra.0>
   166d2:	b970      	cbnz	r0, 166f2 <uarte_nrfx_poll_out+0x5e>
   166d4:	2001      	movs	r0, #1
   166d6:	f007 fead 	bl	1e434 <nrfx_busy_wait>
   166da:	3c01      	subs	r4, #1
   166dc:	d1f6      	bne.n	166cc <uarte_nrfx_poll_out+0x38>
   166de:	2100      	movs	r1, #0
   166e0:	2021      	movs	r0, #33	; 0x21
   166e2:	f002 f8d7 	bl	18894 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   166e6:	e7f0      	b.n	166ca <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   166e8:	f384 8811 	msr	BASEPRI, r4
   166ec:	f3bf 8f6f 	isb	sy
}
   166f0:	e7f5      	b.n	166de <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   166f2:	f04f 0320 	mov.w	r3, #32
   166f6:	f3ef 8411 	mrs	r4, BASEPRI
   166fa:	f383 8812 	msr	BASEPRI_MAX, r3
   166fe:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   16702:	6868      	ldr	r0, [r5, #4]
   16704:	f007 fd68 	bl	1e1d8 <is_tx_ready.isra.0>
   16708:	2800      	cmp	r0, #0
   1670a:	d0ed      	beq.n	166e8 <uarte_nrfx_poll_out+0x54>
	*data->char_out = c;
   1670c:	6933      	ldr	r3, [r6, #16]
   1670e:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
   16710:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16712:	6931      	ldr	r1, [r6, #16]
	return config->uarte_regs;
   16714:	6813      	ldr	r3, [r2, #0]
   16716:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1671a:	2101      	movs	r1, #1
   1671c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16720:	2100      	movs	r1, #0
   16722:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   16726:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1672a:	f8c3 1158 	str.w	r1, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1672e:	6852      	ldr	r2, [r2, #4]
   16730:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
   16734:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16736:	bf41      	itttt	mi
   16738:	2208      	movmi	r2, #8
   1673a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1673e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   16742:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16746:	2201      	movs	r2, #1
   16748:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1674a:	f384 8811 	msr	BASEPRI, r4
   1674e:	f3bf 8f6f 	isb	sy
}
   16752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16754:	20002db6 	.word	0x20002db6

00016758 <random_byte_get>:
	__asm__ volatile(
   16758:	f04f 0320 	mov.w	r3, #32
   1675c:	f3ef 8211 	mrs	r2, BASEPRI
   16760:	f383 8812 	msr	BASEPRI_MAX, r3
   16764:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16768:	4b09      	ldr	r3, [pc, #36]	; (16790 <random_byte_get+0x38>)
   1676a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1676e:	b161      	cbz	r1, 1678a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16770:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   16772:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16776:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1677a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1677e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   16780:	f382 8811 	msr	BASEPRI, r2
   16784:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   16788:	4770      	bx	lr
	int retval = -EAGAIN;
   1678a:	f06f 000a 	mvn.w	r0, #10
   1678e:	e7f7      	b.n	16780 <random_byte_get+0x28>
   16790:	4000d000 	.word	0x4000d000

00016794 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   16794:	b5f0      	push	{r4, r5, r6, r7, lr}
   16796:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   16798:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1679a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1679c:	f04f 0020 	mov.w	r0, #32
   167a0:	f3ef 8e11 	mrs	lr, BASEPRI
   167a4:	f380 8812 	msr	BASEPRI_MAX, r0
   167a8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   167ac:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   167ae:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   167b2:	1ba4      	subs	r4, r4, r6
   167b4:	403c      	ands	r4, r7
	if (available < len) {
   167b6:	42a2      	cmp	r2, r4
		len = available;
   167b8:	bf88      	it	hi
   167ba:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   167bc:	18b0      	adds	r0, r6, r2
   167be:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   167c0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   167c2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   167c4:	f38e 8811 	msr	BASEPRI, lr
   167c8:	f3bf 8f6f 	isb	sy
   167cc:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   167ce:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   167d0:	4290      	cmp	r0, r2
   167d2:	d119      	bne.n	16808 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   167d4:	4566      	cmp	r6, ip
   167d6:	d10d      	bne.n	167f4 <rng_pool_get+0x60>
	__asm__ volatile(
   167d8:	f04f 0520 	mov.w	r5, #32
   167dc:	f3ef 8011 	mrs	r0, BASEPRI
   167e0:	f385 8812 	msr	BASEPRI_MAX, r5
   167e4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   167e8:	781d      	ldrb	r5, [r3, #0]
   167ea:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   167ec:	f380 8811 	msr	BASEPRI, r0
   167f0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   167f4:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   167f6:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   167f8:	b290      	uxth	r0, r2
	available = available - len;
   167fa:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   167fc:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   167fe:	bf22      	ittt	cs
   16800:	4b06      	ldrcs	r3, [pc, #24]	; (1681c <rng_pool_get+0x88>)
   16802:	2201      	movcs	r2, #1
   16804:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   16806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   16808:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1680c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1680e:	f89e e005 	ldrb.w	lr, [lr, #5]
   16812:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   16816:	403d      	ands	r5, r7
   16818:	e7da      	b.n	167d0 <rng_pool_get+0x3c>
   1681a:	bf00      	nop
   1681c:	4000d000 	.word	0x4000d000

00016820 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16820:	43db      	mvns	r3, r3
{
   16822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   16826:	f013 0501 	ands.w	r5, r3, #1
{
   1682a:	460e      	mov	r6, r1
   1682c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1682e:	d004      	beq.n	1683a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   16830:	4821      	ldr	r0, [pc, #132]	; (168b8 <entropy_nrf5_get_entropy_isr+0x98>)
   16832:	f7ff ffaf 	bl	16794 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   16836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1683a:	b3a2      	cbz	r2, 168a6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1683c:	f04f 0320 	mov.w	r3, #32
   16840:	f3ef 8811 	mrs	r8, BASEPRI
   16844:	f383 8812 	msr	BASEPRI_MAX, r3
   16848:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1684c:	200d      	movs	r0, #13
   1684e:	f7ec f995 	bl	2b7c <arch_irq_is_enabled>
   16852:	4607      	mov	r7, r0
		irq_disable(IRQN);
   16854:	200d      	movs	r0, #13
   16856:	f7ec f97d 	bl	2b54 <arch_irq_disable>
	__asm__ volatile(
   1685a:	f388 8811 	msr	BASEPRI, r8
   1685e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16862:	f8df 8058 	ldr.w	r8, [pc, #88]	; 168bc <entropy_nrf5_get_entropy_isr+0x9c>
   16866:	f8df 9058 	ldr.w	r9, [pc, #88]	; 168c0 <entropy_nrf5_get_entropy_isr+0xa0>
   1686a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1686e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   16872:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16876:	2301      	movs	r3, #1
   16878:	f8c8 3000 	str.w	r3, [r8]
   1687c:	4625      	mov	r5, r4
   1687e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   16882:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   16886:	b183      	cbz	r3, 168aa <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   16888:	f7ff ff66 	bl	16758 <random_byte_get>
			if (byte < 0) {
   1688c:	1e03      	subs	r3, r0, #0
   1688e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   16892:	dbf6      	blt.n	16882 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   16894:	3d01      	subs	r5, #1
   16896:	b2ad      	uxth	r5, r5
   16898:	5573      	strb	r3, [r6, r5]
		} while (len);
   1689a:	2d00      	cmp	r5, #0
   1689c:	d1f1      	bne.n	16882 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1689e:	b117      	cbz	r7, 168a6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   168a0:	200d      	movs	r0, #13
   168a2:	f7ec f947 	bl	2b34 <arch_irq_enable>
	return cnt;
   168a6:	4620      	mov	r0, r4
   168a8:	e7c5      	b.n	16836 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   168aa:	f3bf 8f4f 	dsb	sy
				__WFE();
   168ae:	bf20      	wfe
				__SEV();
   168b0:	bf40      	sev
				__WFE();
   168b2:	bf20      	wfe
   168b4:	e7e5      	b.n	16882 <entropy_nrf5_get_entropy_isr+0x62>
   168b6:	bf00      	nop
   168b8:	2000279c 	.word	0x2000279c
   168bc:	4000d000 	.word	0x4000d000
   168c0:	e000e100 	.word	0xe000e100

000168c4 <entropy_nrf5_get_entropy>:
{
   168c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   168c8:	4f13      	ldr	r7, [pc, #76]	; (16918 <entropy_nrf5_get_entropy+0x54>)
   168ca:	460d      	mov	r5, r1
   168cc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   168ce:	f107 0845 	add.w	r8, r7, #69	; 0x45
   168d2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   168d6:	b914      	cbnz	r4, 168de <entropy_nrf5_get_entropy+0x1a>
}
   168d8:	4620      	mov	r0, r4
   168da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   168de:	f04f 33ff 	mov.w	r3, #4294967295
   168e2:	f04f 32ff 	mov.w	r2, #4294967295
   168e6:	4638      	mov	r0, r7
   168e8:	f001 fb3a 	bl	17f60 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   168ec:	4622      	mov	r2, r4
   168ee:	4629      	mov	r1, r5
   168f0:	4640      	mov	r0, r8
   168f2:	f7ff ff4f 	bl	16794 <rng_pool_get>
   168f6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   168f8:	4638      	mov	r0, r7
   168fa:	f001 fb0b 	bl	17f14 <z_impl_k_sem_give>
		if (bytes == 0U) {
   168fe:	b93e      	cbnz	r6, 16910 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   16900:	f04f 32ff 	mov.w	r2, #4294967295
   16904:	f04f 33ff 	mov.w	r3, #4294967295
   16908:	4648      	mov	r0, r9
   1690a:	f001 fb29 	bl	17f60 <z_impl_k_sem_take>
			continue;
   1690e:	e7e2      	b.n	168d6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   16910:	1ba4      	subs	r4, r4, r6
   16912:	b2a4      	uxth	r4, r4
		buf += bytes;
   16914:	4435      	add	r5, r6
   16916:	e7de      	b.n	168d6 <entropy_nrf5_get_entropy+0x12>
   16918:	2000276c 	.word	0x2000276c

0001691c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1691c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1691e:	4c19      	ldr	r4, [pc, #100]	; (16984 <entropy_nrf5_init+0x68>)
   16920:	2201      	movs	r2, #1
   16922:	4611      	mov	r1, r2
   16924:	4620      	mov	r0, r4
   16926:	f007 ffd4 	bl	1e8d2 <z_impl_k_sem_init>
   1692a:	2201      	movs	r2, #1
   1692c:	2100      	movs	r1, #0
   1692e:	f104 0018 	add.w	r0, r4, #24
   16932:	f007 ffce 	bl	1e8d2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   16936:	f240 4307 	movw	r3, #1031	; 0x407
   1693a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1693e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16942:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   16944:	230c      	movs	r3, #12
   16946:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1694a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1694c:	4b0e      	ldr	r3, [pc, #56]	; (16988 <entropy_nrf5_init+0x6c>)
   1694e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   16952:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   16956:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1695a:	f042 0201 	orr.w	r2, r2, #1
   1695e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   16962:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   16964:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   16968:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1696c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   16970:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   16972:	6019      	str	r1, [r3, #0]
   16974:	200d      	movs	r0, #13
   16976:	f7ec f90f 	bl	2b98 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1697a:	200d      	movs	r0, #13
   1697c:	f7ec f8da 	bl	2b34 <arch_irq_enable>

	return 0;
}
   16980:	4628      	mov	r0, r5
   16982:	bd38      	pop	{r3, r4, r5, pc}
   16984:	2000276c 	.word	0x2000276c
   16988:	4000d000 	.word	0x4000d000

0001698c <isr>:
{
   1698c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1698e:	f7ff fee3 	bl	16758 <random_byte_get>
	if (byte < 0) {
   16992:	2800      	cmp	r0, #0
   16994:	db20      	blt.n	169d8 <isr+0x4c>
	uint8_t last  = rngp->last;
   16996:	4b17      	ldr	r3, [pc, #92]	; (169f4 <isr+0x68>)
   16998:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1699c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   169a0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   169a4:	1a51      	subs	r1, r2, r1
   169a6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   169aa:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   169ac:	d10d      	bne.n	169ca <isr+0x3e>
	uint8_t last  = rngp->last;
   169ae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   169b2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   169b6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   169ba:	1a51      	subs	r1, r2, r1
   169bc:	ea34 0101 	bics.w	r1, r4, r1
   169c0:	d10b      	bne.n	169da <isr+0x4e>
   169c2:	4b0d      	ldr	r3, [pc, #52]	; (169f8 <isr+0x6c>)
   169c4:	2201      	movs	r2, #1
   169c6:	605a      	str	r2, [r3, #4]
}
   169c8:	e00e      	b.n	169e8 <isr+0x5c>
	rngp->buffer[last] = byte;
   169ca:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   169cc:	3201      	adds	r2, #1
   169ce:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   169d0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   169d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   169d8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   169da:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   169dc:	3201      	adds	r2, #1
   169de:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   169e0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   169e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   169e8:	4804      	ldr	r0, [pc, #16]	; (169fc <isr+0x70>)
}
   169ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   169ee:	f001 ba91 	b.w	17f14 <z_impl_k_sem_give>
   169f2:	bf00      	nop
   169f4:	2000276c 	.word	0x2000276c
   169f8:	4000d000 	.word	0x4000d000
   169fc:	20002784 	.word	0x20002784

00016a00 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   16a00:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   16a02:	2301      	movs	r3, #1
   16a04:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16a06:	4a11      	ldr	r2, [pc, #68]	; (16a4c <compare_int_lock+0x4c>)
   16a08:	f3bf 8f5b 	dmb	ish
   16a0c:	43dc      	mvns	r4, r3
   16a0e:	e852 1f00 	ldrex	r1, [r2]
   16a12:	ea01 0c04 	and.w	ip, r1, r4
   16a16:	e842 ce00 	strex	lr, ip, [r2]
   16a1a:	f1be 0f00 	cmp.w	lr, #0
   16a1e:	d1f6      	bne.n	16a0e <compare_int_lock+0xe>
   16a20:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16a28:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   16a2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   16a34:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   16a38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16a3c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   16a40:	420b      	tst	r3, r1
}
   16a42:	bf14      	ite	ne
   16a44:	2001      	movne	r0, #1
   16a46:	2000      	moveq	r0, #0
   16a48:	bd10      	pop	{r4, pc}
   16a4a:	bf00      	nop
   16a4c:	200027c4 	.word	0x200027c4

00016a50 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   16a50:	4919      	ldr	r1, [pc, #100]	; (16ab8 <sys_clock_timeout_handler+0x68>)
{
   16a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a54:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   16a56:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   16a5a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   16a5c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   16a60:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   16a64:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   16a66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   16a6a:	d222      	bcs.n	16ab2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   16a6c:	4b13      	ldr	r3, [pc, #76]	; (16abc <sys_clock_timeout_handler+0x6c>)
   16a6e:	681b      	ldr	r3, [r3, #0]
   16a70:	0a1a      	lsrs	r2, r3, #8
   16a72:	061b      	lsls	r3, r3, #24
   16a74:	195e      	adds	r6, r3, r5
   16a76:	4b12      	ldr	r3, [pc, #72]	; (16ac0 <sys_clock_timeout_handler+0x70>)
   16a78:	f142 0700 	adc.w	r7, r2, #0
   16a7c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   16a80:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   16a82:	f002 f877 	bl	18b74 <sys_clock_announce>
    return p_reg->CC[ch];
   16a86:	00a3      	lsls	r3, r4, #2
   16a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16a8c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   16a90:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   16a94:	42aa      	cmp	r2, r5
   16a96:	d10b      	bne.n	16ab0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   16a98:	b91e      	cbnz	r6, 16aa2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   16a9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16a9e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   16aa2:	4b08      	ldr	r3, [pc, #32]	; (16ac4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16aa4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   16aa8:	fa00 f404 	lsl.w	r4, r0, r4
   16aac:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   16ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   16ab2:	2600      	movs	r6, #0
   16ab4:	e7e5      	b.n	16a82 <sys_clock_timeout_handler+0x32>
   16ab6:	bf00      	nop
   16ab8:	200014a8 	.word	0x200014a8
   16abc:	200027c8 	.word	0x200027c8
   16ac0:	20001490 	.word	0x20001490
   16ac4:	40011000 	.word	0x40011000

00016ac8 <compare_int_unlock>:
	if (key) {
   16ac8:	b319      	cbz	r1, 16b12 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16aca:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   16ace:	2301      	movs	r3, #1
   16ad0:	4a10      	ldr	r2, [pc, #64]	; (16b14 <compare_int_unlock+0x4c>)
   16ad2:	4083      	lsls	r3, r0
   16ad4:	e852 1f00 	ldrex	r1, [r2]
   16ad8:	4319      	orrs	r1, r3
   16ada:	e842 1c00 	strex	ip, r1, [r2]
   16ade:	f1bc 0f00 	cmp.w	ip, #0
   16ae2:	d1f7      	bne.n	16ad4 <compare_int_unlock+0xc>
   16ae4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   16ae8:	4a0b      	ldr	r2, [pc, #44]	; (16b18 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16aee:	4083      	lsls	r3, r0
   16af0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16af4:	4b09      	ldr	r3, [pc, #36]	; (16b1c <compare_int_unlock+0x54>)
   16af6:	f3bf 8f5b 	dmb	ish
   16afa:	681b      	ldr	r3, [r3, #0]
   16afc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   16b00:	fa23 f000 	lsr.w	r0, r3, r0
   16b04:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16b06:	bf42      	ittt	mi
   16b08:	4b05      	ldrmi	r3, [pc, #20]	; (16b20 <compare_int_unlock+0x58>)
   16b0a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   16b0e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   16b12:	4770      	bx	lr
   16b14:	200027c4 	.word	0x200027c4
   16b18:	40011000 	.word	0x40011000
   16b1c:	200027c0 	.word	0x200027c0
   16b20:	e000e100 	.word	0xe000e100

00016b24 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   16b24:	4b0d      	ldr	r3, [pc, #52]	; (16b5c <z_nrf_rtc_timer_read+0x38>)
   16b26:	6818      	ldr	r0, [r3, #0]
   16b28:	0a01      	lsrs	r1, r0, #8
   16b2a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   16b2c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   16b30:	4b0b      	ldr	r3, [pc, #44]	; (16b60 <z_nrf_rtc_timer_read+0x3c>)
   16b32:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   16b36:	1818      	adds	r0, r3, r0
   16b38:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   16b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16b40:	d20a      	bcs.n	16b58 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   16b42:	4b08      	ldr	r3, [pc, #32]	; (16b64 <z_nrf_rtc_timer_read+0x40>)
   16b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b48:	4290      	cmp	r0, r2
   16b4a:	eb71 0303 	sbcs.w	r3, r1, r3
   16b4e:	d203      	bcs.n	16b58 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   16b50:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   16b54:	f141 0100 	adc.w	r1, r1, #0
}
   16b58:	4770      	bx	lr
   16b5a:	bf00      	nop
   16b5c:	200027c8 	.word	0x200027c8
   16b60:	40011000 	.word	0x40011000
   16b64:	20001490 	.word	0x20001490

00016b68 <compare_set>:
{
   16b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b6c:	b085      	sub	sp, #20
   16b6e:	4616      	mov	r6, r2
   16b70:	4698      	mov	r8, r3
   16b72:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   16b74:	f7ff ff44 	bl	16a00 <compare_int_lock>
   16b78:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   16b7a:	f7ff ffd3 	bl	16b24 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   16b7e:	42b0      	cmp	r0, r6
   16b80:	eb71 0308 	sbcs.w	r3, r1, r8
   16b84:	d278      	bcs.n	16c78 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   16b86:	4b46      	ldr	r3, [pc, #280]	; (16ca0 <compare_set+0x138>)
   16b88:	1a30      	subs	r0, r6, r0
   16b8a:	eb68 0101 	sbc.w	r1, r8, r1
   16b8e:	4298      	cmp	r0, r3
   16b90:	f171 0300 	sbcs.w	r3, r1, #0
   16b94:	f080 8081 	bcs.w	16c9a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   16b98:	4b42      	ldr	r3, [pc, #264]	; (16ca4 <compare_set+0x13c>)
   16b9a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   16b9e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   16ba2:	45d8      	cmp	r8, fp
   16ba4:	bf08      	it	eq
   16ba6:	4556      	cmpeq	r6, sl
   16ba8:	d051      	beq.n	16c4e <compare_set+0xe6>
   16baa:	ea4f 0985 	mov.w	r9, r5, lsl #2
   16bae:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   16bb2:	f105 0750 	add.w	r7, r5, #80	; 0x50
   16bb6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   16bba:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16bbc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16bc0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16bc4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   16bc6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   16bca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16bce:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   16bd0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   16bd4:	4b34      	ldr	r3, [pc, #208]	; (16ca8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16bd6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   16bda:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   16bdc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   16be0:	1a40      	subs	r0, r0, r1
   16be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16be6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   16bea:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   16bec:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   16bf0:	d107      	bne.n	16c02 <compare_set+0x9a>
   16bf2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   16bf6:	2013      	movs	r0, #19
   16bf8:	f008 f8a7 	bl	1ed4a <z_impl_k_busy_wait>
   16bfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   16c00:	4b29      	ldr	r3, [pc, #164]	; (16ca8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   16c02:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   16c06:	eba4 000c 	sub.w	r0, r4, ip
   16c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   16c0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16c12:	bf88      	it	hi
   16c14:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16c16:	2000      	movs	r0, #0
   16c18:	6038      	str	r0, [r7, #0]
   16c1a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   16c1c:	9801      	ldr	r0, [sp, #4]
   16c1e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16c22:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   16c26:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   16c2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   16c2e:	4281      	cmp	r1, r0
   16c30:	d006      	beq.n	16c40 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   16c32:	1a20      	subs	r0, r4, r0
   16c34:	3802      	subs	r0, #2
   16c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   16c3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16c3e:	d819      	bhi.n	16c74 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   16c40:	1aa4      	subs	r4, r4, r2
   16c42:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   16c46:	eb14 0a06 	adds.w	sl, r4, r6
   16c4a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   16c4e:	4915      	ldr	r1, [pc, #84]	; (16ca4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   16c50:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   16c52:	012b      	lsls	r3, r5, #4
   16c54:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   16c58:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   16c5c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   16c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16c60:	6053      	str	r3, [r2, #4]
	return ret;
   16c62:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   16c64:	4628      	mov	r0, r5
   16c66:	9900      	ldr	r1, [sp, #0]
   16c68:	f7ff ff2e 	bl	16ac8 <compare_int_unlock>
}
   16c6c:	4620      	mov	r0, r4
   16c6e:	b005      	add	sp, #20
   16c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c74:	4620      	mov	r0, r4
   16c76:	e7b1      	b.n	16bdc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   16c78:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c7a:	4a0c      	ldr	r2, [pc, #48]	; (16cac <compare_set+0x144>)
   16c7c:	f3bf 8f5b 	dmb	ish
   16c80:	40ab      	lsls	r3, r5
   16c82:	e852 1f00 	ldrex	r1, [r2]
   16c86:	4319      	orrs	r1, r3
   16c88:	e842 1000 	strex	r0, r1, [r2]
   16c8c:	2800      	cmp	r0, #0
   16c8e:	d1f8      	bne.n	16c82 <compare_set+0x11a>
   16c90:	f3bf 8f5b 	dmb	ish
   16c94:	46b2      	mov	sl, r6
   16c96:	46c3      	mov	fp, r8
   16c98:	e7d9      	b.n	16c4e <compare_set+0xe6>
			return -EINVAL;
   16c9a:	f06f 0415 	mvn.w	r4, #21
   16c9e:	e7e1      	b.n	16c64 <compare_set+0xfc>
   16ca0:	01000001 	.word	0x01000001
   16ca4:	20001498 	.word	0x20001498
   16ca8:	40011000 	.word	0x40011000
   16cac:	200027c0 	.word	0x200027c0

00016cb0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   16cb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   16cb2:	4b19      	ldr	r3, [pc, #100]	; (16d18 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   16cb4:	4d19      	ldr	r5, [pc, #100]	; (16d1c <sys_clock_driver_init+0x6c>)
   16cb6:	2400      	movs	r4, #0
   16cb8:	f04f 30ff 	mov.w	r0, #4294967295
   16cbc:	f04f 31ff 	mov.w	r1, #4294967295
   16cc0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   16cc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   16cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16ccc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16cd0:	4b13      	ldr	r3, [pc, #76]	; (16d20 <sys_clock_driver_init+0x70>)
   16cd2:	2602      	movs	r6, #2
   16cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   16cd8:	2101      	movs	r1, #1
   16cda:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   16cde:	2011      	movs	r0, #17
   16ce0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16ce4:	4622      	mov	r2, r4
   16ce6:	f7eb ff57 	bl	2b98 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16cea:	2011      	movs	r0, #17
   16cec:	f7eb ff22 	bl	2b34 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   16cf0:	4a0c      	ldr	r2, [pc, #48]	; (16d24 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16cf2:	2301      	movs	r3, #1
   16cf4:	60ab      	str	r3, [r5, #8]
   16cf6:	602b      	str	r3, [r5, #0]
   16cf8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   16cfa:	4b0b      	ldr	r3, [pc, #44]	; (16d28 <sys_clock_driver_init+0x78>)
   16cfc:	4a0b      	ldr	r2, [pc, #44]	; (16d2c <sys_clock_driver_init+0x7c>)
   16cfe:	9300      	str	r3, [sp, #0]
   16d00:	9401      	str	r4, [sp, #4]
   16d02:	2300      	movs	r3, #0
   16d04:	4620      	mov	r0, r4
   16d06:	f7ff ff2f 	bl	16b68 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   16d0a:	4630      	mov	r0, r6
   16d0c:	f7ff f99a 	bl	16044 <z_nrf_clock_control_lf_on>

	return 0;
}
   16d10:	4620      	mov	r0, r4
   16d12:	b002      	add	sp, #8
   16d14:	bd70      	pop	{r4, r5, r6, pc}
   16d16:	bf00      	nop
   16d18:	20001498 	.word	0x20001498
   16d1c:	40011000 	.word	0x40011000
   16d20:	e000e100 	.word	0xe000e100
   16d24:	200027c4 	.word	0x200027c4
   16d28:	00016a51 	.word	0x00016a51
   16d2c:	007fffff 	.word	0x007fffff

00016d30 <rtc_nrf_isr>:
{
   16d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   16d34:	4c35      	ldr	r4, [pc, #212]	; (16e0c <rtc_nrf_isr+0xdc>)
   16d36:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   16d3a:	079a      	lsls	r2, r3, #30
   16d3c:	d50b      	bpl.n	16d56 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16d3e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   16d42:	b143      	cbz	r3, 16d56 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   16d44:	4a32      	ldr	r2, [pc, #200]	; (16e10 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16d46:	2300      	movs	r3, #0
   16d48:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   16d4c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   16d50:	6813      	ldr	r3, [r2, #0]
   16d52:	3301      	adds	r3, #1
   16d54:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   16d56:	f04f 0320 	mov.w	r3, #32
   16d5a:	f3ef 8211 	mrs	r2, BASEPRI
   16d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   16d62:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   16d66:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   16d6a:	03db      	lsls	r3, r3, #15
   16d6c:	d512      	bpl.n	16d94 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16d6e:	f3bf 8f5b 	dmb	ish
   16d72:	4b28      	ldr	r3, [pc, #160]	; (16e14 <rtc_nrf_isr+0xe4>)
   16d74:	e853 1f00 	ldrex	r1, [r3]
   16d78:	f021 0001 	bic.w	r0, r1, #1
   16d7c:	e843 0600 	strex	r6, r0, [r3]
   16d80:	2e00      	cmp	r6, #0
   16d82:	d1f7      	bne.n	16d74 <rtc_nrf_isr+0x44>
   16d84:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   16d88:	2900      	cmp	r1, #0
   16d8a:	d136      	bne.n	16dfa <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16d8c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   16d90:	2b00      	cmp	r3, #0
   16d92:	d132      	bne.n	16dfa <rtc_nrf_isr+0xca>
{
   16d94:	2300      	movs	r3, #0
	__asm__ volatile(
   16d96:	f382 8811 	msr	BASEPRI, r2
   16d9a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   16d9e:	b34b      	cbz	r3, 16df4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   16da0:	f7ff fec0 	bl	16b24 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   16da4:	f04f 0320 	mov.w	r3, #32
   16da8:	f3ef 8c11 	mrs	ip, BASEPRI
   16dac:	f383 8812 	msr	BASEPRI_MAX, r3
   16db0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   16db4:	4b18      	ldr	r3, [pc, #96]	; (16e18 <rtc_nrf_isr+0xe8>)
   16db6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   16dba:	42b0      	cmp	r0, r6
   16dbc:	eb71 0207 	sbcs.w	r2, r1, r7
   16dc0:	f04f 0200 	mov.w	r2, #0
   16dc4:	d320      	bcc.n	16e08 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16dc6:	f04f 38ff 	mov.w	r8, #4294967295
   16dca:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
   16dce:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16dd2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   16dd6:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   16dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16ddc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   16de0:	f38c 8811 	msr	BASEPRI, ip
   16de4:	f3bf 8f6f 	isb	sy
		if (handler) {
   16de8:	b121      	cbz	r1, 16df4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   16dea:	9500      	str	r5, [sp, #0]
   16dec:	4632      	mov	r2, r6
   16dee:	463b      	mov	r3, r7
   16df0:	2000      	movs	r0, #0
   16df2:	4788      	blx	r1
}
   16df4:	b003      	add	sp, #12
   16df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16dfa:	2300      	movs	r3, #0
   16dfc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   16e00:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   16e04:	2301      	movs	r3, #1
}
   16e06:	e7c6      	b.n	16d96 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   16e08:	4611      	mov	r1, r2
   16e0a:	e7e9      	b.n	16de0 <rtc_nrf_isr+0xb0>
   16e0c:	40011000 	.word	0x40011000
   16e10:	200027c8 	.word	0x200027c8
   16e14:	200027c0 	.word	0x200027c0
   16e18:	20001498 	.word	0x20001498

00016e1c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16e1c:	1c43      	adds	r3, r0, #1
{
   16e1e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16e20:	d021      	beq.n	16e66 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16e22:	2801      	cmp	r0, #1
   16e24:	dd21      	ble.n	16e6a <sys_clock_set_timeout+0x4e>
   16e26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16e2a:	da20      	bge.n	16e6e <sys_clock_set_timeout+0x52>
   16e2c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   16e2e:	f7ff fe79 	bl	16b24 <z_nrf_rtc_timer_read>
   16e32:	4b10      	ldr	r3, [pc, #64]	; (16e74 <sys_clock_set_timeout+0x58>)
   16e34:	e9d3 1300 	ldrd	r1, r3, [r3]
   16e38:	1a40      	subs	r0, r0, r1
		ticks = 0;
   16e3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16e3e:	bf28      	it	cs
   16e40:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   16e42:	3001      	adds	r0, #1
   16e44:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   16e46:	480c      	ldr	r0, [pc, #48]	; (16e78 <sys_clock_set_timeout+0x5c>)
   16e48:	4282      	cmp	r2, r0
   16e4a:	bf28      	it	cs
   16e4c:	4602      	movcs	r2, r0
   16e4e:	1852      	adds	r2, r2, r1
   16e50:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   16e54:	4909      	ldr	r1, [pc, #36]	; (16e7c <sys_clock_set_timeout+0x60>)
   16e56:	9001      	str	r0, [sp, #4]
   16e58:	9100      	str	r1, [sp, #0]
   16e5a:	f143 0300 	adc.w	r3, r3, #0
   16e5e:	f7ff fe83 	bl	16b68 <compare_set>
}
   16e62:	b002      	add	sp, #8
   16e64:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16e66:	4804      	ldr	r0, [pc, #16]	; (16e78 <sys_clock_set_timeout+0x5c>)
   16e68:	e7e0      	b.n	16e2c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   16e6a:	2400      	movs	r4, #0
   16e6c:	e7df      	b.n	16e2e <sys_clock_set_timeout+0x12>
   16e6e:	4c02      	ldr	r4, [pc, #8]	; (16e78 <sys_clock_set_timeout+0x5c>)
   16e70:	e7dd      	b.n	16e2e <sys_clock_set_timeout+0x12>
   16e72:	bf00      	nop
   16e74:	200014a8 	.word	0x200014a8
   16e78:	007fffff 	.word	0x007fffff
   16e7c:	00016a51 	.word	0x00016a51

00016e80 <sys_clock_elapsed>:
{
   16e80:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   16e82:	f7ff fe4f 	bl	16b24 <z_nrf_rtc_timer_read>
   16e86:	4b02      	ldr	r3, [pc, #8]	; (16e90 <sys_clock_elapsed+0x10>)
   16e88:	681b      	ldr	r3, [r3, #0]
}
   16e8a:	1ac0      	subs	r0, r0, r3
   16e8c:	bd08      	pop	{r3, pc}
   16e8e:	bf00      	nop
   16e90:	200014a8 	.word	0x200014a8

00016e94 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   16e94:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   16e98:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   16e9a:	2801      	cmp	r0, #1
   16e9c:	4b04      	ldr	r3, [pc, #16]	; (16eb0 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16e9e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   16ea2:	bf18      	it	ne
   16ea4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16ea8:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   16eaa:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   16eae:	4770      	bx	lr
   16eb0:	50000300 	.word	0x50000300

00016eb4 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   16eb4:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16eb8:	2b00      	cmp	r3, #0
{
   16eba:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16ebc:	bf07      	ittee	eq
   16ebe:	4614      	moveq	r4, r2
   16ec0:	460d      	moveq	r5, r1
   16ec2:	2401      	movne	r4, #1
   16ec4:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   16ec6:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   16eca:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
   16ece:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   16ed2:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16ed6:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
   16eda:	4b06      	ldr	r3, [pc, #24]	; (16ef4 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16edc:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
   16ee0:	bf08      	it	eq
   16ee2:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   16ee6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16eea:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   16eee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   16ef2:	bd30      	pop	{r4, r5, pc}
   16ef4:	50000300 	.word	0x50000300

00016ef8 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   16ef8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   16efc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   16efe:	2801      	cmp	r0, #1
   16f00:	4b04      	ldr	r3, [pc, #16]	; (16f14 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16f02:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   16f06:	bf18      	it	ne
   16f08:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16f0c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   16f0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   16f12:	4770      	bx	lr
   16f14:	50000300 	.word	0x50000300

00016f18 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   16f1c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   16f20:	2a08      	cmp	r2, #8
   16f22:	d106      	bne.n	16f32 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   16f24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   16f28:	2b05      	cmp	r3, #5
   16f2a:	d802      	bhi.n	16f32 <nrf52_errata_103+0x1a>
   16f2c:	4a02      	ldr	r2, [pc, #8]	; (16f38 <nrf52_errata_103+0x20>)
   16f2e:	5cd0      	ldrb	r0, [r2, r3]
   16f30:	4770      	bx	lr
        return false;
   16f32:	2000      	movs	r0, #0
}
   16f34:	4770      	bx	lr
   16f36:	bf00      	nop
   16f38:	00020ecc 	.word	0x00020ecc

00016f3c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   16f3c:	4a02      	ldr	r2, [pc, #8]	; (16f48 <nvmc_wait+0xc>)
   16f3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   16f42:	2b00      	cmp	r3, #0
   16f44:	d0fb      	beq.n	16f3e <nvmc_wait+0x2>
}
   16f46:	4770      	bx	lr
   16f48:	4001e000 	.word	0x4001e000

00016f4c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   16f4c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   16f4e:	f007 fa67 	bl	1e420 <nrf52_errata_136>
   16f52:	b140      	cbz	r0, 16f66 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   16f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16f58:	2200      	movs	r2, #0
   16f5a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   16f5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   16f62:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   16f66:	f007 fa5b 	bl	1e420 <nrf52_errata_136>
   16f6a:	2800      	cmp	r0, #0
   16f6c:	d046      	beq.n	16ffc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   16f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16f72:	4b60      	ldr	r3, [pc, #384]	; (170f4 <SystemInit+0x1a8>)
   16f74:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   16f78:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   16f7c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   16f80:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   16f84:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   16f88:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   16f8c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   16f90:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   16f94:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   16f98:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   16f9c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   16fa0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   16fa4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   16fa8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   16fac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   16fb0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   16fb4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   16fb8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   16fbc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   16fc0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   16fc4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   16fc8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   16fcc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   16fd0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   16fd4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   16fd8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   16fdc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   16fe0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   16fe4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   16fe8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   16fec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   16ff0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   16ff4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   16ff8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   16ffc:	f7ff ff8c 	bl	16f18 <nrf52_errata_103>
   17000:	b118      	cbz	r0, 1700a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   17002:	4b3d      	ldr	r3, [pc, #244]	; (170f8 <SystemInit+0x1ac>)
   17004:	4a3d      	ldr	r2, [pc, #244]	; (170fc <SystemInit+0x1b0>)
   17006:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1700a:	f7ff ff85 	bl	16f18 <nrf52_errata_103>
   1700e:	b118      	cbz	r0, 17018 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   17010:	4b3b      	ldr	r3, [pc, #236]	; (17100 <SystemInit+0x1b4>)
   17012:	22fb      	movs	r2, #251	; 0xfb
   17014:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   17018:	f7ff ff7e 	bl	16f18 <nrf52_errata_103>
   1701c:	b170      	cbz	r0, 1703c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1701e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   17022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17026:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1702a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1702e:	f022 020f 	bic.w	r2, r2, #15
   17032:	f003 030f 	and.w	r3, r3, #15
   17036:	4313      	orrs	r3, r2
   17038:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1703c:	f7ff ff6c 	bl	16f18 <nrf52_errata_103>
   17040:	b120      	cbz	r0, 1704c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   17042:	4b30      	ldr	r3, [pc, #192]	; (17104 <SystemInit+0x1b8>)
   17044:	f44f 7200 	mov.w	r2, #512	; 0x200
   17048:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1704c:	f007 f9e8 	bl	1e420 <nrf52_errata_136>
   17050:	b148      	cbz	r0, 17066 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   17052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17056:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1705a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1705c:	bf44      	itt	mi
   1705e:	f06f 0201 	mvnmi.w	r2, #1
   17062:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1706a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1706e:	2a08      	cmp	r2, #8
   17070:	d10e      	bne.n	17090 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17072:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   17076:	2b05      	cmp	r3, #5
   17078:	d802      	bhi.n	17080 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1707a:	4a23      	ldr	r2, [pc, #140]	; (17108 <SystemInit+0x1bc>)
   1707c:	5cd3      	ldrb	r3, [r2, r3]
   1707e:	b13b      	cbz	r3, 17090 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   17080:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17084:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   17088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1708c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   17090:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17094:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   17098:	2a00      	cmp	r2, #0
   1709a:	db03      	blt.n	170a4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1709c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   170a0:	2b00      	cmp	r3, #0
   170a2:	da22      	bge.n	170ea <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   170a4:	4919      	ldr	r1, [pc, #100]	; (1710c <SystemInit+0x1c0>)
   170a6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   170a8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   170ac:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   170b0:	2412      	movs	r4, #18
    nvmc_wait();
   170b2:	f7ff ff43 	bl	16f3c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   170b6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   170ba:	f7ff ff3f 	bl	16f3c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   170be:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   170c2:	f7ff ff3b 	bl	16f3c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   170c6:	2300      	movs	r3, #0
   170c8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   170cc:	f7ff ff36 	bl	16f3c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   170d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   170d4:	490e      	ldr	r1, [pc, #56]	; (17110 <SystemInit+0x1c4>)
   170d6:	4b0f      	ldr	r3, [pc, #60]	; (17114 <SystemInit+0x1c8>)
   170d8:	68ca      	ldr	r2, [r1, #12]
   170da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   170de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   170e0:	60cb      	str	r3, [r1, #12]
   170e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   170e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   170e8:	e7fd      	b.n	170e6 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   170ea:	4b0b      	ldr	r3, [pc, #44]	; (17118 <SystemInit+0x1cc>)
   170ec:	4a0b      	ldr	r2, [pc, #44]	; (1711c <SystemInit+0x1d0>)
   170ee:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   170f0:	bd10      	pop	{r4, pc}
   170f2:	bf00      	nop
   170f4:	4000c000 	.word	0x4000c000
   170f8:	40005000 	.word	0x40005000
   170fc:	00038148 	.word	0x00038148
   17100:	4000f000 	.word	0x4000f000
   17104:	40029000 	.word	0x40029000
   17108:	00020ec6 	.word	0x00020ec6
   1710c:	4001e000 	.word	0x4001e000
   17110:	e000ed00 	.word	0xe000ed00
   17114:	05fa0004 	.word	0x05fa0004
   17118:	200007c0 	.word	0x200007c0
   1711c:	03d09000 	.word	0x03d09000

00017120 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   17120:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   17122:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   17124:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   17126:	fab2 f382 	clz	r3, r2
   1712a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1712e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   17130:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   17132:	d014      	beq.n	1715e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17134:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   17138:	fa05 f303 	lsl.w	r3, r5, r3
   1713c:	ea22 0303 	bic.w	r3, r2, r3
   17140:	e850 6f00 	ldrex	r6, [r0]
   17144:	4296      	cmp	r6, r2
   17146:	d104      	bne.n	17152 <nrfx_flag32_alloc+0x32>
   17148:	e840 3c00 	strex	ip, r3, [r0]
   1714c:	f1bc 0f00 	cmp.w	ip, #0
   17150:	d1f6      	bne.n	17140 <nrfx_flag32_alloc+0x20>
   17152:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   17156:	d1e5      	bne.n	17124 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   17158:	4802      	ldr	r0, [pc, #8]	; (17164 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1715a:	700c      	strb	r4, [r1, #0]
}
   1715c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1715e:	4802      	ldr	r0, [pc, #8]	; (17168 <nrfx_flag32_alloc+0x48>)
   17160:	e7fc      	b.n	1715c <nrfx_flag32_alloc+0x3c>
   17162:	bf00      	nop
   17164:	0bad0000 	.word	0x0bad0000
   17168:	0bad0002 	.word	0x0bad0002

0001716c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1716c:	6803      	ldr	r3, [r0, #0]
   1716e:	40cb      	lsrs	r3, r1
   17170:	07db      	lsls	r3, r3, #31
{
   17172:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   17174:	d415      	bmi.n	171a2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   17176:	2301      	movs	r3, #1
   17178:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1717c:	6803      	ldr	r3, [r0, #0]
   1717e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   17182:	ea41 0203 	orr.w	r2, r1, r3
   17186:	e850 4f00 	ldrex	r4, [r0]
   1718a:	429c      	cmp	r4, r3
   1718c:	d104      	bne.n	17198 <nrfx_flag32_free+0x2c>
   1718e:	e840 2c00 	strex	ip, r2, [r0]
   17192:	f1bc 0f00 	cmp.w	ip, #0
   17196:	d1f6      	bne.n	17186 <nrfx_flag32_free+0x1a>
   17198:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1719c:	d1ee      	bne.n	1717c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1719e:	4802      	ldr	r0, [pc, #8]	; (171a8 <nrfx_flag32_free+0x3c>)
}
   171a0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   171a2:	4802      	ldr	r0, [pc, #8]	; (171ac <nrfx_flag32_free+0x40>)
   171a4:	e7fc      	b.n	171a0 <nrfx_flag32_free+0x34>
   171a6:	bf00      	nop
   171a8:	0bad0000 	.word	0x0bad0000
   171ac:	0bad0004 	.word	0x0bad0004

000171b0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   171b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   171b2:	4604      	mov	r4, r0
   171b4:	b118      	cbz	r0, 171be <clock_stop+0xe>
   171b6:	2801      	cmp	r0, #1
   171b8:	d029      	beq.n	1720e <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   171ba:	b003      	add	sp, #12
   171bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   171be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   171c2:	2202      	movs	r2, #2
   171c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171c8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   171cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   171d0:	2201      	movs	r2, #1
   171d2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   171d4:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   171d6:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   171d8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   171dc:	bf14      	ite	ne
   171de:	2500      	movne	r5, #0
   171e0:	f10d 0507 	addeq.w	r5, sp, #7
   171e4:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   171e8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   171ec:	b1d4      	cbz	r4, 17224 <clock_stop+0x74>
   171ee:	2c01      	cmp	r4, #1
   171f0:	d1e3      	bne.n	171ba <clock_stop+0xa>
            if (p_clk_src != NULL)
   171f2:	b125      	cbz	r5, 171fe <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   171f4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   171f8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   171fc:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   171fe:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   17202:	03db      	lsls	r3, r3, #15
   17204:	d418      	bmi.n	17238 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
   17206:	4b13      	ldr	r3, [pc, #76]	; (17254 <clock_stop+0xa4>)
   17208:	2200      	movs	r2, #0
   1720a:	715a      	strb	r2, [r3, #5]
   1720c:	e7d5      	b.n	171ba <clock_stop+0xa>
    p_reg->INTENCLR = mask;
   1720e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17212:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   17214:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17218:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1721c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17220:	6058      	str	r0, [r3, #4]
}
   17222:	e7d7      	b.n	171d4 <clock_stop+0x24>
            if (p_clk_src != NULL)
   17224:	b125      	cbz	r5, 17230 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17226:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1722a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1722e:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17230:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   17234:	03da      	lsls	r2, r3, #15
   17236:	d5c0      	bpl.n	171ba <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   17238:	b92d      	cbnz	r5, 17246 <clock_stop+0x96>
   1723a:	2001      	movs	r0, #1
   1723c:	f007 f8fa 	bl	1e434 <nrfx_busy_wait>
   17240:	3f01      	subs	r7, #1
   17242:	d1d3      	bne.n	171ec <clock_stop+0x3c>
   17244:	e003      	b.n	1724e <clock_stop+0x9e>
   17246:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1724a:	2b01      	cmp	r3, #1
   1724c:	d0f5      	beq.n	1723a <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   1724e:	2c01      	cmp	r4, #1
   17250:	d0d9      	beq.n	17206 <clock_stop+0x56>
   17252:	e7b2      	b.n	171ba <clock_stop+0xa>
   17254:	200027cc 	.word	0x200027cc

00017258 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   17258:	4b04      	ldr	r3, [pc, #16]	; (1726c <nrfx_clock_init+0x14>)
   1725a:	791a      	ldrb	r2, [r3, #4]
   1725c:	b922      	cbnz	r2, 17268 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1725e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   17260:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   17262:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   17264:	4802      	ldr	r0, [pc, #8]	; (17270 <nrfx_clock_init+0x18>)
   17266:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   17268:	4802      	ldr	r0, [pc, #8]	; (17274 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1726a:	4770      	bx	lr
   1726c:	200027cc 	.word	0x200027cc
   17270:	0bad0000 	.word	0x0bad0000
   17274:	0bad000c 	.word	0x0bad000c

00017278 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1727c:	b510      	push	{r4, lr}
   1727e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   17282:	b16a      	cbz	r2, 172a0 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17284:	2200      	movs	r2, #0
   17286:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1728a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1728e:	2201      	movs	r2, #1
   17290:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   17294:	4b11      	ldr	r3, [pc, #68]	; (172dc <nrfx_power_clock_irq_handler+0x64>)
   17296:	7958      	ldrb	r0, [r3, #5]
   17298:	b910      	cbnz	r0, 172a0 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1729a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1729c:	681b      	ldr	r3, [r3, #0]
   1729e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   172a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   172a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   172a8:	b172      	cbz	r2, 172c8 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   172aa:	2200      	movs	r2, #0
   172ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   172b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   172b4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   172b8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   172bc:	0792      	lsls	r2, r2, #30
   172be:	d104      	bne.n	172ca <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   172c0:	2201      	movs	r2, #1
   172c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   172c6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   172c8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   172ca:	2202      	movs	r2, #2
   172cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   172d0:	4b02      	ldr	r3, [pc, #8]	; (172dc <nrfx_power_clock_irq_handler+0x64>)
}
   172d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   172d6:	681b      	ldr	r3, [r3, #0]
   172d8:	2001      	movs	r0, #1
   172da:	4718      	bx	r3
   172dc:	200027cc 	.word	0x200027cc

000172e0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   172e0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   172e2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   172e6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   172e8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   172ea:	6002      	str	r2, [r0, #0]
}
   172ec:	4802      	ldr	r0, [pc, #8]	; (172f8 <nrf_gpio_pin_port_decode+0x18>)
   172ee:	bf18      	it	ne
   172f0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   172f4:	4770      	bx	lr
   172f6:	bf00      	nop
   172f8:	50000300 	.word	0x50000300

000172fc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   172fc:	4b03      	ldr	r3, [pc, #12]	; (1730c <pin_in_use_by_te+0x10>)
   172fe:	3008      	adds	r0, #8
   17300:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17304:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17308:	4770      	bx	lr
   1730a:	bf00      	nop
   1730c:	200007c4 	.word	0x200007c4

00017310 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   17310:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   17312:	f100 0308 	add.w	r3, r0, #8
   17316:	4c0c      	ldr	r4, [pc, #48]	; (17348 <call_handler+0x38>)
   17318:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1731c:	05da      	lsls	r2, r3, #23
{
   1731e:	4605      	mov	r5, r0
   17320:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   17322:	d507      	bpl.n	17334 <call_handler+0x24>
   17324:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   17328:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1732c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   17330:	6852      	ldr	r2, [r2, #4]
   17332:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   17334:	68a3      	ldr	r3, [r4, #8]
   17336:	b12b      	cbz	r3, 17344 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17338:	68e2      	ldr	r2, [r4, #12]
   1733a:	4631      	mov	r1, r6
   1733c:	4628      	mov	r0, r5
    }
}
   1733e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17342:	4718      	bx	r3
}
   17344:	bd70      	pop	{r4, r5, r6, pc}
   17346:	bf00      	nop
   17348:	200007c4 	.word	0x200007c4

0001734c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1734c:	4a12      	ldr	r2, [pc, #72]	; (17398 <release_handler+0x4c>)
   1734e:	3008      	adds	r0, #8
{
   17350:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   17352:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   17356:	05d9      	lsls	r1, r3, #23
   17358:	d51b      	bpl.n	17392 <release_handler+0x46>
   1735a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1735e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   17362:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17366:	f102 0410 	add.w	r4, r2, #16
   1736a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1736c:	f834 3b02 	ldrh.w	r3, [r4], #2
   17370:	f413 7f80 	tst.w	r3, #256	; 0x100
   17374:	d003      	beq.n	1737e <release_handler+0x32>
   17376:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1737a:	4299      	cmp	r1, r3
   1737c:	d009      	beq.n	17392 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1737e:	3001      	adds	r0, #1
   17380:	2830      	cmp	r0, #48	; 0x30
   17382:	d1f3      	bne.n	1736c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   17384:	2300      	movs	r3, #0
   17386:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1738a:	4804      	ldr	r0, [pc, #16]	; (1739c <release_handler+0x50>)
}
   1738c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1738e:	f7ff beed 	b.w	1716c <nrfx_flag32_free>
}
   17392:	bc10      	pop	{r4}
   17394:	4770      	bx	lr
   17396:	bf00      	nop
   17398:	200007c4 	.word	0x200007c4
   1739c:	20000838 	.word	0x20000838

000173a0 <pin_handler_trigger_uninit>:
{
   173a0:	b538      	push	{r3, r4, r5, lr}
   173a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   173a4:	f7ff ffaa 	bl	172fc <pin_in_use_by_te>
   173a8:	4c09      	ldr	r4, [pc, #36]	; (173d0 <pin_handler_trigger_uninit+0x30>)
   173aa:	f102 0508 	add.w	r5, r2, #8
   173ae:	b140      	cbz	r0, 173c2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   173b0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   173b4:	4907      	ldr	r1, [pc, #28]	; (173d4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   173b6:	0b5b      	lsrs	r3, r3, #13
   173b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   173bc:	2000      	movs	r0, #0
   173be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   173c2:	4610      	mov	r0, r2
   173c4:	f7ff ffc2 	bl	1734c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   173c8:	2300      	movs	r3, #0
   173ca:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   173ce:	bd38      	pop	{r3, r4, r5, pc}
   173d0:	200007c4 	.word	0x200007c4
   173d4:	40006000 	.word	0x40006000

000173d8 <nrfx_gpiote_input_configure>:
{
   173d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   173dc:	4604      	mov	r4, r0
   173de:	4617      	mov	r7, r2
   173e0:	461d      	mov	r5, r3
    if (p_input_config)
   173e2:	b321      	cbz	r1, 1742e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   173e4:	4e4e      	ldr	r6, [pc, #312]	; (17520 <nrfx_gpiote_input_configure+0x148>)
   173e6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   173ea:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   173ee:	079b      	lsls	r3, r3, #30
   173f0:	d506      	bpl.n	17400 <nrfx_gpiote_input_configure+0x28>
   173f2:	f7ff ff83 	bl	172fc <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   173f6:	b118      	cbz	r0, 17400 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   173f8:	484a      	ldr	r0, [pc, #296]	; (17524 <nrfx_gpiote_input_configure+0x14c>)
}
   173fa:	b004      	add	sp, #16
   173fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17400:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   17402:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17406:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1740a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1740e:	f10d 020f 	add.w	r2, sp, #15
   17412:	460b      	mov	r3, r1
   17414:	4620      	mov	r0, r4
   17416:	f10d 010e 	add.w	r1, sp, #14
   1741a:	f007 f859 	bl	1e4d0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1741e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   17422:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   17426:	f043 0301 	orr.w	r3, r3, #1
   1742a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   1742e:	b197      	cbz	r7, 17456 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17430:	4b3b      	ldr	r3, [pc, #236]	; (17520 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   17432:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   17434:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17436:	f104 0008 	add.w	r0, r4, #8
   1743a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   1743e:	078f      	lsls	r7, r1, #30
   17440:	d50c      	bpl.n	1745c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   17442:	2a00      	cmp	r2, #0
   17444:	d1d8      	bne.n	173f8 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   17446:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1744a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1744e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   17452:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   17456:	bbcd      	cbnz	r5, 174cc <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   17458:	4833      	ldr	r0, [pc, #204]	; (17528 <nrfx_gpiote_input_configure+0x150>)
   1745a:	e7ce      	b.n	173fa <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1745c:	f021 0120 	bic.w	r1, r1, #32
   17460:	04c9      	lsls	r1, r1, #19
   17462:	0cc9      	lsrs	r1, r1, #19
   17464:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   17468:	2a00      	cmp	r2, #0
   1746a:	d0ec      	beq.n	17446 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   1746c:	2e03      	cmp	r6, #3
   1746e:	d8c3      	bhi.n	173f8 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   17470:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   17472:	b92e      	cbnz	r6, 17480 <nrfx_gpiote_input_configure+0xa8>
   17474:	4a2d      	ldr	r2, [pc, #180]	; (1752c <nrfx_gpiote_input_configure+0x154>)
   17476:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1747a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1747e:	e7e2      	b.n	17446 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17480:	00ba      	lsls	r2, r7, #2
   17482:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17486:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1748a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1748e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   17492:	f02c 0c03 	bic.w	ip, ip, #3
   17496:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1749a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1749e:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   174a2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   174a6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   174aa:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   174ae:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   174b2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   174b6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   174ba:	ea4c 0c0e 	orr.w	ip, ip, lr
   174be:	f041 0120 	orr.w	r1, r1, #32
   174c2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   174c6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   174ca:	e7bc      	b.n	17446 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   174cc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   174d0:	4620      	mov	r0, r4
   174d2:	f7ff ff3b 	bl	1734c <release_handler>
    if (!handler)
   174d6:	2e00      	cmp	r6, #0
   174d8:	d0be      	beq.n	17458 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   174da:	4d11      	ldr	r5, [pc, #68]	; (17520 <nrfx_gpiote_input_configure+0x148>)
   174dc:	682b      	ldr	r3, [r5, #0]
   174de:	429e      	cmp	r6, r3
   174e0:	d104      	bne.n	174ec <nrfx_gpiote_input_configure+0x114>
   174e2:	686b      	ldr	r3, [r5, #4]
   174e4:	429f      	cmp	r7, r3
   174e6:	d101      	bne.n	174ec <nrfx_gpiote_input_configure+0x114>
   174e8:	2200      	movs	r2, #0
   174ea:	e00a      	b.n	17502 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   174ec:	4810      	ldr	r0, [pc, #64]	; (17530 <nrfx_gpiote_input_configure+0x158>)
   174ee:	f10d 010f 	add.w	r1, sp, #15
   174f2:	f7ff fe15 	bl	17120 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   174f6:	4b0c      	ldr	r3, [pc, #48]	; (17528 <nrfx_gpiote_input_configure+0x150>)
   174f8:	4298      	cmp	r0, r3
   174fa:	f47f af7e 	bne.w	173fa <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   174fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   17502:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   17506:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1750a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1750c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1750e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   17512:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   17516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1751a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1751e:	e79b      	b.n	17458 <nrfx_gpiote_input_configure+0x80>
   17520:	200007c4 	.word	0x200007c4
   17524:	0bad0004 	.word	0x0bad0004
   17528:	0bad0000 	.word	0x0bad0000
   1752c:	40006000 	.word	0x40006000
   17530:	20000838 	.word	0x20000838

00017534 <nrfx_gpiote_output_configure>:
{
   17534:	b5f0      	push	{r4, r5, r6, r7, lr}
   17536:	4604      	mov	r4, r0
   17538:	b085      	sub	sp, #20
   1753a:	4615      	mov	r5, r2
    if (p_config)
   1753c:	b319      	cbz	r1, 17586 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1753e:	4e33      	ldr	r6, [pc, #204]	; (1760c <nrfx_gpiote_output_configure+0xd8>)
   17540:	f100 0708 	add.w	r7, r0, #8
   17544:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   17548:	0793      	lsls	r3, r2, #30
   1754a:	d403      	bmi.n	17554 <nrfx_gpiote_output_configure+0x20>
   1754c:	f7ff fed6 	bl	172fc <pin_in_use_by_te>
   17550:	2800      	cmp	r0, #0
   17552:	d158      	bne.n	17606 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   17554:	f012 0f1c 	tst.w	r2, #28
   17558:	d002      	beq.n	17560 <nrfx_gpiote_output_configure+0x2c>
   1755a:	784b      	ldrb	r3, [r1, #1]
   1755c:	2b01      	cmp	r3, #1
   1755e:	d052      	beq.n	17606 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   17560:	2301      	movs	r3, #1
   17562:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   17566:	2300      	movs	r3, #0
   17568:	e9cd 1300 	strd	r1, r3, [sp]
   1756c:	1c4a      	adds	r2, r1, #1
   1756e:	1c8b      	adds	r3, r1, #2
   17570:	4620      	mov	r0, r4
   17572:	f10d 010f 	add.w	r1, sp, #15
   17576:	f006 ffab 	bl	1e4d0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1757a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1757e:	f043 0303 	orr.w	r3, r3, #3
   17582:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   17586:	b915      	cbnz	r5, 1758e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   17588:	4821      	ldr	r0, [pc, #132]	; (17610 <nrfx_gpiote_output_configure+0xdc>)
}
   1758a:	b005      	add	sp, #20
   1758c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1758e:	4e1f      	ldr	r6, [pc, #124]	; (1760c <nrfx_gpiote_output_configure+0xd8>)
   17590:	f104 0708 	add.w	r7, r4, #8
   17594:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   17598:	0783      	lsls	r3, r0, #30
   1759a:	d534      	bpl.n	17606 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1759c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   175a0:	4661      	mov	r1, ip
   175a2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   175a4:	f020 0020 	bic.w	r0, r0, #32
   175a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   175ac:	04c0      	lsls	r0, r0, #19
   175ae:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   175b2:	0cc0      	lsrs	r0, r0, #19
   175b4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   175b8:	2300      	movs	r3, #0
   175ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   175be:	786a      	ldrb	r2, [r5, #1]
   175c0:	2a00      	cmp	r2, #0
   175c2:	d0e1      	beq.n	17588 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   175c4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   175c8:	78ad      	ldrb	r5, [r5, #2]
   175ca:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   175ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   175d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   175d6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   175da:	0223      	lsls	r3, r4, #8
   175dc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   175e0:	0412      	lsls	r2, r2, #16
   175e2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   175e6:	ea43 030e 	orr.w	r3, r3, lr
   175ea:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   175ec:	052a      	lsls	r2, r5, #20
   175ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   175f2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   175f6:	4313      	orrs	r3, r2
   175f8:	f040 0020 	orr.w	r0, r0, #32
   175fc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   17600:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   17604:	e7c0      	b.n	17588 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   17606:	4803      	ldr	r0, [pc, #12]	; (17614 <nrfx_gpiote_output_configure+0xe0>)
   17608:	e7bf      	b.n	1758a <nrfx_gpiote_output_configure+0x56>
   1760a:	bf00      	nop
   1760c:	200007c4 	.word	0x200007c4
   17610:	0bad0000 	.word	0x0bad0000
   17614:	0bad0004 	.word	0x0bad0004

00017618 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   17618:	4b01      	ldr	r3, [pc, #4]	; (17620 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1761a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1761e:	4770      	bx	lr
   17620:	200007c4 	.word	0x200007c4

00017624 <nrfx_gpiote_channel_get>:
{
   17624:	b508      	push	{r3, lr}
   17626:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   17628:	f7ff fe68 	bl	172fc <pin_in_use_by_te>
   1762c:	b138      	cbz	r0, 1763e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1762e:	4b05      	ldr	r3, [pc, #20]	; (17644 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   17630:	4805      	ldr	r0, [pc, #20]	; (17648 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17632:	3208      	adds	r2, #8
   17634:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   17638:	0b5b      	lsrs	r3, r3, #13
   1763a:	700b      	strb	r3, [r1, #0]
}
   1763c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1763e:	4803      	ldr	r0, [pc, #12]	; (1764c <nrfx_gpiote_channel_get+0x28>)
   17640:	e7fc      	b.n	1763c <nrfx_gpiote_channel_get+0x18>
   17642:	bf00      	nop
   17644:	200007c4 	.word	0x200007c4
   17648:	0bad0000 	.word	0x0bad0000
   1764c:	0bad0004 	.word	0x0bad0004

00017650 <nrfx_gpiote_init>:
{
   17650:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17652:	4c0f      	ldr	r4, [pc, #60]	; (17690 <nrfx_gpiote_init+0x40>)
   17654:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   17658:	b9bd      	cbnz	r5, 1768a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1765a:	2260      	movs	r2, #96	; 0x60
   1765c:	4629      	mov	r1, r5
   1765e:	f104 0010 	add.w	r0, r4, #16
   17662:	f003 f901 	bl	1a868 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   17666:	2006      	movs	r0, #6
   17668:	f7eb fa64 	bl	2b34 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1766c:	4b09      	ldr	r3, [pc, #36]	; (17694 <nrfx_gpiote_init+0x44>)
    return err_code;
   1766e:	480a      	ldr	r0, [pc, #40]	; (17698 <nrfx_gpiote_init+0x48>)
   17670:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   17674:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   17678:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1767c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17680:	2301      	movs	r3, #1
   17682:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   17686:	6763      	str	r3, [r4, #116]	; 0x74
}
   17688:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1768a:	4804      	ldr	r0, [pc, #16]	; (1769c <nrfx_gpiote_init+0x4c>)
   1768c:	e7fc      	b.n	17688 <nrfx_gpiote_init+0x38>
   1768e:	bf00      	nop
   17690:	200007c4 	.word	0x200007c4
   17694:	40006000 	.word	0x40006000
   17698:	0bad0000 	.word	0x0bad0000
   1769c:	0bad0005 	.word	0x0bad0005

000176a0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   176a0:	4b03      	ldr	r3, [pc, #12]	; (176b0 <nrfx_gpiote_is_init+0x10>)
   176a2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   176a6:	3800      	subs	r0, #0
   176a8:	bf18      	it	ne
   176aa:	2001      	movne	r0, #1
   176ac:	4770      	bx	lr
   176ae:	bf00      	nop
   176b0:	200007c4 	.word	0x200007c4

000176b4 <nrfx_gpiote_channel_free>:
{
   176b4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   176b6:	4801      	ldr	r0, [pc, #4]	; (176bc <nrfx_gpiote_channel_free+0x8>)
   176b8:	f7ff bd58 	b.w	1716c <nrfx_flag32_free>
   176bc:	20000834 	.word	0x20000834

000176c0 <nrfx_gpiote_channel_alloc>:
{
   176c0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   176c2:	4801      	ldr	r0, [pc, #4]	; (176c8 <nrfx_gpiote_channel_alloc+0x8>)
   176c4:	f7ff bd2c 	b.w	17120 <nrfx_flag32_alloc>
   176c8:	20000834 	.word	0x20000834

000176cc <nrfx_gpiote_trigger_enable>:
{
   176cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   176ce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   176d0:	f7ff fe14 	bl	172fc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   176d4:	f104 0208 	add.w	r2, r4, #8
   176d8:	4b1e      	ldr	r3, [pc, #120]	; (17754 <nrfx_gpiote_trigger_enable+0x88>)
   176da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   176de:	b1e8      	cbz	r0, 1771c <nrfx_gpiote_trigger_enable+0x50>
   176e0:	f013 0502 	ands.w	r5, r3, #2
   176e4:	d11a      	bne.n	1771c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   176e6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   176e8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   176ea:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   176ee:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   176f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   176f6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   176fa:	6005      	str	r5, [r0, #0]
   176fc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   176fe:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17702:	f040 0001 	orr.w	r0, r0, #1
   17706:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1770a:	b129      	cbz	r1, 17718 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1770c:	2201      	movs	r2, #1
   1770e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   17712:	4a11      	ldr	r2, [pc, #68]	; (17758 <nrfx_gpiote_trigger_enable+0x8c>)
   17714:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17718:	b003      	add	sp, #12
   1771a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1771c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   17720:	2b04      	cmp	r3, #4
   17722:	d012      	beq.n	1774a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   17724:	2b05      	cmp	r3, #5
   17726:	d012      	beq.n	1774e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17728:	a801      	add	r0, sp, #4
   1772a:	9401      	str	r4, [sp, #4]
   1772c:	f7ff fdd8 	bl	172e0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17730:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   17732:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17736:	40d9      	lsrs	r1, r3
   17738:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1773c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1773e:	4620      	mov	r0, r4
}
   17740:	b003      	add	sp, #12
   17742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17746:	f006 bf0a 	b.w	1e55e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1774a:	2103      	movs	r1, #3
   1774c:	e7f7      	b.n	1773e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1774e:	2102      	movs	r1, #2
   17750:	e7f5      	b.n	1773e <nrfx_gpiote_trigger_enable+0x72>
   17752:	bf00      	nop
   17754:	200007c4 	.word	0x200007c4
   17758:	40006000 	.word	0x40006000

0001775c <nrfx_gpiote_trigger_disable>:
{
   1775c:	b508      	push	{r3, lr}
   1775e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17760:	f7ff fdcc 	bl	172fc <pin_in_use_by_te>
   17764:	b1c0      	cbz	r0, 17798 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17766:	f102 0108 	add.w	r1, r2, #8
   1776a:	4b0e      	ldr	r3, [pc, #56]	; (177a4 <nrfx_gpiote_trigger_disable+0x48>)
   1776c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17770:	0799      	lsls	r1, r3, #30
   17772:	d411      	bmi.n	17798 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17774:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   17776:	2201      	movs	r2, #1
   17778:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1777a:	009b      	lsls	r3, r3, #2
   1777c:	490a      	ldr	r1, [pc, #40]	; (177a8 <nrfx_gpiote_trigger_disable+0x4c>)
   1777e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17782:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   17786:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1778a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1778e:	f022 0203 	bic.w	r2, r2, #3
   17792:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   17796:	bd08      	pop	{r3, pc}
   17798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1779c:	2100      	movs	r1, #0
   1779e:	4610      	mov	r0, r2
   177a0:	f006 bedd 	b.w	1e55e <nrf_gpio_cfg_sense_set>
   177a4:	200007c4 	.word	0x200007c4
   177a8:	40006000 	.word	0x40006000

000177ac <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   177ac:	4b0e      	ldr	r3, [pc, #56]	; (177e8 <nrfx_gpiote_pin_uninit+0x3c>)
   177ae:	f100 0208 	add.w	r2, r0, #8
{
   177b2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   177b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   177b8:	07db      	lsls	r3, r3, #31
{
   177ba:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   177bc:	d511      	bpl.n	177e2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   177be:	f7ff ffcd 	bl	1775c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   177c2:	4620      	mov	r0, r4
   177c4:	f7ff fdec 	bl	173a0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   177c8:	a801      	add	r0, sp, #4
   177ca:	9401      	str	r4, [sp, #4]
   177cc:	f7ff fd88 	bl	172e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   177d0:	9b01      	ldr	r3, [sp, #4]
   177d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   177d6:	2202      	movs	r2, #2
   177d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   177dc:	4803      	ldr	r0, [pc, #12]	; (177ec <nrfx_gpiote_pin_uninit+0x40>)
}
   177de:	b002      	add	sp, #8
   177e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   177e2:	4803      	ldr	r0, [pc, #12]	; (177f0 <nrfx_gpiote_pin_uninit+0x44>)
   177e4:	e7fb      	b.n	177de <nrfx_gpiote_pin_uninit+0x32>
   177e6:	bf00      	nop
   177e8:	200007c4 	.word	0x200007c4
   177ec:	0bad0000 	.word	0x0bad0000
   177f0:	0bad0004 	.word	0x0bad0004

000177f4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   177f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177f8:	4b64      	ldr	r3, [pc, #400]	; (1798c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   177fa:	4865      	ldr	r0, [pc, #404]	; (17990 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   177fc:	4965      	ldr	r1, [pc, #404]	; (17994 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   177fe:	2600      	movs	r6, #0
{
   17800:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   17802:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17804:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17806:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   17808:	b135      	cbz	r5, 17818 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1780a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1780e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17810:	bf1e      	ittt	ne
   17812:	601c      	strne	r4, [r3, #0]
   17814:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   17816:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17818:	3304      	adds	r3, #4
   1781a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1781c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17820:	d1f1      	bne.n	17806 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17822:	f8df 816c 	ldr.w	r8, [pc, #364]	; 17990 <nrfx_gpiote_irq_handler+0x19c>
   17826:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1782a:	2b00      	cmp	r3, #0
   1782c:	f000 8091 	beq.w	17952 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   17830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17834:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   17838:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1783a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1783e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   17842:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   17844:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   17848:	2700      	movs	r7, #0
            while (latch[i])
   1784a:	f10d 0910 	add.w	r9, sp, #16
   1784e:	017b      	lsls	r3, r7, #5
   17850:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   17852:	f04f 0a01 	mov.w	sl, #1
   17856:	e049      	b.n	178ec <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   17858:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1785a:	4a4f      	ldr	r2, [pc, #316]	; (17998 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1785c:	fa94 f4a4 	rbit	r4, r4
   17860:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   17864:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17866:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1786a:	08e0      	lsrs	r0, r4, #3
   1786c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   17870:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   17872:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   17876:	fa0a fc02 	lsl.w	ip, sl, r2
   1787a:	f819 2000 	ldrb.w	r2, [r9, r0]
   1787e:	ea22 020c 	bic.w	r2, r2, ip
   17882:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17886:	a803      	add	r0, sp, #12
   17888:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1788c:	0899      	lsrs	r1, r3, #2
   1788e:	f7ff fd27 	bl	172e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17892:	9a03      	ldr	r2, [sp, #12]
   17894:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   17898:	074b      	lsls	r3, r1, #29
   1789a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1789e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   178a0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   178a4:	d529      	bpl.n	178fa <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   178a6:	4620      	mov	r0, r4
   178a8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   178aa:	b2d5      	uxtb	r5, r2
   178ac:	f7ff fd30 	bl	17310 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   178b0:	a803      	add	r0, sp, #12
   178b2:	9403      	str	r4, [sp, #12]
   178b4:	f7ff fd14 	bl	172e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   178b8:	9b03      	ldr	r3, [sp, #12]
   178ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   178be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   178c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   178c6:	429d      	cmp	r5, r3
   178c8:	d107      	bne.n	178da <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   178ca:	2100      	movs	r1, #0
   178cc:	4620      	mov	r0, r4
   178ce:	f006 fe46 	bl	1e55e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   178d2:	4629      	mov	r1, r5
   178d4:	4620      	mov	r0, r4
   178d6:	f006 fe42 	bl	1e55e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   178da:	a803      	add	r0, sp, #12
   178dc:	9403      	str	r4, [sp, #12]
   178de:	f7ff fcff 	bl	172e0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   178e2:	9b03      	ldr	r3, [sp, #12]
   178e4:	fa0a f303 	lsl.w	r3, sl, r3
   178e8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   178ec:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   178f0:	2c00      	cmp	r4, #0
   178f2:	d1b1      	bne.n	17858 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   178f4:	b9cf      	cbnz	r7, 1792a <nrfx_gpiote_irq_handler+0x136>
   178f6:	2701      	movs	r7, #1
   178f8:	e7a9      	b.n	1784e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   178fa:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   178fc:	bf0c      	ite	eq
   178fe:	2103      	moveq	r1, #3
   17900:	2102      	movne	r1, #2
   17902:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   17904:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17906:	f006 fe2a 	bl	1e55e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1790a:	2d03      	cmp	r5, #3
   1790c:	d004      	beq.n	17918 <nrfx_gpiote_irq_handler+0x124>
   1790e:	9a01      	ldr	r2, [sp, #4]
   17910:	2a02      	cmp	r2, #2
   17912:	d106      	bne.n	17922 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   17914:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   17916:	d1e0      	bne.n	178da <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   17918:	4659      	mov	r1, fp
   1791a:	4620      	mov	r0, r4
   1791c:	f7ff fcf8 	bl	17310 <call_handler>
   17920:	e7db      	b.n	178da <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   17922:	2a03      	cmp	r2, #3
   17924:	d1d9      	bne.n	178da <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   17926:	2d02      	cmp	r5, #2
   17928:	e7f5      	b.n	17916 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1792a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1792e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   17932:	491a      	ldr	r1, [pc, #104]	; (1799c <nrfx_gpiote_irq_handler+0x1a8>)
   17934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17938:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1793c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1793e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   17942:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   17946:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   17948:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1794c:	4313      	orrs	r3, r2
   1794e:	f47f af7b 	bne.w	17848 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   17952:	2401      	movs	r4, #1
    while (mask)
   17954:	b916      	cbnz	r6, 1795c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   17956:	b007      	add	sp, #28
   17958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1795c:	fa96 f3a6 	rbit	r3, r6
   17960:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   17964:	fa04 f203 	lsl.w	r2, r4, r3
   17968:	009b      	lsls	r3, r3, #2
   1796a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1796e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   17972:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17976:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1797a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1797e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   17982:	f3c1 4101 	ubfx	r1, r1, #16, #2
   17986:	f7ff fcc3 	bl	17310 <call_handler>
   1798a:	e7e3      	b.n	17954 <nrfx_gpiote_irq_handler+0x160>
   1798c:	40006100 	.word	0x40006100
   17990:	40006000 	.word	0x40006000
   17994:	40006120 	.word	0x40006120
   17998:	200007c4 	.word	0x200007c4
   1799c:	50000300 	.word	0x50000300

000179a0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   179a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   179a2:	4801      	ldr	r0, [pc, #4]	; (179a8 <nrfx_ppi_channel_alloc+0x8>)
   179a4:	f7ff bbbc 	b.w	17120 <nrfx_flag32_alloc>
   179a8:	20000840 	.word	0x20000840

000179ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   179ac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   179ae:	4c14      	ldr	r4, [pc, #80]	; (17a00 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   179b0:	4a14      	ldr	r2, [pc, #80]	; (17a04 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   179b2:	4915      	ldr	r1, [pc, #84]	; (17a08 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   179b4:	2303      	movs	r3, #3
   179b6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   179b8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   179ba:	4b14      	ldr	r3, [pc, #80]	; (17a0c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   179bc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   179be:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   179c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   179c4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   179c6:	2300      	movs	r3, #0
   179c8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   179ca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   179cc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   179ce:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   179d0:	4a0f      	ldr	r2, [pc, #60]	; (17a10 <_DoInit+0x64>)
   179d2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   179d4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   179d6:	2210      	movs	r2, #16
   179d8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   179da:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   179dc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   179de:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   179e0:	f002 ff00 	bl	1a7e4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   179e4:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   179e8:	490a      	ldr	r1, [pc, #40]	; (17a14 <_DoInit+0x68>)
   179ea:	4620      	mov	r0, r4
   179ec:	f002 fefa 	bl	1a7e4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   179f0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   179f4:	2320      	movs	r3, #32
   179f6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   179f8:	f3bf 8f5f 	dmb	sy
}
   179fc:	bd10      	pop	{r4, pc}
   179fe:	bf00      	nop
   17a00:	200027d4 	.word	0x200027d4
   17a04:	00020ed2 	.word	0x00020ed2
   17a08:	00020edb 	.word	0x00020edb
   17a0c:	200029b6 	.word	0x200029b6
   17a10:	200029a6 	.word	0x200029a6
   17a14:	00020edf 	.word	0x00020edf

00017a18 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17a18:	4b0e      	ldr	r3, [pc, #56]	; (17a54 <z_sys_init_run_level+0x3c>)
{
   17a1a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17a1c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17a20:	3001      	adds	r0, #1
   17a22:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17a26:	42a6      	cmp	r6, r4
   17a28:	d800      	bhi.n	17a2c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   17a2a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   17a2c:	e9d4 3500 	ldrd	r3, r5, [r4]
   17a30:	4628      	mov	r0, r5
   17a32:	4798      	blx	r3
		if (dev != NULL) {
   17a34:	b165      	cbz	r5, 17a50 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   17a36:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   17a38:	b130      	cbz	r0, 17a48 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   17a3a:	2800      	cmp	r0, #0
   17a3c:	bfb8      	it	lt
   17a3e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   17a40:	28ff      	cmp	r0, #255	; 0xff
   17a42:	bfa8      	it	ge
   17a44:	20ff      	movge	r0, #255	; 0xff
   17a46:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   17a48:	785a      	ldrb	r2, [r3, #1]
   17a4a:	f042 0201 	orr.w	r2, r2, #1
   17a4e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17a50:	3408      	adds	r4, #8
   17a52:	e7e8      	b.n	17a26 <z_sys_init_run_level+0xe>
   17a54:	000208f8 	.word	0x000208f8

00017a58 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   17a58:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   17a5a:	4605      	mov	r5, r0
   17a5c:	b910      	cbnz	r0, 17a64 <z_impl_device_get_binding+0xc>
		return NULL;
   17a5e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   17a60:	4620      	mov	r0, r4
   17a62:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   17a64:	7803      	ldrb	r3, [r0, #0]
   17a66:	2b00      	cmp	r3, #0
   17a68:	d0f9      	beq.n	17a5e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   17a6a:	4c0e      	ldr	r4, [pc, #56]	; (17aa4 <z_impl_device_get_binding+0x4c>)
   17a6c:	4e0e      	ldr	r6, [pc, #56]	; (17aa8 <z_impl_device_get_binding+0x50>)
   17a6e:	42b4      	cmp	r4, r6
   17a70:	d108      	bne.n	17a84 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   17a72:	4c0c      	ldr	r4, [pc, #48]	; (17aa4 <z_impl_device_get_binding+0x4c>)
   17a74:	42b4      	cmp	r4, r6
   17a76:	d0f2      	beq.n	17a5e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17a78:	4620      	mov	r0, r4
   17a7a:	f006 fd87 	bl	1e58c <z_device_is_ready>
   17a7e:	b950      	cbnz	r0, 17a96 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   17a80:	3418      	adds	r4, #24
   17a82:	e7f7      	b.n	17a74 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   17a84:	4620      	mov	r0, r4
   17a86:	f006 fd81 	bl	1e58c <z_device_is_ready>
   17a8a:	b110      	cbz	r0, 17a92 <z_impl_device_get_binding+0x3a>
   17a8c:	6823      	ldr	r3, [r4, #0]
   17a8e:	42ab      	cmp	r3, r5
   17a90:	d0e6      	beq.n	17a60 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   17a92:	3418      	adds	r4, #24
   17a94:	e7eb      	b.n	17a6e <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17a96:	6821      	ldr	r1, [r4, #0]
   17a98:	4628      	mov	r0, r5
   17a9a:	f002 febd 	bl	1a818 <strcmp>
   17a9e:	2800      	cmp	r0, #0
   17aa0:	d1ee      	bne.n	17a80 <z_impl_device_get_binding+0x28>
   17aa2:	e7dd      	b.n	17a60 <z_impl_device_get_binding+0x8>
   17aa4:	0001f0dc 	.word	0x0001f0dc
   17aa8:	0001f16c 	.word	0x0001f16c

00017aac <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   17aac:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   17aae:	4b0a      	ldr	r3, [pc, #40]	; (17ad8 <bg_thread_main+0x2c>)
   17ab0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17ab2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17ab4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17ab6:	f7ff ffaf 	bl	17a18 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17aba:	f001 f973 	bl	18da4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17abe:	2003      	movs	r0, #3
   17ac0:	f7ff ffaa 	bl	17a18 <z_sys_init_run_level>

	z_init_static_threads();
   17ac4:	f000 f97a 	bl	17dbc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   17ac8:	f7e9 ffc6 	bl	1a58 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17acc:	4a03      	ldr	r2, [pc, #12]	; (17adc <bg_thread_main+0x30>)
   17ace:	7b13      	ldrb	r3, [r2, #12]
   17ad0:	f023 0301 	bic.w	r3, r3, #1
   17ad4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17ad6:	bd08      	pop	{r3, pc}
   17ad8:	20002db6 	.word	0x20002db6
   17adc:	20001530 	.word	0x20001530

00017ae0 <z_bss_zero>:
{
   17ae0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   17ae2:	4803      	ldr	r0, [pc, #12]	; (17af0 <z_bss_zero+0x10>)
   17ae4:	4a03      	ldr	r2, [pc, #12]	; (17af4 <z_bss_zero+0x14>)
   17ae6:	2100      	movs	r1, #0
   17ae8:	1a12      	subs	r2, r2, r0
   17aea:	f006 fd80 	bl	1e5ee <z_early_memset>
}
   17aee:	bd08      	pop	{r3, pc}
   17af0:	20000c28 	.word	0x20000c28
   17af4:	20002db8 	.word	0x20002db8

00017af8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   17af8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   17afa:	2300      	movs	r3, #0
{
   17afc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   17afe:	2201      	movs	r2, #1
   17b00:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   17b04:	4e13      	ldr	r6, [pc, #76]	; (17b54 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17b06:	4d14      	ldr	r5, [pc, #80]	; (17b58 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   17b08:	9301      	str	r3, [sp, #4]
   17b0a:	220f      	movs	r2, #15
   17b0c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   17b10:	4912      	ldr	r1, [pc, #72]	; (17b5c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17b12:	2318      	movs	r3, #24
   17b14:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   17b18:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   17b1c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   17b1e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   17b22:	fb00 1104 	mla	r1, r0, r4, r1
   17b26:	4b0e      	ldr	r3, [pc, #56]	; (17b60 <z_init_cpu+0x68>)
   17b28:	9500      	str	r5, [sp, #0]
   17b2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17b2e:	4630      	mov	r0, r6
   17b30:	f000 f8e6 	bl	17d00 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17b34:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   17b36:	480b      	ldr	r0, [pc, #44]	; (17b64 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   17b38:	752c      	strb	r4, [r5, #20]
   17b3a:	f023 0304 	bic.w	r3, r3, #4
   17b3e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   17b40:	f44f 6304 	mov.w	r3, #2112	; 0x840
   17b44:	fb03 0404 	mla	r4, r3, r4, r0
   17b48:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   17b4a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   17b4c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   17b4e:	b006      	add	sp, #24
   17b50:	bd70      	pop	{r4, r5, r6, pc}
   17b52:	bf00      	nop
   17b54:	200014b0 	.word	0x200014b0
   17b58:	2000287c 	.word	0x2000287c
   17b5c:	20004040 	.word	0x20004040
   17b60:	00017e75 	.word	0x00017e75
   17b64:	200041c0 	.word	0x200041c0

00017b68 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   17b68:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   17b6a:	4b2d      	ldr	r3, [pc, #180]	; (17c20 <z_cstart+0xb8>)
   17b6c:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17b6e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   17b72:	4d2c      	ldr	r5, [pc, #176]	; (17c24 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   17b74:	4e2c      	ldr	r6, [pc, #176]	; (17c28 <z_cstart+0xc0>)
   17b76:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17b78:	4f2c      	ldr	r7, [pc, #176]	; (17c2c <z_cstart+0xc4>)
   17b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17b7e:	2400      	movs	r4, #0
   17b80:	616b      	str	r3, [r5, #20]
   17b82:	23e0      	movs	r3, #224	; 0xe0
   17b84:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17b88:	77ec      	strb	r4, [r5, #31]
   17b8a:	762c      	strb	r4, [r5, #24]
   17b8c:	766c      	strb	r4, [r5, #25]
   17b8e:	76ac      	strb	r4, [r5, #26]
   17b90:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17b94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17b96:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17b9a:	626b      	str	r3, [r5, #36]	; 0x24
   17b9c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17ba0:	f7eb fa00 	bl	2fa4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17ba4:	f7ea ffa8 	bl	2af8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17ba8:	f04f 33ff 	mov.w	r3, #4294967295
   17bac:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17bae:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   17bb0:	f7eb fada 	bl	3168 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   17bb4:	f7eb fa42 	bl	303c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   17bb8:	f240 1301 	movw	r3, #257	; 0x101
   17bbc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17bc0:	ab06      	add	r3, sp, #24
   17bc2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   17bc4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   17bc8:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   17bca:	f006 fcde 	bl	1e58a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17bce:	4620      	mov	r0, r4
   17bd0:	f7ff ff22 	bl	17a18 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17bd4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   17bd6:	4d16      	ldr	r5, [pc, #88]	; (17c30 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17bd8:	f7ff ff1e 	bl	17a18 <z_sys_init_run_level>
	z_sched_init();
   17bdc:	f000 fdc6 	bl	1876c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17be0:	4b14      	ldr	r3, [pc, #80]	; (17c34 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   17be2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17be4:	9305      	str	r3, [sp, #20]
   17be6:	2301      	movs	r3, #1
   17be8:	4913      	ldr	r1, [pc, #76]	; (17c38 <z_cstart+0xd0>)
   17bea:	9400      	str	r4, [sp, #0]
   17bec:	e9cd 4303 	strd	r4, r3, [sp, #12]
   17bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17bf4:	463b      	mov	r3, r7
   17bf6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17bfa:	4628      	mov	r0, r5
   17bfc:	f000 f880 	bl	17d00 <z_setup_new_thread>
   17c00:	7b6a      	ldrb	r2, [r5, #13]
   17c02:	4606      	mov	r6, r0
   17c04:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   17c08:	4628      	mov	r0, r5
   17c0a:	736a      	strb	r2, [r5, #13]
   17c0c:	f006 ffb8 	bl	1eb80 <z_ready_thread>
	z_init_cpu(0);
   17c10:	4620      	mov	r0, r4
   17c12:	f7ff ff71 	bl	17af8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17c16:	463a      	mov	r2, r7
   17c18:	4631      	mov	r1, r6
   17c1a:	4628      	mov	r0, r5
   17c1c:	f7eb f890 	bl	2d40 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17c20:	20004a00 	.word	0x20004a00
   17c24:	e000ed00 	.word	0xe000ed00
   17c28:	2000287c 	.word	0x2000287c
   17c2c:	00017aad 	.word	0x00017aad
   17c30:	20001530 	.word	0x20001530
   17c34:	00020ee6 	.word	0x00020ee6
   17c38:	20003c00 	.word	0x20003c00

00017c3c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   17c3c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17c3e:	4c06      	ldr	r4, [pc, #24]	; (17c58 <statics_init+0x1c>)
   17c40:	4d06      	ldr	r5, [pc, #24]	; (17c5c <statics_init+0x20>)
   17c42:	42ac      	cmp	r4, r5
   17c44:	d301      	bcc.n	17c4a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   17c46:	2000      	movs	r0, #0
   17c48:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17c4a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17c4e:	4620      	mov	r0, r4
   17c50:	f006 fcd1 	bl	1e5f6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17c54:	3414      	adds	r4, #20
   17c56:	e7f4      	b.n	17c42 <statics_init+0x6>
   17c58:	20000a78 	.word	0x20000a78
   17c5c:	20000a78 	.word	0x20000a78

00017c60 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   17c60:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17c62:	4b0e      	ldr	r3, [pc, #56]	; (17c9c <init_mem_slab_module+0x3c>)
   17c64:	4c0e      	ldr	r4, [pc, #56]	; (17ca0 <init_mem_slab_module+0x40>)
   17c66:	42a3      	cmp	r3, r4
   17c68:	d301      	bcc.n	17c6e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   17c6a:	2000      	movs	r0, #0
	return rc;
}
   17c6c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17c6e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   17c72:	ea41 0200 	orr.w	r2, r1, r0
   17c76:	f012 0203 	ands.w	r2, r2, #3
   17c7a:	d10b      	bne.n	17c94 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   17c7c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   17c7e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17c80:	42aa      	cmp	r2, r5
   17c82:	d101      	bne.n	17c88 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17c84:	331c      	adds	r3, #28
   17c86:	e7ee      	b.n	17c66 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   17c88:	695e      	ldr	r6, [r3, #20]
   17c8a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   17c8c:	3201      	adds	r2, #1
		slab->free_list = p;
   17c8e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   17c90:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   17c92:	e7f5      	b.n	17c80 <init_mem_slab_module+0x20>
	return rc;
   17c94:	f06f 0015 	mvn.w	r0, #21
   17c98:	e7e8      	b.n	17c6c <init_mem_slab_module+0xc>
   17c9a:	bf00      	nop
   17c9c:	20000a24 	.word	0x20000a24
   17ca0:	20000a78 	.word	0x20000a78

00017ca4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17ca6:	460c      	mov	r4, r1
	__asm__ volatile(
   17ca8:	f04f 0520 	mov.w	r5, #32
   17cac:	f3ef 8111 	mrs	r1, BASEPRI
   17cb0:	f385 8812 	msr	BASEPRI_MAX, r5
   17cb4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   17cb8:	6945      	ldr	r5, [r0, #20]
   17cba:	b15d      	cbz	r5, 17cd4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   17cbc:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   17cbe:	682b      	ldr	r3, [r5, #0]
   17cc0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17cc2:	6983      	ldr	r3, [r0, #24]
   17cc4:	3301      	adds	r3, #1
   17cc6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17cc8:	2000      	movs	r0, #0
	__asm__ volatile(
   17cca:	f381 8811 	msr	BASEPRI, r1
   17cce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   17cd2:	e011      	b.n	17cf8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17cd4:	ea52 0c03 	orrs.w	ip, r2, r3
   17cd8:	d103      	bne.n	17ce2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   17cda:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   17cdc:	f06f 000b 	mvn.w	r0, #11
   17ce0:	e7f3      	b.n	17cca <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17ce2:	e9cd 2300 	strd	r2, r3, [sp]
   17ce6:	4602      	mov	r2, r0
   17ce8:	3008      	adds	r0, #8
   17cea:	f000 fcdd 	bl	186a8 <z_pend_curr>
		if (result == 0) {
   17cee:	b918      	cbnz	r0, 17cf8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   17cf0:	4b02      	ldr	r3, [pc, #8]	; (17cfc <k_mem_slab_alloc+0x58>)
   17cf2:	689b      	ldr	r3, [r3, #8]
   17cf4:	695b      	ldr	r3, [r3, #20]
   17cf6:	6023      	str	r3, [r4, #0]
}
   17cf8:	b003      	add	sp, #12
   17cfa:	bd30      	pop	{r4, r5, pc}
   17cfc:	2000287c 	.word	0x2000287c

00017d00 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17d00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17d04:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   17d06:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   17d08:	2604      	movs	r6, #4
   17d0a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   17d0c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   17d0e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   17d10:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   17d14:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17d16:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17d18:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   17d1e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17d20:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   17d24:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   17d26:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   17d2a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   17d2e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   17d30:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   17d32:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17d34:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17d38:	9202      	str	r2, [sp, #8]
   17d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17d3c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   17d3e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17d42:	9200      	str	r2, [sp, #0]
   17d44:	4642      	mov	r2, r8
{
   17d46:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17d48:	f7ea ffc8 	bl	2cdc <arch_new_thread>
	if (!_current) {
   17d4c:	4b04      	ldr	r3, [pc, #16]	; (17d60 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   17d4e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   17d50:	689b      	ldr	r3, [r3, #8]
   17d52:	b103      	cbz	r3, 17d56 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   17d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   17d56:	6763      	str	r3, [r4, #116]	; 0x74
}
   17d58:	4640      	mov	r0, r8
   17d5a:	b004      	add	sp, #16
   17d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d60:	2000287c 	.word	0x2000287c

00017d64 <z_impl_k_thread_create>:
{
   17d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d66:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17d68:	2700      	movs	r7, #0
   17d6a:	9705      	str	r7, [sp, #20]
   17d6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   17d6e:	9704      	str	r7, [sp, #16]
   17d70:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   17d72:	9703      	str	r7, [sp, #12]
   17d74:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   17d76:	9702      	str	r7, [sp, #8]
{
   17d78:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17d7c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   17d7e:	9701      	str	r7, [sp, #4]
   17d80:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   17d82:	9700      	str	r7, [sp, #0]
{
   17d84:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17d86:	f7ff ffbb 	bl	17d00 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   17d8a:	f1b5 3fff 	cmp.w	r5, #4294967295
   17d8e:	bf08      	it	eq
   17d90:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17d94:	d005      	beq.n	17da2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17d96:	ea55 0306 	orrs.w	r3, r5, r6
   17d9a:	d105      	bne.n	17da8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   17d9c:	4620      	mov	r0, r4
   17d9e:	f000 fc27 	bl	185f0 <z_sched_start>
}
   17da2:	4620      	mov	r0, r4
   17da4:	b007      	add	sp, #28
   17da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17da8:	4903      	ldr	r1, [pc, #12]	; (17db8 <z_impl_k_thread_create+0x54>)
   17daa:	4632      	mov	r2, r6
   17dac:	462b      	mov	r3, r5
   17dae:	f104 0018 	add.w	r0, r4, #24
   17db2:	f000 fe65 	bl	18a80 <z_add_timeout>
   17db6:	e7f4      	b.n	17da2 <z_impl_k_thread_create+0x3e>
   17db8:	0001eba1 	.word	0x0001eba1

00017dbc <z_init_static_threads>:
{
   17dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17dc0:	4c29      	ldr	r4, [pc, #164]	; (17e68 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   17dc2:	4d2a      	ldr	r5, [pc, #168]	; (17e6c <z_init_static_threads+0xb0>)
{
   17dc4:	b087      	sub	sp, #28
   17dc6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   17dc8:	42ae      	cmp	r6, r5
   17dca:	f104 0430 	add.w	r4, r4, #48	; 0x30
   17dce:	d30f      	bcc.n	17df0 <z_init_static_threads+0x34>
	k_sched_lock();
   17dd0:	f000 fb28 	bl	18424 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17dd4:	4c24      	ldr	r4, [pc, #144]	; (17e68 <z_init_static_threads+0xac>)
   17dd6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 17e70 <z_init_static_threads+0xb4>
   17dda:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17dde:	f240 37e7 	movw	r7, #999	; 0x3e7
   17de2:	42ac      	cmp	r4, r5
   17de4:	d320      	bcc.n	17e28 <z_init_static_threads+0x6c>
}
   17de6:	b007      	add	sp, #28
   17de8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   17dec:	f000 bca2 	b.w	18734 <k_sched_unlock>
		z_setup_new_thread(
   17df0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17df4:	9305      	str	r3, [sp, #20]
   17df6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17dfa:	9304      	str	r3, [sp, #16]
   17dfc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17e00:	9303      	str	r3, [sp, #12]
   17e02:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17e06:	9302      	str	r3, [sp, #8]
   17e08:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   17e0c:	9301      	str	r3, [sp, #4]
   17e0e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   17e12:	9300      	str	r3, [sp, #0]
   17e14:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   17e18:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   17e1c:	f7ff ff70 	bl	17d00 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17e20:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17e24:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17e26:	e7ce      	b.n	17dc6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17e2a:	1c5a      	adds	r2, r3, #1
   17e2c:	d00d      	beq.n	17e4a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   17e2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17e32:	2100      	movs	r1, #0
   17e34:	4638      	mov	r0, r7
   17e36:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17e3a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   17e3e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17e42:	d104      	bne.n	17e4e <z_init_static_threads+0x92>
	z_sched_start(thread);
   17e44:	4640      	mov	r0, r8
   17e46:	f000 fbd3 	bl	185f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17e4a:	3430      	adds	r4, #48	; 0x30
   17e4c:	e7c9      	b.n	17de2 <z_init_static_threads+0x26>
   17e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17e52:	2300      	movs	r3, #0
   17e54:	f7e8 f954 	bl	100 <__aeabi_uldivmod>
   17e58:	4602      	mov	r2, r0
   17e5a:	460b      	mov	r3, r1
   17e5c:	f108 0018 	add.w	r0, r8, #24
   17e60:	4649      	mov	r1, r9
   17e62:	f000 fe0d 	bl	18a80 <z_add_timeout>
   17e66:	e7f0      	b.n	17e4a <z_init_static_threads+0x8e>
   17e68:	20000a24 	.word	0x20000a24
   17e6c:	20000a24 	.word	0x20000a24
   17e70:	0001eba1 	.word	0x0001eba1

00017e74 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   17e74:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   17e76:	4c0b      	ldr	r4, [pc, #44]	; (17ea4 <idle+0x30>)
	return !z_sys_post_kernel;
   17e78:	4d0b      	ldr	r5, [pc, #44]	; (17ea8 <idle+0x34>)
	__asm__ volatile(
   17e7a:	f04f 0220 	mov.w	r2, #32
   17e7e:	f3ef 8311 	mrs	r3, BASEPRI
   17e82:	f382 8812 	msr	BASEPRI_MAX, r2
   17e86:	f3bf 8f6f 	isb	sy
   17e8a:	f006 ff30 	bl	1ecee <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17e8e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   17e90:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17e92:	b913      	cbnz	r3, 17e9a <idle+0x26>
	arch_cpu_idle();
   17e94:	f7ea fe36 	bl	2b04 <arch_cpu_idle>
}
   17e98:	e7ef      	b.n	17e7a <idle+0x6>
   17e9a:	f7ea fc3d 	bl	2718 <pm_system_suspend>
   17e9e:	2800      	cmp	r0, #0
   17ea0:	d1eb      	bne.n	17e7a <idle+0x6>
   17ea2:	e7f7      	b.n	17e94 <idle+0x20>
   17ea4:	2000287c 	.word	0x2000287c
   17ea8:	20002db6 	.word	0x20002db6

00017eac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17eae:	4611      	mov	r1, r2
   17eb0:	f04f 0220 	mov.w	r2, #32
   17eb4:	f3ef 8511 	mrs	r5, BASEPRI
   17eb8:	f382 8812 	msr	BASEPRI_MAX, r2
   17ebc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   17ec0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17ec2:	b19c      	cbz	r4, 17eec <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17ec4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17ec6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17ec8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17ecc:	4294      	cmp	r4, r2
	list->head = node;
   17ece:	6003      	str	r3, [r0, #0]
	list->tail = node;
   17ed0:	bf08      	it	eq
   17ed2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17ed4:	2101      	movs	r1, #1
   17ed6:	4620      	mov	r0, r4
   17ed8:	f006 fc92 	bl	1e800 <z_queue_node_peek>
   17edc:	4604      	mov	r4, r0
	__asm__ volatile(
   17ede:	f385 8811 	msr	BASEPRI, r5
   17ee2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17ee6:	4620      	mov	r0, r4
   17ee8:	b003      	add	sp, #12
   17eea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17eec:	ea51 0203 	orrs.w	r2, r1, r3
   17ef0:	d0f5      	beq.n	17ede <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17ef2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17ef6:	e9cd 1300 	strd	r1, r3, [sp]
   17efa:	4610      	mov	r0, r2
   17efc:	4629      	mov	r1, r5
   17efe:	f000 fbd3 	bl	186a8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17f02:	2800      	cmp	r0, #0
   17f04:	d1ef      	bne.n	17ee6 <z_impl_k_queue_get+0x3a>
   17f06:	4b02      	ldr	r3, [pc, #8]	; (17f10 <z_impl_k_queue_get+0x64>)
   17f08:	689b      	ldr	r3, [r3, #8]
   17f0a:	695c      	ldr	r4, [r3, #20]
   17f0c:	e7eb      	b.n	17ee6 <z_impl_k_queue_get+0x3a>
   17f0e:	bf00      	nop
   17f10:	2000287c 	.word	0x2000287c

00017f14 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17f14:	b538      	push	{r3, r4, r5, lr}
   17f16:	4604      	mov	r4, r0
	__asm__ volatile(
   17f18:	f04f 0320 	mov.w	r3, #32
   17f1c:	f3ef 8511 	mrs	r5, BASEPRI
   17f20:	f383 8812 	msr	BASEPRI_MAX, r3
   17f24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17f28:	f006 fe86 	bl	1ec38 <z_unpend_first_thread>

	if (thread != NULL) {
   17f2c:	b148      	cbz	r0, 17f42 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17f2e:	2200      	movs	r2, #0
   17f30:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17f32:	f006 fe25 	bl	1eb80 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17f36:	4629      	mov	r1, r5
   17f38:	4808      	ldr	r0, [pc, #32]	; (17f5c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   17f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   17f3e:	f000 ba5f 	b.w	18400 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17f42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   17f46:	429a      	cmp	r2, r3
   17f48:	bf18      	it	ne
   17f4a:	3301      	addne	r3, #1
   17f4c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17f4e:	2102      	movs	r1, #2
   17f50:	f104 0010 	add.w	r0, r4, #16
   17f54:	f007 f866 	bl	1f024 <z_handle_obj_poll_events>
}
   17f58:	e7ed      	b.n	17f36 <z_impl_k_sem_give+0x22>
   17f5a:	bf00      	nop
   17f5c:	20002db7 	.word	0x20002db7

00017f60 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17f60:	b513      	push	{r0, r1, r4, lr}
   17f62:	f04f 0420 	mov.w	r4, #32
   17f66:	f3ef 8111 	mrs	r1, BASEPRI
   17f6a:	f384 8812 	msr	BASEPRI_MAX, r4
   17f6e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   17f72:	6884      	ldr	r4, [r0, #8]
   17f74:	b144      	cbz	r4, 17f88 <z_impl_k_sem_take+0x28>
		sem->count--;
   17f76:	3c01      	subs	r4, #1
   17f78:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   17f7a:	f381 8811 	msr	BASEPRI, r1
   17f7e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   17f82:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17f84:	b002      	add	sp, #8
   17f86:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17f88:	ea52 0403 	orrs.w	r4, r2, r3
   17f8c:	d106      	bne.n	17f9c <z_impl_k_sem_take+0x3c>
   17f8e:	f381 8811 	msr	BASEPRI, r1
   17f92:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17f96:	f06f 000f 	mvn.w	r0, #15
   17f9a:	e7f3      	b.n	17f84 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17f9c:	e9cd 2300 	strd	r2, r3, [sp]
   17fa0:	4602      	mov	r2, r0
   17fa2:	4802      	ldr	r0, [pc, #8]	; (17fac <z_impl_k_sem_take+0x4c>)
   17fa4:	f000 fb80 	bl	186a8 <z_pend_curr>
	return ret;
   17fa8:	e7ec      	b.n	17f84 <z_impl_k_sem_take+0x24>
   17faa:	bf00      	nop
   17fac:	20002db7 	.word	0x20002db7

00017fb0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   17fb0:	b570      	push	{r4, r5, r6, lr}
   17fb2:	4604      	mov	r4, r0
	__asm__ volatile(
   17fb4:	f04f 0320 	mov.w	r3, #32
   17fb8:	f3ef 8511 	mrs	r5, BASEPRI
   17fbc:	f383 8812 	msr	BASEPRI_MAX, r3
   17fc0:	f3bf 8f6f 	isb	sy
   17fc4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   17fc8:	4620      	mov	r0, r4
   17fca:	f006 fe35 	bl	1ec38 <z_unpend_first_thread>
		if (thread == NULL) {
   17fce:	b118      	cbz	r0, 17fd8 <z_impl_k_sem_reset+0x28>
   17fd0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   17fd2:	f006 fdd5 	bl	1eb80 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   17fd6:	e7f7      	b.n	17fc8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   17fd8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17fda:	2102      	movs	r1, #2
   17fdc:	f104 0010 	add.w	r0, r4, #16
   17fe0:	f007 f820 	bl	1f024 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   17fe4:	4629      	mov	r1, r5
   17fe6:	4802      	ldr	r0, [pc, #8]	; (17ff0 <z_impl_k_sem_reset+0x40>)
}
   17fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   17fec:	f000 ba08 	b.w	18400 <z_reschedule>
   17ff0:	20002db7 	.word	0x20002db7

00017ff4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   17ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17ff6:	4b09      	ldr	r3, [pc, #36]	; (1801c <k_sys_work_q_init+0x28>)
   17ff8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17ffa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   17ffc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   17ffe:	9300      	str	r3, [sp, #0]
   18000:	4907      	ldr	r1, [pc, #28]	; (18020 <k_sys_work_q_init+0x2c>)
   18002:	4808      	ldr	r0, [pc, #32]	; (18024 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   18004:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18008:	f04f 33ff 	mov.w	r3, #4294967295
   1800c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18010:	f000 f914 	bl	1823c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   18014:	4620      	mov	r0, r4
   18016:	b004      	add	sp, #16
   18018:	bd10      	pop	{r4, pc}
   1801a:	bf00      	nop
   1801c:	00020eeb 	.word	0x00020eeb
   18020:	20004a00 	.word	0x20004a00
   18024:	200015b0 	.word	0x200015b0

00018028 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1802c:	4e47      	ldr	r6, [pc, #284]	; (1814c <work_queue_main+0x124>)
   1802e:	b085      	sub	sp, #20
   18030:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   18032:	f04f 38ff 	mov.w	r8, #4294967295
   18036:	f04f 39ff 	mov.w	r9, #4294967295
   1803a:	f04f 0320 	mov.w	r3, #32
   1803e:	f3ef 8711 	mrs	r7, BASEPRI
   18042:	f383 8812 	msr	BASEPRI_MAX, r3
   18046:	f3bf 8f6f 	isb	sy
   1804a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1804e:	b98d      	cbnz	r5, 18074 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   18050:	2102      	movs	r1, #2
   18052:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18056:	f006 fc4c 	bl	1e8f2 <flag_test_and_clear>
   1805a:	2800      	cmp	r0, #0
   1805c:	d135      	bne.n	180ca <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1805e:	2300      	movs	r3, #0
   18060:	e9cd 8900 	strd	r8, r9, [sp]
   18064:	9302      	str	r3, [sp, #8]
   18066:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1806a:	4639      	mov	r1, r7
   1806c:	4838      	ldr	r0, [pc, #224]	; (18150 <work_queue_main+0x128>)
   1806e:	f000 fc91 	bl	18994 <z_sched_wait>
			continue;
   18072:	e7e2      	b.n	1803a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18074:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   18078:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1807a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1807e:	4295      	cmp	r5, r2
   18080:	d101      	bne.n	18086 <work_queue_main+0x5e>
	list->tail = node;
   18082:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   18086:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1808a:	f043 0302 	orr.w	r3, r3, #2
   1808e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   18092:	68eb      	ldr	r3, [r5, #12]
   18094:	f023 0304 	bic.w	r3, r3, #4
   18098:	f043 0301 	orr.w	r3, r3, #1
   1809c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1809e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   180a0:	f387 8811 	msr	BASEPRI, r7
   180a4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   180a8:	4628      	mov	r0, r5
   180aa:	4798      	blx	r3
	__asm__ volatile(
   180ac:	f04f 0320 	mov.w	r3, #32
   180b0:	f3ef 8b11 	mrs	fp, BASEPRI
   180b4:	f383 8812 	msr	BASEPRI_MAX, r3
   180b8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   180bc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180be:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   180c0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180c4:	d40b      	bmi.n	180de <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   180c6:	60ea      	str	r2, [r5, #12]
   180c8:	e00e      	b.n	180e8 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   180ca:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   180ce:	2200      	movs	r2, #0
   180d0:	2101      	movs	r1, #1
   180d2:	4628      	mov	r0, r5
   180d4:	f006 fdd8 	bl	1ec88 <z_sched_wake>
   180d8:	2800      	cmp	r0, #0
   180da:	d1f8      	bne.n	180ce <work_queue_main+0xa6>
   180dc:	e7bf      	b.n	1805e <work_queue_main+0x36>
	return list->head;
   180de:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   180e0:	f023 0303 	bic.w	r3, r3, #3
   180e4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   180e6:	b970      	cbnz	r0, 18106 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   180e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   180ec:	f023 0302 	bic.w	r3, r3, #2
   180f0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   180f4:	f38b 8811 	msr	BASEPRI, fp
   180f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   180fc:	05d8      	lsls	r0, r3, #23
   180fe:	d49c      	bmi.n	1803a <work_queue_main+0x12>
	z_impl_k_yield();
   18100:	f000 fb40 	bl	18784 <z_impl_k_yield>
}
   18104:	e799      	b.n	1803a <work_queue_main+0x12>
	return node->next;
   18106:	2700      	movs	r7, #0
   18108:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1810c:	463b      	mov	r3, r7
		if (wc->work == work) {
   1810e:	6842      	ldr	r2, [r0, #4]
   18110:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   18112:	4601      	mov	r1, r0
		if (wc->work == work) {
   18114:	d10c      	bne.n	18130 <work_queue_main+0x108>
	return node->next;
   18116:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   18118:	b997      	cbnz	r7, 18140 <work_queue_main+0x118>
   1811a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1811c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1811e:	4282      	cmp	r2, r0
   18120:	d100      	bne.n	18124 <work_queue_main+0xfc>
	list->tail = node;
   18122:	6071      	str	r1, [r6, #4]
	parent->next = child;
   18124:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18128:	f7ff fef4 	bl	17f14 <z_impl_k_sem_give>
}
   1812c:	4639      	mov	r1, r7
   1812e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18130:	f1ba 0f00 	cmp.w	sl, #0
   18134:	d0d8      	beq.n	180e8 <work_queue_main+0xc0>
	return node->next;
   18136:	4650      	mov	r0, sl
   18138:	460f      	mov	r7, r1
   1813a:	f8da a000 	ldr.w	sl, [sl]
   1813e:	e7e6      	b.n	1810e <work_queue_main+0xe6>
	return list->tail;
   18140:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   18142:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   18144:	4290      	cmp	r0, r2
	list->tail = node;
   18146:	bf08      	it	eq
   18148:	6077      	streq	r7, [r6, #4]
}
   1814a:	e7eb      	b.n	18124 <work_queue_main+0xfc>
   1814c:	200028a4 	.word	0x200028a4
   18150:	20002db7 	.word	0x20002db7

00018154 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   18154:	68c3      	ldr	r3, [r0, #12]
{
   18156:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   18158:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1815c:	079b      	lsls	r3, r3, #30
{
   1815e:	4605      	mov	r5, r0
   18160:	460c      	mov	r4, r1
	if (ret) {
   18162:	d50d      	bpl.n	18180 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18164:	2201      	movs	r2, #1
   18166:	2100      	movs	r1, #0
   18168:	f104 0008 	add.w	r0, r4, #8
   1816c:	f006 fbb1 	bl	1e8d2 <z_impl_k_sem_init>
	parent->next = child;
   18170:	2300      	movs	r3, #0
   18172:	6023      	str	r3, [r4, #0]
	return list->tail;
   18174:	4b05      	ldr	r3, [pc, #20]	; (1818c <cancel_sync_locked+0x38>)
	canceler->work = work;
   18176:	6065      	str	r5, [r4, #4]
   18178:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1817a:	b91a      	cbnz	r2, 18184 <cancel_sync_locked+0x30>
	list->head = node;
   1817c:	e9c3 4400 	strd	r4, r4, [r3]
}
   18180:	4630      	mov	r0, r6
   18182:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   18184:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18186:	605c      	str	r4, [r3, #4]
}
   18188:	e7fa      	b.n	18180 <cancel_sync_locked+0x2c>
   1818a:	bf00      	nop
   1818c:	200028a4 	.word	0x200028a4

00018190 <submit_to_queue_locked>:
{
   18190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   18192:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18194:	079a      	lsls	r2, r3, #30
{
   18196:	4604      	mov	r4, r0
   18198:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1819a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1819e:	d41f      	bmi.n	181e0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   181a0:	075f      	lsls	r7, r3, #29
   181a2:	d41f      	bmi.n	181e4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   181a4:	680a      	ldr	r2, [r1, #0]
   181a6:	b90a      	cbnz	r2, 181ac <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   181a8:	6882      	ldr	r2, [r0, #8]
   181aa:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   181ac:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   181ae:	bf44      	itt	mi
   181b0:	68a3      	ldrmi	r3, [r4, #8]
   181b2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   181b4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   181b6:	bf4c      	ite	mi
   181b8:	2502      	movmi	r5, #2
		ret = 1;
   181ba:	2501      	movpl	r5, #1
	if (queue == NULL) {
   181bc:	b37f      	cbz	r7, 1821e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   181be:	4b1b      	ldr	r3, [pc, #108]	; (1822c <submit_to_queue_locked+0x9c>)
   181c0:	689b      	ldr	r3, [r3, #8]
   181c2:	42bb      	cmp	r3, r7
   181c4:	d111      	bne.n	181ea <submit_to_queue_locked+0x5a>
   181c6:	f006 faa5 	bl	1e714 <k_is_in_isr>
   181ca:	f080 0001 	eor.w	r0, r0, #1
   181ce:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   181d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   181d4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   181d6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   181da:	d523      	bpl.n	18224 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   181dc:	b13a      	cbz	r2, 181ee <submit_to_queue_locked+0x5e>
   181de:	b940      	cbnz	r0, 181f2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   181e0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   181e4:	2300      	movs	r3, #0
   181e6:	6033      	str	r3, [r6, #0]
	return ret;
   181e8:	e013      	b.n	18212 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   181ea:	2000      	movs	r0, #0
   181ec:	e7f0      	b.n	181d0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   181ee:	071b      	lsls	r3, r3, #28
   181f0:	d4f6      	bmi.n	181e0 <submit_to_queue_locked+0x50>
	parent->next = child;
   181f2:	2300      	movs	r3, #0
   181f4:	6023      	str	r3, [r4, #0]
	return list->tail;
   181f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   181fa:	b963      	cbnz	r3, 18216 <submit_to_queue_locked+0x86>
	list->head = node;
   181fc:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   18200:	4638      	mov	r0, r7
   18202:	f006 fb8f 	bl	1e924 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18206:	68e3      	ldr	r3, [r4, #12]
   18208:	f043 0304 	orr.w	r3, r3, #4
   1820c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1820e:	6833      	ldr	r3, [r6, #0]
   18210:	60a3      	str	r3, [r4, #8]
}
   18212:	4628      	mov	r0, r5
   18214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18216:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18218:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1821c:	e7f0      	b.n	18200 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1821e:	f06f 0515 	mvn.w	r5, #21
   18222:	e7df      	b.n	181e4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   18224:	f06f 0512 	mvn.w	r5, #18
   18228:	e7dc      	b.n	181e4 <submit_to_queue_locked+0x54>
   1822a:	bf00      	nop
   1822c:	2000287c 	.word	0x2000287c

00018230 <k_work_submit>:
{
   18230:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   18232:	4801      	ldr	r0, [pc, #4]	; (18238 <k_work_submit+0x8>)
   18234:	f006 bbfa 	b.w	1ea2c <k_work_submit_to_queue>
   18238:	200015b0 	.word	0x200015b0

0001823c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1823c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1823e:	b089      	sub	sp, #36	; 0x24
   18240:	4604      	mov	r4, r0
	list->head = NULL;
   18242:	2000      	movs	r0, #0
	list->tail = NULL;
   18244:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   18248:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1824a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1824e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18252:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18256:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1825a:	b31d      	cbz	r5, 182a4 <k_work_queue_start+0x68>
   1825c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1825e:	2800      	cmp	r0, #0
   18260:	f240 1001 	movw	r0, #257	; 0x101
   18264:	bf08      	it	eq
   18266:	2001      	moveq	r0, #1
	*flagp = flags;
   18268:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1826c:	2000      	movs	r0, #0
   1826e:	f04f 36ff 	mov.w	r6, #4294967295
   18272:	f04f 37ff 	mov.w	r7, #4294967295
   18276:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1827a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1827e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18282:	4b09      	ldr	r3, [pc, #36]	; (182a8 <k_work_queue_start+0x6c>)
   18284:	9400      	str	r4, [sp, #0]
   18286:	4620      	mov	r0, r4
   18288:	f7ff fd6c 	bl	17d64 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1828c:	b125      	cbz	r5, 18298 <k_work_queue_start+0x5c>
   1828e:	6829      	ldr	r1, [r5, #0]
   18290:	b111      	cbz	r1, 18298 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   18292:	4620      	mov	r0, r4
   18294:	f006 fa44 	bl	1e720 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18298:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1829a:	b009      	add	sp, #36	; 0x24
   1829c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   182a0:	f006 ba41 	b.w	1e726 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   182a4:	2001      	movs	r0, #1
   182a6:	e7df      	b.n	18268 <k_work_queue_start+0x2c>
   182a8:	00018029 	.word	0x00018029

000182ac <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   182ac:	b513      	push	{r0, r1, r4, lr}
   182ae:	9001      	str	r0, [sp, #4]
   182b0:	4608      	mov	r0, r1
	__asm__ volatile(
   182b2:	f04f 0120 	mov.w	r1, #32
   182b6:	f3ef 8411 	mrs	r4, BASEPRI
   182ba:	f381 8812 	msr	BASEPRI_MAX, r1
   182be:	f3bf 8f6f 	isb	sy
	return *flagp;
   182c2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   182c4:	f011 0f0e 	tst.w	r1, #14
   182c8:	d116      	bne.n	182f8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   182ca:	ea53 0c02 	orrs.w	ip, r3, r2
   182ce:	d108      	bne.n	182e2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   182d0:	a901      	add	r1, sp, #4
   182d2:	f7ff ff5d 	bl	18190 <submit_to_queue_locked>
	__asm__ volatile(
   182d6:	f384 8811 	msr	BASEPRI, r4
   182da:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   182de:	b002      	add	sp, #8
   182e0:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   182e2:	f041 0108 	orr.w	r1, r1, #8
   182e6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   182e8:	9901      	ldr	r1, [sp, #4]
   182ea:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   182ec:	3010      	adds	r0, #16
   182ee:	4903      	ldr	r1, [pc, #12]	; (182fc <k_work_schedule_for_queue+0x50>)
   182f0:	f000 fbc6 	bl	18a80 <z_add_timeout>
	return ret;
   182f4:	2001      	movs	r0, #1
   182f6:	e7ee      	b.n	182d6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   182f8:	2000      	movs	r0, #0
   182fa:	e7ec      	b.n	182d6 <k_work_schedule_for_queue+0x2a>
   182fc:	0001e995 	.word	0x0001e995

00018300 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   18300:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   18302:	4801      	ldr	r0, [pc, #4]	; (18308 <k_work_schedule+0x8>)
   18304:	f7ff bfd2 	b.w	182ac <k_work_schedule_for_queue>
   18308:	200015b0 	.word	0x200015b0

0001830c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1830c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1830e:	460c      	mov	r4, r1
   18310:	9001      	str	r0, [sp, #4]
   18312:	4616      	mov	r6, r2
   18314:	461d      	mov	r5, r3
	__asm__ volatile(
   18316:	f04f 0320 	mov.w	r3, #32
   1831a:	f3ef 8711 	mrs	r7, BASEPRI
   1831e:	f383 8812 	msr	BASEPRI_MAX, r3
   18322:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   18326:	4608      	mov	r0, r1
   18328:	f006 faee 	bl	1e908 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1832c:	ea55 0306 	orrs.w	r3, r5, r6
   18330:	d109      	bne.n	18346 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   18332:	a901      	add	r1, sp, #4
   18334:	4620      	mov	r0, r4
   18336:	f7ff ff2b 	bl	18190 <submit_to_queue_locked>
	__asm__ volatile(
   1833a:	f387 8811 	msr	BASEPRI, r7
   1833e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   18342:	b003      	add	sp, #12
   18344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   18346:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18348:	4906      	ldr	r1, [pc, #24]	; (18364 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1834a:	f043 0308 	orr.w	r3, r3, #8
   1834e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   18350:	9b01      	ldr	r3, [sp, #4]
   18352:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18354:	f104 0010 	add.w	r0, r4, #16
   18358:	4632      	mov	r2, r6
   1835a:	462b      	mov	r3, r5
   1835c:	f000 fb90 	bl	18a80 <z_add_timeout>
	return ret;
   18360:	2001      	movs	r0, #1
   18362:	e7ea      	b.n	1833a <k_work_reschedule_for_queue+0x2e>
   18364:	0001e995 	.word	0x0001e995

00018368 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   18368:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1836a:	4801      	ldr	r0, [pc, #4]	; (18370 <k_work_reschedule+0x8>)
   1836c:	f7ff bfce 	b.w	1830c <k_work_reschedule_for_queue>
   18370:	200015b0 	.word	0x200015b0

00018374 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   18374:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   18376:	4d07      	ldr	r5, [pc, #28]	; (18394 <z_reset_time_slice+0x20>)
   18378:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1837a:	b154      	cbz	r4, 18392 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1837c:	f7fe fd80 	bl	16e80 <sys_clock_elapsed>
   18380:	4b05      	ldr	r3, [pc, #20]	; (18398 <z_reset_time_slice+0x24>)
   18382:	4404      	add	r4, r0
   18384:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   18386:	6828      	ldr	r0, [r5, #0]
   18388:	2100      	movs	r1, #0
	}
}
   1838a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1838e:	f006 bcbe 	b.w	1ed0e <z_set_timeout_expiry>
}
   18392:	bd38      	pop	{r3, r4, r5, pc}
   18394:	200028b4 	.word	0x200028b4
   18398:	2000287c 	.word	0x2000287c

0001839c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1839e:	4604      	mov	r4, r0
   183a0:	460d      	mov	r5, r1
	__asm__ volatile(
   183a2:	f04f 0320 	mov.w	r3, #32
   183a6:	f3ef 8711 	mrs	r7, BASEPRI
   183aa:	f383 8812 	msr	BASEPRI_MAX, r3
   183ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   183b2:	4e10      	ldr	r6, [pc, #64]	; (183f4 <k_sched_time_slice_set+0x58>)
   183b4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   183b6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   183ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   183be:	6131      	str	r1, [r6, #16]
   183c0:	2300      	movs	r3, #0
   183c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   183c6:	fbe4 010c 	umlal	r0, r1, r4, ip
   183ca:	f7e7 fe99 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   183ce:	2c00      	cmp	r4, #0
   183d0:	4b09      	ldr	r3, [pc, #36]	; (183f8 <k_sched_time_slice_set+0x5c>)
   183d2:	dc0a      	bgt.n	183ea <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   183d4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   183d6:	4b09      	ldr	r3, [pc, #36]	; (183fc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   183d8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   183da:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   183dc:	f7ff ffca 	bl	18374 <z_reset_time_slice>
	__asm__ volatile(
   183e0:	f387 8811 	msr	BASEPRI, r7
   183e4:	f3bf 8f6f 	isb	sy
	}
}
   183e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   183ea:	2802      	cmp	r0, #2
   183ec:	bfb8      	it	lt
   183ee:	2002      	movlt	r0, #2
   183f0:	e7f0      	b.n	183d4 <k_sched_time_slice_set+0x38>
   183f2:	bf00      	nop
   183f4:	2000287c 	.word	0x2000287c
   183f8:	200028b4 	.word	0x200028b4
   183fc:	200028b0 	.word	0x200028b0

00018400 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18400:	b949      	cbnz	r1, 18416 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18402:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   18406:	b930      	cbnz	r0, 18416 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   18408:	4b05      	ldr	r3, [pc, #20]	; (18420 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1840a:	69da      	ldr	r2, [r3, #28]
   1840c:	689b      	ldr	r3, [r3, #8]
   1840e:	429a      	cmp	r2, r3
   18410:	d001      	beq.n	18416 <z_reschedule+0x16>
	ret = arch_swap(key);
   18412:	f7ea bc0f 	b.w	2c34 <arch_swap>
   18416:	f381 8811 	msr	BASEPRI, r1
   1841a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   1841e:	4770      	bx	lr
   18420:	2000287c 	.word	0x2000287c

00018424 <k_sched_lock>:
	__asm__ volatile(
   18424:	f04f 0320 	mov.w	r3, #32
   18428:	f3ef 8111 	mrs	r1, BASEPRI
   1842c:	f383 8812 	msr	BASEPRI_MAX, r3
   18430:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18434:	4b04      	ldr	r3, [pc, #16]	; (18448 <k_sched_lock+0x24>)
   18436:	689a      	ldr	r2, [r3, #8]
   18438:	7bd3      	ldrb	r3, [r2, #15]
   1843a:	3b01      	subs	r3, #1
   1843c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1843e:	f381 8811 	msr	BASEPRI, r1
   18442:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   18446:	4770      	bx	lr
   18448:	2000287c 	.word	0x2000287c

0001844c <update_cache>:
{
   1844c:	b538      	push	{r3, r4, r5, lr}
   1844e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   18450:	480c      	ldr	r0, [pc, #48]	; (18484 <update_cache+0x38>)
   18452:	4d0d      	ldr	r5, [pc, #52]	; (18488 <update_cache+0x3c>)
   18454:	f006 fb8e 	bl	1eb74 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   18458:	4604      	mov	r4, r0
   1845a:	b900      	cbnz	r0, 1845e <update_cache+0x12>
   1845c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1845e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   18460:	b94a      	cbnz	r2, 18476 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   18462:	7b5a      	ldrb	r2, [r3, #13]
   18464:	06d2      	lsls	r2, r2, #27
   18466:	d106      	bne.n	18476 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18468:	69a2      	ldr	r2, [r4, #24]
   1846a:	b922      	cbnz	r2, 18476 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1846c:	89da      	ldrh	r2, [r3, #14]
   1846e:	2a7f      	cmp	r2, #127	; 0x7f
   18470:	d901      	bls.n	18476 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   18472:	61eb      	str	r3, [r5, #28]
}
   18474:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   18476:	429c      	cmp	r4, r3
   18478:	d002      	beq.n	18480 <update_cache+0x34>
			z_reset_time_slice(thread);
   1847a:	4620      	mov	r0, r4
   1847c:	f7ff ff7a 	bl	18374 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18480:	61ec      	str	r4, [r5, #28]
}
   18482:	e7f7      	b.n	18474 <update_cache+0x28>
   18484:	2000289c 	.word	0x2000289c
   18488:	2000287c 	.word	0x2000287c

0001848c <move_thread_to_end_of_prio_q>:
{
   1848c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1848e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18492:	7b43      	ldrb	r3, [r0, #13]
   18494:	2a00      	cmp	r2, #0
{
   18496:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18498:	da04      	bge.n	184a4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1849a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1849e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   184a0:	f006 fb23 	bl	1eaea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   184a4:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   184a6:	4a15      	ldr	r2, [pc, #84]	; (184fc <move_thread_to_end_of_prio_q+0x70>)
   184a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   184ac:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   184ae:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   184b2:	f102 0520 	add.w	r5, r2, #32
   184b6:	42ab      	cmp	r3, r5
   184b8:	d01b      	beq.n	184f2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   184ba:	b1d3      	cbz	r3, 184f2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   184bc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   184c0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   184c4:	4286      	cmp	r6, r0
   184c6:	d00f      	beq.n	184e8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   184c8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   184ca:	2800      	cmp	r0, #0
   184cc:	dd0c      	ble.n	184e8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   184ce:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   184d0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   184d4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   184d6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   184d8:	6890      	ldr	r0, [r2, #8]
   184da:	1a43      	subs	r3, r0, r1
   184dc:	4258      	negs	r0, r3
}
   184de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   184e2:	4158      	adcs	r0, r3
   184e4:	f7ff bfb2 	b.w	1844c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   184e8:	42a3      	cmp	r3, r4
   184ea:	d002      	beq.n	184f2 <move_thread_to_end_of_prio_q+0x66>
   184ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   184ee:	2b00      	cmp	r3, #0
   184f0:	d1e6      	bne.n	184c0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   184f2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   184f6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   184f8:	6251      	str	r1, [r2, #36]	; 0x24
}
   184fa:	e7ed      	b.n	184d8 <move_thread_to_end_of_prio_q+0x4c>
   184fc:	2000287c 	.word	0x2000287c

00018500 <z_time_slice>:
{
   18500:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18502:	f04f 0320 	mov.w	r3, #32
   18506:	f3ef 8511 	mrs	r5, BASEPRI
   1850a:	f383 8812 	msr	BASEPRI_MAX, r3
   1850e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   18512:	4b17      	ldr	r3, [pc, #92]	; (18570 <z_time_slice+0x70>)
   18514:	4a17      	ldr	r2, [pc, #92]	; (18574 <z_time_slice+0x74>)
   18516:	689c      	ldr	r4, [r3, #8]
   18518:	6811      	ldr	r1, [r2, #0]
   1851a:	428c      	cmp	r4, r1
   1851c:	d107      	bne.n	1852e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1851e:	4620      	mov	r0, r4
   18520:	f7ff ff28 	bl	18374 <z_reset_time_slice>
	__asm__ volatile(
   18524:	f385 8811 	msr	BASEPRI, r5
   18528:	f3bf 8f6f 	isb	sy
}
   1852c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1852e:	2100      	movs	r1, #0
   18530:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   18532:	4a11      	ldr	r2, [pc, #68]	; (18578 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   18534:	6812      	ldr	r2, [r2, #0]
   18536:	b1c2      	cbz	r2, 1856a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18538:	89e2      	ldrh	r2, [r4, #14]
   1853a:	2a7f      	cmp	r2, #127	; 0x7f
   1853c:	d815      	bhi.n	1856a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1853e:	7b62      	ldrb	r2, [r4, #13]
   18540:	06d2      	lsls	r2, r2, #27
   18542:	d112      	bne.n	1856a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18544:	4a0d      	ldr	r2, [pc, #52]	; (1857c <z_time_slice+0x7c>)
   18546:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1854a:	6812      	ldr	r2, [r2, #0]
   1854c:	4291      	cmp	r1, r2
   1854e:	db0c      	blt.n	1856a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   18550:	4a0b      	ldr	r2, [pc, #44]	; (18580 <z_time_slice+0x80>)
   18552:	4294      	cmp	r4, r2
   18554:	d009      	beq.n	1856a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18556:	691a      	ldr	r2, [r3, #16]
   18558:	4282      	cmp	r2, r0
   1855a:	dc03      	bgt.n	18564 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1855c:	4620      	mov	r0, r4
   1855e:	f7ff ff95 	bl	1848c <move_thread_to_end_of_prio_q>
   18562:	e7dc      	b.n	1851e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   18564:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   18566:	611a      	str	r2, [r3, #16]
   18568:	e7dc      	b.n	18524 <z_time_slice+0x24>
   1856a:	2200      	movs	r2, #0
   1856c:	e7fb      	b.n	18566 <z_time_slice+0x66>
   1856e:	bf00      	nop
   18570:	2000287c 	.word	0x2000287c
   18574:	200028ac 	.word	0x200028ac
   18578:	200028b4 	.word	0x200028b4
   1857c:	200028b0 	.word	0x200028b0
   18580:	200014b0 	.word	0x200014b0

00018584 <ready_thread>:
{
   18584:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18586:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1858a:	7b43      	ldrb	r3, [r0, #13]
   1858c:	2a00      	cmp	r2, #0
   1858e:	db2a      	blt.n	185e6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18590:	06da      	lsls	r2, r3, #27
   18592:	d128      	bne.n	185e6 <ready_thread+0x62>
   18594:	6982      	ldr	r2, [r0, #24]
   18596:	bb32      	cbnz	r2, 185e6 <ready_thread+0x62>
	return list->head == list;
   18598:	4a14      	ldr	r2, [pc, #80]	; (185ec <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1859a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1859e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   185a0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   185a4:	f102 0520 	add.w	r5, r2, #32
   185a8:	42ab      	cmp	r3, r5
   185aa:	d017      	beq.n	185dc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   185ac:	b1b3      	cbz	r3, 185dc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   185ae:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   185b2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   185b6:	428e      	cmp	r6, r1
   185b8:	d00b      	beq.n	185d2 <ready_thread+0x4e>
		return b2 - b1;
   185ba:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   185bc:	2900      	cmp	r1, #0
   185be:	dd08      	ble.n	185d2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   185c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   185c2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   185c6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   185c8:	6058      	str	r0, [r3, #4]
}
   185ca:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   185cc:	2000      	movs	r0, #0
   185ce:	f7ff bf3d 	b.w	1844c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   185d2:	42a3      	cmp	r3, r4
   185d4:	d002      	beq.n	185dc <ready_thread+0x58>
   185d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   185d8:	2b00      	cmp	r3, #0
   185da:	d1ea      	bne.n	185b2 <ready_thread+0x2e>
	node->prev = tail;
   185dc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   185e0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   185e2:	6250      	str	r0, [r2, #36]	; 0x24
}
   185e4:	e7f1      	b.n	185ca <ready_thread+0x46>
}
   185e6:	bc70      	pop	{r4, r5, r6}
   185e8:	4770      	bx	lr
   185ea:	bf00      	nop
   185ec:	2000287c 	.word	0x2000287c

000185f0 <z_sched_start>:
{
   185f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   185f2:	f04f 0220 	mov.w	r2, #32
   185f6:	f3ef 8411 	mrs	r4, BASEPRI
   185fa:	f382 8812 	msr	BASEPRI_MAX, r2
   185fe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18602:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   18604:	0751      	lsls	r1, r2, #29
   18606:	d404      	bmi.n	18612 <z_sched_start+0x22>
	__asm__ volatile(
   18608:	f384 8811 	msr	BASEPRI, r4
   1860c:	f3bf 8f6f 	isb	sy
}
   18610:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18612:	f022 0204 	bic.w	r2, r2, #4
   18616:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18618:	f7ff ffb4 	bl	18584 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1861c:	4621      	mov	r1, r4
   1861e:	4802      	ldr	r0, [pc, #8]	; (18628 <z_sched_start+0x38>)
}
   18620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18624:	f7ff beec 	b.w	18400 <z_reschedule>
   18628:	20002db7 	.word	0x20002db7

0001862c <unready_thread>:
{
   1862c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1862e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18632:	7b43      	ldrb	r3, [r0, #13]
   18634:	2a00      	cmp	r2, #0
{
   18636:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18638:	da04      	bge.n	18644 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1863a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1863e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18640:	f006 fa53 	bl	1eaea <sys_dlist_remove>
	update_cache(thread == _current);
   18644:	4b04      	ldr	r3, [pc, #16]	; (18658 <unready_thread+0x2c>)
   18646:	6898      	ldr	r0, [r3, #8]
   18648:	1a43      	subs	r3, r0, r1
   1864a:	4258      	negs	r0, r3
   1864c:	4158      	adcs	r0, r3
}
   1864e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   18652:	f7ff befb 	b.w	1844c <update_cache>
   18656:	bf00      	nop
   18658:	2000287c 	.word	0x2000287c

0001865c <pend>:
{
   1865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18660:	4606      	mov	r6, r0
   18662:	4615      	mov	r5, r2
   18664:	461c      	mov	r4, r3
	__asm__ volatile(
   18666:	f04f 0320 	mov.w	r3, #32
   1866a:	f3ef 8711 	mrs	r7, BASEPRI
   1866e:	f383 8812 	msr	BASEPRI_MAX, r3
   18672:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   18676:	f006 fab5 	bl	1ebe4 <add_to_waitq_locked>
	__asm__ volatile(
   1867a:	f387 8811 	msr	BASEPRI, r7
   1867e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18682:	f1b4 3fff 	cmp.w	r4, #4294967295
   18686:	bf08      	it	eq
   18688:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1868c:	d008      	beq.n	186a0 <pend+0x44>
   1868e:	462a      	mov	r2, r5
   18690:	4623      	mov	r3, r4
   18692:	f106 0018 	add.w	r0, r6, #24
   18696:	4903      	ldr	r1, [pc, #12]	; (186a4 <pend+0x48>)
}
   18698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1869c:	f000 b9f0 	b.w	18a80 <z_add_timeout>
   186a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186a4:	0001eba1 	.word	0x0001eba1

000186a8 <z_pend_curr>:
{
   186a8:	b510      	push	{r4, lr}
	pending_current = _current;
   186aa:	4b07      	ldr	r3, [pc, #28]	; (186c8 <z_pend_curr+0x20>)
   186ac:	6898      	ldr	r0, [r3, #8]
   186ae:	4b07      	ldr	r3, [pc, #28]	; (186cc <z_pend_curr+0x24>)
{
   186b0:	460c      	mov	r4, r1
	pending_current = _current;
   186b2:	6018      	str	r0, [r3, #0]
{
   186b4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   186b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   186ba:	f7ff ffcf 	bl	1865c <pend>
   186be:	4620      	mov	r0, r4
}
   186c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   186c4:	f7ea bab6 	b.w	2c34 <arch_swap>
   186c8:	2000287c 	.word	0x2000287c
   186cc:	200028ac 	.word	0x200028ac

000186d0 <z_impl_k_thread_suspend>:
{
   186d0:	b570      	push	{r4, r5, r6, lr}
   186d2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   186d4:	3018      	adds	r0, #24
   186d6:	f006 faf4 	bl	1ecc2 <z_abort_timeout>
	__asm__ volatile(
   186da:	f04f 0320 	mov.w	r3, #32
   186de:	f3ef 8611 	mrs	r6, BASEPRI
   186e2:	f383 8812 	msr	BASEPRI_MAX, r3
   186e6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   186ea:	f994 200d 	ldrsb.w	r2, [r4, #13]
   186ee:	7b63      	ldrb	r3, [r4, #13]
   186f0:	2a00      	cmp	r2, #0
   186f2:	da05      	bge.n	18700 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   186f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   186f8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   186fa:	4620      	mov	r0, r4
   186fc:	f006 f9f5 	bl	1eaea <sys_dlist_remove>
		update_cache(thread == _current);
   18700:	4d0b      	ldr	r5, [pc, #44]	; (18730 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18702:	7b63      	ldrb	r3, [r4, #13]
   18704:	68a8      	ldr	r0, [r5, #8]
   18706:	f043 0310 	orr.w	r3, r3, #16
   1870a:	7363      	strb	r3, [r4, #13]
   1870c:	1b03      	subs	r3, r0, r4
   1870e:	4258      	negs	r0, r3
   18710:	4158      	adcs	r0, r3
   18712:	f7ff fe9b 	bl	1844c <update_cache>
	__asm__ volatile(
   18716:	f386 8811 	msr	BASEPRI, r6
   1871a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1871e:	68ab      	ldr	r3, [r5, #8]
   18720:	42a3      	cmp	r3, r4
   18722:	d103      	bne.n	1872c <z_impl_k_thread_suspend+0x5c>
}
   18724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18728:	f006 ba1a 	b.w	1eb60 <z_reschedule_unlocked>
}
   1872c:	bd70      	pop	{r4, r5, r6, pc}
   1872e:	bf00      	nop
   18730:	2000287c 	.word	0x2000287c

00018734 <k_sched_unlock>:
{
   18734:	b510      	push	{r4, lr}
	__asm__ volatile(
   18736:	f04f 0320 	mov.w	r3, #32
   1873a:	f3ef 8411 	mrs	r4, BASEPRI
   1873e:	f383 8812 	msr	BASEPRI_MAX, r3
   18742:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   18746:	4b08      	ldr	r3, [pc, #32]	; (18768 <k_sched_unlock+0x34>)
   18748:	689a      	ldr	r2, [r3, #8]
   1874a:	7bd3      	ldrb	r3, [r2, #15]
   1874c:	3301      	adds	r3, #1
   1874e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18750:	2000      	movs	r0, #0
   18752:	f7ff fe7b 	bl	1844c <update_cache>
	__asm__ volatile(
   18756:	f384 8811 	msr	BASEPRI, r4
   1875a:	f3bf 8f6f 	isb	sy
}
   1875e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   18762:	f006 b9fd 	b.w	1eb60 <z_reschedule_unlocked>
   18766:	bf00      	nop
   18768:	2000287c 	.word	0x2000287c

0001876c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1876c:	4b04      	ldr	r3, [pc, #16]	; (18780 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1876e:	2100      	movs	r1, #0
   18770:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   18774:	e9c3 2208 	strd	r2, r2, [r3, #32]
   18778:	4608      	mov	r0, r1
   1877a:	f7ff be0f 	b.w	1839c <k_sched_time_slice_set>
   1877e:	bf00      	nop
   18780:	2000287c 	.word	0x2000287c

00018784 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   18784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   18786:	f04f 0320 	mov.w	r3, #32
   1878a:	f3ef 8511 	mrs	r5, BASEPRI
   1878e:	f383 8812 	msr	BASEPRI_MAX, r3
   18792:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   18796:	491a      	ldr	r1, [pc, #104]	; (18800 <z_impl_k_yield+0x7c>)
   18798:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1879a:	7b43      	ldrb	r3, [r0, #13]
   1879c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   187a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   187a2:	f006 f9a2 	bl	1eaea <sys_dlist_remove>
	}
	queue_thread(_current);
   187a6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   187a8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   187aa:	4608      	mov	r0, r1
   187ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   187b0:	735a      	strb	r2, [r3, #13]
   187b2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   187b6:	4282      	cmp	r2, r0
   187b8:	d01c      	beq.n	187f4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   187ba:	b1da      	cbz	r2, 187f4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   187bc:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   187be:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   187c2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   187c6:	42a6      	cmp	r6, r4
   187c8:	d00f      	beq.n	187ea <z_impl_k_yield+0x66>
		return b2 - b1;
   187ca:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   187cc:	2c00      	cmp	r4, #0
   187ce:	dd0c      	ble.n	187ea <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   187d0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   187d2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   187d6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   187d8:	6053      	str	r3, [r2, #4]
	update_cache(1);
   187da:	2001      	movs	r0, #1
   187dc:	f7ff fe36 	bl	1844c <update_cache>
   187e0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   187e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   187e6:	f7ea ba25 	b.w	2c34 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   187ea:	42ba      	cmp	r2, r7
   187ec:	d002      	beq.n	187f4 <z_impl_k_yield+0x70>
   187ee:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   187f0:	2a00      	cmp	r2, #0
   187f2:	d1e6      	bne.n	187c2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   187f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   187f6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   187fa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   187fc:	624b      	str	r3, [r1, #36]	; 0x24
}
   187fe:	e7ec      	b.n	187da <z_impl_k_yield+0x56>
   18800:	2000287c 	.word	0x2000287c

00018804 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18804:	ea50 0301 	orrs.w	r3, r0, r1
{
   18808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1880c:	4605      	mov	r5, r0
   1880e:	460e      	mov	r6, r1
	if (ticks == 0) {
   18810:	d103      	bne.n	1881a <z_tick_sleep+0x16>
	z_impl_k_yield();
   18812:	f7ff ffb7 	bl	18784 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   18816:	2000      	movs	r0, #0
   18818:	e033      	b.n	18882 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1881a:	f06f 0401 	mvn.w	r4, #1
   1881e:	1a24      	subs	r4, r4, r0
   18820:	f04f 33ff 	mov.w	r3, #4294967295
   18824:	eb63 0301 	sbc.w	r3, r3, r1
   18828:	2c01      	cmp	r4, #1
   1882a:	f173 0300 	sbcs.w	r3, r3, #0
   1882e:	da02      	bge.n	18836 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   18830:	f006 fa87 	bl	1ed42 <sys_clock_tick_get_32>
   18834:	1944      	adds	r4, r0, r5
   18836:	f04f 0320 	mov.w	r3, #32
   1883a:	f3ef 8811 	mrs	r8, BASEPRI
   1883e:	f383 8812 	msr	BASEPRI_MAX, r3
   18842:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   18846:	4f10      	ldr	r7, [pc, #64]	; (18888 <z_tick_sleep+0x84>)
   18848:	4b10      	ldr	r3, [pc, #64]	; (1888c <z_tick_sleep+0x88>)
   1884a:	68b8      	ldr	r0, [r7, #8]
   1884c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1884e:	f7ff feed 	bl	1862c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   18852:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18854:	490e      	ldr	r1, [pc, #56]	; (18890 <z_tick_sleep+0x8c>)
   18856:	462a      	mov	r2, r5
   18858:	4633      	mov	r3, r6
   1885a:	3018      	adds	r0, #24
   1885c:	f000 f910 	bl	18a80 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18860:	68ba      	ldr	r2, [r7, #8]
   18862:	7b53      	ldrb	r3, [r2, #13]
   18864:	f043 0310 	orr.w	r3, r3, #16
   18868:	7353      	strb	r3, [r2, #13]
   1886a:	4640      	mov	r0, r8
   1886c:	f7ea f9e2 	bl	2c34 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   18870:	f006 fa67 	bl	1ed42 <sys_clock_tick_get_32>
   18874:	1a20      	subs	r0, r4, r0
   18876:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1887a:	2801      	cmp	r0, #1
   1887c:	f173 0300 	sbcs.w	r3, r3, #0
   18880:	dbc9      	blt.n	18816 <z_tick_sleep+0x12>
}
   18882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18886:	bf00      	nop
   18888:	2000287c 	.word	0x2000287c
   1888c:	200028ac 	.word	0x200028ac
   18890:	0001eba1 	.word	0x0001eba1

00018894 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18894:	f1b1 3fff 	cmp.w	r1, #4294967295
   18898:	bf08      	it	eq
   1889a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1889e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   188a0:	d106      	bne.n	188b0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   188a2:	4b08      	ldr	r3, [pc, #32]	; (188c4 <z_impl_k_sleep+0x30>)
   188a4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   188a6:	f7ff ff13 	bl	186d0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   188aa:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   188ae:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   188b0:	f7ff ffa8 	bl	18804 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   188b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   188b8:	fb80 0303 	smull	r0, r3, r0, r3
   188bc:	0bc0      	lsrs	r0, r0, #15
   188be:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   188c2:	e7f4      	b.n	188ae <z_impl_k_sleep+0x1a>
   188c4:	2000287c 	.word	0x2000287c

000188c8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   188c8:	4b01      	ldr	r3, [pc, #4]	; (188d0 <z_impl_z_current_get+0x8>)
   188ca:	6898      	ldr	r0, [r3, #8]
   188cc:	4770      	bx	lr
   188ce:	bf00      	nop
   188d0:	2000287c 	.word	0x2000287c

000188d4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   188d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188d8:	4604      	mov	r4, r0
   188da:	f04f 0320 	mov.w	r3, #32
   188de:	f3ef 8611 	mrs	r6, BASEPRI
   188e2:	f383 8812 	msr	BASEPRI_MAX, r3
   188e6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   188ea:	7b03      	ldrb	r3, [r0, #12]
   188ec:	07d9      	lsls	r1, r3, #31
   188ee:	d50b      	bpl.n	18908 <z_thread_abort+0x34>
	__asm__ volatile(
   188f0:	f386 8811 	msr	BASEPRI, r6
   188f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   188f8:	4040      	eors	r0, r0
   188fa:	f380 8811 	msr	BASEPRI, r0
   188fe:	f04f 0004 	mov.w	r0, #4
   18902:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   18904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   18908:	7b43      	ldrb	r3, [r0, #13]
   1890a:	071a      	lsls	r2, r3, #28
   1890c:	d504      	bpl.n	18918 <z_thread_abort+0x44>
   1890e:	f386 8811 	msr	BASEPRI, r6
   18912:	f3bf 8f6f 	isb	sy
   18916:	e7f5      	b.n	18904 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18918:	f023 0220 	bic.w	r2, r3, #32
   1891c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   18920:	09d2      	lsrs	r2, r2, #7
   18922:	d120      	bne.n	18966 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18924:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   18926:	68a3      	ldr	r3, [r4, #8]
   18928:	b113      	cbz	r3, 18930 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1892a:	4620      	mov	r0, r4
   1892c:	f006 f8e5 	bl	1eafa <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   18930:	f104 0018 	add.w	r0, r4, #24
   18934:	f006 f9c5 	bl	1ecc2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18938:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1893c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   18940:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18942:	42bd      	cmp	r5, r7
   18944:	d000      	beq.n	18948 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   18946:	b9b5      	cbnz	r5, 18976 <z_thread_abort+0xa2>
		update_cache(1);
   18948:	2001      	movs	r0, #1
   1894a:	f7ff fd7f 	bl	1844c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1894e:	4b10      	ldr	r3, [pc, #64]	; (18990 <z_thread_abort+0xbc>)
   18950:	689b      	ldr	r3, [r3, #8]
   18952:	42a3      	cmp	r3, r4
   18954:	d1db      	bne.n	1890e <z_thread_abort+0x3a>
   18956:	f3ef 8305 	mrs	r3, IPSR
   1895a:	2b00      	cmp	r3, #0
   1895c:	d1d7      	bne.n	1890e <z_thread_abort+0x3a>
   1895e:	4630      	mov	r0, r6
   18960:	f7ea f968 	bl	2c34 <arch_swap>
	return ret;
   18964:	e7d3      	b.n	1890e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18966:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1896a:	f043 0308 	orr.w	r3, r3, #8
   1896e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18970:	f006 f8bb 	bl	1eaea <sys_dlist_remove>
}
   18974:	e7d7      	b.n	18926 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   18976:	4628      	mov	r0, r5
   18978:	f006 f8bf 	bl	1eafa <unpend_thread_no_timeout>
   1897c:	f105 0018 	add.w	r0, r5, #24
   18980:	f006 f99f 	bl	1ecc2 <z_abort_timeout>
   18984:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   18988:	4628      	mov	r0, r5
   1898a:	f7ff fdfb 	bl	18584 <ready_thread>
   1898e:	e7d7      	b.n	18940 <z_thread_abort+0x6c>
   18990:	2000287c 	.word	0x2000287c

00018994 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   18994:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18996:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1899a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1899c:	e9cd 6700 	strd	r6, r7, [sp]
   189a0:	f7ff fe82 	bl	186a8 <z_pend_curr>

	if (data != NULL) {
   189a4:	b11c      	cbz	r4, 189ae <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   189a6:	4b03      	ldr	r3, [pc, #12]	; (189b4 <z_sched_wait+0x20>)
   189a8:	689b      	ldr	r3, [r3, #8]
   189aa:	695b      	ldr	r3, [r3, #20]
   189ac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   189ae:	b002      	add	sp, #8
   189b0:	bdd0      	pop	{r4, r6, r7, pc}
   189b2:	bf00      	nop
   189b4:	2000287c 	.word	0x2000287c

000189b8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   189b8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   189ba:	4806      	ldr	r0, [pc, #24]	; (189d4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   189bc:	4a06      	ldr	r2, [pc, #24]	; (189d8 <z_data_copy+0x20>)
   189be:	4907      	ldr	r1, [pc, #28]	; (189dc <z_data_copy+0x24>)
   189c0:	1a12      	subs	r2, r2, r0
   189c2:	f005 fe16 	bl	1e5f2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   189c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   189ca:	4a05      	ldr	r2, [pc, #20]	; (189e0 <z_data_copy+0x28>)
   189cc:	4905      	ldr	r1, [pc, #20]	; (189e4 <z_data_copy+0x2c>)
   189ce:	4806      	ldr	r0, [pc, #24]	; (189e8 <z_data_copy+0x30>)
   189d0:	f005 be0f 	b.w	1e5f2 <z_early_memcpy>
   189d4:	20000000 	.word	0x20000000
   189d8:	20000c24 	.word	0x20000c24
   189dc:	00020f3c 	.word	0x00020f3c
   189e0:	00000000 	.word	0x00000000
   189e4:	00020f3c 	.word	0x00020f3c
   189e8:	20000000 	.word	0x20000000

000189ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   189ec:	4b03      	ldr	r3, [pc, #12]	; (189fc <elapsed+0x10>)
   189ee:	681b      	ldr	r3, [r3, #0]
   189f0:	b90b      	cbnz	r3, 189f6 <elapsed+0xa>
   189f2:	f7fe ba45 	b.w	16e80 <sys_clock_elapsed>
}
   189f6:	2000      	movs	r0, #0
   189f8:	4770      	bx	lr
   189fa:	bf00      	nop
   189fc:	200028b8 	.word	0x200028b8

00018a00 <next_timeout>:
	return list->head == list;
   18a00:	4b10      	ldr	r3, [pc, #64]	; (18a44 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   18a02:	b510      	push	{r4, lr}
   18a04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a06:	429c      	cmp	r4, r3
   18a08:	bf08      	it	eq
   18a0a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18a0c:	f7ff ffee 	bl	189ec <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   18a10:	b1a4      	cbz	r4, 18a3c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   18a12:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   18a16:	1a1b      	subs	r3, r3, r0
   18a18:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   18a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18a20:	f170 0200 	sbcs.w	r2, r0, #0
   18a24:	da0a      	bge.n	18a3c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   18a26:	2800      	cmp	r0, #0
   18a28:	bfac      	ite	ge
   18a2a:	4618      	movge	r0, r3
   18a2c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18a2e:	4b06      	ldr	r3, [pc, #24]	; (18a48 <next_timeout+0x48>)
   18a30:	691b      	ldr	r3, [r3, #16]
   18a32:	b113      	cbz	r3, 18a3a <next_timeout+0x3a>
   18a34:	4298      	cmp	r0, r3
   18a36:	bfa8      	it	ge
   18a38:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18a3a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   18a3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18a40:	e7f5      	b.n	18a2e <next_timeout+0x2e>
   18a42:	bf00      	nop
   18a44:	20000844 	.word	0x20000844
   18a48:	2000287c 	.word	0x2000287c

00018a4c <remove_timeout>:
{
   18a4c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   18a4e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18a50:	b168      	cbz	r0, 18a6e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18a52:	4a0a      	ldr	r2, [pc, #40]	; (18a7c <remove_timeout+0x30>)
   18a54:	6852      	ldr	r2, [r2, #4]
   18a56:	4290      	cmp	r0, r2
   18a58:	d009      	beq.n	18a6e <remove_timeout+0x22>
	if (next(t) != NULL) {
   18a5a:	b143      	cbz	r3, 18a6e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18a5c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18a60:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18a64:	1912      	adds	r2, r2, r4
   18a66:	eb41 0105 	adc.w	r1, r1, r5
   18a6a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   18a6e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   18a70:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18a72:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18a74:	2300      	movs	r3, #0
	node->prev = NULL;
   18a76:	e9c0 3300 	strd	r3, r3, [r0]
}
   18a7a:	bd30      	pop	{r4, r5, pc}
   18a7c:	20000844 	.word	0x20000844

00018a80 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a80:	f1b3 3fff 	cmp.w	r3, #4294967295
   18a84:	bf08      	it	eq
   18a86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a8c:	4604      	mov	r4, r0
   18a8e:	461f      	mov	r7, r3
   18a90:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a92:	d067      	beq.n	18b64 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   18a94:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   18a96:	f04f 0320 	mov.w	r3, #32
   18a9a:	f3ef 8611 	mrs	r6, BASEPRI
   18a9e:	f383 8812 	msr	BASEPRI_MAX, r3
   18aa2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   18aa6:	f06f 0201 	mvn.w	r2, #1
   18aaa:	1b53      	subs	r3, r2, r5
   18aac:	f04f 3cff 	mov.w	ip, #4294967295
   18ab0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18ab4:	2b00      	cmp	r3, #0
   18ab6:	db1b      	blt.n	18af0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   18ab8:	4b2b      	ldr	r3, [pc, #172]	; (18b68 <z_add_timeout+0xe8>)
   18aba:	e9d3 1300 	ldrd	r1, r3, [r3]
   18abe:	1a52      	subs	r2, r2, r1
   18ac0:	eb6c 0303 	sbc.w	r3, ip, r3
   18ac4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   18ac6:	eb63 0307 	sbc.w	r3, r3, r7
   18aca:	2d01      	cmp	r5, #1
   18acc:	f173 0200 	sbcs.w	r2, r3, #0
   18ad0:	bfbc      	itt	lt
   18ad2:	2501      	movlt	r5, #1
   18ad4:	2300      	movlt	r3, #0
   18ad6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   18ada:	4824      	ldr	r0, [pc, #144]	; (18b6c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   18adc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ae0:	4283      	cmp	r3, r0
   18ae2:	d118      	bne.n	18b16 <z_add_timeout+0x96>
	node->prev = tail;
   18ae4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   18ae8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   18aec:	6044      	str	r4, [r0, #4]
}
   18aee:	e026      	b.n	18b3e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   18af0:	f7ff ff7c 	bl	189ec <elapsed>
   18af4:	3501      	adds	r5, #1
   18af6:	f147 0700 	adc.w	r7, r7, #0
   18afa:	182d      	adds	r5, r5, r0
   18afc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   18b00:	e9c4 5704 	strd	r5, r7, [r4, #16]
   18b04:	e7e9      	b.n	18ada <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   18b06:	1a52      	subs	r2, r2, r1
   18b08:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   18b0c:	459c      	cmp	ip, r3
   18b0e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   18b12:	d0e7      	beq.n	18ae4 <z_add_timeout+0x64>
   18b14:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   18b16:	2b00      	cmp	r3, #0
   18b18:	d0e4      	beq.n	18ae4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   18b1a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   18b1e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   18b22:	428a      	cmp	r2, r1
   18b24:	eb75 0e07 	sbcs.w	lr, r5, r7
   18b28:	daed      	bge.n	18b06 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   18b2a:	1a8a      	subs	r2, r1, r2
   18b2c:	eb67 0505 	sbc.w	r5, r7, r5
   18b30:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   18b34:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18b36:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   18b3a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18b3c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18b3e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b40:	4283      	cmp	r3, r0
   18b42:	d00b      	beq.n	18b5c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18b44:	429c      	cmp	r4, r3
   18b46:	d109      	bne.n	18b5c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18b48:	f7ff ff5a 	bl	18a00 <next_timeout>

			if (next_time == 0 ||
   18b4c:	b118      	cbz	r0, 18b56 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   18b4e:	4b08      	ldr	r3, [pc, #32]	; (18b70 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   18b50:	691b      	ldr	r3, [r3, #16]
   18b52:	4283      	cmp	r3, r0
   18b54:	d002      	beq.n	18b5c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   18b56:	2100      	movs	r1, #0
   18b58:	f7fe f960 	bl	16e1c <sys_clock_set_timeout>
	__asm__ volatile(
   18b5c:	f386 8811 	msr	BASEPRI, r6
   18b60:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b66:	bf00      	nop
   18b68:	20001650 	.word	0x20001650
   18b6c:	20000844 	.word	0x20000844
   18b70:	2000287c 	.word	0x2000287c

00018b74 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   18b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b78:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18b7a:	f7ff fcc1 	bl	18500 <z_time_slice>
	__asm__ volatile(
   18b7e:	f04f 0320 	mov.w	r3, #32
   18b82:	f3ef 8411 	mrs	r4, BASEPRI
   18b86:	f383 8812 	msr	BASEPRI_MAX, r3
   18b8a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   18b8e:	4e24      	ldr	r6, [pc, #144]	; (18c20 <sys_clock_announce+0xac>)
	return list->head == list;
   18b90:	f8df 8090 	ldr.w	r8, [pc, #144]	; 18c24 <sys_clock_announce+0xb0>
   18b94:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   18b96:	4d24      	ldr	r5, [pc, #144]	; (18c28 <sys_clock_announce+0xb4>)
   18b98:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18b9c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b9e:	4540      	cmp	r0, r8
		curr_tick += dt;
   18ba0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   18ba4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   18ba8:	d00b      	beq.n	18bc2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18baa:	b150      	cbz	r0, 18bc2 <sys_clock_announce+0x4e>
   18bac:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   18bb0:	429a      	cmp	r2, r3
   18bb2:	eb77 090c 	sbcs.w	r9, r7, ip
   18bb6:	da16      	bge.n	18be6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18bb8:	1a9b      	subs	r3, r3, r2
   18bba:	eb6c 0c07 	sbc.w	ip, ip, r7
   18bbe:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   18bc2:	1852      	adds	r2, r2, r1
   18bc4:	eb4e 0707 	adc.w	r7, lr, r7
   18bc8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   18bcc:	2500      	movs	r5, #0
   18bce:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   18bd0:	f7ff ff16 	bl	18a00 <next_timeout>
   18bd4:	4629      	mov	r1, r5
   18bd6:	f7fe f921 	bl	16e1c <sys_clock_set_timeout>
	__asm__ volatile(
   18bda:	f384 8811 	msr	BASEPRI, r4
   18bde:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   18be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   18be6:	1859      	adds	r1, r3, r1
   18be8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   18bec:	1ad3      	subs	r3, r2, r3
   18bee:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   18bf0:	2200      	movs	r2, #0
   18bf2:	2300      	movs	r3, #0
   18bf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   18bf8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   18bfc:	f7ff ff26 	bl	18a4c <remove_timeout>
   18c00:	f384 8811 	msr	BASEPRI, r4
   18c04:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18c08:	6883      	ldr	r3, [r0, #8]
   18c0a:	4798      	blx	r3
	__asm__ volatile(
   18c0c:	f04f 0320 	mov.w	r3, #32
   18c10:	f3ef 8411 	mrs	r4, BASEPRI
   18c14:	f383 8812 	msr	BASEPRI_MAX, r3
   18c18:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   18c1c:	e7bc      	b.n	18b98 <sys_clock_announce+0x24>
   18c1e:	bf00      	nop
   18c20:	200028b8 	.word	0x200028b8
   18c24:	20000844 	.word	0x20000844
   18c28:	20001650 	.word	0x20001650

00018c2c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   18c2c:	b510      	push	{r4, lr}
   18c2e:	f04f 0320 	mov.w	r3, #32
   18c32:	f3ef 8411 	mrs	r4, BASEPRI
   18c36:	f383 8812 	msr	BASEPRI_MAX, r3
   18c3a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   18c3e:	f7fe f91f 	bl	16e80 <sys_clock_elapsed>
   18c42:	4a05      	ldr	r2, [pc, #20]	; (18c58 <sys_clock_tick_get+0x2c>)
   18c44:	e9d2 3100 	ldrd	r3, r1, [r2]
   18c48:	18c0      	adds	r0, r0, r3
   18c4a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   18c4e:	f384 8811 	msr	BASEPRI, r4
   18c52:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   18c56:	bd10      	pop	{r4, pc}
   18c58:	20001650 	.word	0x20001650

00018c5c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   18c5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18c60:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   18c62:	4b29      	ldr	r3, [pc, #164]	; (18d08 <z_impl_k_poll+0xac>)
   18c64:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   18c66:	2301      	movs	r3, #1
   18c68:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   18c6c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   18c70:	ea52 0305 	orrs.w	r3, r2, r5
{
   18c74:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   18c76:	bf0c      	ite	eq
   18c78:	2301      	moveq	r3, #1
   18c7a:	2300      	movne	r3, #0
   18c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   18c80:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   18c82:	f006 f8c0 	bl	1ee06 <register_events>
   18c86:	4681      	mov	r9, r0
	__asm__ volatile(
   18c88:	f04f 0320 	mov.w	r3, #32
   18c8c:	f3ef 8a11 	mrs	sl, BASEPRI
   18c90:	f383 8812 	msr	BASEPRI_MAX, r3
   18c94:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   18c98:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   18c9c:	b964      	cbnz	r4, 18cb8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   18c9e:	4601      	mov	r1, r0
   18ca0:	4652      	mov	r2, sl
   18ca2:	4640      	mov	r0, r8
   18ca4:	f006 f980 	bl	1efa8 <clear_event_registrations>
	__asm__ volatile(
   18ca8:	f38a 8811 	msr	BASEPRI, sl
   18cac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   18cb0:	4620      	mov	r0, r4
   18cb2:	b002      	add	sp, #8
   18cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   18cb8:	2300      	movs	r3, #0
   18cba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18cbe:	ea56 0305 	orrs.w	r3, r6, r5
   18cc2:	d106      	bne.n	18cd2 <z_impl_k_poll+0x76>
   18cc4:	f38a 8811 	msr	BASEPRI, sl
   18cc8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   18ccc:	f06f 040a 	mvn.w	r4, #10
   18cd0:	e7ee      	b.n	18cb0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   18cd2:	e9cd 6500 	strd	r6, r5, [sp]
   18cd6:	4a0d      	ldr	r2, [pc, #52]	; (18d0c <z_impl_k_poll+0xb0>)
   18cd8:	480d      	ldr	r0, [pc, #52]	; (18d10 <z_impl_k_poll+0xb4>)
   18cda:	4651      	mov	r1, sl
   18cdc:	f7ff fce4 	bl	186a8 <z_pend_curr>
   18ce0:	4604      	mov	r4, r0
	__asm__ volatile(
   18ce2:	f04f 0320 	mov.w	r3, #32
   18ce6:	f3ef 8511 	mrs	r5, BASEPRI
   18cea:	f383 8812 	msr	BASEPRI_MAX, r3
   18cee:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   18cf2:	462a      	mov	r2, r5
   18cf4:	4649      	mov	r1, r9
   18cf6:	4640      	mov	r0, r8
   18cf8:	f006 f956 	bl	1efa8 <clear_event_registrations>
	__asm__ volatile(
   18cfc:	f385 8811 	msr	BASEPRI, r5
   18d00:	f3bf 8f6f 	isb	sy
	return swap_rc;
   18d04:	e7d4      	b.n	18cb0 <z_impl_k_poll+0x54>
   18d06:	bf00      	nop
   18d08:	2000287c 	.word	0x2000287c
   18d0c:	2000084c 	.word	0x2000084c
   18d10:	20002db7 	.word	0x20002db7

00018d14 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   18d14:	b538      	push	{r3, r4, r5, lr}
   18d16:	4603      	mov	r3, r0
	__asm__ volatile(
   18d18:	f04f 0220 	mov.w	r2, #32
   18d1c:	f3ef 8511 	mrs	r5, BASEPRI
   18d20:	f382 8812 	msr	BASEPRI_MAX, r2
   18d24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   18d28:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   18d2a:	2101      	movs	r1, #1
   18d2c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   18d2e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   18d30:	4283      	cmp	r3, r0
   18d32:	d106      	bne.n	18d42 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18d34:	f385 8811 	msr	BASEPRI, r5
   18d38:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   18d3c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   18d3e:	4620      	mov	r0, r4
   18d40:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   18d42:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18d46:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18d48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18d4a:	2300      	movs	r3, #0
	node->prev = NULL;
   18d4c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18d50:	f006 f8d0 	bl	1eef4 <signal_poll_event>
	z_reschedule(&lock, key);
   18d54:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18d56:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18d58:	4801      	ldr	r0, [pc, #4]	; (18d60 <z_impl_k_poll_signal_raise+0x4c>)
   18d5a:	f7ff fb51 	bl	18400 <z_reschedule>
	return rc;
   18d5e:	e7ee      	b.n	18d3e <z_impl_k_poll_signal_raise+0x2a>
   18d60:	20002db7 	.word	0x20002db7

00018d64 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   18d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18d66:	4606      	mov	r6, r0
   18d68:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   18d6a:	f005 fcd3 	bl	1e714 <k_is_in_isr>
   18d6e:	b978      	cbnz	r0, 18d90 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   18d70:	4b0b      	ldr	r3, [pc, #44]	; (18da0 <z_thread_aligned_alloc+0x3c>)
   18d72:	689b      	ldr	r3, [r3, #8]
   18d74:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   18d76:	b17c      	cbz	r4, 18d98 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   18d78:	1d2a      	adds	r2, r5, #4
   18d7a:	d209      	bcs.n	18d90 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   18d7c:	2000      	movs	r0, #0
   18d7e:	2100      	movs	r1, #0
   18d80:	e9cd 0100 	strd	r0, r1, [sp]
   18d84:	f046 0104 	orr.w	r1, r6, #4
   18d88:	4620      	mov	r0, r4
   18d8a:	f005 fc3c 	bl	1e606 <k_heap_aligned_alloc>
	if (mem == NULL) {
   18d8e:	b908      	cbnz	r0, 18d94 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   18d90:	2400      	movs	r4, #0
	}

	return ret;
   18d92:	e001      	b.n	18d98 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   18d94:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   18d96:	1d04      	adds	r4, r0, #4
}
   18d98:	4620      	mov	r0, r4
   18d9a:	b002      	add	sp, #8
   18d9c:	bd70      	pop	{r4, r5, r6, pc}
   18d9e:	bf00      	nop
   18da0:	2000287c 	.word	0x2000287c

00018da4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   18da4:	4a02      	ldr	r2, [pc, #8]	; (18db0 <boot_banner+0xc>)
   18da6:	4903      	ldr	r1, [pc, #12]	; (18db4 <boot_banner+0x10>)
   18da8:	4803      	ldr	r0, [pc, #12]	; (18db8 <boot_banner+0x14>)
   18daa:	f000 b8dc 	b.w	18f66 <printk>
   18dae:	bf00      	nop
   18db0:	00020a69 	.word	0x00020a69
   18db4:	00020ef4 	.word	0x00020ef4
   18db8:	00020f14 	.word	0x00020f14

00018dbc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18dbc:	4770      	bx	lr

00018dbe <ct_ccc_cfg_changed>:
}
   18dbe:	4770      	bx	lr

00018dc0 <write_without_rsp_vnd>:
{
   18dc0:	b570      	push	{r4, r5, r6, lr}
   18dc2:	461c      	mov	r4, r3
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   18dc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
{
   18dc8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   18dcc:	460d      	mov	r5, r1
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   18dce:	079b      	lsls	r3, r3, #30
	uint8_t *value = attr->user_data;
   18dd0:	68ee      	ldr	r6, [r5, #12]
{
   18dd2:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   18dd4:	d50a      	bpl.n	18dec <write_without_rsp_vnd+0x2c>
	if (offset + len > VND_MAX_LEN) {
   18dd6:	1905      	adds	r5, r0, r4
   18dd8:	2d14      	cmp	r5, #20
   18dda:	dc0a      	bgt.n	18df2 <write_without_rsp_vnd+0x32>
	memcpy(value + offset, buf, len);
   18ddc:	4622      	mov	r2, r4
   18dde:	4430      	add	r0, r6
   18de0:	f001 fd37 	bl	1a852 <memcpy>
	value[offset + len] = 0;
   18de4:	2300      	movs	r3, #0
   18de6:	5573      	strb	r3, [r6, r5]
}
   18de8:	4620      	mov	r0, r4
   18dea:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   18dec:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   18df0:	e7fa      	b.n	18de8 <write_without_rsp_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18df2:	f06f 0406 	mvn.w	r4, #6
   18df6:	e7f7      	b.n	18de8 <write_without_rsp_vnd+0x28>

00018df8 <write_signed>:
{
   18df8:	b538      	push	{r3, r4, r5, lr}
   18dfa:	460c      	mov	r4, r1
   18dfc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   18e00:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   18e02:	461c      	mov	r4, r3
   18e04:	18c3      	adds	r3, r0, r3
   18e06:	2b04      	cmp	r3, #4
{
   18e08:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   18e0a:	dc05      	bgt.n	18e18 <write_signed+0x20>
	memcpy(value + offset, buf, len);
   18e0c:	4622      	mov	r2, r4
   18e0e:	4428      	add	r0, r5
   18e10:	f001 fd1f 	bl	1a852 <memcpy>
}
   18e14:	4620      	mov	r0, r4
   18e16:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e18:	f06f 0406 	mvn.w	r4, #6
   18e1c:	e7fa      	b.n	18e14 <write_signed+0x1c>

00018e1e <write_long_vnd>:
{
   18e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e20:	461c      	mov	r4, r3
   18e22:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18e26:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   18e2a:	f013 0501 	ands.w	r5, r3, #1
{
   18e2e:	460e      	mov	r6, r1
   18e30:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   18e32:	d10a      	bne.n	18e4a <write_long_vnd+0x2c>
	if (offset + len > VND_LONG_MAX_LEN) {
   18e34:	1907      	adds	r7, r0, r4
   18e36:	2f4a      	cmp	r7, #74	; 0x4a
   18e38:	dc09      	bgt.n	18e4e <write_long_vnd+0x30>
	uint8_t *value = attr->user_data;
   18e3a:	68f6      	ldr	r6, [r6, #12]
	memcpy(value + offset, buf, len);
   18e3c:	4622      	mov	r2, r4
   18e3e:	4430      	add	r0, r6
   18e40:	f001 fd07 	bl	1a852 <memcpy>
	value[offset + len] = 0;
   18e44:	55f5      	strb	r5, [r6, r7]
}
   18e46:	4620      	mov	r0, r4
   18e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   18e4a:	2400      	movs	r4, #0
   18e4c:	e7fb      	b.n	18e46 <write_long_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e4e:	f06f 0406 	mvn.w	r4, #6
   18e52:	e7f8      	b.n	18e46 <write_long_vnd+0x28>

00018e54 <write_vnd>:
{
   18e54:	b570      	push	{r4, r5, r6, lr}
   18e56:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   18e5a:	460c      	mov	r4, r1
	if (offset + len > VND_MAX_LEN) {
   18e5c:	18c5      	adds	r5, r0, r3
   18e5e:	2d14      	cmp	r5, #20
	uint8_t *value = attr->user_data;
   18e60:	68e6      	ldr	r6, [r4, #12]
{
   18e62:	4611      	mov	r1, r2
	if (offset + len > VND_MAX_LEN) {
   18e64:	461c      	mov	r4, r3
   18e66:	dc07      	bgt.n	18e78 <write_vnd+0x24>
	memcpy(value + offset, buf, len);
   18e68:	461a      	mov	r2, r3
   18e6a:	4430      	add	r0, r6
   18e6c:	f001 fcf1 	bl	1a852 <memcpy>
	value[offset + len] = 0;
   18e70:	2300      	movs	r3, #0
   18e72:	5573      	strb	r3, [r6, r5]
}
   18e74:	4620      	mov	r0, r4
   18e76:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e78:	f06f 0406 	mvn.w	r4, #6
   18e7c:	e7fa      	b.n	18e74 <write_vnd+0x20>

00018e7e <read_ct>:
{
   18e7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   18e80:	240a      	movs	r4, #10
   18e82:	9402      	str	r4, [sp, #8]
   18e84:	68cc      	ldr	r4, [r1, #12]
   18e86:	9401      	str	r4, [sp, #4]
   18e88:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   18e8c:	9400      	str	r4, [sp, #0]
   18e8e:	f004 f908 	bl	1d0a2 <bt_gatt_attr_read>
}
   18e92:	b004      	add	sp, #16
   18e94:	bd10      	pop	{r4, pc}

00018e96 <read_signed>:
{
   18e96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   18e98:	2404      	movs	r4, #4
   18e9a:	9402      	str	r4, [sp, #8]
   18e9c:	68cc      	ldr	r4, [r1, #12]
   18e9e:	9401      	str	r4, [sp, #4]
   18ea0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   18ea4:	9400      	str	r4, [sp, #0]
   18ea6:	f004 f8fc 	bl	1d0a2 <bt_gatt_attr_read>
}
   18eaa:	b004      	add	sp, #16
   18eac:	bd10      	pop	{r4, pc}

00018eae <read_vnd>:
{
   18eae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   18eb2:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   18eb6:	4605      	mov	r5, r0
				 strlen(value));
   18eb8:	4640      	mov	r0, r8
{
   18eba:	461f      	mov	r7, r3
   18ebc:	460c      	mov	r4, r1
   18ebe:	4616      	mov	r6, r2
				 strlen(value));
   18ec0:	f001 fc9a 	bl	1a7f8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   18ec4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18ec8:	9300      	str	r3, [sp, #0]
   18eca:	b280      	uxth	r0, r0
   18ecc:	e9cd 8001 	strd	r8, r0, [sp, #4]
   18ed0:	463b      	mov	r3, r7
   18ed2:	4632      	mov	r2, r6
   18ed4:	4621      	mov	r1, r4
   18ed6:	4628      	mov	r0, r5
   18ed8:	f004 f8e3 	bl	1d0a2 <bt_gatt_attr_read>
}
   18edc:	b004      	add	sp, #16
   18ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018ee2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   18ee2:	4603      	mov	r3, r0
   18ee4:	b140      	cbz	r0, 18ef8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18ee6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18ee8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   18eec:	2a02      	cmp	r2, #2
   18eee:	d006      	beq.n	18efe <sys_notify_validate+0x1c>
   18ef0:	2a03      	cmp	r2, #3
   18ef2:	d004      	beq.n	18efe <sys_notify_validate+0x1c>
   18ef4:	2a01      	cmp	r2, #1
   18ef6:	d005      	beq.n	18f04 <sys_notify_validate+0x22>
		return -EINVAL;
   18ef8:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   18efc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   18efe:	681a      	ldr	r2, [r3, #0]
   18f00:	2a00      	cmp	r2, #0
   18f02:	d0f9      	beq.n	18ef8 <sys_notify_validate+0x16>
		notify->result = 0;
   18f04:	2000      	movs	r0, #0
   18f06:	6098      	str	r0, [r3, #8]
   18f08:	4770      	bx	lr

00018f0a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18f0a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18f0c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   18f10:	2a02      	cmp	r2, #2
{
   18f12:	b510      	push	{r4, lr}
   18f14:	4603      	mov	r3, r0
	notify->result = res;
   18f16:	6081      	str	r1, [r0, #8]
	switch (method) {
   18f18:	d00a      	beq.n	18f30 <sys_notify_finalize+0x26>
   18f1a:	2a03      	cmp	r2, #3
   18f1c:	d10b      	bne.n	18f36 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   18f1e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   18f20:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18f22:	2200      	movs	r2, #0
   18f24:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   18f26:	b108      	cbz	r0, 18f2c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   18f28:	f7ff fef4 	bl	18d14 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   18f2c:	4620      	mov	r0, r4
   18f2e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   18f30:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   18f32:	2400      	movs	r4, #0
		break;
   18f34:	e7f5      	b.n	18f22 <sys_notify_finalize+0x18>
	switch (method) {
   18f36:	2400      	movs	r4, #0
   18f38:	4620      	mov	r0, r4
   18f3a:	e7f2      	b.n	18f22 <sys_notify_finalize+0x18>

00018f3c <arch_printk_char_out>:
}
   18f3c:	2000      	movs	r0, #0
   18f3e:	4770      	bx	lr

00018f40 <str_out>:
{
   18f40:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18f42:	688a      	ldr	r2, [r1, #8]
   18f44:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   18f46:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18f48:	b114      	cbz	r4, 18f50 <str_out+0x10>
   18f4a:	684b      	ldr	r3, [r1, #4]
   18f4c:	4293      	cmp	r3, r2
   18f4e:	dc01      	bgt.n	18f54 <str_out+0x14>
		ctx->count++;
   18f50:	608d      	str	r5, [r1, #8]
}
   18f52:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   18f54:	3b01      	subs	r3, #1
   18f56:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   18f58:	bf08      	it	eq
   18f5a:	2200      	moveq	r2, #0
   18f5c:	608d      	str	r5, [r1, #8]
   18f5e:	bf0c      	ite	eq
   18f60:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   18f62:	54a0      	strbne	r0, [r4, r2]
   18f64:	e7f5      	b.n	18f52 <str_out+0x12>

00018f66 <printk>:
{
   18f66:	b40f      	push	{r0, r1, r2, r3}
   18f68:	b507      	push	{r0, r1, r2, lr}
   18f6a:	a904      	add	r1, sp, #16
   18f6c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   18f70:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   18f72:	f7e8 fe23 	bl	1bbc <vprintk>
}
   18f76:	b003      	add	sp, #12
   18f78:	f85d eb04 	ldr.w	lr, [sp], #4
   18f7c:	b004      	add	sp, #16
   18f7e:	4770      	bx	lr

00018f80 <snprintk>:
{
   18f80:	b40c      	push	{r2, r3}
   18f82:	b507      	push	{r0, r1, r2, lr}
   18f84:	ab04      	add	r3, sp, #16
   18f86:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   18f8a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   18f8c:	f7e8 fe24 	bl	1bd8 <vsnprintk>
}
   18f90:	b003      	add	sp, #12
   18f92:	f85d eb04 	ldr.w	lr, [sp], #4
   18f96:	b002      	add	sp, #8
   18f98:	4770      	bx	lr

00018f9a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18f9a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   18f9c:	f013 0307 	ands.w	r3, r3, #7
   18fa0:	d105      	bne.n	18fae <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   18fa2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   18fa4:	2b00      	cmp	r3, #0
   18fa6:	bf0c      	ite	eq
   18fa8:	2000      	moveq	r0, #0
   18faa:	2003      	movne	r0, #3
   18fac:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   18fae:	2b02      	cmp	r3, #2
   18fb0:	d105      	bne.n	18fbe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   18fb2:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   18fb4:	2b00      	cmp	r3, #0
   18fb6:	bf14      	ite	ne
   18fb8:	2000      	movne	r0, #0
   18fba:	2004      	moveq	r0, #4
   18fbc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   18fbe:	2b01      	cmp	r3, #1
   18fc0:	d105      	bne.n	18fce <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   18fc2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   18fc4:	2b00      	cmp	r3, #0
   18fc6:	bf0c      	ite	eq
   18fc8:	2000      	moveq	r0, #0
   18fca:	2005      	movne	r0, #5
   18fcc:	4770      	bx	lr
	int evt = EVT_NOP;
   18fce:	2000      	movs	r0, #0
}
   18fd0:	4770      	bx	lr

00018fd2 <notify_one>:
{
   18fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fd6:	460d      	mov	r5, r1
   18fd8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18fda:	4619      	mov	r1, r3
   18fdc:	1d28      	adds	r0, r5, #4
{
   18fde:	4690      	mov	r8, r2
   18fe0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18fe2:	f7ff ff92 	bl	18f0a <sys_notify_finalize>
	if (cb) {
   18fe6:	4604      	mov	r4, r0
   18fe8:	b138      	cbz	r0, 18ffa <notify_one+0x28>
		cb(mgr, cli, state, res);
   18fea:	4633      	mov	r3, r6
   18fec:	4642      	mov	r2, r8
   18fee:	4629      	mov	r1, r5
   18ff0:	4638      	mov	r0, r7
   18ff2:	46a4      	mov	ip, r4
}
   18ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   18ff8:	4760      	bx	ip
}
   18ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018ffe <transition_complete>:
{
   18ffe:	b410      	push	{r4}
	__asm__ volatile(
   19000:	f04f 0420 	mov.w	r4, #32
   19004:	f3ef 8211 	mrs	r2, BASEPRI
   19008:	f384 8812 	msr	BASEPRI_MAX, r4
   1900c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19010:	6141      	str	r1, [r0, #20]
}
   19012:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   19014:	2101      	movs	r1, #1
   19016:	f7e8 bdf5 	b.w	1c04 <process_event>

0001901a <validate_args>:
{
   1901a:	b510      	push	{r4, lr}
   1901c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1901e:	b140      	cbz	r0, 19032 <validate_args+0x18>
   19020:	b139      	cbz	r1, 19032 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19022:	1d08      	adds	r0, r1, #4
   19024:	f7ff ff5d 	bl	18ee2 <sys_notify_validate>
	if ((rv == 0)
   19028:	b928      	cbnz	r0, 19036 <validate_args+0x1c>
	    && ((cli->notify.flags
   1902a:	68a3      	ldr	r3, [r4, #8]
   1902c:	f033 0303 	bics.w	r3, r3, #3
   19030:	d001      	beq.n	19036 <validate_args+0x1c>
		rv = -EINVAL;
   19032:	f06f 0015 	mvn.w	r0, #21
}
   19036:	bd10      	pop	{r4, pc}

00019038 <onoff_manager_init>:
{
   19038:	b538      	push	{r3, r4, r5, lr}
   1903a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1903c:	4605      	mov	r5, r0
   1903e:	b158      	cbz	r0, 19058 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19040:	b151      	cbz	r1, 19058 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19042:	680b      	ldr	r3, [r1, #0]
   19044:	b143      	cbz	r3, 19058 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19046:	684b      	ldr	r3, [r1, #4]
   19048:	b133      	cbz	r3, 19058 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1904a:	221c      	movs	r2, #28
   1904c:	2100      	movs	r1, #0
   1904e:	f001 fc0b 	bl	1a868 <memset>
   19052:	612c      	str	r4, [r5, #16]
	return 0;
   19054:	2000      	movs	r0, #0
}
   19056:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19058:	f06f 0015 	mvn.w	r0, #21
   1905c:	e7fb      	b.n	19056 <onoff_manager_init+0x1e>

0001905e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1905e:	b570      	push	{r4, r5, r6, lr}
   19060:	4604      	mov	r4, r0
   19062:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19064:	f7ff ffd9 	bl	1901a <validate_args>

	if (rv < 0) {
   19068:	1e05      	subs	r5, r0, #0
   1906a:	db31      	blt.n	190d0 <onoff_request+0x72>
   1906c:	f04f 0320 	mov.w	r3, #32
   19070:	f3ef 8111 	mrs	r1, BASEPRI
   19074:	f383 8812 	msr	BASEPRI_MAX, r3
   19078:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1907c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1907e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   19080:	f64f 75ff 	movw	r5, #65535	; 0xffff
   19084:	42ab      	cmp	r3, r5
   19086:	f000 0207 	and.w	r2, r0, #7
   1908a:	d02e      	beq.n	190ea <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1908c:	2a02      	cmp	r2, #2
   1908e:	d10e      	bne.n	190ae <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   19090:	3301      	adds	r3, #1
   19092:	8363      	strh	r3, [r4, #26]
	rv = state;
   19094:	4615      	mov	r5, r2
		notify = true;
   19096:	2301      	movs	r3, #1
	__asm__ volatile(
   19098:	f381 8811 	msr	BASEPRI, r1
   1909c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   190a0:	b1b3      	cbz	r3, 190d0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   190a2:	2300      	movs	r3, #0
   190a4:	4631      	mov	r1, r6
   190a6:	4620      	mov	r0, r4
   190a8:	f7ff ff93 	bl	18fd2 <notify_one>
   190ac:	e010      	b.n	190d0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   190ae:	0783      	lsls	r3, r0, #30
   190b0:	d001      	beq.n	190b6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   190b2:	2a06      	cmp	r2, #6
   190b4:	d10e      	bne.n	190d4 <onoff_request+0x76>
	parent->next = child;
   190b6:	2300      	movs	r3, #0
   190b8:	6033      	str	r3, [r6, #0]
	return list->tail;
   190ba:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   190bc:	b993      	cbnz	r3, 190e4 <onoff_request+0x86>
	list->head = node;
   190be:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   190c2:	4615      	mov	r5, r2
   190c4:	b962      	cbnz	r2, 190e0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   190c6:	460a      	mov	r2, r1
   190c8:	4620      	mov	r0, r4
   190ca:	2102      	movs	r1, #2
   190cc:	f7e8 fd9a 	bl	1c04 <process_event>
		}
	}

	return rv;
}
   190d0:	4628      	mov	r0, r5
   190d2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   190d4:	2a05      	cmp	r2, #5
   190d6:	bf0c      	ite	eq
   190d8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   190dc:	f06f 0504 	mvnne.w	r5, #4
   190e0:	2300      	movs	r3, #0
   190e2:	e7d9      	b.n	19098 <onoff_request+0x3a>
	parent->next = child;
   190e4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   190e6:	6066      	str	r6, [r4, #4]
}
   190e8:	e7eb      	b.n	190c2 <onoff_request+0x64>
		rv = -EAGAIN;
   190ea:	f06f 050a 	mvn.w	r5, #10
   190ee:	e7f7      	b.n	190e0 <onoff_request+0x82>

000190f0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   190f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   190f2:	f04f 0320 	mov.w	r3, #32
   190f6:	f3ef 8211 	mrs	r2, BASEPRI
   190fa:	f383 8812 	msr	BASEPRI_MAX, r3
   190fe:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19102:	8b04      	ldrh	r4, [r0, #24]
   19104:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   19108:	2c02      	cmp	r4, #2
   1910a:	d00a      	beq.n	19122 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1910c:	2c01      	cmp	r4, #1
   1910e:	bf0c      	ite	eq
   19110:	f06f 0004 	mvneq.w	r0, #4
   19114:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   19118:	f382 8811 	msr	BASEPRI, r2
   1911c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   19120:	e008      	b.n	19134 <onoff_release+0x44>
	mgr->refs -= 1U;
   19122:	8b43      	ldrh	r3, [r0, #26]
   19124:	3b01      	subs	r3, #1
   19126:	b29b      	uxth	r3, r3
   19128:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1912a:	b923      	cbnz	r3, 19136 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1912c:	4621      	mov	r1, r4
   1912e:	f7e8 fd69 	bl	1c04 <process_event>
	int rv = state;
   19132:	4620      	mov	r0, r4
}
   19134:	bd10      	pop	{r4, pc}
	int rv = state;
   19136:	4620      	mov	r0, r4
   19138:	e7ee      	b.n	19118 <onoff_release+0x28>

0001913a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1913a:	4604      	mov	r4, r0
   1913c:	b508      	push	{r3, lr}
   1913e:	4608      	mov	r0, r1
   19140:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   19142:	461a      	mov	r2, r3
   19144:	47a0      	blx	r4
	return z_impl_z_current_get();
   19146:	f7ff fbbf 	bl	188c8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1914a:	f7e9 ff61 	bl	3010 <z_impl_k_thread_abort>

0001914e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1914e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   19152:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   19154:	0840      	lsrs	r0, r0, #1
   19156:	4770      	bx	lr

00019158 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   19158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1915a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1915c:	f7ff fff7 	bl	1914e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   19160:	fab0 f080 	clz	r0, r0
   19164:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   19168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1916c:	00ca      	lsls	r2, r1, #3
   1916e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   19172:	1d17      	adds	r7, r2, #4
{
   19174:	460c      	mov	r4, r1
   19176:	3206      	adds	r2, #6
   19178:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1917a:	b956      	cbnz	r6, 19192 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1917c:	2101      	movs	r1, #1
   1917e:	fa01 f000 	lsl.w	r0, r1, r0
   19182:	68d9      	ldr	r1, [r3, #12]
   19184:	4301      	orrs	r1, r0
   19186:	60d9      	str	r1, [r3, #12]
		b->next = c;
   19188:	f8cc 4010 	str.w	r4, [ip, #16]
   1918c:	53dd      	strh	r5, [r3, r7]
   1918e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   19190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   19192:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   19194:	3104      	adds	r1, #4
   19196:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   19198:	53d8      	strh	r0, [r3, r7]
   1919a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1919e:	529e      	strh	r6, [r3, r2]
   191a0:	80c5      	strh	r5, [r0, #6]
   191a2:	525d      	strh	r5, [r3, r1]
   191a4:	e7f4      	b.n	19190 <free_list_add+0x38>

000191a6 <free_list_remove_bidx>:
{
   191a6:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   191a8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   191ac:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   191ae:	4299      	cmp	r1, r3
   191b0:	f102 0104 	add.w	r1, r2, #4
   191b4:	d10a      	bne.n	191cc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   191b6:	2301      	movs	r3, #1
   191b8:	fa03 f202 	lsl.w	r2, r3, r2
   191bc:	68c3      	ldr	r3, [r0, #12]
   191be:	ea23 0302 	bic.w	r3, r3, r2
   191c2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   191c4:	2300      	movs	r3, #0
   191c6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   191ca:	bd10      	pop	{r4, pc}
   191cc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   191ce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   191d2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   191d6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   191da:	80cb      	strh	r3, [r1, #6]
   191dc:	8082      	strh	r2, [r0, #4]
}
   191de:	e7f4      	b.n	191ca <free_list_remove_bidx+0x24>

000191e0 <free_list_remove>:
{
   191e0:	b508      	push	{r3, lr}
   191e2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   191e4:	f7ff ffb3 	bl	1914e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   191e8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   191ec:	f1c2 021f 	rsb	r2, r2, #31
   191f0:	4618      	mov	r0, r3
}
   191f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   191f6:	f7ff bfd6 	b.w	191a6 <free_list_remove_bidx>

000191fa <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   191fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191fe:	fab1 f581 	clz	r5, r1
   19202:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   19206:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1920a:	4603      	mov	r3, r0
	if (b->next) {
   1920c:	693a      	ldr	r2, [r7, #16]
{
   1920e:	460e      	mov	r6, r1
	if (b->next) {
   19210:	b1c2      	cbz	r2, 19244 <alloc_chunk+0x4a>
   19212:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   19216:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   19218:	4618      	mov	r0, r3
   1921a:	4621      	mov	r1, r4
   1921c:	f7ff ff97 	bl	1914e <chunk_size>
   19220:	42b0      	cmp	r0, r6
   19222:	d306      	bcc.n	19232 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   19224:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   19226:	4618      	mov	r0, r3
   19228:	f7ff ffbd 	bl	191a6 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1922c:	4620      	mov	r0, r4
   1922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   19232:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   19236:	f1b8 0801 	subs.w	r8, r8, #1
   1923a:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1923c:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1923e:	d001      	beq.n	19244 <alloc_chunk+0x4a>
   19240:	4282      	cmp	r2, r0
   19242:	d1e8      	bne.n	19216 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   19244:	f1c5 0220 	rsb	r2, r5, #32
   19248:	f04f 34ff 	mov.w	r4, #4294967295
   1924c:	4094      	lsls	r4, r2
   1924e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   19250:	4014      	ands	r4, r2
   19252:	d0eb      	beq.n	1922c <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   19254:	fa94 f2a4 	rbit	r2, r4
   19258:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1925c:	1d11      	adds	r1, r2, #4
   1925e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   19262:	4621      	mov	r1, r4
   19264:	e7df      	b.n	19226 <alloc_chunk+0x2c>

00019266 <merge_chunks>:
{
   19266:	b538      	push	{r3, r4, r5, lr}
   19268:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1926a:	f7ff ff70 	bl	1914e <chunk_size>
{
   1926e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19270:	4604      	mov	r4, r0
   19272:	4611      	mov	r1, r2
   19274:	4618      	mov	r0, r3
   19276:	f7ff ff6a 	bl	1914e <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1927a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1927e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19280:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   19282:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   19284:	4618      	mov	r0, r3
   19286:	f7ff ff62 	bl	1914e <chunk_size>
	void *cmem = &buf[c];
   1928a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1928c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   19290:	bd38      	pop	{r3, r4, r5, pc}

00019292 <split_chunks>:
{
   19292:	b538      	push	{r3, r4, r5, lr}
   19294:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   19296:	f7ff ff5a 	bl	1914e <chunk_size>
{
   1929a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1929c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1929e:	1a51      	subs	r1, r2, r1
   192a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   192a4:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   192a6:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   192a8:	8060      	strh	r0, [r4, #2]
   192aa:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   192ae:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   192b0:	8044      	strh	r4, [r0, #2]
   192b2:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   192b6:	4618      	mov	r0, r3
   192b8:	4611      	mov	r1, r2
   192ba:	f7ff ff48 	bl	1914e <chunk_size>
	void *cmem = &buf[c];
   192be:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   192c0:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   192c4:	bd38      	pop	{r3, r4, r5, pc}

000192c6 <free_chunk>:
{
   192c6:	b538      	push	{r3, r4, r5, lr}
   192c8:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   192ca:	f7ff ff40 	bl	1914e <chunk_size>
   192ce:	460c      	mov	r4, r1
   192d0:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   192d2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   192d6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   192d8:	07da      	lsls	r2, r3, #31
   192da:	d40a      	bmi.n	192f2 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   192dc:	4628      	mov	r0, r5
   192de:	f7ff ff7f 	bl	191e0 <free_list_remove>
	return c + chunk_size(h, c);
   192e2:	4621      	mov	r1, r4
   192e4:	4628      	mov	r0, r5
   192e6:	f7ff ff32 	bl	1914e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   192ea:	1822      	adds	r2, r4, r0
   192ec:	4628      	mov	r0, r5
   192ee:	f7ff ffba 	bl	19266 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   192f2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   192f6:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   192f8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   192fc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   192fe:	07db      	lsls	r3, r3, #31
   19300:	d40c      	bmi.n	1931c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   19302:	4628      	mov	r0, r5
   19304:	f7ff ff6c 	bl	191e0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   19308:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1930c:	4622      	mov	r2, r4
   1930e:	1a61      	subs	r1, r4, r1
   19310:	4628      	mov	r0, r5
   19312:	f7ff ffa8 	bl	19266 <merge_chunks>
   19316:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1931a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1931c:	4621      	mov	r1, r4
   1931e:	4628      	mov	r0, r5
}
   19320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   19324:	f7ff bf18 	b.w	19158 <free_list_add>

00019328 <sys_heap_free>:
	if (mem == NULL) {
   19328:	b161      	cbz	r1, 19344 <sys_heap_free+0x1c>
   1932a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1932c:	3904      	subs	r1, #4
   1932e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   19330:	f021 0307 	bic.w	r3, r1, #7
   19334:	4403      	add	r3, r0
	free_chunk(h, c);
   19336:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19338:	885a      	ldrh	r2, [r3, #2]
   1933a:	f022 0201 	bic.w	r2, r2, #1
   1933e:	805a      	strh	r2, [r3, #2]
   19340:	f7ff bfc1 	b.w	192c6 <free_chunk>
}
   19344:	4770      	bx	lr

00019346 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   19346:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19348:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1934a:	b909      	cbnz	r1, 19350 <sys_heap_alloc+0xa>
		return NULL;
   1934c:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1934e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   19350:	68ab      	ldr	r3, [r5, #8]
   19352:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   19356:	d9f9      	bls.n	1934c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19358:	310b      	adds	r1, #11
   1935a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1935c:	4621      	mov	r1, r4
   1935e:	4628      	mov	r0, r5
   19360:	f7ff ff4b 	bl	191fa <alloc_chunk>
	if (c == 0U) {
   19364:	4606      	mov	r6, r0
   19366:	2800      	cmp	r0, #0
   19368:	d0f0      	beq.n	1934c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1936a:	4601      	mov	r1, r0
   1936c:	4628      	mov	r0, r5
   1936e:	f7ff feee 	bl	1914e <chunk_size>
   19372:	42a0      	cmp	r0, r4
   19374:	d907      	bls.n	19386 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   19376:	1932      	adds	r2, r6, r4
   19378:	4628      	mov	r0, r5
   1937a:	f7ff ff8a 	bl	19292 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1937e:	4611      	mov	r1, r2
   19380:	4628      	mov	r0, r5
   19382:	f7ff fee9 	bl	19158 <free_list_add>
	void *cmem = &buf[c];
   19386:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1938a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1938c:	8853      	ldrh	r3, [r2, #2]
   1938e:	f043 0301 	orr.w	r3, r3, #1
   19392:	8053      	strh	r3, [r2, #2]
   19394:	3004      	adds	r0, #4
	return mem;
   19396:	e7da      	b.n	1934e <sys_heap_alloc+0x8>

00019398 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   19398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1939c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1939e:	424a      	negs	r2, r1
   193a0:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   193a4:	ea31 0202 	bics.w	r2, r1, r2
{
   193a8:	4603      	mov	r3, r0
	if (align != rew) {
   193aa:	d00a      	beq.n	193c2 <sys_heap_aligned_alloc+0x2a>
		return false;
   193ac:	2f04      	cmp	r7, #4
   193ae:	463a      	mov	r2, r7
   193b0:	46b9      	mov	r9, r7
   193b2:	bf28      	it	cs
   193b4:	2204      	movcs	r2, #4
		align -= rew;
   193b6:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   193b8:	b974      	cbnz	r4, 193d8 <sys_heap_aligned_alloc+0x40>
		return NULL;
   193ba:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   193bc:	4628      	mov	r0, r5
   193be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   193c2:	2904      	cmp	r1, #4
   193c4:	d804      	bhi.n	193d0 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   193c6:	4621      	mov	r1, r4
}
   193c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   193cc:	f7ff bfbb 	b.w	19346 <sys_heap_alloc>
		rew = 0;
   193d0:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   193d4:	2204      	movs	r2, #4
   193d6:	e7ef      	b.n	193b8 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   193d8:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   193da:	68b3      	ldr	r3, [r6, #8]
   193dc:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   193e0:	d9eb      	bls.n	193ba <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   193e2:	f104 010b 	add.w	r1, r4, #11
   193e6:	4439      	add	r1, r7
   193e8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   193ea:	08c9      	lsrs	r1, r1, #3
   193ec:	4630      	mov	r0, r6
   193ee:	f7ff ff04 	bl	191fa <alloc_chunk>
	if (c0 == 0) {
   193f2:	4680      	mov	r8, r0
   193f4:	2800      	cmp	r0, #0
   193f6:	d0e0      	beq.n	193ba <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   193f8:	f109 0504 	add.w	r5, r9, #4
   193fc:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   19400:	1e7b      	subs	r3, r7, #1
   19402:	4435      	add	r5, r6
   19404:	441d      	add	r5, r3
   19406:	427f      	negs	r7, r7
   19408:	403d      	ands	r5, r7
   1940a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1940e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19410:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19412:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19414:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19416:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1941a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1941c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19420:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   19424:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   19428:	d208      	bcs.n	1943c <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1942a:	4601      	mov	r1, r0
   1942c:	463a      	mov	r2, r7
   1942e:	4630      	mov	r0, r6
   19430:	f7ff ff2f 	bl	19292 <split_chunks>
		free_list_add(h, c0);
   19434:	4641      	mov	r1, r8
   19436:	4630      	mov	r0, r6
   19438:	f7ff fe8e 	bl	19158 <free_list_add>
	return c + chunk_size(h, c);
   1943c:	4639      	mov	r1, r7
   1943e:	4630      	mov	r0, r6
   19440:	f7ff fe85 	bl	1914e <chunk_size>
   19444:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   19446:	4284      	cmp	r4, r0
   19448:	d207      	bcs.n	1945a <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1944a:	4630      	mov	r0, r6
   1944c:	4622      	mov	r2, r4
   1944e:	f7ff ff20 	bl	19292 <split_chunks>
		free_list_add(h, c_end);
   19452:	4621      	mov	r1, r4
   19454:	4630      	mov	r0, r6
   19456:	f7ff fe7f 	bl	19158 <free_list_add>
	void *cmem = &buf[c];
   1945a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1945e:	8873      	ldrh	r3, [r6, #2]
   19460:	f043 0301 	orr.w	r3, r3, #1
   19464:	8073      	strh	r3, [r6, #2]
   19466:	e7a9      	b.n	193bc <sys_heap_aligned_alloc+0x24>

00019468 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   19468:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1946a:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1946c:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1946e:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19472:	f021 0107 	bic.w	r1, r1, #7
{
   19476:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   19478:	1acd      	subs	r5, r1, r3
   1947a:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1947c:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1947e:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   19482:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   19486:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19488:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1948a:	2600      	movs	r6, #0
   1948c:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1948e:	f1c0 0020 	rsb	r0, r0, #32
   19492:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   19496:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   19498:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1949a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1949e:	4284      	cmp	r4, r0
   194a0:	d118      	bne.n	194d4 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   194a2:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   194a4:	f040 0001 	orr.w	r0, r0, #1
   194a8:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   194aa:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   194ae:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   194b0:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   194b2:	801e      	strh	r6, [r3, #0]
   194b4:	8067      	strh	r7, [r4, #2]
   194b6:	195c      	adds	r4, r3, r5
   194b8:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   194bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   194c0:	8066      	strh	r6, [r4, #2]
   194c2:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   194c4:	8850      	ldrh	r0, [r2, #2]
   194c6:	f040 0001 	orr.w	r0, r0, #1
   194ca:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   194cc:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   194ce:	4618      	mov	r0, r3
   194d0:	f7ff be42 	b.w	19158 <free_list_add>
		h->buckets[i].next = 0;
   194d4:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   194d8:	e7e1      	b.n	1949e <sys_heap_init+0x36>

000194da <encode_uint>:
{
   194da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194de:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   194e0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   194e2:	2b6f      	cmp	r3, #111	; 0x6f
{
   194e4:	4680      	mov	r8, r0
   194e6:	460f      	mov	r7, r1
   194e8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   194ea:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   194ee:	d029      	beq.n	19544 <encode_uint+0x6a>
   194f0:	d824      	bhi.n	1953c <encode_uint+0x62>
		return 16;
   194f2:	2b58      	cmp	r3, #88	; 0x58
   194f4:	bf14      	ite	ne
   194f6:	260a      	movne	r6, #10
   194f8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   194fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   194fe:	4632      	mov	r2, r6
   19500:	2300      	movs	r3, #0
   19502:	4640      	mov	r0, r8
   19504:	4639      	mov	r1, r7
   19506:	f7e6 fdfb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1950a:	2a09      	cmp	r2, #9
   1950c:	b2d4      	uxtb	r4, r2
   1950e:	d81e      	bhi.n	1954e <encode_uint+0x74>
   19510:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19512:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19514:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19516:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1951a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1951e:	d301      	bcc.n	19524 <encode_uint+0x4a>
   19520:	45d1      	cmp	r9, sl
   19522:	d811      	bhi.n	19548 <encode_uint+0x6e>
	if (conv->flag_hash) {
   19524:	782b      	ldrb	r3, [r5, #0]
   19526:	069b      	lsls	r3, r3, #26
   19528:	d505      	bpl.n	19536 <encode_uint+0x5c>
		if (radix == 8) {
   1952a:	2e08      	cmp	r6, #8
   1952c:	d115      	bne.n	1955a <encode_uint+0x80>
			conv->altform_0 = true;
   1952e:	78ab      	ldrb	r3, [r5, #2]
   19530:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19534:	70ab      	strb	r3, [r5, #2]
}
   19536:	4648      	mov	r0, r9
   19538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1953c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19540:	2b70      	cmp	r3, #112	; 0x70
   19542:	e7d7      	b.n	194f4 <encode_uint+0x1a>
	switch (specifier) {
   19544:	2608      	movs	r6, #8
   19546:	e7d8      	b.n	194fa <encode_uint+0x20>
		value /= radix;
   19548:	4680      	mov	r8, r0
   1954a:	460f      	mov	r7, r1
   1954c:	e7d7      	b.n	194fe <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1954e:	f1bb 0f19 	cmp.w	fp, #25
   19552:	bf94      	ite	ls
   19554:	3437      	addls	r4, #55	; 0x37
   19556:	3457      	addhi	r4, #87	; 0x57
   19558:	e7db      	b.n	19512 <encode_uint+0x38>
		} else if (radix == 16) {
   1955a:	2e10      	cmp	r6, #16
   1955c:	d1eb      	bne.n	19536 <encode_uint+0x5c>
			conv->altform_0c = true;
   1955e:	78ab      	ldrb	r3, [r5, #2]
   19560:	f043 0310 	orr.w	r3, r3, #16
   19564:	e7e6      	b.n	19534 <encode_uint+0x5a>

00019566 <outs>:
{
   19566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1956a:	4607      	mov	r7, r0
   1956c:	4688      	mov	r8, r1
   1956e:	4615      	mov	r5, r2
   19570:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19572:	4614      	mov	r4, r2
   19574:	42b4      	cmp	r4, r6
   19576:	eba4 0005 	sub.w	r0, r4, r5
   1957a:	d302      	bcc.n	19582 <outs+0x1c>
   1957c:	b93e      	cbnz	r6, 1958e <outs+0x28>
   1957e:	7823      	ldrb	r3, [r4, #0]
   19580:	b12b      	cbz	r3, 1958e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19582:	f814 0b01 	ldrb.w	r0, [r4], #1
   19586:	4641      	mov	r1, r8
   19588:	47b8      	blx	r7
		if (rc < 0) {
   1958a:	2800      	cmp	r0, #0
   1958c:	daf2      	bge.n	19574 <outs+0xe>
}
   1958e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019592 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   19592:	b40f      	push	{r0, r1, r2, r3}
   19594:	b507      	push	{r0, r1, r2, lr}
   19596:	a904      	add	r1, sp, #16
   19598:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1959c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1959e:	f7e8 fb0d 	bl	1bbc <vprintk>

	va_end(ap);
}
   195a2:	b003      	add	sp, #12
   195a4:	f85d eb04 	ldr.w	lr, [sp], #4
   195a8:	b004      	add	sp, #16
   195aa:	4770      	bx	lr

000195ac <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   195ac:	4770      	bx	lr

000195ae <blvl_ccc_cfg_changed>:
}
   195ae:	4770      	bx	lr

000195b0 <bas_init>:
}
   195b0:	2000      	movs	r0, #0
   195b2:	4770      	bx	lr

000195b4 <hrmc_ccc_cfg_changed>:
}
   195b4:	4770      	bx	lr

000195b6 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   195b6:	b538      	push	{r3, r4, r5, lr}
   195b8:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   195ba:	42ab      	cmp	r3, r5
{
   195bc:	4611      	mov	r1, r2
   195be:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   195c0:	d804      	bhi.n	195cc <_copy+0x16>
		(void)memcpy(to, from, from_len);
   195c2:	461a      	mov	r2, r3
   195c4:	f001 f945 	bl	1a852 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   195c8:	4620      	mov	r0, r4
   195ca:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   195cc:	2400      	movs	r4, #0
   195ce:	e7fb      	b.n	195c8 <_copy+0x12>

000195d0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   195d0:	f001 b94a 	b.w	1a868 <memset>

000195d4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   195d4:	09c3      	lsrs	r3, r0, #7
   195d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   195da:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   195de:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   195e2:	b2c0      	uxtb	r0, r0
   195e4:	4770      	bx	lr

000195e6 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   195e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   195ea:	4606      	mov	r6, r0
   195ec:	b0a9      	sub	sp, #164	; 0xa4
   195ee:	4688      	mov	r8, r1
   195f0:	4614      	mov	r4, r2
   195f2:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   195f4:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   195f8:	f7e9 f956 	bl	28a8 <uECC_get_rng>
		if (!rng_function ||
   195fc:	4603      	mov	r3, r0
   195fe:	2800      	cmp	r0, #0
   19600:	d03e      	beq.n	19680 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   19602:	2140      	movs	r1, #64	; 0x40
   19604:	a808      	add	r0, sp, #32
   19606:	4798      	blx	r3
		if (!rng_function ||
   19608:	b3d0      	cbz	r0, 19680 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1960a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1960e:	f112 031f 	adds.w	r3, r2, #31
   19612:	bf48      	it	mi
   19614:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   19618:	466d      	mov	r5, sp
   1961a:	464a      	mov	r2, r9
   1961c:	a908      	add	r1, sp, #32
   1961e:	4628      	mov	r0, r5
   19620:	f343 1347 	sbfx	r3, r3, #5, #8
   19624:	f000 f9ee 	bl	19a04 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   19628:	4622      	mov	r2, r4
   1962a:	4629      	mov	r1, r5
   1962c:	a818      	add	r0, sp, #96	; 0x60
   1962e:	f000 fe03 	bl	1a238 <EccPoint_compute_public_key>
   19632:	b318      	cbz	r0, 1967c <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   19634:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   19638:	1dd9      	adds	r1, r3, #7
   1963a:	bf48      	it	mi
   1963c:	f103 010e 	addmi.w	r1, r3, #14
   19640:	462a      	mov	r2, r5
   19642:	4640      	mov	r0, r8
   19644:	10c9      	asrs	r1, r1, #3
   19646:	f000 fe1f 	bl	1a288 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1964a:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1964e:	aa18      	add	r2, sp, #96	; 0x60
   19650:	4630      	mov	r0, r6
   19652:	f000 fe19 	bl	1a288 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   19656:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1965a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1965e:	ab18      	add	r3, sp, #96	; 0x60
   19660:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   19664:	1870      	adds	r0, r6, r1
   19666:	f000 fe0f 	bl	1a288 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1966a:	2220      	movs	r2, #32
   1966c:	2100      	movs	r1, #0
   1966e:	4628      	mov	r0, r5
   19670:	f001 f8fa 	bl	1a868 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   19674:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   19676:	b029      	add	sp, #164	; 0xa4
   19678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1967c:	3f01      	subs	r7, #1
   1967e:	d1bb      	bne.n	195f8 <uECC_make_key+0x12>
        		return 0;
   19680:	2000      	movs	r0, #0
   19682:	e7f8      	b.n	19676 <uECC_make_key+0x90>

00019684 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   19684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19688:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1968a:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1968e:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   19692:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   19696:	b0a4      	sub	sp, #144	; 0x90
   19698:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1969a:	1dda      	adds	r2, r3, #7
   1969c:	bf48      	it	mi
   1969e:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   196a2:	ad04      	add	r5, sp, #16
{
   196a4:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   196a6:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   196a8:	4628      	mov	r0, r5
   196aa:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   196ac:	9502      	str	r5, [sp, #8]
   196ae:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   196b0:	f000 fdfe 	bl	1a2b0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   196b4:	463a      	mov	r2, r7
   196b6:	4649      	mov	r1, r9
   196b8:	a814      	add	r0, sp, #80	; 0x50
   196ba:	f000 fdf9 	bl	1a2b0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   196be:	ab14      	add	r3, sp, #80	; 0x50
   196c0:	eb09 0107 	add.w	r1, r9, r7
   196c4:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   196c8:	463a      	mov	r2, r7
   196ca:	f000 fdf1 	bl	1a2b0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   196ce:	4623      	mov	r3, r4
   196d0:	4632      	mov	r2, r6
   196d2:	4629      	mov	r1, r5
   196d4:	4628      	mov	r0, r5
   196d6:	f000 fd83 	bl	1a1e0 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   196da:	fab0 f380 	clz	r3, r0
   196de:	9401      	str	r4, [sp, #4]
   196e0:	aa24      	add	r2, sp, #144	; 0x90
   196e2:	095b      	lsrs	r3, r3, #5
   196e4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   196e8:	8863      	ldrh	r3, [r4, #2]
   196ea:	3301      	adds	r3, #1
   196ec:	b21b      	sxth	r3, r3
   196ee:	9300      	str	r3, [sp, #0]
   196f0:	f851 2c88 	ldr.w	r2, [r1, #-136]
   196f4:	a914      	add	r1, sp, #80	; 0x50
   196f6:	2300      	movs	r3, #0
   196f8:	4608      	mov	r0, r1
   196fa:	f000 fca4 	bl	1a046 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   196fe:	aa14      	add	r2, sp, #80	; 0x50
   19700:	4639      	mov	r1, r7
   19702:	4640      	mov	r0, r8
   19704:	f000 fdc0 	bl	1a288 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   19708:	4621      	mov	r1, r4
   1970a:	a814      	add	r0, sp, #80	; 0x50
   1970c:	f000 fc10 	bl	19f30 <EccPoint_isZero>
   19710:	af02      	add	r7, sp, #8
   19712:	4604      	mov	r4, r0
   19714:	2208      	movs	r2, #8
   19716:	2100      	movs	r1, #0
   19718:	4638      	mov	r0, r7
   1971a:	f001 f8a5 	bl	1a868 <memset>
   1971e:	2220      	movs	r2, #32
   19720:	2100      	movs	r1, #0
   19722:	4630      	mov	r0, r6
   19724:	f001 f8a0 	bl	1a868 <memset>
   19728:	2220      	movs	r2, #32
   1972a:	2100      	movs	r1, #0
   1972c:	4628      	mov	r0, r5
   1972e:	f001 f89b 	bl	1a868 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   19732:	fab4 f084 	clz	r0, r4
   19736:	0940      	lsrs	r0, r0, #5
   19738:	b024      	add	sp, #144	; 0x90
   1973a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001973e <uECC_vli_add>:
{
   1973e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   19740:	2400      	movs	r4, #0
{
   19742:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   19744:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   19746:	b265      	sxtb	r5, r4
   19748:	42ab      	cmp	r3, r5
   1974a:	dc00      	bgt.n	1974e <uECC_vli_add+0x10>
}
   1974c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1974e:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   19752:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   19756:	443d      	add	r5, r7
   19758:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   1975a:	42af      	cmp	r7, r5
   1975c:	f000 0001 	and.w	r0, r0, #1
   19760:	bf18      	it	ne
   19762:	2000      	movne	r0, #0
		result[i] = sum;
   19764:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   19768:	bf88      	it	hi
   1976a:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1976e:	3401      	adds	r4, #1
   19770:	e7e9      	b.n	19746 <uECC_vli_add+0x8>

00019772 <uECC_vli_rshift1>:
	vli += num_words;
   19772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   19776:	2300      	movs	r3, #0
	while (vli-- > end) {
   19778:	4288      	cmp	r0, r1
   1977a:	d300      	bcc.n	1977e <uECC_vli_rshift1+0xc>
}
   1977c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1977e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   19782:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   19786:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   19788:	07d3      	lsls	r3, r2, #31
   1978a:	e7f5      	b.n	19778 <uECC_vli_rshift1+0x6>

0001978c <vli_modInv_update>:
	if (!EVEN(uv)) {
   1978c:	6803      	ldr	r3, [r0, #0]
{
   1978e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   19790:	f013 0601 	ands.w	r6, r3, #1
{
   19794:	4605      	mov	r5, r0
   19796:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   19798:	d005      	beq.n	197a6 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1979a:	4613      	mov	r3, r2
   1979c:	460a      	mov	r2, r1
   1979e:	4601      	mov	r1, r0
   197a0:	f7ff ffcd 	bl	1973e <uECC_vli_add>
   197a4:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   197a6:	4621      	mov	r1, r4
   197a8:	4628      	mov	r0, r5
   197aa:	f7ff ffe2 	bl	19772 <uECC_vli_rshift1>
	if (carry) {
   197ae:	b146      	cbz	r6, 197c2 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   197b0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   197b4:	3a01      	subs	r2, #1
   197b6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   197ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   197be:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   197c2:	bd70      	pop	{r4, r5, r6, pc}

000197c4 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   197c4:	f04f 0c00 	mov.w	ip, #0
{
   197c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   197cc:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   197ce:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   197d0:	fa4f f98c 	sxtb.w	r9, ip
   197d4:	454b      	cmp	r3, r9
   197d6:	dc16      	bgt.n	19806 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   197d8:	f04f 36ff 	mov.w	r6, #4294967295
   197dc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   197e0:	9601      	str	r6, [sp, #4]
   197e2:	f04f 0800 	mov.w	r8, #0
   197e6:	9f01      	ldr	r7, [sp, #4]
   197e8:	fa53 fe88 	uxtab	lr, r3, r8
   197ec:	fa4f fe8e 	sxtb.w	lr, lr
   197f0:	45be      	cmp	lr, r7
   197f2:	fa5f f688 	uxtb.w	r6, r8
   197f6:	db26      	blt.n	19846 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   197f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   197fc:	f840 4c04 	str.w	r4, [r0, #-4]
}
   19800:	b003      	add	sp, #12
   19802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   19806:	f04f 0e00 	mov.w	lr, #0
   1980a:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   1980e:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   19810:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   19814:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   19818:	fba6 6707 	umull	r6, r7, r6, r7
   1981c:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   1981e:	f10e 0e01 	add.w	lr, lr, #1
   19822:	417d      	adcs	r5, r7
   19824:	fa4f f68e 	sxtb.w	r6, lr
   19828:	f04f 0b00 	mov.w	fp, #0
   1982c:	bf28      	it	cs
   1982e:	f04f 0b01 	movcs.w	fp, #1
   19832:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   19834:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   19836:	ddeb      	ble.n	19810 <uECC_vli_mult+0x4c>
		result[k] = r0;
   19838:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1983c:	462c      	mov	r4, r5
   1983e:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   19842:	4645      	mov	r5, r8
   19844:	e7c4      	b.n	197d0 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   19846:	3601      	adds	r6, #1
   19848:	46a9      	mov	r9, r5
   1984a:	b276      	sxtb	r6, r6
   1984c:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   19850:	2500      	movs	r5, #0
   19852:	b277      	sxtb	r7, r6
   19854:	42bb      	cmp	r3, r7
   19856:	dc05      	bgt.n	19864 <uECC_vli_mult+0xa0>
		result[k] = r0;
   19858:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1985c:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   19860:	464c      	mov	r4, r9
   19862:	e7c0      	b.n	197e6 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   19864:	f06f 0703 	mvn.w	r7, #3
   19868:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   1986a:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   1986e:	f85a 7007 	ldr.w	r7, [sl, r7]
   19872:	fba7 7c0c 	umull	r7, ip, r7, ip
   19876:	193c      	adds	r4, r7, r4
   19878:	eb5c 0909 	adcs.w	r9, ip, r9
   1987c:	f04f 0b00 	mov.w	fp, #0
   19880:	bf28      	it	cs
   19882:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   19886:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   19888:	3601      	adds	r6, #1
   1988a:	e7e2      	b.n	19852 <uECC_vli_mult+0x8e>

0001988c <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1988c:	2300      	movs	r3, #0
{
   1988e:	b510      	push	{r4, lr}
		 vli[i] = 0;
   19890:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   19892:	b25a      	sxtb	r2, r3
   19894:	4291      	cmp	r1, r2
   19896:	dc00      	bgt.n	1989a <uECC_vli_clear+0xe>
}
   19898:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1989a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1989e:	3301      	adds	r3, #1
   198a0:	e7f7      	b.n	19892 <uECC_vli_clear+0x6>

000198a2 <uECC_vli_isZero>:
{
   198a2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   198a4:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   198a6:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   198a8:	b25c      	sxtb	r4, r3
   198aa:	42a1      	cmp	r1, r4
   198ac:	dc03      	bgt.n	198b6 <uECC_vli_isZero+0x14>
}
   198ae:	fab2 f082 	clz	r0, r2
   198b2:	0940      	lsrs	r0, r0, #5
   198b4:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   198b6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   198ba:	3301      	adds	r3, #1
   198bc:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   198be:	e7f3      	b.n	198a8 <uECC_vli_isZero+0x6>

000198c0 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   198c0:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   198c2:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   198c4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   198c8:	f001 011f 	and.w	r1, r1, #31
   198cc:	fa03 f101 	lsl.w	r1, r3, r1
}
   198d0:	4008      	ands	r0, r1
   198d2:	4770      	bx	lr

000198d4 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   198d4:	3901      	subs	r1, #1
{
   198d6:	b510      	push	{r4, lr}
   198d8:	4602      	mov	r2, r0
   198da:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   198dc:	1d04      	adds	r4, r0, #4
   198de:	0608      	lsls	r0, r1, #24
   198e0:	b2cb      	uxtb	r3, r1
   198e2:	d404      	bmi.n	198ee <uECC_vli_numBits+0x1a>
   198e4:	3901      	subs	r1, #1
   198e6:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   198ea:	2800      	cmp	r0, #0
   198ec:	d0f7      	beq.n	198de <uECC_vli_numBits+0xa>
	return (i + 1);
   198ee:	3301      	adds	r3, #1
   198f0:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   198f2:	b150      	cbz	r0, 1990a <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   198f4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   198f8:	3b01      	subs	r3, #1
   198fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   198fe:	2300      	movs	r3, #0
   19900:	b922      	cbnz	r2, 1990c <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   19902:	3801      	subs	r0, #1
   19904:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   19908:	b200      	sxth	r0, r0
}
   1990a:	bd10      	pop	{r4, pc}
		digit >>= 1;
   1990c:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1990e:	3301      	adds	r3, #1
   19910:	e7f6      	b.n	19900 <uECC_vli_numBits+0x2c>

00019912 <uECC_vli_set>:
{
   19912:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   19914:	2300      	movs	r3, #0
   19916:	b25c      	sxtb	r4, r3
   19918:	42a2      	cmp	r2, r4
   1991a:	dc00      	bgt.n	1991e <uECC_vli_set+0xc>
}
   1991c:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1991e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   19922:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   19926:	3301      	adds	r3, #1
   19928:	e7f5      	b.n	19916 <uECC_vli_set+0x4>

0001992a <uECC_vli_cmp_unsafe>:
{
   1992a:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1992c:	3a01      	subs	r2, #1
   1992e:	b252      	sxtb	r2, r2
   19930:	0613      	lsls	r3, r2, #24
   19932:	d501      	bpl.n	19938 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   19934:	2000      	movs	r0, #0
}
   19936:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   19938:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1993c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   19940:	429c      	cmp	r4, r3
   19942:	d805      	bhi.n	19950 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   19944:	f102 32ff 	add.w	r2, r2, #4294967295
   19948:	d2f2      	bcs.n	19930 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   1994a:	f04f 30ff 	mov.w	r0, #4294967295
   1994e:	e7f2      	b.n	19936 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   19950:	2001      	movs	r0, #1
   19952:	e7f0      	b.n	19936 <uECC_vli_cmp_unsafe+0xc>

00019954 <uECC_vli_equal>:
{
   19954:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   19956:	3a01      	subs	r2, #1
   19958:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   1995a:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   1995c:	0614      	lsls	r4, r2, #24
   1995e:	d503      	bpl.n	19968 <uECC_vli_equal+0x14>
}
   19960:	1e18      	subs	r0, r3, #0
   19962:	bf18      	it	ne
   19964:	2001      	movne	r0, #1
   19966:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   19968:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1996c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   19970:	406c      	eors	r4, r5
   19972:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   19974:	3a01      	subs	r2, #1
   19976:	e7f1      	b.n	1995c <uECC_vli_equal+0x8>

00019978 <uECC_vli_sub>:
{
   19978:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1997a:	2400      	movs	r4, #0
{
   1997c:	4606      	mov	r6, r0
   1997e:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   19980:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   19982:	b265      	sxtb	r5, r4
   19984:	4565      	cmp	r5, ip
   19986:	db00      	blt.n	1998a <uECC_vli_sub+0x12>
}
   19988:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1998a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1998e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   19992:	1a3d      	subs	r5, r7, r0
   19994:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   19996:	42af      	cmp	r7, r5
   19998:	f000 0001 	and.w	r0, r0, #1
   1999c:	bf18      	it	ne
   1999e:	2000      	movne	r0, #0
		result[i] = diff;
   199a0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   199a4:	bf38      	it	cc
   199a6:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   199aa:	3401      	adds	r4, #1
   199ac:	e7e9      	b.n	19982 <uECC_vli_sub+0xa>

000199ae <uECC_vli_modAdd>:
{
   199ae:	b570      	push	{r4, r5, r6, lr}
   199b0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   199b4:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   199b6:	4633      	mov	r3, r6
{
   199b8:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   199ba:	f7ff fec0 	bl	1973e <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   199be:	b930      	cbnz	r0, 199ce <uECC_vli_modAdd+0x20>
   199c0:	4632      	mov	r2, r6
   199c2:	4621      	mov	r1, r4
   199c4:	4628      	mov	r0, r5
   199c6:	f7ff ffb0 	bl	1992a <uECC_vli_cmp_unsafe>
   199ca:	2801      	cmp	r0, #1
   199cc:	d007      	beq.n	199de <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   199ce:	4633      	mov	r3, r6
   199d0:	462a      	mov	r2, r5
   199d2:	4621      	mov	r1, r4
   199d4:	4620      	mov	r0, r4
}
   199d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   199da:	f7ff bfcd 	b.w	19978 <uECC_vli_sub>
}
   199de:	bd70      	pop	{r4, r5, r6, pc}

000199e0 <uECC_vli_modSub>:
{
   199e0:	b570      	push	{r4, r5, r6, lr}
   199e2:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   199e6:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   199e8:	4633      	mov	r3, r6
{
   199ea:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   199ec:	f7ff ffc4 	bl	19978 <uECC_vli_sub>
	if (l_borrow) {
   199f0:	b138      	cbz	r0, 19a02 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   199f2:	4633      	mov	r3, r6
   199f4:	462a      	mov	r2, r5
   199f6:	4621      	mov	r1, r4
   199f8:	4620      	mov	r0, r4
}
   199fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   199fe:	f7ff be9e 	b.w	1973e <uECC_vli_add>
}
   19a02:	bd70      	pop	{r4, r5, r6, pc}

00019a04 <uECC_vli_mmod>:
{
   19a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a08:	b0a5      	sub	sp, #148	; 0x94
   19a0a:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   19a0c:	ab14      	add	r3, sp, #80	; 0x50
   19a0e:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   19a12:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   19a14:	4629      	mov	r1, r5
   19a16:	4610      	mov	r0, r2
{
   19a18:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   19a1a:	f7ff ff5b 	bl	198d4 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   19a1e:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   19a22:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   19a24:	2c00      	cmp	r4, #0
   19a26:	4621      	mov	r1, r4
   19a28:	bfb8      	it	lt
   19a2a:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   19a2e:	4263      	negs	r3, r4
   19a30:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   19a34:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   19a38:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   19a3c:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   19a3e:	bf58      	it	pl
   19a40:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   19a42:	f7ff ff23 	bl	1988c <uECC_vli_clear>
	if (bit_shift > 0) {
   19a46:	2e00      	cmp	r6, #0
   19a48:	b208      	sxth	r0, r1
   19a4a:	dd2b      	ble.n	19aa4 <uECC_vli_mmod+0xa0>
   19a4c:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   19a4e:	2200      	movs	r2, #0
   19a50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   19a54:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   19a58:	4613      	mov	r3, r2
   19a5a:	429d      	cmp	r5, r3
   19a5c:	d817      	bhi.n	19a8e <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   19a5e:	006b      	lsls	r3, r5, #1
   19a60:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   19a62:	ab04      	add	r3, sp, #16
   19a64:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   19a68:	1e6f      	subs	r7, r5, #1
   19a6a:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   19a6c:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   19a6e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   19a72:	2c00      	cmp	r4, #0
   19a74:	da54      	bge.n	19b20 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   19a76:	ab24      	add	r3, sp, #144	; 0x90
   19a78:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   19a7c:	462a      	mov	r2, r5
   19a7e:	f856 1c88 	ldr.w	r1, [r6, #-136]
   19a82:	4640      	mov	r0, r8
   19a84:	f7ff ff45 	bl	19912 <uECC_vli_set>
}
   19a88:	b025      	add	sp, #148	; 0x94
   19a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   19a8e:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   19a92:	fa0c f106 	lsl.w	r1, ip, r6
   19a96:	430a      	orrs	r2, r1
   19a98:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   19a9c:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   19a9e:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   19aa2:	e7da      	b.n	19a5a <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   19aa4:	ab04      	add	r3, sp, #16
   19aa6:	462a      	mov	r2, r5
   19aa8:	4639      	mov	r1, r7
   19aaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19aae:	f7ff ff30 	bl	19912 <uECC_vli_set>
   19ab2:	e7d4      	b.n	19a5e <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   19ab4:	fa0f fe82 	sxth.w	lr, r2
   19ab8:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   19abc:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   19ac0:	ab24      	add	r3, sp, #144	; 0x90
   19ac2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   19ac6:	3001      	adds	r0, #1
   19ac8:	f852 3c80 	ldr.w	r3, [r2, #-128]
   19acc:	440b      	add	r3, r1
   19ace:	ebbb 0303 	subs.w	r3, fp, r3
   19ad2:	bf34      	ite	cc
   19ad4:	2201      	movcc	r2, #1
   19ad6:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   19ad8:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   19ada:	bf18      	it	ne
   19adc:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   19ade:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   19ae2:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   19ae6:	9b01      	ldr	r3, [sp, #4]
   19ae8:	b242      	sxtb	r2, r0
   19aea:	429a      	cmp	r2, r3
   19aec:	dbe2      	blt.n	19ab4 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   19aee:	1a73      	subs	r3, r6, r1
   19af0:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   19af2:	4629      	mov	r1, r5
   19af4:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   19af6:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   19af8:	f7ff fe3b 	bl	19772 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   19afc:	ab24      	add	r3, sp, #144	; 0x90
   19afe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   19b02:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   19b04:	f853 2c80 	ldr.w	r2, [r3, #-128]
   19b08:	f857 3c80 	ldr.w	r3, [r7, #-128]
   19b0c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   19b10:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   19b14:	4648      	mov	r0, r9
   19b16:	3c01      	subs	r4, #1
   19b18:	f7ff fe2b 	bl	19772 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   19b1c:	b224      	sxth	r4, r4
   19b1e:	e7a8      	b.n	19a72 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   19b20:	ab24      	add	r3, sp, #144	; 0x90
   19b22:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   19b24:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   19b28:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   19b2a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   19b2e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   19b32:	e7d8      	b.n	19ae6 <uECC_vli_mmod+0xe2>

00019b34 <uECC_vli_modMult_fast>:
{
   19b34:	b530      	push	{r4, r5, lr}
   19b36:	461c      	mov	r4, r3
   19b38:	b091      	sub	sp, #68	; 0x44
   19b3a:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   19b3c:	f993 3000 	ldrsb.w	r3, [r3]
   19b40:	4668      	mov	r0, sp
   19b42:	f7ff fe3f 	bl	197c4 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   19b46:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   19b4a:	4669      	mov	r1, sp
   19b4c:	4628      	mov	r0, r5
   19b4e:	4798      	blx	r3
}
   19b50:	b011      	add	sp, #68	; 0x44
   19b52:	bd30      	pop	{r4, r5, pc}

00019b54 <uECC_vli_modSquare_fast>:
{
   19b54:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   19b56:	460a      	mov	r2, r1
   19b58:	f7ff bfec 	b.w	19b34 <uECC_vli_modMult_fast>

00019b5c <double_jacobian_default>:
{
   19b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   19b60:	f993 6000 	ldrsb.w	r6, [r3]
{
   19b64:	b092      	sub	sp, #72	; 0x48
   19b66:	4604      	mov	r4, r0
   19b68:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   19b6a:	4610      	mov	r0, r2
   19b6c:	4631      	mov	r1, r6
{
   19b6e:	4615      	mov	r5, r2
   19b70:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   19b72:	f7ff fe96 	bl	198a2 <uECC_vli_isZero>
   19b76:	2800      	cmp	r0, #0
   19b78:	f040 8091 	bne.w	19c9e <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   19b7c:	463a      	mov	r2, r7
   19b7e:	4649      	mov	r1, r9
   19b80:	a802      	add	r0, sp, #8
   19b82:	f7ff ffe7 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   19b86:	463b      	mov	r3, r7
   19b88:	aa02      	add	r2, sp, #8
   19b8a:	4621      	mov	r1, r4
   19b8c:	a80a      	add	r0, sp, #40	; 0x28
   19b8e:	f7ff ffd1 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   19b92:	a902      	add	r1, sp, #8
   19b94:	4608      	mov	r0, r1
   19b96:	463a      	mov	r2, r7
   19b98:	f7ff ffdc 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   19b9c:	463b      	mov	r3, r7
   19b9e:	462a      	mov	r2, r5
   19ba0:	4649      	mov	r1, r9
   19ba2:	4648      	mov	r0, r9
   19ba4:	f7ff ffc6 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   19ba8:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   19bac:	463a      	mov	r2, r7
   19bae:	4629      	mov	r1, r5
   19bb0:	4628      	mov	r0, r5
   19bb2:	f7ff ffcf 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   19bb6:	4643      	mov	r3, r8
   19bb8:	462a      	mov	r2, r5
   19bba:	4621      	mov	r1, r4
   19bbc:	4620      	mov	r0, r4
   19bbe:	9600      	str	r6, [sp, #0]
   19bc0:	f7ff fef5 	bl	199ae <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   19bc4:	4643      	mov	r3, r8
   19bc6:	462a      	mov	r2, r5
   19bc8:	4629      	mov	r1, r5
   19bca:	4628      	mov	r0, r5
   19bcc:	9600      	str	r6, [sp, #0]
   19bce:	f7ff feee 	bl	199ae <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   19bd2:	4643      	mov	r3, r8
   19bd4:	462a      	mov	r2, r5
   19bd6:	4621      	mov	r1, r4
   19bd8:	4628      	mov	r0, r5
   19bda:	9600      	str	r6, [sp, #0]
   19bdc:	f7ff ff00 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   19be0:	463b      	mov	r3, r7
   19be2:	462a      	mov	r2, r5
   19be4:	4621      	mov	r1, r4
   19be6:	4620      	mov	r0, r4
   19be8:	f7ff ffa4 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   19bec:	4643      	mov	r3, r8
   19bee:	4622      	mov	r2, r4
   19bf0:	4621      	mov	r1, r4
   19bf2:	4628      	mov	r0, r5
   19bf4:	9600      	str	r6, [sp, #0]
   19bf6:	f7ff feda 	bl	199ae <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   19bfa:	4643      	mov	r3, r8
   19bfc:	9600      	str	r6, [sp, #0]
   19bfe:	462a      	mov	r2, r5
   19c00:	4621      	mov	r1, r4
   19c02:	4620      	mov	r0, r4
   19c04:	f7ff fed3 	bl	199ae <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   19c08:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   19c0a:	07db      	lsls	r3, r3, #31
   19c0c:	d54a      	bpl.n	19ca4 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   19c0e:	4633      	mov	r3, r6
   19c10:	4642      	mov	r2, r8
   19c12:	4621      	mov	r1, r4
   19c14:	4620      	mov	r0, r4
   19c16:	f7ff fd92 	bl	1973e <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   19c1a:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   19c1c:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   19c1e:	4620      	mov	r0, r4
   19c20:	f7ff fda7 	bl	19772 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   19c24:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   19c28:	3b01      	subs	r3, #1
   19c2a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   19c2e:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   19c32:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   19c36:	463a      	mov	r2, r7
   19c38:	4621      	mov	r1, r4
   19c3a:	4628      	mov	r0, r5
   19c3c:	f7ff ff8a 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   19c40:	4643      	mov	r3, r8
   19c42:	aa0a      	add	r2, sp, #40	; 0x28
   19c44:	4629      	mov	r1, r5
   19c46:	4628      	mov	r0, r5
   19c48:	9600      	str	r6, [sp, #0]
   19c4a:	f7ff fec9 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   19c4e:	4643      	mov	r3, r8
   19c50:	aa0a      	add	r2, sp, #40	; 0x28
   19c52:	4629      	mov	r1, r5
   19c54:	4628      	mov	r0, r5
   19c56:	9600      	str	r6, [sp, #0]
   19c58:	f7ff fec2 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   19c5c:	a90a      	add	r1, sp, #40	; 0x28
   19c5e:	4608      	mov	r0, r1
   19c60:	4643      	mov	r3, r8
   19c62:	462a      	mov	r2, r5
   19c64:	9600      	str	r6, [sp, #0]
   19c66:	f7ff febb 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   19c6a:	463b      	mov	r3, r7
   19c6c:	aa0a      	add	r2, sp, #40	; 0x28
   19c6e:	4621      	mov	r1, r4
   19c70:	4620      	mov	r0, r4
   19c72:	f7ff ff5f 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   19c76:	aa02      	add	r2, sp, #8
   19c78:	4643      	mov	r3, r8
   19c7a:	4610      	mov	r0, r2
   19c7c:	4621      	mov	r1, r4
   19c7e:	9600      	str	r6, [sp, #0]
   19c80:	f7ff feae 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   19c84:	4632      	mov	r2, r6
   19c86:	4629      	mov	r1, r5
   19c88:	4620      	mov	r0, r4
   19c8a:	f7ff fe42 	bl	19912 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   19c8e:	4649      	mov	r1, r9
   19c90:	4628      	mov	r0, r5
   19c92:	f7ff fe3e 	bl	19912 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   19c96:	a902      	add	r1, sp, #8
   19c98:	4648      	mov	r0, r9
   19c9a:	f7ff fe3a 	bl	19912 <uECC_vli_set>
}
   19c9e:	b012      	add	sp, #72	; 0x48
   19ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   19ca4:	4631      	mov	r1, r6
   19ca6:	4620      	mov	r0, r4
   19ca8:	f7ff fd63 	bl	19772 <uECC_vli_rshift1>
   19cac:	e7c3      	b.n	19c36 <double_jacobian_default+0xda>

00019cae <x_side_default>:
{
   19cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cb2:	4615      	mov	r5, r2
   19cb4:	b08a      	sub	sp, #40	; 0x28
   19cb6:	4604      	mov	r4, r0
   19cb8:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   19cba:	221c      	movs	r2, #28
   19cbc:	2100      	movs	r1, #0
   19cbe:	a803      	add	r0, sp, #12
   19cc0:	f000 fdd2 	bl	1a868 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   19cc4:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   19cc6:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   19cca:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   19ccc:	462a      	mov	r2, r5
   19cce:	4631      	mov	r1, r6
   19cd0:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   19cd2:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   19cd4:	f7ff ff3e 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   19cd8:	463b      	mov	r3, r7
   19cda:	aa02      	add	r2, sp, #8
   19cdc:	4621      	mov	r1, r4
   19cde:	4620      	mov	r0, r4
   19ce0:	f8cd 8000 	str.w	r8, [sp]
   19ce4:	f7ff fe7c 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   19ce8:	462b      	mov	r3, r5
   19cea:	4632      	mov	r2, r6
   19cec:	4621      	mov	r1, r4
   19cee:	4620      	mov	r0, r4
   19cf0:	f7ff ff20 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   19cf4:	f8cd 8000 	str.w	r8, [sp]
   19cf8:	463b      	mov	r3, r7
   19cfa:	f105 0284 	add.w	r2, r5, #132	; 0x84
   19cfe:	4621      	mov	r1, r4
   19d00:	4620      	mov	r0, r4
   19d02:	f7ff fe54 	bl	199ae <uECC_vli_modAdd>
}
   19d06:	b00a      	add	sp, #40	; 0x28
   19d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019d0c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   19d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19d10:	b09a      	sub	sp, #104	; 0x68
   19d12:	4616      	mov	r6, r2
   19d14:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   19d18:	4644      	mov	r4, r8
{
   19d1a:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   19d1c:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   19d20:	9500      	str	r5, [sp, #0]
{
   19d22:	4607      	mov	r7, r0
   19d24:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   19d26:	4623      	mov	r3, r4
   19d28:	4602      	mov	r2, r0
   19d2a:	4631      	mov	r1, r6
   19d2c:	a802      	add	r0, sp, #8
   19d2e:	f7ff fe57 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   19d32:	a902      	add	r1, sp, #8
   19d34:	4642      	mov	r2, r8
   19d36:	4608      	mov	r0, r1
   19d38:	f7ff ff0c 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   19d3c:	4643      	mov	r3, r8
   19d3e:	aa02      	add	r2, sp, #8
   19d40:	4639      	mov	r1, r7
   19d42:	4638      	mov	r0, r7
   19d44:	f7ff fef6 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   19d48:	4643      	mov	r3, r8
   19d4a:	aa02      	add	r2, sp, #8
   19d4c:	4631      	mov	r1, r6
   19d4e:	4630      	mov	r0, r6
   19d50:	f7ff fef0 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   19d54:	4623      	mov	r3, r4
   19d56:	4652      	mov	r2, sl
   19d58:	4649      	mov	r1, r9
   19d5a:	a802      	add	r0, sp, #8
   19d5c:	9500      	str	r5, [sp, #0]
   19d5e:	f7ff fe26 	bl	199ae <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   19d62:	4623      	mov	r3, r4
   19d64:	4652      	mov	r2, sl
   19d66:	4649      	mov	r1, r9
   19d68:	4648      	mov	r0, r9
   19d6a:	9500      	str	r5, [sp, #0]
   19d6c:	f7ff fe38 	bl	199e0 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   19d70:	4623      	mov	r3, r4
   19d72:	463a      	mov	r2, r7
   19d74:	4631      	mov	r1, r6
   19d76:	a80a      	add	r0, sp, #40	; 0x28
   19d78:	9500      	str	r5, [sp, #0]
   19d7a:	f7ff fe31 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   19d7e:	4643      	mov	r3, r8
   19d80:	aa0a      	add	r2, sp, #40	; 0x28
   19d82:	4651      	mov	r1, sl
   19d84:	4650      	mov	r0, sl
   19d86:	f7ff fed5 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   19d8a:	4623      	mov	r3, r4
   19d8c:	4632      	mov	r2, r6
   19d8e:	4639      	mov	r1, r7
   19d90:	a80a      	add	r0, sp, #40	; 0x28
   19d92:	9500      	str	r5, [sp, #0]
   19d94:	f7ff fe0b 	bl	199ae <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   19d98:	4642      	mov	r2, r8
   19d9a:	4649      	mov	r1, r9
   19d9c:	4630      	mov	r0, r6
   19d9e:	f7ff fed9 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   19da2:	4623      	mov	r3, r4
   19da4:	aa0a      	add	r2, sp, #40	; 0x28
   19da6:	4631      	mov	r1, r6
   19da8:	4630      	mov	r0, r6
   19daa:	9500      	str	r5, [sp, #0]
   19dac:	f7ff fe18 	bl	199e0 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   19db0:	4623      	mov	r3, r4
   19db2:	4632      	mov	r2, r6
   19db4:	4639      	mov	r1, r7
   19db6:	a812      	add	r0, sp, #72	; 0x48
   19db8:	9500      	str	r5, [sp, #0]
   19dba:	f7ff fe11 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   19dbe:	4643      	mov	r3, r8
   19dc0:	aa12      	add	r2, sp, #72	; 0x48
   19dc2:	4649      	mov	r1, r9
   19dc4:	4648      	mov	r0, r9
   19dc6:	f7ff feb5 	bl	19b34 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   19dca:	4623      	mov	r3, r4
   19dcc:	4652      	mov	r2, sl
   19dce:	4649      	mov	r1, r9
   19dd0:	4648      	mov	r0, r9
   19dd2:	9500      	str	r5, [sp, #0]
   19dd4:	f7ff fe04 	bl	199e0 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   19dd8:	4642      	mov	r2, r8
   19dda:	a902      	add	r1, sp, #8
   19ddc:	a812      	add	r0, sp, #72	; 0x48
   19dde:	f7ff feb9 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   19de2:	a912      	add	r1, sp, #72	; 0x48
   19de4:	4623      	mov	r3, r4
   19de6:	aa0a      	add	r2, sp, #40	; 0x28
   19de8:	4608      	mov	r0, r1
   19dea:	9500      	str	r5, [sp, #0]
   19dec:	f7ff fdf8 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   19df0:	4623      	mov	r3, r4
   19df2:	463a      	mov	r2, r7
   19df4:	a912      	add	r1, sp, #72	; 0x48
   19df6:	a80a      	add	r0, sp, #40	; 0x28
   19df8:	9500      	str	r5, [sp, #0]
   19dfa:	f7ff fdf1 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   19dfe:	a90a      	add	r1, sp, #40	; 0x28
   19e00:	4643      	mov	r3, r8
   19e02:	aa02      	add	r2, sp, #8
   19e04:	4608      	mov	r0, r1
   19e06:	f7ff fe95 	bl	19b34 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   19e0a:	4623      	mov	r3, r4
   19e0c:	4652      	mov	r2, sl
   19e0e:	a90a      	add	r1, sp, #40	; 0x28
   19e10:	4650      	mov	r0, sl
   19e12:	9500      	str	r5, [sp, #0]
   19e14:	f7ff fde4 	bl	199e0 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   19e18:	462a      	mov	r2, r5
   19e1a:	a912      	add	r1, sp, #72	; 0x48
   19e1c:	4638      	mov	r0, r7
   19e1e:	f7ff fd78 	bl	19912 <uECC_vli_set>
}
   19e22:	b01a      	add	sp, #104	; 0x68
   19e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019e28 <uECC_vli_modInv>:
{
   19e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e2a:	460f      	mov	r7, r1
   19e2c:	b0a1      	sub	sp, #132	; 0x84
   19e2e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   19e30:	4619      	mov	r1, r3
   19e32:	4638      	mov	r0, r7
{
   19e34:	4615      	mov	r5, r2
   19e36:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   19e38:	f7ff fd33 	bl	198a2 <uECC_vli_isZero>
   19e3c:	b128      	cbz	r0, 19e4a <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   19e3e:	4630      	mov	r0, r6
}
   19e40:	b021      	add	sp, #132	; 0x84
   19e42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   19e46:	f7ff bd21 	b.w	1988c <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   19e4a:	4622      	mov	r2, r4
   19e4c:	4639      	mov	r1, r7
   19e4e:	4668      	mov	r0, sp
   19e50:	f7ff fd5f 	bl	19912 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   19e54:	4629      	mov	r1, r5
   19e56:	a808      	add	r0, sp, #32
   19e58:	f7ff fd5b 	bl	19912 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   19e5c:	a810      	add	r0, sp, #64	; 0x40
   19e5e:	4621      	mov	r1, r4
   19e60:	f7ff fd14 	bl	1988c <uECC_vli_clear>
	u[0] = 1;
   19e64:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   19e66:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   19e68:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   19e6a:	f7ff fd0f 	bl	1988c <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   19e6e:	4622      	mov	r2, r4
   19e70:	a908      	add	r1, sp, #32
   19e72:	4668      	mov	r0, sp
   19e74:	f7ff fd59 	bl	1992a <uECC_vli_cmp_unsafe>
   19e78:	b930      	cbnz	r0, 19e88 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   19e7a:	4622      	mov	r2, r4
   19e7c:	a910      	add	r1, sp, #64	; 0x40
   19e7e:	4630      	mov	r0, r6
   19e80:	f7ff fd47 	bl	19912 <uECC_vli_set>
}
   19e84:	b021      	add	sp, #132	; 0x84
   19e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   19e88:	9b00      	ldr	r3, [sp, #0]
   19e8a:	07da      	lsls	r2, r3, #31
   19e8c:	d409      	bmi.n	19ea2 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   19e8e:	4621      	mov	r1, r4
   19e90:	4668      	mov	r0, sp
   19e92:	f7ff fc6e 	bl	19772 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   19e96:	4622      	mov	r2, r4
   19e98:	4629      	mov	r1, r5
   19e9a:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   19e9c:	f7ff fc76 	bl	1978c <vli_modInv_update>
   19ea0:	e7e5      	b.n	19e6e <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   19ea2:	9b08      	ldr	r3, [sp, #32]
   19ea4:	07db      	lsls	r3, r3, #31
   19ea6:	d407      	bmi.n	19eb8 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   19ea8:	4621      	mov	r1, r4
   19eaa:	a808      	add	r0, sp, #32
   19eac:	f7ff fc61 	bl	19772 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   19eb0:	4622      	mov	r2, r4
   19eb2:	4629      	mov	r1, r5
   19eb4:	a818      	add	r0, sp, #96	; 0x60
   19eb6:	e7f1      	b.n	19e9c <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   19eb8:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   19eba:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   19ebc:	dd1c      	ble.n	19ef8 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   19ebe:	aa08      	add	r2, sp, #32
   19ec0:	4669      	mov	r1, sp
   19ec2:	4668      	mov	r0, sp
   19ec4:	f7ff fd58 	bl	19978 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   19ec8:	4621      	mov	r1, r4
   19eca:	4668      	mov	r0, sp
   19ecc:	f7ff fc51 	bl	19772 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   19ed0:	4622      	mov	r2, r4
   19ed2:	a918      	add	r1, sp, #96	; 0x60
   19ed4:	a810      	add	r0, sp, #64	; 0x40
   19ed6:	f7ff fd28 	bl	1992a <uECC_vli_cmp_unsafe>
   19eda:	2800      	cmp	r0, #0
   19edc:	da05      	bge.n	19eea <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   19ede:	a910      	add	r1, sp, #64	; 0x40
   19ee0:	4623      	mov	r3, r4
   19ee2:	462a      	mov	r2, r5
   19ee4:	4608      	mov	r0, r1
   19ee6:	f7ff fc2a 	bl	1973e <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   19eea:	a910      	add	r1, sp, #64	; 0x40
   19eec:	4623      	mov	r3, r4
   19eee:	aa18      	add	r2, sp, #96	; 0x60
   19ef0:	4608      	mov	r0, r1
   19ef2:	f7ff fd41 	bl	19978 <uECC_vli_sub>
   19ef6:	e7ce      	b.n	19e96 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   19ef8:	466a      	mov	r2, sp
   19efa:	a808      	add	r0, sp, #32
   19efc:	f7ff fd3c 	bl	19978 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   19f00:	4621      	mov	r1, r4
   19f02:	a808      	add	r0, sp, #32
   19f04:	f7ff fc35 	bl	19772 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   19f08:	4622      	mov	r2, r4
   19f0a:	a910      	add	r1, sp, #64	; 0x40
   19f0c:	a818      	add	r0, sp, #96	; 0x60
   19f0e:	f7ff fd0c 	bl	1992a <uECC_vli_cmp_unsafe>
   19f12:	2800      	cmp	r0, #0
   19f14:	da05      	bge.n	19f22 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   19f16:	a918      	add	r1, sp, #96	; 0x60
   19f18:	4623      	mov	r3, r4
   19f1a:	462a      	mov	r2, r5
   19f1c:	4608      	mov	r0, r1
   19f1e:	f7ff fc0e 	bl	1973e <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   19f22:	a918      	add	r1, sp, #96	; 0x60
   19f24:	4623      	mov	r3, r4
   19f26:	aa10      	add	r2, sp, #64	; 0x40
   19f28:	4608      	mov	r0, r1
   19f2a:	f7ff fd25 	bl	19978 <uECC_vli_sub>
   19f2e:	e7bf      	b.n	19eb0 <uECC_vli_modInv+0x88>

00019f30 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   19f30:	7809      	ldrb	r1, [r1, #0]
   19f32:	0049      	lsls	r1, r1, #1
   19f34:	b249      	sxtb	r1, r1
   19f36:	f7ff bcb4 	b.w	198a2 <uECC_vli_isZero>

00019f3a <apply_z>:
{
   19f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f3c:	4615      	mov	r5, r2
   19f3e:	b089      	sub	sp, #36	; 0x24
   19f40:	461c      	mov	r4, r3
   19f42:	4607      	mov	r7, r0
   19f44:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   19f46:	461a      	mov	r2, r3
   19f48:	4629      	mov	r1, r5
   19f4a:	4668      	mov	r0, sp
   19f4c:	f7ff fe02 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   19f50:	4623      	mov	r3, r4
   19f52:	466a      	mov	r2, sp
   19f54:	4639      	mov	r1, r7
   19f56:	4638      	mov	r0, r7
   19f58:	f7ff fdec 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   19f5c:	4623      	mov	r3, r4
   19f5e:	462a      	mov	r2, r5
   19f60:	4669      	mov	r1, sp
   19f62:	4668      	mov	r0, sp
   19f64:	f7ff fde6 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   19f68:	4623      	mov	r3, r4
   19f6a:	466a      	mov	r2, sp
   19f6c:	4631      	mov	r1, r6
   19f6e:	4630      	mov	r0, r6
   19f70:	f7ff fde0 	bl	19b34 <uECC_vli_modMult_fast>
}
   19f74:	b009      	add	sp, #36	; 0x24
   19f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019f78 <XYcZ_add>:
{
   19f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f7c:	b08a      	sub	sp, #40	; 0x28
   19f7e:	4614      	mov	r4, r2
   19f80:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   19f84:	4655      	mov	r5, sl
{
   19f86:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   19f88:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   19f8c:	9600      	str	r6, [sp, #0]
{
   19f8e:	4680      	mov	r8, r0
   19f90:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   19f92:	462b      	mov	r3, r5
   19f94:	4602      	mov	r2, r0
   19f96:	4621      	mov	r1, r4
   19f98:	a802      	add	r0, sp, #8
   19f9a:	f7ff fd21 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   19f9e:	a902      	add	r1, sp, #8
   19fa0:	4652      	mov	r2, sl
   19fa2:	4608      	mov	r0, r1
   19fa4:	f7ff fdd6 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   19fa8:	4653      	mov	r3, sl
   19faa:	aa02      	add	r2, sp, #8
   19fac:	4641      	mov	r1, r8
   19fae:	4640      	mov	r0, r8
   19fb0:	f7ff fdc0 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   19fb4:	4653      	mov	r3, sl
   19fb6:	aa02      	add	r2, sp, #8
   19fb8:	4621      	mov	r1, r4
   19fba:	4620      	mov	r0, r4
   19fbc:	f7ff fdba 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   19fc0:	462b      	mov	r3, r5
   19fc2:	464a      	mov	r2, r9
   19fc4:	4639      	mov	r1, r7
   19fc6:	4638      	mov	r0, r7
   19fc8:	9600      	str	r6, [sp, #0]
   19fca:	f7ff fd09 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   19fce:	4652      	mov	r2, sl
   19fd0:	4639      	mov	r1, r7
   19fd2:	a802      	add	r0, sp, #8
   19fd4:	f7ff fdbe 	bl	19b54 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   19fd8:	a902      	add	r1, sp, #8
   19fda:	462b      	mov	r3, r5
   19fdc:	4642      	mov	r2, r8
   19fde:	4608      	mov	r0, r1
   19fe0:	9600      	str	r6, [sp, #0]
   19fe2:	f7ff fcfd 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   19fe6:	a902      	add	r1, sp, #8
   19fe8:	462b      	mov	r3, r5
   19fea:	4622      	mov	r2, r4
   19fec:	4608      	mov	r0, r1
   19fee:	9600      	str	r6, [sp, #0]
   19ff0:	f7ff fcf6 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   19ff4:	462b      	mov	r3, r5
   19ff6:	4642      	mov	r2, r8
   19ff8:	4621      	mov	r1, r4
   19ffa:	4620      	mov	r0, r4
   19ffc:	9600      	str	r6, [sp, #0]
   19ffe:	f7ff fcef 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1a002:	4653      	mov	r3, sl
   1a004:	4622      	mov	r2, r4
   1a006:	4649      	mov	r1, r9
   1a008:	4648      	mov	r0, r9
   1a00a:	f7ff fd93 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1a00e:	462b      	mov	r3, r5
   1a010:	aa02      	add	r2, sp, #8
   1a012:	4641      	mov	r1, r8
   1a014:	4620      	mov	r0, r4
   1a016:	9600      	str	r6, [sp, #0]
   1a018:	f7ff fce2 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1a01c:	4653      	mov	r3, sl
   1a01e:	4622      	mov	r2, r4
   1a020:	4639      	mov	r1, r7
   1a022:	4638      	mov	r0, r7
   1a024:	f7ff fd86 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1a028:	462b      	mov	r3, r5
   1a02a:	464a      	mov	r2, r9
   1a02c:	4639      	mov	r1, r7
   1a02e:	4638      	mov	r0, r7
   1a030:	9600      	str	r6, [sp, #0]
   1a032:	f7ff fcd5 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1a036:	4632      	mov	r2, r6
   1a038:	a902      	add	r1, sp, #8
   1a03a:	4620      	mov	r0, r4
   1a03c:	f7ff fc69 	bl	19912 <uECC_vli_set>
}
   1a040:	b00a      	add	sp, #40	; 0x28
   1a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a046 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1a046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a04a:	b0b1      	sub	sp, #196	; 0xc4
   1a04c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1a050:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1a052:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1a056:	a818      	add	r0, sp, #96	; 0x60
{
   1a058:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1a05a:	463a      	mov	r2, r7
{
   1a05c:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   1a05e:	f7ff fc58 	bl	19912 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1a062:	00bb      	lsls	r3, r7, #2
   1a064:	9305      	str	r3, [sp, #20]
   1a066:	9b04      	ldr	r3, [sp, #16]
   1a068:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1a06c:	4619      	mov	r1, r3
   1a06e:	a828      	add	r0, sp, #160	; 0xa0
   1a070:	9302      	str	r3, [sp, #8]
   1a072:	f7ff fc4e 	bl	19912 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1a076:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   1a07a:	2d00      	cmp	r5, #0
   1a07c:	f000 8086 	beq.w	1a18c <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   1a080:	4632      	mov	r2, r6
   1a082:	4629      	mov	r1, r5
   1a084:	a808      	add	r0, sp, #32
   1a086:	f7ff fc44 	bl	19912 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1a08a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1a08e:	4632      	mov	r2, r6
   1a090:	a918      	add	r1, sp, #96	; 0x60
   1a092:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1a094:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1a098:	f7ff fc3b 	bl	19912 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1a09c:	a928      	add	r1, sp, #160	; 0xa0
   1a09e:	4648      	mov	r0, r9
   1a0a0:	f7ff fc37 	bl	19912 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1a0a4:	4623      	mov	r3, r4
   1a0a6:	aa08      	add	r2, sp, #32
   1a0a8:	a818      	add	r0, sp, #96	; 0x60
   1a0aa:	f7ff ff46 	bl	19f3a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1a0ae:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1a0b2:	4623      	mov	r3, r4
   1a0b4:	aa08      	add	r2, sp, #32
   1a0b6:	a928      	add	r1, sp, #160	; 0xa0
   1a0b8:	a818      	add	r0, sp, #96	; 0x60
   1a0ba:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1a0bc:	4623      	mov	r3, r4
   1a0be:	aa08      	add	r2, sp, #32
   1a0c0:	4649      	mov	r1, r9
   1a0c2:	4640      	mov	r0, r8
   1a0c4:	f7ff ff39 	bl	19f3a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1a0c8:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1a0cc:	3d02      	subs	r5, #2
   1a0ce:	b22d      	sxth	r5, r5
   1a0d0:	2d00      	cmp	r5, #0
   1a0d2:	dc62      	bgt.n	1a19a <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a0d4:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a0d8:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1a0da:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a0de:	ab10      	add	r3, sp, #64	; 0x40
   1a0e0:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1a0e4:	43ed      	mvns	r5, r5
   1a0e6:	ab20      	add	r3, sp, #128	; 0x80
   1a0e8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1a0ec:	f005 0501 	and.w	r5, r5, #1
   1a0f0:	ab10      	add	r3, sp, #64	; 0x40
   1a0f2:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1a0f6:	ab20      	add	r3, sp, #128	; 0x80
   1a0f8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   1a0fc:	462b      	mov	r3, r5
   1a0fe:	464a      	mov	r2, r9
   1a100:	4631      	mov	r1, r6
   1a102:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1a104:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a108:	f7ff fe00 	bl	19d0c <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1a10c:	4653      	mov	r3, sl
   1a10e:	aa10      	add	r2, sp, #64	; 0x40
   1a110:	a918      	add	r1, sp, #96	; 0x60
   1a112:	a808      	add	r0, sp, #32
   1a114:	9700      	str	r7, [sp, #0]
   1a116:	f7ff fc63 	bl	199e0 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1a11a:	a908      	add	r1, sp, #32
   1a11c:	4623      	mov	r3, r4
   1a11e:	4632      	mov	r2, r6
   1a120:	4608      	mov	r0, r1
   1a122:	f7ff fd07 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1a126:	a908      	add	r1, sp, #32
   1a128:	9a04      	ldr	r2, [sp, #16]
   1a12a:	4623      	mov	r3, r4
   1a12c:	4608      	mov	r0, r1
   1a12e:	f7ff fd01 	bl	19b34 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1a132:	a908      	add	r1, sp, #32
   1a134:	463b      	mov	r3, r7
   1a136:	4652      	mov	r2, sl
   1a138:	4608      	mov	r0, r1
   1a13a:	f7ff fe75 	bl	19e28 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1a13e:	a908      	add	r1, sp, #32
   1a140:	9a02      	ldr	r2, [sp, #8]
   1a142:	4623      	mov	r3, r4
   1a144:	4608      	mov	r0, r1
   1a146:	f7ff fcf5 	bl	19b34 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1a14a:	a908      	add	r1, sp, #32
   1a14c:	4623      	mov	r3, r4
   1a14e:	4642      	mov	r2, r8
   1a150:	4608      	mov	r0, r1
   1a152:	f7ff fcef 	bl	19b34 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1a156:	4633      	mov	r3, r6
   1a158:	4642      	mov	r2, r8
   1a15a:	4629      	mov	r1, r5
   1a15c:	4648      	mov	r0, r9
   1a15e:	9400      	str	r4, [sp, #0]
   1a160:	f7ff ff0a 	bl	19f78 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1a164:	4623      	mov	r3, r4
   1a166:	aa08      	add	r2, sp, #32
   1a168:	a920      	add	r1, sp, #128	; 0x80
   1a16a:	a810      	add	r0, sp, #64	; 0x40
   1a16c:	f7ff fee5 	bl	19f3a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1a170:	9803      	ldr	r0, [sp, #12]
   1a172:	463a      	mov	r2, r7
   1a174:	a910      	add	r1, sp, #64	; 0x40
   1a176:	f7ff fbcc 	bl	19912 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1a17a:	9803      	ldr	r0, [sp, #12]
   1a17c:	9b05      	ldr	r3, [sp, #20]
   1a17e:	a920      	add	r1, sp, #128	; 0x80
   1a180:	4418      	add	r0, r3
   1a182:	f7ff fbc6 	bl	19912 <uECC_vli_set>
}
   1a186:	b031      	add	sp, #196	; 0xc4
   1a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1a18c:	4631      	mov	r1, r6
   1a18e:	a808      	add	r0, sp, #32
   1a190:	f7ff fb7c 	bl	1988c <uECC_vli_clear>
		z[0] = 1;
   1a194:	2301      	movs	r3, #1
   1a196:	9308      	str	r3, [sp, #32]
   1a198:	e777      	b.n	1a08a <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1a19a:	4629      	mov	r1, r5
   1a19c:	4650      	mov	r0, sl
   1a19e:	f7ff fb8f 	bl	198c0 <uECC_vli_testBit>
   1a1a2:	fab0 f680 	clz	r6, r0
   1a1a6:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1a1a8:	f1c6 0101 	rsb	r1, r6, #1
   1a1ac:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1a1b0:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1a1b4:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1a1b8:	4633      	mov	r3, r6
   1a1ba:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1a1be:	465a      	mov	r2, fp
   1a1c0:	9400      	str	r4, [sp, #0]
   1a1c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1a1c6:	f7ff fda1 	bl	19d0c <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1a1ca:	9907      	ldr	r1, [sp, #28]
   1a1cc:	9806      	ldr	r0, [sp, #24]
   1a1ce:	9400      	str	r4, [sp, #0]
   1a1d0:	460b      	mov	r3, r1
   1a1d2:	4602      	mov	r2, r0
   1a1d4:	4631      	mov	r1, r6
   1a1d6:	4658      	mov	r0, fp
   1a1d8:	f7ff fece 	bl	19f78 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1a1dc:	3d01      	subs	r5, #1
   1a1de:	e776      	b.n	1a0ce <EccPoint_mult+0x88>

0001a1e0 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1a1e4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1a1e8:	f119 081f 	adds.w	r8, r9, #31
{
   1a1ec:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1a1ee:	bf48      	it	mi
   1a1f0:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1a1f4:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1a1f6:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1a1fa:	3524      	adds	r5, #36	; 0x24
   1a1fc:	4601      	mov	r1, r0
{
   1a1fe:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1a200:	4643      	mov	r3, r8
   1a202:	462a      	mov	r2, r5
   1a204:	4630      	mov	r0, r6
   1a206:	f7ff fa9a 	bl	1973e <uECC_vli_add>
   1a20a:	4604      	mov	r4, r0
   1a20c:	b990      	cbnz	r0, 1a234 <regularize_k+0x54>
   1a20e:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1a212:	da06      	bge.n	1a222 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1a214:	4649      	mov	r1, r9
   1a216:	4630      	mov	r0, r6
   1a218:	f7ff fb52 	bl	198c0 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1a21c:	1e04      	subs	r4, r0, #0
   1a21e:	bf18      	it	ne
   1a220:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1a222:	4643      	mov	r3, r8
   1a224:	462a      	mov	r2, r5
   1a226:	4631      	mov	r1, r6
   1a228:	4638      	mov	r0, r7
   1a22a:	f7ff fa88 	bl	1973e <uECC_vli_add>

	return carry;
}
   1a22e:	4620      	mov	r0, r4
   1a230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1a234:	2401      	movs	r4, #1
   1a236:	e7f4      	b.n	1a222 <regularize_k+0x42>

0001a238 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1a238:	b530      	push	{r4, r5, lr}
   1a23a:	4614      	mov	r4, r2
   1a23c:	b095      	sub	sp, #84	; 0x54
   1a23e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1a240:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1a242:	4623      	mov	r3, r4
{
   1a244:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1a246:	a904      	add	r1, sp, #16
   1a248:	9102      	str	r1, [sp, #8]
   1a24a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1a24c:	f7ff ffc8 	bl	1a1e0 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1a250:	fab0 f380 	clz	r3, r0
   1a254:	095b      	lsrs	r3, r3, #5
   1a256:	aa14      	add	r2, sp, #80	; 0x50
   1a258:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1a25c:	8863      	ldrh	r3, [r4, #2]
   1a25e:	9401      	str	r4, [sp, #4]
   1a260:	3301      	adds	r3, #1
   1a262:	b21b      	sxth	r3, r3
   1a264:	9300      	str	r3, [sp, #0]
   1a266:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1a26a:	2300      	movs	r3, #0
   1a26c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1a270:	4628      	mov	r0, r5
   1a272:	f7ff fee8 	bl	1a046 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1a276:	4621      	mov	r1, r4
   1a278:	4628      	mov	r0, r5
   1a27a:	f7ff fe59 	bl	19f30 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1a27e:	fab0 f080 	clz	r0, r0
   1a282:	0940      	lsrs	r0, r0, #5
   1a284:	b015      	add	sp, #84	; 0x54
   1a286:	bd30      	pop	{r4, r5, pc}

0001a288 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1a288:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1a28a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1a28c:	1e4f      	subs	r7, r1, #1
   1a28e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1a290:	428c      	cmp	r4, r1
   1a292:	f105 0501 	add.w	r5, r5, #1
   1a296:	db00      	blt.n	1a29a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1a298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1a29a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1a29c:	f023 0603 	bic.w	r6, r3, #3
   1a2a0:	f003 0303 	and.w	r3, r3, #3
   1a2a4:	5996      	ldr	r6, [r2, r6]
   1a2a6:	00db      	lsls	r3, r3, #3
   1a2a8:	fa26 f303 	lsr.w	r3, r6, r3
   1a2ac:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1a2ae:	e7ee      	b.n	1a28e <uECC_vli_nativeToBytes+0x6>

0001a2b0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2b2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1a2b4:	1cd1      	adds	r1, r2, #3
   1a2b6:	bf48      	it	mi
   1a2b8:	1d91      	addmi	r1, r2, #6
   1a2ba:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1a2be:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1a2c0:	f7ff fae4 	bl	1988c <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1a2c4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1a2c6:	1e67      	subs	r7, r4, #1
   1a2c8:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1a2ca:	42a2      	cmp	r2, r4
   1a2cc:	f105 0501 	add.w	r5, r5, #1
   1a2d0:	db00      	blt.n	1a2d4 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1a2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1a2d4:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1a2d6:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1a2da:	5cb2      	ldrb	r2, [r6, r2]
   1a2dc:	f003 0303 	and.w	r3, r3, #3
   1a2e0:	00db      	lsls	r3, r3, #3
   1a2e2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1a2e6:	5842      	ldr	r2, [r0, r1]
   1a2e8:	431a      	orrs	r2, r3
   1a2ea:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1a2ec:	e7ec      	b.n	1a2c8 <uECC_vli_bytesToNative+0x18>

0001a2ee <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1a2ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2f0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1a2f2:	f991 6000 	ldrsb.w	r6, [r1]
{
   1a2f6:	4605      	mov	r5, r0
   1a2f8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1a2fa:	f7ff fe19 	bl	19f30 <EccPoint_isZero>
   1a2fe:	bb28      	cbnz	r0, 1a34c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1a300:	1d27      	adds	r7, r4, #4
   1a302:	4632      	mov	r2, r6
   1a304:	4629      	mov	r1, r5
   1a306:	4638      	mov	r0, r7
   1a308:	f7ff fb0f 	bl	1992a <uECC_vli_cmp_unsafe>
   1a30c:	2801      	cmp	r0, #1
   1a30e:	d120      	bne.n	1a352 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1a310:	4632      	mov	r2, r6
   1a312:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1a316:	4638      	mov	r0, r7
   1a318:	f7ff fb07 	bl	1992a <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1a31c:	2801      	cmp	r0, #1
   1a31e:	d118      	bne.n	1a352 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1a320:	4622      	mov	r2, r4
   1a322:	4668      	mov	r0, sp
   1a324:	f7ff fc16 	bl	19b54 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1a328:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1a32c:	4622      	mov	r2, r4
   1a32e:	4629      	mov	r1, r5
   1a330:	a808      	add	r0, sp, #32
   1a332:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1a334:	4632      	mov	r2, r6
   1a336:	a908      	add	r1, sp, #32
   1a338:	4668      	mov	r0, sp
   1a33a:	f7ff fb0b 	bl	19954 <uECC_vli_equal>
		return -3;
   1a33e:	2800      	cmp	r0, #0
   1a340:	bf0c      	ite	eq
   1a342:	2000      	moveq	r0, #0
   1a344:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1a348:	b011      	add	sp, #68	; 0x44
   1a34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1a34c:	f04f 30ff 	mov.w	r0, #4294967295
   1a350:	e7fa      	b.n	1a348 <uECC_valid_point+0x5a>
		return -2;
   1a352:	f06f 0001 	mvn.w	r0, #1
   1a356:	e7f7      	b.n	1a348 <uECC_valid_point+0x5a>

0001a358 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1a358:	b570      	push	{r4, r5, r6, lr}
   1a35a:	460c      	mov	r4, r1
   1a35c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1a35e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1a360:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1a364:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1a366:	4601      	mov	r1, r0
   1a368:	4668      	mov	r0, sp
   1a36a:	f7ff ffa1 	bl	1a2b0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1a36e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1a372:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1a376:	18a9      	adds	r1, r5, r2
   1a378:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1a37c:	f7ff ff98 	bl	1a2b0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1a380:	2210      	movs	r2, #16
   1a382:	4631      	mov	r1, r6
   1a384:	4668      	mov	r0, sp
   1a386:	f7ff fad0 	bl	1992a <uECC_vli_cmp_unsafe>
   1a38a:	b128      	cbz	r0, 1a398 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1a38c:	4621      	mov	r1, r4
   1a38e:	4668      	mov	r0, sp
   1a390:	f7ff ffad 	bl	1a2ee <uECC_valid_point>
}
   1a394:	b010      	add	sp, #64	; 0x40
   1a396:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1a398:	f06f 0003 	mvn.w	r0, #3
   1a39c:	e7fa      	b.n	1a394 <uECC_valid_public_key+0x3c>

0001a39e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1a39e:	78cb      	ldrb	r3, [r1, #3]
   1a3a0:	7802      	ldrb	r2, [r0, #0]
   1a3a2:	4053      	eors	r3, r2
   1a3a4:	7003      	strb	r3, [r0, #0]
   1a3a6:	884b      	ldrh	r3, [r1, #2]
   1a3a8:	7842      	ldrb	r2, [r0, #1]
   1a3aa:	4053      	eors	r3, r2
   1a3ac:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1a3ae:	680a      	ldr	r2, [r1, #0]
   1a3b0:	7883      	ldrb	r3, [r0, #2]
   1a3b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a3b6:	7083      	strb	r3, [r0, #2]
   1a3b8:	680a      	ldr	r2, [r1, #0]
   1a3ba:	78c3      	ldrb	r3, [r0, #3]
   1a3bc:	4053      	eors	r3, r2
   1a3be:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1a3c0:	79cb      	ldrb	r3, [r1, #7]
   1a3c2:	7902      	ldrb	r2, [r0, #4]
   1a3c4:	4053      	eors	r3, r2
   1a3c6:	7103      	strb	r3, [r0, #4]
   1a3c8:	88cb      	ldrh	r3, [r1, #6]
   1a3ca:	7942      	ldrb	r2, [r0, #5]
   1a3cc:	4053      	eors	r3, r2
   1a3ce:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1a3d0:	684a      	ldr	r2, [r1, #4]
   1a3d2:	7983      	ldrb	r3, [r0, #6]
   1a3d4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a3d8:	7183      	strb	r3, [r0, #6]
   1a3da:	684a      	ldr	r2, [r1, #4]
   1a3dc:	79c3      	ldrb	r3, [r0, #7]
   1a3de:	4053      	eors	r3, r2
   1a3e0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1a3e2:	7acb      	ldrb	r3, [r1, #11]
   1a3e4:	7a02      	ldrb	r2, [r0, #8]
   1a3e6:	4053      	eors	r3, r2
   1a3e8:	7203      	strb	r3, [r0, #8]
   1a3ea:	7a42      	ldrb	r2, [r0, #9]
   1a3ec:	894b      	ldrh	r3, [r1, #10]
   1a3ee:	4053      	eors	r3, r2
   1a3f0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1a3f2:	688a      	ldr	r2, [r1, #8]
   1a3f4:	7a83      	ldrb	r3, [r0, #10]
   1a3f6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a3fa:	7283      	strb	r3, [r0, #10]
   1a3fc:	688a      	ldr	r2, [r1, #8]
   1a3fe:	7ac3      	ldrb	r3, [r0, #11]
   1a400:	4053      	eors	r3, r2
   1a402:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1a404:	7bcb      	ldrb	r3, [r1, #15]
   1a406:	7b02      	ldrb	r2, [r0, #12]
   1a408:	4053      	eors	r3, r2
   1a40a:	7303      	strb	r3, [r0, #12]
   1a40c:	89cb      	ldrh	r3, [r1, #14]
   1a40e:	7b42      	ldrb	r2, [r0, #13]
   1a410:	4053      	eors	r3, r2
   1a412:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1a414:	68ca      	ldr	r2, [r1, #12]
   1a416:	7b83      	ldrb	r3, [r0, #14]
   1a418:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a41c:	7383      	strb	r3, [r0, #14]
   1a41e:	68ca      	ldr	r2, [r1, #12]
   1a420:	7bc3      	ldrb	r3, [r0, #15]
   1a422:	4053      	eors	r3, r2
   1a424:	73c3      	strb	r3, [r0, #15]
}
   1a426:	4770      	bx	lr

0001a428 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1a428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a42a:	7802      	ldrb	r2, [r0, #0]
   1a42c:	f88d 2000 	strb.w	r2, [sp]
   1a430:	7942      	ldrb	r2, [r0, #5]
   1a432:	f88d 2001 	strb.w	r2, [sp, #1]
   1a436:	7a82      	ldrb	r2, [r0, #10]
   1a438:	f88d 2002 	strb.w	r2, [sp, #2]
   1a43c:	7bc2      	ldrb	r2, [r0, #15]
   1a43e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1a442:	7902      	ldrb	r2, [r0, #4]
   1a444:	f88d 2004 	strb.w	r2, [sp, #4]
   1a448:	7a42      	ldrb	r2, [r0, #9]
   1a44a:	f88d 2005 	strb.w	r2, [sp, #5]
   1a44e:	7b82      	ldrb	r2, [r0, #14]
   1a450:	f88d 2006 	strb.w	r2, [sp, #6]
   1a454:	78c2      	ldrb	r2, [r0, #3]
   1a456:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1a45a:	7a02      	ldrb	r2, [r0, #8]
   1a45c:	f88d 2008 	strb.w	r2, [sp, #8]
   1a460:	7b42      	ldrb	r2, [r0, #13]
   1a462:	f88d 2009 	strb.w	r2, [sp, #9]
   1a466:	7882      	ldrb	r2, [r0, #2]
   1a468:	f88d 200a 	strb.w	r2, [sp, #10]
   1a46c:	79c2      	ldrb	r2, [r0, #7]
   1a46e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a472:	7b02      	ldrb	r2, [r0, #12]
   1a474:	f88d 200c 	strb.w	r2, [sp, #12]
   1a478:	7842      	ldrb	r2, [r0, #1]
   1a47a:	7ac3      	ldrb	r3, [r0, #11]
   1a47c:	f88d 200d 	strb.w	r2, [sp, #13]
   1a480:	7982      	ldrb	r2, [r0, #6]
   1a482:	f88d 200e 	strb.w	r2, [sp, #14]
   1a486:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a48a:	2310      	movs	r3, #16
   1a48c:	466a      	mov	r2, sp
   1a48e:	4619      	mov	r1, r3
   1a490:	f7ff f891 	bl	195b6 <_copy>
}
   1a494:	b005      	add	sp, #20
   1a496:	f85d fb04 	ldr.w	pc, [sp], #4

0001a49a <mult_row_column>:
{
   1a49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a49c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a49e:	7808      	ldrb	r0, [r1, #0]
{
   1a4a0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a4a2:	f7ff f897 	bl	195d4 <_double_byte>
   1a4a6:	4605      	mov	r5, r0
   1a4a8:	7860      	ldrb	r0, [r4, #1]
   1a4aa:	f7ff f893 	bl	195d4 <_double_byte>
   1a4ae:	78a2      	ldrb	r2, [r4, #2]
   1a4b0:	7863      	ldrb	r3, [r4, #1]
   1a4b2:	4053      	eors	r3, r2
   1a4b4:	78e2      	ldrb	r2, [r4, #3]
   1a4b6:	4053      	eors	r3, r2
   1a4b8:	405d      	eors	r5, r3
   1a4ba:	4045      	eors	r5, r0
   1a4bc:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1a4be:	7860      	ldrb	r0, [r4, #1]
   1a4c0:	7827      	ldrb	r7, [r4, #0]
   1a4c2:	f7ff f887 	bl	195d4 <_double_byte>
   1a4c6:	4605      	mov	r5, r0
   1a4c8:	78a0      	ldrb	r0, [r4, #2]
   1a4ca:	f7ff f883 	bl	195d4 <_double_byte>
   1a4ce:	78a3      	ldrb	r3, [r4, #2]
   1a4d0:	405f      	eors	r7, r3
   1a4d2:	78e3      	ldrb	r3, [r4, #3]
   1a4d4:	405f      	eors	r7, r3
   1a4d6:	407d      	eors	r5, r7
   1a4d8:	4045      	eors	r5, r0
   1a4da:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1a4dc:	78a0      	ldrb	r0, [r4, #2]
   1a4de:	7865      	ldrb	r5, [r4, #1]
   1a4e0:	7827      	ldrb	r7, [r4, #0]
   1a4e2:	f7ff f877 	bl	195d4 <_double_byte>
   1a4e6:	406f      	eors	r7, r5
   1a4e8:	4605      	mov	r5, r0
   1a4ea:	78e0      	ldrb	r0, [r4, #3]
   1a4ec:	f7ff f872 	bl	195d4 <_double_byte>
   1a4f0:	78e3      	ldrb	r3, [r4, #3]
   1a4f2:	405f      	eors	r7, r3
   1a4f4:	407d      	eors	r5, r7
   1a4f6:	4045      	eors	r5, r0
   1a4f8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1a4fa:	7820      	ldrb	r0, [r4, #0]
   1a4fc:	f7ff f86a 	bl	195d4 <_double_byte>
   1a500:	7863      	ldrb	r3, [r4, #1]
   1a502:	7825      	ldrb	r5, [r4, #0]
   1a504:	405d      	eors	r5, r3
   1a506:	78a3      	ldrb	r3, [r4, #2]
   1a508:	405d      	eors	r5, r3
   1a50a:	4045      	eors	r5, r0
   1a50c:	78e0      	ldrb	r0, [r4, #3]
   1a50e:	f7ff f861 	bl	195d4 <_double_byte>
   1a512:	b2ed      	uxtb	r5, r5
   1a514:	4045      	eors	r5, r0
   1a516:	70f5      	strb	r5, [r6, #3]
}
   1a518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a51a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1a51a:	b570      	push	{r4, r5, r6, lr}
   1a51c:	4614      	mov	r4, r2
   1a51e:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1a520:	4605      	mov	r5, r0
   1a522:	2800      	cmp	r0, #0
   1a524:	d049      	beq.n	1a5ba <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1a526:	2900      	cmp	r1, #0
   1a528:	d049      	beq.n	1a5be <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1a52a:	2a00      	cmp	r2, #0
   1a52c:	d049      	beq.n	1a5c2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a52e:	2310      	movs	r3, #16
   1a530:	460a      	mov	r2, r1
   1a532:	4668      	mov	r0, sp
   1a534:	4619      	mov	r1, r3
   1a536:	f7ff f83e 	bl	195b6 <_copy>
	add_round_key(state, s->words);
   1a53a:	4621      	mov	r1, r4
   1a53c:	4668      	mov	r0, sp
   1a53e:	f7ff ff2e 	bl	1a39e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1a542:	3410      	adds	r4, #16
   1a544:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1a548:	4668      	mov	r0, sp
   1a54a:	f7e8 fa77 	bl	2a3c <sub_bytes>
		shift_rows(state);
   1a54e:	4668      	mov	r0, sp
   1a550:	f7ff ff6a 	bl	1a428 <shift_rows>
	mult_row_column(t, s);
   1a554:	4669      	mov	r1, sp
   1a556:	a804      	add	r0, sp, #16
   1a558:	f7ff ff9f 	bl	1a49a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1a55c:	a901      	add	r1, sp, #4
   1a55e:	a805      	add	r0, sp, #20
   1a560:	f7ff ff9b 	bl	1a49a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1a564:	a902      	add	r1, sp, #8
   1a566:	a806      	add	r0, sp, #24
   1a568:	f7ff ff97 	bl	1a49a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1a56c:	a903      	add	r1, sp, #12
   1a56e:	a807      	add	r0, sp, #28
   1a570:	f7ff ff93 	bl	1a49a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a574:	2310      	movs	r3, #16
   1a576:	4619      	mov	r1, r3
   1a578:	eb0d 0203 	add.w	r2, sp, r3
   1a57c:	4668      	mov	r0, sp
   1a57e:	f7ff f81a 	bl	195b6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1a582:	4621      	mov	r1, r4
   1a584:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1a586:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1a588:	f7ff ff09 	bl	1a39e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1a58c:	42a6      	cmp	r6, r4
   1a58e:	d1db      	bne.n	1a548 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1a590:	f7e8 fa54 	bl	2a3c <sub_bytes>
	shift_rows(state);
   1a594:	4668      	mov	r0, sp
   1a596:	f7ff ff47 	bl	1a428 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1a59a:	4631      	mov	r1, r6
   1a59c:	4668      	mov	r0, sp
   1a59e:	f7ff fefe 	bl	1a39e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1a5a2:	2310      	movs	r3, #16
   1a5a4:	4619      	mov	r1, r3
   1a5a6:	466a      	mov	r2, sp
   1a5a8:	4628      	mov	r0, r5
   1a5aa:	f7ff f804 	bl	195b6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1a5ae:	4668      	mov	r0, sp
   1a5b0:	2210      	movs	r2, #16
   1a5b2:	2100      	movs	r1, #0
   1a5b4:	f7ff f80c 	bl	195d0 <_set>

	return TC_CRYPTO_SUCCESS;
   1a5b8:	2001      	movs	r0, #1
}
   1a5ba:	b008      	add	sp, #32
   1a5bc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a5be:	4608      	mov	r0, r1
   1a5c0:	e7fb      	b.n	1a5ba <tc_aes_encrypt+0xa0>
   1a5c2:	4610      	mov	r0, r2
   1a5c4:	e7f9      	b.n	1a5ba <tc_aes_encrypt+0xa0>

0001a5c6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1a5c6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a5c8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1a5ca:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a5cc:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1a5d0:	2b00      	cmp	r3, #0
   1a5d2:	bfb4      	ite	lt
   1a5d4:	2387      	movlt	r3, #135	; 0x87
   1a5d6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1a5d8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a5dc:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1a5e0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1a5e2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1a5e6:	d002      	beq.n	1a5ee <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1a5e8:	7813      	ldrb	r3, [r2, #0]
   1a5ea:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1a5ec:	e7f4      	b.n	1a5d8 <gf_double+0x12>
	}
}
   1a5ee:	bd10      	pop	{r4, pc}

0001a5f0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1a5f0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1a5f2:	b120      	cbz	r0, 1a5fe <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1a5f4:	2258      	movs	r2, #88	; 0x58
   1a5f6:	2100      	movs	r1, #0
   1a5f8:	f7fe ffea 	bl	195d0 <_set>
   1a5fc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a5fe:	bd08      	pop	{r3, pc}

0001a600 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1a600:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a602:	4604      	mov	r4, r0
   1a604:	b188      	cbz	r0, 1a62a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a606:	2210      	movs	r2, #16
   1a608:	2100      	movs	r1, #0
   1a60a:	f7fe ffe1 	bl	195d0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1a60e:	2210      	movs	r2, #16
   1a610:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a614:	2100      	movs	r1, #0
   1a616:	f7fe ffdb 	bl	195d0 <_set>
	s->leftover_offset = 0;
   1a61a:	2300      	movs	r3, #0
   1a61c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1a61e:	2200      	movs	r2, #0
   1a620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a624:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1a628:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a62a:	bd10      	pop	{r4, pc}

0001a62c <tc_cmac_setup>:
{
   1a62c:	b570      	push	{r4, r5, r6, lr}
   1a62e:	460d      	mov	r5, r1
   1a630:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1a632:	4604      	mov	r4, r0
   1a634:	b310      	cbz	r0, 1a67c <tc_cmac_setup+0x50>
   1a636:	b311      	cbz	r1, 1a67e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1a638:	2258      	movs	r2, #88	; 0x58
   1a63a:	2100      	movs	r1, #0
   1a63c:	f7fe ffc8 	bl	195d0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1a640:	4629      	mov	r1, r5
	s->sched = sched;
   1a642:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1a644:	4630      	mov	r0, r6
   1a646:	f7e8 fa05 	bl	2a54 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a64a:	2210      	movs	r2, #16
   1a64c:	2100      	movs	r1, #0
   1a64e:	4620      	mov	r0, r4
   1a650:	f7fe ffbe 	bl	195d0 <_set>
	gf_double (s->K1, s->iv);
   1a654:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a658:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a65a:	4621      	mov	r1, r4
   1a65c:	4620      	mov	r0, r4
   1a65e:	f7ff ff5c 	bl	1a51a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1a662:	4621      	mov	r1, r4
   1a664:	4628      	mov	r0, r5
   1a666:	f7ff ffae 	bl	1a5c6 <gf_double>
	gf_double (s->K2, s->K1);
   1a66a:	4629      	mov	r1, r5
   1a66c:	f104 0020 	add.w	r0, r4, #32
   1a670:	f7ff ffa9 	bl	1a5c6 <gf_double>
	tc_cmac_init(s);
   1a674:	4620      	mov	r0, r4
   1a676:	f7ff ffc3 	bl	1a600 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1a67a:	2001      	movs	r0, #1
}
   1a67c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a67e:	4608      	mov	r0, r1
   1a680:	e7fc      	b.n	1a67c <tc_cmac_setup+0x50>

0001a682 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1a682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a686:	460d      	mov	r5, r1
   1a688:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a68a:	4604      	mov	r4, r0
   1a68c:	2800      	cmp	r0, #0
   1a68e:	d061      	beq.n	1a754 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1a690:	b912      	cbnz	r2, 1a698 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1a692:	2001      	movs	r0, #1
}
   1a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1a698:	2900      	cmp	r1, #0
   1a69a:	d05b      	beq.n	1a754 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1a69c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1a6a0:	ea53 0102 	orrs.w	r1, r3, r2
   1a6a4:	d056      	beq.n	1a754 <tc_cmac_update+0xd2>
	s->countdown--;
   1a6a6:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1a6a8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1a6ac:	f142 32ff 	adc.w	r2, r2, #4294967295
   1a6b0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1a6b4:	f1b8 0f00 	cmp.w	r8, #0
   1a6b8:	d02a      	beq.n	1a710 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1a6ba:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a6be:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1a6c2:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a6c4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1a6c6:	d208      	bcs.n	1a6da <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a6c8:	462a      	mov	r2, r5
   1a6ca:	4633      	mov	r3, r6
   1a6cc:	4631      	mov	r1, r6
   1a6ce:	f7fe ff72 	bl	195b6 <_copy>
			s->leftover_offset += data_length;
   1a6d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a6d4:	4432      	add	r2, r6
   1a6d6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1a6d8:	e7db      	b.n	1a692 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1a6da:	463b      	mov	r3, r7
   1a6dc:	462a      	mov	r2, r5
   1a6de:	4639      	mov	r1, r7
   1a6e0:	f7fe ff69 	bl	195b6 <_copy>
		data_length -= remaining_space;
   1a6e4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1a6e6:	2300      	movs	r3, #0
   1a6e8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1a6ea:	4446      	add	r6, r8
		data += remaining_space;
   1a6ec:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a6ee:	1e63      	subs	r3, r4, #1
   1a6f0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1a6f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a6f8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a6fc:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1a6fe:	ea82 0200 	eor.w	r2, r2, r0
   1a702:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a704:	d1f6      	bne.n	1a6f4 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a706:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a708:	4621      	mov	r1, r4
   1a70a:	4620      	mov	r0, r4
   1a70c:	f7ff ff05 	bl	1a51a <tc_aes_encrypt>
   1a710:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1a714:	2e10      	cmp	r6, #16
   1a716:	d80a      	bhi.n	1a72e <tc_cmac_update+0xac>
	if (data_length > 0) {
   1a718:	2e00      	cmp	r6, #0
   1a71a:	d0ba      	beq.n	1a692 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1a71c:	4633      	mov	r3, r6
   1a71e:	462a      	mov	r2, r5
   1a720:	4631      	mov	r1, r6
   1a722:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a726:	f7fe ff46 	bl	195b6 <_copy>
		s->leftover_offset = data_length;
   1a72a:	6466      	str	r6, [r4, #68]	; 0x44
   1a72c:	e7b1      	b.n	1a692 <tc_cmac_update+0x10>
   1a72e:	1e63      	subs	r3, r4, #1
   1a730:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1a732:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a736:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a73a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1a73c:	ea82 0200 	eor.w	r2, r2, r0
   1a740:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a742:	d1f6      	bne.n	1a732 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a744:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a746:	4621      	mov	r1, r4
   1a748:	4620      	mov	r0, r4
   1a74a:	f7ff fee6 	bl	1a51a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1a74e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1a750:	3e10      	subs	r6, #16
   1a752:	e7df      	b.n	1a714 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1a754:	2000      	movs	r0, #0
   1a756:	e79d      	b.n	1a694 <tc_cmac_update+0x12>

0001a758 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a758:	b570      	push	{r4, r5, r6, lr}
   1a75a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a75c:	4605      	mov	r5, r0
   1a75e:	b1e8      	cbz	r0, 1a79c <tc_cmac_final+0x44>
   1a760:	b369      	cbz	r1, 1a7be <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a762:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a764:	2a10      	cmp	r2, #16
   1a766:	d11a      	bne.n	1a79e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a768:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a76a:	1e63      	subs	r3, r4, #1
   1a76c:	3901      	subs	r1, #1
   1a76e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a772:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a776:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1a77a:	4072      	eors	r2, r6
   1a77c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a780:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a782:	ea82 0206 	eor.w	r2, r2, r6
   1a786:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a788:	d1f3      	bne.n	1a772 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a78a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a78c:	4621      	mov	r1, r4
   1a78e:	4628      	mov	r0, r5
   1a790:	f7ff fec3 	bl	1a51a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a794:	4620      	mov	r0, r4
   1a796:	f7ff ff2b 	bl	1a5f0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a79a:	2001      	movs	r0, #1
}
   1a79c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a79e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a7a2:	2100      	movs	r1, #0
   1a7a4:	f1c2 0210 	rsb	r2, r2, #16
   1a7a8:	4420      	add	r0, r4
   1a7aa:	f7fe ff11 	bl	195d0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a7ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a7b0:	4423      	add	r3, r4
   1a7b2:	2280      	movs	r2, #128	; 0x80
   1a7b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a7b8:	f104 0120 	add.w	r1, r4, #32
   1a7bc:	e7d5      	b.n	1a76a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a7be:	4608      	mov	r0, r1
   1a7c0:	e7ec      	b.n	1a79c <tc_cmac_final+0x44>

0001a7c2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1a7c2:	f003 bef9 	b.w	1e5b8 <z_fatal_error>

0001a7c6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1a7c6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1a7c8:	6800      	ldr	r0, [r0, #0]
   1a7ca:	f003 bef5 	b.w	1e5b8 <z_fatal_error>

0001a7ce <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a7ce:	2100      	movs	r1, #0
   1a7d0:	2001      	movs	r0, #1
   1a7d2:	f7ff bff6 	b.w	1a7c2 <z_arm_fatal_error>

0001a7d6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1a7d6:	b508      	push	{r3, lr}
	handler();
   1a7d8:	f7e8 fa04 	bl	2be4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1a7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1a7e0:	f7e8 bae4 	b.w	2dac <z_arm_exc_exit>

0001a7e4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1a7e4:	3901      	subs	r1, #1
   1a7e6:	4603      	mov	r3, r0
   1a7e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a7ec:	b90a      	cbnz	r2, 1a7f2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1a7ee:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1a7f0:	4770      	bx	lr
		*d = *s;
   1a7f2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1a7f6:	e7f7      	b.n	1a7e8 <strcpy+0x4>

0001a7f8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1a7f8:	4603      	mov	r3, r0
	size_t n = 0;
   1a7fa:	2000      	movs	r0, #0

	while (*s != '\0') {
   1a7fc:	5c1a      	ldrb	r2, [r3, r0]
   1a7fe:	b902      	cbnz	r2, 1a802 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a800:	4770      	bx	lr
		n++;
   1a802:	3001      	adds	r0, #1
   1a804:	e7fa      	b.n	1a7fc <strlen+0x4>

0001a806 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1a806:	4603      	mov	r3, r0
	size_t n = 0;
   1a808:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1a80a:	5c1a      	ldrb	r2, [r3, r0]
   1a80c:	b10a      	cbz	r2, 1a812 <strnlen+0xc>
   1a80e:	4288      	cmp	r0, r1
   1a810:	d100      	bne.n	1a814 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1a812:	4770      	bx	lr
		n++;
   1a814:	3001      	adds	r0, #1
   1a816:	e7f8      	b.n	1a80a <strnlen+0x4>

0001a818 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1a818:	1e43      	subs	r3, r0, #1
   1a81a:	3901      	subs	r1, #1
   1a81c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a820:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1a824:	4282      	cmp	r2, r0
   1a826:	d101      	bne.n	1a82c <strcmp+0x14>
   1a828:	2a00      	cmp	r2, #0
   1a82a:	d1f7      	bne.n	1a81c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1a82c:	1a10      	subs	r0, r2, r0
   1a82e:	4770      	bx	lr

0001a830 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a830:	b510      	push	{r4, lr}
   1a832:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a834:	b15a      	cbz	r2, 1a84e <memcmp+0x1e>
   1a836:	3901      	subs	r1, #1
   1a838:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a83a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1a83e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a842:	42a3      	cmp	r3, r4
   1a844:	d001      	beq.n	1a84a <memcmp+0x1a>
   1a846:	4290      	cmp	r0, r2
   1a848:	d0f7      	beq.n	1a83a <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a84a:	1a80      	subs	r0, r0, r2
}
   1a84c:	bd10      	pop	{r4, pc}
		return 0;
   1a84e:	4610      	mov	r0, r2
   1a850:	e7fc      	b.n	1a84c <memcmp+0x1c>

0001a852 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1a852:	b510      	push	{r4, lr}
   1a854:	1e43      	subs	r3, r0, #1
   1a856:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a858:	4291      	cmp	r1, r2
   1a85a:	d100      	bne.n	1a85e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a85c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1a85e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a862:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a866:	e7f7      	b.n	1a858 <memcpy+0x6>

0001a868 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1a868:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1a86a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1a86c:	4603      	mov	r3, r0
	while (n > 0) {
   1a86e:	4293      	cmp	r3, r2
   1a870:	d100      	bne.n	1a874 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a872:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1a874:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a878:	e7f9      	b.n	1a86e <memset+0x6>

0001a87a <_stdout_hook_default>:
}
   1a87a:	f04f 30ff 	mov.w	r0, #4294967295
   1a87e:	4770      	bx	lr

0001a880 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1a880:	2806      	cmp	r0, #6
   1a882:	d108      	bne.n	1a896 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1a884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a888:	2201      	movs	r2, #1
   1a88a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1a88e:	f3bf 8f4f 	dsb	sy
        __WFE();
   1a892:	bf20      	wfe
    while (true)
   1a894:	e7fd      	b.n	1a892 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1a896:	4770      	bx	lr

0001a898 <pm_state_exit_post_ops>:
   1a898:	2300      	movs	r3, #0
   1a89a:	f383 8811 	msr	BASEPRI, r3
   1a89e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1a8a2:	4770      	bx	lr

0001a8a4 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1a8a4:	b530      	push	{r4, r5, lr}
	memcpy(res, r, 3);
   1a8a6:	2203      	movs	r2, #3
{
   1a8a8:	b087      	sub	sp, #28
   1a8aa:	4605      	mov	r5, r0
   1a8ac:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   1a8ae:	a802      	add	r0, sp, #8
   1a8b0:	4411      	add	r1, r2
   1a8b2:	f7ff ffce 	bl	1a852 <memcpy>
	(void)memset(res + 3, 0, 13);
   1a8b6:	220d      	movs	r2, #13
   1a8b8:	2100      	movs	r1, #0
   1a8ba:	f10d 000b 	add.w	r0, sp, #11
   1a8be:	f7ff ffd3 	bl	1a868 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1a8c2:	aa02      	add	r2, sp, #8
   1a8c4:	4611      	mov	r1, r2
   1a8c6:	4628      	mov	r0, r5
   1a8c8:	f7f1 f8d2 	bl	ba70 <bt_encrypt_le>
	if (err) {
   1a8cc:	b970      	cbnz	r0, 1a8ec <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   1a8ce:	2203      	movs	r2, #3
   1a8d0:	a902      	add	r1, sp, #8
   1a8d2:	a801      	add	r0, sp, #4
   1a8d4:	f7ff ffbd 	bl	1a852 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1a8d8:	2203      	movs	r2, #3
   1a8da:	a901      	add	r1, sp, #4
   1a8dc:	4620      	mov	r0, r4
   1a8de:	f7ff ffa7 	bl	1a830 <memcmp>
   1a8e2:	fab0 f080 	clz	r0, r0
   1a8e6:	0940      	lsrs	r0, r0, #5
}
   1a8e8:	b007      	add	sp, #28
   1a8ea:	bd30      	pop	{r4, r5, pc}
		return false;
   1a8ec:	2000      	movs	r0, #0
   1a8ee:	e7fb      	b.n	1a8e8 <bt_rpa_irk_matches+0x44>

0001a8f0 <send_cmd_status>:
{
   1a8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1a8f4:	f04f 32ff 	mov.w	r2, #4294967295
{
   1a8f8:	4606      	mov	r6, r0
   1a8fa:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1a8fc:	f04f 33ff 	mov.w	r3, #4294967295
   1a900:	2100      	movs	r1, #0
   1a902:	200f      	movs	r0, #15
   1a904:	f7e8 ff0c 	bl	3720 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1a908:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1a90a:	f100 0808 	add.w	r8, r0, #8
   1a90e:	4604      	mov	r4, r0
   1a910:	7507      	strb	r7, [r0, #20]
   1a912:	2102      	movs	r1, #2
   1a914:	4640      	mov	r0, r8
   1a916:	f003 faf8 	bl	1df0a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a91a:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1a91c:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a91e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1a920:	7041      	strb	r1, [r0, #1]
   1a922:	4640      	mov	r0, r8
   1a924:	f003 faf1 	bl	1df0a <net_buf_simple_add>
	evt->ncmd = 1U;
   1a928:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1a92a:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1a92c:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1a92e:	4620      	mov	r0, r4
}
   1a930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1a934:	f7e9 bb44 	b.w	3fc0 <bt_recv_prio>

0001a938 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1a938:	f101 0320 	add.w	r3, r1, #32
   1a93c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1a93e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a942:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1a946:	428b      	cmp	r3, r1
   1a948:	d1f9      	bne.n	1a93e <sys_memcpy_swap.constprop.0+0x6>
}
   1a94a:	4770      	bx	lr

0001a94c <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1a94c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1a950:	f043 0306 	orr.w	r3, r3, #6
   1a954:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1a958:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1a95c:	f043 0304 	orr.w	r3, r3, #4
   1a960:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1a964:	4770      	bx	lr

0001a966 <default_CSPRNG>:
{
   1a966:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1a968:	f7f1 f880 	bl	ba6c <bt_rand>
}
   1a96c:	fab0 f080 	clz	r0, r0
   1a970:	0940      	lsrs	r0, r0, #5
   1a972:	bd08      	pop	{r3, pc}

0001a974 <bt_uuid_cmp>:
{
   1a974:	b510      	push	{r4, lr}
   1a976:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   1a978:	7801      	ldrb	r1, [r0, #0]
   1a97a:	7822      	ldrb	r2, [r4, #0]
   1a97c:	428a      	cmp	r2, r1
{
   1a97e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1a980:	d00f      	beq.n	1a9a2 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1a982:	4669      	mov	r1, sp
   1a984:	f7e8 fe0e 	bl	35a4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a988:	a905      	add	r1, sp, #20
   1a98a:	4620      	mov	r0, r4
   1a98c:	f7e8 fe0a 	bl	35a4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a990:	2210      	movs	r2, #16
   1a992:	f10d 0115 	add.w	r1, sp, #21
   1a996:	f10d 0001 	add.w	r0, sp, #1
   1a99a:	f7ff ff49 	bl	1a830 <memcmp>
}
   1a99e:	b00a      	add	sp, #40	; 0x28
   1a9a0:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1a9a2:	2a01      	cmp	r2, #1
   1a9a4:	d006      	beq.n	1a9b4 <bt_uuid_cmp+0x40>
   1a9a6:	2a02      	cmp	r2, #2
   1a9a8:	d007      	beq.n	1a9ba <bt_uuid_cmp+0x46>
   1a9aa:	b972      	cbnz	r2, 1a9ca <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a9ac:	8840      	ldrh	r0, [r0, #2]
   1a9ae:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a9b0:	1ac0      	subs	r0, r0, r3
   1a9b2:	e7f4      	b.n	1a99e <bt_uuid_cmp+0x2a>
   1a9b4:	6840      	ldr	r0, [r0, #4]
   1a9b6:	6863      	ldr	r3, [r4, #4]
   1a9b8:	e7fa      	b.n	1a9b0 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a9ba:	2210      	movs	r2, #16
   1a9bc:	1c61      	adds	r1, r4, #1
   1a9be:	3001      	adds	r0, #1
}
   1a9c0:	b00a      	add	sp, #40	; 0x28
   1a9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a9c6:	f7ff bf33 	b.w	1a830 <memcmp>
	switch (u1->type) {
   1a9ca:	f06f 0015 	mvn.w	r0, #21
   1a9ce:	e7e6      	b.n	1a99e <bt_uuid_cmp+0x2a>

0001a9d0 <bt_uuid_create>:
	switch (data_len) {
   1a9d0:	2a04      	cmp	r2, #4
{
   1a9d2:	b510      	push	{r4, lr}
	switch (data_len) {
   1a9d4:	d00a      	beq.n	1a9ec <bt_uuid_create+0x1c>
   1a9d6:	2a10      	cmp	r2, #16
   1a9d8:	d00d      	beq.n	1a9f6 <bt_uuid_create+0x26>
   1a9da:	2a02      	cmp	r2, #2
   1a9dc:	f04f 0300 	mov.w	r3, #0
   1a9e0:	d10f      	bne.n	1aa02 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   1a9e2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1a9e4:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a9e6:	8043      	strh	r3, [r0, #2]
	return true;
   1a9e8:	2001      	movs	r0, #1
}
   1a9ea:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1a9ec:	2301      	movs	r3, #1
   1a9ee:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a9f0:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a9f2:	6042      	str	r2, [r0, #4]
		break;
   1a9f4:	e7f8      	b.n	1a9e8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1a9f6:	2302      	movs	r3, #2
   1a9f8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1a9fc:	f7ff ff29 	bl	1a852 <memcpy>
		break;
   1aa00:	e7f2      	b.n	1a9e8 <bt_uuid_create+0x18>
	switch (data_len) {
   1aa02:	4618      	mov	r0, r3
   1aa04:	e7f1      	b.n	1a9ea <bt_uuid_create+0x1a>

0001aa06 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1aa06:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1aa08:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1aa0a:	2106      	movs	r1, #6
{
   1aa0c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1aa0e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1aa12:	f7f1 f82b 	bl	ba6c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1aa16:	b918      	cbnz	r0, 1aa20 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1aa18:	79a3      	ldrb	r3, [r4, #6]
   1aa1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1aa1e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1aa20:	bd10      	pop	{r4, pc}

0001aa22 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1aa22:	280f      	cmp	r0, #15
   1aa24:	d806      	bhi.n	1aa34 <bt_hci_evt_get_flags+0x12>
   1aa26:	280d      	cmp	r0, #13
   1aa28:	d80b      	bhi.n	1aa42 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1aa2a:	2805      	cmp	r0, #5
   1aa2c:	bf14      	ite	ne
   1aa2e:	2002      	movne	r0, #2
   1aa30:	2003      	moveq	r0, #3
   1aa32:	4770      	bx	lr
	switch (evt) {
   1aa34:	2813      	cmp	r0, #19
   1aa36:	d004      	beq.n	1aa42 <bt_hci_evt_get_flags+0x20>
   1aa38:	281a      	cmp	r0, #26
   1aa3a:	bf14      	ite	ne
   1aa3c:	2002      	movne	r0, #2
   1aa3e:	2001      	moveq	r0, #1
   1aa40:	4770      	bx	lr
   1aa42:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1aa44:	4770      	bx	lr

0001aa46 <handle_event>:
{
   1aa46:	b410      	push	{r4}
   1aa48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1aa4c:	4604      	mov	r4, r0
   1aa4e:	4608      	mov	r0, r1
		if (handler->event != event) {
   1aa50:	7811      	ldrb	r1, [r2, #0]
   1aa52:	42a1      	cmp	r1, r4
   1aa54:	d004      	beq.n	1aa60 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1aa56:	3208      	adds	r2, #8
   1aa58:	429a      	cmp	r2, r3
   1aa5a:	d1f9      	bne.n	1aa50 <handle_event+0xa>
}
   1aa5c:	bc10      	pop	{r4}
   1aa5e:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1aa60:	8981      	ldrh	r1, [r0, #12]
   1aa62:	7853      	ldrb	r3, [r2, #1]
   1aa64:	4299      	cmp	r1, r3
   1aa66:	d3f9      	bcc.n	1aa5c <handle_event+0x16>
		handler->handler(buf);
   1aa68:	6853      	ldr	r3, [r2, #4]
}
   1aa6a:	bc10      	pop	{r4}
		handler->handler(buf);
   1aa6c:	4718      	bx	r3

0001aa6e <hci_data_buf_overflow>:
}
   1aa6e:	4770      	bx	lr

0001aa70 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1aa70:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1aa74:	b193      	cbz	r3, 1aa9c <update_sec_level+0x2c>
   1aa76:	7b5a      	ldrb	r2, [r3, #13]
   1aa78:	07d1      	lsls	r1, r2, #31
   1aa7a:	d50f      	bpl.n	1aa9c <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1aa7c:	06d2      	lsls	r2, r2, #27
   1aa7e:	d50b      	bpl.n	1aa98 <update_sec_level+0x28>
   1aa80:	7b1b      	ldrb	r3, [r3, #12]
   1aa82:	2b10      	cmp	r3, #16
   1aa84:	d108      	bne.n	1aa98 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   1aa86:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1aa88:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1aa8a:	7a82      	ldrb	r2, [r0, #10]
   1aa8c:	7a40      	ldrb	r0, [r0, #9]
}
   1aa8e:	4282      	cmp	r2, r0
   1aa90:	bf8c      	ite	hi
   1aa92:	2000      	movhi	r0, #0
   1aa94:	2001      	movls	r0, #1
   1aa96:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   1aa98:	2303      	movs	r3, #3
   1aa9a:	e7f5      	b.n	1aa88 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   1aa9c:	2302      	movs	r3, #2
   1aa9e:	e7f3      	b.n	1aa88 <update_sec_level+0x18>

0001aaa0 <hci_disconn_complete>:
{
   1aaa0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1aaa2:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   1aaa4:	782e      	ldrb	r6, [r5, #0]
   1aaa6:	b97e      	cbnz	r6, 1aac8 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   1aaa8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1aaac:	f7ea fcac 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1aab0:	4604      	mov	r4, r0
   1aab2:	b148      	cbz	r0, 1aac8 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   1aab4:	78eb      	ldrb	r3, [r5, #3]
   1aab6:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1aab8:	4631      	mov	r1, r6
   1aaba:	f7ea fcad 	bl	5418 <bt_conn_set_state>
		bt_conn_unref(conn);
   1aabe:	4620      	mov	r0, r4
}
   1aac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1aac4:	f000 be0c 	b.w	1b6e0 <bt_conn_unref>
}
   1aac8:	bd70      	pop	{r4, r5, r6, pc}

0001aaca <le_phy_update_complete>:
{
   1aaca:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1aacc:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1aace:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1aad2:	f7ea fc99 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1aad6:	b118      	cbz	r0, 1aae0 <le_phy_update_complete+0x16>
}
   1aad8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1aadc:	f000 be00 	b.w	1b6e0 <bt_conn_unref>
}
   1aae0:	bd08      	pop	{r3, pc}

0001aae2 <le_data_len_change>:
{
   1aae2:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1aae4:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1aae6:	8818      	ldrh	r0, [r3, #0]
   1aae8:	f7ea fc8e 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1aaec:	b118      	cbz	r0, 1aaf6 <le_data_len_change+0x14>
}
   1aaee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1aaf2:	f000 bdf5 	b.w	1b6e0 <bt_conn_unref>
}
   1aaf6:	bd08      	pop	{r3, pc}

0001aaf8 <atomic_or>:
{
   1aaf8:	4603      	mov	r3, r0
}
   1aafa:	f3bf 8f5b 	dmb	ish
   1aafe:	e853 0f00 	ldrex	r0, [r3]
   1ab02:	ea40 0201 	orr.w	r2, r0, r1
   1ab06:	e843 2c00 	strex	ip, r2, [r3]
   1ab0a:	f1bc 0f00 	cmp.w	ip, #0
   1ab0e:	d1f6      	bne.n	1aafe <atomic_or+0x6>
   1ab10:	f3bf 8f5b 	dmb	ish
   1ab14:	4770      	bx	lr

0001ab16 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1ab16:	2101      	movs	r1, #1
   1ab18:	3008      	adds	r0, #8
   1ab1a:	f003 ba33 	b.w	1df84 <net_buf_simple_pull_mem>

0001ab1e <le_conn_update_complete>:
{
   1ab1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1ab20:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1ab22:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1ab26:	f7ea fc6f 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1ab2a:	4604      	mov	r4, r0
   1ab2c:	2800      	cmp	r0, #0
   1ab2e:	d03c      	beq.n	1abaa <le_conn_update_complete+0x8c>
	if (!evt->status) {
   1ab30:	782b      	ldrb	r3, [r5, #0]
   1ab32:	b9cb      	cbnz	r3, 1ab68 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1ab34:	792a      	ldrb	r2, [r5, #4]
   1ab36:	78eb      	ldrb	r3, [r5, #3]
   1ab38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ab3c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1ab40:	79aa      	ldrb	r2, [r5, #6]
   1ab42:	796b      	ldrb	r3, [r5, #5]
   1ab44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ab48:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1ab4c:	79eb      	ldrb	r3, [r5, #7]
   1ab4e:	7a2a      	ldrb	r2, [r5, #8]
   1ab50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ab54:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1ab58:	f7ea fd2c 	bl	55b4 <notify_le_param_updated>
	bt_conn_unref(conn);
   1ab5c:	4620      	mov	r0, r4
}
   1ab5e:	b003      	add	sp, #12
   1ab60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   1ab64:	f000 bdbc 	b.w	1b6e0 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1ab68:	2b1a      	cmp	r3, #26
   1ab6a:	d1f7      	bne.n	1ab5c <le_conn_update_complete+0x3e>
   1ab6c:	78c3      	ldrb	r3, [r0, #3]
   1ab6e:	2b01      	cmp	r3, #1
   1ab70:	d1f4      	bne.n	1ab5c <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ab72:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ab76:	3004      	adds	r0, #4
   1ab78:	f7ff ffbe 	bl	1aaf8 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1ab7c:	0583      	lsls	r3, r0, #22
   1ab7e:	d4ed      	bmi.n	1ab5c <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   1ab80:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1ab84:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1ab88:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   1ab8c:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1ab90:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1ab94:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1ab98:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   1ab9a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1ab9e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1aba2:	4620      	mov	r0, r4
   1aba4:	f001 f953 	bl	1be4e <bt_l2cap_update_conn_param>
   1aba8:	e7d8      	b.n	1ab5c <le_conn_update_complete+0x3e>
}
   1abaa:	b003      	add	sp, #12
   1abac:	bd30      	pop	{r4, r5, pc}

0001abae <le_remote_feat_complete>:
{
   1abae:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1abb0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1abb2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1abb6:	f7ea fc27 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1abba:	4604      	mov	r4, r0
   1abbc:	b180      	cbz	r0, 1abe0 <le_remote_feat_complete+0x32>
	if (!evt->status) {
   1abbe:	782b      	ldrb	r3, [r5, #0]
   1abc0:	b923      	cbnz	r3, 1abcc <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1abc2:	2208      	movs	r2, #8
   1abc4:	1ce9      	adds	r1, r5, #3
   1abc6:	30ac      	adds	r0, #172	; 0xac
   1abc8:	f7ff fe43 	bl	1a852 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1abcc:	1d20      	adds	r0, r4, #4
   1abce:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1abd2:	f7ff ff91 	bl	1aaf8 <atomic_or>
	bt_conn_unref(conn);
   1abd6:	4620      	mov	r0, r4
}
   1abd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1abdc:	f000 bd80 	b.w	1b6e0 <bt_conn_unref>
}
   1abe0:	bd38      	pop	{r3, r4, r5, pc}

0001abe2 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1abe2:	f3bf 8f5b 	dmb	ish
   1abe6:	e850 3f00 	ldrex	r3, [r0]
   1abea:	400b      	ands	r3, r1
   1abec:	e840 3200 	strex	r2, r3, [r0]
   1abf0:	2a00      	cmp	r2, #0
   1abf2:	d1f8      	bne.n	1abe6 <atomic_and.isra.0+0x4>
   1abf4:	f3bf 8f5b 	dmb	ish
}
   1abf8:	4770      	bx	lr

0001abfa <hci_vendor_event>:
   1abfa:	4770      	bx	lr

0001abfc <sys_put_le64>:
	dst[1] = val >> 8;
   1abfc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1ac00:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1ac02:	0e00      	lsrs	r0, r0, #24
   1ac04:	7053      	strb	r3, [r2, #1]
   1ac06:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1ac08:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1ac0a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1ac0e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1ac10:	7093      	strb	r3, [r2, #2]
   1ac12:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1ac14:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1ac16:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1ac18:	71d1      	strb	r1, [r2, #7]
}
   1ac1a:	4770      	bx	lr

0001ac1c <hci_num_completed_packets>:
{
   1ac1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1ac20:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1ac22:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1ac24:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1ac26:	783b      	ldrb	r3, [r7, #0]
   1ac28:	429d      	cmp	r5, r3
   1ac2a:	db01      	blt.n	1ac30 <hci_num_completed_packets+0x14>
}
   1ac2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1ac30:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1ac34:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1ac38:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1ac3c:	f7ea fbe4 	bl	5408 <bt_conn_lookup_handle>
		if (!conn) {
   1ac40:	4604      	mov	r4, r0
   1ac42:	b350      	cbz	r0, 1ac9a <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1ac44:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1ac48:	b326      	cbz	r6, 1ac94 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1ac4a:	f04f 0320 	mov.w	r3, #32
   1ac4e:	f3ef 8211 	mrs	r2, BASEPRI
   1ac52:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac56:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1ac5a:	69e3      	ldr	r3, [r4, #28]
   1ac5c:	b16b      	cbz	r3, 1ac7a <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1ac5e:	3b01      	subs	r3, #1
   1ac60:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1ac62:	f382 8811 	msr	BASEPRI, r2
   1ac66:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	f7ea fb22 	bl	52b4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1ac70:	3e01      	subs	r6, #1
   1ac72:	f7fd f94f 	bl	17f14 <z_impl_k_sem_give>
   1ac76:	b2b6      	uxth	r6, r6
   1ac78:	e7e6      	b.n	1ac48 <hci_num_completed_packets+0x2c>
	return list->head;
   1ac7a:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1ac7c:	b12b      	cbz	r3, 1ac8a <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ac7e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1ac80:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1ac82:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ac84:	428b      	cmp	r3, r1
	list->tail = node;
   1ac86:	bf08      	it	eq
   1ac88:	61a0      	streq	r0, [r4, #24]
   1ac8a:	f382 8811 	msr	BASEPRI, r2
   1ac8e:	f3bf 8f6f 	isb	sy
			if (!node) {
   1ac92:	b923      	cbnz	r3, 1ac9e <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1ac94:	4620      	mov	r0, r4
   1ac96:	f000 fd23 	bl	1b6e0 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1ac9a:	3501      	adds	r5, #1
   1ac9c:	e7c3      	b.n	1ac26 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1ac9e:	f04f 0220 	mov.w	r2, #32
   1aca2:	f3ef 8111 	mrs	r1, BASEPRI
   1aca6:	f382 8812 	msr	BASEPRI_MAX, r2
   1acaa:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1acae:	68da      	ldr	r2, [r3, #12]
   1acb0:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1acb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1acb4:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1acb8:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1acbc:	b94a      	cbnz	r2, 1acd2 <hci_num_completed_packets+0xb6>
	list->head = node;
   1acbe:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1acc2:	f381 8811 	msr	BASEPRI, r1
   1acc6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1acca:	4648      	mov	r0, r9
   1accc:	f7fd fab0 	bl	18230 <k_work_submit>
   1acd0:	e7cb      	b.n	1ac6a <hci_num_completed_packets+0x4e>
	parent->next = child;
   1acd2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1acd4:	6263      	str	r3, [r4, #36]	; 0x24
}
   1acd6:	e7f4      	b.n	1acc2 <hci_num_completed_packets+0xa6>

0001acd8 <le_ltk_request>:
{
   1acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1acda:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1acdc:	8826      	ldrh	r6, [r4, #0]
{
   1acde:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1ace0:	b2b0      	uxth	r0, r6
   1ace2:	f7ea fb91 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1ace6:	4605      	mov	r5, r0
   1ace8:	b318      	cbz	r0, 1ad32 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1acea:	af02      	add	r7, sp, #8
   1acec:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1acf0:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1acf4:	9701      	str	r7, [sp, #4]
   1acf6:	8961      	ldrh	r1, [r4, #10]
   1acf8:	9100      	str	r1, [sp, #0]
   1acfa:	f002 fdea 	bl	1d8d2 <bt_smp_request_ltk>
   1acfe:	b1d0      	cbz	r0, 1ad36 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1ad00:	2112      	movs	r1, #18
   1ad02:	f242 001a 	movw	r0, #8218	; 0x201a
   1ad06:	f7e8 feb9 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1ad0a:	4604      	mov	r4, r0
   1ad0c:	b170      	cbz	r0, 1ad2c <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   1ad0e:	2112      	movs	r1, #18
   1ad10:	3008      	adds	r0, #8
   1ad12:	f003 f8fa 	bl	1df0a <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1ad16:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1ad18:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1ad1c:	2210      	movs	r2, #16
   1ad1e:	f7ff fd98 	bl	1a852 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1ad22:	4621      	mov	r1, r4
   1ad24:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1ad28:	f7e8 fee2 	bl	3af0 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   1ad2c:	4628      	mov	r0, r5
   1ad2e:	f000 fcd7 	bl	1b6e0 <bt_conn_unref>
}
   1ad32:	b007      	add	sp, #28
   1ad34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1ad36:	2102      	movs	r1, #2
   1ad38:	f242 001b 	movw	r0, #8219	; 0x201b
   1ad3c:	f7e8 fe9e 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1ad40:	4604      	mov	r4, r0
   1ad42:	2800      	cmp	r0, #0
   1ad44:	d0f2      	beq.n	1ad2c <le_ltk_request+0x54>
   1ad46:	2102      	movs	r1, #2
   1ad48:	3008      	adds	r0, #8
   1ad4a:	f003 f8de 	bl	1df0a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1ad4e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1ad50:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1ad52:	f242 001b 	movw	r0, #8219	; 0x201b
   1ad56:	e7e7      	b.n	1ad28 <le_ltk_request+0x50>

0001ad58 <le_conn_param_neg_reply>:
{
   1ad58:	b570      	push	{r4, r5, r6, lr}
   1ad5a:	4606      	mov	r6, r0
   1ad5c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1ad5e:	f242 0021 	movw	r0, #8225	; 0x2021
   1ad62:	2103      	movs	r1, #3
   1ad64:	f7e8 fe8a 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1ad68:	4604      	mov	r4, r0
   1ad6a:	b160      	cbz	r0, 1ad86 <le_conn_param_neg_reply+0x2e>
   1ad6c:	2103      	movs	r1, #3
   1ad6e:	3008      	adds	r0, #8
   1ad70:	f003 f8cb 	bl	1df0a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1ad74:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1ad76:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1ad78:	4621      	mov	r1, r4
   1ad7a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1ad7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1ad82:	f7e8 beb5 	b.w	3af0 <bt_hci_cmd_send>
}
   1ad86:	bd70      	pop	{r4, r5, r6, pc}

0001ad88 <le_conn_param_req>:
{
   1ad88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1ad8a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1ad8c:	78d9      	ldrb	r1, [r3, #3]
   1ad8e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1ad90:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1ad92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1ad96:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1ad9a:	7959      	ldrb	r1, [r3, #5]
   1ad9c:	791a      	ldrb	r2, [r3, #4]
   1ad9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1ada2:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1ada6:	799a      	ldrb	r2, [r3, #6]
   1ada8:	79d9      	ldrb	r1, [r3, #7]
   1adaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1adae:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1adb2:	7a1a      	ldrb	r2, [r3, #8]
   1adb4:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1adb6:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1adb8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1adbc:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1adbe:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1adc2:	f7ea fb21 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1adc6:	4606      	mov	r6, r0
   1adc8:	b928      	cbnz	r0, 1add6 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1adca:	2102      	movs	r1, #2
   1adcc:	4620      	mov	r0, r4
   1adce:	f7ff ffc3 	bl	1ad58 <le_conn_param_neg_reply>
}
   1add2:	b003      	add	sp, #12
   1add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1add6:	4669      	mov	r1, sp
   1add8:	f7ea fc30 	bl	563c <le_param_req>
   1addc:	b938      	cbnz	r0, 1adee <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1adde:	211e      	movs	r1, #30
   1ade0:	4620      	mov	r0, r4
   1ade2:	f7ff ffb9 	bl	1ad58 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1ade6:	4630      	mov	r0, r6
   1ade8:	f000 fc7a 	bl	1b6e0 <bt_conn_unref>
   1adec:	e7f1      	b.n	1add2 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1adee:	210e      	movs	r1, #14
   1adf0:	f242 0020 	movw	r0, #8224	; 0x2020
   1adf4:	f7e8 fe42 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1adf8:	4605      	mov	r5, r0
   1adfa:	2800      	cmp	r0, #0
   1adfc:	d0f3      	beq.n	1ade6 <le_conn_param_req+0x5e>
   1adfe:	210e      	movs	r1, #14
   1ae00:	3008      	adds	r0, #8
   1ae02:	f003 f882 	bl	1df0a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1ae06:	220e      	movs	r2, #14
   1ae08:	4604      	mov	r4, r0
   1ae0a:	2100      	movs	r1, #0
   1ae0c:	f7ff fd2c 	bl	1a868 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1ae10:	f8bd 3000 	ldrh.w	r3, [sp]
   1ae14:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1ae16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1ae1a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1ae1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1ae20:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1ae22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1ae26:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1ae28:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1ae2a:	4629      	mov	r1, r5
   1ae2c:	f242 0020 	movw	r0, #8224	; 0x2020
   1ae30:	f7e8 fe5e 	bl	3af0 <bt_hci_cmd_send>
   1ae34:	e7d7      	b.n	1ade6 <le_conn_param_req+0x5e>

0001ae36 <hci_le_read_max_data_len>:
{
   1ae36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ae38:	4606      	mov	r6, r0
   1ae3a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1ae3c:	aa01      	add	r2, sp, #4
   1ae3e:	2100      	movs	r1, #0
   1ae40:	f242 002f 	movw	r0, #8239	; 0x202f
   1ae44:	f7e8 fe76 	bl	3b34 <bt_hci_cmd_send_sync>
	if (err) {
   1ae48:	4604      	mov	r4, r0
   1ae4a:	b948      	cbnz	r0, 1ae60 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1ae4c:	9801      	ldr	r0, [sp, #4]
   1ae4e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1ae50:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1ae54:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1ae56:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1ae5a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1ae5c:	f7fa ff5a 	bl	15d14 <net_buf_unref>
}
   1ae60:	4620      	mov	r0, r4
   1ae62:	b002      	add	sp, #8
   1ae64:	bd70      	pop	{r4, r5, r6, pc}

0001ae66 <bt_hci_disconnect>:
{
   1ae66:	b570      	push	{r4, r5, r6, lr}
   1ae68:	4606      	mov	r6, r0
   1ae6a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1ae6c:	f240 4006 	movw	r0, #1030	; 0x406
   1ae70:	2103      	movs	r1, #3
   1ae72:	f7e8 fe03 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1ae76:	4604      	mov	r4, r0
   1ae78:	b168      	cbz	r0, 1ae96 <bt_hci_disconnect+0x30>
   1ae7a:	2103      	movs	r1, #3
   1ae7c:	3008      	adds	r0, #8
   1ae7e:	f003 f844 	bl	1df0a <net_buf_simple_add>
	disconn->reason = reason;
   1ae82:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1ae84:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ae86:	4621      	mov	r1, r4
   1ae88:	2200      	movs	r2, #0
}
   1ae8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1ae8e:	f240 4006 	movw	r0, #1030	; 0x406
   1ae92:	f7e8 be4f 	b.w	3b34 <bt_hci_cmd_send_sync>
}
   1ae96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ae9a:	bd70      	pop	{r4, r5, r6, pc}

0001ae9c <bt_le_set_data_len>:
{
   1ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae9e:	4607      	mov	r7, r0
   1aea0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1aea2:	f242 0022 	movw	r0, #8226	; 0x2022
   1aea6:	2106      	movs	r1, #6
{
   1aea8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1aeaa:	f7e8 fde7 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1aeae:	4604      	mov	r4, r0
   1aeb0:	b178      	cbz	r0, 1aed2 <bt_le_set_data_len+0x36>
   1aeb2:	2106      	movs	r1, #6
   1aeb4:	3008      	adds	r0, #8
   1aeb6:	f003 f828 	bl	1df0a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1aeba:	883b      	ldrh	r3, [r7, #0]
   1aebc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1aebe:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1aec0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1aec2:	4621      	mov	r1, r4
   1aec4:	2200      	movs	r2, #0
}
   1aec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1aeca:	f242 0022 	movw	r0, #8226	; 0x2022
   1aece:	f7e8 be31 	b.w	3b34 <bt_hci_cmd_send_sync>
}
   1aed2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1aed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001aed8 <bt_le_set_phy>:
{
   1aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aedc:	4680      	mov	r8, r0
   1aede:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1aee0:	f242 0032 	movw	r0, #8242	; 0x2032
   1aee4:	2107      	movs	r1, #7
{
   1aee6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1aeea:	4616      	mov	r6, r2
   1aeec:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1aeee:	f7e8 fdc5 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1aef2:	4604      	mov	r4, r0
   1aef4:	b198      	cbz	r0, 1af1e <bt_le_set_phy+0x46>
   1aef6:	2107      	movs	r1, #7
   1aef8:	3008      	adds	r0, #8
   1aefa:	f003 f806 	bl	1df0a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1aefe:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1af02:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1af04:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1af06:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1af08:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1af0a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1af0e:	4621      	mov	r1, r4
   1af10:	2200      	movs	r2, #0
}
   1af12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1af16:	f242 0032 	movw	r0, #8242	; 0x2032
   1af1a:	f7e8 be0b 	b.w	3b34 <bt_hci_cmd_send_sync>
}
   1af1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1af22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001af26 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1af26:	6880      	ldr	r0, [r0, #8]
   1af28:	f7e8 be66 	b.w	3bf8 <bt_hci_le_enh_conn_complete>

0001af2c <le_legacy_conn_complete>:
{
   1af2c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1af2e:	6881      	ldr	r1, [r0, #8]
{
   1af30:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1af32:	780b      	ldrb	r3, [r1, #0]
   1af34:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1af38:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1af3c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1af40:	78cb      	ldrb	r3, [r1, #3]
   1af42:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1af46:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1af4a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1af4e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1af52:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1af56:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1af5a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1af5e:	7c4b      	ldrb	r3, [r1, #17]
   1af60:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1af64:	2207      	movs	r2, #7
   1af66:	3104      	adds	r1, #4
   1af68:	a803      	add	r0, sp, #12
   1af6a:	f7ff fc72 	bl	1a852 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1af6e:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1af70:	4669      	mov	r1, sp
   1af72:	2206      	movs	r2, #6
   1af74:	f10d 0013 	add.w	r0, sp, #19
   1af78:	9400      	str	r4, [sp, #0]
   1af7a:	f8ad 4004 	strh.w	r4, [sp, #4]
   1af7e:	f7ff fc68 	bl	1a852 <memcpy>
   1af82:	2206      	movs	r2, #6
   1af84:	4669      	mov	r1, sp
   1af86:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1af8a:	9400      	str	r4, [sp, #0]
   1af8c:	f8ad 4004 	strh.w	r4, [sp, #4]
   1af90:	f7ff fc5f 	bl	1a852 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1af94:	a802      	add	r0, sp, #8
   1af96:	f7e8 fe2f 	bl	3bf8 <bt_hci_le_enh_conn_complete>
}
   1af9a:	b00a      	add	sp, #40	; 0x28
   1af9c:	bd10      	pop	{r4, pc}

0001af9e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1af9e:	8803      	ldrh	r3, [r0, #0]
   1afa0:	8842      	ldrh	r2, [r0, #2]
   1afa2:	4293      	cmp	r3, r2
{
   1afa4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1afa6:	d819      	bhi.n	1afdc <bt_le_conn_params_valid+0x3e>
   1afa8:	2b05      	cmp	r3, #5
   1afaa:	d917      	bls.n	1afdc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1afac:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1afb0:	d814      	bhi.n	1afdc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1afb2:	8883      	ldrh	r3, [r0, #4]
   1afb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1afb8:	d210      	bcs.n	1afdc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1afba:	88c0      	ldrh	r0, [r0, #6]
   1afbc:	f1a0 010a 	sub.w	r1, r0, #10
   1afc0:	b289      	uxth	r1, r1
   1afc2:	f640 4476 	movw	r4, #3190	; 0xc76
   1afc6:	42a1      	cmp	r1, r4
   1afc8:	d808      	bhi.n	1afdc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1afca:	3301      	adds	r3, #1
   1afcc:	b29b      	uxth	r3, r3
   1afce:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1afd0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1afd4:	bf34      	ite	cc
   1afd6:	2001      	movcc	r0, #1
   1afd8:	2000      	movcs	r0, #0
}
   1afda:	bd10      	pop	{r4, pc}
		return false;
   1afdc:	2000      	movs	r0, #0
   1afde:	e7fc      	b.n	1afda <bt_le_conn_params_valid+0x3c>

0001afe0 <hci_encrypt_key_refresh_complete>:
{
   1afe0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1afe2:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1afe4:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   1afe8:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1afea:	f7ea fa0d 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1afee:	4604      	mov	r4, r0
   1aff0:	b338      	cbz	r0, 1b042 <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   1aff2:	b165      	cbz	r5, 1b00e <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   1aff4:	4628      	mov	r0, r5
   1aff6:	f7e8 ff0f 	bl	3e18 <bt_security_err_get>
   1affa:	4629      	mov	r1, r5
   1affc:	4602      	mov	r2, r0
   1affe:	4620      	mov	r0, r4
   1b000:	f7ea fb84 	bl	570c <bt_conn_security_changed>
	bt_conn_unref(conn);
   1b004:	4620      	mov	r0, r4
}
   1b006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1b00a:	f000 bb69 	b.w	1b6e0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1b00e:	7883      	ldrb	r3, [r0, #2]
   1b010:	2b01      	cmp	r3, #1
   1b012:	d107      	bne.n	1b024 <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   1b014:	f002 fe81 	bl	1dd1a <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1b018:	4620      	mov	r0, r4
   1b01a:	f7ff fd29 	bl	1aa70 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1b01e:	2800      	cmp	r0, #0
   1b020:	bf08      	it	eq
   1b022:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1b024:	4628      	mov	r0, r5
   1b026:	f7e8 fef7 	bl	3e18 <bt_security_err_get>
   1b02a:	4629      	mov	r1, r5
   1b02c:	4602      	mov	r2, r0
   1b02e:	4620      	mov	r0, r4
   1b030:	f7ea fb6c 	bl	570c <bt_conn_security_changed>
	if (status) {
   1b034:	2d00      	cmp	r5, #0
   1b036:	d0e5      	beq.n	1b004 <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   1b038:	4629      	mov	r1, r5
   1b03a:	4620      	mov	r0, r4
   1b03c:	f000 fb95 	bl	1b76a <bt_conn_disconnect>
   1b040:	e7e0      	b.n	1b004 <hci_encrypt_key_refresh_complete+0x24>
}
   1b042:	bd38      	pop	{r3, r4, r5, pc}

0001b044 <hci_encrypt_change>:
{
   1b044:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1b046:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1b048:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   1b04c:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1b04e:	f7ea f9db 	bl	5408 <bt_conn_lookup_handle>
	if (!conn) {
   1b052:	4604      	mov	r4, r0
   1b054:	b350      	cbz	r0, 1b0ac <hci_encrypt_change+0x68>
	if (status) {
   1b056:	b165      	cbz	r5, 1b072 <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   1b058:	4628      	mov	r0, r5
   1b05a:	f7e8 fedd 	bl	3e18 <bt_security_err_get>
   1b05e:	4629      	mov	r1, r5
   1b060:	4602      	mov	r2, r0
   1b062:	4620      	mov	r0, r4
   1b064:	f7ea fb52 	bl	570c <bt_conn_security_changed>
	bt_conn_unref(conn);
   1b068:	4620      	mov	r0, r4
}
   1b06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1b06e:	f000 bb37 	b.w	1b6e0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1b072:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1b074:	78f3      	ldrb	r3, [r6, #3]
   1b076:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1b078:	2a01      	cmp	r2, #1
   1b07a:	d108      	bne.n	1b08e <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   1b07c:	b10b      	cbz	r3, 1b082 <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   1b07e:	f002 fe4c 	bl	1dd1a <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1b082:	4620      	mov	r0, r4
   1b084:	f7ff fcf4 	bl	1aa70 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1b088:	2800      	cmp	r0, #0
   1b08a:	bf08      	it	eq
   1b08c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1b08e:	4628      	mov	r0, r5
   1b090:	f7e8 fec2 	bl	3e18 <bt_security_err_get>
   1b094:	4629      	mov	r1, r5
   1b096:	4602      	mov	r2, r0
   1b098:	4620      	mov	r0, r4
   1b09a:	f7ea fb37 	bl	570c <bt_conn_security_changed>
	if (status) {
   1b09e:	2d00      	cmp	r5, #0
   1b0a0:	d0e2      	beq.n	1b068 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   1b0a2:	4629      	mov	r1, r5
   1b0a4:	4620      	mov	r0, r4
   1b0a6:	f000 fb60 	bl	1b76a <bt_conn_disconnect>
   1b0aa:	e7dd      	b.n	1b068 <hci_encrypt_change+0x24>
}
   1b0ac:	bd70      	pop	{r4, r5, r6, pc}

0001b0ae <bt_send>:
		return bt_hci_ecc_send(buf);
   1b0ae:	f7e8 b9e7 	b.w	3480 <bt_hci_ecc_send>

0001b0b2 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1b0b2:	2000      	movs	r0, #0
   1b0b4:	4770      	bx	lr

0001b0b6 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1b0b6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1b0b8:	f7ed fd8c 	bl	8bd4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1b0bc:	b118      	cbz	r0, 1b0c6 <bt_addr_le_is_bonded+0x10>
   1b0be:	89c0      	ldrh	r0, [r0, #14]
   1b0c0:	3800      	subs	r0, #0
   1b0c2:	bf18      	it	ne
   1b0c4:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1b0c6:	bd08      	pop	{r3, pc}

0001b0c8 <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1b0c8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1b0ca:	f04f 32ff 	mov.w	r2, #4294967295
{
   1b0ce:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1b0d0:	f04f 33ff 	mov.w	r3, #4294967295
   1b0d4:	2100      	movs	r1, #0
{
   1b0d6:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1b0d8:	f7e8 fb22 	bl	3720 <bt_buf_get_evt>
   1b0dc:	2102      	movs	r1, #2
   1b0de:	4604      	mov	r4, r0
   1b0e0:	3008      	adds	r0, #8
   1b0e2:	f002 ff12 	bl	1df0a <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1b0e6:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1b0e8:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1b0ea:	4620      	mov	r0, r4
   1b0ec:	bd70      	pop	{r4, r5, r6, pc}

0001b0ee <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1b0ee:	3103      	adds	r1, #3
{
   1b0f0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1b0f2:	b2c9      	uxtb	r1, r1
{
   1b0f4:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1b0f6:	200e      	movs	r0, #14
   1b0f8:	f7ff ffe6 	bl	1b0c8 <bt_hci_evt_create>
   1b0fc:	2103      	movs	r1, #3
   1b0fe:	4604      	mov	r4, r0
   1b100:	3008      	adds	r0, #8
   1b102:	f002 ff02 	bl	1df0a <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1b106:	2301      	movs	r3, #1
   1b108:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1b10a:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1b10e:	4620      	mov	r0, r4
   1b110:	bd38      	pop	{r3, r4, r5, pc}

0001b112 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1b112:	b570      	push	{r4, r5, r6, lr}
   1b114:	4605      	mov	r5, r0
   1b116:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1b118:	200f      	movs	r0, #15
   1b11a:	2104      	movs	r1, #4
   1b11c:	f7ff ffd4 	bl	1b0c8 <bt_hci_evt_create>
   1b120:	2104      	movs	r1, #4
   1b122:	4604      	mov	r4, r0
   1b124:	3008      	adds	r0, #8
   1b126:	f002 fef0 	bl	1df0a <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1b12a:	2201      	movs	r2, #1
	cs->status = status;
   1b12c:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1b12e:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1b130:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1b132:	4620      	mov	r0, r4
   1b134:	bd70      	pop	{r4, r5, r6, pc}

0001b136 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b136:	2207      	movs	r2, #7
   1b138:	f7ff bb8b 	b.w	1a852 <memcpy>

0001b13c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b13c:	f3bf 8f5b 	dmb	ish
   1b140:	6800      	ldr	r0, [r0, #0]
   1b142:	f3bf 8f5b 	dmb	ish
}
   1b146:	4770      	bx	lr

0001b148 <hci_id_add>:
{
   1b148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b14c:	4688      	mov	r8, r1
   1b14e:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   1b150:	4605      	mov	r5, r0
   1b152:	bb08      	cbnz	r0, 1b198 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1b154:	2127      	movs	r1, #39	; 0x27
   1b156:	f242 0027 	movw	r0, #8231	; 0x2027
   1b15a:	f7e8 fc8f 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1b15e:	4604      	mov	r4, r0
   1b160:	b1f0      	cbz	r0, 1b1a0 <hci_id_add+0x58>
   1b162:	2127      	movs	r1, #39	; 0x27
   1b164:	3008      	adds	r0, #8
   1b166:	f002 fed0 	bl	1df0a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1b16a:	4641      	mov	r1, r8
   1b16c:	4606      	mov	r6, r0
   1b16e:	f7ff ffe2 	bl	1b136 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1b172:	4639      	mov	r1, r7
   1b174:	2210      	movs	r2, #16
   1b176:	1df0      	adds	r0, r6, #7
   1b178:	f7ff fb6b 	bl	1a852 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1b17c:	4629      	mov	r1, r5
   1b17e:	2210      	movs	r2, #16
   1b180:	f106 0017 	add.w	r0, r6, #23
   1b184:	f7ff fb70 	bl	1a868 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1b188:	462a      	mov	r2, r5
   1b18a:	4621      	mov	r1, r4
   1b18c:	f242 0027 	movw	r0, #8231	; 0x2027
}
   1b190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1b194:	f7e8 bcce 	b.w	3b34 <bt_hci_cmd_send_sync>
		return -EINVAL;
   1b198:	f06f 0015 	mvn.w	r0, #21
}
   1b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1b1a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b1a4:	e7fa      	b.n	1b19c <hci_id_add+0x54>

0001b1a6 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b1a6:	7a03      	ldrb	r3, [r0, #8]
   1b1a8:	075b      	lsls	r3, r3, #29
{
   1b1aa:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b1ac:	d505      	bpl.n	1b1ba <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1b1ae:	4601      	mov	r1, r0
   1b1b0:	322a      	adds	r2, #42	; 0x2a
   1b1b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b1b6:	f7ff bfc7 	b.w	1b148 <hci_id_add>
}
   1b1ba:	4770      	bx	lr

0001b1bc <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b1bc:	f100 0310 	add.w	r3, r0, #16
   1b1c0:	f3bf 8f5b 	dmb	ish
   1b1c4:	e853 2f00 	ldrex	r2, [r3]
   1b1c8:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   1b1cc:	e843 1c00 	strex	ip, r1, [r3]
   1b1d0:	f1bc 0f00 	cmp.w	ip, #0
   1b1d4:	d1f6      	bne.n	1b1c4 <adv_unpause_enabled+0x8>
   1b1d6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1b1da:	0453      	lsls	r3, r2, #17
   1b1dc:	d502      	bpl.n	1b1e4 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   1b1de:	2101      	movs	r1, #1
   1b1e0:	f000 b9b9 	b.w	1b556 <bt_le_adv_set_enable>
}
   1b1e4:	4770      	bx	lr

0001b1e6 <addr_res_enable>:
{
   1b1e6:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1b1e8:	2101      	movs	r1, #1
{
   1b1ea:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1b1ec:	f242 002d 	movw	r0, #8237	; 0x202d
   1b1f0:	f7e8 fc44 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b158      	cbz	r0, 1b210 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1b1f8:	4629      	mov	r1, r5
   1b1fa:	3008      	adds	r0, #8
   1b1fc:	f002 fe94 	bl	1df28 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1b200:	4621      	mov	r1, r4
   1b202:	2200      	movs	r2, #0
}
   1b204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1b208:	f242 002d 	movw	r0, #8237	; 0x202d
   1b20c:	f7e8 bc92 	b.w	3b34 <bt_hci_cmd_send_sync>
}
   1b210:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b214:	bd38      	pop	{r3, r4, r5, pc}

0001b216 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b216:	f100 0210 	add.w	r2, r0, #16
{
   1b21a:	b508      	push	{r3, lr}
   1b21c:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b21e:	4610      	mov	r0, r2
   1b220:	f7ff ff8c 	bl	1b13c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b224:	0641      	lsls	r1, r0, #25
   1b226:	d511      	bpl.n	1b24c <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b228:	f3bf 8f5b 	dmb	ish
   1b22c:	e852 1f00 	ldrex	r1, [r2]
   1b230:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   1b234:	e842 1000 	strex	r0, r1, [r2]
   1b238:	2800      	cmp	r0, #0
   1b23a:	d1f7      	bne.n	1b22c <adv_pause_enabled+0x16>
   1b23c:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   1b240:	4618      	mov	r0, r3
   1b242:	2100      	movs	r1, #0
}
   1b244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   1b248:	f000 b985 	b.w	1b556 <bt_le_adv_set_enable>
}
   1b24c:	bd08      	pop	{r3, pc}

0001b24e <bt_lookup_id_addr>:
{
   1b24e:	b510      	push	{r4, lr}
   1b250:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1b252:	f7ed fc87 	bl	8b64 <bt_keys_find_irk>
		if (keys) {
   1b256:	b100      	cbz	r0, 1b25a <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1b258:	1c44      	adds	r4, r0, #1
}
   1b25a:	4620      	mov	r0, r4
   1b25c:	bd10      	pop	{r4, pc}

0001b25e <bt_id_set_private_addr>:
{
   1b25e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b260:	2106      	movs	r1, #6
   1b262:	4668      	mov	r0, sp
   1b264:	f7f0 fc02 	bl	ba6c <bt_rand>
	if (err) {
   1b268:	b940      	cbnz	r0, 1b27c <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1b26a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1b26e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1b270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b274:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1b278:	f7e8 ff66 	bl	4148 <set_random_address>
}
   1b27c:	b003      	add	sp, #12
   1b27e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b282 <bt_id_set_adv_private_addr>:
{
   1b282:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b284:	2106      	movs	r1, #6
   1b286:	4668      	mov	r0, sp
   1b288:	f7f0 fbf0 	bl	ba6c <bt_rand>
	if (err) {
   1b28c:	b940      	cbnz	r0, 1b2a0 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1b28e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1b292:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1b294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b298:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1b29c:	f7e8 ff54 	bl	4148 <set_random_address>
}
   1b2a0:	b003      	add	sp, #12
   1b2a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001b2a6 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1b2a6:	7a03      	ldrb	r3, [r0, #8]
   1b2a8:	07d9      	lsls	r1, r3, #31
   1b2aa:	d504      	bpl.n	1b2b6 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1b2ac:	f023 0301 	bic.w	r3, r3, #1
   1b2b0:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1b2b2:	f7e8 bfd1 	b.w	4258 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1b2b6:	0799      	lsls	r1, r3, #30
   1b2b8:	d504      	bpl.n	1b2c4 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1b2ba:	f023 0302 	bic.w	r3, r3, #2
   1b2be:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1b2c0:	f7e9 b870 	b.w	43a4 <bt_id_del>
}
   1b2c4:	4770      	bx	lr

0001b2c6 <get_adv_channel_map>:
{
   1b2c6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1b2c8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1b2cc:	bf0c      	ite	eq
   1b2ce:	2007      	moveq	r0, #7
   1b2d0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1b2d2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1b2d4:	bf48      	it	mi
   1b2d6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1b2da:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1b2dc:	bf48      	it	mi
   1b2de:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1b2e2:	4770      	bx	lr

0001b2e4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b2e4:	f3bf 8f5b 	dmb	ish
   1b2e8:	6800      	ldr	r0, [r0, #0]
   1b2ea:	f3bf 8f5b 	dmb	ish
}
   1b2ee:	4770      	bx	lr

0001b2f0 <atomic_and>:
{
   1b2f0:	4603      	mov	r3, r0
}
   1b2f2:	f3bf 8f5b 	dmb	ish
   1b2f6:	e853 0f00 	ldrex	r0, [r3]
   1b2fa:	ea00 0201 	and.w	r2, r0, r1
   1b2fe:	e843 2c00 	strex	ip, r2, [r3]
   1b302:	f1bc 0f00 	cmp.w	ip, #0
   1b306:	d1f6      	bne.n	1b2f6 <atomic_and+0x6>
   1b308:	f3bf 8f5b 	dmb	ish
   1b30c:	4770      	bx	lr

0001b30e <hci_set_ad>:
{
   1b30e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b312:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b314:	2120      	movs	r1, #32
{
   1b316:	4682      	mov	sl, r0
   1b318:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b31a:	f7e8 fbaf 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1b31e:	4605      	mov	r5, r0
   1b320:	2800      	cmp	r0, #0
   1b322:	d04a      	beq.n	1b3ba <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   1b324:	2120      	movs	r1, #32
   1b326:	3008      	adds	r0, #8
   1b328:	f002 fdef 	bl	1df0a <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1b32c:	2220      	movs	r2, #32
   1b32e:	2100      	movs	r1, #0
   1b330:	4681      	mov	r9, r0
   1b332:	f7ff fa99 	bl	1a868 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1b336:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   1b33a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1b33e:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1b340:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1b342:	f8d4 8000 	ldr.w	r8, [r4]
   1b346:	2300      	movs	r3, #0
   1b348:	6862      	ldr	r2, [r4, #4]
   1b34a:	4293      	cmp	r3, r2
   1b34c:	d30d      	bcc.n	1b36a <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1b34e:	9b00      	ldr	r3, [sp, #0]
   1b350:	3408      	adds	r4, #8
   1b352:	42a3      	cmp	r3, r4
   1b354:	d1f5      	bne.n	1b342 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b356:	2200      	movs	r2, #0
   1b358:	4629      	mov	r1, r5
   1b35a:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1b35c:	f889 6000 	strb.w	r6, [r9]
}
   1b360:	b003      	add	sp, #12
   1b362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b366:	f7e8 bbe5 	b.w	3b34 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1b36a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1b36e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b372:	1cb0      	adds	r0, r6, #2
   1b374:	1811      	adds	r1, r2, r0
   1b376:	291f      	cmp	r1, #31
   1b378:	d908      	bls.n	1b38c <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b37a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1b37e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b382:	d11f      	bne.n	1b3c4 <hci_set_ad+0xb6>
   1b384:	2a00      	cmp	r2, #0
   1b386:	dd1d      	ble.n	1b3c4 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1b388:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1b38c:	b2d7      	uxtb	r7, r2
   1b38e:	1c79      	adds	r1, r7, #1
   1b390:	f80b 1006 	strb.w	r1, [fp, r6]
   1b394:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1b396:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1b398:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1b39c:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1b3a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b3a4:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1b3a6:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1b3a8:	f7ff fa53 	bl	1a852 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1b3ac:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1b3ae:	443e      	add	r6, r7
   1b3b0:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   1b3b2:	3301      	adds	r3, #1
   1b3b4:	f108 0808 	add.w	r8, r8, #8
   1b3b8:	e7c6      	b.n	1b348 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1b3ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1b3be:	b003      	add	sp, #12
   1b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1b3c4:	4628      	mov	r0, r5
   1b3c6:	f7fa fca5 	bl	15d14 <net_buf_unref>
		return err;
   1b3ca:	f06f 0015 	mvn.w	r0, #21
   1b3ce:	e7f6      	b.n	1b3be <hci_set_ad+0xb0>

0001b3d0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b3d0:	2301      	movs	r3, #1
{
   1b3d2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b3d4:	fa03 f101 	lsl.w	r1, r3, r1
{
   1b3d8:	4604      	mov	r4, r0
	if (val) {
   1b3da:	b162      	cbz	r2, 1b3f6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b3dc:	f3bf 8f5b 	dmb	ish
   1b3e0:	e854 3f00 	ldrex	r3, [r4]
   1b3e4:	430b      	orrs	r3, r1
   1b3e6:	e844 3200 	strex	r2, r3, [r4]
   1b3ea:	2a00      	cmp	r2, #0
   1b3ec:	d1f8      	bne.n	1b3e0 <atomic_set_bit_to+0x10>
   1b3ee:	f3bf 8f5b 	dmb	ish
	}
}
   1b3f2:	bc10      	pop	{r4}
   1b3f4:	4770      	bx	lr
   1b3f6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3f8:	43c9      	mvns	r1, r1
   1b3fa:	f7ff bf79 	b.w	1b2f0 <atomic_and>

0001b3fe <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1b3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b402:	b087      	sub	sp, #28
   1b404:	4605      	mov	r5, r0
   1b406:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1b40a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1b40e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1b412:	460c      	mov	r4, r1
   1b414:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1b416:	2100      	movs	r1, #0
   1b418:	2210      	movs	r2, #16
   1b41a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1b41c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1b41e:	f7ff fa23 	bl	1a868 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1b422:	b186      	cbz	r6, 1b446 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1b424:	f7e8 fe72 	bl	410c <bt_get_name>
   1b428:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1b42a:	2c00      	cmp	r4, #0
   1b42c:	d139      	bne.n	1b4a2 <le_adv_update.constprop.0+0xa4>
   1b42e:	2f00      	cmp	r7, #0
   1b430:	d142      	bne.n	1b4b8 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1b432:	4658      	mov	r0, fp
   1b434:	f7ff f9e0 	bl	1a7f8 <strlen>
   1b438:	2309      	movs	r3, #9
   1b43a:	f88d 3000 	strb.w	r3, [sp]
   1b43e:	f88d 0001 	strb.w	r0, [sp, #1]
   1b442:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   1b446:	2e01      	cmp	r6, #1
			d_len = 2;
   1b448:	bf0c      	ite	eq
   1b44a:	2202      	moveq	r2, #2
		d_len = 1;
   1b44c:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1b44e:	a902      	add	r1, sp, #8
   1b450:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   1b454:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   1b458:	bf04      	itt	eq
   1b45a:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   1b45e:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1b460:	f7ff ff55 	bl	1b30e <hci_set_ad>
		if (err) {
   1b464:	4604      	mov	r4, r0
   1b466:	b978      	cbnz	r0, 1b488 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   1b468:	f1ba 0f00 	cmp.w	sl, #0
   1b46c:	d126      	bne.n	1b4bc <le_adv_update.constprop.0+0xbe>
   1b46e:	3510      	adds	r5, #16
   1b470:	f3bf 8f5b 	dmb	ish
   1b474:	e855 3f00 	ldrex	r3, [r5]
   1b478:	f043 0304 	orr.w	r3, r3, #4
   1b47c:	e845 3200 	strex	r2, r3, [r5]
   1b480:	2a00      	cmp	r2, #0
   1b482:	d1f7      	bne.n	1b474 <le_adv_update.constprop.0+0x76>
   1b484:	f3bf 8f5b 	dmb	ish
}
   1b488:	4620      	mov	r0, r4
   1b48a:	b007      	add	sp, #28
   1b48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1b490:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1b494:	3a08      	subs	r2, #8
   1b496:	2a01      	cmp	r2, #1
   1b498:	d925      	bls.n	1b4e6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1b49a:	3301      	adds	r3, #1
   1b49c:	4598      	cmp	r8, r3
   1b49e:	d1f7      	bne.n	1b490 <le_adv_update.constprop.0+0x92>
   1b4a0:	e7c5      	b.n	1b42e <le_adv_update.constprop.0+0x30>
   1b4a2:	2300      	movs	r3, #0
   1b4a4:	e7fa      	b.n	1b49c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1b4a6:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1b4aa:	3a08      	subs	r2, #8
   1b4ac:	2a01      	cmp	r2, #1
   1b4ae:	d91a      	bls.n	1b4e6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1b4b0:	3301      	adds	r3, #1
   1b4b2:	4599      	cmp	r9, r3
   1b4b4:	d1f7      	bne.n	1b4a6 <le_adv_update.constprop.0+0xa8>
   1b4b6:	e7bc      	b.n	1b432 <le_adv_update.constprop.0+0x34>
   1b4b8:	2300      	movs	r3, #0
   1b4ba:	e7fa      	b.n	1b4b2 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1b4bc:	2e02      	cmp	r6, #2
   1b4be:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1b4c2:	bf08      	it	eq
   1b4c4:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1b4c6:	a902      	add	r1, sp, #8
			d_len = 2;
   1b4c8:	bf08      	it	eq
   1b4ca:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1b4cc:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1b4d0:	bf08      	it	eq
   1b4d2:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1b4d6:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1b4da:	f7ff ff18 	bl	1b30e <hci_set_ad>
		if (err) {
   1b4de:	2800      	cmp	r0, #0
   1b4e0:	d0c5      	beq.n	1b46e <le_adv_update.constprop.0+0x70>
   1b4e2:	4604      	mov	r4, r0
   1b4e4:	e7d0      	b.n	1b488 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   1b4e6:	f06f 0415 	mvn.w	r4, #21
   1b4ea:	e7cd      	b.n	1b488 <le_adv_update.constprop.0+0x8a>

0001b4ec <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1b4ec:	6843      	ldr	r3, [r0, #4]
   1b4ee:	f013 0008 	ands.w	r0, r3, #8
   1b4f2:	d00a      	beq.n	1b50a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1b4f4:	035a      	lsls	r2, r3, #13
   1b4f6:	d407      	bmi.n	1b508 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1b4f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   1b4fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1b500:	bf0c      	ite	eq
   1b502:	2001      	moveq	r0, #1
   1b504:	2002      	movne	r0, #2
   1b506:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1b508:	2001      	movs	r0, #1
}
   1b50a:	4770      	bx	lr

0001b50c <bt_le_adv_set_enable_legacy>:
{
   1b50c:	b570      	push	{r4, r5, r6, lr}
   1b50e:	4606      	mov	r6, r0
   1b510:	b086      	sub	sp, #24
   1b512:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1b514:	f242 000a 	movw	r0, #8202	; 0x200a
   1b518:	2101      	movs	r1, #1
   1b51a:	f7e8 faaf 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1b51e:	4604      	mov	r4, r0
   1b520:	b1b0      	cbz	r0, 1b550 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1b522:	3008      	adds	r0, #8
	if (enable) {
   1b524:	b195      	cbz	r5, 1b54c <bt_le_adv_set_enable_legacy+0x40>
   1b526:	2101      	movs	r1, #1
   1b528:	f002 fcfe 	bl	1df28 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1b52c:	f106 0210 	add.w	r2, r6, #16
   1b530:	a903      	add	r1, sp, #12
   1b532:	4620      	mov	r0, r4
   1b534:	9500      	str	r5, [sp, #0]
   1b536:	2306      	movs	r3, #6
   1b538:	f7e8 fa8e 	bl	3a58 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1b53c:	2200      	movs	r2, #0
   1b53e:	4621      	mov	r1, r4
   1b540:	f242 000a 	movw	r0, #8202	; 0x200a
   1b544:	f7e8 faf6 	bl	3b34 <bt_hci_cmd_send_sync>
}
   1b548:	b006      	add	sp, #24
   1b54a:	bd70      	pop	{r4, r5, r6, pc}
   1b54c:	4629      	mov	r1, r5
   1b54e:	e7eb      	b.n	1b528 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1b550:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b554:	e7f8      	b.n	1b548 <bt_le_adv_set_enable_legacy+0x3c>

0001b556 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b556:	f7ff bfd9 	b.w	1b50c <bt_le_adv_set_enable_legacy>

0001b55a <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1b55a:	3018      	adds	r0, #24
   1b55c:	f003 ba85 	b.w	1ea6a <k_work_cancel_delayable>

0001b560 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1b560:	f7e9 bb12 	b.w	4b88 <bt_le_adv_stop>

0001b564 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   1b564:	f7e9 bbb0 	b.w	4cc8 <bt_le_scan_set_enable_legacy>

0001b568 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b568:	b510      	push	{r4, lr}
   1b56a:	4603      	mov	r3, r0
	return list->head;
   1b56c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b56e:	2200      	movs	r2, #0
   1b570:	b158      	cbz	r0, 1b58a <sys_slist_find_and_remove+0x22>
   1b572:	4288      	cmp	r0, r1
   1b574:	d10f      	bne.n	1b596 <sys_slist_find_and_remove+0x2e>
	return node->next;
   1b576:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1b578:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b57a:	b93a      	cbnz	r2, 1b58c <sys_slist_find_and_remove+0x24>
   1b57c:	42a1      	cmp	r1, r4
	list->head = node;
   1b57e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b580:	d100      	bne.n	1b584 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1b582:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1b584:	2300      	movs	r3, #0
   1b586:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b588:	2001      	movs	r0, #1
   1b58a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b58c:	42a1      	cmp	r1, r4
	parent->next = child;
   1b58e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1b590:	bf08      	it	eq
   1b592:	605a      	streq	r2, [r3, #4]
}
   1b594:	e7f6      	b.n	1b584 <sys_slist_find_and_remove+0x1c>
	return node->next;
   1b596:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b598:	6800      	ldr	r0, [r0, #0]
   1b59a:	e7e9      	b.n	1b570 <sys_slist_find_and_remove+0x8>

0001b59c <atomic_and>:
{
   1b59c:	4603      	mov	r3, r0
}
   1b59e:	f3bf 8f5b 	dmb	ish
   1b5a2:	e853 0f00 	ldrex	r0, [r3]
   1b5a6:	ea00 0201 	and.w	r2, r0, r1
   1b5aa:	e843 2c00 	strex	ip, r2, [r3]
   1b5ae:	f1bc 0f00 	cmp.w	ip, #0
   1b5b2:	d1f6      	bne.n	1b5a2 <atomic_and+0x6>
   1b5b4:	f3bf 8f5b 	dmb	ish
   1b5b8:	4770      	bx	lr

0001b5ba <tx_complete_work>:
	tx_notify(conn);
   1b5ba:	3828      	subs	r0, #40	; 0x28
   1b5bc:	f7e9 bdbe 	b.w	513c <tx_notify>

0001b5c0 <bt_conn_reset_rx_state>:
{
   1b5c0:	b510      	push	{r4, lr}
   1b5c2:	4604      	mov	r4, r0
	if (!conn->rx) {
   1b5c4:	6900      	ldr	r0, [r0, #16]
   1b5c6:	b118      	cbz	r0, 1b5d0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1b5c8:	f7fa fba4 	bl	15d14 <net_buf_unref>
	conn->rx = NULL;
   1b5cc:	2300      	movs	r3, #0
   1b5ce:	6123      	str	r3, [r4, #16]
}
   1b5d0:	bd10      	pop	{r4, pc}

0001b5d2 <conn_cleanup>:
{
   1b5d2:	b570      	push	{r4, r5, r6, lr}
   1b5d4:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1b5d6:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1b5da:	2200      	movs	r2, #0
   1b5dc:	2300      	movs	r3, #0
   1b5de:	4630      	mov	r0, r6
   1b5e0:	f002 fc36 	bl	1de50 <net_buf_get>
   1b5e4:	4605      	mov	r5, r0
   1b5e6:	b950      	cbnz	r0, 1b5fe <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1b5e8:	4620      	mov	r0, r4
   1b5ea:	f7ff ffe9 	bl	1b5c0 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1b5ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b5f2:	2200      	movs	r2, #0
}
   1b5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1b5f8:	2300      	movs	r3, #0
   1b5fa:	f7fc beb5 	b.w	18368 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1b5fe:	6969      	ldr	r1, [r5, #20]
   1b600:	b111      	cbz	r1, 1b608 <conn_cleanup+0x36>
			conn_tx_destroy(conn, tx_data(buf)->tx);
   1b602:	4620      	mov	r0, r4
   1b604:	f7e9 fdca 	bl	519c <conn_tx_destroy>
		net_buf_unref(buf);
   1b608:	4628      	mov	r0, r5
   1b60a:	f7fa fb83 	bl	15d14 <net_buf_unref>
   1b60e:	e7e4      	b.n	1b5da <conn_cleanup+0x8>

0001b610 <bt_conn_recv>:
{
   1b610:	b570      	push	{r4, r5, r6, lr}
   1b612:	4616      	mov	r6, r2
   1b614:	4604      	mov	r4, r0
   1b616:	460d      	mov	r5, r1
	tx_notify(conn);
   1b618:	f7e9 fd90 	bl	513c <tx_notify>
	switch (flags) {
   1b61c:	2e01      	cmp	r6, #1
   1b61e:	d017      	beq.n	1b650 <bt_conn_recv+0x40>
   1b620:	2e02      	cmp	r6, #2
   1b622:	d117      	bne.n	1b654 <bt_conn_recv+0x44>
		if (conn->rx) {
   1b624:	6923      	ldr	r3, [r4, #16]
   1b626:	b113      	cbz	r3, 1b62e <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1b628:	4620      	mov	r0, r4
   1b62a:	f7ff ffc9 	bl	1b5c0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1b62e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1b630:	6921      	ldr	r1, [r4, #16]
   1b632:	898a      	ldrh	r2, [r1, #12]
   1b634:	2a01      	cmp	r2, #1
   1b636:	d937      	bls.n	1b6a8 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1b638:	688b      	ldr	r3, [r1, #8]
   1b63a:	881b      	ldrh	r3, [r3, #0]
   1b63c:	3304      	adds	r3, #4
   1b63e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1b640:	429a      	cmp	r2, r3
   1b642:	d331      	bcc.n	1b6a8 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1b644:	d928      	bls.n	1b698 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   1b646:	4620      	mov	r0, r4
}
   1b648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1b64c:	f7ff bfb8 	b.w	1b5c0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1b650:	6920      	ldr	r0, [r4, #16]
   1b652:	b918      	cbnz	r0, 1b65c <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1b654:	4620      	mov	r0, r4
   1b656:	f7ff ffb3 	bl	1b5c0 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1b65a:	e001      	b.n	1b660 <bt_conn_recv+0x50>
		if (!buf->len) {
   1b65c:	89ae      	ldrh	r6, [r5, #12]
   1b65e:	b926      	cbnz	r6, 1b66a <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   1b660:	4628      	mov	r0, r5
}
   1b662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1b666:	f7fa bb55 	b.w	15d14 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1b66a:	3008      	adds	r0, #8
   1b66c:	f002 fca6 	bl	1dfbc <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1b670:	4286      	cmp	r6, r0
   1b672:	d907      	bls.n	1b684 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   1b674:	6921      	ldr	r1, [r4, #16]
   1b676:	2200      	movs	r2, #0
   1b678:	4620      	mov	r0, r4
   1b67a:	f000 fc97 	bl	1bfac <bt_l2cap_recv>
			conn->rx = NULL;
   1b67e:	2300      	movs	r3, #0
   1b680:	6123      	str	r3, [r4, #16]
   1b682:	e7ed      	b.n	1b660 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b684:	6920      	ldr	r0, [r4, #16]
   1b686:	89aa      	ldrh	r2, [r5, #12]
   1b688:	68a9      	ldr	r1, [r5, #8]
   1b68a:	3008      	adds	r0, #8
   1b68c:	f002 fc43 	bl	1df16 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1b690:	4628      	mov	r0, r5
   1b692:	f7fa fb3f 	bl	15d14 <net_buf_unref>
		break;
   1b696:	e7cb      	b.n	1b630 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1b698:	2300      	movs	r3, #0
   1b69a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1b69c:	4620      	mov	r0, r4
   1b69e:	2201      	movs	r2, #1
}
   1b6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1b6a4:	f000 bc82 	b.w	1bfac <bt_l2cap_recv>
}
   1b6a8:	bd70      	pop	{r4, r5, r6, pc}

0001b6aa <bt_conn_ref>:
{
   1b6aa:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1b6ac:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b6b0:	f3bf 8f5b 	dmb	ish
   1b6b4:	6813      	ldr	r3, [r2, #0]
   1b6b6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1b6ba:	b17b      	cbz	r3, 1b6dc <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b6bc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b6c0:	1c59      	adds	r1, r3, #1
   1b6c2:	e852 4f00 	ldrex	r4, [r2]
   1b6c6:	429c      	cmp	r4, r3
   1b6c8:	d104      	bne.n	1b6d4 <bt_conn_ref+0x2a>
   1b6ca:	e842 1c00 	strex	ip, r1, [r2]
   1b6ce:	f1bc 0f00 	cmp.w	ip, #0
   1b6d2:	d1f6      	bne.n	1b6c2 <bt_conn_ref+0x18>
   1b6d4:	f3bf 8f5b 	dmb	ish
   1b6d8:	d1ea      	bne.n	1b6b0 <bt_conn_ref+0x6>
}
   1b6da:	bd10      	pop	{r4, pc}
			return NULL;
   1b6dc:	4618      	mov	r0, r3
   1b6de:	e7fc      	b.n	1b6da <bt_conn_ref+0x30>

0001b6e0 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1b6e0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b6e4:	f3bf 8f5b 	dmb	ish
   1b6e8:	e853 2f00 	ldrex	r2, [r3]
   1b6ec:	3a01      	subs	r2, #1
   1b6ee:	e843 2100 	strex	r1, r2, [r3]
   1b6f2:	2900      	cmp	r1, #0
   1b6f4:	d1f8      	bne.n	1b6e8 <bt_conn_unref+0x8>
   1b6f6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1b6fa:	7883      	ldrb	r3, [r0, #2]
   1b6fc:	2b01      	cmp	r3, #1
   1b6fe:	d108      	bne.n	1b712 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b700:	f3bf 8f5b 	dmb	ish
   1b704:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1b708:	f3bf 8f5b 	dmb	ish
   1b70c:	b90b      	cbnz	r3, 1b712 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1b70e:	f7e9 ba9b 	b.w	4c48 <bt_le_adv_resume>
}
   1b712:	4770      	bx	lr

0001b714 <conn_lookup_handle>:
{
   1b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b718:	4607      	mov	r7, r0
   1b71a:	460e      	mov	r6, r1
   1b71c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1b71e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b720:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1b724:	42b4      	cmp	r4, r6
   1b726:	d103      	bne.n	1b730 <conn_lookup_handle+0x1c>
	return NULL;
   1b728:	2300      	movs	r3, #0
}
   1b72a:	4618      	mov	r0, r3
   1b72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b730:	fb09 7004 	mla	r0, r9, r4, r7
   1b734:	f7ff ffb9 	bl	1b6aa <bt_conn_ref>
   1b738:	4603      	mov	r3, r0
		if (!conn) {
   1b73a:	b158      	cbz	r0, 1b754 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1b73c:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1b73e:	2d01      	cmp	r5, #1
   1b740:	d002      	beq.n	1b748 <conn_lookup_handle+0x34>
   1b742:	3d07      	subs	r5, #7
   1b744:	2d01      	cmp	r5, #1
   1b746:	d803      	bhi.n	1b750 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1b748:	881a      	ldrh	r2, [r3, #0]
   1b74a:	4542      	cmp	r2, r8
   1b74c:	d0ed      	beq.n	1b72a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1b74e:	4618      	mov	r0, r3
   1b750:	f7ff ffc6 	bl	1b6e0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1b754:	3401      	adds	r4, #1
   1b756:	e7e5      	b.n	1b724 <conn_lookup_handle+0x10>

0001b758 <bt_conn_connected>:
{
   1b758:	b510      	push	{r4, lr}
   1b75a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1b75c:	f7ea fb7c 	bl	5e58 <bt_l2cap_connected>
	notify_connected(conn);
   1b760:	4620      	mov	r0, r4
}
   1b762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1b766:	f7e9 bccb 	b.w	5100 <notify_connected>

0001b76a <bt_conn_disconnect>:
{
   1b76a:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   1b76c:	7b43      	ldrb	r3, [r0, #13]
   1b76e:	3b02      	subs	r3, #2
{
   1b770:	4604      	mov	r4, r0
	switch (conn->state) {
   1b772:	2b06      	cmp	r3, #6
   1b774:	d805      	bhi.n	1b782 <bt_conn_disconnect+0x18>
   1b776:	e8df f003 	tbb	[pc, r3]
   1b77a:	0408      	.short	0x0408
   1b77c:	0e0c0404 	.word	0x0e0c0404
   1b780:	0c          	.byte	0x0c
   1b781:	00          	.byte	0x00
   1b782:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1b786:	4628      	mov	r0, r5
   1b788:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1b78a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b78c:	2100      	movs	r1, #0
   1b78e:	f7e9 fe43 	bl	5418 <bt_conn_set_state>
		return 0;
   1b792:	2500      	movs	r5, #0
   1b794:	e7f7      	b.n	1b786 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1b796:	8800      	ldrh	r0, [r0, #0]
   1b798:	f7ff fb65 	bl	1ae66 <bt_hci_disconnect>
	if (err) {
   1b79c:	4605      	mov	r5, r0
   1b79e:	2800      	cmp	r0, #0
   1b7a0:	d1f1      	bne.n	1b786 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1b7a2:	7b63      	ldrb	r3, [r4, #13]
   1b7a4:	2b07      	cmp	r3, #7
   1b7a6:	d1ee      	bne.n	1b786 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   1b7a8:	2108      	movs	r1, #8
   1b7aa:	4620      	mov	r0, r4
   1b7ac:	f7e9 fe34 	bl	5418 <bt_conn_set_state>
   1b7b0:	e7e9      	b.n	1b786 <bt_conn_disconnect+0x1c>

0001b7b2 <bt_conn_set_security>:
{
   1b7b2:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1b7b4:	7b43      	ldrb	r3, [r0, #13]
   1b7b6:	2b07      	cmp	r3, #7
{
   1b7b8:	4604      	mov	r4, r0
   1b7ba:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1b7bc:	d124      	bne.n	1b808 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1b7be:	7a43      	ldrb	r3, [r0, #9]
   1b7c0:	428b      	cmp	r3, r1
   1b7c2:	d224      	bcs.n	1b80e <bt_conn_set_security+0x5c>
   1b7c4:	7a83      	ldrb	r3, [r0, #10]
   1b7c6:	428b      	cmp	r3, r1
   1b7c8:	d221      	bcs.n	1b80e <bt_conn_set_security+0x5c>
	if (val) {
   1b7ca:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1b7cc:	f100 0004 	add.w	r0, r0, #4
   1b7d0:	d515      	bpl.n	1b7fe <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b7d2:	f3bf 8f5b 	dmb	ish
   1b7d6:	e850 3f00 	ldrex	r3, [r0]
   1b7da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b7de:	e840 3200 	strex	r2, r3, [r0]
   1b7e2:	2a00      	cmp	r2, #0
   1b7e4:	d1f7      	bne.n	1b7d6 <bt_conn_set_security+0x24>
   1b7e6:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1b7ea:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   1b7ee:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1b7f0:	4620      	mov	r0, r4
   1b7f2:	f7ec febb 	bl	856c <bt_smp_start_security>
	if (err) {
   1b7f6:	b108      	cbz	r0, 1b7fc <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   1b7f8:	7a63      	ldrb	r3, [r4, #9]
   1b7fa:	72a3      	strb	r3, [r4, #10]
}
   1b7fc:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b7fe:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   1b802:	f7ff fecb 	bl	1b59c <atomic_and>
   1b806:	e7f0      	b.n	1b7ea <bt_conn_set_security+0x38>
		return -ENOTCONN;
   1b808:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b80c:	e7f6      	b.n	1b7fc <bt_conn_set_security+0x4a>
		return 0;
   1b80e:	2000      	movs	r0, #0
   1b810:	e7f4      	b.n	1b7fc <bt_conn_set_security+0x4a>

0001b812 <bt_conn_get_security>:
}
   1b812:	7a40      	ldrb	r0, [r0, #9]
   1b814:	4770      	bx	lr

0001b816 <bt_conn_is_peer_addr_le>:
{
   1b816:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1b818:	7a03      	ldrb	r3, [r0, #8]
   1b81a:	428b      	cmp	r3, r1
{
   1b81c:	4604      	mov	r4, r0
   1b81e:	4615      	mov	r5, r2
	if (id != conn->id) {
   1b820:	d115      	bne.n	1b84e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1b822:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b826:	2207      	movs	r2, #7
   1b828:	4628      	mov	r0, r5
   1b82a:	f7ff f801 	bl	1a830 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b82e:	b180      	cbz	r0, 1b852 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b830:	78e3      	ldrb	r3, [r4, #3]
   1b832:	2207      	movs	r2, #7
   1b834:	b943      	cbnz	r3, 1b848 <bt_conn_is_peer_addr_le+0x32>
   1b836:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1b83a:	4628      	mov	r0, r5
   1b83c:	f7fe fff8 	bl	1a830 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1b840:	fab0 f080 	clz	r0, r0
   1b844:	0940      	lsrs	r0, r0, #5
}
   1b846:	bd38      	pop	{r3, r4, r5, pc}
   1b848:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1b84c:	e7f5      	b.n	1b83a <bt_conn_is_peer_addr_le+0x24>
		return false;
   1b84e:	2000      	movs	r0, #0
   1b850:	e7f9      	b.n	1b846 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1b852:	2001      	movs	r0, #1
   1b854:	e7f7      	b.n	1b846 <bt_conn_is_peer_addr_le+0x30>

0001b856 <bt_conn_exists_le>:
{
   1b856:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1b858:	f7e9 ff9a 	bl	5790 <bt_conn_lookup_addr_le>
	if (conn) {
   1b85c:	b110      	cbz	r0, 1b864 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1b85e:	f7ff ff3f 	bl	1b6e0 <bt_conn_unref>
		return true;
   1b862:	2001      	movs	r0, #1
}
   1b864:	bd08      	pop	{r3, pc}

0001b866 <bt_conn_get_dst>:
}
   1b866:	3088      	adds	r0, #136	; 0x88
   1b868:	4770      	bx	lr

0001b86a <bt_conn_le_conn_update>:
{
   1b86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b86c:	4607      	mov	r7, r0
   1b86e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b870:	f242 0013 	movw	r0, #8211	; 0x2013
   1b874:	210e      	movs	r1, #14
   1b876:	f7e8 f901 	bl	3a7c <bt_hci_cmd_create>
	if (!buf) {
   1b87a:	4606      	mov	r6, r0
   1b87c:	b1d0      	cbz	r0, 1b8b4 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1b87e:	210e      	movs	r1, #14
   1b880:	3008      	adds	r0, #8
   1b882:	f002 fb42 	bl	1df0a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b886:	220e      	movs	r2, #14
   1b888:	4604      	mov	r4, r0
   1b88a:	2100      	movs	r1, #0
   1b88c:	f7fe ffec 	bl	1a868 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b890:	883b      	ldrh	r3, [r7, #0]
   1b892:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b894:	882b      	ldrh	r3, [r5, #0]
   1b896:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b898:	886b      	ldrh	r3, [r5, #2]
   1b89a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b89c:	88ab      	ldrh	r3, [r5, #4]
   1b89e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b8a0:	88eb      	ldrh	r3, [r5, #6]
   1b8a2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b8a4:	4631      	mov	r1, r6
   1b8a6:	2200      	movs	r2, #0
}
   1b8a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b8ac:	f242 0013 	movw	r0, #8211	; 0x2013
   1b8b0:	f7e8 b940 	b.w	3b34 <bt_hci_cmd_send_sync>
}
   1b8b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b8ba <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   1b8ba:	b510      	push	{r4, lr}
	return node->next;
   1b8bc:	6813      	ldr	r3, [r2, #0]
	return list->tail;
   1b8be:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b8c0:	b931      	cbnz	r1, 1b8d0 <sys_slist_remove+0x16>
   1b8c2:	42a2      	cmp	r2, r4
	list->head = node;
   1b8c4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b8c6:	d100      	bne.n	1b8ca <sys_slist_remove+0x10>
	list->tail = node;
   1b8c8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b8ca:	2300      	movs	r3, #0
   1b8cc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b8ce:	bd10      	pop	{r4, pc}
   1b8d0:	42a2      	cmp	r2, r4
	parent->next = child;
   1b8d2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1b8d4:	bf08      	it	eq
   1b8d6:	6041      	streq	r1, [r0, #4]
}
   1b8d8:	e7f7      	b.n	1b8ca <sys_slist_remove+0x10>

0001b8da <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1b8da:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b8dc:	2000      	movs	r0, #0

	while (buf) {
   1b8de:	b903      	cbnz	r3, 1b8e2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1b8e0:	4770      	bx	lr
		bytes += buf->len;
   1b8e2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b8e4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b8e6:	4410      	add	r0, r2
		buf = buf->frags;
   1b8e8:	e7f9      	b.n	1b8de <net_buf_frags_len+0x4>

0001b8ea <__l2cap_lookup_ident>:
{
   1b8ea:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1b8ec:	6d04      	ldr	r4, [r0, #80]	; 0x50
   1b8ee:	460b      	mov	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b8f0:	b15c      	cbz	r4, 1b90a <__l2cap_lookup_ident+0x20>
   1b8f2:	3c08      	subs	r4, #8
   1b8f4:	2100      	movs	r1, #0
		if (BT_L2CAP_LE_CHAN(chan)->ident == ident) {
   1b8f6:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
   1b8fa:	429d      	cmp	r5, r3
   1b8fc:	d107      	bne.n	1b90e <__l2cap_lookup_ident+0x24>
			if (remove) {
   1b8fe:	b122      	cbz	r2, 1b90a <__l2cap_lookup_ident+0x20>
				sys_slist_remove(&conn->channels, prev,
   1b900:	f104 0208 	add.w	r2, r4, #8
   1b904:	3050      	adds	r0, #80	; 0x50
   1b906:	f7ff ffd8 	bl	1b8ba <sys_slist_remove>
}
   1b90a:	4620      	mov	r0, r4
   1b90c:	bd38      	pop	{r3, r4, r5, pc}
		prev = &chan->node;
   1b90e:	f104 0108 	add.w	r1, r4, #8
	return node->next;
   1b912:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b914:	2c00      	cmp	r4, #0
   1b916:	d0f8      	beq.n	1b90a <__l2cap_lookup_ident+0x20>
   1b918:	3c08      	subs	r4, #8
   1b91a:	e7ec      	b.n	1b8f6 <__l2cap_lookup_ident+0xc>

0001b91c <l2cap_remove_rx_cid>:
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   1b91c:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
   1b920:	2a3f      	cmp	r2, #63	; 0x3f
{
   1b922:	b538      	push	{r3, r4, r5, lr}
   1b924:	460b      	mov	r3, r1
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
   1b926:	d813      	bhi.n	1b950 <l2cap_remove_rx_cid+0x34>
	return list->head;
   1b928:	6d04      	ldr	r4, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b92a:	b14c      	cbz	r4, 1b940 <l2cap_remove_rx_cid+0x24>
   1b92c:	3c08      	subs	r4, #8
   1b92e:	2100      	movs	r1, #0
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b930:	8aa5      	ldrh	r5, [r4, #20]
   1b932:	429d      	cmp	r5, r3
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b934:	f104 0208 	add.w	r2, r4, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b938:	d104      	bne.n	1b944 <l2cap_remove_rx_cid+0x28>
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b93a:	3050      	adds	r0, #80	; 0x50
   1b93c:	f7ff ffbd 	bl	1b8ba <sys_slist_remove>
}
   1b940:	4620      	mov	r0, r4
   1b942:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
   1b944:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b946:	2c00      	cmp	r4, #0
   1b948:	d0fa      	beq.n	1b940 <l2cap_remove_rx_cid+0x24>
   1b94a:	3c08      	subs	r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b94c:	4611      	mov	r1, r2
   1b94e:	e7ef      	b.n	1b930 <l2cap_remove_rx_cid+0x14>
		return NULL;
   1b950:	2400      	movs	r4, #0
   1b952:	e7f5      	b.n	1b940 <l2cap_remove_rx_cid+0x24>

0001b954 <l2cap_alloc_frag>:
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   1b954:	6853      	ldr	r3, [r2, #4]
{
   1b956:	4610      	mov	r0, r2
	frag = chan->chan.ops->alloc_buf(&chan->chan);
   1b958:	68db      	ldr	r3, [r3, #12]
   1b95a:	4718      	bx	r3

0001b95c <l2cap_connected>:
}
   1b95c:	4770      	bx	lr

0001b95e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b95e:	f3bf 8f5b 	dmb	ish
   1b962:	6800      	ldr	r0, [r0, #0]
   1b964:	f3bf 8f5b 	dmb	ish
}
   1b968:	4770      	bx	lr

0001b96a <l2cap_chan_tx_resume>:
{
   1b96a:	b508      	push	{r3, lr}
   1b96c:	4603      	mov	r3, r0
	if (!atomic_get(&ch->tx.credits) ||
   1b96e:	302c      	adds	r0, #44	; 0x2c
   1b970:	f7ff fff5 	bl	1b95e <atomic_get>
   1b974:	b148      	cbz	r0, 1b98a <l2cap_chan_tx_resume+0x20>
   1b976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b978:	b90a      	cbnz	r2, 1b97e <l2cap_chan_tx_resume+0x14>
	    (k_fifo_is_empty(&ch->tx_queue) && !ch->tx_buf)) {
   1b97a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b97c:	b12a      	cbz	r2, 1b98a <l2cap_chan_tx_resume+0x20>
	k_work_submit(&ch->tx_work);
   1b97e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
}
   1b982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit(&ch->tx_work);
   1b986:	f7fc bc53 	b.w	18230 <k_work_submit>
}
   1b98a:	bd08      	pop	{r3, pc}

0001b98c <l2cap_chan_destroy>:
{
   1b98c:	b570      	push	{r4, r5, r6, lr}
   1b98e:	4604      	mov	r4, r0
	k_work_cancel_delayable_sync(&le_chan->rtx_work, &le_chan->rtx_sync);
   1b990:	f100 01c8 	add.w	r1, r0, #200	; 0xc8
   1b994:	3098      	adds	r0, #152	; 0x98
   1b996:	f003 f87c 	bl	1ea92 <k_work_cancel_delayable_sync>
	if (le_chan->tx_buf) {
   1b99a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1b99c:	b118      	cbz	r0, 1b9a6 <l2cap_chan_destroy+0x1a>
		net_buf_unref(le_chan->tx_buf);
   1b99e:	f7fa f9b9 	bl	15d14 <net_buf_unref>
		le_chan->tx_buf = NULL;
   1b9a2:	2300      	movs	r3, #0
   1b9a4:	64a3      	str	r3, [r4, #72]	; 0x48
	while ((buf = net_buf_get(&le_chan->tx_queue, K_NO_WAIT))) {
   1b9a6:	f104 0530 	add.w	r5, r4, #48	; 0x30
   1b9aa:	2200      	movs	r2, #0
   1b9ac:	2300      	movs	r3, #0
   1b9ae:	4628      	mov	r0, r5
   1b9b0:	f002 fa4e 	bl	1de50 <net_buf_get>
   1b9b4:	b980      	cbnz	r0, 1b9d8 <l2cap_chan_destroy+0x4c>
	while ((buf = net_buf_get(&le_chan->rx_queue, K_NO_WAIT))) {
   1b9b6:	f104 0674 	add.w	r6, r4, #116	; 0x74
   1b9ba:	2200      	movs	r2, #0
   1b9bc:	2300      	movs	r3, #0
   1b9be:	4630      	mov	r0, r6
   1b9c0:	f002 fa46 	bl	1de50 <net_buf_get>
   1b9c4:	4605      	mov	r5, r0
   1b9c6:	b950      	cbnz	r0, 1b9de <l2cap_chan_destroy+0x52>
	if (le_chan->_sdu) {
   1b9c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1b9ca:	b120      	cbz	r0, 1b9d6 <l2cap_chan_destroy+0x4a>
		net_buf_unref(le_chan->_sdu);
   1b9cc:	f7fa f9a2 	bl	15d14 <net_buf_unref>
		le_chan->_sdu = NULL;
   1b9d0:	65e5      	str	r5, [r4, #92]	; 0x5c
		le_chan->_sdu_len = 0U;
   1b9d2:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
   1b9d6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1b9d8:	f7fa f99c 	bl	15d14 <net_buf_unref>
   1b9dc:	e7e5      	b.n	1b9aa <l2cap_chan_destroy+0x1e>
		net_buf_unref(buf);
   1b9de:	f7fa f999 	bl	15d14 <net_buf_unref>
   1b9e2:	e7ea      	b.n	1b9ba <l2cap_chan_destroy+0x2e>

0001b9e4 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
   1b9e4:	3098      	adds	r0, #152	; 0x98
   1b9e6:	f003 b840 	b.w	1ea6a <k_work_cancel_delayable>

0001b9ea <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
   1b9ea:	8ac3      	ldrh	r3, [r0, #22]
{
   1b9ec:	b510      	push	{r4, lr}
	if (!chan->rx.mtu) {
   1b9ee:	b90b      	cbnz	r3, 1b9f4 <l2cap_chan_rx_init+0xa>
		chan->rx.mtu = BT_L2CAP_SDU_RX_MTU;
   1b9f0:	23c2      	movs	r3, #194	; 0xc2
   1b9f2:	82c3      	strh	r3, [r0, #22]
	chan->rx.mps = MIN(chan->rx.mtu + BT_L2CAP_SDU_HDR_SIZE,
   1b9f4:	8ac2      	ldrh	r2, [r0, #22]
	if (!chan->chan.ops->alloc_buf &&
   1b9f6:	6841      	ldr	r1, [r0, #4]
	chan->rx.mps = MIN(chan->rx.mtu + BT_L2CAP_SDU_HDR_SIZE,
   1b9f8:	2ac2      	cmp	r2, #194	; 0xc2
   1b9fa:	4614      	mov	r4, r2
   1b9fc:	bf28      	it	cs
   1b9fe:	24c2      	movcs	r4, #194	; 0xc2
   1ba00:	1ca3      	adds	r3, r4, #2
	if (!chan->chan.ops->alloc_buf &&
   1ba02:	68c9      	ldr	r1, [r1, #12]
	chan->rx.mps = MIN(chan->rx.mtu + BT_L2CAP_SDU_HDR_SIZE,
   1ba04:	b29b      	uxth	r3, r3
   1ba06:	8303      	strh	r3, [r0, #24]
	if (!chan->chan.ops->alloc_buf &&
   1ba08:	b919      	cbnz	r1, 1ba12 <l2cap_chan_rx_init+0x28>
	    (chan->rx.mps < chan->rx.mtu + BT_L2CAP_SDU_HDR_SIZE)) {
   1ba0a:	3201      	adds	r2, #1
	if (!chan->chan.ops->alloc_buf &&
   1ba0c:	429a      	cmp	r2, r3
		chan->rx.mtu = chan->rx.mps - BT_L2CAP_SDU_HDR_SIZE;
   1ba0e:	bfa8      	it	ge
   1ba10:	82c4      	strhge	r4, [r0, #22]
	if (!chan->rx.init_credits) {
   1ba12:	8b43      	ldrh	r3, [r0, #26]
   1ba14:	b933      	cbnz	r3, 1ba24 <l2cap_chan_rx_init+0x3a>
		if (chan->chan.ops->alloc_buf) {
   1ba16:	b191      	cbz	r1, 1ba3e <l2cap_chan_rx_init+0x54>
				ceiling_fraction(chan->rx.mtu,
   1ba18:	8ac3      	ldrh	r3, [r0, #22]
   1ba1a:	22c4      	movs	r2, #196	; 0xc4
   1ba1c:	33c3      	adds	r3, #195	; 0xc3
   1ba1e:	fbb3 f3f2 	udiv	r3, r3, r2
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   1ba22:	8343      	strh	r3, [r0, #26]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ba24:	301c      	adds	r0, #28
   1ba26:	2300      	movs	r3, #0
   1ba28:	f3bf 8f5b 	dmb	ish
   1ba2c:	e850 2f00 	ldrex	r2, [r0]
   1ba30:	e840 3100 	strex	r1, r3, [r0]
   1ba34:	2900      	cmp	r1, #0
   1ba36:	d1f9      	bne.n	1ba2c <l2cap_chan_rx_init+0x42>
   1ba38:	f3bf 8f5b 	dmb	ish
}
   1ba3c:	bd10      	pop	{r4, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
   1ba3e:	2302      	movs	r3, #2
   1ba40:	e7ef      	b.n	1ba22 <l2cap_chan_rx_init+0x38>

0001ba42 <atomic_add.isra.0>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ba42:	f3bf 8f5b 	dmb	ish
   1ba46:	e850 3f00 	ldrex	r3, [r0]
   1ba4a:	440b      	add	r3, r1
   1ba4c:	e840 3200 	strex	r2, r3, [r0]
   1ba50:	2a00      	cmp	r2, #0
   1ba52:	d1f8      	bne.n	1ba46 <atomic_add.isra.0+0x4>
   1ba54:	f3bf 8f5b 	dmb	ish
}
   1ba58:	4770      	bx	lr

0001ba5a <l2cap_chan_tx_give_credits>:
{
   1ba5a:	b510      	push	{r4, lr}
   1ba5c:	4604      	mov	r4, r0
	atomic_add(&chan->tx.credits, credits);
   1ba5e:	302c      	adds	r0, #44	; 0x2c
   1ba60:	f7ff ffef 	bl	1ba42 <atomic_add.isra.0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ba64:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   1ba68:	f104 0110 	add.w	r1, r4, #16
   1ba6c:	e851 3f00 	ldrex	r3, [r1]
   1ba70:	f043 0201 	orr.w	r2, r3, #1
   1ba74:	e841 2000 	strex	r0, r2, [r1]
   1ba78:	2800      	cmp	r0, #0
   1ba7a:	d1f7      	bne.n	1ba6c <l2cap_chan_tx_give_credits+0x12>
   1ba7c:	f3bf 8f5b 	dmb	ish
   1ba80:	07db      	lsls	r3, r3, #31
   1ba82:	d406      	bmi.n	1ba92 <l2cap_chan_tx_give_credits+0x38>
	    chan->chan.ops->status) {
   1ba84:	6863      	ldr	r3, [r4, #4]
   1ba86:	699b      	ldr	r3, [r3, #24]
	if (!atomic_test_and_set_bit(chan->chan.status, BT_L2CAP_STATUS_OUT) &&
   1ba88:	b11b      	cbz	r3, 1ba92 <l2cap_chan_tx_give_credits+0x38>
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   1ba8a:	4620      	mov	r0, r4
}
   1ba8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->chan.ops->status(&chan->chan, chan->chan.status);
   1ba90:	4718      	bx	r3
}
   1ba92:	bd10      	pop	{r4, pc}

0001ba94 <bt_l2cap_chan_remove>:
	return list->head;
   1ba94:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ba96:	b410      	push	{r4}
   1ba98:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ba9a:	b173      	cbz	r3, 1baba <bt_l2cap_chan_remove+0x26>
   1ba9c:	3b08      	subs	r3, #8
   1ba9e:	2100      	movs	r1, #0
		if (chan == ch) {
   1baa0:	429c      	cmp	r4, r3
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1baa2:	f103 0208 	add.w	r2, r3, #8
		if (chan == ch) {
   1baa6:	d103      	bne.n	1bab0 <bt_l2cap_chan_remove+0x1c>
}
   1baa8:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1baaa:	3050      	adds	r0, #80	; 0x50
   1baac:	f7ff bf05 	b.w	1b8ba <sys_slist_remove>
	return node->next;
   1bab0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1bab2:	b113      	cbz	r3, 1baba <bt_l2cap_chan_remove+0x26>
   1bab4:	3b08      	subs	r3, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1bab6:	4611      	mov	r1, r2
   1bab8:	e7f2      	b.n	1baa0 <bt_l2cap_chan_remove+0xc>
}
   1baba:	bc10      	pop	{r4}
   1babc:	4770      	bx	lr

0001babe <bt_l2cap_chan_del>:
{
   1babe:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1bac0:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1bac4:	4604      	mov	r4, r0
	if (!chan->conn) {
   1bac6:	b123      	cbz	r3, 1bad2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1bac8:	686b      	ldr	r3, [r5, #4]
   1baca:	b103      	cbz	r3, 1bace <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1bacc:	4798      	blx	r3
	chan->conn = NULL;
   1bace:	2300      	movs	r3, #0
   1bad0:	6023      	str	r3, [r4, #0]
	BT_L2CAP_LE_CHAN(chan)->state = state;
   1bad2:	2300      	movs	r3, #0
   1bad4:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	BT_L2CAP_LE_CHAN(chan)->psm = 0U;
   1bad8:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
	if (chan->destroy) {
   1badc:	68e3      	ldr	r3, [r4, #12]
   1bade:	b10b      	cbz	r3, 1bae4 <bt_l2cap_chan_del+0x26>
		chan->destroy(chan);
   1bae0:	4620      	mov	r0, r4
   1bae2:	4798      	blx	r3
	if (ops->released) {
   1bae4:	69eb      	ldr	r3, [r5, #28]
   1bae6:	b11b      	cbz	r3, 1baf0 <bt_l2cap_chan_del+0x32>
		ops->released(chan);
   1bae8:	4620      	mov	r0, r4
}
   1baea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1baee:	4718      	bx	r3
}
   1baf0:	bd70      	pop	{r4, r5, r6, pc}

0001baf2 <l2cap_rtx_timeout>:
{
   1baf2:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   1baf4:	f850 5c98 	ldr.w	r5, [r0, #-152]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   1baf8:	f1a0 0498 	sub.w	r4, r0, #152	; 0x98
	bt_l2cap_chan_remove(conn, &chan->chan);
   1bafc:	4621      	mov	r1, r4
   1bafe:	4628      	mov	r0, r5
   1bb00:	f7ff ffc8 	bl	1ba94 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1bb04:	4620      	mov	r0, r4
		bt_l2cap_chan_del(&chan->chan);
   1bb06:	f7ff ffda 	bl	1babe <bt_l2cap_chan_del>
	while ((chan = l2cap_remove_ident(conn, chan->ident))) {
   1bb0a:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
   1bb0e:	2201      	movs	r2, #1
   1bb10:	4628      	mov	r0, r5
   1bb12:	f7ff feea 	bl	1b8ea <__l2cap_lookup_ident>
   1bb16:	4604      	mov	r4, r0
   1bb18:	2800      	cmp	r0, #0
   1bb1a:	d1f4      	bne.n	1bb06 <l2cap_rtx_timeout+0x14>
}
   1bb1c:	bd38      	pop	{r3, r4, r5, pc}

0001bb1e <bt_l2cap_disconnected>:
	return list->head;
   1bb1e:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   1bb20:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bb22:	b160      	cbz	r0, 1bb3e <bt_l2cap_disconnected+0x20>
	return node->next;
   1bb24:	f850 4908 	ldr.w	r4, [r0], #-8
   1bb28:	b104      	cbz	r4, 1bb2c <bt_l2cap_disconnected+0xe>
   1bb2a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1bb2c:	f7ff ffc7 	bl	1babe <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bb30:	b12c      	cbz	r4, 1bb3e <bt_l2cap_disconnected+0x20>
   1bb32:	68a3      	ldr	r3, [r4, #8]
   1bb34:	b103      	cbz	r3, 1bb38 <bt_l2cap_disconnected+0x1a>
   1bb36:	3b08      	subs	r3, #8
{
   1bb38:	4620      	mov	r0, r4
   1bb3a:	461c      	mov	r4, r3
   1bb3c:	e7f6      	b.n	1bb2c <bt_l2cap_disconnected+0xe>
}
   1bb3e:	bd10      	pop	{r4, pc}

0001bb40 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1bb40:	3104      	adds	r1, #4
   1bb42:	f7e9 bd25 	b.w	5590 <bt_conn_create_pdu_timeout>

0001bb46 <bt_l2cap_send_cb>:
{
   1bb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb4a:	4614      	mov	r4, r2
   1bb4c:	4605      	mov	r5, r0
   1bb4e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1bb50:	f102 0008 	add.w	r0, r2, #8
   1bb54:	2104      	movs	r1, #4
   1bb56:	461e      	mov	r6, r3
   1bb58:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1bb5c:	f002 f9f6 	bl	1df4c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1bb60:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1bb62:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1bb64:	3a04      	subs	r2, #4
   1bb66:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1bb68:	4643      	mov	r3, r8
   1bb6a:	4632      	mov	r2, r6
   1bb6c:	4621      	mov	r1, r4
   1bb6e:	4628      	mov	r0, r5
}
   1bb70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1bb74:	f7e9 bbd6 	b.w	5324 <bt_conn_send_cb>

0001bb78 <l2cap_chan_le_send_sdu>:
{
   1bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	total_len = net_buf_frags_len(*buf) + sent;
   1bb7c:	680c      	ldr	r4, [r1, #0]
{
   1bb7e:	4607      	mov	r7, r0
	total_len = net_buf_frags_len(*buf) + sent;
   1bb80:	4620      	mov	r0, r4
{
   1bb82:	4616      	mov	r6, r2
	total_len = net_buf_frags_len(*buf) + sent;
   1bb84:	f7ff fea9 	bl	1b8da <net_buf_frags_len>
	if (total_len > ch->tx.mtu) {
   1bb88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
	total_len = net_buf_frags_len(*buf) + sent;
   1bb8a:	eb06 0900 	add.w	r9, r6, r0
	if (total_len > ch->tx.mtu) {
   1bb8e:	454b      	cmp	r3, r9
{
   1bb90:	4688      	mov	r8, r1
	if (total_len > ch->tx.mtu) {
   1bb92:	db2f      	blt.n	1bbf4 <l2cap_chan_le_send_sdu+0x7c>
	if (!frag->len && frag->frags) {
   1bb94:	89a3      	ldrh	r3, [r4, #12]
   1bb96:	b91b      	cbnz	r3, 1bba0 <l2cap_chan_le_send_sdu+0x28>
   1bb98:	6823      	ldr	r3, [r4, #0]
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	bf18      	it	ne
   1bb9e:	461c      	movne	r4, r3
	if (!sent) {
   1bba0:	b98e      	cbnz	r6, 1bbc6 <l2cap_chan_le_send_sdu+0x4e>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_SIZE);
   1bba2:	2202      	movs	r2, #2
   1bba4:	4621      	mov	r1, r4
   1bba6:	4638      	mov	r0, r7
   1bba8:	f7ea f80e 	bl	5bc8 <l2cap_chan_le_send>
		if (ret < 0) {
   1bbac:	1e05      	subs	r5, r0, #0
   1bbae:	da09      	bge.n	1bbc4 <l2cap_chan_le_send_sdu+0x4c>
			if (ret == -EAGAIN) {
   1bbb0:	f115 0f0b 	cmn.w	r5, #11
				l2cap_tx_meta_data(frag)->sent = sent;
   1bbb4:	bf04      	itt	eq
   1bbb6:	6963      	ldreq	r3, [r4, #20]
   1bbb8:	601e      	streq	r6, [r3, #0]
			*buf = frag;
   1bbba:	f8c8 4000 	str.w	r4, [r8]
}
   1bbbe:	4628      	mov	r0, r5
   1bbc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sent = ret;
   1bbc4:	b2ae      	uxth	r6, r5
	if (!frag->len && frag->frags) {
   1bbc6:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
   1bbc8:	454e      	cmp	r6, r9
   1bbca:	db03      	blt.n	1bbd4 <l2cap_chan_le_send_sdu+0x5c>
	net_buf_unref(frag);
   1bbcc:	4620      	mov	r0, r4
   1bbce:	f7fa f8a1 	bl	15d14 <net_buf_unref>
	return ret;
   1bbd2:	e7f4      	b.n	1bbbe <l2cap_chan_le_send_sdu+0x46>
		if (!frag->len) {
   1bbd4:	89a0      	ldrh	r0, [r4, #12]
   1bbd6:	b918      	cbnz	r0, 1bbe0 <l2cap_chan_le_send_sdu+0x68>
			frag = net_buf_frag_del(NULL, frag);
   1bbd8:	4621      	mov	r1, r4
   1bbda:	f002 f98a 	bl	1def2 <net_buf_frag_del>
   1bbde:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
   1bbe0:	2200      	movs	r2, #0
   1bbe2:	4621      	mov	r1, r4
   1bbe4:	4638      	mov	r0, r7
   1bbe6:	f7e9 ffef 	bl	5bc8 <l2cap_chan_le_send>
		if (ret < 0) {
   1bbea:	1e05      	subs	r5, r0, #0
   1bbec:	dbe0      	blt.n	1bbb0 <l2cap_chan_le_send_sdu+0x38>
	for (ret = 0; sent < total_len; sent += ret) {
   1bbee:	442e      	add	r6, r5
   1bbf0:	b2b6      	uxth	r6, r6
   1bbf2:	e7e9      	b.n	1bbc8 <l2cap_chan_le_send_sdu+0x50>
		return -EMSGSIZE;
   1bbf4:	f06f 0579 	mvn.w	r5, #121	; 0x79
   1bbf8:	e7e1      	b.n	1bbbe <l2cap_chan_le_send_sdu+0x46>

0001bbfa <l2cap_chan_tx_process>:
{
   1bbfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bbfc:	4604      	mov	r4, r0
	ch = CONTAINER_OF(work, struct bt_l2cap_le_chan, tx_work);
   1bbfe:	f1a0 054c 	sub.w	r5, r0, #76	; 0x4c
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   1bc02:	f1a0 061c 	sub.w	r6, r0, #28
		ch->tx_buf = NULL;
   1bc06:	2700      	movs	r7, #0
	if (ch->tx_buf) {
   1bc08:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1bc0c:	b1a8      	cbz	r0, 1bc3a <l2cap_chan_tx_process+0x40>
		ch->tx_buf = NULL;
   1bc0e:	f844 7c04 	str.w	r7, [r4, #-4]
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
   1bc12:	9001      	str	r0, [sp, #4]
   1bc14:	b160      	cbz	r0, 1bc30 <l2cap_chan_tx_process+0x36>
		int sent = l2cap_tx_meta_data(buf)->sent;
   1bc16:	6943      	ldr	r3, [r0, #20]
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
   1bc18:	a901      	add	r1, sp, #4
   1bc1a:	881a      	ldrh	r2, [r3, #0]
   1bc1c:	4628      	mov	r0, r5
   1bc1e:	f7ff ffab 	bl	1bb78 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
   1bc22:	1e03      	subs	r3, r0, #0
   1bc24:	daf0      	bge.n	1bc08 <l2cap_chan_tx_process+0xe>
			if (sent == -EAGAIN) {
   1bc26:	330b      	adds	r3, #11
				ch->tx_buf = buf;
   1bc28:	9801      	ldr	r0, [sp, #4]
			if (sent == -EAGAIN) {
   1bc2a:	d103      	bne.n	1bc34 <l2cap_chan_tx_process+0x3a>
				ch->tx_buf = buf;
   1bc2c:	f844 0c04 	str.w	r0, [r4, #-4]
}
   1bc30:	b003      	add	sp, #12
   1bc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
				net_buf_unref(buf);
   1bc34:	f7fa f86e 	bl	15d14 <net_buf_unref>
   1bc38:	e7fa      	b.n	1bc30 <l2cap_chan_tx_process+0x36>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
   1bc3a:	2200      	movs	r2, #0
   1bc3c:	2300      	movs	r3, #0
   1bc3e:	4630      	mov	r0, r6
   1bc40:	f002 f906 	bl	1de50 <net_buf_get>
   1bc44:	e7e5      	b.n	1bc12 <l2cap_chan_tx_process+0x18>

0001bc46 <l2cap_send.constprop.0>:
static inline void l2cap_send(struct bt_conn *conn, uint16_t cid,
   1bc46:	b513      	push	{r0, r1, r4, lr}
   1bc48:	2300      	movs	r3, #0
   1bc4a:	460c      	mov	r4, r1
   1bc4c:	460a      	mov	r2, r1
   1bc4e:	9300      	str	r3, [sp, #0]
   1bc50:	2105      	movs	r1, #5
   1bc52:	f7ff ff78 	bl	1bb46 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1bc56:	b128      	cbz	r0, 1bc64 <l2cap_send.constprop.0+0x1e>
		net_buf_unref(buf);
   1bc58:	4620      	mov	r0, r4
}
   1bc5a:	b002      	add	sp, #8
   1bc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_unref(buf);
   1bc60:	f7fa b858 	b.w	15d14 <net_buf_unref>
}
   1bc64:	b002      	add	sp, #8
   1bc66:	bd10      	pop	{r4, pc}

0001bc68 <l2cap_chan_send_credits.isra.0>:
static void l2cap_chan_send_credits(struct bt_l2cap_le_chan *chan,
   1bc68:	b570      	push	{r4, r5, r6, lr}
   1bc6a:	8b46      	ldrh	r6, [r0, #26]
   1bc6c:	428e      	cmp	r6, r1
   1bc6e:	bf28      	it	cs
   1bc70:	460e      	movcs	r6, r1
   1bc72:	4604      	mov	r4, r0
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
   1bc74:	f7e9 ff3e 	bl	5af4 <get_ident>
   1bc78:	2204      	movs	r2, #4
   1bc7a:	4601      	mov	r1, r0
   1bc7c:	2016      	movs	r0, #22
   1bc7e:	f7e9 ff63 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1bc82:	4605      	mov	r5, r0
   1bc84:	bbc0      	cbnz	r0, 1bcf8 <l2cap_chan_send_credits.isra.0+0x90>
   1bc86:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(chan->status, BT_L2CAP_STATUS_SHUTDOWN);
   1bc8a:	f104 0610 	add.w	r6, r4, #16
   1bc8e:	e856 3f00 	ldrex	r3, [r6]
   1bc92:	f043 0302 	orr.w	r3, r3, #2
   1bc96:	e846 3200 	strex	r2, r3, [r6]
   1bc9a:	2a00      	cmp	r2, #0
   1bc9c:	d1f7      	bne.n	1bc8e <l2cap_chan_send_credits.isra.0+0x26>
   1bc9e:	f3bf 8f5b 	dmb	ish
	if (le_chan->_sdu) {
   1bca2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1bca4:	b120      	cbz	r0, 1bcb0 <l2cap_chan_send_credits.isra.0+0x48>
		net_buf_unref(le_chan->_sdu);
   1bca6:	f7fa f835 	bl	15d14 <net_buf_unref>
		le_chan->_sdu = NULL;
   1bcaa:	65e5      	str	r5, [r4, #92]	; 0x5c
		le_chan->_sdu_len = 0U;
   1bcac:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
	if (le_chan->tx_buf) {
   1bcb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1bcb2:	b118      	cbz	r0, 1bcbc <l2cap_chan_send_credits.isra.0+0x54>
		net_buf_unref(le_chan->tx_buf);
   1bcb4:	f7fa f82e 	bl	15d14 <net_buf_unref>
		le_chan->tx_buf = NULL;
   1bcb8:	2300      	movs	r3, #0
   1bcba:	64a3      	str	r3, [r4, #72]	; 0x48
	while ((buf = net_buf_get(&le_chan->tx_queue, K_NO_WAIT))) {
   1bcbc:	f104 0530 	add.w	r5, r4, #48	; 0x30
   1bcc0:	2200      	movs	r2, #0
   1bcc2:	2300      	movs	r3, #0
   1bcc4:	4628      	mov	r0, r5
   1bcc6:	f002 f8c3 	bl	1de50 <net_buf_get>
   1bcca:	b978      	cbnz	r0, 1bcec <l2cap_chan_send_credits.isra.0+0x84>
	while ((buf = net_buf_get(&le_chan->rx_queue, K_NO_WAIT))) {
   1bccc:	f104 0574 	add.w	r5, r4, #116	; 0x74
   1bcd0:	2200      	movs	r2, #0
   1bcd2:	2300      	movs	r3, #0
   1bcd4:	4628      	mov	r0, r5
   1bcd6:	f002 f8bb 	bl	1de50 <net_buf_get>
   1bcda:	b950      	cbnz	r0, 1bcf2 <l2cap_chan_send_credits.isra.0+0x8a>
	if (chan->ops->status) {
   1bcdc:	6863      	ldr	r3, [r4, #4]
   1bcde:	699b      	ldr	r3, [r3, #24]
   1bce0:	b1eb      	cbz	r3, 1bd1e <l2cap_chan_send_credits.isra.0+0xb6>
		chan->ops->status(chan, chan->status);
   1bce2:	4631      	mov	r1, r6
   1bce4:	4620      	mov	r0, r4
}
   1bce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		chan->ops->status(chan, chan->status);
   1bcea:	4718      	bx	r3
		net_buf_unref(buf);
   1bcec:	f7fa f812 	bl	15d14 <net_buf_unref>
   1bcf0:	e7e6      	b.n	1bcc0 <l2cap_chan_send_credits.isra.0+0x58>
		net_buf_unref(buf);
   1bcf2:	f7fa f80f 	bl	15d14 <net_buf_unref>
   1bcf6:	e7eb      	b.n	1bcd0 <l2cap_chan_send_credits.isra.0+0x68>
	atomic_add(&chan->rx.credits, credits);
   1bcf8:	4631      	mov	r1, r6
   1bcfa:	f104 001c 	add.w	r0, r4, #28
   1bcfe:	f7ff fea0 	bl	1ba42 <atomic_add.isra.0>
	return net_buf_simple_add(&buf->b, len);
   1bd02:	2104      	movs	r1, #4
   1bd04:	f105 0008 	add.w	r0, r5, #8
   1bd08:	f002 f8ff 	bl	1df0a <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
   1bd0c:	8aa3      	ldrh	r3, [r4, #20]
   1bd0e:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
   1bd10:	8046      	strh	r6, [r0, #2]
	l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
   1bd12:	4629      	mov	r1, r5
   1bd14:	6820      	ldr	r0, [r4, #0]
}
   1bd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	l2cap_send(chan->chan.conn, BT_L2CAP_CID_LE_SIG, buf);
   1bd1a:	f7ff bf94 	b.w	1bc46 <l2cap_send.constprop.0>
}
   1bd1e:	bd70      	pop	{r4, r5, r6, pc}

0001bd20 <l2cap_chan_send_req>:
{
   1bd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bd22:	461e      	mov	r6, r3
   1bd24:	2300      	movs	r3, #0
   1bd26:	9300      	str	r3, [sp, #0]
   1bd28:	4604      	mov	r4, r0
   1bd2a:	460d      	mov	r5, r1
   1bd2c:	4617      	mov	r7, r2
   1bd2e:	6800      	ldr	r0, [r0, #0]
   1bd30:	460a      	mov	r2, r1
   1bd32:	2105      	movs	r1, #5
   1bd34:	f7ff ff07 	bl	1bb46 <bt_l2cap_send_cb>
	if (bt_l2cap_send(chan->conn, BT_L2CAP_CID_LE_SIG, buf)) {
   1bd38:	b128      	cbz	r0, 1bd46 <l2cap_chan_send_req+0x26>
		net_buf_unref(buf);
   1bd3a:	4628      	mov	r0, r5
}
   1bd3c:	b003      	add	sp, #12
   1bd3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1bd42:	f7f9 bfe7 	b.w	15d14 <net_buf_unref>
	k_work_reschedule(&(BT_L2CAP_LE_CHAN(chan)->rtx_work), timeout);
   1bd46:	463a      	mov	r2, r7
   1bd48:	4633      	mov	r3, r6
   1bd4a:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   1bd4e:	b003      	add	sp, #12
   1bd50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_reschedule(&(BT_L2CAP_LE_CHAN(chan)->rtx_work), timeout);
   1bd54:	f7fc bb08 	b.w	18368 <k_work_reschedule>

0001bd58 <l2cap_le_conn_req>:
{
   1bd58:	b538      	push	{r3, r4, r5, lr}
   1bd5a:	4604      	mov	r4, r0
	ch->ident = get_ident();
   1bd5c:	f7e9 feca 	bl	5af4 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   1bd60:	220a      	movs	r2, #10
	ch->ident = get_ident();
   1bd62:	4601      	mov	r1, r0
   1bd64:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
   1bd68:	2014      	movs	r0, #20
   1bd6a:	f7e9 feed 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1bd6e:	4605      	mov	r5, r0
   1bd70:	b1b8      	cbz	r0, 1bda2 <l2cap_le_conn_req+0x4a>
   1bd72:	210a      	movs	r1, #10
   1bd74:	3008      	adds	r0, #8
   1bd76:	f002 f8c8 	bl	1df0a <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->psm);
   1bd7a:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
   1bd7e:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
   1bd80:	8aa3      	ldrh	r3, [r4, #20]
   1bd82:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
   1bd84:	8ae3      	ldrh	r3, [r4, #22]
   1bd86:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
   1bd88:	8b23      	ldrh	r3, [r4, #24]
   1bd8a:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
   1bd8c:	8b63      	ldrh	r3, [r4, #26]
   1bd8e:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(&ch->chan, buf, L2CAP_CONN_TIMEOUT);
   1bd90:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
   1bd94:	4620      	mov	r0, r4
   1bd96:	2300      	movs	r3, #0
   1bd98:	4629      	mov	r1, r5
   1bd9a:	f7ff ffc1 	bl	1bd20 <l2cap_chan_send_req>
	return 0;
   1bd9e:	2000      	movs	r0, #0
}
   1bda0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   1bda2:	f06f 000b 	mvn.w	r0, #11
   1bda6:	e7fb      	b.n	1bda0 <l2cap_le_conn_req+0x48>

0001bda8 <bt_l2cap_security_changed>:
{
   1bda8:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   1bdaa:	6d04      	ldr	r4, [r0, #80]	; 0x50
   1bdac:	460e      	mov	r6, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bdae:	b374      	cbz	r4, 1be0e <bt_l2cap_security_changed+0x66>
	return node->next;
   1bdb0:	f854 5908 	ldr.w	r5, [r4], #-8
   1bdb4:	b105      	cbz	r5, 1bdb8 <bt_l2cap_security_changed+0x10>
   1bdb6:	3d08      	subs	r5, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bdb8:	f104 0310 	add.w	r3, r4, #16
   1bdbc:	f3bf 8f5b 	dmb	ish
   1bdc0:	e853 2f00 	ldrex	r2, [r3]
   1bdc4:	f022 0104 	bic.w	r1, r2, #4
   1bdc8:	e843 1000 	strex	r0, r1, [r3]
   1bdcc:	2800      	cmp	r0, #0
   1bdce:	d1f7      	bne.n	1bdc0 <bt_l2cap_security_changed+0x18>
   1bdd0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(chan->status,
   1bdd4:	0753      	lsls	r3, r2, #29
   1bdd6:	d507      	bpl.n	1bde8 <bt_l2cap_security_changed+0x40>
	if (status) {
   1bdd8:	b19e      	cbz	r6, 1be02 <bt_l2cap_security_changed+0x5a>
	bt_l2cap_chan_remove(chan->conn, chan);
   1bdda:	6820      	ldr	r0, [r4, #0]
   1bddc:	4621      	mov	r1, r4
   1bdde:	f7ff fe59 	bl	1ba94 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(chan);
   1bde2:	4620      	mov	r0, r4
   1bde4:	f7ff fe6b 	bl	1babe <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
   1bde8:	6863      	ldr	r3, [r4, #4]
   1bdea:	689b      	ldr	r3, [r3, #8]
   1bdec:	b113      	cbz	r3, 1bdf4 <bt_l2cap_security_changed+0x4c>
			chan->ops->encrypt_change(chan, hci_status);
   1bdee:	4631      	mov	r1, r6
   1bdf0:	4620      	mov	r0, r4
   1bdf2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1bdf4:	b15d      	cbz	r5, 1be0e <bt_l2cap_security_changed+0x66>
   1bdf6:	68ab      	ldr	r3, [r5, #8]
   1bdf8:	b103      	cbz	r3, 1bdfc <bt_l2cap_security_changed+0x54>
   1bdfa:	3b08      	subs	r3, #8
{
   1bdfc:	462c      	mov	r4, r5
   1bdfe:	461d      	mov	r5, r3
   1be00:	e7da      	b.n	1bdb8 <bt_l2cap_security_changed+0x10>
	err = l2cap_le_conn_req(le);
   1be02:	4620      	mov	r0, r4
   1be04:	f7ff ffa8 	bl	1bd58 <l2cap_le_conn_req>
	if (err) {
   1be08:	2800      	cmp	r0, #0
   1be0a:	d0ed      	beq.n	1bde8 <bt_l2cap_security_changed+0x40>
   1be0c:	e7e5      	b.n	1bdda <bt_l2cap_security_changed+0x32>
}
   1be0e:	bd70      	pop	{r4, r5, r6, pc}

0001be10 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1be10:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1be12:	b130      	cbz	r0, 1be22 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1be14:	8b83      	ldrh	r3, [r0, #28]
   1be16:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1be18:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1be1c:	d001      	beq.n	1be22 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   1be1e:	6880      	ldr	r0, [r0, #8]
   1be20:	e7f7      	b.n	1be12 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   1be22:	4770      	bx	lr

0001be24 <l2cap_chan_seg_sent>:
{
   1be24:	b508      	push	{r3, lr}
	if (err) {
   1be26:	b93a      	cbnz	r2, 1be38 <l2cap_chan_seg_sent+0x14>
	chan = bt_l2cap_le_lookup_tx_cid(conn, data->cid);
   1be28:	8889      	ldrh	r1, [r1, #4]
   1be2a:	f7ff fff1 	bl	1be10 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
   1be2e:	b118      	cbz	r0, 1be38 <l2cap_chan_seg_sent+0x14>
}
   1be30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	l2cap_chan_tx_resume(BT_L2CAP_LE_CHAN(chan));
   1be34:	f7ff bd99 	b.w	1b96a <l2cap_chan_tx_resume>
}
   1be38:	bd08      	pop	{r3, pc}

0001be3a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1be3a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1be3c:	b130      	cbz	r0, 1be4c <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1be3e:	8983      	ldrh	r3, [r0, #12]
   1be40:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1be42:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1be46:	d001      	beq.n	1be4c <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   1be48:	6880      	ldr	r0, [r0, #8]
   1be4a:	e7f7      	b.n	1be3c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1be4c:	4770      	bx	lr

0001be4e <bt_l2cap_update_conn_param>:
{
   1be4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1be50:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1be52:	f7e9 fe4f 	bl	5af4 <get_ident>
{
   1be56:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1be58:	2208      	movs	r2, #8
   1be5a:	4601      	mov	r1, r0
   1be5c:	2012      	movs	r0, #18
   1be5e:	f7e9 fe73 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1be62:	4604      	mov	r4, r0
   1be64:	b1d0      	cbz	r0, 1be9c <bt_l2cap_update_conn_param+0x4e>
   1be66:	2108      	movs	r1, #8
   1be68:	4408      	add	r0, r1
   1be6a:	f002 f84e 	bl	1df0a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1be6e:	882b      	ldrh	r3, [r5, #0]
   1be70:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1be72:	886b      	ldrh	r3, [r5, #2]
   1be74:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1be76:	88ab      	ldrh	r3, [r5, #4]
   1be78:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1be7a:	88eb      	ldrh	r3, [r5, #6]
   1be7c:	80c3      	strh	r3, [r0, #6]
   1be7e:	2300      	movs	r3, #0
   1be80:	9300      	str	r3, [sp, #0]
   1be82:	4622      	mov	r2, r4
   1be84:	2105      	movs	r1, #5
   1be86:	4630      	mov	r0, r6
   1be88:	f7ff fe5d 	bl	1bb46 <bt_l2cap_send_cb>
	if (err) {
   1be8c:	4605      	mov	r5, r0
   1be8e:	b110      	cbz	r0, 1be96 <bt_l2cap_update_conn_param+0x48>
		net_buf_unref(buf);
   1be90:	4620      	mov	r0, r4
   1be92:	f7f9 ff3f 	bl	15d14 <net_buf_unref>
}
   1be96:	4628      	mov	r0, r5
   1be98:	b002      	add	sp, #8
   1be9a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1be9c:	f06f 050b 	mvn.w	r5, #11
   1bea0:	e7f9      	b.n	1be96 <bt_l2cap_update_conn_param+0x48>

0001bea2 <bt_l2cap_chan_disconnect>:

	return l2cap_le_connect(conn, le_chan, psm);
}

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
   1bea2:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *le_chan;

	if (!conn) {
   1bea4:	6803      	ldr	r3, [r0, #0]
{
   1bea6:	4604      	mov	r4, r0
	if (!conn) {
   1bea8:	b1f3      	cbz	r3, 1bee8 <bt_l2cap_chan_disconnect+0x46>
	le_chan = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, le_chan->rx.cid,
	       le_chan->tx.cid);

	le_chan->ident = get_ident();
   1beaa:	f7e9 fe23 	bl	5af4 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   1beae:	2204      	movs	r2, #4
	le_chan->ident = get_ident();
   1beb0:	4601      	mov	r1, r0
   1beb2:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
   1beb6:	2006      	movs	r0, #6
   1beb8:	f7e9 fe46 	bl	5b48 <l2cap_create_le_sig_pdu.constprop.0>
				      le_chan->ident, sizeof(*req));
	if (!buf) {
   1bebc:	4605      	mov	r5, r0
   1bebe:	b1b0      	cbz	r0, 1beee <bt_l2cap_chan_disconnect+0x4c>
   1bec0:	2104      	movs	r1, #4
   1bec2:	3008      	adds	r0, #8
   1bec4:	f002 f821 	bl	1df0a <net_buf_simple_add>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
	req->dcid = sys_cpu_to_le16(le_chan->tx.cid);
   1bec8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1beca:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(le_chan->rx.cid);
   1becc:	8aa3      	ldrh	r3, [r4, #20]
   1bece:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(chan, buf, L2CAP_DISC_TIMEOUT);
   1bed0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bed4:	2300      	movs	r3, #0
   1bed6:	4620      	mov	r0, r4
   1bed8:	4629      	mov	r1, r5
   1beda:	f7ff ff21 	bl	1bd20 <l2cap_chan_send_req>
	BT_L2CAP_LE_CHAN(chan)->state = state;
   1bede:	2304      	movs	r3, #4
   1bee0:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTING);

	return 0;
   1bee4:	2000      	movs	r0, #0
}
   1bee6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
   1bee8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1beec:	e7fb      	b.n	1bee6 <bt_l2cap_chan_disconnect+0x44>
		return -ENOMEM;
   1beee:	f06f 000b 	mvn.w	r0, #11
   1bef2:	e7f8      	b.n	1bee6 <bt_l2cap_chan_disconnect+0x44>

0001bef4 <l2cap_chan_le_recv>:
{
   1bef4:	b570      	push	{r4, r5, r6, lr}
	if (!test_and_dec(&chan->rx.credits)) {
   1bef6:	f100 031c 	add.w	r3, r0, #28
{
   1befa:	4604      	mov	r4, r0
   1befc:	460d      	mov	r5, r1
		old_value = atomic_get(target);
   1befe:	4618      	mov	r0, r3
   1bf00:	f7ff fd2d 	bl	1b95e <atomic_get>
		if (!old_value) {
   1bf04:	b388      	cbz	r0, 1bf6a <l2cap_chan_le_recv+0x76>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bf06:	f3bf 8f5b 	dmb	ish
		new_value = old_value - 1;
   1bf0a:	1e42      	subs	r2, r0, #1
   1bf0c:	e853 1f00 	ldrex	r1, [r3]
   1bf10:	4281      	cmp	r1, r0
   1bf12:	d103      	bne.n	1bf1c <l2cap_chan_le_recv+0x28>
   1bf14:	e843 2600 	strex	r6, r2, [r3]
   1bf18:	2e00      	cmp	r6, #0
   1bf1a:	d1f7      	bne.n	1bf0c <l2cap_chan_le_recv+0x18>
   1bf1c:	f3bf 8f5b 	dmb	ish
	} while (atomic_cas(target, old_value, new_value) == 0);
   1bf20:	d1ed      	bne.n	1befe <l2cap_chan_le_recv+0xa>
	if (chan->_sdu) {
   1bf22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1bf24:	b99b      	cbnz	r3, 1bf4e <l2cap_chan_le_recv+0x5a>
	if (buf->len < 2) {
   1bf26:	89ab      	ldrh	r3, [r5, #12]
   1bf28:	2b01      	cmp	r3, #1
   1bf2a:	d91e      	bls.n	1bf6a <l2cap_chan_le_recv+0x76>
	return net_buf_simple_pull_le16(&buf->b);
   1bf2c:	f105 0008 	add.w	r0, r5, #8
   1bf30:	f002 f838 	bl	1dfa4 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
   1bf34:	8ae3      	ldrh	r3, [r4, #22]
   1bf36:	4283      	cmp	r3, r0
   1bf38:	4606      	mov	r6, r0
   1bf3a:	d316      	bcc.n	1bf6a <l2cap_chan_le_recv+0x76>
	if (chan->chan.ops->alloc_buf) {
   1bf3c:	6863      	ldr	r3, [r4, #4]
   1bf3e:	68da      	ldr	r2, [r3, #12]
   1bf40:	b15a      	cbz	r2, 1bf5a <l2cap_chan_le_recv+0x66>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
   1bf42:	4620      	mov	r0, r4
   1bf44:	4790      	blx	r2
   1bf46:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (!chan->_sdu) {
   1bf48:	b178      	cbz	r0, 1bf6a <l2cap_chan_le_recv+0x76>
		chan->_sdu_len = sdu_len;
   1bf4a:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		l2cap_chan_le_recv_seg(chan, buf);
   1bf4e:	4629      	mov	r1, r5
   1bf50:	4620      	mov	r0, r4
}
   1bf52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		l2cap_chan_le_recv_seg(chan, buf);
   1bf56:	f7e9 bfcf 	b.w	5ef8 <l2cap_chan_le_recv_seg>
	err = chan->chan.ops->recv(&chan->chan, buf);
   1bf5a:	691b      	ldr	r3, [r3, #16]
   1bf5c:	4629      	mov	r1, r5
   1bf5e:	4620      	mov	r0, r4
   1bf60:	4798      	blx	r3
	if (err < 0) {
   1bf62:	2800      	cmp	r0, #0
   1bf64:	da06      	bge.n	1bf74 <l2cap_chan_le_recv+0x80>
		if (err != -EINPROGRESS) {
   1bf66:	3077      	adds	r0, #119	; 0x77
   1bf68:	d00a      	beq.n	1bf80 <l2cap_chan_le_recv+0x8c>
		bt_l2cap_chan_disconnect(&chan->chan);
   1bf6a:	4620      	mov	r0, r4
}
   1bf6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_l2cap_chan_disconnect(&chan->chan);
   1bf70:	f7ff bf97 	b.w	1bea2 <bt_l2cap_chan_disconnect>
	l2cap_chan_send_credits(chan, buf, 1);
   1bf74:	4620      	mov	r0, r4
   1bf76:	2101      	movs	r1, #1
}
   1bf78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	l2cap_chan_send_credits(chan, buf, 1);
   1bf7c:	f7ff be74 	b.w	1bc68 <l2cap_chan_send_credits.isra.0>
}
   1bf80:	bd70      	pop	{r4, r5, r6, pc}

0001bf82 <l2cap_rx_process>:
{
   1bf82:	b570      	push	{r4, r5, r6, lr}
	struct bt_l2cap_le_chan *ch = CHAN_RX(work);
   1bf84:	f1a0 0664 	sub.w	r6, r0, #100	; 0x64
	while ((buf = net_buf_get(&ch->rx_queue, K_NO_WAIT))) {
   1bf88:	f100 0410 	add.w	r4, r0, #16
   1bf8c:	2200      	movs	r2, #0
   1bf8e:	2300      	movs	r3, #0
   1bf90:	4620      	mov	r0, r4
   1bf92:	f001 ff5d 	bl	1de50 <net_buf_get>
   1bf96:	4605      	mov	r5, r0
   1bf98:	b900      	cbnz	r0, 1bf9c <l2cap_rx_process+0x1a>
}
   1bf9a:	bd70      	pop	{r4, r5, r6, pc}
		l2cap_chan_le_recv(ch, buf);
   1bf9c:	4630      	mov	r0, r6
   1bf9e:	4629      	mov	r1, r5
   1bfa0:	f7ff ffa8 	bl	1bef4 <l2cap_chan_le_recv>
		net_buf_unref(buf);
   1bfa4:	4628      	mov	r0, r5
   1bfa6:	f7f9 feb5 	bl	15d14 <net_buf_unref>
   1bfaa:	e7ef      	b.n	1bf8c <l2cap_rx_process+0xa>

0001bfac <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1bfac:	898b      	ldrh	r3, [r1, #12]
   1bfae:	2b03      	cmp	r3, #3
{
   1bfb0:	b570      	push	{r4, r5, r6, lr}
   1bfb2:	4605      	mov	r5, r0
   1bfb4:	460c      	mov	r4, r1
   1bfb6:	4616      	mov	r6, r2
	if (buf->len < sizeof(*hdr)) {
   1bfb8:	d804      	bhi.n	1bfc4 <bt_l2cap_recv+0x18>
	net_buf_unref(buf);
   1bfba:	4620      	mov	r0, r4
}
   1bfbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
   1bfc0:	f7f9 bea8 	b.w	15d14 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1bfc4:	2104      	movs	r1, #4
   1bfc6:	f104 0008 	add.w	r0, r4, #8
   1bfca:	f001 ffdb 	bl	1df84 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1bfce:	8841      	ldrh	r1, [r0, #2]
   1bfd0:	4628      	mov	r0, r5
   1bfd2:	f7ff ff32 	bl	1be3a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bfd6:	4605      	mov	r5, r0
   1bfd8:	2800      	cmp	r0, #0
   1bfda:	d0ee      	beq.n	1bfba <bt_l2cap_recv+0xe>
	if (L2CAP_LE_CID_IS_DYN(le_chan->rx.cid)) {
   1bfdc:	8a83      	ldrh	r3, [r0, #20]
   1bfde:	3b40      	subs	r3, #64	; 0x40
   1bfe0:	b29b      	uxth	r3, r3
   1bfe2:	2b3f      	cmp	r3, #63	; 0x3f
   1bfe4:	d821      	bhi.n	1c02a <bt_l2cap_recv+0x7e>
		if (complete) {
   1bfe6:	b1ee      	cbz	r6, 1c024 <bt_l2cap_recv+0x78>
	if (chan->state == BT_L2CAP_DISCONNECTING) {
   1bfe8:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
   1bfec:	2b04      	cmp	r3, #4
   1bfee:	d0e4      	beq.n	1bfba <bt_l2cap_recv+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bff0:	3010      	adds	r0, #16
   1bff2:	f7ff fcb4 	bl	1b95e <atomic_get>
	if (atomic_test_bit(chan->chan.status, BT_L2CAP_STATUS_SHUTDOWN)) {
   1bff6:	0783      	lsls	r3, r0, #30
   1bff8:	d4df      	bmi.n	1bfba <bt_l2cap_recv+0xe>
	if (!L2CAP_LE_PSM_IS_DYN(chan->psm)) {
   1bffa:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
   1bffe:	3b80      	subs	r3, #128	; 0x80
   1c000:	b29b      	uxth	r3, r3
   1c002:	2b7f      	cmp	r3, #127	; 0x7f
		l2cap_chan_le_recv(chan, buf);
   1c004:	4621      	mov	r1, r4
	if (!L2CAP_LE_PSM_IS_DYN(chan->psm)) {
   1c006:	d903      	bls.n	1c010 <bt_l2cap_recv+0x64>
		l2cap_chan_le_recv(chan, buf);
   1c008:	4628      	mov	r0, r5
   1c00a:	f7ff ff73 	bl	1bef4 <l2cap_chan_le_recv>
		net_buf_unref(buf);
   1c00e:	e7d4      	b.n	1bfba <bt_l2cap_recv+0xe>
	net_buf_put(&chan->rx_queue, buf);
   1c010:	f105 0074 	add.w	r0, r5, #116	; 0x74
   1c014:	f001 ff3a 	bl	1de8c <net_buf_put>
	k_work_submit(&chan->rx_work);
   1c018:	f105 0064 	add.w	r0, r5, #100	; 0x64
}
   1c01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_submit(&chan->rx_work);
   1c020:	f7fc b906 	b.w	18230 <k_work_submit>
			bt_l2cap_chan_disconnect(chan);
   1c024:	f7ff ff3d 	bl	1bea2 <bt_l2cap_chan_disconnect>
			net_buf_unref(buf);
   1c028:	e7c7      	b.n	1bfba <bt_l2cap_recv+0xe>
	chan->ops->recv(chan, buf);
   1c02a:	6843      	ldr	r3, [r0, #4]
   1c02c:	4621      	mov	r1, r4
   1c02e:	691b      	ldr	r3, [r3, #16]
   1c030:	4798      	blx	r3
   1c032:	e7c2      	b.n	1bfba <bt_l2cap_recv+0xe>

0001c034 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c034:	4603      	mov	r3, r0
	return list->head;
   1c036:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c038:	b128      	cbz	r0, 1c046 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c03a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c03c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1c03e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c040:	4288      	cmp	r0, r1
	list->tail = node;
   1c042:	bf08      	it	eq
   1c044:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c046:	4770      	bx	lr

0001c048 <net_buf_frags_len>:
{
   1c048:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c04a:	2000      	movs	r0, #0
	while (buf) {
   1c04c:	b903      	cbnz	r3, 1c050 <net_buf_frags_len+0x8>
}
   1c04e:	4770      	bx	lr
		bytes += buf->len;
   1c050:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c052:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c054:	4410      	add	r0, r2
		buf = buf->frags;
   1c056:	e7f9      	b.n	1c04c <net_buf_frags_len+0x4>

0001c058 <attr_read_type_cb>:
{
   1c058:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c05a:	68d4      	ldr	r4, [r2, #12]
   1c05c:	7823      	ldrb	r3, [r4, #0]
   1c05e:	3102      	adds	r1, #2
   1c060:	b913      	cbnz	r3, 1c068 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c062:	7021      	strb	r1, [r4, #0]
	return true;
   1c064:	2001      	movs	r0, #1
   1c066:	e006      	b.n	1c076 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c068:	428b      	cmp	r3, r1
   1c06a:	d0fb      	beq.n	1c064 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c06c:	8983      	ldrh	r3, [r0, #12]
   1c06e:	3b02      	subs	r3, #2
   1c070:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c072:	2000      	movs	r0, #0
   1c074:	6110      	str	r0, [r2, #16]
}
   1c076:	bd10      	pop	{r4, pc}

0001c078 <att_prepare_write_req>:
}
   1c078:	2006      	movs	r0, #6
   1c07a:	4770      	bx	lr

0001c07c <att_op_get_type>:
	switch (op) {
   1c07c:	2852      	cmp	r0, #82	; 0x52
   1c07e:	d830      	bhi.n	1c0e2 <att_op_get_type+0x66>
   1c080:	b388      	cbz	r0, 1c0e6 <att_op_get_type+0x6a>
   1c082:	1e43      	subs	r3, r0, #1
   1c084:	2b51      	cmp	r3, #81	; 0x51
   1c086:	d82e      	bhi.n	1c0e6 <att_op_get_type+0x6a>
   1c088:	e8df f003 	tbb	[pc, r3]
   1c08c:	39333933 	.word	0x39333933
   1c090:	39333933 	.word	0x39333933
   1c094:	39333933 	.word	0x39333933
   1c098:	39333933 	.word	0x39333933
   1c09c:	2d333933 	.word	0x2d333933
   1c0a0:	3933392d 	.word	0x3933392d
   1c0a4:	2d352d33 	.word	0x2d352d33
   1c0a8:	392d2937 	.word	0x392d2937
   1c0ac:	2d352d33 	.word	0x2d352d33
   1c0b0:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0b4:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0b8:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0bc:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0c0:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0c4:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0c8:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0cc:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0d0:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0d4:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0d8:	2d2d2d2d 	.word	0x2d2d2d2d
   1c0dc:	3b2d      	.short	0x3b2d
   1c0de:	2004      	movs	r0, #4
   1c0e0:	4770      	bx	lr
   1c0e2:	28d2      	cmp	r0, #210	; 0xd2
   1c0e4:	d00d      	beq.n	1c102 <att_op_get_type+0x86>
		return ATT_COMMAND;
   1c0e6:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c0ea:	bf0c      	ite	eq
   1c0ec:	2006      	moveq	r0, #6
   1c0ee:	2000      	movne	r0, #0
   1c0f0:	4770      	bx	lr
		return ATT_RESPONSE;
   1c0f2:	2002      	movs	r0, #2
   1c0f4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c0f6:	2003      	movs	r0, #3
   1c0f8:	4770      	bx	lr
		return ATT_INDICATION;
   1c0fa:	2005      	movs	r0, #5
   1c0fc:	4770      	bx	lr
		return ATT_REQUEST;
   1c0fe:	2001      	movs	r0, #1
   1c100:	4770      	bx	lr
		return ATT_COMMAND;
   1c102:	2000      	movs	r0, #0
}
   1c104:	4770      	bx	lr

0001c106 <bt_gatt_foreach_attr>:
{
   1c106:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c108:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c10c:	2300      	movs	r3, #0
   1c10e:	9300      	str	r3, [sp, #0]
   1c110:	461a      	mov	r2, r3
   1c112:	f7eb f8f7 	bl	7304 <bt_gatt_foreach_attr_type>
}
   1c116:	b005      	add	sp, #20
   1c118:	f85d fb04 	ldr.w	pc, [sp], #4

0001c11c <find_type_cb>:
{
   1c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1c120:	f8d2 9000 	ldr.w	r9, [r2]
{
   1c124:	b091      	sub	sp, #68	; 0x44
   1c126:	4607      	mov	r7, r0
   1c128:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c12a:	2500      	movs	r5, #0
   1c12c:	f642 0301 	movw	r3, #10241	; 0x2801
   1c130:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1c132:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c136:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1c13a:	a90b      	add	r1, sp, #44	; 0x2c
{
   1c13c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c13e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1c142:	f7fe fc17 	bl	1a974 <bt_uuid_cmp>
   1c146:	2800      	cmp	r0, #0
   1c148:	d079      	beq.n	1c23e <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1c14a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c14e:	6838      	ldr	r0, [r7, #0]
   1c150:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1c154:	a90b      	add	r1, sp, #44	; 0x2c
   1c156:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1c15a:	f7fe fc0b 	bl	1a974 <bt_uuid_cmp>
   1c15e:	b138      	cbz	r0, 1c170 <find_type_cb+0x54>
		if (data->group &&
   1c160:	68a3      	ldr	r3, [r4, #8]
   1c162:	b11b      	cbz	r3, 1c16c <find_type_cb+0x50>
   1c164:	885a      	ldrh	r2, [r3, #2]
   1c166:	42b2      	cmp	r2, r6
   1c168:	d200      	bcs.n	1c16c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1c16a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1c16c:	2001      	movs	r0, #1
   1c16e:	e009      	b.n	1c184 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1c170:	6861      	ldr	r1, [r4, #4]
   1c172:	4608      	mov	r0, r1
   1c174:	f7ff ff68 	bl	1c048 <net_buf_frags_len>
   1c178:	f8b9 302e 	ldrh.w	r3, [r9, #46]	; 0x2e
   1c17c:	1a1b      	subs	r3, r3, r0
   1c17e:	2b03      	cmp	r3, #3
   1c180:	d803      	bhi.n	1c18a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1c182:	2000      	movs	r0, #0
}
   1c184:	b011      	add	sp, #68	; 0x44
   1c186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1c18a:	4608      	mov	r0, r1
   1c18c:	f001 fe8f 	bl	1deae <net_buf_frag_last>
   1c190:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1c192:	6860      	ldr	r0, [r4, #4]
   1c194:	f7ff ff58 	bl	1c048 <net_buf_frags_len>
   1c198:	f8b9 a02e 	ldrh.w	sl, [r9, #46]	; 0x2e
	return net_buf_simple_tailroom(&buf->b);
   1c19c:	f105 0b08 	add.w	fp, r5, #8
   1c1a0:	ebaa 0a00 	sub.w	sl, sl, r0
   1c1a4:	4658      	mov	r0, fp
   1c1a6:	f001 ff09 	bl	1dfbc <net_buf_simple_tailroom>
   1c1aa:	4582      	cmp	sl, r0
   1c1ac:	d23f      	bcs.n	1c22e <find_type_cb+0x112>
   1c1ae:	6860      	ldr	r0, [r4, #4]
   1c1b0:	f7ff ff4a 	bl	1c048 <net_buf_frags_len>
   1c1b4:	f8b9 302e 	ldrh.w	r3, [r9, #46]	; 0x2e
   1c1b8:	1a18      	subs	r0, r3, r0
	if (!len) {
   1c1ba:	b970      	cbnz	r0, 1c1da <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1c1bc:	6863      	ldr	r3, [r4, #4]
   1c1be:	7998      	ldrb	r0, [r3, #6]
   1c1c0:	f7f9 fce4 	bl	15b8c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c1c4:	2200      	movs	r2, #0
   1c1c6:	2300      	movs	r3, #0
   1c1c8:	f001 fe3d 	bl	1de46 <net_buf_alloc_fixed>
		if (!frag) {
   1c1cc:	4605      	mov	r5, r0
   1c1ce:	2800      	cmp	r0, #0
   1c1d0:	d0d7      	beq.n	1c182 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1c1d2:	4601      	mov	r1, r0
   1c1d4:	6860      	ldr	r0, [r4, #4]
   1c1d6:	f001 fe7b 	bl	1ded0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1c1da:	2300      	movs	r3, #0
   1c1dc:	9300      	str	r3, [sp, #0]
   1c1de:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1c1e2:	4639      	mov	r1, r7
   1c1e4:	2310      	movs	r3, #16
   1c1e6:	aa02      	add	r2, sp, #8
   1c1e8:	4640      	mov	r0, r8
   1c1ea:	47c8      	blx	r9
	if (read < 0) {
   1c1ec:	1e07      	subs	r7, r0, #0
   1c1ee:	db26      	blt.n	1c23e <find_type_cb+0x122>
	if (read != data->value_len) {
   1c1f0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c1f2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1c1f4:	42ba      	cmp	r2, r7
   1c1f6:	d01e      	beq.n	1c236 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c1f8:	4601      	mov	r1, r0
   1c1fa:	a80b      	add	r0, sp, #44	; 0x2c
   1c1fc:	f7fe fbe8 	bl	1a9d0 <bt_uuid_create>
   1c200:	b1e8      	cbz	r0, 1c23e <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1c202:	b2fa      	uxtb	r2, r7
   1c204:	a902      	add	r1, sp, #8
   1c206:	a806      	add	r0, sp, #24
   1c208:	f7fe fbe2 	bl	1a9d0 <bt_uuid_create>
   1c20c:	b1b8      	cbz	r0, 1c23e <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1c20e:	a906      	add	r1, sp, #24
   1c210:	a80b      	add	r0, sp, #44	; 0x2c
   1c212:	f7fe fbaf 	bl	1a974 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1c216:	b990      	cbnz	r0, 1c23e <find_type_cb+0x122>
	data->err = 0x00;
   1c218:	2300      	movs	r3, #0
   1c21a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1c21c:	2104      	movs	r1, #4
   1c21e:	f105 0008 	add.w	r0, r5, #8
   1c222:	f001 fe72 	bl	1df0a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1c226:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c228:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c22a:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1c22c:	e79e      	b.n	1c16c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1c22e:	4658      	mov	r0, fp
   1c230:	f001 fec4 	bl	1dfbc <net_buf_simple_tailroom>
   1c234:	e7c1      	b.n	1c1ba <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1c236:	a902      	add	r1, sp, #8
   1c238:	f7fe fafa 	bl	1a830 <memcmp>
   1c23c:	e7eb      	b.n	1c216 <find_type_cb+0xfa>
	data->group = NULL;
   1c23e:	2300      	movs	r3, #0
   1c240:	60a3      	str	r3, [r4, #8]
   1c242:	e793      	b.n	1c16c <find_type_cb+0x50>

0001c244 <find_info_cb>:
{
   1c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c246:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1c248:	6817      	ldr	r7, [r2, #0]
{
   1c24a:	4605      	mov	r5, r0
   1c24c:	460e      	mov	r6, r1
   1c24e:	4614      	mov	r4, r2
	if (!data->rsp) {
   1c250:	b963      	cbnz	r3, 1c26c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c252:	6850      	ldr	r0, [r2, #4]
   1c254:	2101      	movs	r1, #1
   1c256:	3008      	adds	r0, #8
   1c258:	f001 fe57 	bl	1df0a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c25c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c25e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c260:	781b      	ldrb	r3, [r3, #0]
   1c262:	2b00      	cmp	r3, #0
   1c264:	bf0c      	ite	eq
   1c266:	2301      	moveq	r3, #1
   1c268:	2302      	movne	r3, #2
   1c26a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c26c:	68a3      	ldr	r3, [r4, #8]
   1c26e:	781b      	ldrb	r3, [r3, #0]
   1c270:	2b01      	cmp	r3, #1
   1c272:	d003      	beq.n	1c27c <find_info_cb+0x38>
   1c274:	2b02      	cmp	r3, #2
   1c276:	d018      	beq.n	1c2aa <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   1c278:	2000      	movs	r0, #0
   1c27a:	e015      	b.n	1c2a8 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c27c:	682b      	ldr	r3, [r5, #0]
   1c27e:	781b      	ldrb	r3, [r3, #0]
   1c280:	2b00      	cmp	r3, #0
   1c282:	d1f9      	bne.n	1c278 <find_info_cb+0x34>
   1c284:	6860      	ldr	r0, [r4, #4]
   1c286:	2104      	movs	r1, #4
   1c288:	3008      	adds	r0, #8
   1c28a:	f001 fe3e 	bl	1df0a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c28e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c290:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c292:	885b      	ldrh	r3, [r3, #2]
   1c294:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c296:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c298:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1c29a:	899b      	ldrh	r3, [r3, #12]
   1c29c:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
   1c29e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c2a0:	2804      	cmp	r0, #4
   1c2a2:	bf94      	ite	ls
   1c2a4:	2000      	movls	r0, #0
   1c2a6:	2001      	movhi	r0, #1
}
   1c2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c2aa:	682b      	ldr	r3, [r5, #0]
   1c2ac:	781b      	ldrb	r3, [r3, #0]
   1c2ae:	2b02      	cmp	r3, #2
   1c2b0:	d1e2      	bne.n	1c278 <find_info_cb+0x34>
   1c2b2:	6860      	ldr	r0, [r4, #4]
   1c2b4:	2112      	movs	r1, #18
   1c2b6:	3008      	adds	r0, #8
   1c2b8:	f001 fe27 	bl	1df0a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c2bc:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c2be:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c2c0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c2c2:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c2c6:	3101      	adds	r1, #1
   1c2c8:	f7fe fac3 	bl	1a852 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c2cc:	6863      	ldr	r3, [r4, #4]
   1c2ce:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
   1c2d0:	899b      	ldrh	r3, [r3, #12]
   1c2d2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c2d4:	2812      	cmp	r0, #18
   1c2d6:	e7e4      	b.n	1c2a2 <find_info_cb+0x5e>

0001c2d8 <att_chan_mtu_updated>:
{
   1c2d8:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1c2da:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1c2dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c2de:	b1d3      	cbz	r3, 1c316 <att_chan_mtu_updated+0x3e>
	return node->next;
   1c2e0:	681a      	ldr	r2, [r3, #0]
   1c2e2:	f5a3 75a4 	sub.w	r5, r3, #328	; 0x148
   1c2e6:	b10a      	cbz	r2, 1c2ec <att_chan_mtu_updated+0x14>
   1c2e8:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
{
   1c2ec:	2300      	movs	r3, #0
   1c2ee:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1c2f0:	42a8      	cmp	r0, r5
   1c2f2:	d007      	beq.n	1c304 <att_chan_mtu_updated+0x2c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1c2f4:	8dec      	ldrh	r4, [r5, #46]	; 0x2e
   1c2f6:	42a1      	cmp	r1, r4
   1c2f8:	bf38      	it	cc
   1c2fa:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1c2fc:	8bec      	ldrh	r4, [r5, #30]
   1c2fe:	42a3      	cmp	r3, r4
   1c300:	bf38      	it	cc
   1c302:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c304:	b142      	cbz	r2, 1c318 <att_chan_mtu_updated+0x40>
   1c306:	f8d2 4148 	ldr.w	r4, [r2, #328]	; 0x148
   1c30a:	b10c      	cbz	r4, 1c310 <att_chan_mtu_updated+0x38>
   1c30c:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
{
   1c310:	4615      	mov	r5, r2
   1c312:	4622      	mov	r2, r4
   1c314:	e7ec      	b.n	1c2f0 <att_chan_mtu_updated+0x18>
   1c316:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1c318:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1c31a:	8bc2      	ldrh	r2, [r0, #30]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1c31c:	428c      	cmp	r4, r1
   1c31e:	d801      	bhi.n	1c324 <att_chan_mtu_updated+0x4c>
   1c320:	429a      	cmp	r2, r3
   1c322:	d909      	bls.n	1c338 <att_chan_mtu_updated+0x60>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1c324:	429a      	cmp	r2, r3
   1c326:	bf38      	it	cc
   1c328:	461a      	movcc	r2, r3
   1c32a:	42a1      	cmp	r1, r4
   1c32c:	6830      	ldr	r0, [r6, #0]
   1c32e:	bf38      	it	cc
   1c330:	4621      	movcc	r1, r4
}
   1c332:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1c334:	f7eb bb62 	b.w	79fc <bt_gatt_att_max_mtu_changed>
}
   1c338:	bc70      	pop	{r4, r5, r6}
   1c33a:	4770      	bx	lr

0001c33c <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c33c:	68d0      	ldr	r0, [r2, #12]
   1c33e:	7803      	ldrb	r3, [r0, #0]
   1c340:	3104      	adds	r1, #4
   1c342:	b913      	cbnz	r3, 1c34a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c344:	7001      	strb	r1, [r0, #0]
	return true;
   1c346:	2001      	movs	r0, #1
}
   1c348:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c34a:	428b      	cmp	r3, r1
   1c34c:	d0fb      	beq.n	1c346 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1c34e:	6891      	ldr	r1, [r2, #8]
   1c350:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1c352:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c354:	3b04      	subs	r3, #4
   1c356:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c358:	6110      	str	r0, [r2, #16]
		return false;
   1c35a:	4770      	bx	lr

0001c35c <att_get>:
{
   1c35c:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1c35e:	7b43      	ldrb	r3, [r0, #13]
   1c360:	2b07      	cmp	r3, #7
   1c362:	d001      	beq.n	1c368 <att_get+0xc>
		return NULL;
   1c364:	2000      	movs	r0, #0
}
   1c366:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1c368:	2104      	movs	r1, #4
   1c36a:	f7ff fd66 	bl	1be3a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c36e:	2800      	cmp	r0, #0
   1c370:	d0f8      	beq.n	1c364 <att_get+0x8>
	return att_chan->att;
   1c372:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c376:	e7f6      	b.n	1c366 <att_get+0xa>

0001c378 <write_cb>:
{
   1c378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c37a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c37c:	4601      	mov	r1, r0
{
   1c37e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c380:	222a      	movs	r2, #42	; 0x2a
   1c382:	6820      	ldr	r0, [r4, #0]
   1c384:	f000 ff1a 	bl	1d1bc <bt_gatt_check_perm>
   1c388:	4605      	mov	r5, r0
   1c38a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c38c:	bb20      	cbnz	r0, 1c3d8 <write_cb+0x60>
	if (!data->req) {
   1c38e:	7a23      	ldrb	r3, [r4, #8]
   1c390:	b1ab      	cbz	r3, 1c3be <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   1c392:	2b18      	cmp	r3, #24
   1c394:	bf14      	ite	ne
   1c396:	2300      	movne	r3, #0
   1c398:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   1c39a:	9301      	str	r3, [sp, #4]
   1c39c:	8a63      	ldrh	r3, [r4, #18]
   1c39e:	9300      	str	r3, [sp, #0]
   1c3a0:	68b7      	ldr	r7, [r6, #8]
   1c3a2:	8a23      	ldrh	r3, [r4, #16]
   1c3a4:	68e2      	ldr	r2, [r4, #12]
   1c3a6:	6820      	ldr	r0, [r4, #0]
   1c3a8:	4631      	mov	r1, r6
   1c3aa:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c3ac:	1e03      	subs	r3, r0, #0
   1c3ae:	db08      	blt.n	1c3c2 <write_cb+0x4a>
   1c3b0:	8a22      	ldrh	r2, [r4, #16]
   1c3b2:	4293      	cmp	r3, r2
   1c3b4:	d10e      	bne.n	1c3d4 <write_cb+0x5c>
	data->err = 0U;
   1c3b6:	2300      	movs	r3, #0
   1c3b8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c3ba:	2501      	movs	r5, #1
   1c3bc:	e007      	b.n	1c3ce <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c3be:	2302      	movs	r3, #2
   1c3c0:	e7eb      	b.n	1c39a <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   1c3c2:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c3c6:	d305      	bcc.n	1c3d4 <write_cb+0x5c>
		return -err;
   1c3c8:	425b      	negs	r3, r3
   1c3ca:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c3cc:	7523      	strb	r3, [r4, #20]
}
   1c3ce:	4628      	mov	r0, r5
   1c3d0:	b003      	add	sp, #12
   1c3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c3d4:	230e      	movs	r3, #14
   1c3d6:	e7f9      	b.n	1c3cc <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   1c3d8:	2500      	movs	r5, #0
   1c3da:	e7f8      	b.n	1c3ce <write_cb+0x56>

0001c3dc <att_chan_read>:
{
   1c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3e0:	4680      	mov	r8, r0
   1c3e2:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c3e4:	4610      	mov	r0, r2
{
   1c3e6:	4699      	mov	r9, r3
   1c3e8:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c3ea:	f7ff fe2d 	bl	1c048 <net_buf_frags_len>
   1c3ee:	f8b8 302e 	ldrh.w	r3, [r8, #46]	; 0x2e
   1c3f2:	4283      	cmp	r3, r0
{
   1c3f4:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c3f6:	d97a      	bls.n	1c4ee <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c3f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c3fc:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c3fe:	4630      	mov	r0, r6
   1c400:	f001 fd55 	bl	1deae <net_buf_frag_last>
	size_t len, total = 0;
   1c404:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c408:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c40a:	4630      	mov	r0, r6
   1c40c:	f7ff fe1c 	bl	1c048 <net_buf_frags_len>
   1c410:	f8b8 402e 	ldrh.w	r4, [r8, #46]	; 0x2e
	return net_buf_simple_tailroom(&buf->b);
   1c414:	f105 0708 	add.w	r7, r5, #8
   1c418:	1a24      	subs	r4, r4, r0
   1c41a:	4638      	mov	r0, r7
   1c41c:	f001 fdce 	bl	1dfbc <net_buf_simple_tailroom>
   1c420:	4284      	cmp	r4, r0
   1c422:	d211      	bcs.n	1c448 <att_chan_read+0x6c>
   1c424:	4630      	mov	r0, r6
   1c426:	f7ff fe0f 	bl	1c048 <net_buf_frags_len>
   1c42a:	f8b8 402e 	ldrh.w	r4, [r8, #46]	; 0x2e
   1c42e:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c430:	bb34      	cbnz	r4, 1c480 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c432:	79b0      	ldrb	r0, [r6, #6]
   1c434:	f7f9 fbaa 	bl	15b8c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c438:	2200      	movs	r2, #0
   1c43a:	2300      	movs	r3, #0
   1c43c:	f001 fd03 	bl	1de46 <net_buf_alloc_fixed>
			if (!frag) {
   1c440:	4605      	mov	r5, r0
   1c442:	b930      	cbnz	r0, 1c452 <att_chan_read+0x76>
	return total;
   1c444:	4657      	mov	r7, sl
   1c446:	e02c      	b.n	1c4a2 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c448:	4638      	mov	r0, r7
   1c44a:	f001 fdb7 	bl	1dfbc <net_buf_simple_tailroom>
   1c44e:	4604      	mov	r4, r0
   1c450:	e7ee      	b.n	1c430 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c452:	4601      	mov	r1, r0
   1c454:	4630      	mov	r0, r6
   1c456:	f001 fd3b 	bl	1ded0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c45a:	4630      	mov	r0, r6
   1c45c:	f7ff fdf4 	bl	1c048 <net_buf_frags_len>
   1c460:	f8b8 402e 	ldrh.w	r4, [r8, #46]	; 0x2e
   1c464:	f105 0708 	add.w	r7, r5, #8
   1c468:	1a24      	subs	r4, r4, r0
   1c46a:	4638      	mov	r0, r7
   1c46c:	f001 fda6 	bl	1dfbc <net_buf_simple_tailroom>
   1c470:	4284      	cmp	r4, r0
   1c472:	d21a      	bcs.n	1c4aa <att_chan_read+0xce>
   1c474:	4630      	mov	r0, r6
   1c476:	f7ff fde7 	bl	1c048 <net_buf_frags_len>
   1c47a:	f8b8 402e 	ldrh.w	r4, [r8, #46]	; 0x2e
   1c47e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c480:	68a9      	ldr	r1, [r5, #8]
   1c482:	89aa      	ldrh	r2, [r5, #12]
   1c484:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c488:	9803      	ldr	r0, [sp, #12]
   1c48a:	f8cd 9000 	str.w	r9, [sp]
   1c48e:	440a      	add	r2, r1
   1c490:	b2a3      	uxth	r3, r4
   1c492:	4659      	mov	r1, fp
   1c494:	47b8      	blx	r7
		if (read < 0) {
   1c496:	1e07      	subs	r7, r0, #0
   1c498:	da0c      	bge.n	1c4b4 <att_chan_read+0xd8>
				return total;
   1c49a:	f1ba 0f00 	cmp.w	sl, #0
   1c49e:	bf18      	it	ne
   1c4a0:	4657      	movne	r7, sl
}
   1c4a2:	4638      	mov	r0, r7
   1c4a4:	b005      	add	sp, #20
   1c4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4aa:	4638      	mov	r0, r7
   1c4ac:	f001 fd86 	bl	1dfbc <net_buf_simple_tailroom>
   1c4b0:	4604      	mov	r4, r0
   1c4b2:	e7e5      	b.n	1c480 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c4b6:	b993      	cbnz	r3, 1c4de <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c4b8:	4639      	mov	r1, r7
   1c4ba:	f105 0008 	add.w	r0, r5, #8
   1c4be:	f001 fd24 	bl	1df0a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c4c2:	4630      	mov	r0, r6
   1c4c4:	f7ff fdc0 	bl	1c048 <net_buf_frags_len>
   1c4c8:	f8b8 302e 	ldrh.w	r3, [r8, #46]	; 0x2e
		offset += read;
   1c4cc:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c4ce:	4283      	cmp	r3, r0
		total += read;
   1c4d0:	44ba      	add	sl, r7
		offset += read;
   1c4d2:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c4d6:	d9b5      	bls.n	1c444 <att_chan_read+0x68>
   1c4d8:	42a7      	cmp	r7, r4
   1c4da:	d096      	beq.n	1c40a <att_chan_read+0x2e>
   1c4dc:	e7b2      	b.n	1c444 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c4de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c4e2:	4639      	mov	r1, r7
   1c4e4:	4628      	mov	r0, r5
   1c4e6:	4798      	blx	r3
   1c4e8:	2800      	cmp	r0, #0
   1c4ea:	d1e5      	bne.n	1c4b8 <att_chan_read+0xdc>
   1c4ec:	e7aa      	b.n	1c444 <att_chan_read+0x68>
		return 0;
   1c4ee:	2700      	movs	r7, #0
   1c4f0:	e7d7      	b.n	1c4a2 <att_chan_read+0xc6>

0001c4f2 <chan_req_send>:
{
   1c4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c4f4:	688e      	ldr	r6, [r1, #8]
{
   1c4f6:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c4f8:	4630      	mov	r0, r6
   1c4fa:	f7ff fda5 	bl	1c048 <net_buf_frags_len>
   1c4fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1c500:	4283      	cmp	r3, r0
{
   1c502:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c504:	d30c      	bcc.n	1c520 <chan_req_send+0x2e>
	req->buf = NULL;
   1c506:	2700      	movs	r7, #0
	chan->req = req;
   1c508:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf);
   1c50c:	4620      	mov	r0, r4
	req->buf = NULL;
   1c50e:	608f      	str	r7, [r1, #8]
	err = chan_send(chan, buf);
   1c510:	4631      	mov	r1, r6
   1c512:	f7e9 ffe3 	bl	64dc <chan_send>
	if (err) {
   1c516:	b110      	cbz	r0, 1c51e <chan_req_send+0x2c>
		req->buf = buf;
   1c518:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   1c51a:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
}
   1c51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1c520:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1c524:	e7fb      	b.n	1c51e <chan_req_send+0x2c>

0001c526 <process_queue>:
{
   1c526:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c528:	2200      	movs	r2, #0
{
   1c52a:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c52c:	2300      	movs	r3, #0
   1c52e:	4608      	mov	r0, r1
{
   1c530:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c532:	f001 fc8d 	bl	1de50 <net_buf_get>
	if (buf) {
   1c536:	4605      	mov	r5, r0
   1c538:	b158      	cbz	r0, 1c552 <process_queue+0x2c>
		err = chan_send(chan, buf);
   1c53a:	4601      	mov	r1, r0
   1c53c:	4620      	mov	r0, r4
   1c53e:	f7e9 ffcd 	bl	64dc <chan_send>
		if (err) {
   1c542:	4604      	mov	r4, r0
   1c544:	b118      	cbz	r0, 1c54e <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1c546:	4629      	mov	r1, r5
   1c548:	4630      	mov	r0, r6
   1c54a:	f002 f97c 	bl	1e846 <k_queue_prepend>
}
   1c54e:	4620      	mov	r0, r4
   1c550:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c552:	f06f 0401 	mvn.w	r4, #1
   1c556:	e7fa      	b.n	1c54e <process_queue+0x28>

0001c558 <bt_att_chan_send_rsp>:
{
   1c558:	b538      	push	{r3, r4, r5, lr}
   1c55a:	4604      	mov	r4, r0
   1c55c:	460d      	mov	r5, r1
	return chan_send(chan, buf);
   1c55e:	f7e9 ffbd 	bl	64dc <chan_send>
	if (err) {
   1c562:	b130      	cbz	r0, 1c572 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c564:	4629      	mov	r1, r5
   1c566:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   1c56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c56e:	f001 bc8d 	b.w	1de8c <net_buf_put>
}
   1c572:	bd38      	pop	{r3, r4, r5, pc}

0001c574 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c574:	b510      	push	{r4, lr}
	return list->head;
   1c576:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c578:	2200      	movs	r2, #0
   1c57a:	b153      	cbz	r3, 1c592 <sys_slist_find_and_remove.isra.0+0x1e>
   1c57c:	428b      	cmp	r3, r1
   1c57e:	d10e      	bne.n	1c59e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c580:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c582:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c584:	b932      	cbnz	r2, 1c594 <sys_slist_find_and_remove.isra.0+0x20>
   1c586:	42a1      	cmp	r1, r4
	list->head = node;
   1c588:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c58a:	d100      	bne.n	1c58e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c58c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c58e:	2300      	movs	r3, #0
   1c590:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c592:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c594:	42a1      	cmp	r1, r4
	parent->next = child;
   1c596:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c598:	bf08      	it	eq
   1c59a:	6042      	streq	r2, [r0, #4]
}
   1c59c:	e7f7      	b.n	1c58e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c59e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c5a0:	681b      	ldr	r3, [r3, #0]
   1c5a2:	e7ea      	b.n	1c57a <sys_slist_find_and_remove.isra.0+0x6>

0001c5a4 <att_exec_write_req>:
   1c5a4:	2006      	movs	r0, #6
   1c5a6:	4770      	bx	lr

0001c5a8 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c5a8:	2301      	movs	r3, #1
   1c5aa:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c5ae:	f3bf 8f5b 	dmb	ish
   1c5b2:	e850 3f00 	ldrex	r3, [r0]
   1c5b6:	ea43 0201 	orr.w	r2, r3, r1
   1c5ba:	e840 2c00 	strex	ip, r2, [r0]
   1c5be:	f1bc 0f00 	cmp.w	ip, #0
   1c5c2:	d1f6      	bne.n	1c5b2 <atomic_test_and_set_bit+0xa>
   1c5c4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1c5c8:	4219      	tst	r1, r3
}
   1c5ca:	bf14      	ite	ne
   1c5cc:	2001      	movne	r0, #1
   1c5ce:	2000      	moveq	r0, #0
   1c5d0:	4770      	bx	lr

0001c5d2 <read_cb>:
{
   1c5d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1c5d6:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c5da:	4606      	mov	r6, r0
	data->err = 0x00;
   1c5dc:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1c5de:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1c5e2:	7317      	strb	r7, [r2, #12]
{
   1c5e4:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c5e6:	4631      	mov	r1, r6
   1c5e8:	2215      	movs	r2, #21
   1c5ea:	f000 fde7 	bl	1d1bc <bt_gatt_check_perm>
   1c5ee:	4604      	mov	r4, r0
   1c5f0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c5f2:	b9a0      	cbnz	r0, 1c61e <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c5f4:	e9cd 0000 	strd	r0, r0, [sp]
   1c5f8:	88ab      	ldrh	r3, [r5, #4]
   1c5fa:	68aa      	ldr	r2, [r5, #8]
   1c5fc:	4631      	mov	r1, r6
   1c5fe:	4640      	mov	r0, r8
   1c600:	f7ff feec 	bl	1c3dc <att_chan_read>
	if (ret < 0) {
   1c604:	1e03      	subs	r3, r0, #0
   1c606:	da0c      	bge.n	1c622 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1c608:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1c60c:	bf26      	itte	cs
   1c60e:	425b      	negcs	r3, r3
   1c610:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1c612:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1c614:	732b      	strb	r3, [r5, #12]
}
   1c616:	4620      	mov	r0, r4
   1c618:	b002      	add	sp, #8
   1c61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1c61e:	463c      	mov	r4, r7
   1c620:	e7f9      	b.n	1c616 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1c622:	2401      	movs	r4, #1
   1c624:	e7f7      	b.n	1c616 <read_cb+0x44>

0001c626 <read_vl_cb>:
{
   1c626:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1c62a:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c62e:	4606      	mov	r6, r0
	data->err = 0x00;
   1c630:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1c632:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1c636:	7317      	strb	r7, [r2, #12]
{
   1c638:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c63a:	4631      	mov	r1, r6
   1c63c:	2215      	movs	r2, #21
   1c63e:	f000 fdbd 	bl	1d1bc <bt_gatt_check_perm>
   1c642:	4604      	mov	r4, r0
   1c644:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c646:	bb18      	cbnz	r0, 1c690 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1c648:	68a8      	ldr	r0, [r5, #8]
   1c64a:	f8b8 302e 	ldrh.w	r3, [r8, #46]	; 0x2e
   1c64e:	8982      	ldrh	r2, [r0, #12]
   1c650:	1a9b      	subs	r3, r3, r2
   1c652:	2b01      	cmp	r3, #1
   1c654:	dd15      	ble.n	1c682 <read_vl_cb+0x5c>
   1c656:	2102      	movs	r1, #2
   1c658:	3008      	adds	r0, #8
   1c65a:	f001 fc56 	bl	1df0a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c65e:	88ab      	ldrh	r3, [r5, #4]
   1c660:	68aa      	ldr	r2, [r5, #8]
   1c662:	e9cd 4400 	strd	r4, r4, [sp]
   1c666:	4607      	mov	r7, r0
   1c668:	4631      	mov	r1, r6
   1c66a:	4640      	mov	r0, r8
   1c66c:	f7ff feb6 	bl	1c3dc <att_chan_read>
	if (read < 0) {
   1c670:	1e03      	subs	r3, r0, #0
   1c672:	da0a      	bge.n	1c68a <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1c674:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1c678:	bf26      	itte	cs
   1c67a:	425b      	negcs	r3, r3
   1c67c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1c67e:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   1c680:	732b      	strb	r3, [r5, #12]
}
   1c682:	4620      	mov	r0, r4
   1c684:	b002      	add	sp, #8
   1c686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   1c68a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1c68c:	2401      	movs	r4, #1
   1c68e:	e7f8      	b.n	1c682 <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   1c690:	463c      	mov	r4, r7
   1c692:	e7f6      	b.n	1c682 <read_vl_cb+0x5c>

0001c694 <bt_att_sent>:
{
   1c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c696:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c698:	f1a0 0708 	sub.w	r7, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c69c:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
	struct bt_att *att = chan->att;
   1c6a0:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1c6a4:	f3bf 8f5b 	dmb	ish
   1c6a8:	e853 2f00 	ldrex	r2, [r3]
   1c6ac:	f022 0210 	bic.w	r2, r2, #16
   1c6b0:	e843 2100 	strex	r1, r2, [r3]
   1c6b4:	2900      	cmp	r1, #0
   1c6b6:	d1f7      	bne.n	1c6a8 <bt_att_sent+0x14>
   1c6b8:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1c6bc:	b30c      	cbz	r4, 1c702 <bt_att_sent+0x6e>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c6be:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1c6c2:	b98b      	cbnz	r3, 1c6e8 <bt_att_sent+0x54>
   1c6c4:	6863      	ldr	r3, [r4, #4]
   1c6c6:	b17b      	cbz	r3, 1c6e8 <bt_att_sent+0x54>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c6c8:	1d20      	adds	r0, r4, #4
   1c6ca:	f7ff fcb3 	bl	1c034 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c6ce:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c6d0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c6d2:	4638      	mov	r0, r7
   1c6d4:	f7ff ff0d 	bl	1c4f2 <chan_req_send>
   1c6d8:	2800      	cmp	r0, #0
   1c6da:	da12      	bge.n	1c702 <bt_att_sent+0x6e>
	parent->next = child;
   1c6dc:	6863      	ldr	r3, [r4, #4]
   1c6de:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c6e0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1c6e2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c6e4:	b903      	cbnz	r3, 1c6e8 <bt_att_sent+0x54>
	list->tail = node;
   1c6e6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1c6e8:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   1c6ec:	4638      	mov	r0, r7
   1c6ee:	f7ff ff1a 	bl	1c526 <process_queue>
	if (!err) {
   1c6f2:	b130      	cbz	r0, 1c702 <bt_att_sent+0x6e>
	(void)process_queue(chan, &att->tx_queue);
   1c6f4:	f104 010c 	add.w	r1, r4, #12
   1c6f8:	4638      	mov	r0, r7
}
   1c6fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1c6fe:	f7ff bf12 	b.w	1c526 <process_queue>
}
   1c702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c704 <att_req_send_process>:
{
   1c704:	b570      	push	{r4, r5, r6, lr}
   1c706:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   1c708:	3004      	adds	r0, #4
   1c70a:	f7ff fc93 	bl	1c034 <sys_slist_get>
	if (!node) {
   1c70e:	4605      	mov	r5, r0
   1c710:	b1b8      	cbz	r0, 1c742 <att_req_send_process+0x3e>
	return list->head;
   1c712:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c714:	b14b      	cbz	r3, 1c72a <att_req_send_process+0x26>
	return node->next;
   1c716:	681e      	ldr	r6, [r3, #0]
   1c718:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
   1c71c:	b10e      	cbz	r6, 1c722 <att_req_send_process+0x1e>
   1c71e:	f5a6 76a4 	sub.w	r6, r6, #328	; 0x148
		if (!chan->req) {
   1c722:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1c726:	b13b      	cbz	r3, 1c738 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c728:	b966      	cbnz	r6, 1c744 <att_req_send_process+0x40>
	parent->next = child;
   1c72a:	6863      	ldr	r3, [r4, #4]
   1c72c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c72e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1c730:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c732:	b933      	cbnz	r3, 1c742 <att_req_send_process+0x3e>
	list->tail = node;
   1c734:	60a5      	str	r5, [r4, #8]
}
   1c736:	e004      	b.n	1c742 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   1c738:	4629      	mov	r1, r5
   1c73a:	f7ff feda 	bl	1c4f2 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c73e:	2800      	cmp	r0, #0
   1c740:	dbf2      	blt.n	1c728 <att_req_send_process+0x24>
}
   1c742:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   1c744:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c748:	b10b      	cbz	r3, 1c74e <att_req_send_process+0x4a>
   1c74a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
{
   1c74e:	4630      	mov	r0, r6
   1c750:	461e      	mov	r6, r3
   1c752:	e7e6      	b.n	1c722 <att_req_send_process+0x1e>

0001c754 <bt_att_status>:
{
   1c754:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c756:	f3bf 8f5b 	dmb	ish
   1c75a:	680b      	ldr	r3, [r1, #0]
   1c75c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c760:	07db      	lsls	r3, r3, #31
{
   1c762:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c764:	d519      	bpl.n	1c79a <bt_att_status+0x46>
	if (!chan->att) {
   1c766:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c76a:	b1b0      	cbz	r0, 1c79a <bt_att_status+0x46>
	if (chan->req) {
   1c76c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1c770:	b99b      	cbnz	r3, 1c79a <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1c772:	3004      	adds	r0, #4
   1c774:	f7ff fc5e 	bl	1c034 <sys_slist_get>
	if (!node) {
   1c778:	4604      	mov	r4, r0
   1c77a:	b170      	cbz	r0, 1c79a <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1c77c:	4601      	mov	r1, r0
   1c77e:	f1a5 0008 	sub.w	r0, r5, #8
   1c782:	f7ff feb6 	bl	1c4f2 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c786:	2800      	cmp	r0, #0
   1c788:	da07      	bge.n	1c79a <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1c78a:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1c78e:	685a      	ldr	r2, [r3, #4]
   1c790:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c792:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c794:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c796:	b902      	cbnz	r2, 1c79a <bt_att_status+0x46>
	list->tail = node;
   1c798:	609c      	str	r4, [r3, #8]
}
   1c79a:	bd38      	pop	{r3, r4, r5, pc}

0001c79c <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1c79c:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1c79e:	68c3      	ldr	r3, [r0, #12]
   1c7a0:	695b      	ldr	r3, [r3, #20]
   1c7a2:	b10b      	cbz	r3, 1c7a8 <att_sent+0xc>
		chan->ops->sent(chan);
   1c7a4:	3008      	adds	r0, #8
   1c7a6:	4718      	bx	r3
}
   1c7a8:	4770      	bx	lr

0001c7aa <att_unknown>:
{
   1c7aa:	b510      	push	{r4, lr}
   1c7ac:	460c      	mov	r4, r1
	if (!err) {
   1c7ae:	b90a      	cbnz	r2, 1c7b4 <att_unknown+0xa>
		att_sent(conn, user_data);
   1c7b0:	f7ff fff4 	bl	1c79c <att_sent>
	tx_meta_data_free(user_data);
   1c7b4:	4620      	mov	r0, r4
}
   1c7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1c7ba:	f7e9 be2d 	b.w	6418 <tx_meta_data_free>

0001c7be <att_tx_complete>:
{
   1c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7c2:	4606      	mov	r6, r0
   1c7c4:	460c      	mov	r4, r1
	if (!err) {
   1c7c6:	4615      	mov	r5, r2
   1c7c8:	b90a      	cbnz	r2, 1c7ce <att_tx_complete+0x10>
		att_sent(conn, user_data);
   1c7ca:	f7ff ffe7 	bl	1c79c <att_sent>
	tx_meta_data_free(data);
   1c7ce:	4620      	mov	r0, r4
	void *ud = data->user_data;
   1c7d0:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
	tx_meta_data_free(data);
   1c7d4:	f7e9 fe20 	bl	6418 <tx_meta_data_free>
	if (!err && func) {
   1c7d8:	b935      	cbnz	r5, 1c7e8 <att_tx_complete+0x2a>
   1c7da:	b12f      	cbz	r7, 1c7e8 <att_tx_complete+0x2a>
		func(conn, ud);
   1c7dc:	4641      	mov	r1, r8
   1c7de:	4630      	mov	r0, r6
   1c7e0:	463b      	mov	r3, r7
}
   1c7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		func(conn, ud);
   1c7e6:	4718      	bx	r3
}
   1c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c7ec <att_req_sent>:
{
   1c7ec:	b510      	push	{r4, lr}
   1c7ee:	460c      	mov	r4, r1
	if (!err) {
   1c7f0:	b90a      	cbnz	r2, 1c7f6 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1c7f2:	f7ff ffd3 	bl	1c79c <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1c7f6:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1c7f8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1c7fc:	b133      	cbz	r3, 1c80c <att_req_sent+0x20>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1c7fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c802:	2300      	movs	r3, #0
   1c804:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1c808:	f7fb fdae 	bl	18368 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1c80c:	4620      	mov	r0, r4
}
   1c80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1c812:	f7e9 be01 	b.w	6418 <tx_meta_data_free>

0001c816 <att_cfm_sent>:
{
   1c816:	b510      	push	{r4, lr}
   1c818:	460c      	mov	r4, r1
	if (!err) {
   1c81a:	b90a      	cbnz	r2, 1c820 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1c81c:	f7ff ffbe 	bl	1c79c <att_sent>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c820:	6823      	ldr	r3, [r4, #0]
   1c822:	f3bf 8f5b 	dmb	ish
   1c826:	33f8      	adds	r3, #248	; 0xf8
   1c828:	e853 2f00 	ldrex	r2, [r3]
   1c82c:	f022 0202 	bic.w	r2, r2, #2
   1c830:	e843 2100 	strex	r1, r2, [r3]
   1c834:	2900      	cmp	r1, #0
   1c836:	d1f7      	bne.n	1c828 <att_cfm_sent+0x12>
   1c838:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1c83c:	4620      	mov	r0, r4
}
   1c83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1c842:	f7e9 bde9 	b.w	6418 <tx_meta_data_free>

0001c846 <att_rsp_sent>:
{
   1c846:	b510      	push	{r4, lr}
   1c848:	460c      	mov	r4, r1
	if (!err) {
   1c84a:	b90a      	cbnz	r2, 1c850 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1c84c:	f7ff ffa6 	bl	1c79c <att_sent>
   1c850:	6823      	ldr	r3, [r4, #0]
   1c852:	f3bf 8f5b 	dmb	ish
   1c856:	33f8      	adds	r3, #248	; 0xf8
   1c858:	e853 2f00 	ldrex	r2, [r3]
   1c85c:	f022 0201 	bic.w	r2, r2, #1
   1c860:	e843 2100 	strex	r1, r2, [r3]
   1c864:	2900      	cmp	r1, #0
   1c866:	d1f7      	bne.n	1c858 <att_rsp_sent+0x12>
   1c868:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1c86c:	4620      	mov	r0, r4
}
   1c86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1c872:	f7e9 bdd1 	b.w	6418 <tx_meta_data_free>

0001c876 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c87a:	4688      	mov	r8, r1
   1c87c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c87e:	2101      	movs	r1, #1
   1c880:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c882:	4605      	mov	r5, r0
   1c884:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c886:	f7e9 ff59 	bl	673c <bt_att_chan_create_pdu>
	if (!buf) {
   1c88a:	4604      	mov	r4, r0
   1c88c:	b170      	cbz	r0, 1c8ac <send_err_rsp.part.0+0x36>
   1c88e:	2104      	movs	r1, #4
   1c890:	3008      	adds	r0, #8
   1c892:	f001 fb3a 	bl	1df0a <net_buf_simple_add>
	rsp->request = req;
   1c896:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1c89a:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1c89c:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   1c8a0:	4621      	mov	r1, r4
   1c8a2:	4628      	mov	r0, r5
}
   1c8a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1c8a8:	f7ff be56 	b.w	1c558 <bt_att_chan_send_rsp>
}
   1c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c8b0 <att_write_req>:
{
   1c8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8b2:	460c      	mov	r4, r1
   1c8b4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c8b6:	f101 0008 	add.w	r0, r1, #8
   1c8ba:	f001 fb73 	bl	1dfa4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1c8be:	89a2      	ldrh	r2, [r4, #12]
   1c8c0:	9201      	str	r2, [sp, #4]
   1c8c2:	68a2      	ldr	r2, [r4, #8]
   1c8c4:	9200      	str	r2, [sp, #0]
   1c8c6:	4603      	mov	r3, r0
   1c8c8:	2213      	movs	r2, #19
   1c8ca:	2112      	movs	r1, #18
   1c8cc:	4628      	mov	r0, r5
   1c8ce:	f7e9 ffc7 	bl	6860 <att_write_rsp.constprop.0>
}
   1c8d2:	b003      	add	sp, #12
   1c8d4:	bd30      	pop	{r4, r5, pc}

0001c8d6 <att_write_cmd>:
{
   1c8d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8d8:	460c      	mov	r4, r1
   1c8da:	4605      	mov	r5, r0
   1c8dc:	f101 0008 	add.w	r0, r1, #8
   1c8e0:	f001 fb60 	bl	1dfa4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1c8e4:	89a2      	ldrh	r2, [r4, #12]
   1c8e6:	9201      	str	r2, [sp, #4]
   1c8e8:	68a2      	ldr	r2, [r4, #8]
   1c8ea:	9200      	str	r2, [sp, #0]
   1c8ec:	2200      	movs	r2, #0
   1c8ee:	4603      	mov	r3, r0
   1c8f0:	4611      	mov	r1, r2
   1c8f2:	4628      	mov	r0, r5
   1c8f4:	f7e9 ffb4 	bl	6860 <att_write_rsp.constprop.0>
}
   1c8f8:	b003      	add	sp, #12
   1c8fa:	bd30      	pop	{r4, r5, pc}

0001c8fc <bt_att_create_pdu>:
{
   1c8fc:	b570      	push	{r4, r5, r6, lr}
   1c8fe:	460e      	mov	r6, r1
   1c900:	4615      	mov	r5, r2
	att = att_get(conn);
   1c902:	f7ff fd2b 	bl	1c35c <att_get>
	if (!att) {
   1c906:	b160      	cbz	r0, 1c922 <bt_att_create_pdu+0x26>
	return list->head;
   1c908:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c90a:	b153      	cbz	r3, 1c922 <bt_att_create_pdu+0x26>
   1c90c:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
	return node->next;
   1c910:	681b      	ldr	r3, [r3, #0]
   1c912:	b10b      	cbz	r3, 1c918 <bt_att_create_pdu+0x1c>
   1c914:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c918:	1c6a      	adds	r2, r5, #1
   1c91a:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   1c91c:	428a      	cmp	r2, r1
   1c91e:	d902      	bls.n	1c926 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c920:	b93b      	cbnz	r3, 1c932 <bt_att_create_pdu+0x36>
}
   1c922:	2000      	movs	r0, #0
   1c924:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1c926:	462a      	mov	r2, r5
   1c928:	4631      	mov	r1, r6
}
   1c92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1c92e:	f7e9 bf05 	b.w	673c <bt_att_chan_create_pdu>
   1c932:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c936:	b10c      	cbz	r4, 1c93c <bt_att_create_pdu+0x40>
   1c938:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
{
   1c93c:	4618      	mov	r0, r3
   1c93e:	4623      	mov	r3, r4
   1c940:	e7eb      	b.n	1c91a <bt_att_create_pdu+0x1e>

0001c942 <att_read_blob_req>:
{
   1c942:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1c944:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1c946:	8813      	ldrh	r3, [r2, #0]
   1c948:	8852      	ldrh	r2, [r2, #2]
   1c94a:	9200      	str	r2, [sp, #0]
   1c94c:	210c      	movs	r1, #12
   1c94e:	220d      	movs	r2, #13
   1c950:	f7ea f924 	bl	6b9c <att_read_rsp>
}
   1c954:	b003      	add	sp, #12
   1c956:	f85d fb04 	ldr.w	pc, [sp], #4

0001c95a <att_read_req>:
{
   1c95a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1c95c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1c95e:	2200      	movs	r2, #0
   1c960:	881b      	ldrh	r3, [r3, #0]
   1c962:	9200      	str	r2, [sp, #0]
   1c964:	210a      	movs	r1, #10
   1c966:	220b      	movs	r2, #11
   1c968:	f7ea f918 	bl	6b9c <att_read_rsp>
}
   1c96c:	b003      	add	sp, #12
   1c96e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c972 <att_mtu_req>:
{
   1c972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1c974:	6803      	ldr	r3, [r0, #0]
{
   1c976:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1c978:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c97a:	f3bf 8f5b 	dmb	ish
   1c97e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1c982:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1c986:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1c98a:	071b      	lsls	r3, r3, #28
   1c98c:	d41f      	bmi.n	1c9ce <att_mtu_req+0x5c>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1c98e:	688b      	ldr	r3, [r1, #8]
   1c990:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1c992:	2e16      	cmp	r6, #22
   1c994:	d91d      	bls.n	1c9d2 <att_mtu_req+0x60>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1c996:	2202      	movs	r2, #2
   1c998:	2103      	movs	r1, #3
   1c99a:	f7ff ffaf 	bl	1c8fc <bt_att_create_pdu>
	if (!pdu) {
   1c99e:	4607      	mov	r7, r0
   1c9a0:	b1c8      	cbz	r0, 1c9d6 <att_mtu_req+0x64>
	return net_buf_simple_add(&buf->b, len);
   1c9a2:	2102      	movs	r1, #2
   1c9a4:	3008      	adds	r0, #8
   1c9a6:	f001 fab0 	bl	1df0a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1c9aa:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   1c9ae:	7003      	strb	r3, [r0, #0]
   1c9b0:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1c9b2:	4639      	mov	r1, r7
   1c9b4:	4620      	mov	r0, r4
   1c9b6:	f7ff fdcf 	bl	1c558 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1c9ba:	2ec4      	cmp	r6, #196	; 0xc4
   1c9bc:	bf28      	it	cs
   1c9be:	26c4      	movcs	r6, #196	; 0xc4
	att_chan_mtu_updated(chan);
   1c9c0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1c9c2:	83e6      	strh	r6, [r4, #30]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1c9c4:	85e6      	strh	r6, [r4, #46]	; 0x2e
	att_chan_mtu_updated(chan);
   1c9c6:	f7ff fc87 	bl	1c2d8 <att_chan_mtu_updated>
	return 0;
   1c9ca:	4628      	mov	r0, r5
}
   1c9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1c9ce:	2006      	movs	r0, #6
   1c9d0:	e7fc      	b.n	1c9cc <att_mtu_req+0x5a>
		return BT_ATT_ERR_INVALID_PDU;
   1c9d2:	2004      	movs	r0, #4
   1c9d4:	e7fa      	b.n	1c9cc <att_mtu_req+0x5a>
		return BT_ATT_ERR_UNLIKELY;
   1c9d6:	200e      	movs	r0, #14
   1c9d8:	e7f8      	b.n	1c9cc <att_mtu_req+0x5a>

0001c9da <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1c9da:	898a      	ldrh	r2, [r1, #12]
   1c9dc:	6889      	ldr	r1, [r1, #8]
   1c9de:	2300      	movs	r3, #0
   1c9e0:	f7ea ba92 	b.w	6f08 <att_handle_rsp>

0001c9e4 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1c9e4:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1c9e8:	b570      	push	{r4, r5, r6, lr}
   1c9ea:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c9ec:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1c9f0:	2b00      	cmp	r3, #0
   1c9f2:	d039      	beq.n	1ca68 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   1c9f4:	b171      	cbz	r1, 1ca14 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   1c9f6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1c9fa:	2b00      	cmp	r3, #0
   1c9fc:	d034      	beq.n	1ca68 <bt_att_encrypt_change+0x84>
   1c9fe:	7c1b      	ldrb	r3, [r3, #16]
   1ca00:	07da      	lsls	r2, r3, #31
   1ca02:	d531      	bpl.n	1ca68 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   1ca04:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   1ca06:	2200      	movs	r2, #0
   1ca08:	4630      	mov	r0, r6
   1ca0a:	4611      	mov	r1, r2
}
   1ca0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1ca10:	f7ea ba7a 	b.w	6f08 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   1ca14:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1ca16:	4628      	mov	r0, r5
   1ca18:	f7eb f804 	bl	7a24 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1ca1c:	7a6b      	ldrb	r3, [r5, #9]
   1ca1e:	2b01      	cmp	r3, #1
   1ca20:	d022      	beq.n	1ca68 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1ca22:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   1ca26:	b1fd      	cbz	r5, 1ca68 <bt_att_encrypt_change+0x84>
   1ca28:	7c2b      	ldrb	r3, [r5, #16]
   1ca2a:	07db      	lsls	r3, r3, #31
   1ca2c:	d51c      	bpl.n	1ca68 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   1ca2e:	68eb      	ldr	r3, [r5, #12]
   1ca30:	2b00      	cmp	r3, #0
   1ca32:	d0e7      	beq.n	1ca04 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1ca34:	696a      	ldr	r2, [r5, #20]
   1ca36:	7c69      	ldrb	r1, [r5, #17]
   1ca38:	4630      	mov	r0, r6
   1ca3a:	f7e9 fe7f 	bl	673c <bt_att_chan_create_pdu>
	if (!buf) {
   1ca3e:	4604      	mov	r4, r0
   1ca40:	b150      	cbz	r0, 1ca58 <bt_att_encrypt_change+0x74>
	if (req->encode(buf, req->len, req->user_data)) {
   1ca42:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   1ca46:	68eb      	ldr	r3, [r5, #12]
   1ca48:	4798      	blx	r3
   1ca4a:	b138      	cbz	r0, 1ca5c <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ca4c:	6960      	ldr	r0, [r4, #20]
   1ca4e:	f7e9 fce3 	bl	6418 <tx_meta_data_free>
		net_buf_unref(buf);
   1ca52:	4620      	mov	r0, r4
   1ca54:	f7f9 f95e 	bl	15d14 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1ca58:	230e      	movs	r3, #14
   1ca5a:	e7d4      	b.n	1ca06 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf)) {
   1ca5c:	4621      	mov	r1, r4
   1ca5e:	4630      	mov	r0, r6
   1ca60:	f7e9 fd3c 	bl	64dc <chan_send>
   1ca64:	2800      	cmp	r0, #0
   1ca66:	d1f1      	bne.n	1ca4c <bt_att_encrypt_change+0x68>
}
   1ca68:	bd70      	pop	{r4, r5, r6, pc}

0001ca6a <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1ca6a:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
   1ca6e:	f7ea ba7d 	b.w	6f6c <bt_att_disconnected>

0001ca72 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1ca72:	b570      	push	{r4, r5, r6, lr}
   1ca74:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1ca76:	f7ff fc71 	bl	1c35c <att_get>
	if (!att) {
   1ca7a:	4604      	mov	r4, r0
   1ca7c:	b940      	cbnz	r0, 1ca90 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ca7e:	6968      	ldr	r0, [r5, #20]
   1ca80:	f7e9 fcca 	bl	6418 <tx_meta_data_free>
		net_buf_unref(buf);
   1ca84:	4628      	mov	r0, r5
   1ca86:	f7f9 f945 	bl	15d14 <net_buf_unref>
		return -ENOTCONN;
   1ca8a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1ca8e:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&att->tx_queue, buf);
   1ca90:	f100 060c 	add.w	r6, r0, #12
   1ca94:	4629      	mov	r1, r5
   1ca96:	4630      	mov	r0, r6
   1ca98:	f001 f9f8 	bl	1de8c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1ca9c:	2200      	movs	r2, #0
   1ca9e:	2300      	movs	r3, #0
   1caa0:	4630      	mov	r0, r6
   1caa2:	f001 f9d5 	bl	1de50 <net_buf_get>
	if (!buf) {
   1caa6:	4605      	mov	r5, r0
   1caa8:	b908      	cbnz	r0, 1caae <bt_att_send+0x3c>
	return 0;
   1caaa:	2000      	movs	r0, #0
   1caac:	e7ef      	b.n	1ca8e <bt_att_send+0x1c>
	return list->head;
   1caae:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cab0:	b19b      	cbz	r3, 1cada <bt_att_send+0x68>
	return node->next;
   1cab2:	681c      	ldr	r4, [r3, #0]
   1cab4:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
   1cab8:	b10c      	cbz	r4, 1cabe <bt_att_send+0x4c>
   1caba:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
	return chan_send(chan, buf);
   1cabe:	4629      	mov	r1, r5
   1cac0:	f7e9 fd0c 	bl	64dc <chan_send>
		if (err >= 0) {
   1cac4:	2800      	cmp	r0, #0
   1cac6:	daf0      	bge.n	1caaa <bt_att_send+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cac8:	b13c      	cbz	r4, 1cada <bt_att_send+0x68>
   1caca:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1cace:	b10b      	cbz	r3, 1cad4 <bt_att_send+0x62>
   1cad0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
{
   1cad4:	4620      	mov	r0, r4
   1cad6:	461c      	mov	r4, r3
   1cad8:	e7f1      	b.n	1cabe <bt_att_send+0x4c>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1cada:	4629      	mov	r1, r5
   1cadc:	4630      	mov	r0, r6
   1cade:	f001 feb2 	bl	1e846 <k_queue_prepend>
   1cae2:	e7e2      	b.n	1caaa <bt_att_send+0x38>

0001cae4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1cae4:	b510      	push	{r4, lr}
   1cae6:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1cae8:	f7ff fc38 	bl	1c35c <att_get>
	if (!att) {
   1caec:	b160      	cbz	r0, 1cb08 <bt_att_req_send+0x24>
	parent->next = child;
   1caee:	2300      	movs	r3, #0
   1caf0:	6023      	str	r3, [r4, #0]
	return list->tail;
   1caf2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1caf4:	b92b      	cbnz	r3, 1cb02 <bt_att_req_send+0x1e>
	list->head = node;
   1caf6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1cafa:	f7ff fe03 	bl	1c704 <att_req_send_process>

	return 0;
   1cafe:	2000      	movs	r0, #0
}
   1cb00:	bd10      	pop	{r4, pc}
	parent->next = child;
   1cb02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cb04:	6084      	str	r4, [r0, #8]
}
   1cb06:	e7f8      	b.n	1cafa <bt_att_req_send+0x16>
		return -ENOTCONN;
   1cb08:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cb0c:	e7f8      	b.n	1cb00 <bt_att_req_send+0x1c>

0001cb0e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1cb0e:	2001      	movs	r0, #1
   1cb10:	4770      	bx	lr

0001cb12 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1cb12:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1cb14:	f7ff fc22 	bl	1c35c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1cb18:	b1a0      	cbz	r0, 1cb44 <bt_att_clear_out_of_sync_sent+0x32>
	return list->head;
   1cb1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1cb1c:	b193      	cbz	r3, 1cb44 <bt_att_clear_out_of_sync_sent+0x32>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cb1e:	f3bf 8f5b 	dmb	ish
   1cb22:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
   1cb26:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
   1cb2a:	e852 1f00 	ldrex	r1, [r2]
   1cb2e:	f021 0120 	bic.w	r1, r1, #32
   1cb32:	e842 1000 	strex	r0, r1, [r2]
   1cb36:	2800      	cmp	r0, #0
   1cb38:	d1f7      	bne.n	1cb2a <bt_att_clear_out_of_sync_sent+0x18>
   1cb3a:	f3bf 8f5b 	dmb	ish
	return node->next;
   1cb3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   1cb42:	e7eb      	b.n	1cb1c <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1cb44:	bd08      	pop	{r3, pc}

0001cb46 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1cb46:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1cb48:	2104      	movs	r1, #4
   1cb4a:	f7ff f976 	bl	1be3a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1cb4e:	b138      	cbz	r0, 1cb60 <bt_att_out_of_sync_sent_on_fixed+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cb50:	f3bf 8f5b 	dmb	ish
   1cb54:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   1cb58:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1cb5c:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1cb60:	bd08      	pop	{r3, pc}

0001cb62 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1cb62:	6943      	ldr	r3, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1cb64:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
   1cb68:	4770      	bx	lr

0001cb6a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1cb6a:	6010      	str	r0, [r2, #0]
}
   1cb6c:	2000      	movs	r0, #0
   1cb6e:	4770      	bx	lr

0001cb70 <gatt_ccc_changed>:
{
   1cb70:	460b      	mov	r3, r1
   1cb72:	8909      	ldrh	r1, [r1, #8]
   1cb74:	8a5a      	ldrh	r2, [r3, #18]
   1cb76:	4291      	cmp	r1, r2
   1cb78:	bf38      	it	cc
   1cb7a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1cb7c:	8a9a      	ldrh	r2, [r3, #20]
   1cb7e:	428a      	cmp	r2, r1
   1cb80:	d003      	beq.n	1cb8a <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1cb82:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1cb84:	699b      	ldr	r3, [r3, #24]
   1cb86:	b103      	cbz	r3, 1cb8a <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1cb88:	4718      	bx	r3
}
   1cb8a:	4770      	bx	lr

0001cb8c <gatt_indicate_rsp>:
{
   1cb8c:	b510      	push	{r4, lr}
   1cb8e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1cb90:	68a3      	ldr	r3, [r4, #8]
{
   1cb92:	460a      	mov	r2, r1
	if (params->func) {
   1cb94:	b10b      	cbz	r3, 1cb9a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1cb96:	4621      	mov	r1, r4
   1cb98:	4798      	blx	r3
	params->_ref--;
   1cb9a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1cb9c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1cb9e:	3b01      	subs	r3, #1
   1cba0:	b2db      	uxtb	r3, r3
   1cba2:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1cba4:	b122      	cbz	r2, 1cbb0 <gatt_indicate_rsp+0x24>
   1cba6:	b91b      	cbnz	r3, 1cbb0 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1cba8:	4620      	mov	r0, r4
}
   1cbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1cbae:	4710      	bx	r2
}
   1cbb0:	bd10      	pop	{r4, pc}

0001cbb2 <match_uuid>:
	data->attr = attr;
   1cbb2:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1cbb4:	8091      	strh	r1, [r2, #4]
}
   1cbb6:	2000      	movs	r0, #0
   1cbb8:	4770      	bx	lr

0001cbba <gen_hash_m>:
{
   1cbba:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cbbc:	6807      	ldr	r7, [r0, #0]
   1cbbe:	783d      	ldrb	r5, [r7, #0]
{
   1cbc0:	b089      	sub	sp, #36	; 0x24
   1cbc2:	4606      	mov	r6, r0
   1cbc4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cbc6:	b10d      	cbz	r5, 1cbcc <gen_hash_m+0x12>
	switch (u16->val) {
   1cbc8:	2501      	movs	r5, #1
   1cbca:	e014      	b.n	1cbf6 <gen_hash_m+0x3c>
   1cbcc:	887b      	ldrh	r3, [r7, #2]
   1cbce:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1cbd2:	d004      	beq.n	1cbde <gen_hash_m+0x24>
   1cbd4:	d812      	bhi.n	1cbfc <gen_hash_m+0x42>
   1cbd6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1cbda:	2b03      	cmp	r3, #3
   1cbdc:	d8f4      	bhi.n	1cbc8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cbde:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cbe2:	2202      	movs	r2, #2
   1cbe4:	f10d 010a 	add.w	r1, sp, #10
   1cbe8:	4620      	mov	r0, r4
   1cbea:	f7fd fd4a 	bl	1a682 <tc_cmac_update>
   1cbee:	b9e0      	cbnz	r0, 1cc2a <gen_hash_m+0x70>
			state->err = -EINVAL;
   1cbf0:	f06f 0315 	mvn.w	r3, #21
   1cbf4:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1cbf6:	4628      	mov	r0, r5
   1cbf8:	b009      	add	sp, #36	; 0x24
   1cbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1cbfc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1cc00:	33ff      	adds	r3, #255	; 0xff
   1cc02:	b29b      	uxth	r3, r3
   1cc04:	2b04      	cmp	r3, #4
   1cc06:	d8df      	bhi.n	1cbc8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cc08:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc0c:	2202      	movs	r2, #2
   1cc0e:	f10d 010a 	add.w	r1, sp, #10
   1cc12:	4620      	mov	r0, r4
   1cc14:	f7fd fd35 	bl	1a682 <tc_cmac_update>
   1cc18:	2800      	cmp	r0, #0
   1cc1a:	d0e9      	beq.n	1cbf0 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1cc1c:	887b      	ldrh	r3, [r7, #2]
   1cc1e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc22:	2202      	movs	r2, #2
   1cc24:	f10d 010a 	add.w	r1, sp, #10
   1cc28:	e016      	b.n	1cc58 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   1cc2a:	887b      	ldrh	r3, [r7, #2]
   1cc2c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc30:	2202      	movs	r2, #2
   1cc32:	f10d 010a 	add.w	r1, sp, #10
   1cc36:	4620      	mov	r0, r4
   1cc38:	f7fd fd23 	bl	1a682 <tc_cmac_update>
   1cc3c:	2800      	cmp	r0, #0
   1cc3e:	d0d7      	beq.n	1cbf0 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1cc40:	2000      	movs	r0, #0
   1cc42:	aa03      	add	r2, sp, #12
   1cc44:	6877      	ldr	r7, [r6, #4]
   1cc46:	9000      	str	r0, [sp, #0]
   1cc48:	2313      	movs	r3, #19
   1cc4a:	4631      	mov	r1, r6
   1cc4c:	47b8      	blx	r7
		if (len < 0) {
   1cc4e:	1e02      	subs	r2, r0, #0
   1cc50:	da01      	bge.n	1cc56 <gen_hash_m+0x9c>
			state->err = len;
   1cc52:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1cc54:	e7cf      	b.n	1cbf6 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1cc56:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc58:	4620      	mov	r0, r4
   1cc5a:	f7fd fd12 	bl	1a682 <tc_cmac_update>
   1cc5e:	2800      	cmp	r0, #0
   1cc60:	d1b2      	bne.n	1cbc8 <gen_hash_m+0xe>
   1cc62:	e7c5      	b.n	1cbf0 <gen_hash_m+0x36>

0001cc64 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1cc64:	2207      	movs	r2, #7
   1cc66:	f7fd bdf4 	b.w	1a852 <memcpy>

0001cc6a <clear_cf_cfg>:
{
   1cc6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cc6c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cc6e:	2500      	movs	r5, #0
   1cc70:	4669      	mov	r1, sp
   1cc72:	3001      	adds	r0, #1
   1cc74:	9500      	str	r5, [sp, #0]
   1cc76:	f8cd 5003 	str.w	r5, [sp, #3]
   1cc7a:	f7ff fff3 	bl	1cc64 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1cc7e:	f104 0008 	add.w	r0, r4, #8
   1cc82:	2201      	movs	r2, #1
   1cc84:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cc86:	340c      	adds	r4, #12
   1cc88:	f7fd fdee 	bl	1a868 <memset>
   1cc8c:	f3bf 8f5b 	dmb	ish
   1cc90:	e854 3f00 	ldrex	r3, [r4]
   1cc94:	e844 5200 	strex	r2, r5, [r4]
   1cc98:	2a00      	cmp	r2, #0
   1cc9a:	d1f9      	bne.n	1cc90 <clear_cf_cfg+0x26>
   1cc9c:	f3bf 8f5b 	dmb	ish
}
   1cca0:	b003      	add	sp, #12
   1cca2:	bd30      	pop	{r4, r5, pc}

0001cca4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cca4:	2301      	movs	r3, #1
   1cca6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cca8:	f3bf 8f5b 	dmb	ish
   1ccac:	e850 2f00 	ldrex	r2, [r0]
   1ccb0:	431a      	orrs	r2, r3
   1ccb2:	e840 2100 	strex	r1, r2, [r0]
   1ccb6:	2900      	cmp	r1, #0
   1ccb8:	d1f8      	bne.n	1ccac <atomic_set_bit+0x8>
   1ccba:	f3bf 8f5b 	dmb	ish
}
   1ccbe:	4770      	bx	lr

0001ccc0 <cf_write>:
{
   1ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccc4:	4698      	mov	r8, r3
   1ccc6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1ccca:	2b01      	cmp	r3, #1
{
   1cccc:	4606      	mov	r6, r0
   1ccce:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1ccd0:	d830      	bhi.n	1cd34 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1ccd2:	4443      	add	r3, r8
   1ccd4:	2b01      	cmp	r3, #1
   1ccd6:	4645      	mov	r5, r8
   1ccd8:	dc2f      	bgt.n	1cd3a <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1ccda:	f7ea f9ab 	bl	7034 <find_cf_cfg>
	if (!cfg) {
   1ccde:	4604      	mov	r4, r0
   1cce0:	b918      	cbnz	r0, 1ccea <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1cce2:	f7ea f9a7 	bl	7034 <find_cf_cfg>
	if (!cfg) {
   1cce6:	4604      	mov	r4, r0
   1cce8:	b350      	cbz	r0, 1cd40 <cf_write+0x80>
{
   1ccea:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ccec:	f1b8 0f00 	cmp.w	r8, #0
   1ccf0:	d10e      	bne.n	1cd10 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ccf2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1ccf6:	1c60      	adds	r0, r4, #1
   1ccf8:	f7ff ffb4 	bl	1cc64 <bt_addr_le_copy>
	cfg->id = conn->id;
   1ccfc:	4620      	mov	r0, r4
   1ccfe:	7a33      	ldrb	r3, [r6, #8]
   1cd00:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1cd04:	2100      	movs	r1, #0
   1cd06:	f7ff ffcd 	bl	1cca4 <atomic_set_bit>
}
   1cd0a:	4628      	mov	r0, r5
   1cd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1cd10:	7a20      	ldrb	r0, [r4, #8]
   1cd12:	fa20 f301 	lsr.w	r3, r0, r1
   1cd16:	07da      	lsls	r2, r3, #31
   1cd18:	d503      	bpl.n	1cd22 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1cd1a:	783b      	ldrb	r3, [r7, #0]
   1cd1c:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1cd1e:	07db      	lsls	r3, r3, #31
   1cd20:	d511      	bpl.n	1cd46 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1cd22:	3101      	adds	r1, #1
   1cd24:	2903      	cmp	r1, #3
   1cd26:	d1e1      	bne.n	1ccec <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1cd28:	783b      	ldrb	r3, [r7, #0]
   1cd2a:	f003 0307 	and.w	r3, r3, #7
   1cd2e:	4318      	orrs	r0, r3
   1cd30:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1cd32:	e7de      	b.n	1ccf2 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cd34:	f06f 0506 	mvn.w	r5, #6
   1cd38:	e7e7      	b.n	1cd0a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1cd3a:	f06f 050c 	mvn.w	r5, #12
   1cd3e:	e7e4      	b.n	1cd0a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1cd40:	f06f 0510 	mvn.w	r5, #16
   1cd44:	e7e1      	b.n	1cd0a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1cd46:	f06f 0512 	mvn.w	r5, #18
   1cd4a:	e7de      	b.n	1cd0a <cf_write+0x4a>

0001cd4c <read_ppcp>:
{
   1cd4c:	b513      	push	{r0, r1, r4, lr}
   1cd4e:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1cd50:	2218      	movs	r2, #24
{
   1cd52:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1cd56:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1cd5a:	2228      	movs	r2, #40	; 0x28
   1cd5c:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1cd60:	2200      	movs	r2, #0
   1cd62:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1cd66:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1cd68:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1cd6c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cd70:	d80b      	bhi.n	1cd8a <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1cd72:	f1c1 0408 	rsb	r4, r1, #8
   1cd76:	429c      	cmp	r4, r3
   1cd78:	bfa8      	it	ge
   1cd7a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cd7c:	4622      	mov	r2, r4
   1cd7e:	4469      	add	r1, sp
   1cd80:	f7fd fd67 	bl	1a852 <memcpy>
}
   1cd84:	4620      	mov	r0, r4
   1cd86:	b002      	add	sp, #8
   1cd88:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cd8a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1cd8e:	e7f9      	b.n	1cd84 <read_ppcp+0x38>

0001cd90 <read_appearance>:
{
   1cd90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd92:	4615      	mov	r5, r2
   1cd94:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1cd98:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1cd9a:	f7fe f98a 	bl	1b0b2 <bt_get_appearance>
	if (offset > value_len) {
   1cd9e:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1cda0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1cda4:	d80e      	bhi.n	1cdc4 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1cda6:	f1c6 0402 	rsb	r4, r6, #2
   1cdaa:	42bc      	cmp	r4, r7
   1cdac:	bfa8      	it	ge
   1cdae:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cdb0:	f10d 0306 	add.w	r3, sp, #6
   1cdb4:	4622      	mov	r2, r4
   1cdb6:	1999      	adds	r1, r3, r6
   1cdb8:	4628      	mov	r0, r5
   1cdba:	f7fd fd4a 	bl	1a852 <memcpy>
}
   1cdbe:	4620      	mov	r0, r4
   1cdc0:	b003      	add	sp, #12
   1cdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cdc4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1cdc8:	e7f9      	b.n	1cdbe <read_appearance+0x2e>

0001cdca <read_name>:
{
   1cdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cdce:	4698      	mov	r8, r3
   1cdd0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1cdd4:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1cdd6:	f7e7 f999 	bl	410c <bt_get_name>
   1cdda:	4607      	mov	r7, r0
				 strlen(name));
   1cddc:	f7fd fd0c 	bl	1a7f8 <strlen>
	if (offset > value_len) {
   1cde0:	b283      	uxth	r3, r0
   1cde2:	42b3      	cmp	r3, r6
   1cde4:	d30c      	bcc.n	1ce00 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1cde6:	1b9c      	subs	r4, r3, r6
   1cde8:	4544      	cmp	r4, r8
   1cdea:	bfa8      	it	ge
   1cdec:	4644      	movge	r4, r8
   1cdee:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cdf0:	4622      	mov	r2, r4
   1cdf2:	19b9      	adds	r1, r7, r6
   1cdf4:	4628      	mov	r0, r5
   1cdf6:	f7fd fd2c 	bl	1a852 <memcpy>
}
   1cdfa:	4620      	mov	r0, r4
   1cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ce00:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ce04:	e7f9      	b.n	1cdfa <read_name+0x30>

0001ce06 <cf_read>:
{
   1ce06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ce08:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1ce0a:	2300      	movs	r3, #0
{
   1ce0c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1ce10:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ce14:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1ce16:	f7ea f90d 	bl	7034 <find_cf_cfg>
	if (cfg) {
   1ce1a:	b128      	cbz	r0, 1ce28 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1ce1c:	f100 0108 	add.w	r1, r0, #8
   1ce20:	2201      	movs	r2, #1
   1ce22:	a801      	add	r0, sp, #4
   1ce24:	f7fd fd15 	bl	1a852 <memcpy>
	if (offset > value_len) {
   1ce28:	2e01      	cmp	r6, #1
   1ce2a:	d80d      	bhi.n	1ce48 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1ce2c:	f1c6 0401 	rsb	r4, r6, #1
   1ce30:	42bc      	cmp	r4, r7
   1ce32:	bfa8      	it	ge
   1ce34:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ce36:	ab01      	add	r3, sp, #4
   1ce38:	4622      	mov	r2, r4
   1ce3a:	1999      	adds	r1, r3, r6
   1ce3c:	4628      	mov	r0, r5
   1ce3e:	f7fd fd08 	bl	1a852 <memcpy>
}
   1ce42:	4620      	mov	r0, r4
   1ce44:	b003      	add	sp, #12
   1ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ce48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1ce4c:	e7f9      	b.n	1ce42 <cf_read+0x3c>

0001ce4e <bt_gatt_attr_read_service>:
{
   1ce4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1ce50:	68c9      	ldr	r1, [r1, #12]
{
   1ce52:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1ce56:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1ce58:	780b      	ldrb	r3, [r1, #0]
{
   1ce5a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1ce5c:	b993      	cbnz	r3, 1ce84 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ce5e:	884b      	ldrh	r3, [r1, #2]
   1ce60:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1ce64:	2d02      	cmp	r5, #2
   1ce66:	d819      	bhi.n	1ce9c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1ce68:	f1c5 0202 	rsb	r2, r5, #2
   1ce6c:	4294      	cmp	r4, r2
   1ce6e:	bfa8      	it	ge
   1ce70:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ce72:	f10d 0306 	add.w	r3, sp, #6
   1ce76:	4622      	mov	r2, r4
   1ce78:	1959      	adds	r1, r3, r5
   1ce7a:	f7fd fcea 	bl	1a852 <memcpy>
}
   1ce7e:	4620      	mov	r0, r4
   1ce80:	b003      	add	sp, #12
   1ce82:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1ce84:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1ce86:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1ce8a:	d807      	bhi.n	1ce9c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1ce8c:	f1c5 0210 	rsb	r2, r5, #16
   1ce90:	4294      	cmp	r4, r2
   1ce92:	bfa8      	it	ge
   1ce94:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ce96:	4622      	mov	r2, r4
   1ce98:	4429      	add	r1, r5
   1ce9a:	e7ee      	b.n	1ce7a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ce9c:	f06f 0406 	mvn.w	r4, #6
   1cea0:	e7ed      	b.n	1ce7e <bt_gatt_attr_read_service+0x30>

0001cea2 <find_ccc_cfg>:
{
   1cea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cea4:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cea6:	1c4c      	adds	r4, r1, #1
   1cea8:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ceac:	1e67      	subs	r7, r4, #1
		if (conn) {
   1ceae:	b14e      	cbz	r6, 1cec4 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ceb0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1ceb4:	4622      	mov	r2, r4
   1ceb6:	4630      	mov	r0, r6
   1ceb8:	f7fe fcad 	bl	1b816 <bt_conn_is_peer_addr_le>
   1cebc:	b160      	cbz	r0, 1ced8 <find_ccc_cfg+0x36>
}
   1cebe:	4638      	mov	r0, r7
   1cec0:	b003      	add	sp, #12
   1cec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   1cec4:	2207      	movs	r2, #7
   1cec6:	4669      	mov	r1, sp
   1cec8:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ceca:	9600      	str	r6, [sp, #0]
   1cecc:	f8cd 6003 	str.w	r6, [sp, #3]
   1ced0:	f7fd fcae 	bl	1a830 <memcmp>
   1ced4:	2800      	cmp	r0, #0
   1ced6:	d0f2      	beq.n	1cebe <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ced8:	340a      	adds	r4, #10
   1ceda:	42ac      	cmp	r4, r5
   1cedc:	d1e6      	bne.n	1ceac <find_ccc_cfg+0xa>
	return NULL;
   1cede:	2700      	movs	r7, #0
   1cee0:	e7ed      	b.n	1cebe <find_ccc_cfg+0x1c>

0001cee2 <bt_gatt_attr_write_ccc>:
{
   1cee2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cee6:	461f      	mov	r7, r3
   1cee8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1ceec:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1cef0:	4606      	mov	r6, r0
   1cef2:	4688      	mov	r8, r1
	if (offset) {
   1cef4:	2b00      	cmp	r3, #0
   1cef6:	d141      	bne.n	1cf7c <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1cef8:	1e7b      	subs	r3, r7, #1
   1cefa:	2b01      	cmp	r3, #1
   1cefc:	d841      	bhi.n	1cf82 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1cefe:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1cf00:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1cf02:	4649      	mov	r1, r9
   1cf04:	bf14      	ite	ne
   1cf06:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   1cf08:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   1cf0a:	f7ff ffca 	bl	1cea2 <find_ccc_cfg>
	if (!cfg) {
   1cf0e:	4604      	mov	r4, r0
   1cf10:	b980      	cbnz	r0, 1cf34 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   1cf12:	b91d      	cbnz	r5, 1cf1c <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1cf14:	4638      	mov	r0, r7
}
   1cf16:	b003      	add	sp, #12
   1cf18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1cf1c:	4649      	mov	r1, r9
   1cf1e:	f7ff ffc0 	bl	1cea2 <find_ccc_cfg>
		if (!cfg) {
   1cf22:	4604      	mov	r4, r0
   1cf24:	b380      	cbz	r0, 1cf88 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cf26:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1cf2a:	3001      	adds	r0, #1
   1cf2c:	f7ff fe9a 	bl	1cc64 <bt_addr_le_copy>
		cfg->id = conn->id;
   1cf30:	7a33      	ldrb	r3, [r6, #8]
   1cf32:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1cf34:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1cf38:	b9a3      	cbnz	r3, 1cf64 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   1cf3a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   1cf3e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1cf40:	42ab      	cmp	r3, r5
   1cf42:	d003      	beq.n	1cf4c <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   1cf44:	4649      	mov	r1, r9
   1cf46:	4640      	mov	r0, r8
   1cf48:	f7ff fe12 	bl	1cb70 <gatt_ccc_changed>
	if (!value) {
   1cf4c:	2d00      	cmp	r5, #0
   1cf4e:	d1e1      	bne.n	1cf14 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cf50:	4669      	mov	r1, sp
   1cf52:	1c60      	adds	r0, r4, #1
   1cf54:	9500      	str	r5, [sp, #0]
   1cf56:	f8cd 5003 	str.w	r5, [sp, #3]
   1cf5a:	f7ff fe83 	bl	1cc64 <bt_addr_le_copy>
	cfg->id = 0U;
   1cf5e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cf60:	8125      	strh	r5, [r4, #8]
}
   1cf62:	e7d7      	b.n	1cf14 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1cf64:	462a      	mov	r2, r5
   1cf66:	4641      	mov	r1, r8
   1cf68:	4630      	mov	r0, r6
   1cf6a:	4798      	blx	r3
		if (write < 0) {
   1cf6c:	2800      	cmp	r0, #0
   1cf6e:	dbd2      	blt.n	1cf16 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1cf70:	3801      	subs	r0, #1
   1cf72:	2801      	cmp	r0, #1
   1cf74:	d9e1      	bls.n	1cf3a <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1cf76:	f06f 000d 	mvn.w	r0, #13
   1cf7a:	e7cc      	b.n	1cf16 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cf7c:	f06f 0006 	mvn.w	r0, #6
   1cf80:	e7c9      	b.n	1cf16 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1cf82:	f06f 000c 	mvn.w	r0, #12
   1cf86:	e7c6      	b.n	1cf16 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1cf88:	f06f 0010 	mvn.w	r0, #16
   1cf8c:	e7c3      	b.n	1cf16 <bt_gatt_attr_write_ccc+0x34>

0001cf8e <bt_gatt_attr_read_ccc>:
{
   1cf8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1cf90:	68c9      	ldr	r1, [r1, #12]
{
   1cf92:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1cf96:	4615      	mov	r5, r2
   1cf98:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1cf9a:	f7ff ff82 	bl	1cea2 <find_ccc_cfg>
	if (cfg) {
   1cf9e:	b100      	cbz	r0, 1cfa2 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1cfa0:	8900      	ldrh	r0, [r0, #8]
   1cfa2:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1cfa6:	2e02      	cmp	r6, #2
   1cfa8:	d80e      	bhi.n	1cfc8 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1cfaa:	f1c6 0402 	rsb	r4, r6, #2
   1cfae:	42bc      	cmp	r4, r7
   1cfb0:	bfa8      	it	ge
   1cfb2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cfb4:	f10d 0306 	add.w	r3, sp, #6
   1cfb8:	4622      	mov	r2, r4
   1cfba:	1999      	adds	r1, r3, r6
   1cfbc:	4628      	mov	r0, r5
   1cfbe:	f7fd fc48 	bl	1a852 <memcpy>
}
   1cfc2:	4620      	mov	r0, r4
   1cfc4:	b003      	add	sp, #12
   1cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cfc8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1cfcc:	e7f9      	b.n	1cfc2 <bt_gatt_attr_read_ccc+0x34>

0001cfce <sc_save>:
{
   1cfce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cfd2:	4680      	mov	r8, r0
   1cfd4:	460f      	mov	r7, r1
   1cfd6:	4616      	mov	r6, r2
   1cfd8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1cfda:	f7ea f84d 	bl	7078 <find_sc_cfg>
	if (!cfg) {
   1cfde:	4604      	mov	r4, r0
   1cfe0:	b960      	cbnz	r0, 1cffc <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1cfe2:	4669      	mov	r1, sp
   1cfe4:	9000      	str	r0, [sp, #0]
   1cfe6:	f8cd 0003 	str.w	r0, [sp, #3]
   1cfea:	f7ea f845 	bl	7078 <find_sc_cfg>
		if (!cfg) {
   1cfee:	4604      	mov	r4, r0
   1cff0:	b178      	cbz	r0, 1d012 <sc_save+0x44>
		cfg->id = id;
   1cff2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1cff6:	4639      	mov	r1, r7
   1cff8:	f7ff fe34 	bl	1cc64 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1cffc:	8922      	ldrh	r2, [r4, #8]
   1cffe:	8963      	ldrh	r3, [r4, #10]
   1d000:	b91a      	cbnz	r2, 1d00a <sc_save+0x3c>
   1d002:	b923      	cbnz	r3, 1d00e <sc_save+0x40>
		cfg->data.start = start;
   1d004:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1d006:	8165      	strh	r5, [r4, #10]
   1d008:	e003      	b.n	1d012 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1d00a:	4296      	cmp	r6, r2
   1d00c:	d304      	bcc.n	1d018 <sc_save+0x4a>
   1d00e:	429d      	cmp	r5, r3
   1d010:	d8f9      	bhi.n	1d006 <sc_save+0x38>
}
   1d012:	b002      	add	sp, #8
   1d014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1d018:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1d01a:	e7f8      	b.n	1d00e <sc_save+0x40>

0001d01c <sc_clear>:
{
   1d01c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d01e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1d022:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d024:	4631      	mov	r1, r6
   1d026:	7a00      	ldrb	r0, [r0, #8]
   1d028:	f7fe f845 	bl	1b0b6 <bt_addr_le_is_bonded>
   1d02c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1d02e:	4631      	mov	r1, r6
   1d030:	f7ea f822 	bl	7078 <find_sc_cfg>
	if (!cfg) {
   1d034:	b128      	cbz	r0, 1d042 <sc_clear+0x26>
}
   1d036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1d03a:	220c      	movs	r2, #12
   1d03c:	2100      	movs	r1, #0
   1d03e:	f7fd bc13 	b.w	1a868 <memset>
}
   1d042:	bd70      	pop	{r4, r5, r6, pc}

0001d044 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1d044:	2a02      	cmp	r2, #2
{
   1d046:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1d048:	d108      	bne.n	1d05c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1d04a:	2300      	movs	r3, #0
   1d04c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1d050:	461a      	mov	r2, r3
   1d052:	7a00      	ldrb	r0, [r0, #8]
   1d054:	f7ff ffbb 	bl	1cfce <sc_save>
}
   1d058:	2002      	movs	r0, #2
   1d05a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1d05c:	f7ff ffde 	bl	1d01c <sc_clear>
   1d060:	e7fa      	b.n	1d058 <sc_ccc_cfg_write+0x14>

0001d062 <sc_restore_rsp>:
{
   1d062:	b538      	push	{r3, r4, r5, lr}
   1d064:	4604      	mov	r4, r0
   1d066:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1d068:	f7ff fd51 	bl	1cb0e <bt_att_fixed_chan_only>
   1d06c:	b150      	cbz	r0, 1d084 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1d06e:	4620      	mov	r0, r4
   1d070:	f7e9 ffe0 	bl	7034 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d074:	b130      	cbz	r0, 1d084 <sc_restore_rsp+0x22>
   1d076:	7a03      	ldrb	r3, [r0, #8]
   1d078:	07db      	lsls	r3, r3, #31
   1d07a:	d503      	bpl.n	1d084 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d07c:	2100      	movs	r1, #0
   1d07e:	300c      	adds	r0, #12
   1d080:	f7ff fe10 	bl	1cca4 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1d084:	b965      	cbnz	r5, 1d0a0 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d086:	7a20      	ldrb	r0, [r4, #8]
   1d088:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1d08c:	f7e9 fff4 	bl	7078 <find_sc_cfg>
		if (sc_cfg) {
   1d090:	b130      	cbz	r0, 1d0a0 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1d092:	4629      	mov	r1, r5
   1d094:	2204      	movs	r2, #4
}
   1d096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1d09a:	3008      	adds	r0, #8
   1d09c:	f7fd bbe4 	b.w	1a868 <memset>
}
   1d0a0:	bd38      	pop	{r3, r4, r5, pc}

0001d0a2 <bt_gatt_attr_read>:
{
   1d0a2:	b538      	push	{r3, r4, r5, lr}
   1d0a4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d0a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1d0ac:	42a9      	cmp	r1, r5
{
   1d0ae:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d0b0:	d80b      	bhi.n	1d0ca <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d0b2:	1a6d      	subs	r5, r5, r1
   1d0b4:	429d      	cmp	r5, r3
   1d0b6:	bfa8      	it	ge
   1d0b8:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0ba:	9b05      	ldr	r3, [sp, #20]
   1d0bc:	b2ad      	uxth	r5, r5
   1d0be:	462a      	mov	r2, r5
   1d0c0:	4419      	add	r1, r3
   1d0c2:	f7fd fbc6 	bl	1a852 <memcpy>
}
   1d0c6:	4628      	mov	r0, r5
   1d0c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0ca:	f06f 0506 	mvn.w	r5, #6
   1d0ce:	e7fa      	b.n	1d0c6 <bt_gatt_attr_read+0x24>

0001d0d0 <bt_gatt_attr_value_handle>:
{
   1d0d0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d0d2:	4604      	mov	r4, r0
   1d0d4:	b910      	cbnz	r0, 1d0dc <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d0d6:	2000      	movs	r0, #0
}
   1d0d8:	b002      	add	sp, #8
   1d0da:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d0dc:	2300      	movs	r3, #0
   1d0de:	f88d 3004 	strb.w	r3, [sp, #4]
   1d0e2:	6800      	ldr	r0, [r0, #0]
   1d0e4:	f642 0303 	movw	r3, #10243	; 0x2803
   1d0e8:	a901      	add	r1, sp, #4
   1d0ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d0ee:	f7fd fc41 	bl	1a974 <bt_uuid_cmp>
   1d0f2:	2800      	cmp	r0, #0
   1d0f4:	d1ef      	bne.n	1d0d6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d0f6:	68e3      	ldr	r3, [r4, #12]
   1d0f8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d0fa:	2800      	cmp	r0, #0
   1d0fc:	d1ec      	bne.n	1d0d8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d0fe:	4620      	mov	r0, r4
   1d100:	f7ea f8d0 	bl	72a4 <bt_gatt_attr_get_handle>
   1d104:	3001      	adds	r0, #1
   1d106:	b280      	uxth	r0, r0
	return handle;
   1d108:	e7e6      	b.n	1d0d8 <bt_gatt_attr_value_handle+0x8>

0001d10a <bt_gatt_attr_read_chrc>:
{
   1d10a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d10c:	68cf      	ldr	r7, [r1, #12]
{
   1d10e:	b087      	sub	sp, #28
   1d110:	4608      	mov	r0, r1
   1d112:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1d114:	79bb      	ldrb	r3, [r7, #6]
   1d116:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d11a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1d11e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d120:	f7ff ffd6 	bl	1d0d0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d124:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d126:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d12a:	780b      	ldrb	r3, [r1, #0]
   1d12c:	b99b      	cbnz	r3, 1d156 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d12e:	884b      	ldrh	r3, [r1, #2]
   1d130:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1d134:	2105      	movs	r1, #5
	if (offset > value_len) {
   1d136:	42b1      	cmp	r1, r6
   1d138:	d315      	bcc.n	1d166 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d13a:	1b89      	subs	r1, r1, r6
   1d13c:	42a1      	cmp	r1, r4
   1d13e:	bfa8      	it	ge
   1d140:	4621      	movge	r1, r4
   1d142:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1d144:	ab01      	add	r3, sp, #4
   1d146:	4622      	mov	r2, r4
   1d148:	1999      	adds	r1, r3, r6
   1d14a:	4628      	mov	r0, r5
   1d14c:	f7fd fb81 	bl	1a852 <memcpy>
}
   1d150:	4620      	mov	r0, r4
   1d152:	b007      	add	sp, #28
   1d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d156:	3101      	adds	r1, #1
   1d158:	2210      	movs	r2, #16
   1d15a:	f10d 0007 	add.w	r0, sp, #7
   1d15e:	f7fd fb78 	bl	1a852 <memcpy>
		value_len += 16U;
   1d162:	2113      	movs	r1, #19
   1d164:	e7e7      	b.n	1d136 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d166:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d16a:	e7f1      	b.n	1d150 <bt_gatt_attr_read_chrc+0x46>

0001d16c <bt_gatt_foreach_attr>:
{
   1d16c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d16e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d172:	2300      	movs	r3, #0
   1d174:	9300      	str	r3, [sp, #0]
   1d176:	461a      	mov	r2, r3
   1d178:	f7ea f8c4 	bl	7304 <bt_gatt_foreach_attr_type>
}
   1d17c:	b005      	add	sp, #20
   1d17e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d182 <db_hash_process>:
	db_hash_gen(true);
   1d182:	f7ea b919 	b.w	73b8 <db_hash_gen.constprop.0>

0001d186 <bt_gatt_attr_read_cep>:
{
   1d186:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d188:	4610      	mov	r0, r2
   1d18a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   1d18e:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   1d190:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   1d192:	8812      	ldrh	r2, [r2, #0]
   1d194:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d198:	d80d      	bhi.n	1d1b6 <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   1d19a:	f1c5 0402 	rsb	r4, r5, #2
   1d19e:	429c      	cmp	r4, r3
   1d1a0:	bfa8      	it	ge
   1d1a2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d1a4:	f10d 0306 	add.w	r3, sp, #6
   1d1a8:	4622      	mov	r2, r4
   1d1aa:	1959      	adds	r1, r3, r5
   1d1ac:	f7fd fb51 	bl	1a852 <memcpy>
}
   1d1b0:	4620      	mov	r0, r4
   1d1b2:	b003      	add	sp, #12
   1d1b4:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d1b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   1d1ba:	e7f9      	b.n	1d1b0 <bt_gatt_attr_read_cep+0x2a>

0001d1bc <bt_gatt_check_perm>:
{
   1d1bc:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1d1be:	07d4      	lsls	r4, r2, #31
{
   1d1c0:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d1c2:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d1c4:	d504      	bpl.n	1d1d0 <bt_gatt_check_perm+0x14>
   1d1c6:	f010 0f15 	tst.w	r0, #21
   1d1ca:	d01e      	beq.n	1d20a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d1cc:	684b      	ldr	r3, [r1, #4]
   1d1ce:	b1e3      	cbz	r3, 1d20a <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d1d0:	0793      	lsls	r3, r2, #30
   1d1d2:	d504      	bpl.n	1d1de <bt_gatt_check_perm+0x22>
   1d1d4:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1d1d8:	d019      	beq.n	1d20e <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d1da:	688b      	ldr	r3, [r1, #8]
   1d1dc:	b1bb      	cbz	r3, 1d20e <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1d1de:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d1e2:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d1e6:	d103      	bne.n	1d1f0 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1d1e8:	f014 000c 	ands.w	r0, r4, #12
   1d1ec:	d107      	bne.n	1d1fe <bt_gatt_check_perm+0x42>
}
   1d1ee:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d1f0:	4628      	mov	r0, r5
   1d1f2:	f7fe fb0e 	bl	1b812 <bt_conn_get_security>
   1d1f6:	2802      	cmp	r0, #2
   1d1f8:	d8f6      	bhi.n	1d1e8 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1d1fa:	2005      	movs	r0, #5
   1d1fc:	e7f7      	b.n	1d1ee <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1d1fe:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d200:	2b00      	cmp	r3, #0
   1d202:	bf14      	ite	ne
   1d204:	2000      	movne	r0, #0
   1d206:	200f      	moveq	r0, #15
   1d208:	e7f1      	b.n	1d1ee <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d20a:	2002      	movs	r0, #2
   1d20c:	e7ef      	b.n	1d1ee <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d20e:	2003      	movs	r0, #3
   1d210:	e7ed      	b.n	1d1ee <bt_gatt_check_perm+0x32>

0001d212 <gatt_notify>:
{
   1d212:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d216:	4614      	mov	r4, r2
   1d218:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1d21a:	2214      	movs	r2, #20
   1d21c:	6861      	ldr	r1, [r4, #4]
{
   1d21e:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1d220:	f7ff ffcc 	bl	1d1bc <bt_gatt_check_perm>
   1d224:	bb20      	cbnz	r0, 1d270 <gatt_notify+0x5e>
				sizeof(*nfy) + params->len);
   1d226:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d228:	211b      	movs	r1, #27
   1d22a:	3202      	adds	r2, #2
   1d22c:	4638      	mov	r0, r7
   1d22e:	f7ff fb65 	bl	1c8fc <bt_att_create_pdu>
	if (!buf) {
   1d232:	4605      	mov	r5, r0
   1d234:	b300      	cbz	r0, 1d278 <gatt_notify+0x66>
   1d236:	f100 0908 	add.w	r9, r0, #8
   1d23a:	2102      	movs	r1, #2
   1d23c:	4648      	mov	r0, r9
   1d23e:	f000 fe64 	bl	1df0a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d242:	4606      	mov	r6, r0
   1d244:	89a1      	ldrh	r1, [r4, #12]
   1d246:	f826 8b02 	strh.w	r8, [r6], #2
   1d24a:	4648      	mov	r0, r9
   1d24c:	f000 fe5d 	bl	1df0a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1d250:	89a2      	ldrh	r2, [r4, #12]
   1d252:	68a1      	ldr	r1, [r4, #8]
   1d254:	4630      	mov	r0, r6
   1d256:	f7fd fafc 	bl	1a852 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data);
   1d25a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1d25e:	4628      	mov	r0, r5
   1d260:	f7ff fc7f 	bl	1cb62 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1d264:	4629      	mov	r1, r5
   1d266:	4638      	mov	r0, r7
}
   1d268:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1d26c:	f7ff bc01 	b.w	1ca72 <bt_att_send>
		return -EPERM;
   1d270:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOMEM;
   1d278:	f06f 000b 	mvn.w	r0, #11
   1d27c:	e7fa      	b.n	1d274 <gatt_notify+0x62>

0001d27e <bt_gatt_change_aware>:
{
   1d27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d282:	4606      	mov	r6, r0
   1d284:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1d286:	f7e9 fed5 	bl	7034 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d28a:	b918      	cbnz	r0, 1d294 <bt_gatt_change_aware+0x16>
		return true;
   1d28c:	2401      	movs	r4, #1
}
   1d28e:	4620      	mov	r0, r4
   1d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d294:	7a03      	ldrb	r3, [r0, #8]
   1d296:	07db      	lsls	r3, r3, #31
   1d298:	d5f8      	bpl.n	1d28c <bt_gatt_change_aware+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d29a:	f3bf 8f5b 	dmb	ish
   1d29e:	68c1      	ldr	r1, [r0, #12]
   1d2a0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d2a4:	f011 0801 	ands.w	r8, r1, #1
   1d2a8:	f100 050c 	add.w	r5, r0, #12
   1d2ac:	d1ee      	bne.n	1d28c <bt_gatt_change_aware+0xe>
	if (!req) {
   1d2ae:	b90c      	cbnz	r4, 1d2b4 <bt_gatt_change_aware+0x36>
		return false;
   1d2b0:	2400      	movs	r4, #0
   1d2b2:	e7ec      	b.n	1d28e <bt_gatt_change_aware+0x10>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d2b4:	f3bf 8f5b 	dmb	ish
   1d2b8:	e855 3f00 	ldrex	r3, [r5]
   1d2bc:	f023 0202 	bic.w	r2, r3, #2
   1d2c0:	e845 2100 	strex	r1, r2, [r5]
   1d2c4:	2900      	cmp	r1, #0
   1d2c6:	d1f7      	bne.n	1d2b8 <bt_gatt_change_aware+0x3a>
   1d2c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d2cc:	f013 0702 	ands.w	r7, r3, #2
		bt_att_clear_out_of_sync_sent(conn);
   1d2d0:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d2d2:	d006      	beq.n	1d2e2 <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   1d2d4:	f7ff fc1d 	bl	1cb12 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d2d8:	4641      	mov	r1, r8
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d2da:	4628      	mov	r0, r5
   1d2dc:	f7ff fce2 	bl	1cca4 <atomic_set_bit>
		return true;
   1d2e0:	e7d5      	b.n	1d28e <bt_gatt_change_aware+0x10>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1d2e2:	f7ff fc14 	bl	1cb0e <bt_att_fixed_chan_only>
   1d2e6:	2800      	cmp	r0, #0
   1d2e8:	d0e2      	beq.n	1d2b0 <bt_gatt_change_aware+0x32>
   1d2ea:	4630      	mov	r0, r6
   1d2ec:	f7ff fc2b 	bl	1cb46 <bt_att_out_of_sync_sent_on_fixed>
   1d2f0:	4604      	mov	r4, r0
   1d2f2:	2800      	cmp	r0, #0
   1d2f4:	d0dc      	beq.n	1d2b0 <bt_gatt_change_aware+0x32>
   1d2f6:	f3bf 8f5b 	dmb	ish
   1d2fa:	e855 3f00 	ldrex	r3, [r5]
   1d2fe:	f023 0302 	bic.w	r3, r3, #2
   1d302:	e845 3200 	strex	r2, r3, [r5]
   1d306:	2a00      	cmp	r2, #0
   1d308:	d1f7      	bne.n	1d2fa <bt_gatt_change_aware+0x7c>
   1d30a:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   1d30e:	4630      	mov	r0, r6
   1d310:	f7ff fbff 	bl	1cb12 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d314:	4639      	mov	r1, r7
   1d316:	e7e0      	b.n	1d2da <bt_gatt_change_aware+0x5c>

0001d318 <sys_memcpy_swap>:
	psrc += length - 1;
   1d318:	1e53      	subs	r3, r2, #1
   1d31a:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1d31c:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1d31e:	f811 3901 	ldrb.w	r3, [r1], #-1
   1d322:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1d326:	4290      	cmp	r0, r2
   1d328:	d1f9      	bne.n	1d31e <sys_memcpy_swap+0x6>
}
   1d32a:	4770      	bx	lr

0001d32c <smp_pairing_rsp>:
}
   1d32c:	2007      	movs	r0, #7
   1d32e:	4770      	bx	lr

0001d330 <smp_chan_get>:
{
   1d330:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1d332:	2106      	movs	r1, #6
   1d334:	f7fe fd81 	bl	1be3a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1d338:	b100      	cbz	r0, 1d33c <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1d33a:	38f0      	subs	r0, #240	; 0xf0
}
   1d33c:	bd08      	pop	{r3, pc}

0001d33e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d33e:	f3bf 8f5b 	dmb	ish
   1d342:	6800      	ldr	r0, [r0, #0]
   1d344:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d348:	4108      	asrs	r0, r1
}
   1d34a:	f000 0001 	and.w	r0, r0, #1
   1d34e:	4770      	bx	lr

0001d350 <update_keys_check>:
{
   1d350:	b510      	push	{r4, lr}
   1d352:	4603      	mov	r3, r0
	if (!keys ||
   1d354:	b1d9      	cbz	r1, 1d38e <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1d356:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1d358:	f010 0f24 	tst.w	r0, #36	; 0x24
   1d35c:	d017      	beq.n	1d38e <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d35e:	7d1a      	ldrb	r2, [r3, #20]
   1d360:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1d362:	7b09      	ldrb	r1, [r1, #12]
   1d364:	42a2      	cmp	r2, r4
   1d366:	bf28      	it	cs
   1d368:	4622      	movcs	r2, r4
   1d36a:	4291      	cmp	r1, r2
   1d36c:	d901      	bls.n	1d372 <update_keys_check+0x22>
		return false;
   1d36e:	2000      	movs	r0, #0
}
   1d370:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1d372:	0682      	lsls	r2, r0, #26
   1d374:	d404      	bmi.n	1d380 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d376:	7a18      	ldrb	r0, [r3, #8]
   1d378:	3800      	subs	r0, #0
   1d37a:	bf18      	it	ne
   1d37c:	2001      	movne	r0, #1
   1d37e:	e7f7      	b.n	1d370 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d380:	2105      	movs	r1, #5
   1d382:	1d18      	adds	r0, r3, #4
   1d384:	f7ff ffdb 	bl	1d33e <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1d388:	2800      	cmp	r0, #0
   1d38a:	d1f4      	bne.n	1d376 <update_keys_check+0x26>
   1d38c:	e7ef      	b.n	1d36e <update_keys_check+0x1e>
		return true;
   1d38e:	2001      	movs	r0, #1
   1d390:	e7ee      	b.n	1d370 <update_keys_check+0x20>

0001d392 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d392:	2301      	movs	r3, #1
   1d394:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d396:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d398:	f3bf 8f5b 	dmb	ish
   1d39c:	e850 2f00 	ldrex	r2, [r0]
   1d3a0:	401a      	ands	r2, r3
   1d3a2:	e840 2100 	strex	r1, r2, [r0]
   1d3a6:	2900      	cmp	r1, #0
   1d3a8:	d1f8      	bne.n	1d39c <atomic_clear_bit+0xa>
   1d3aa:	f3bf 8f5b 	dmb	ish
}
   1d3ae:	4770      	bx	lr

0001d3b0 <bt_smp_aes_cmac>:
{
   1d3b0:	b570      	push	{r4, r5, r6, lr}
   1d3b2:	b0c2      	sub	sp, #264	; 0x108
   1d3b4:	460d      	mov	r5, r1
   1d3b6:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d3b8:	4601      	mov	r1, r0
   1d3ba:	aa16      	add	r2, sp, #88	; 0x58
   1d3bc:	4668      	mov	r0, sp
{
   1d3be:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d3c0:	f7fd f934 	bl	1a62c <tc_cmac_setup>
   1d3c4:	b150      	cbz	r0, 1d3dc <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1d3c6:	4632      	mov	r2, r6
   1d3c8:	4629      	mov	r1, r5
   1d3ca:	4668      	mov	r0, sp
   1d3cc:	f7fd f959 	bl	1a682 <tc_cmac_update>
   1d3d0:	b120      	cbz	r0, 1d3dc <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1d3d2:	4669      	mov	r1, sp
   1d3d4:	4620      	mov	r0, r4
   1d3d6:	f7fd f9bf 	bl	1a758 <tc_cmac_final>
   1d3da:	b918      	cbnz	r0, 1d3e4 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1d3dc:	f06f 0004 	mvn.w	r0, #4
}
   1d3e0:	b042      	add	sp, #264	; 0x108
   1d3e2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1d3e4:	2000      	movs	r0, #0
   1d3e6:	e7fb      	b.n	1d3e0 <bt_smp_aes_cmac+0x30>

0001d3e8 <smp_security_request>:
   1d3e8:	2007      	movs	r0, #7
   1d3ea:	4770      	bx	lr

0001d3ec <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1d3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d3ee:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1d3f0:	2200      	movs	r2, #0
   1d3f2:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1d3f4:	4604      	mov	r4, r0
   1d3f6:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1d3f8:	460a      	mov	r2, r1
   1d3fa:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   1d3fe:	2106      	movs	r1, #6
   1d400:	f7fe fba1 	bl	1bb46 <bt_l2cap_send_cb>
   1d404:	b128      	cbz	r0, 1d412 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   1d406:	4628      	mov	r0, r5
}
   1d408:	b003      	add	sp, #12
   1d40a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1d40e:	f7f8 bc81 	b.w	15d14 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1d412:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d416:	2300      	movs	r3, #0
   1d418:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
}
   1d41c:	b003      	add	sp, #12
   1d41e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1d422:	f7fa bfa1 	b.w	18368 <k_work_reschedule>

0001d426 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1d426:	b510      	push	{r4, lr}
   1d428:	1e43      	subs	r3, r0, #1
   1d42a:	f100 0210 	add.w	r2, r0, #16
   1d42e:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1d430:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d434:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d438:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1d43a:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1d43c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1d43e:	d1f7      	bne.n	1d430 <sys_mem_swap.constprop.0+0xa>
	}
}
   1d440:	bd10      	pop	{r4, pc}

0001d442 <smp_f6>:
{
   1d442:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d444:	b097      	sub	sp, #92	; 0x5c
   1d446:	4605      	mov	r5, r0
   1d448:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1d44a:	a805      	add	r0, sp, #20
   1d44c:	2210      	movs	r2, #16
{
   1d44e:	461c      	mov	r4, r3
   1d450:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1d452:	f7ff ff61 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1d456:	2210      	movs	r2, #16
   1d458:	4631      	mov	r1, r6
   1d45a:	a809      	add	r0, sp, #36	; 0x24
   1d45c:	f7ff ff5c 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1d460:	4621      	mov	r1, r4
   1d462:	2210      	movs	r2, #16
   1d464:	a80d      	add	r0, sp, #52	; 0x34
   1d466:	f7ff ff57 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1d46a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1d46c:	2203      	movs	r2, #3
   1d46e:	a811      	add	r0, sp, #68	; 0x44
   1d470:	f7ff ff52 	bl	1d318 <sys_memcpy_swap>
	m[51] = a1->type;
   1d474:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1d476:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d47a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1d47e:	4621      	mov	r1, r4
   1d480:	2206      	movs	r2, #6
   1d482:	a812      	add	r0, sp, #72	; 0x48
   1d484:	f7fd f9e5 	bl	1a852 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1d488:	4621      	mov	r1, r4
   1d48a:	2206      	movs	r2, #6
   1d48c:	a812      	add	r0, sp, #72	; 0x48
   1d48e:	f7ff ff43 	bl	1d318 <sys_memcpy_swap>
	m[58] = a2->type;
   1d492:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1d494:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d498:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1d49c:	4621      	mov	r1, r4
   1d49e:	2206      	movs	r2, #6
   1d4a0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1d4a4:	f7fd f9d5 	bl	1a852 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1d4a8:	4621      	mov	r1, r4
   1d4aa:	2206      	movs	r2, #6
   1d4ac:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1d4b0:	f7ff ff32 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1d4b4:	2210      	movs	r2, #16
   1d4b6:	4629      	mov	r1, r5
   1d4b8:	a801      	add	r0, sp, #4
   1d4ba:	f7ff ff2d 	bl	1d318 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1d4be:	463b      	mov	r3, r7
   1d4c0:	2241      	movs	r2, #65	; 0x41
   1d4c2:	a905      	add	r1, sp, #20
   1d4c4:	a801      	add	r0, sp, #4
   1d4c6:	f7ff ff73 	bl	1d3b0 <bt_smp_aes_cmac>
	if (err) {
   1d4ca:	4604      	mov	r4, r0
   1d4cc:	b910      	cbnz	r0, 1d4d4 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1d4ce:	4638      	mov	r0, r7
   1d4d0:	f7ff ffa9 	bl	1d426 <sys_mem_swap.constprop.0>
}
   1d4d4:	4620      	mov	r0, r4
   1d4d6:	b017      	add	sp, #92	; 0x5c
   1d4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d4da <smp_f4>:
{
   1d4da:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4dc:	b097      	sub	sp, #92	; 0x5c
   1d4de:	4614      	mov	r4, r2
   1d4e0:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1d4e2:	2220      	movs	r2, #32
   1d4e4:	4601      	mov	r1, r0
   1d4e6:	a805      	add	r0, sp, #20
{
   1d4e8:	461d      	mov	r5, r3
   1d4ea:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1d4ec:	f7ff ff14 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1d4f0:	2220      	movs	r2, #32
   1d4f2:	4631      	mov	r1, r6
   1d4f4:	a80d      	add	r0, sp, #52	; 0x34
   1d4f6:	f7ff ff0f 	bl	1d318 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1d4fa:	4621      	mov	r1, r4
   1d4fc:	2210      	movs	r2, #16
   1d4fe:	a801      	add	r0, sp, #4
	m[64] = z;
   1d500:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1d504:	f7ff ff08 	bl	1d318 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1d508:	463b      	mov	r3, r7
   1d50a:	2241      	movs	r2, #65	; 0x41
   1d50c:	a905      	add	r1, sp, #20
   1d50e:	a801      	add	r0, sp, #4
   1d510:	f7ff ff4e 	bl	1d3b0 <bt_smp_aes_cmac>
	if (err) {
   1d514:	4604      	mov	r4, r0
   1d516:	b910      	cbnz	r0, 1d51e <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1d518:	4638      	mov	r0, r7
   1d51a:	f7ff ff84 	bl	1d426 <sys_mem_swap.constprop.0>
}
   1d51e:	4620      	mov	r0, r4
   1d520:	b017      	add	sp, #92	; 0x5c
   1d522:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d524 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d524:	2301      	movs	r3, #1
   1d526:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d528:	f3bf 8f5b 	dmb	ish
   1d52c:	e850 2f00 	ldrex	r2, [r0]
   1d530:	431a      	orrs	r2, r3
   1d532:	e840 2100 	strex	r1, r2, [r0]
   1d536:	2900      	cmp	r1, #0
   1d538:	d1f8      	bne.n	1d52c <atomic_set_bit+0x8>
   1d53a:	f3bf 8f5b 	dmb	ish
}
   1d53e:	4770      	bx	lr

0001d540 <smp_keypress_notif>:
{
   1d540:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d542:	210e      	movs	r1, #14
   1d544:	f7ff ffee 	bl	1d524 <atomic_set_bit>
}
   1d548:	2000      	movs	r0, #0
   1d54a:	bd08      	pop	{r3, pc}

0001d54c <smp_ident_info>:
{
   1d54c:	b538      	push	{r3, r4, r5, lr}
   1d54e:	4604      	mov	r4, r0
   1d550:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d552:	3004      	adds	r0, #4
   1d554:	210d      	movs	r1, #13
   1d556:	f7ff fef2 	bl	1d33e <atomic_test_bit>
   1d55a:	b170      	cbz	r0, 1d57a <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1d55c:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d55e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d562:	2002      	movs	r0, #2
   1d564:	7a19      	ldrb	r1, [r3, #8]
   1d566:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1d56a:	f000 fc49 	bl	1de00 <bt_keys_get_type>
		if (!keys) {
   1d56e:	b150      	cbz	r0, 1d586 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   1d570:	2210      	movs	r2, #16
   1d572:	4629      	mov	r1, r5
   1d574:	302a      	adds	r0, #42	; 0x2a
   1d576:	f7fd f96c 	bl	1a852 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1d57a:	4620      	mov	r0, r4
   1d57c:	2109      	movs	r1, #9
   1d57e:	f7ff ffd1 	bl	1d524 <atomic_set_bit>
	return 0;
   1d582:	2000      	movs	r0, #0
}
   1d584:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1d586:	2008      	movs	r0, #8
   1d588:	e7fc      	b.n	1d584 <smp_ident_info+0x38>

0001d58a <smp_encrypt_info>:
{
   1d58a:	b538      	push	{r3, r4, r5, lr}
   1d58c:	4604      	mov	r4, r0
   1d58e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d590:	3004      	adds	r0, #4
   1d592:	210d      	movs	r1, #13
   1d594:	f7ff fed3 	bl	1d33e <atomic_test_bit>
   1d598:	b170      	cbz	r0, 1d5b8 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1d59a:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d59c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d5a0:	2004      	movs	r0, #4
   1d5a2:	7a19      	ldrb	r1, [r3, #8]
   1d5a4:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1d5a8:	f000 fc2a 	bl	1de00 <bt_keys_get_type>
		if (!keys) {
   1d5ac:	b150      	cbz	r0, 1d5c4 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   1d5ae:	2210      	movs	r2, #16
   1d5b0:	4629      	mov	r1, r5
   1d5b2:	301a      	adds	r0, #26
   1d5b4:	f7fd f94d 	bl	1a852 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1d5b8:	4620      	mov	r0, r4
   1d5ba:	2107      	movs	r1, #7
   1d5bc:	f7ff ffb2 	bl	1d524 <atomic_set_bit>
	return 0;
   1d5c0:	2000      	movs	r0, #0
}
   1d5c2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1d5c4:	2008      	movs	r0, #8
   1d5c6:	e7fc      	b.n	1d5c2 <smp_encrypt_info+0x38>

0001d5c8 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1d5c8:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d5ca:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1d5cc:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d5ce:	4628      	mov	r0, r5
   1d5d0:	2104      	movs	r1, #4
   1d5d2:	f7ff feb4 	bl	1d33e <atomic_test_bit>
   1d5d6:	b970      	cbnz	r0, 1d5f6 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   1d5d8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d5dc:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   1d5de:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d5e0:	4608      	mov	r0, r1
   1d5e2:	f7fe faad 	bl	1bb40 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1d5e6:	4604      	mov	r4, r0
   1d5e8:	b938      	cbnz	r0, 1d5fa <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d5ea:	2104      	movs	r1, #4
   1d5ec:	4628      	mov	r0, r5
   1d5ee:	f7ff ff99 	bl	1d524 <atomic_set_bit>
}
   1d5f2:	4620      	mov	r0, r4
   1d5f4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   1d5f6:	2200      	movs	r2, #0
   1d5f8:	e7f0      	b.n	1d5dc <smp_create_pdu.constprop.0+0x14>
   1d5fa:	2101      	movs	r1, #1
   1d5fc:	3008      	adds	r0, #8
   1d5fe:	f000 fc84 	bl	1df0a <net_buf_simple_add>
	hdr->code = op;
   1d602:	7006      	strb	r6, [r0, #0]
	return buf;
   1d604:	e7f5      	b.n	1d5f2 <smp_create_pdu.constprop.0+0x2a>

0001d606 <send_pairing_rsp>:
{
   1d606:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1d608:	2102      	movs	r1, #2
{
   1d60a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1d60c:	f7ff ffdc 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1d610:	4604      	mov	r4, r0
   1d612:	b178      	cbz	r0, 1d634 <send_pairing_rsp+0x2e>
   1d614:	2106      	movs	r1, #6
   1d616:	3008      	adds	r0, #8
   1d618:	f000 fc77 	bl	1df0a <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1d61c:	2206      	movs	r2, #6
   1d61e:	f105 0111 	add.w	r1, r5, #17
   1d622:	f7fd f916 	bl	1a852 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1d626:	4628      	mov	r0, r5
   1d628:	2200      	movs	r2, #0
   1d62a:	4621      	mov	r1, r4
   1d62c:	f7ff fede 	bl	1d3ec <smp_send.constprop.0>
	return 0;
   1d630:	2000      	movs	r0, #0
}
   1d632:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d634:	2008      	movs	r0, #8
   1d636:	e7fc      	b.n	1d632 <send_pairing_rsp+0x2c>

0001d638 <smp_send_pairing_random>:
{
   1d638:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1d63a:	2104      	movs	r1, #4
{
   1d63c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1d63e:	f7ff ffc3 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1d642:	4604      	mov	r4, r0
   1d644:	b178      	cbz	r0, 1d666 <smp_send_pairing_random+0x2e>
   1d646:	2110      	movs	r1, #16
   1d648:	3008      	adds	r0, #8
   1d64a:	f000 fc5e 	bl	1df0a <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1d64e:	2210      	movs	r2, #16
   1d650:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1d654:	f7fd f8fd 	bl	1a852 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1d658:	4628      	mov	r0, r5
   1d65a:	2200      	movs	r2, #0
   1d65c:	4621      	mov	r1, r4
   1d65e:	f7ff fec5 	bl	1d3ec <smp_send.constprop.0>
	return 0;
   1d662:	2000      	movs	r0, #0
}
   1d664:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d666:	2008      	movs	r0, #8
   1d668:	e7fc      	b.n	1d664 <smp_send_pairing_random+0x2c>

0001d66a <smp_dhkey_check>:
{
   1d66a:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1d66c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1d670:	78db      	ldrb	r3, [r3, #3]
   1d672:	2b01      	cmp	r3, #1
{
   1d674:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   1d676:	d114      	bne.n	1d6a2 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1d678:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1d67a:	1d05      	adds	r5, r0, #4
   1d67c:	2110      	movs	r1, #16
   1d67e:	4628      	mov	r0, r5
   1d680:	f7ff fe87 	bl	1d392 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1d684:	4631      	mov	r1, r6
   1d686:	2210      	movs	r2, #16
   1d688:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1d68c:	f7fd f8e1 	bl	1a852 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1d690:	2107      	movs	r1, #7
   1d692:	4628      	mov	r0, r5
   1d694:	f7ff fe53 	bl	1d33e <atomic_test_bit>
   1d698:	b128      	cbz	r0, 1d6a6 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d69a:	2109      	movs	r1, #9
   1d69c:	4628      	mov	r0, r5
   1d69e:	f7ff ff41 	bl	1d524 <atomic_set_bit>
}
   1d6a2:	2000      	movs	r0, #0
   1d6a4:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d6a6:	210a      	movs	r1, #10
   1d6a8:	4628      	mov	r0, r5
   1d6aa:	f7ff fe48 	bl	1d33e <atomic_test_bit>
   1d6ae:	2800      	cmp	r0, #0
   1d6b0:	d1f3      	bne.n	1d69a <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   1d6b2:	4620      	mov	r0, r4
}
   1d6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   1d6b8:	f7ea bd46 	b.w	8148 <compute_and_check_and_send_periph_dhcheck>

0001d6bc <smp_signing_info>:
   1d6bc:	2007      	movs	r0, #7
   1d6be:	4770      	bx	lr

0001d6c0 <atomic_test_and_clear_bit>:
{
   1d6c0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d6c2:	2301      	movs	r3, #1
   1d6c4:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d6c8:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d6ca:	f3bf 8f5b 	dmb	ish
   1d6ce:	e850 3f00 	ldrex	r3, [r0]
   1d6d2:	ea03 0c02 	and.w	ip, r3, r2
   1d6d6:	e840 ce00 	strex	lr, ip, [r0]
   1d6da:	f1be 0f00 	cmp.w	lr, #0
   1d6de:	d1f6      	bne.n	1d6ce <atomic_test_and_clear_bit+0xe>
   1d6e0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1d6e4:	420b      	tst	r3, r1
}
   1d6e6:	bf14      	ite	ne
   1d6e8:	2001      	movne	r0, #1
   1d6ea:	2000      	moveq	r0, #0
   1d6ec:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6f0 <smp_reset>:
{
   1d6f0:	b538      	push	{r3, r4, r5, lr}
   1d6f2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d6f4:	1d03      	adds	r3, r0, #4
   1d6f6:	2500      	movs	r5, #0
   1d6f8:	f3bf 8f5b 	dmb	ish
   1d6fc:	e853 2f00 	ldrex	r2, [r3]
   1d700:	e843 5100 	strex	r1, r5, [r3]
   1d704:	2900      	cmp	r1, #0
   1d706:	d1f9      	bne.n	1d6fc <smp_reset+0xc>
   1d708:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   1d70c:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   1d710:	f001 f9ab 	bl	1ea6a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1d714:	7225      	strb	r5, [r4, #8]
   1d716:	f3bf 8f5b 	dmb	ish
   1d71a:	e854 3f00 	ldrex	r3, [r4]
   1d71e:	e844 5200 	strex	r2, r5, [r4]
   1d722:	2a00      	cmp	r2, #0
   1d724:	d1f9      	bne.n	1d71a <smp_reset+0x2a>
   1d726:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d72a:	4620      	mov	r0, r4
   1d72c:	2101      	movs	r1, #1
}
   1d72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1d732:	f7ff bef7 	b.w	1d524 <atomic_set_bit>

0001d736 <smp_c1>:
{
   1d736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d73a:	b089      	sub	sp, #36	; 0x24
   1d73c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1d740:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1d742:	783b      	ldrb	r3, [r7, #0]
{
   1d744:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1d746:	f88d 3000 	strb.w	r3, [sp]
{
   1d74a:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1d74c:	f898 3000 	ldrb.w	r3, [r8]
   1d750:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1d754:	4611      	mov	r1, r2
   1d756:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1d758:	2207      	movs	r2, #7
   1d75a:	f10d 0002 	add.w	r0, sp, #2
   1d75e:	f7fd f878 	bl	1a852 <memcpy>
	memcpy(p1 + 9, pres, 7);
   1d762:	2207      	movs	r2, #7
   1d764:	4649      	mov	r1, r9
   1d766:	f10d 0009 	add.w	r0, sp, #9
   1d76a:	f7fd f872 	bl	1a852 <memcpy>
	while (len--) {
   1d76e:	f104 0010 	add.w	r0, r4, #16
   1d772:	4629      	mov	r1, r5
   1d774:	466a      	mov	r2, sp
   1d776:	42a0      	cmp	r0, r4
   1d778:	d127      	bne.n	1d7ca <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1d77a:	462a      	mov	r2, r5
   1d77c:	4629      	mov	r1, r5
   1d77e:	4630      	mov	r0, r6
   1d780:	f7ee f976 	bl	ba70 <bt_encrypt_le>
	if (err) {
   1d784:	4604      	mov	r4, r0
   1d786:	b9e0      	cbnz	r0, 1d7c2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1d788:	2206      	movs	r2, #6
   1d78a:	f108 0101 	add.w	r1, r8, #1
   1d78e:	a804      	add	r0, sp, #16
   1d790:	f7fd f85f 	bl	1a852 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1d794:	2206      	movs	r2, #6
   1d796:	1c79      	adds	r1, r7, #1
   1d798:	f10d 0016 	add.w	r0, sp, #22
   1d79c:	f7fd f859 	bl	1a852 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1d7a0:	2204      	movs	r2, #4
   1d7a2:	4621      	mov	r1, r4
   1d7a4:	a807      	add	r0, sp, #28
   1d7a6:	f7fd f85f 	bl	1a868 <memset>
	while (len--) {
   1d7aa:	f105 0010 	add.w	r0, r5, #16
   1d7ae:	462a      	mov	r2, r5
   1d7b0:	ab04      	add	r3, sp, #16
   1d7b2:	4282      	cmp	r2, r0
   1d7b4:	d112      	bne.n	1d7dc <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1d7b6:	462a      	mov	r2, r5
   1d7b8:	4629      	mov	r1, r5
   1d7ba:	4630      	mov	r0, r6
   1d7bc:	f7ee f958 	bl	ba70 <bt_encrypt_le>
   1d7c0:	4604      	mov	r4, r0
}
   1d7c2:	4620      	mov	r0, r4
   1d7c4:	b009      	add	sp, #36	; 0x24
   1d7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1d7ca:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d7ce:	f812 cb01 	ldrb.w	ip, [r2], #1
   1d7d2:	ea83 030c 	eor.w	r3, r3, ip
   1d7d6:	f801 3b01 	strb.w	r3, [r1], #1
   1d7da:	e7cc      	b.n	1d776 <smp_c1+0x40>
   1d7dc:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d7e0:	f813 4b01 	ldrb.w	r4, [r3], #1
   1d7e4:	4061      	eors	r1, r4
   1d7e6:	f802 1c01 	strb.w	r1, [r2, #-1]
   1d7ea:	e7e2      	b.n	1d7b2 <smp_c1+0x7c>

0001d7ec <legacy_pairing_confirm>:
{
   1d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d7ee:	1d07      	adds	r7, r0, #4
{
   1d7f0:	b085      	sub	sp, #20
   1d7f2:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d7f4:	210a      	movs	r1, #10
   1d7f6:	4638      	mov	r0, r7
   1d7f8:	f7ff fda1 	bl	1d33e <atomic_test_bit>
   1d7fc:	bb88      	cbnz	r0, 1d862 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   1d7fe:	2104      	movs	r1, #4
   1d800:	4628      	mov	r0, r5
   1d802:	f7ff fe8f 	bl	1d524 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d806:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   1d808:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d80c:	f7ff fedc 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1d810:	4606      	mov	r6, r0
   1d812:	b1c0      	cbz	r0, 1d846 <legacy_pairing_confirm+0x5a>
   1d814:	2110      	movs	r1, #16
   1d816:	3008      	adds	r0, #8
   1d818:	f000 fb77 	bl	1df0a <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1d81c:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1d820:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1d822:	9002      	str	r0, [sp, #8]
   1d824:	9301      	str	r3, [sp, #4]
   1d826:	9400      	str	r4, [sp, #0]
   1d828:	f105 0310 	add.w	r3, r5, #16
   1d82c:	f105 0209 	add.w	r2, r5, #9
   1d830:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1d834:	f105 0047 	add.w	r0, r5, #71	; 0x47
   1d838:	f7ff ff7d 	bl	1d736 <smp_c1>
   1d83c:	4604      	mov	r4, r0
   1d83e:	b120      	cbz	r0, 1d84a <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   1d840:	4630      	mov	r0, r6
   1d842:	f7f8 fa67 	bl	15d14 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d846:	2008      	movs	r0, #8
   1d848:	e009      	b.n	1d85e <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   1d84a:	4602      	mov	r2, r0
   1d84c:	4631      	mov	r1, r6
   1d84e:	4628      	mov	r0, r5
   1d850:	f7ff fdcc 	bl	1d3ec <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d854:	4621      	mov	r1, r4
   1d856:	4638      	mov	r0, r7
   1d858:	f7ff fd9b 	bl	1d392 <atomic_clear_bit>
	return 0;
   1d85c:	2000      	movs	r0, #0
}
   1d85e:	b005      	add	sp, #20
   1d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d862:	2100      	movs	r1, #0
   1d864:	4638      	mov	r0, r7
   1d866:	f7ff fe5d 	bl	1d524 <atomic_set_bit>
   1d86a:	e7f7      	b.n	1d85c <legacy_pairing_confirm+0x70>

0001d86c <smp_pairing_confirm>:
{
   1d86c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1d86e:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d870:	1d05      	adds	r5, r0, #4
{
   1d872:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d874:	210b      	movs	r1, #11
   1d876:	4628      	mov	r0, r5
   1d878:	f7ff fd8b 	bl	1d392 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1d87c:	4631      	mov	r1, r6
   1d87e:	2210      	movs	r2, #16
   1d880:	f104 0017 	add.w	r0, r4, #23
   1d884:	f7fc ffe5 	bl	1a852 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d888:	2105      	movs	r1, #5
   1d88a:	4628      	mov	r0, r5
   1d88c:	f7ff fd57 	bl	1d33e <atomic_test_bit>
   1d890:	b920      	cbnz	r0, 1d89c <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1d892:	4620      	mov	r0, r4
}
   1d894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1d898:	f7ff bfa8 	b.w	1d7ec <legacy_pairing_confirm>
	switch (smp->method) {
   1d89c:	7a23      	ldrb	r3, [r4, #8]
   1d89e:	2b01      	cmp	r3, #1
   1d8a0:	d009      	beq.n	1d8b6 <smp_pairing_confirm+0x4a>
   1d8a2:	2b02      	cmp	r3, #2
   1d8a4:	d113      	bne.n	1d8ce <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d8a6:	4620      	mov	r0, r4
   1d8a8:	2104      	movs	r1, #4
   1d8aa:	f7ff fe3b 	bl	1d524 <atomic_set_bit>
}
   1d8ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1d8b2:	f7ea b981 	b.w	7bb8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d8b6:	210a      	movs	r1, #10
   1d8b8:	4628      	mov	r0, r5
   1d8ba:	f7ff fd40 	bl	1d33e <atomic_test_bit>
   1d8be:	2800      	cmp	r0, #0
   1d8c0:	d0f1      	beq.n	1d8a6 <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d8c2:	4628      	mov	r0, r5
   1d8c4:	2100      	movs	r1, #0
   1d8c6:	f7ff fe2d 	bl	1d524 <atomic_set_bit>
			return 0;
   1d8ca:	2000      	movs	r0, #0
}
   1d8cc:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1d8ce:	2008      	movs	r0, #8
   1d8d0:	e7fc      	b.n	1d8cc <smp_pairing_confirm+0x60>

0001d8d2 <bt_smp_request_ltk>:
{
   1d8d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d8d6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1d8da:	e9cd 2300 	strd	r2, r3, [sp]
   1d8de:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d8e0:	f7ff fd26 	bl	1d330 <smp_chan_get>
	if (!smp) {
   1d8e4:	4605      	mov	r5, r0
   1d8e6:	2800      	cmp	r0, #0
   1d8e8:	f000 8090 	beq.w	1da0c <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   1d8ec:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d8f0:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   1d8f2:	f1b9 0f00 	cmp.w	r9, #0
   1d8f6:	d12a      	bne.n	1d94e <bt_smp_request_ltk+0x7c>
   1d8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d8fc:	4313      	orrs	r3, r2
   1d8fe:	d126      	bne.n	1d94e <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d900:	2103      	movs	r1, #3
   1d902:	4638      	mov	r0, r7
   1d904:	f7ff fd1b 	bl	1d33e <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1d908:	b308      	cbz	r0, 1d94e <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d90a:	2101      	movs	r1, #1
   1d90c:	4638      	mov	r0, r7
   1d90e:	f7ff fd16 	bl	1d33e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1d912:	4606      	mov	r6, r0
   1d914:	b1d8      	cbz	r0, 1d94e <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d916:	7d2c      	ldrb	r4, [r5, #20]
   1d918:	7b6b      	ldrb	r3, [r5, #13]
   1d91a:	429c      	cmp	r4, r3
   1d91c:	bf28      	it	cs
   1d91e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1d920:	4622      	mov	r2, r4
   1d922:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1d926:	4640      	mov	r0, r8
   1d928:	f7fc ff93 	bl	1a852 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1d92c:	2c0f      	cmp	r4, #15
   1d92e:	d806      	bhi.n	1d93e <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   1d930:	f1c4 0210 	rsb	r2, r4, #16
   1d934:	4649      	mov	r1, r9
   1d936:	eb08 0004 	add.w	r0, r8, r4
   1d93a:	f7fc ff95 	bl	1a868 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d93e:	2101      	movs	r1, #1
   1d940:	4638      	mov	r0, r7
   1d942:	f7ff fdef 	bl	1d524 <atomic_set_bit>
}
   1d946:	4630      	mov	r0, r6
   1d948:	b003      	add	sp, #12
   1d94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1d94e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1d952:	b983      	cbnz	r3, 1d976 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   1d954:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1d958:	7a21      	ldrb	r1, [r4, #8]
   1d95a:	4632      	mov	r2, r6
   1d95c:	2020      	movs	r0, #32
   1d95e:	f7eb f8eb 	bl	8b38 <bt_keys_find>
   1d962:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1d966:	b930      	cbnz	r0, 1d976 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   1d968:	7a21      	ldrb	r1, [r4, #8]
   1d96a:	4632      	mov	r2, r6
   1d96c:	2001      	movs	r0, #1
   1d96e:	f7eb f8e3 	bl	8b38 <bt_keys_find>
   1d972:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1d976:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1d97a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1d97e:	b9ee      	cbnz	r6, 1d9bc <bt_smp_request_ltk+0xea>
   1d980:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d984:	4313      	orrs	r3, r2
   1d986:	d119      	bne.n	1d9bc <bt_smp_request_ltk+0xea>
   1d988:	b388      	cbz	r0, 1d9ee <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1d98a:	89c3      	ldrh	r3, [r0, #14]
   1d98c:	069a      	lsls	r2, r3, #26
   1d98e:	d516      	bpl.n	1d9be <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   1d990:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1d992:	f100 011a 	add.w	r1, r0, #26
   1d996:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   1d998:	4640      	mov	r0, r8
   1d99a:	f7fc ff5a 	bl	1a852 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1d99e:	2c0f      	cmp	r4, #15
   1d9a0:	d806      	bhi.n	1d9b0 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   1d9a2:	f1c4 0210 	rsb	r2, r4, #16
   1d9a6:	4631      	mov	r1, r6
   1d9a8:	eb08 0004 	add.w	r0, r8, r4
   1d9ac:	f7fc ff5c 	bl	1a868 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d9b0:	2101      	movs	r1, #1
   1d9b2:	4638      	mov	r0, r7
   1d9b4:	f7ff fdb6 	bl	1d524 <atomic_set_bit>
		return true;
   1d9b8:	2601      	movs	r6, #1
   1d9ba:	e7c4      	b.n	1d946 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1d9bc:	b1b8      	cbz	r0, 1d9ee <bt_smp_request_ltk+0x11c>
   1d9be:	89c3      	ldrh	r3, [r0, #14]
   1d9c0:	07db      	lsls	r3, r3, #31
   1d9c2:	d514      	bpl.n	1d9ee <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1d9c4:	2208      	movs	r2, #8
   1d9c6:	4669      	mov	r1, sp
   1d9c8:	3040      	adds	r0, #64	; 0x40
   1d9ca:	f7fc ff31 	bl	1a830 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   1d9ce:	b970      	cbnz	r0, 1d9ee <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   1d9d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1d9d4:	2202      	movs	r2, #2
   1d9d6:	a90a      	add	r1, sp, #40	; 0x28
   1d9d8:	3048      	adds	r0, #72	; 0x48
   1d9da:	f7fc ff29 	bl	1a830 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   1d9de:	4606      	mov	r6, r0
   1d9e0:	b928      	cbnz	r0, 1d9ee <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   1d9e2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1d9e6:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   1d9e8:	314a      	adds	r1, #74	; 0x4a
   1d9ea:	4622      	mov	r2, r4
   1d9ec:	e7d4      	b.n	1d998 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d9ee:	210f      	movs	r1, #15
   1d9f0:	4638      	mov	r0, r7
   1d9f2:	f7ff fca4 	bl	1d33e <atomic_test_bit>
   1d9f6:	b120      	cbz	r0, 1da02 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1d9f8:	2202      	movs	r2, #2
   1d9fa:	2106      	movs	r1, #6
   1d9fc:	4620      	mov	r0, r4
   1d9fe:	f7e7 fe85 	bl	570c <bt_conn_security_changed>
	smp_reset(smp);
   1da02:	4628      	mov	r0, r5
   1da04:	f7ff fe74 	bl	1d6f0 <smp_reset>
	return false;
   1da08:	2600      	movs	r6, #0
   1da0a:	e79c      	b.n	1d946 <bt_smp_request_ltk+0x74>
		return false;
   1da0c:	4606      	mov	r6, r0
   1da0e:	e79a      	b.n	1d946 <bt_smp_request_ltk+0x74>

0001da10 <bt_smp_sign>:
   1da10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1da14:	4770      	bx	lr

0001da16 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1da16:	1d03      	adds	r3, r0, #4
{
   1da18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1da1a:	4605      	mov	r5, r0
   1da1c:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1da1e:	4618      	mov	r0, r3
   1da20:	2103      	movs	r1, #3
   1da22:	f7ff fc8c 	bl	1d33e <atomic_test_bit>
   1da26:	b1f0      	cbz	r0, 1da66 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   1da28:	4631      	mov	r1, r6
   1da2a:	4628      	mov	r0, r5
   1da2c:	f7ea fe5e 	bl	86ec <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1da30:	2105      	movs	r1, #5
   1da32:	4628      	mov	r0, r5
   1da34:	f7ff fdc8 	bl	1d5c8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1da38:	4604      	mov	r4, r0
   1da3a:	b308      	cbz	r0, 1da80 <smp_error+0x6a>
   1da3c:	2101      	movs	r1, #1
   1da3e:	3008      	adds	r0, #8
   1da40:	f000 fa63 	bl	1df0a <net_buf_simple_add>
	rsp->reason = reason;
   1da44:	7006      	strb	r6, [r0, #0]
   1da46:	2600      	movs	r6, #0
   1da48:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   1da4c:	9600      	str	r6, [sp, #0]
   1da4e:	4633      	mov	r3, r6
   1da50:	4622      	mov	r2, r4
   1da52:	2106      	movs	r1, #6
   1da54:	f7fe f877 	bl	1bb46 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1da58:	b118      	cbz	r0, 1da62 <smp_error+0x4c>
		net_buf_unref(buf);
   1da5a:	4620      	mov	r0, r4
   1da5c:	f7f8 f95a 	bl	15d14 <net_buf_unref>
	return 0;
   1da60:	4630      	mov	r0, r6
}
   1da62:	b002      	add	sp, #8
   1da64:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1da66:	2101      	movs	r1, #1
   1da68:	4618      	mov	r0, r3
   1da6a:	f7ff fc68 	bl	1d33e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1da6e:	2800      	cmp	r0, #0
   1da70:	d1da      	bne.n	1da28 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1da72:	210f      	movs	r1, #15
   1da74:	4618      	mov	r0, r3
   1da76:	f7ff fc62 	bl	1d33e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1da7a:	2800      	cmp	r0, #0
   1da7c:	d1d4      	bne.n	1da28 <smp_error+0x12>
   1da7e:	e7d7      	b.n	1da30 <smp_error+0x1a>
		return -ENOBUFS;
   1da80:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1da84:	e7ed      	b.n	1da62 <smp_error+0x4c>

0001da86 <bt_smp_dhkey_ready>:
{
   1da86:	b570      	push	{r4, r5, r6, lr}
   1da88:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1da8a:	2008      	movs	r0, #8
   1da8c:	f7ea f836 	bl	7afc <smp_find>
	if (smp) {
   1da90:	4604      	mov	r4, r0
   1da92:	b1b8      	cbz	r0, 1dac4 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1da94:	1d05      	adds	r5, r0, #4
   1da96:	2108      	movs	r1, #8
   1da98:	4628      	mov	r0, r5
   1da9a:	f7ff fc7a 	bl	1d392 <atomic_clear_bit>
	if (!dhkey) {
   1da9e:	b38e      	cbz	r6, 1db04 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1daa0:	2107      	movs	r1, #7
   1daa2:	f7ff fc76 	bl	1d392 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   1daa6:	4631      	mov	r1, r6
   1daa8:	2220      	movs	r2, #32
   1daaa:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1daae:	f7fc fed0 	bl	1a852 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1dab2:	210a      	movs	r1, #10
   1dab4:	4628      	mov	r0, r5
   1dab6:	f7ff fc42 	bl	1d33e <atomic_test_bit>
   1daba:	b168      	cbz	r0, 1dad8 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dabc:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dabe:	4628      	mov	r0, r5
   1dac0:	f7ff fd30 	bl	1d524 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1dac4:	2007      	movs	r0, #7
   1dac6:	f7ea f819 	bl	7afc <smp_find>
		if (smp) {
   1daca:	4604      	mov	r4, r0
   1dacc:	b118      	cbz	r0, 1dad6 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   1dace:	f7ea f85d 	bl	7b8c <smp_dhkey_generate>
			if (err) {
   1dad2:	4601      	mov	r1, r0
   1dad4:	b990      	cbnz	r0, 1dafc <bt_smp_dhkey_ready+0x76>
}
   1dad6:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1dad8:	2110      	movs	r1, #16
   1dada:	4628      	mov	r0, r5
   1dadc:	f7ff fc2f 	bl	1d33e <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dae0:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1dae2:	2800      	cmp	r0, #0
   1dae4:	d1eb      	bne.n	1dabe <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1dae6:	4628      	mov	r0, r5
   1dae8:	f7ff fc29 	bl	1d33e <atomic_test_bit>
   1daec:	2800      	cmp	r0, #0
   1daee:	d0e9      	beq.n	1dac4 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   1daf0:	4620      	mov	r0, r4
   1daf2:	f7ea fb29 	bl	8148 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   1daf6:	4601      	mov	r1, r0
   1daf8:	2800      	cmp	r0, #0
   1dafa:	d0e3      	beq.n	1dac4 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   1dafc:	4620      	mov	r0, r4
   1dafe:	f7ff ff8a 	bl	1da16 <smp_error>
   1db02:	e7df      	b.n	1dac4 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1db04:	210b      	movs	r1, #11
   1db06:	e7f9      	b.n	1dafc <bt_smp_dhkey_ready+0x76>

0001db08 <smp_ident_addr_info>:
{
   1db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1db0c:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1db0e:	783b      	ldrb	r3, [r7, #0]
{
   1db10:	4604      	mov	r4, r0
   1db12:	b123      	cbz	r3, 1db1e <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1db14:	79bb      	ldrb	r3, [r7, #6]
   1db16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1db1a:	2bc0      	cmp	r3, #192	; 0xc0
   1db1c:	d16b      	bne.n	1dbf6 <smp_ident_addr_info+0xee>
	struct bt_conn *conn = smp->chan.chan.conn;
   1db1e:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1db22:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   1db26:	2207      	movs	r2, #7
   1db28:	4639      	mov	r1, r7
   1db2a:	4640      	mov	r0, r8
   1db2c:	f7fc fe80 	bl	1a830 <memcmp>
   1db30:	b180      	cbz	r0, 1db54 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1db32:	7a28      	ldrb	r0, [r5, #8]
   1db34:	4639      	mov	r1, r7
   1db36:	f7eb f84d 	bl	8bd4 <bt_keys_find_addr>
		if (keys) {
   1db3a:	4606      	mov	r6, r0
   1db3c:	b150      	cbz	r0, 1db54 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   1db3e:	4601      	mov	r1, r0
   1db40:	4620      	mov	r0, r4
   1db42:	f7ff fc05 	bl	1d350 <update_keys_check>
   1db46:	b910      	cbnz	r0, 1db4e <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   1db48:	2008      	movs	r0, #8
}
   1db4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   1db4e:	4630      	mov	r0, r6
   1db50:	f000 f96a 	bl	1de28 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1db54:	210d      	movs	r1, #13
   1db56:	1d20      	adds	r0, r4, #4
   1db58:	f7ff fbf1 	bl	1d33e <atomic_test_bit>
   1db5c:	b398      	cbz	r0, 1dbc6 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1db5e:	7a29      	ldrb	r1, [r5, #8]
   1db60:	4642      	mov	r2, r8
   1db62:	2002      	movs	r0, #2
   1db64:	f000 f94c 	bl	1de00 <bt_keys_get_type>
		if (!keys) {
   1db68:	4606      	mov	r6, r0
   1db6a:	2800      	cmp	r0, #0
   1db6c:	d0ec      	beq.n	1db48 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1db6e:	78eb      	ldrb	r3, [r5, #3]
   1db70:	2b00      	cmp	r3, #0
   1db72:	d13d      	bne.n	1dbf0 <smp_ident_addr_info+0xe8>
			dst = &conn->le.resp_addr;
   1db74:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1db78:	780b      	ldrb	r3, [r1, #0]
   1db7a:	2b01      	cmp	r3, #1
   1db7c:	d120      	bne.n	1dbc0 <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   1db7e:	798b      	ldrb	r3, [r1, #6]
   1db80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1db84:	2b40      	cmp	r3, #64	; 0x40
   1db86:	d11b      	bne.n	1dbc0 <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   1db88:	2206      	movs	r2, #6
   1db8a:	3101      	adds	r1, #1
   1db8c:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1db90:	f7fc fe5f 	bl	1a852 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1db94:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1db98:	b193      	cbz	r3, 1dbc0 <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1db9a:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1db9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dba2:	2bc0      	cmp	r3, #192	; 0xc0
   1dba4:	d00c      	beq.n	1dbc0 <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   1dba6:	2207      	movs	r2, #7
   1dba8:	4639      	mov	r1, r7
   1dbaa:	1c70      	adds	r0, r6, #1
   1dbac:	f7fc fe51 	bl	1a852 <memcpy>
   1dbb0:	2207      	movs	r2, #7
   1dbb2:	4639      	mov	r1, r7
   1dbb4:	4640      	mov	r0, r8
   1dbb6:	f7fc fe4c 	bl	1a852 <memcpy>
				bt_conn_identity_resolved(conn);
   1dbba:	4628      	mov	r0, r5
   1dbbc:	f7e7 fd78 	bl	56b0 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1dbc0:	4630      	mov	r0, r6
   1dbc2:	f7e6 fb49 	bl	4258 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1dbc6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1dbca:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1dbce:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1dbd0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1dbd4:	d503      	bpl.n	1dbde <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1dbd6:	210a      	movs	r1, #10
   1dbd8:	4620      	mov	r0, r4
   1dbda:	f7ff fca3 	bl	1d524 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1dbde:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1dbe2:	b91d      	cbnz	r5, 1dbec <smp_ident_addr_info+0xe4>
		smp_pairing_complete(smp, 0);
   1dbe4:	4629      	mov	r1, r5
   1dbe6:	4620      	mov	r0, r4
   1dbe8:	f7ea fd80 	bl	86ec <smp_pairing_complete>
	return 0;
   1dbec:	2000      	movs	r0, #0
   1dbee:	e7ac      	b.n	1db4a <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   1dbf0:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1dbf4:	e7c0      	b.n	1db78 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   1dbf6:	200a      	movs	r0, #10
   1dbf8:	e7a7      	b.n	1db4a <smp_ident_addr_info+0x42>

0001dbfa <smp_central_ident>:
{
   1dbfa:	b570      	push	{r4, r5, r6, lr}
   1dbfc:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1dbfe:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   1dc02:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dc04:	210d      	movs	r1, #13
   1dc06:	3004      	adds	r0, #4
   1dc08:	f7ff fb99 	bl	1d33e <atomic_test_bit>
   1dc0c:	b198      	cbz	r0, 1dc36 <smp_central_ident+0x3c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1dc0e:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1dc10:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1dc12:	f105 0288 	add.w	r2, r5, #136	; 0x88
   1dc16:	2004      	movs	r0, #4
   1dc18:	f000 f8f2 	bl	1de00 <bt_keys_get_type>
		if (!keys) {
   1dc1c:	4605      	mov	r5, r0
   1dc1e:	b318      	cbz	r0, 1dc68 <smp_central_ident+0x6e>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1dc20:	2202      	movs	r2, #2
   1dc22:	4631      	mov	r1, r6
   1dc24:	3018      	adds	r0, #24
   1dc26:	f7fc fe14 	bl	1a852 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1dc2a:	2208      	movs	r2, #8
   1dc2c:	1cb1      	adds	r1, r6, #2
   1dc2e:	f105 0010 	add.w	r0, r5, #16
   1dc32:	f7fc fe0e 	bl	1a852 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1dc36:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1dc3a:	f023 0201 	bic.w	r2, r3, #1
   1dc3e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1dc42:	079a      	lsls	r2, r3, #30
   1dc44:	d50c      	bpl.n	1dc60 <smp_central_ident+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1dc46:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1dc48:	4620      	mov	r0, r4
   1dc4a:	f7ff fc6b 	bl	1d524 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1dc4e:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1dc52:	b91d      	cbnz	r5, 1dc5c <smp_central_ident+0x62>
		smp_pairing_complete(smp, 0);
   1dc54:	4629      	mov	r1, r5
   1dc56:	4620      	mov	r0, r4
   1dc58:	f7ea fd48 	bl	86ec <smp_pairing_complete>
	return 0;
   1dc5c:	2000      	movs	r0, #0
   1dc5e:	e004      	b.n	1dc6a <smp_central_ident+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1dc60:	075b      	lsls	r3, r3, #29
   1dc62:	d5f4      	bpl.n	1dc4e <smp_central_ident+0x54>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1dc64:	210a      	movs	r1, #10
   1dc66:	e7ef      	b.n	1dc48 <smp_central_ident+0x4e>
			return BT_SMP_ERR_UNSPECIFIED;
   1dc68:	2008      	movs	r0, #8
}
   1dc6a:	bd70      	pop	{r4, r5, r6, pc}

0001dc6c <bt_smp_disconnected>:
{
   1dc6c:	b570      	push	{r4, r5, r6, lr}
   1dc6e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1dc70:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   1dc74:	f850 3bf0 	ldr.w	r3, [r0], #240
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1dc78:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1dc7a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   1dc7e:	f000 fef4 	bl	1ea6a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1dc82:	2103      	movs	r1, #3
   1dc84:	4620      	mov	r0, r4
   1dc86:	f7ff fb5a 	bl	1d33e <atomic_test_bit>
   1dc8a:	b1a0      	cbz	r0, 1dcb6 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1dc8c:	2108      	movs	r1, #8
   1dc8e:	4630      	mov	r0, r6
   1dc90:	f7ea fd2c 	bl	86ec <smp_pairing_complete>
	if (keys) {
   1dc94:	b13d      	cbz	r5, 1dca6 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1dc96:	89eb      	ldrh	r3, [r5, #14]
   1dc98:	b113      	cbz	r3, 1dca0 <bt_smp_disconnected+0x34>
   1dc9a:	7b6b      	ldrb	r3, [r5, #13]
   1dc9c:	079b      	lsls	r3, r3, #30
   1dc9e:	d502      	bpl.n	1dca6 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1dca0:	4628      	mov	r0, r5
   1dca2:	f000 f8c1 	bl	1de28 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1dca6:	4630      	mov	r0, r6
   1dca8:	f44f 7204 	mov.w	r2, #528	; 0x210
}
   1dcac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1dcb0:	2100      	movs	r1, #0
   1dcb2:	f7fc bdd9 	b.w	1a868 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1dcb6:	2101      	movs	r1, #1
   1dcb8:	4620      	mov	r0, r4
   1dcba:	f7ff fb40 	bl	1d33e <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1dcbe:	2800      	cmp	r0, #0
   1dcc0:	d1e4      	bne.n	1dc8c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1dcc2:	210f      	movs	r1, #15
   1dcc4:	4620      	mov	r0, r4
   1dcc6:	f7ff fb3a 	bl	1d33e <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1dcca:	2800      	cmp	r0, #0
   1dccc:	d1de      	bne.n	1dc8c <bt_smp_disconnected+0x20>
   1dcce:	e7e1      	b.n	1dc94 <bt_smp_disconnected+0x28>

0001dcd0 <smp_timeout>:
{
   1dcd0:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1dcd2:	2108      	movs	r1, #8
{
   1dcd4:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1dcd6:	f5a0 70f0 	sub.w	r0, r0, #480	; 0x1e0
   1dcda:	f7ea fd07 	bl	86ec <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1dcde:	f5a4 70ee 	sub.w	r0, r4, #476	; 0x1dc
   1dce2:	2104      	movs	r1, #4
}
   1dce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1dce8:	f7ff bc1c 	b.w	1d524 <atomic_set_bit>

0001dcec <smp_ident_sent>:
{
   1dcec:	b508      	push	{r3, lr}
	if (!err) {
   1dcee:	b99a      	cbnz	r2, 1dd18 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1dcf0:	7883      	ldrb	r3, [r0, #2]
   1dcf2:	2b01      	cmp	r3, #1
   1dcf4:	d110      	bne.n	1dd18 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1dcf6:	2106      	movs	r1, #6
   1dcf8:	f7fe f88a 	bl	1be10 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1dcfc:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   1dd00:	f023 0301 	bic.w	r3, r3, #1
   1dd04:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1dd08:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   1dd0c:	b921      	cbnz	r1, 1dd18 <smp_ident_sent+0x2c>
}
   1dd0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1dd12:	38f0      	subs	r0, #240	; 0xf0
   1dd14:	f7ea bcea 	b.w	86ec <smp_pairing_complete>
}
   1dd18:	bd08      	pop	{r3, pc}

0001dd1a <bt_smp_update_keys>:
{
   1dd1a:	b570      	push	{r4, r5, r6, lr}
   1dd1c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1dd1e:	f7ff fb07 	bl	1d330 <smp_chan_get>
	if (!smp) {
   1dd22:	4605      	mov	r5, r0
   1dd24:	2800      	cmp	r0, #0
   1dd26:	d06a      	beq.n	1ddfe <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1dd28:	1d06      	adds	r6, r0, #4
   1dd2a:	2103      	movs	r1, #3
   1dd2c:	4630      	mov	r0, r6
   1dd2e:	f7ff fb06 	bl	1d33e <atomic_test_bit>
   1dd32:	2800      	cmp	r0, #0
   1dd34:	d063      	beq.n	1ddfe <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   1dd36:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1dd3a:	b108      	cbz	r0, 1dd40 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1dd3c:	f000 f874 	bl	1de28 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1dd40:	7a20      	ldrb	r0, [r4, #8]
   1dd42:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1dd46:	f7ea fec1 	bl	8acc <bt_keys_get_addr>
   1dd4a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1dd4e:	b928      	cbnz	r0, 1dd5c <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1dd50:	4628      	mov	r0, r5
   1dd52:	2108      	movs	r1, #8
}
   1dd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1dd58:	f7ff be5d 	b.w	1da16 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1dd5c:	210e      	movs	r1, #14
   1dd5e:	4630      	mov	r0, r6
   1dd60:	f7ff faed 	bl	1d33e <atomic_test_bit>
   1dd64:	b128      	cbz	r0, 1dd72 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1dd66:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1dd6a:	7b53      	ldrb	r3, [r2, #13]
   1dd6c:	f043 0302 	orr.w	r3, r3, #2
   1dd70:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1dd72:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1dd74:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1dd78:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1dd7a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1dd7c:	d836      	bhi.n	1ddec <bt_smp_update_keys+0xd2>
   1dd7e:	b3c2      	cbz	r2, 1ddf2 <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1dd80:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1dd84:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1dd86:	7b6b      	ldrb	r3, [r5, #13]
   1dd88:	7d2a      	ldrb	r2, [r5, #20]
   1dd8a:	4293      	cmp	r3, r2
   1dd8c:	bf28      	it	cs
   1dd8e:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1dd90:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dd92:	4630      	mov	r0, r6
   1dd94:	2105      	movs	r1, #5
   1dd96:	f7ff fad2 	bl	1d33e <atomic_test_bit>
   1dd9a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1dd9e:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dda0:	b350      	cbz	r0, 1ddf8 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   1dda2:	f042 0210 	orr.w	r2, r2, #16
   1dda6:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dda8:	210d      	movs	r1, #13
   1ddaa:	4630      	mov	r0, r6
   1ddac:	f7ff fac7 	bl	1d33e <atomic_test_bit>
   1ddb0:	b328      	cbz	r0, 1ddfe <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1ddb2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1ddb6:	2120      	movs	r1, #32
   1ddb8:	f000 f832 	bl	1de20 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1ddbc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1ddc0:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1ddc4:	2210      	movs	r2, #16
   1ddc6:	301a      	adds	r0, #26
   1ddc8:	f7fc fd43 	bl	1a852 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1ddcc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1ddd0:	2208      	movs	r2, #8
   1ddd2:	2100      	movs	r1, #0
   1ddd4:	3010      	adds	r0, #16
   1ddd6:	f7fc fd47 	bl	1a868 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1ddda:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1ddde:	2202      	movs	r2, #2
}
   1dde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1dde4:	2100      	movs	r1, #0
   1dde6:	3018      	adds	r0, #24
   1dde8:	f7fc bd3e 	b.w	1a868 <memset>
	switch (smp->method) {
   1ddec:	3a05      	subs	r2, #5
   1ddee:	2a01      	cmp	r2, #1
   1ddf0:	d9c6      	bls.n	1dd80 <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1ddf2:	f023 0301 	bic.w	r3, r3, #1
   1ddf6:	e7c5      	b.n	1dd84 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1ddf8:	f022 0210 	bic.w	r2, r2, #16
   1ddfc:	735a      	strb	r2, [r3, #13]
}
   1ddfe:	bd70      	pop	{r4, r5, r6, pc}

0001de00 <bt_keys_get_type>:
{
   1de00:	b570      	push	{r4, r5, r6, lr}
   1de02:	4604      	mov	r4, r0
   1de04:	460d      	mov	r5, r1
   1de06:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1de08:	f7ea fe96 	bl	8b38 <bt_keys_find>
	if (keys) {
   1de0c:	b938      	cbnz	r0, 1de1e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1de0e:	4631      	mov	r1, r6
   1de10:	4628      	mov	r0, r5
   1de12:	f7ea fe5b 	bl	8acc <bt_keys_get_addr>
	if (!keys) {
   1de16:	b110      	cbz	r0, 1de1e <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1de18:	89c3      	ldrh	r3, [r0, #14]
   1de1a:	431c      	orrs	r4, r3
   1de1c:	81c4      	strh	r4, [r0, #14]
}
   1de1e:	bd70      	pop	{r4, r5, r6, pc}

0001de20 <bt_keys_add_type>:
	keys->keys |= type;
   1de20:	89c3      	ldrh	r3, [r0, #14]
   1de22:	4319      	orrs	r1, r3
   1de24:	81c1      	strh	r1, [r0, #14]
}
   1de26:	4770      	bx	lr

0001de28 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1de28:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1de2a:	7a03      	ldrb	r3, [r0, #8]
   1de2c:	075b      	lsls	r3, r3, #29
{
   1de2e:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1de30:	d501      	bpl.n	1de36 <bt_keys_clear+0xe>
		bt_id_del(keys);
   1de32:	f7e6 fab7 	bl	43a4 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1de36:	4620      	mov	r0, r4
   1de38:	225c      	movs	r2, #92	; 0x5c
}
   1de3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1de3e:	2100      	movs	r1, #0
   1de40:	f7fc bd12 	b.w	1a868 <memset>

0001de44 <fixed_data_unref>:
}
   1de44:	4770      	bx	lr

0001de46 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1de46:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1de48:	6849      	ldr	r1, [r1, #4]
   1de4a:	6809      	ldr	r1, [r1, #0]
   1de4c:	f7f7 bece 	b.w	15bec <net_buf_alloc_len>

0001de50 <net_buf_get>:
{
   1de50:	b570      	push	{r4, r5, r6, lr}
   1de52:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1de54:	f7fa f82a 	bl	17eac <z_impl_k_queue_get>
	if (!buf) {
   1de58:	4605      	mov	r5, r0
   1de5a:	b128      	cbz	r0, 1de68 <net_buf_get+0x18>
   1de5c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1de5e:	7963      	ldrb	r3, [r4, #5]
   1de60:	f013 0301 	ands.w	r3, r3, #1
   1de64:	d102      	bne.n	1de6c <net_buf_get+0x1c>
	frag->frags = NULL;
   1de66:	6023      	str	r3, [r4, #0]
}
   1de68:	4628      	mov	r0, r5
   1de6a:	bd70      	pop	{r4, r5, r6, pc}
   1de6c:	2300      	movs	r3, #0
   1de6e:	2200      	movs	r2, #0
   1de70:	4630      	mov	r0, r6
   1de72:	f7fa f81b 	bl	17eac <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1de76:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1de78:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1de7a:	f023 0301 	bic.w	r3, r3, #1
   1de7e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1de80:	4604      	mov	r4, r0
   1de82:	e7ec      	b.n	1de5e <net_buf_get+0xe>

0001de84 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1de84:	6883      	ldr	r3, [r0, #8]
   1de86:	440b      	add	r3, r1
   1de88:	6003      	str	r3, [r0, #0]
}
   1de8a:	4770      	bx	lr

0001de8c <net_buf_put>:
{
   1de8c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1de8e:	460a      	mov	r2, r1
   1de90:	6814      	ldr	r4, [r2, #0]
   1de92:	b914      	cbnz	r4, 1de9a <net_buf_put+0xe>
}
   1de94:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1de96:	f000 bce0 	b.w	1e85a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1de9a:	7953      	ldrb	r3, [r2, #5]
   1de9c:	f043 0301 	orr.w	r3, r3, #1
   1dea0:	7153      	strb	r3, [r2, #5]
   1dea2:	4622      	mov	r2, r4
   1dea4:	e7f4      	b.n	1de90 <net_buf_put+0x4>

0001dea6 <net_buf_ref>:
	buf->ref++;
   1dea6:	7902      	ldrb	r2, [r0, #4]
   1dea8:	3201      	adds	r2, #1
   1deaa:	7102      	strb	r2, [r0, #4]
}
   1deac:	4770      	bx	lr

0001deae <net_buf_frag_last>:
{
   1deae:	4603      	mov	r3, r0
	while (buf->frags) {
   1deb0:	4618      	mov	r0, r3
   1deb2:	681b      	ldr	r3, [r3, #0]
   1deb4:	2b00      	cmp	r3, #0
   1deb6:	d1fb      	bne.n	1deb0 <net_buf_frag_last+0x2>
}
   1deb8:	4770      	bx	lr

0001deba <net_buf_frag_insert>:
	if (parent->frags) {
   1deba:	6802      	ldr	r2, [r0, #0]
{
   1debc:	b510      	push	{r4, lr}
	if (parent->frags) {
   1debe:	b12a      	cbz	r2, 1decc <net_buf_frag_insert+0x12>
   1dec0:	460b      	mov	r3, r1
	while (buf->frags) {
   1dec2:	461c      	mov	r4, r3
   1dec4:	681b      	ldr	r3, [r3, #0]
   1dec6:	2b00      	cmp	r3, #0
   1dec8:	d1fb      	bne.n	1dec2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1deca:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   1decc:	6001      	str	r1, [r0, #0]
}
   1dece:	bd10      	pop	{r4, pc}

0001ded0 <net_buf_frag_add>:
{
   1ded0:	b510      	push	{r4, lr}
	if (!head) {
   1ded2:	4604      	mov	r4, r0
   1ded4:	b920      	cbnz	r0, 1dee0 <net_buf_frag_add+0x10>
	buf->ref++;
   1ded6:	790b      	ldrb	r3, [r1, #4]
   1ded8:	3301      	adds	r3, #1
   1deda:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1dedc:	4608      	mov	r0, r1
}
   1dede:	bd10      	pop	{r4, pc}
   1dee0:	4603      	mov	r3, r0
	while (buf->frags) {
   1dee2:	4618      	mov	r0, r3
   1dee4:	681b      	ldr	r3, [r3, #0]
   1dee6:	2b00      	cmp	r3, #0
   1dee8:	d1fb      	bne.n	1dee2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1deea:	f7ff ffe6 	bl	1deba <net_buf_frag_insert>
   1deee:	4620      	mov	r0, r4
   1def0:	e7f5      	b.n	1dede <net_buf_frag_add+0xe>

0001def2 <net_buf_frag_del>:
{
   1def2:	b510      	push	{r4, lr}
	if (parent) {
   1def4:	b108      	cbz	r0, 1defa <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   1def6:	680b      	ldr	r3, [r1, #0]
   1def8:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   1defa:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   1defc:	2300      	movs	r3, #0
	net_buf_unref(frag);
   1defe:	4608      	mov	r0, r1
	frag->frags = NULL;
   1df00:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1df02:	f7f7 ff07 	bl	15d14 <net_buf_unref>
}
   1df06:	4620      	mov	r0, r4
   1df08:	bd10      	pop	{r4, pc}

0001df0a <net_buf_simple_add>:
	return buf->data + buf->len;
   1df0a:	8883      	ldrh	r3, [r0, #4]
   1df0c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1df0e:	4419      	add	r1, r3
   1df10:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1df12:	18d0      	adds	r0, r2, r3
   1df14:	4770      	bx	lr

0001df16 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1df16:	b430      	push	{r4, r5}
   1df18:	8884      	ldrh	r4, [r0, #4]
   1df1a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1df1c:	18a3      	adds	r3, r4, r2
   1df1e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1df20:	1928      	adds	r0, r5, r4
}
   1df22:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1df24:	f7fc bc95 	b.w	1a852 <memcpy>

0001df28 <net_buf_simple_add_u8>:
   1df28:	8883      	ldrh	r3, [r0, #4]
   1df2a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1df2c:	b510      	push	{r4, lr}
	buf->len += len;
   1df2e:	1c5c      	adds	r4, r3, #1
   1df30:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1df32:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1df34:	18d0      	adds	r0, r2, r3
   1df36:	bd10      	pop	{r4, pc}

0001df38 <net_buf_simple_add_le16>:
   1df38:	8883      	ldrh	r3, [r0, #4]
   1df3a:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   1df3c:	b530      	push	{r4, r5, lr}
   1df3e:	18d4      	adds	r4, r2, r3
	buf->len += len;
   1df40:	1c9d      	adds	r5, r3, #2
   1df42:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   1df44:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   1df46:	0a09      	lsrs	r1, r1, #8
   1df48:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   1df4a:	bd30      	pop	{r4, r5, pc}

0001df4c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1df4c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1df4e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1df50:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1df52:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1df54:	4411      	add	r1, r2
	buf->data -= len;
   1df56:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1df58:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1df5a:	4770      	bx	lr

0001df5c <net_buf_simple_push_le16>:
	buf->data -= len;
   1df5c:	6803      	ldr	r3, [r0, #0]
   1df5e:	1e9a      	subs	r2, r3, #2
   1df60:	6002      	str	r2, [r0, #0]
	buf->len += len;
   1df62:	8882      	ldrh	r2, [r0, #4]
   1df64:	3202      	adds	r2, #2
   1df66:	8082      	strh	r2, [r0, #4]
	dst[0] = val;
   1df68:	f803 1c02 	strb.w	r1, [r3, #-2]
	dst[1] = val >> 8;
   1df6c:	0a09      	lsrs	r1, r1, #8
   1df6e:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_le16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_push(buf, sizeof(val)));
}
   1df72:	4770      	bx	lr

0001df74 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1df74:	8882      	ldrh	r2, [r0, #4]
   1df76:	1a52      	subs	r2, r2, r1
{
   1df78:	4603      	mov	r3, r0
	buf->len -= len;
   1df7a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1df7c:	6800      	ldr	r0, [r0, #0]
   1df7e:	4408      	add	r0, r1
   1df80:	6018      	str	r0, [r3, #0]
}
   1df82:	4770      	bx	lr

0001df84 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1df84:	4603      	mov	r3, r0
	void *data = buf->data;
   1df86:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1df88:	889a      	ldrh	r2, [r3, #4]
   1df8a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1df8c:	4401      	add	r1, r0
	buf->len -= len;
   1df8e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1df90:	6019      	str	r1, [r3, #0]

	return data;
}
   1df92:	4770      	bx	lr

0001df94 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1df94:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1df96:	6803      	ldr	r3, [r0, #0]
   1df98:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1df9a:	2101      	movs	r1, #1
   1df9c:	f7ff ffea 	bl	1df74 <net_buf_simple_pull>

	return val;
}
   1dfa0:	4620      	mov	r0, r4
   1dfa2:	bd10      	pop	{r4, pc}

0001dfa4 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1dfa4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1dfa6:	6803      	ldr	r3, [r0, #0]
   1dfa8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1dfaa:	2102      	movs	r1, #2
   1dfac:	f7ff ffe2 	bl	1df74 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1dfb0:	4620      	mov	r0, r4
   1dfb2:	bd10      	pop	{r4, pc}

0001dfb4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1dfb4:	6802      	ldr	r2, [r0, #0]
   1dfb6:	6880      	ldr	r0, [r0, #8]
}
   1dfb8:	1a10      	subs	r0, r2, r0
   1dfba:	4770      	bx	lr

0001dfbc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1dfbc:	8883      	ldrh	r3, [r0, #4]
   1dfbe:	88c2      	ldrh	r2, [r0, #6]
   1dfc0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1dfc2:	6803      	ldr	r3, [r0, #0]
   1dfc4:	6880      	ldr	r0, [r0, #8]
   1dfc6:	1a18      	subs	r0, r3, r0
}
   1dfc8:	1a10      	subs	r0, r2, r0
   1dfca:	4770      	bx	lr

0001dfcc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1dfcc:	6903      	ldr	r3, [r0, #16]
   1dfce:	b2c9      	uxtb	r1, r1
   1dfd0:	220c      	movs	r2, #12
   1dfd2:	fb01 3302 	mla	r3, r1, r2, r3
   1dfd6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1dfd8:	f000 0007 	and.w	r0, r0, #7
   1dfdc:	4770      	bx	lr

0001dfde <set_on_state>:
	__asm__ volatile(
   1dfde:	f04f 0320 	mov.w	r3, #32
   1dfe2:	f3ef 8211 	mrs	r2, BASEPRI
   1dfe6:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfea:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1dfee:	6803      	ldr	r3, [r0, #0]
   1dff0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dff4:	f043 0302 	orr.w	r3, r3, #2
   1dff8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1dffa:	f382 8811 	msr	BASEPRI, r2
   1dffe:	f3bf 8f6f 	isb	sy
}
   1e002:	4770      	bx	lr

0001e004 <stop>:
{
   1e004:	4603      	mov	r3, r0
   1e006:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1e008:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1e00a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1e00c:	f04f 0420 	mov.w	r4, #32
   1e010:	f3ef 8611 	mrs	r6, BASEPRI
   1e014:	f384 8812 	msr	BASEPRI_MAX, r4
   1e018:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e01c:	250c      	movs	r5, #12
   1e01e:	fb05 0401 	mla	r4, r5, r1, r0
   1e022:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1e024:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1e028:	d001      	beq.n	1e02e <stop+0x2a>
   1e02a:	42a2      	cmp	r2, r4
   1e02c:	d110      	bne.n	1e050 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1e02e:	fb05 0001 	mla	r0, r5, r1, r0
   1e032:	2201      	movs	r2, #1
   1e034:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1e036:	2000      	movs	r0, #0
	__asm__ volatile(
   1e038:	f386 8811 	msr	BASEPRI, r6
   1e03c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1e040:	b928      	cbnz	r0, 1e04e <stop+0x4a>
	get_sub_config(dev, type)->stop();
   1e042:	685b      	ldr	r3, [r3, #4]
   1e044:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1e048:	684b      	ldr	r3, [r1, #4]
   1e04a:	4798      	blx	r3
	return 0;
   1e04c:	2000      	movs	r0, #0
}
   1e04e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1e050:	f04f 30ff 	mov.w	r0, #4294967295
   1e054:	e7f0      	b.n	1e038 <stop+0x34>

0001e056 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1e056:	2280      	movs	r2, #128	; 0x80
   1e058:	f7ff bfd4 	b.w	1e004 <stop>

0001e05c <async_start>:
{
   1e05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e05e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1e060:	6904      	ldr	r4, [r0, #16]
{
   1e062:	4605      	mov	r5, r0
   1e064:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1e066:	f04f 0020 	mov.w	r0, #32
   1e06a:	f3ef 8c11 	mrs	ip, BASEPRI
   1e06e:	f380 8812 	msr	BASEPRI_MAX, r0
   1e072:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e076:	260c      	movs	r6, #12
   1e078:	fb06 4601 	mla	r6, r6, r1, r4
   1e07c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1e07e:	f000 0e07 	and.w	lr, r0, #7
   1e082:	f1be 0f01 	cmp.w	lr, #1
   1e086:	d111      	bne.n	1e0ac <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1e088:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1e08a:	2600      	movs	r6, #0
	__asm__ volatile(
   1e08c:	f38c 8811 	msr	BASEPRI, ip
   1e090:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1e094:	b946      	cbnz	r6, 1e0a8 <async_start+0x4c>
	subdata->cb = cb;
   1e096:	200c      	movs	r0, #12
   1e098:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1e09c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1e0a0:	686b      	ldr	r3, [r5, #4]
   1e0a2:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1e0a6:	4798      	blx	r3
}
   1e0a8:	4630      	mov	r0, r6
   1e0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1e0ac:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1e0b0:	4287      	cmp	r7, r0
   1e0b2:	bf14      	ite	ne
   1e0b4:	f04f 36ff 	movne.w	r6, #4294967295
   1e0b8:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1e0bc:	e7e6      	b.n	1e08c <async_start+0x30>

0001e0be <api_start>:
{
   1e0be:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1e0c0:	2480      	movs	r4, #128	; 0x80
   1e0c2:	9400      	str	r4, [sp, #0]
   1e0c4:	f7ff ffca 	bl	1e05c <async_start>
}
   1e0c8:	b002      	add	sp, #8
   1e0ca:	bd10      	pop	{r4, pc}

0001e0cc <onoff_started_callback>:
	return &data->mgr[type];
   1e0cc:	6900      	ldr	r0, [r0, #16]
{
   1e0ce:	b410      	push	{r4}
	return &data->mgr[type];
   1e0d0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1e0d2:	241c      	movs	r4, #28
   1e0d4:	fb03 0004 	mla	r0, r3, r4, r0
   1e0d8:	2100      	movs	r1, #0
}
   1e0da:	bc10      	pop	{r4}
	notify(mgr, 0);
   1e0dc:	4710      	bx	r2

0001e0de <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1e0de:	2000      	movs	r0, #0
   1e0e0:	f000 b9b7 	b.w	1e452 <nrfx_clock_start>

0001e0e4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e0e4:	2000      	movs	r0, #0
   1e0e6:	f000 b9f1 	b.w	1e4cc <nrfx_clock_stop>

0001e0ea <blocking_start_callback>:
{
   1e0ea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1e0ec:	f7f9 bf12 	b.w	17f14 <z_impl_k_sem_give>

0001e0f0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e0f0:	6843      	ldr	r3, [r0, #4]
   1e0f2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1e0f4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1e0f8:	600b      	str	r3, [r1, #0]
}
   1e0fa:	2000      	movs	r0, #0
   1e0fc:	4770      	bx	lr

0001e0fe <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e0fe:	6843      	ldr	r3, [r0, #4]
   1e100:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1e102:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1e106:	4042      	eors	r2, r0
   1e108:	400a      	ands	r2, r1
   1e10a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1e10c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1e110:	2000      	movs	r0, #0
   1e112:	4770      	bx	lr

0001e114 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e114:	6843      	ldr	r3, [r0, #4]
   1e116:	685b      	ldr	r3, [r3, #4]
}
   1e118:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1e11a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1e11e:	4770      	bx	lr

0001e120 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e120:	6843      	ldr	r3, [r0, #4]
   1e122:	685b      	ldr	r3, [r3, #4]
}
   1e124:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1e126:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1e12a:	4770      	bx	lr

0001e12c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e12c:	6843      	ldr	r3, [r0, #4]
   1e12e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1e130:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1e134:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1e136:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1e13a:	2000      	movs	r0, #0
   1e13c:	4770      	bx	lr

0001e13e <gpio_nrfx_manage_callback>:
	return port->data;
   1e13e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1e140:	6858      	ldr	r0, [r3, #4]
{
   1e142:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1e144:	b158      	cbz	r0, 1e15e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e146:	2400      	movs	r4, #0
   1e148:	4281      	cmp	r1, r0
   1e14a:	d112      	bne.n	1e172 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1e14c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1e14e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1e150:	b954      	cbnz	r4, 1e168 <gpio_nrfx_manage_callback+0x2a>
   1e152:	428d      	cmp	r5, r1
	list->head = node;
   1e154:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e156:	d100      	bne.n	1e15a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1e158:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1e15a:	2000      	movs	r0, #0
   1e15c:	6008      	str	r0, [r1, #0]
	if (set) {
   1e15e:	b96a      	cbnz	r2, 1e17c <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1e160:	2000      	movs	r0, #0
}
   1e162:	bd30      	pop	{r4, r5, pc}
   1e164:	4628      	mov	r0, r5
   1e166:	e7ef      	b.n	1e148 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1e168:	428d      	cmp	r5, r1
	parent->next = child;
   1e16a:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1e16c:	bf08      	it	eq
   1e16e:	609c      	streq	r4, [r3, #8]
}
   1e170:	e7f3      	b.n	1e15a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1e172:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e174:	4604      	mov	r4, r0
   1e176:	2d00      	cmp	r5, #0
   1e178:	d1f4      	bne.n	1e164 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1e17a:	b13a      	cbz	r2, 1e18c <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1e17c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1e17e:	685a      	ldr	r2, [r3, #4]
   1e180:	600a      	str	r2, [r1, #0]
	list->head = node;
   1e182:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e184:	2800      	cmp	r0, #0
   1e186:	d1eb      	bne.n	1e160 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1e188:	6099      	str	r1, [r3, #8]
}
   1e18a:	e7ea      	b.n	1e162 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1e18c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e190:	e7e7      	b.n	1e162 <gpio_nrfx_manage_callback+0x24>

0001e192 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   1e192:	6902      	ldr	r2, [r0, #16]
{
   1e194:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1e196:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1e19a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1e19e:	2000      	movs	r0, #0
   1e1a0:	4770      	bx	lr

0001e1a2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1e1a2:	6843      	ldr	r3, [r0, #4]
   1e1a4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1e1a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1e1aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1e1ae:	4770      	bx	lr

0001e1b0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1e1b0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1e1b2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1e1b4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e1b6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1e1ba:	b150      	cbz	r0, 1e1d2 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   1e1bc:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e1be:	2000      	movs	r0, #0
   1e1c0:	7812      	ldrb	r2, [r2, #0]
   1e1c2:	700a      	strb	r2, [r1, #0]
   1e1c4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1e1c8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e1cc:	2201      	movs	r2, #1
   1e1ce:	601a      	str	r2, [r3, #0]
	return 0;
   1e1d0:	4770      	bx	lr
		return -1;
   1e1d2:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e1d6:	4770      	bx	lr

0001e1d8 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1e1d8:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1e1da:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e1dc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e1e0:	b940      	cbnz	r0, 1e1f4 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1e1e2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1e1e4:	079b      	lsls	r3, r3, #30
   1e1e6:	d406      	bmi.n	1e1f6 <is_tx_ready.isra.0+0x1e>
   1e1e8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1e1ec:	3800      	subs	r0, #0
   1e1ee:	bf18      	it	ne
   1e1f0:	2001      	movne	r0, #1
   1e1f2:	4770      	bx	lr
   1e1f4:	2001      	movs	r0, #1
}
   1e1f6:	4770      	bx	lr

0001e1f8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1e1f8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1e1fa:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1e1fc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1e200:	05c9      	lsls	r1, r1, #23
   1e202:	d518      	bpl.n	1e236 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e204:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1e208:	b1a9      	cbz	r1, 1e236 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1e20a:	f04f 0020 	mov.w	r0, #32
   1e20e:	f3ef 8111 	mrs	r1, BASEPRI
   1e212:	f380 8812 	msr	BASEPRI_MAX, r0
   1e216:	f3bf 8f6f 	isb	sy
   1e21a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1e21e:	b130      	cbz	r0, 1e22e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e220:	2000      	movs	r0, #0
   1e222:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1e226:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e22a:	2001      	movs	r0, #1
   1e22c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1e22e:	f381 8811 	msr	BASEPRI, r1
   1e232:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e236:	6852      	ldr	r2, [r2, #4]
   1e238:	06d2      	lsls	r2, r2, #27
   1e23a:	d515      	bpl.n	1e268 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1e23c:	f04f 0120 	mov.w	r1, #32
   1e240:	f3ef 8211 	mrs	r2, BASEPRI
   1e244:	f381 8812 	msr	BASEPRI_MAX, r1
   1e248:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e24c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1e250:	b111      	cbz	r1, 1e258 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e252:	2100      	movs	r1, #0
   1e254:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1e258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1e25c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1e260:	f382 8811 	msr	BASEPRI, r2
   1e264:	f3bf 8f6f 	isb	sy
}
   1e268:	4770      	bx	lr

0001e26a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1e26a:	b510      	push	{r4, lr}
   1e26c:	2200      	movs	r2, #0
   1e26e:	4604      	mov	r4, r0
   1e270:	2101      	movs	r1, #1
   1e272:	2028      	movs	r0, #40	; 0x28
   1e274:	f7e4 fc90 	bl	2b98 <z_arm_irq_priority_set>
   1e278:	2028      	movs	r0, #40	; 0x28
   1e27a:	f7e4 fc5b 	bl	2b34 <arch_irq_enable>
   1e27e:	4620      	mov	r0, r4
   1e280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e284:	f7f8 b990 	b.w	165a8 <uarte_instance_init.constprop.0>

0001e288 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1e288:	b510      	push	{r4, lr}
   1e28a:	2200      	movs	r2, #0
   1e28c:	4604      	mov	r4, r0
   1e28e:	2101      	movs	r1, #1
   1e290:	2002      	movs	r0, #2
   1e292:	f7e4 fc81 	bl	2b98 <z_arm_irq_priority_set>
   1e296:	2002      	movs	r0, #2
   1e298:	f7e4 fc4c 	bl	2b34 <arch_irq_enable>
   1e29c:	4620      	mov	r0, r4
   1e29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e2a2:	f7f8 b981 	b.w	165a8 <uarte_instance_init.constprop.0>

0001e2a6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1e2a6:	4770      	bx	lr

0001e2a8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1e2a8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1e2aa:	6843      	ldr	r3, [r0, #4]
   1e2ac:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e2ae:	7a03      	ldrb	r3, [r0, #8]
   1e2b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1e2b4:	3b01      	subs	r3, #1
   1e2b6:	00db      	lsls	r3, r3, #3
   1e2b8:	6845      	ldr	r5, [r0, #4]
   1e2ba:	6814      	ldr	r4, [r2, #0]
   1e2bc:	441d      	add	r5, r3
   1e2be:	42ac      	cmp	r4, r5
   1e2c0:	d902      	bls.n	1e2c8 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   1e2c2:	f06f 0001 	mvn.w	r0, #1
}
   1e2c6:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1e2c8:	7965      	ldrb	r5, [r4, #5]
   1e2ca:	428d      	cmp	r5, r1
   1e2cc:	d002      	beq.n	1e2d4 <pinctrl_lookup_state+0x2c>
		(*state)++;
   1e2ce:	3408      	adds	r4, #8
   1e2d0:	6014      	str	r4, [r2, #0]
   1e2d2:	e7f1      	b.n	1e2b8 <pinctrl_lookup_state+0x10>
			return 0;
   1e2d4:	2000      	movs	r0, #0
   1e2d6:	e7f6      	b.n	1e2c6 <pinctrl_lookup_state+0x1e>

0001e2d8 <nrf_gpio_pin_write>:
    if (value == 0)
   1e2d8:	b909      	cbnz	r1, 1e2de <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   1e2da:	f7f8 bddb 	b.w	16e94 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   1e2de:	f7f8 be0b 	b.w	16ef8 <nrf_gpio_pin_set>

0001e2e2 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1e2e2:	b570      	push	{r4, r5, r6, lr}
   1e2e4:	4615      	mov	r5, r2
   1e2e6:	4604      	mov	r4, r0
   1e2e8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1e2ec:	42a6      	cmp	r6, r4
   1e2ee:	d101      	bne.n	1e2f4 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   1e2f0:	2000      	movs	r0, #0
}
   1e2f2:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   1e2f4:	6823      	ldr	r3, [r4, #0]
   1e2f6:	0c1a      	lsrs	r2, r3, #16
   1e2f8:	2a22      	cmp	r2, #34	; 0x22
   1e2fa:	f200 808e 	bhi.w	1e41a <pinctrl_configure_pins+0x138>
   1e2fe:	e8df f002 	tbb	[pc, r2]
   1e302:	1d12      	.short	0x1d12
   1e304:	39294324 	.word	0x39294324
   1e308:	8c8c8c43 	.word	0x8c8c8c43
   1e30c:	8c4d488c 	.word	0x8c4d488c
   1e310:	8c8c8c8c 	.word	0x8c8c8c8c
   1e314:	8c8c8c8c 	.word	0x8c8c8c8c
   1e318:	68635e52 	.word	0x68635e52
   1e31c:	6d8c8c8c 	.word	0x6d8c8c8c
   1e320:	827d7873 	.word	0x827d7873
   1e324:	87          	.byte	0x87
   1e325:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   1e326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e32a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   1e32e:	6820      	ldr	r0, [r4, #0]
   1e330:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1e334:	f7f8 fde0 	bl	16ef8 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1e338:	2201      	movs	r2, #1
   1e33a:	e015      	b.n	1e368 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   1e33c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e340:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e344:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e346:	2100      	movs	r1, #0
   1e348:	e00f      	b.n	1e36a <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   1e34a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e34e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   1e352:	e7ec      	b.n	1e32e <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   1e354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e358:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1e35c:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   1e35e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1e362:	f7f8 fd97 	bl	16e94 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1e366:	2200      	movs	r2, #0
   1e368:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e36a:	6820      	ldr	r0, [r4, #0]
   1e36c:	f7f8 fda2 	bl	16eb4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1e370:	3404      	adds	r4, #4
   1e372:	e7bb      	b.n	1e2ec <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   1e374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e378:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1e37c:	6820      	ldr	r0, [r4, #0]
   1e37e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1e382:	f7f8 fd87 	bl	16e94 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1e386:	e7d7      	b.n	1e338 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   1e388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e38c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e390:	e7d8      	b.n	1e344 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   1e392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e396:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e39a:	e7d3      	b.n	1e344 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   1e39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3a0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   1e3a4:	e7ce      	b.n	1e344 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   1e3a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3aa:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1e3ae:	6820      	ldr	r0, [r4, #0]
   1e3b0:	f3c0 3140 	ubfx	r1, r0, #13, #1
   1e3b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1e3b8:	f7ff ff8e 	bl	1e2d8 <nrf_gpio_pin_write>
   1e3bc:	e7bc      	b.n	1e338 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   1e3be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3c2:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1e3c6:	e7f2      	b.n	1e3ae <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   1e3c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3cc:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   1e3d0:	e7ed      	b.n	1e3ae <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   1e3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3d6:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   1e3da:	e7e8      	b.n	1e3ae <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   1e3dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3e0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e3e4:	2201      	movs	r2, #1
   1e3e6:	e7ae      	b.n	1e346 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   1e3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3ec:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e3f0:	e7f8      	b.n	1e3e4 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   1e3f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e3f6:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e3fa:	e7f3      	b.n	1e3e4 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   1e3fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e400:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e404:	e7ee      	b.n	1e3e4 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   1e406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e40a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1e40e:	e7e9      	b.n	1e3e4 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   1e410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e414:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   1e418:	e7e4      	b.n	1e3e4 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   1e41a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e41e:	e768      	b.n	1e2f2 <pinctrl_configure_pins+0x10>

0001e420 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1e424:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   1e428:	f1a0 0308 	sub.w	r3, r0, #8
   1e42c:	4258      	negs	r0, r3
   1e42e:	4158      	adcs	r0, r3
   1e430:	4770      	bx	lr

0001e432 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e432:	4700      	bx	r0

0001e434 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1e434:	f000 bc89 	b.w	1ed4a <z_impl_k_busy_wait>

0001e438 <nrfx_clock_enable>:
{
   1e438:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e43a:	2000      	movs	r0, #0
   1e43c:	f7e4 fb9e 	bl	2b7c <arch_irq_is_enabled>
   1e440:	b908      	cbnz	r0, 1e446 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e442:	f7e4 fb77 	bl	2b34 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e44a:	2200      	movs	r2, #0
   1e44c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1e450:	bd08      	pop	{r3, pc}

0001e452 <nrfx_clock_start>:
{
   1e452:	b508      	push	{r3, lr}
    switch (domain)
   1e454:	b110      	cbz	r0, 1e45c <nrfx_clock_start+0xa>
   1e456:	2801      	cmp	r0, #1
   1e458:	d02d      	beq.n	1e4b6 <nrfx_clock_start+0x64>
}
   1e45a:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e45c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e460:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e464:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1e468:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   1e46c:	d10b      	bne.n	1e486 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1e46e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1e472:	07c9      	lsls	r1, r1, #31
   1e474:	d510      	bpl.n	1e498 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e476:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
   1e47a:	079b      	lsls	r3, r3, #30
   1e47c:	d408      	bmi.n	1e490 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
   1e47e:	2302      	movs	r3, #2
   1e480:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   1e484:	e7e9      	b.n	1e45a <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e486:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e48a:	2b01      	cmp	r3, #1
   1e48c:	d004      	beq.n	1e498 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
   1e48e:	b11b      	cbz	r3, 1e498 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e490:	2000      	movs	r0, #0
   1e492:	f7f8 fe8d 	bl	171b0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1e496:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e49c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4a0:	2300      	movs	r3, #0
   1e4a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1e4a6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1e4aa:	2302      	movs	r3, #2
   1e4ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4b0:	2301      	movs	r3, #1
   1e4b2:	6093      	str	r3, [r2, #8]
}
   1e4b4:	e7d1      	b.n	1e45a <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e4ba:	2200      	movs	r2, #0
   1e4bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e4c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e4c4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4c8:	6018      	str	r0, [r3, #0]
}
   1e4ca:	e7c6      	b.n	1e45a <nrfx_clock_start+0x8>

0001e4cc <nrfx_clock_stop>:
    clock_stop(domain);
   1e4cc:	f7f8 be70 	b.w	171b0 <clock_stop>

0001e4d0 <nrf_gpio_reconfigure>:
{
   1e4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e4d2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e4d4:	a801      	add	r0, sp, #4
{
   1e4d6:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   1e4da:	4617      	mov	r7, r2
   1e4dc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e4de:	f7f8 feff 	bl	172e0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e4e2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e4e4:	2f00      	cmp	r7, #0
   1e4e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e4ea:	bf14      	ite	ne
   1e4ec:	2302      	movne	r3, #2
   1e4ee:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e4f0:	2900      	cmp	r1, #0
   1e4f2:	bf18      	it	ne
   1e4f4:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e4f8:	2d00      	cmp	r5, #0
   1e4fa:	bf14      	ite	ne
   1e4fc:	f04f 0c0c 	movne.w	ip, #12
   1e500:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e504:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e506:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e50a:	bf14      	ite	ne
   1e50c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1e510:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e514:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e516:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e51a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e51e:	bf14      	ite	ne
   1e520:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1e524:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e528:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1e52c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e530:	b101      	cbz	r1, 1e534 <nrf_gpio_reconfigure+0x64>
   1e532:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1e534:	b10f      	cbz	r7, 1e53a <nrf_gpio_reconfigure+0x6a>
   1e536:	783f      	ldrb	r7, [r7, #0]
   1e538:	007f      	lsls	r7, r7, #1
   1e53a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1e53c:	b10d      	cbz	r5, 1e542 <nrf_gpio_reconfigure+0x72>
   1e53e:	782d      	ldrb	r5, [r5, #0]
   1e540:	00ad      	lsls	r5, r5, #2
   1e542:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e544:	b10c      	cbz	r4, 1e54a <nrf_gpio_reconfigure+0x7a>
   1e546:	7822      	ldrb	r2, [r4, #0]
   1e548:	0214      	lsls	r4, r2, #8
   1e54a:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1e54c:	b10e      	cbz	r6, 1e552 <nrf_gpio_reconfigure+0x82>
   1e54e:	7836      	ldrb	r6, [r6, #0]
   1e550:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e552:	432c      	orrs	r4, r5
   1e554:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   1e556:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   1e55a:	b003      	add	sp, #12
   1e55c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e55e <nrf_gpio_cfg_sense_set>:
{
   1e55e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e560:	f10d 030f 	add.w	r3, sp, #15
   1e564:	9301      	str	r3, [sp, #4]
   1e566:	2300      	movs	r3, #0
{
   1e568:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e56c:	9300      	str	r3, [sp, #0]
   1e56e:	461a      	mov	r2, r3
   1e570:	4619      	mov	r1, r3
   1e572:	f7ff ffad 	bl	1e4d0 <nrf_gpio_reconfigure>
}
   1e576:	b005      	add	sp, #20
   1e578:	f85d fb04 	ldr.w	pc, [sp], #4

0001e57c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1e57c:	f7f9 ba16 	b.w	179ac <_DoInit>

0001e580 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1e580:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1e582:	f7ff fffb 	bl	1e57c <SEGGER_RTT_Init>

	return 0;
}
   1e586:	2000      	movs	r0, #0
   1e588:	bd08      	pop	{r3, pc}

0001e58a <z_device_state_init>:
}
   1e58a:	4770      	bx	lr

0001e58c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1e58c:	b138      	cbz	r0, 1e59e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1e58e:	68c3      	ldr	r3, [r0, #12]
   1e590:	8818      	ldrh	r0, [r3, #0]
   1e592:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1e596:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1e59a:	4258      	negs	r0, r3
   1e59c:	4158      	adcs	r0, r3
}
   1e59e:	4770      	bx	lr

0001e5a0 <arch_system_halt>:
	__asm__ volatile(
   1e5a0:	f04f 0220 	mov.w	r2, #32
   1e5a4:	f3ef 8311 	mrs	r3, BASEPRI
   1e5a8:	f382 8812 	msr	BASEPRI_MAX, r2
   1e5ac:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1e5b0:	e7fe      	b.n	1e5b0 <arch_system_halt+0x10>

0001e5b2 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1e5b2:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1e5b4:	f7ff fff4 	bl	1e5a0 <arch_system_halt>

0001e5b8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5ba:	4605      	mov	r5, r0
   1e5bc:	460e      	mov	r6, r1
   1e5be:	f04f 0320 	mov.w	r3, #32
   1e5c2:	f3ef 8711 	mrs	r7, BASEPRI
   1e5c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5ca:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e5ce:	f7fa f97b 	bl	188c8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e5d2:	4631      	mov	r1, r6
   1e5d4:	4604      	mov	r4, r0
   1e5d6:	4628      	mov	r0, r5
   1e5d8:	f7ff ffeb 	bl	1e5b2 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1e5dc:	f387 8811 	msr	BASEPRI, r7
   1e5e0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e5e4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1e5e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e5ea:	f7e4 bd11 	b.w	3010 <z_impl_k_thread_abort>

0001e5ee <z_early_memset>:
	(void) memset(dst, c, n);
   1e5ee:	f7fc b93b 	b.w	1a868 <memset>

0001e5f2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1e5f2:	f7fc b92e 	b.w	1a852 <memcpy>

0001e5f6 <k_heap_init>:
{
   1e5f6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1e5f8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1e5fc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1e600:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1e602:	f7fa bf31 	b.w	19468 <sys_heap_init>

0001e606 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1e606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e60a:	b085      	sub	sp, #20
   1e60c:	4606      	mov	r6, r0
   1e60e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e610:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1e614:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e616:	f000 fb9c 	bl	1ed52 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e61a:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e61e:	4605      	mov	r5, r0
   1e620:	460f      	mov	r7, r1
	__asm__ volatile(
   1e622:	f04f 0320 	mov.w	r3, #32
   1e626:	f3ef 8411 	mrs	r4, BASEPRI
   1e62a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e62e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e632:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1e636:	464a      	mov	r2, r9
   1e638:	4641      	mov	r1, r8
   1e63a:	4630      	mov	r0, r6
   1e63c:	f7fa feac 	bl	19398 <sys_heap_aligned_alloc>
   1e640:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1e642:	f7fa faf3 	bl	18c2c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1e646:	9b03      	ldr	r3, [sp, #12]
   1e648:	b13b      	cbz	r3, 1e65a <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1e64a:	f384 8811 	msr	BASEPRI, r4
   1e64e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1e652:	4618      	mov	r0, r3
   1e654:	b005      	add	sp, #20
   1e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1e65a:	1a28      	subs	r0, r5, r0
   1e65c:	eb67 0101 	sbc.w	r1, r7, r1
   1e660:	2801      	cmp	r0, #1
   1e662:	f171 0200 	sbcs.w	r2, r1, #0
   1e666:	dbf0      	blt.n	1e64a <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e668:	e9cd 0100 	strd	r0, r1, [sp]
   1e66c:	465a      	mov	r2, fp
   1e66e:	4621      	mov	r1, r4
   1e670:	4650      	mov	r0, sl
   1e672:	f7fa f819 	bl	186a8 <z_pend_curr>
	__asm__ volatile(
   1e676:	f04f 0320 	mov.w	r3, #32
   1e67a:	f3ef 8411 	mrs	r4, BASEPRI
   1e67e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e682:	f3bf 8f6f 	isb	sy
   1e686:	e7d6      	b.n	1e636 <k_heap_aligned_alloc+0x30>

0001e688 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1e688:	b538      	push	{r3, r4, r5, lr}
   1e68a:	4604      	mov	r4, r0
   1e68c:	f04f 0320 	mov.w	r3, #32
   1e690:	f3ef 8511 	mrs	r5, BASEPRI
   1e694:	f383 8812 	msr	BASEPRI_MAX, r3
   1e698:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1e69c:	f7fa fe44 	bl	19328 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1e6a0:	f104 000c 	add.w	r0, r4, #12
   1e6a4:	f000 fae0 	bl	1ec68 <z_unpend_all>
   1e6a8:	b130      	cbz	r0, 1e6b8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1e6aa:	4629      	mov	r1, r5
   1e6ac:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1e6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1e6b4:	f7f9 bea4 	b.w	18400 <z_reschedule>
	__asm__ volatile(
   1e6b8:	f385 8811 	msr	BASEPRI, r5
   1e6bc:	f3bf 8f6f 	isb	sy
}
   1e6c0:	bd38      	pop	{r3, r4, r5, pc}

0001e6c2 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6c4:	4604      	mov	r4, r0
   1e6c6:	460d      	mov	r5, r1
	__asm__ volatile(
   1e6c8:	f04f 0320 	mov.w	r3, #32
   1e6cc:	f3ef 8611 	mrs	r6, BASEPRI
   1e6d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e6d8:	6947      	ldr	r7, [r0, #20]
   1e6da:	b977      	cbnz	r7, 1e6fa <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e6dc:	f000 faac 	bl	1ec38 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1e6e0:	b158      	cbz	r0, 1e6fa <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e6e2:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e6e4:	6142      	str	r2, [r0, #20]
   1e6e6:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1e6e8:	f000 fa4a 	bl	1eb80 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1e6ec:	4631      	mov	r1, r6
   1e6ee:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1e6f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1e6f6:	f7f9 be83 	b.w	18400 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1e6fa:	682b      	ldr	r3, [r5, #0]
   1e6fc:	6962      	ldr	r2, [r4, #20]
   1e6fe:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e700:	682b      	ldr	r3, [r5, #0]
   1e702:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1e704:	69a3      	ldr	r3, [r4, #24]
   1e706:	3b01      	subs	r3, #1
   1e708:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1e70a:	f386 8811 	msr	BASEPRI, r6
   1e70e:	f3bf 8f6f 	isb	sy
}
   1e712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e714 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e714:	f3ef 8005 	mrs	r0, IPSR
}
   1e718:	3800      	subs	r0, #0
   1e71a:	bf18      	it	ne
   1e71c:	2001      	movne	r0, #1
   1e71e:	4770      	bx	lr

0001e720 <z_impl_k_thread_name_set>:
}
   1e720:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1e724:	4770      	bx	lr

0001e726 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1e726:	f7f9 bf63 	b.w	185f0 <z_sched_start>

0001e72a <z_pm_save_idle_exit>:
{
   1e72a:	b508      	push	{r3, lr}
	pm_system_resume();
   1e72c:	f7e3 ffb6 	bl	269c <pm_system_resume>
}
   1e730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1e734:	f7ff bdb7 	b.w	1e2a6 <sys_clock_idle_exit>

0001e738 <queue_insert>:
{
   1e738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e73c:	4699      	mov	r9, r3
   1e73e:	4604      	mov	r4, r0
   1e740:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1e744:	460d      	mov	r5, r1
   1e746:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e748:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1e74c:	f04f 0220 	mov.w	r2, #32
   1e750:	f3ef 8711 	mrs	r7, BASEPRI
   1e754:	f382 8812 	msr	BASEPRI_MAX, r2
   1e758:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1e75c:	b103      	cbz	r3, 1e760 <queue_insert+0x28>
	return list->tail;
   1e75e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1e760:	4630      	mov	r0, r6
   1e762:	f000 fa69 	bl	1ec38 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1e766:	b158      	cbz	r0, 1e780 <queue_insert+0x48>
   1e768:	2400      	movs	r4, #0
   1e76a:	67c4      	str	r4, [r0, #124]	; 0x7c
   1e76c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1e770:	f000 fa06 	bl	1eb80 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1e774:	4630      	mov	r0, r6
   1e776:	4639      	mov	r1, r7
   1e778:	f7f9 fe42 	bl	18400 <z_reschedule>
	return 0;
   1e77c:	2000      	movs	r0, #0
   1e77e:	e00c      	b.n	1e79a <queue_insert+0x62>
	if (alloc) {
   1e780:	f1b9 0f00 	cmp.w	r9, #0
   1e784:	d01b      	beq.n	1e7be <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1e786:	2108      	movs	r1, #8
   1e788:	f7fa faec 	bl	18d64 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1e78c:	b938      	cbnz	r0, 1e79e <queue_insert+0x66>
	__asm__ volatile(
   1e78e:	f387 8811 	msr	BASEPRI, r7
   1e792:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1e796:	f06f 000b 	mvn.w	r0, #11
}
   1e79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1e79e:	2301      	movs	r3, #1
		anode->data = data;
   1e7a0:	f8c0 8004 	str.w	r8, [r0, #4]
   1e7a4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e7a6:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e7a8:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1e7ac:	b95d      	cbnz	r5, 1e7c6 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e7ae:	6823      	ldr	r3, [r4, #0]
   1e7b0:	4313      	orrs	r3, r2
   1e7b2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e7b4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e7b6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e7b8:	b973      	cbnz	r3, 1e7d8 <queue_insert+0xa0>
	list->tail = node;
   1e7ba:	6060      	str	r0, [r4, #4]
}
   1e7bc:	e00c      	b.n	1e7d8 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1e7be:	f8c8 9000 	str.w	r9, [r8]
}
   1e7c2:	4640      	mov	r0, r8
   1e7c4:	e7ef      	b.n	1e7a6 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e7c6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e7c8:	f033 0303 	bics.w	r3, r3, #3
   1e7cc:	d110      	bne.n	1e7f0 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e7ce:	6002      	str	r2, [r0, #0]
	return list->tail;
   1e7d0:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1e7d2:	b93a      	cbnz	r2, 1e7e4 <queue_insert+0xac>
	list->head = node;
   1e7d4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e7d8:	2104      	movs	r1, #4
   1e7da:	f104 0010 	add.w	r0, r4, #16
   1e7de:	f000 fc21 	bl	1f024 <z_handle_obj_poll_events>
   1e7e2:	e7c7      	b.n	1e774 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e7e4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e7e6:	f003 0303 	and.w	r3, r3, #3
   1e7ea:	4303      	orrs	r3, r0
   1e7ec:	6013      	str	r3, [r2, #0]
   1e7ee:	e7e4      	b.n	1e7ba <queue_insert+0x82>
   1e7f0:	4313      	orrs	r3, r2
   1e7f2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e7f4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e7f6:	f003 0303 	and.w	r3, r3, #3
   1e7fa:	4303      	orrs	r3, r0
   1e7fc:	602b      	str	r3, [r5, #0]
}
   1e7fe:	e7eb      	b.n	1e7d8 <queue_insert+0xa0>

0001e800 <z_queue_node_peek>:
{
   1e800:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1e802:	4604      	mov	r4, r0
   1e804:	b130      	cbz	r0, 1e814 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e806:	6802      	ldr	r2, [r0, #0]
   1e808:	0793      	lsls	r3, r2, #30
   1e80a:	d003      	beq.n	1e814 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e80c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e80e:	b109      	cbz	r1, 1e814 <z_queue_node_peek+0x14>
			k_free(anode);
   1e810:	f000 fc16 	bl	1f040 <k_free>
}
   1e814:	4620      	mov	r0, r4
   1e816:	bd10      	pop	{r4, pc}

0001e818 <z_impl_k_queue_init>:
	list->head = NULL;
   1e818:	2300      	movs	r3, #0
	list->tail = NULL;
   1e81a:	e9c0 3300 	strd	r3, r3, [r0]
   1e81e:	f100 0308 	add.w	r3, r0, #8
   1e822:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1e826:	f100 0310 	add.w	r3, r0, #16
   1e82a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1e82e:	4770      	bx	lr

0001e830 <k_queue_append>:
{
   1e830:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1e832:	2301      	movs	r3, #1
   1e834:	9300      	str	r3, [sp, #0]
   1e836:	2300      	movs	r3, #0
{
   1e838:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1e83a:	4619      	mov	r1, r3
   1e83c:	f7ff ff7c 	bl	1e738 <queue_insert>
}
   1e840:	b003      	add	sp, #12
   1e842:	f85d fb04 	ldr.w	pc, [sp], #4

0001e846 <k_queue_prepend>:
{
   1e846:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1e848:	2300      	movs	r3, #0
{
   1e84a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e84c:	9300      	str	r3, [sp, #0]
   1e84e:	4619      	mov	r1, r3
   1e850:	f7ff ff72 	bl	1e738 <queue_insert>
}
   1e854:	b003      	add	sp, #12
   1e856:	f85d fb04 	ldr.w	pc, [sp], #4

0001e85a <k_queue_append_list>:
{
   1e85a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e85e:	4605      	mov	r5, r0
   1e860:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1e862:	460c      	mov	r4, r1
   1e864:	b391      	cbz	r1, 1e8cc <k_queue_append_list+0x72>
   1e866:	b38a      	cbz	r2, 1e8cc <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e868:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1e86c:	f04f 0320 	mov.w	r3, #32
   1e870:	f3ef 8811 	mrs	r8, BASEPRI
   1e874:	f383 8812 	msr	BASEPRI_MAX, r3
   1e878:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1e87c:	4638      	mov	r0, r7
   1e87e:	f000 f9db 	bl	1ec38 <z_unpend_first_thread>
   1e882:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1e886:	b920      	cbnz	r0, 1e892 <k_queue_append_list+0x38>
	return list->tail;
   1e888:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e88a:	b9ca      	cbnz	r2, 1e8c0 <k_queue_append_list+0x66>
	list->head = node;
   1e88c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1e88e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1e890:	e00a      	b.n	1e8a8 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1e892:	6144      	str	r4, [r0, #20]
   1e894:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1e898:	f000 f972 	bl	1eb80 <z_ready_thread>
		head = *(void **)head;
   1e89c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1e89e:	4638      	mov	r0, r7
   1e8a0:	f000 f9ca 	bl	1ec38 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1e8a4:	2c00      	cmp	r4, #0
   1e8a6:	d1ee      	bne.n	1e886 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e8a8:	2104      	movs	r1, #4
   1e8aa:	f105 0010 	add.w	r0, r5, #16
   1e8ae:	f000 fbb9 	bl	1f024 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e8b2:	4638      	mov	r0, r7
   1e8b4:	4641      	mov	r1, r8
   1e8b6:	f7f9 fda3 	bl	18400 <z_reschedule>
	return 0;
   1e8ba:	2000      	movs	r0, #0
}
   1e8bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e8c0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e8c2:	f003 0303 	and.w	r3, r3, #3
   1e8c6:	431c      	orrs	r4, r3
   1e8c8:	6014      	str	r4, [r2, #0]
}
   1e8ca:	e7e0      	b.n	1e88e <k_queue_append_list+0x34>
		return -EINVAL;
   1e8cc:	f06f 0015 	mvn.w	r0, #21
   1e8d0:	e7f4      	b.n	1e8bc <k_queue_append_list+0x62>

0001e8d2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1e8d2:	b15a      	cbz	r2, 1e8ec <z_impl_k_sem_init+0x1a>
   1e8d4:	428a      	cmp	r2, r1
   1e8d6:	d309      	bcc.n	1e8ec <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e8d8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e8dc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1e8e0:	e9c0 0000 	strd	r0, r0, [r0]
   1e8e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e8e8:	2000      	movs	r0, #0
   1e8ea:	4770      	bx	lr
		return -EINVAL;
   1e8ec:	f06f 0015 	mvn.w	r0, #21
}
   1e8f0:	4770      	bx	lr

0001e8f2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1e8f2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1e8f4:	2301      	movs	r3, #1
   1e8f6:	408b      	lsls	r3, r1
   1e8f8:	ea22 0303 	bic.w	r3, r2, r3
   1e8fc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1e8fe:	fa22 f001 	lsr.w	r0, r2, r1
}
   1e902:	f000 0001 	and.w	r0, r0, #1
   1e906:	4770      	bx	lr

0001e908 <unschedule_locked>:
{
   1e908:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e90a:	2103      	movs	r1, #3
{
   1e90c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1e90e:	300c      	adds	r0, #12
   1e910:	f7ff ffef 	bl	1e8f2 <flag_test_and_clear>
   1e914:	4604      	mov	r4, r0
   1e916:	b118      	cbz	r0, 1e920 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1e918:	f105 0010 	add.w	r0, r5, #16
   1e91c:	f000 f9d1 	bl	1ecc2 <z_abort_timeout>
}
   1e920:	4620      	mov	r0, r4
   1e922:	bd38      	pop	{r3, r4, r5, pc}

0001e924 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1e924:	b120      	cbz	r0, 1e930 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1e926:	2200      	movs	r2, #0
   1e928:	4611      	mov	r1, r2
   1e92a:	3088      	adds	r0, #136	; 0x88
   1e92c:	f000 b9ac 	b.w	1ec88 <z_sched_wake>
}
   1e930:	4770      	bx	lr

0001e932 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1e932:	68c3      	ldr	r3, [r0, #12]
{
   1e934:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e936:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1e93a:	079b      	lsls	r3, r3, #30
{
   1e93c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e93e:	d416      	bmi.n	1e96e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1e940:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1e942:	2102      	movs	r1, #2
   1e944:	300c      	adds	r0, #12
   1e946:	f7ff ffd4 	bl	1e8f2 <flag_test_and_clear>
   1e94a:	b180      	cbz	r0, 1e96e <cancel_async_locked+0x3c>
	return list->head;
   1e94c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e950:	b16a      	cbz	r2, 1e96e <cancel_async_locked+0x3c>
   1e952:	4294      	cmp	r4, r2
   1e954:	d11b      	bne.n	1e98e <cancel_async_locked+0x5c>
	return node->next;
   1e956:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1e958:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1e95c:	b98d      	cbnz	r5, 1e982 <cancel_async_locked+0x50>
   1e95e:	428c      	cmp	r4, r1
	list->head = node;
   1e960:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1e964:	d101      	bne.n	1e96a <cancel_async_locked+0x38>
	list->tail = node;
   1e966:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1e96a:	2300      	movs	r3, #0
   1e96c:	6023      	str	r3, [r4, #0]
	return *flagp;
   1e96e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1e970:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1e974:	bf1e      	ittt	ne
   1e976:	f043 0302 	orrne.w	r3, r3, #2
   1e97a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1e97c:	f003 000f 	andne.w	r0, r3, #15
}
   1e980:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e982:	428c      	cmp	r4, r1
	parent->next = child;
   1e984:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1e986:	bf08      	it	eq
   1e988:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1e98c:	e7ed      	b.n	1e96a <cancel_async_locked+0x38>
	return node->next;
   1e98e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e990:	6812      	ldr	r2, [r2, #0]
   1e992:	e7dd      	b.n	1e950 <cancel_async_locked+0x1e>

0001e994 <work_timeout>:
{
   1e994:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e996:	4604      	mov	r4, r0
   1e998:	f04f 0320 	mov.w	r3, #32
   1e99c:	f3ef 8511 	mrs	r5, BASEPRI
   1e9a0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e9a4:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1e9a8:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e9aa:	f1a0 0610 	sub.w	r6, r0, #16
   1e9ae:	2103      	movs	r1, #3
   1e9b0:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1e9b2:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1e9b4:	f7ff ff9d 	bl	1e8f2 <flag_test_and_clear>
   1e9b8:	b128      	cbz	r0, 1e9c6 <work_timeout+0x32>
		queue = dw->queue;
   1e9ba:	69a3      	ldr	r3, [r4, #24]
   1e9bc:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1e9be:	a901      	add	r1, sp, #4
   1e9c0:	4630      	mov	r0, r6
   1e9c2:	f7f9 fbe5 	bl	18190 <submit_to_queue_locked>
	__asm__ volatile(
   1e9c6:	f385 8811 	msr	BASEPRI, r5
   1e9ca:	f3bf 8f6f 	isb	sy
}
   1e9ce:	b002      	add	sp, #8
   1e9d0:	bd70      	pop	{r4, r5, r6, pc}

0001e9d2 <k_work_init>:
{
   1e9d2:	b538      	push	{r3, r4, r5, lr}
   1e9d4:	4604      	mov	r4, r0
   1e9d6:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1e9d8:	2210      	movs	r2, #16
   1e9da:	2100      	movs	r1, #0
   1e9dc:	f7fb ff44 	bl	1a868 <memset>
   1e9e0:	6065      	str	r5, [r4, #4]
}
   1e9e2:	bd38      	pop	{r3, r4, r5, pc}

0001e9e4 <k_work_busy_get>:
	__asm__ volatile(
   1e9e4:	f04f 0220 	mov.w	r2, #32
   1e9e8:	f3ef 8311 	mrs	r3, BASEPRI
   1e9ec:	f382 8812 	msr	BASEPRI_MAX, r2
   1e9f0:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1e9f4:	68c0      	ldr	r0, [r0, #12]
   1e9f6:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1e9fa:	f383 8811 	msr	BASEPRI, r3
   1e9fe:	f3bf 8f6f 	isb	sy
}
   1ea02:	4770      	bx	lr

0001ea04 <z_work_submit_to_queue>:
{
   1ea04:	b513      	push	{r0, r1, r4, lr}
   1ea06:	9001      	str	r0, [sp, #4]
   1ea08:	4608      	mov	r0, r1
	__asm__ volatile(
   1ea0a:	f04f 0320 	mov.w	r3, #32
   1ea0e:	f3ef 8411 	mrs	r4, BASEPRI
   1ea12:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea16:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1ea1a:	a901      	add	r1, sp, #4
   1ea1c:	f7f9 fbb8 	bl	18190 <submit_to_queue_locked>
	__asm__ volatile(
   1ea20:	f384 8811 	msr	BASEPRI, r4
   1ea24:	f3bf 8f6f 	isb	sy
}
   1ea28:	b002      	add	sp, #8
   1ea2a:	bd10      	pop	{r4, pc}

0001ea2c <k_work_submit_to_queue>:
{
   1ea2c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1ea2e:	f7ff ffe9 	bl	1ea04 <z_work_submit_to_queue>
	if (ret > 0) {
   1ea32:	1e04      	subs	r4, r0, #0
   1ea34:	dd09      	ble.n	1ea4a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1ea36:	f04f 0320 	mov.w	r3, #32
   1ea3a:	f3ef 8011 	mrs	r0, BASEPRI
   1ea3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea42:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ea46:	f000 f87f 	bl	1eb48 <z_reschedule_irqlock>
}
   1ea4a:	4620      	mov	r0, r4
   1ea4c:	bd10      	pop	{r4, pc}

0001ea4e <k_work_init_delayable>:
{
   1ea4e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1ea50:	2230      	movs	r2, #48	; 0x30
{
   1ea52:	4604      	mov	r4, r0
   1ea54:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1ea56:	2100      	movs	r1, #0
   1ea58:	f7fb ff06 	bl	1a868 <memset>
   1ea5c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ea60:	6065      	str	r5, [r4, #4]
   1ea62:	60e3      	str	r3, [r4, #12]
}
   1ea64:	bd38      	pop	{r3, r4, r5, pc}

0001ea66 <k_work_delayable_busy_get>:
   1ea66:	f7ff bfbd 	b.w	1e9e4 <k_work_busy_get>

0001ea6a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1ea6a:	b538      	push	{r3, r4, r5, lr}
   1ea6c:	4604      	mov	r4, r0
   1ea6e:	f04f 0320 	mov.w	r3, #32
   1ea72:	f3ef 8511 	mrs	r5, BASEPRI
   1ea76:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea7a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1ea7e:	f7ff ff43 	bl	1e908 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ea82:	4620      	mov	r0, r4
   1ea84:	f7ff ff55 	bl	1e932 <cancel_async_locked>
	__asm__ volatile(
   1ea88:	f385 8811 	msr	BASEPRI, r5
   1ea8c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1ea90:	bd38      	pop	{r3, r4, r5, pc}

0001ea92 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1ea92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea94:	4604      	mov	r4, r0
   1ea96:	460d      	mov	r5, r1
	__asm__ volatile(
   1ea98:	f04f 0320 	mov.w	r3, #32
   1ea9c:	f3ef 8711 	mrs	r7, BASEPRI
   1eaa0:	f383 8812 	msr	BASEPRI_MAX, r3
   1eaa4:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1eaa8:	68c3      	ldr	r3, [r0, #12]
   1eaaa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1eaae:	2b00      	cmp	r3, #0
   1eab0:	bf14      	ite	ne
   1eab2:	2601      	movne	r6, #1
   1eab4:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1eab6:	d009      	beq.n	1eacc <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   1eab8:	f7ff ff26 	bl	1e908 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1eabc:	4620      	mov	r0, r4
   1eabe:	f7ff ff38 	bl	1e932 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1eac2:	4629      	mov	r1, r5
   1eac4:	4620      	mov	r0, r4
   1eac6:	f7f9 fb45 	bl	18154 <cancel_sync_locked>
   1eaca:	4603      	mov	r3, r0
	__asm__ volatile(
   1eacc:	f387 8811 	msr	BASEPRI, r7
   1ead0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1ead4:	b13b      	cbz	r3, 1eae6 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   1ead6:	f04f 32ff 	mov.w	r2, #4294967295
   1eada:	f04f 33ff 	mov.w	r3, #4294967295
   1eade:	f105 0008 	add.w	r0, r5, #8
   1eae2:	f7f9 fa3d 	bl	17f60 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1eae6:	4630      	mov	r0, r6
   1eae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eaea <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1eaea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1eaee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1eaf0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1eaf2:	2300      	movs	r3, #0
	node->prev = NULL;
   1eaf4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1eaf8:	4770      	bx	lr

0001eafa <unpend_thread_no_timeout>:
{
   1eafa:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1eafc:	f7ff fff5 	bl	1eaea <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1eb00:	7b43      	ldrb	r3, [r0, #13]
   1eb02:	f023 0302 	bic.w	r3, r3, #2
   1eb06:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1eb08:	2300      	movs	r3, #0
   1eb0a:	6083      	str	r3, [r0, #8]
}
   1eb0c:	bd08      	pop	{r3, pc}

0001eb0e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1eb0e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1eb12:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1eb16:	4283      	cmp	r3, r0
		return b2 - b1;
   1eb18:	bf14      	ite	ne
   1eb1a:	1ac0      	subne	r0, r0, r3
	return 0;
   1eb1c:	2000      	moveq	r0, #0
}
   1eb1e:	4770      	bx	lr

0001eb20 <z_unpend_thread>:
{
   1eb20:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eb22:	f04f 0320 	mov.w	r3, #32
   1eb26:	f3ef 8411 	mrs	r4, BASEPRI
   1eb2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb2e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1eb32:	f7ff ffe2 	bl	1eafa <unpend_thread_no_timeout>
	__asm__ volatile(
   1eb36:	f384 8811 	msr	BASEPRI, r4
   1eb3a:	f3bf 8f6f 	isb	sy
}
   1eb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eb42:	3018      	adds	r0, #24
   1eb44:	f000 b8bd 	b.w	1ecc2 <z_abort_timeout>

0001eb48 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb48:	4603      	mov	r3, r0
   1eb4a:	b920      	cbnz	r0, 1eb56 <z_reschedule_irqlock+0xe>
   1eb4c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1eb50:	b90a      	cbnz	r2, 1eb56 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1eb52:	f7e4 b86f 	b.w	2c34 <arch_swap>
   1eb56:	f383 8811 	msr	BASEPRI, r3
   1eb5a:	f3bf 8f6f 	isb	sy
}
   1eb5e:	4770      	bx	lr

0001eb60 <z_reschedule_unlocked>:
	__asm__ volatile(
   1eb60:	f04f 0320 	mov.w	r3, #32
   1eb64:	f3ef 8011 	mrs	r0, BASEPRI
   1eb68:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1eb70:	f7ff bfea 	b.w	1eb48 <z_reschedule_irqlock>

0001eb74 <z_priq_dumb_best>:
{
   1eb74:	4603      	mov	r3, r0
	return list->head == list;
   1eb76:	6800      	ldr	r0, [r0, #0]
}
   1eb78:	4283      	cmp	r3, r0
   1eb7a:	bf08      	it	eq
   1eb7c:	2000      	moveq	r0, #0
   1eb7e:	4770      	bx	lr

0001eb80 <z_ready_thread>:
{
   1eb80:	b510      	push	{r4, lr}
   1eb82:	f04f 0320 	mov.w	r3, #32
   1eb86:	f3ef 8411 	mrs	r4, BASEPRI
   1eb8a:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb8e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1eb92:	f7f9 fcf7 	bl	18584 <ready_thread>
	__asm__ volatile(
   1eb96:	f384 8811 	msr	BASEPRI, r4
   1eb9a:	f3bf 8f6f 	isb	sy
}
   1eb9e:	bd10      	pop	{r4, pc}

0001eba0 <z_thread_timeout>:
{
   1eba0:	b510      	push	{r4, lr}
   1eba2:	4601      	mov	r1, r0
	__asm__ volatile(
   1eba4:	f04f 0320 	mov.w	r3, #32
   1eba8:	f3ef 8411 	mrs	r4, BASEPRI
   1ebac:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebb0:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1ebb4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1ebb8:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ebbc:	d10d      	bne.n	1ebda <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1ebbe:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ebc2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1ebc4:	b10b      	cbz	r3, 1ebca <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1ebc6:	f7ff ff98 	bl	1eafa <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ebca:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1ebce:	f023 0314 	bic.w	r3, r3, #20
   1ebd2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1ebd6:	f7f9 fcd5 	bl	18584 <ready_thread>
	__asm__ volatile(
   1ebda:	f384 8811 	msr	BASEPRI, r4
   1ebde:	f3bf 8f6f 	isb	sy
}
   1ebe2:	bd10      	pop	{r4, pc}

0001ebe4 <add_to_waitq_locked>:
{
   1ebe4:	b538      	push	{r3, r4, r5, lr}
   1ebe6:	4604      	mov	r4, r0
   1ebe8:	460d      	mov	r5, r1
	unready_thread(thread);
   1ebea:	f7f9 fd1f 	bl	1862c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1ebee:	7b63      	ldrb	r3, [r4, #13]
   1ebf0:	f043 0302 	orr.w	r3, r3, #2
   1ebf4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ebf6:	b195      	cbz	r5, 1ec1e <add_to_waitq_locked+0x3a>
   1ebf8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1ebfa:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ebfc:	429d      	cmp	r5, r3
   1ebfe:	d015      	beq.n	1ec2c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ec00:	b1a3      	cbz	r3, 1ec2c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1ec02:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1ec06:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1ec0a:	4291      	cmp	r1, r2
   1ec0c:	d008      	beq.n	1ec20 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1ec0e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ec10:	2a00      	cmp	r2, #0
   1ec12:	dd05      	ble.n	1ec20 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1ec14:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ec16:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ec1a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ec1c:	605c      	str	r4, [r3, #4]
}
   1ec1e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1ec20:	686a      	ldr	r2, [r5, #4]
   1ec22:	4293      	cmp	r3, r2
   1ec24:	d002      	beq.n	1ec2c <add_to_waitq_locked+0x48>
   1ec26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ec28:	2b00      	cmp	r3, #0
   1ec2a:	d1ec      	bne.n	1ec06 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1ec2c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1ec2e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1ec32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ec34:	606c      	str	r4, [r5, #4]
}
   1ec36:	e7f2      	b.n	1ec1e <add_to_waitq_locked+0x3a>

0001ec38 <z_unpend_first_thread>:
{
   1ec38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ec3a:	f04f 0320 	mov.w	r3, #32
   1ec3e:	f3ef 8511 	mrs	r5, BASEPRI
   1ec42:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec46:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1ec4a:	f7ff ff93 	bl	1eb74 <z_priq_dumb_best>
		if (thread != NULL) {
   1ec4e:	4604      	mov	r4, r0
   1ec50:	b120      	cbz	r0, 1ec5c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1ec52:	f7ff ff52 	bl	1eafa <unpend_thread_no_timeout>
   1ec56:	3018      	adds	r0, #24
   1ec58:	f000 f833 	bl	1ecc2 <z_abort_timeout>
	__asm__ volatile(
   1ec5c:	f385 8811 	msr	BASEPRI, r5
   1ec60:	f3bf 8f6f 	isb	sy
}
   1ec64:	4620      	mov	r0, r4
   1ec66:	bd38      	pop	{r3, r4, r5, pc}

0001ec68 <z_unpend_all>:
{
   1ec68:	b538      	push	{r3, r4, r5, lr}
   1ec6a:	4605      	mov	r5, r0
	int need_sched = 0;
   1ec6c:	2000      	movs	r0, #0
	return list->head == list;
   1ec6e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ec70:	42a5      	cmp	r5, r4
   1ec72:	d000      	beq.n	1ec76 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ec74:	b904      	cbnz	r4, 1ec78 <z_unpend_all+0x10>
}
   1ec76:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1ec78:	4620      	mov	r0, r4
   1ec7a:	f7ff ff51 	bl	1eb20 <z_unpend_thread>
		z_ready_thread(thread);
   1ec7e:	4620      	mov	r0, r4
   1ec80:	f7ff ff7e 	bl	1eb80 <z_ready_thread>
		need_sched = 1;
   1ec84:	2001      	movs	r0, #1
   1ec86:	e7f2      	b.n	1ec6e <z_unpend_all+0x6>

0001ec88 <z_sched_wake>:
{
   1ec88:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ec8a:	f04f 0320 	mov.w	r3, #32
   1ec8e:	f3ef 8511 	mrs	r5, BASEPRI
   1ec92:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec96:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1ec9a:	f7ff ff6b 	bl	1eb74 <z_priq_dumb_best>
		if (thread != NULL) {
   1ec9e:	4604      	mov	r4, r0
   1eca0:	b150      	cbz	r0, 1ecb8 <z_sched_wake+0x30>
   1eca2:	67c1      	str	r1, [r0, #124]	; 0x7c
   1eca4:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1eca6:	f7ff ff28 	bl	1eafa <unpend_thread_no_timeout>
   1ecaa:	3018      	adds	r0, #24
   1ecac:	f000 f809 	bl	1ecc2 <z_abort_timeout>
			ready_thread(thread);
   1ecb0:	4620      	mov	r0, r4
   1ecb2:	f7f9 fc67 	bl	18584 <ready_thread>
			ret = true;
   1ecb6:	2001      	movs	r0, #1
	__asm__ volatile(
   1ecb8:	f385 8811 	msr	BASEPRI, r5
   1ecbc:	f3bf 8f6f 	isb	sy
}
   1ecc0:	bd38      	pop	{r3, r4, r5, pc}

0001ecc2 <z_abort_timeout>:
{
   1ecc2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ecc4:	f04f 0220 	mov.w	r2, #32
   1ecc8:	f3ef 8411 	mrs	r4, BASEPRI
   1eccc:	f382 8812 	msr	BASEPRI_MAX, r2
   1ecd0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ecd4:	6803      	ldr	r3, [r0, #0]
   1ecd6:	b13b      	cbz	r3, 1ece8 <z_abort_timeout+0x26>
			remove_timeout(to);
   1ecd8:	f7f9 feb8 	bl	18a4c <remove_timeout>
			ret = 0;
   1ecdc:	2000      	movs	r0, #0
	__asm__ volatile(
   1ecde:	f384 8811 	msr	BASEPRI, r4
   1ece2:	f3bf 8f6f 	isb	sy
}
   1ece6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ece8:	f06f 0015 	mvn.w	r0, #21
   1ecec:	e7f7      	b.n	1ecde <z_abort_timeout+0x1c>

0001ecee <z_get_next_timeout_expiry>:
{
   1ecee:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ecf0:	f04f 0320 	mov.w	r3, #32
   1ecf4:	f3ef 8411 	mrs	r4, BASEPRI
   1ecf8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecfc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1ed00:	f7f9 fe7e 	bl	18a00 <next_timeout>
	__asm__ volatile(
   1ed04:	f384 8811 	msr	BASEPRI, r4
   1ed08:	f3bf 8f6f 	isb	sy
}
   1ed0c:	bd10      	pop	{r4, pc}

0001ed0e <z_set_timeout_expiry>:
{
   1ed0e:	b570      	push	{r4, r5, r6, lr}
   1ed10:	4604      	mov	r4, r0
   1ed12:	460d      	mov	r5, r1
	__asm__ volatile(
   1ed14:	f04f 0320 	mov.w	r3, #32
   1ed18:	f3ef 8611 	mrs	r6, BASEPRI
   1ed1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed20:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1ed24:	f7f9 fe6c 	bl	18a00 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1ed28:	2801      	cmp	r0, #1
   1ed2a:	dd05      	ble.n	1ed38 <z_set_timeout_expiry+0x2a>
   1ed2c:	42a0      	cmp	r0, r4
   1ed2e:	db03      	blt.n	1ed38 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ed30:	4629      	mov	r1, r5
   1ed32:	4620      	mov	r0, r4
   1ed34:	f7f8 f872 	bl	16e1c <sys_clock_set_timeout>
	__asm__ volatile(
   1ed38:	f386 8811 	msr	BASEPRI, r6
   1ed3c:	f3bf 8f6f 	isb	sy
}
   1ed40:	bd70      	pop	{r4, r5, r6, pc}

0001ed42 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1ed42:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1ed44:	f7f9 ff72 	bl	18c2c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ed48:	bd08      	pop	{r3, pc}

0001ed4a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1ed4a:	b108      	cbz	r0, 1ed50 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1ed4c:	f7e4 ba72 	b.w	3234 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1ed50:	4770      	bx	lr

0001ed52 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ed52:	f1b1 3fff 	cmp.w	r1, #4294967295
   1ed56:	bf08      	it	eq
   1ed58:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1ed5c:	b538      	push	{r3, r4, r5, lr}
   1ed5e:	4605      	mov	r5, r0
   1ed60:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ed62:	d01d      	beq.n	1eda0 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ed64:	ea51 0300 	orrs.w	r3, r1, r0
   1ed68:	d103      	bne.n	1ed72 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1ed6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1ed6e:	f7f9 bf5d 	b.w	18c2c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1ed72:	f06f 0301 	mvn.w	r3, #1
   1ed76:	1a18      	subs	r0, r3, r0
   1ed78:	f04f 33ff 	mov.w	r3, #4294967295
   1ed7c:	eb63 0101 	sbc.w	r1, r3, r1
   1ed80:	2900      	cmp	r1, #0
   1ed82:	da0c      	bge.n	1ed9e <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1ed84:	f7f9 ff52 	bl	18c2c <sys_clock_tick_get>
   1ed88:	2d01      	cmp	r5, #1
   1ed8a:	4622      	mov	r2, r4
   1ed8c:	f174 0400 	sbcs.w	r4, r4, #0
   1ed90:	462b      	mov	r3, r5
   1ed92:	bfbc      	itt	lt
   1ed94:	2301      	movlt	r3, #1
   1ed96:	2200      	movlt	r2, #0
   1ed98:	1818      	adds	r0, r3, r0
   1ed9a:	eb41 0102 	adc.w	r1, r1, r2
}
   1ed9e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1eda0:	f04f 30ff 	mov.w	r0, #4294967295
   1eda4:	4601      	mov	r1, r0
   1eda6:	e7fa      	b.n	1ed9e <sys_clock_timeout_end_calc+0x4c>

0001eda8 <add_event>:
{
   1eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1edaa:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1edac:	e9d0 1300 	ldrd	r1, r3, [r0]
   1edb0:	4288      	cmp	r0, r1
   1edb2:	4604      	mov	r4, r0
   1edb4:	d00d      	beq.n	1edd2 <add_event+0x2a>
	if ((pending == NULL) ||
   1edb6:	b163      	cbz	r3, 1edd2 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1edb8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1edba:	b100      	cbz	r0, 1edbe <add_event+0x16>
   1edbc:	3860      	subs	r0, #96	; 0x60
   1edbe:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1edc2:	4639      	mov	r1, r7
   1edc4:	f7ff fea3 	bl	1eb0e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1edc8:	2800      	cmp	r0, #0
   1edca:	dc02      	bgt.n	1edd2 <add_event+0x2a>
	return list->head == list;
   1edcc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1edce:	42b4      	cmp	r4, r6
   1edd0:	d109      	bne.n	1ede6 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   1edd2:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1edd4:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1edd8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1edda:	6065      	str	r5, [r4, #4]
}
   1eddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1edde:	6863      	ldr	r3, [r4, #4]
   1ede0:	42b3      	cmp	r3, r6
   1ede2:	d0f6      	beq.n	1edd2 <add_event+0x2a>
   1ede4:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ede6:	2e00      	cmp	r6, #0
   1ede8:	d0f3      	beq.n	1edd2 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   1edea:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1edec:	b101      	cbz	r1, 1edf0 <add_event+0x48>
   1edee:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1edf0:	4638      	mov	r0, r7
   1edf2:	f7ff fe8c 	bl	1eb0e <z_sched_prio_cmp>
   1edf6:	2800      	cmp	r0, #0
   1edf8:	ddf1      	ble.n	1edde <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   1edfa:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1edfc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1ee00:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ee02:	6075      	str	r5, [r6, #4]
			return;
   1ee04:	e7ea      	b.n	1eddc <add_event+0x34>

0001ee06 <register_events>:
{
   1ee06:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ee0a:	2500      	movs	r5, #0
{
   1ee0c:	468b      	mov	fp, r1
   1ee0e:	4614      	mov	r4, r2
   1ee10:	461f      	mov	r7, r3
   1ee12:	4682      	mov	sl, r0
	int events_registered = 0;
   1ee14:	462e      	mov	r6, r5
	event->poller = NULL;
   1ee16:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1ee18:	455d      	cmp	r5, fp
   1ee1a:	db02      	blt.n	1ee22 <register_events+0x1c>
}
   1ee1c:	4630      	mov	r0, r6
   1ee1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1ee22:	f04f 0320 	mov.w	r3, #32
   1ee26:	f3ef 8911 	mrs	r9, BASEPRI
   1ee2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee2e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1ee32:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ee36:	f003 031f 	and.w	r3, r3, #31
   1ee3a:	3b01      	subs	r3, #1
   1ee3c:	2b07      	cmp	r3, #7
   1ee3e:	d80f      	bhi.n	1ee60 <register_events+0x5a>
   1ee40:	e8df f003 	tbb	[pc, r3]
   1ee44:	0a0e041e 	.word	0x0a0e041e
   1ee48:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1ee4c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ee50:	689b      	ldr	r3, [r3, #8]
   1ee52:	b12b      	cbz	r3, 1ee60 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1ee54:	2302      	movs	r3, #2
   1ee56:	e020      	b.n	1ee9a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1ee58:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ee5c:	681b      	ldr	r3, [r3, #0]
   1ee5e:	bb8b      	cbnz	r3, 1eec4 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1ee60:	bb47      	cbnz	r7, 1eeb4 <register_events+0xae>
   1ee62:	7823      	ldrb	r3, [r4, #0]
   1ee64:	b333      	cbz	r3, 1eeb4 <register_events+0xae>
	switch (event->type) {
   1ee66:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ee6a:	f003 031f 	and.w	r3, r3, #31
   1ee6e:	3b01      	subs	r3, #1
   1ee70:	2b07      	cmp	r3, #7
   1ee72:	d830      	bhi.n	1eed6 <register_events+0xd0>
   1ee74:	e8df f003 	tbb	[pc, r3]
   1ee78:	282f2833 	.word	0x282f2833
   1ee7c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1ee80:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ee84:	689b      	ldr	r3, [r3, #8]
   1ee86:	2b00      	cmp	r3, #0
   1ee88:	d0ea      	beq.n	1ee60 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1ee8a:	2301      	movs	r3, #1
   1ee8c:	e005      	b.n	1ee9a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1ee8e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ee92:	6a1b      	ldr	r3, [r3, #32]
   1ee94:	2b00      	cmp	r3, #0
   1ee96:	d0e3      	beq.n	1ee60 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1ee98:	2310      	movs	r3, #16
	event->state |= state;
   1ee9a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1ee9e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1eea2:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1eea6:	430b      	orrs	r3, r1
   1eea8:	f363 3252 	bfi	r2, r3, #13, #6
   1eeac:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1eeb0:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1eeb4:	f389 8811 	msr	BASEPRI, r9
   1eeb8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1eebc:	3501      	adds	r5, #1
   1eebe:	f10a 0a14 	add.w	sl, sl, #20
   1eec2:	e7a9      	b.n	1ee18 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1eec4:	2304      	movs	r3, #4
   1eec6:	e7e8      	b.n	1ee9a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1eec8:	f8da 0010 	ldr.w	r0, [sl, #16]
   1eecc:	4622      	mov	r2, r4
   1eece:	4651      	mov	r1, sl
   1eed0:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1eed2:	f7ff ff69 	bl	1eda8 <add_event>
	event->poller = poller;
   1eed6:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1eeda:	3601      	adds	r6, #1
   1eedc:	e7ea      	b.n	1eeb4 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1eede:	f8da 0010 	ldr.w	r0, [sl, #16]
   1eee2:	4622      	mov	r2, r4
   1eee4:	4651      	mov	r1, sl
   1eee6:	e7f4      	b.n	1eed2 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1eee8:	f8da 0010 	ldr.w	r0, [sl, #16]
   1eeec:	4622      	mov	r2, r4
   1eeee:	4651      	mov	r1, sl
   1eef0:	3024      	adds	r0, #36	; 0x24
   1eef2:	e7ee      	b.n	1eed2 <register_events+0xcc>

0001eef4 <signal_poll_event>:
{
   1eef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1eef8:	6884      	ldr	r4, [r0, #8]
{
   1eefa:	4605      	mov	r5, r0
   1eefc:	460e      	mov	r6, r1
	if (poller != NULL) {
   1eefe:	b144      	cbz	r4, 1ef12 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1ef00:	7863      	ldrb	r3, [r4, #1]
   1ef02:	2b01      	cmp	r3, #1
   1ef04:	d136      	bne.n	1ef74 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1ef06:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ef0a:	f013 0302 	ands.w	r3, r3, #2
   1ef0e:	d10a      	bne.n	1ef26 <signal_poll_event+0x32>
		poller->is_polling = false;
   1ef10:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1ef12:	68eb      	ldr	r3, [r5, #12]
   1ef14:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1ef18:	430e      	orrs	r6, r1
	event->poller = NULL;
   1ef1a:	2000      	movs	r0, #0
	event->state |= state;
   1ef1c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1ef20:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1ef22:	60eb      	str	r3, [r5, #12]
	return retcode;
   1ef24:	e00b      	b.n	1ef3e <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1ef26:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1ef2a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ef2e:	bf08      	it	eq
   1ef30:	f112 0f02 	cmneq.w	r2, #2
   1ef34:	d105      	bne.n	1ef42 <signal_poll_event+0x4e>
		poller->is_polling = false;
   1ef36:	2300      	movs	r3, #0
   1ef38:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1ef3a:	f06f 000a 	mvn.w	r0, #10
}
   1ef3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ef42:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1ef46:	4640      	mov	r0, r8
   1ef48:	f7ff fdea 	bl	1eb20 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ef4c:	2e08      	cmp	r6, #8
   1ef4e:	bf0c      	ite	eq
   1ef50:	f06f 0303 	mvneq.w	r3, #3
   1ef54:	2300      	movne	r3, #0
   1ef56:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ef58:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ef5c:	06db      	lsls	r3, r3, #27
   1ef5e:	d102      	bne.n	1ef66 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1ef60:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1ef64:	b10f      	cbz	r7, 1ef6a <signal_poll_event+0x76>
		poller->is_polling = false;
   1ef66:	2300      	movs	r3, #0
   1ef68:	e7d2      	b.n	1ef10 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1ef6a:	4640      	mov	r0, r8
   1ef6c:	f7ff fe08 	bl	1eb80 <z_ready_thread>
		poller->is_polling = false;
   1ef70:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1ef72:	e7ce      	b.n	1ef12 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1ef74:	2b02      	cmp	r3, #2
   1ef76:	d1f6      	bne.n	1ef66 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1ef78:	7823      	ldrb	r3, [r4, #0]
   1ef7a:	2b00      	cmp	r3, #0
   1ef7c:	d0c9      	beq.n	1ef12 <signal_poll_event+0x1e>
   1ef7e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1ef82:	2f00      	cmp	r7, #0
   1ef84:	d0f4      	beq.n	1ef70 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1ef86:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1ef8a:	f1a4 0914 	sub.w	r9, r4, #20
   1ef8e:	f104 0014 	add.w	r0, r4, #20
   1ef92:	f7ff fe96 	bl	1ecc2 <z_abort_timeout>
		twork->poll_result = 0;
   1ef96:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1ef9a:	4649      	mov	r1, r9
   1ef9c:	4638      	mov	r0, r7
   1ef9e:	f7ff fd31 	bl	1ea04 <z_work_submit_to_queue>
		poller->is_polling = false;
   1efa2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1efa6:	e7b4      	b.n	1ef12 <signal_poll_event+0x1e>

0001efa8 <clear_event_registrations>:
	while (num_events--) {
   1efa8:	2314      	movs	r3, #20
{
   1efaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efac:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1efb0:	2400      	movs	r4, #0
   1efb2:	2601      	movs	r6, #1
	while (num_events--) {
   1efb4:	b901      	cbnz	r1, 1efb8 <clear_event_registrations+0x10>
}
   1efb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1efb8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1efbc:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1efc0:	f003 031f 	and.w	r3, r3, #31
   1efc4:	2b08      	cmp	r3, #8
   1efc6:	f1a0 0714 	sub.w	r7, r0, #20
   1efca:	d80d      	bhi.n	1efe8 <clear_event_registrations+0x40>
   1efcc:	fa06 f303 	lsl.w	r3, r6, r3
   1efd0:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1efd4:	d008      	beq.n	1efe8 <clear_event_registrations+0x40>
	return node->next != NULL;
   1efd6:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1efda:	b12b      	cbz	r3, 1efe8 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1efdc:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1efe0:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1efe2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1efe4:	e940 4405 	strd	r4, r4, [r0, #-20]
   1efe8:	f382 8811 	msr	BASEPRI, r2
   1efec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1eff0:	f04f 0320 	mov.w	r3, #32
   1eff4:	f3ef 8211 	mrs	r2, BASEPRI
   1eff8:	f383 8812 	msr	BASEPRI_MAX, r3
   1effc:	f3bf 8f6f 	isb	sy
   1f000:	3901      	subs	r1, #1
   1f002:	4638      	mov	r0, r7
   1f004:	e7d6      	b.n	1efb4 <clear_event_registrations+0xc>

0001f006 <k_poll_event_init>:
{
   1f006:	b510      	push	{r4, lr}
	event->type = type;
   1f008:	04d2      	lsls	r2, r2, #19
   1f00a:	0209      	lsls	r1, r1, #8
   1f00c:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1f010:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1f014:	430a      	orrs	r2, r1
   1f016:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1f018:	2400      	movs	r4, #0
	event->type = type;
   1f01a:	430a      	orrs	r2, r1
	event->obj = obj;
   1f01c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1f020:	6084      	str	r4, [r0, #8]
}
   1f022:	bd10      	pop	{r4, pc}

0001f024 <z_handle_obj_poll_events>:
{
   1f024:	4603      	mov	r3, r0
	return list->head == list;
   1f026:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f028:	4283      	cmp	r3, r0
   1f02a:	d008      	beq.n	1f03e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1f02c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f030:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f032:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f034:	2300      	movs	r3, #0
	node->prev = NULL;
   1f036:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1f03a:	f7ff bf5b 	b.w	1eef4 <signal_poll_event>
}
   1f03e:	4770      	bx	lr

0001f040 <k_free>:
	if (ptr != NULL) {
   1f040:	b120      	cbz	r0, 1f04c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1f042:	1f01      	subs	r1, r0, #4
   1f044:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1f048:	f7ff bb1e 	b.w	1e688 <k_heap_free>
}
   1f04c:	4770      	bx	lr
	...

0001f050 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1f050:	f7f7 bf7c 	b.w	16f4c <SystemInit>
