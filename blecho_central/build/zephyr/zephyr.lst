
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 35 00 20 19 43 00 00 77 67 01 00 ed 42 00 00     @5. .C..wg...B..
  10:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
  2c:	f5 3f 00 00 ed 42 00 00 00 00 00 00 a1 3f 00 00     .?...B.......?..
  3c:	ed 42 00 00                                         .B..

00000040 <_irq_vector_table>:
  40:	a5 40 00 00 05 fc 00 00 a5 40 00 00 a5 40 00 00     .@.......@...@..
  50:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  60:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  70:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  80:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  90:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  a0:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  b0:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  c0:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  d0:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  e0:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..
  f0:	a5 40 00 00 a5 40 00 00 a5 40 00 00 a5 40 00 00     .@...@...@...@..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x118>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1e>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x26>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x8a>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x110>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5a>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5a>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x114>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x86>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x86>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x8>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x108>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10c>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xfe>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xfe>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xfe>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5a>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x86>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x128>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x122>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x150>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x136>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14c>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x216>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x140>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x20e>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a2>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a2>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x212>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1ce>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1ce>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1e8>
     3a2:	d106      	bne.n	3b2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1f2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1f2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x216>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x148>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1a2>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1ce>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x16>
     3da:	0000      	movs	r0, r0
     3dc:	0000      	movs	r0, r0
	...

000003e0 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
     3e0:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     3e2:	4c19      	ldr	r4, [pc, #100]	; (448 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>)
{
     3e4:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
     3e8:	f894 c040 	ldrb.w	ip, [r4, #64]	; 0x40
     3ec:	f01c 0501 	ands.w	r5, ip, #1
     3f0:	d122      	bne.n	438 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
	scan->own_addr_type = own_addr_type;
     3f2:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
     3f6:	0140      	lsls	r0, r0, #5
     3f8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
     3fc:	8761      	strh	r1, [r4, #58]	; 0x3a
	lll->filter_policy = filter_policy;
     3fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
     402:	f00e 0e18 	and.w	lr, lr, #24
     406:	f000 0020 	and.w	r0, r0, #32
     40a:	ea40 000e 	orr.w	r0, r0, lr
     40e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
     412:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     414:	480d      	ldr	r0, [pc, #52]	; (44c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>)
	lll->filter_policy = filter_policy;
     416:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     41a:	fba2 0100 	umull	r0, r1, r2, r0
     41e:	2391      	movs	r3, #145	; 0x91
     420:	fb03 1102 	mla	r1, r3, r2, r1
     424:	a306      	add	r3, pc, #24	; (adr r3, 440 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>)
     426:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
     42a:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     42e:	f7ff fe67 	bl	100 <__aeabi_uldivmod>
     432:	63e0      	str	r0, [r4, #60]	; 0x3c
}
     434:	4628      	mov	r0, r5
     436:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     438:	250c      	movs	r5, #12
}
     43a:	4628      	mov	r0, r5
     43c:	bd38      	pop	{r3, r4, r5, pc}
     43e:	bf00      	nop
     440:	1afd498d 	.word	0x1afd498d
     444:	00000007 	.word	0x00000007
     448:	20001b68 	.word	0x20001b68
     44c:	84e72a00 	.word	0x84e72a00

00000450 <ull_scan_params_set>:
{
     450:	b510      	push	{r4, lr}
     452:	f89d c008 	ldrb.w	ip, [sp, #8]
     456:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
     458:	0149      	lsls	r1, r1, #5
     45a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
     45e:	f000 0018 	and.w	r0, r0, #24
     462:	f001 0c20 	and.w	ip, r1, #32
     466:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
     468:	83e2      	strh	r2, [r4, #30]
	lll->filter_policy = filter_policy;
     46a:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     46e:	480c      	ldr	r0, [pc, #48]	; (4a0 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
     470:	f021 0138 	bic.w	r1, r1, #56	; 0x38
     474:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     478:	2291      	movs	r2, #145	; 0x91
     47a:	fba3 0100 	umull	r0, r1, r3, r0
     47e:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
     482:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     486:	a304      	add	r3, pc, #16	; (adr r3, 498 <ull_scan_params_set+0x48>)
     488:	e9d3 2300 	ldrd	r2, r3, [r3]
     48c:	f7ff fe38 	bl	100 <__aeabi_uldivmod>
     490:	6220      	str	r0, [r4, #32]
}
     492:	bd10      	pop	{r4, pc}
     494:	f3af 8000 	nop.w
     498:	1afd498d 	.word	0x1afd498d
     49c:	00000007 	.word	0x00000007
     4a0:	84e72a00 	.word	0x84e72a00
     4a4:	00000000 	.word	0x00000000

000004a8 <ull_scan_enable>:
{
     4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4ac:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
     4ae:	f100 0134 	add.w	r1, r0, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
     4b2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
     4b6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
     4ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
     4be:	f360 1386 	bfi	r3, r0, #6, #1
{
     4c2:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
     4c4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
     4c8:	f009 f968 	bl	979c <ll_addr_read>
	lll->chan = 0U;
     4cc:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     4d0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
     4d2:	4845      	ldr	r0, [pc, #276]	; (5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     4d4:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
     4d6:	f002 0279 	and.w	r2, r2, #121	; 0x79
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
     4da:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     4dc:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
     4e0:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     4e4:	2291      	movs	r2, #145	; 0x91
     4e6:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
     4ea:	e9c4 5505 	strd	r5, r5, [r4, #20]
     4ee:	a33c      	add	r3, pc, #240	; (adr r3, 5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>)
     4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
     4f4:	7025      	strb	r5, [r4, #0]
     4f6:	f7ff fe03 	bl	100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
     4fa:	2331      	movs	r3, #49	; 0x31
     4fc:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
     500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->ull.ticks_preempt_to_start =
     502:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
     504:	3309      	adds	r3, #9
	    (ticks_interval -
     506:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
     50a:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
     50c:	bf32      	itee	cc
     50e:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
     510:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
     512:	63e5      	strcs	r5, [r4, #60]	; 0x3c
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     514:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
     516:	f009 f907 	bl	9728 <ticker_ticks_now_get>
	if (!lll->conn) {
     51a:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
     51c:	4607      	mov	r7, r0
		err = ull_sched_after_cen_slot_get(TICKER_USER_ID_THREAD,
     51e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
     522:	2b00      	cmp	r3, #0
     524:	d044      	beq.n	5b0 <ull_scan_enable+0x108>
	ret_cb = TICKER_STATUS_BUSY;
     526:	2302      	movs	r3, #2
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     528:	4d30      	ldr	r5, [pc, #192]	; (5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>)
	ret_cb = TICKER_STATUS_BUSY;
     52a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     52c:	4b30      	ldr	r3, [pc, #192]	; (5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     52e:	f8cd 8020 	str.w	r8, [sp, #32]
     532:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     534:	1b65      	subs	r5, r4, r5
     536:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     53a:	482b      	ldr	r0, [pc, #172]	; (5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>)
     53c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     53e:	f04f 0900 	mov.w	r9, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     542:	fba3 0100 	umull	r0, r1, r3, r0
     546:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     548:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     54c:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     550:	6923      	ldr	r3, [r4, #16]
     552:	9304      	str	r3, [sp, #16]
     554:	4b27      	ldr	r3, [pc, #156]	; (5f4 <CONFIG_BT_COMPANY_ID+0x3>)
     556:	9307      	str	r3, [sp, #28]
     558:	4b27      	ldr	r3, [pc, #156]	; (5f8 <CONFIG_BT_COMPANY_ID+0x7>)
     55a:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     55c:	a320      	add	r3, pc, #128	; (adr r3, 5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>)
     55e:	e9d3 2300 	ldrd	r2, r3, [r3]
     562:	f7ff fdcd 	bl	100 <__aeabi_uldivmod>
     566:	4610      	mov	r0, r2
     568:	4619      	mov	r1, r3
     56a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     56e:	2300      	movs	r3, #0
     570:	f7ff fdc6 	bl	100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     574:	09ad      	lsrs	r5, r5, #6
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     576:	3502      	adds	r5, #2
     578:	b2ed      	uxtb	r5, r5
     57a:	e9cd 6001 	strd	r6, r0, [sp, #4]
     57e:	2103      	movs	r1, #3
     580:	463b      	mov	r3, r7
     582:	462a      	mov	r2, r5
     584:	f8cd 9000 	str.w	r9, [sp]
     588:	4648      	mov	r0, r9
     58a:	f008 ffa3 	bl	94d4 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     58e:	4641      	mov	r1, r8
     590:	f00b f9bc 	bl	b90c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     594:	b940      	cbnz	r0, 5a8 <ull_scan_enable+0x100>
	scan->is_enabled = 1U;
     596:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
     59a:	f043 0301 	orr.w	r3, r3, #1
     59e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
     5a2:	b00d      	add	sp, #52	; 0x34
     5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     5a8:	200c      	movs	r0, #12
}
     5aa:	b00d      	add	sp, #52	; 0x34
     5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint32_t offset_us = 0U;
     5b0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		err = ull_sched_after_cen_slot_get(TICKER_USER_ID_THREAD,
     5b4:	6921      	ldr	r1, [r4, #16]
     5b6:	4643      	mov	r3, r8
     5b8:	aa0a      	add	r2, sp, #40	; 0x28
     5ba:	2003      	movs	r0, #3
     5bc:	f002 f91c 	bl	27f8 <ull_sched_after_cen_slot_get>
		if (!err) {
     5c0:	2800      	cmp	r0, #0
     5c2:	d1b0      	bne.n	526 <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
     5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
     5c6:	480d      	ldr	r0, [pc, #52]	; (5fc <CONFIG_BT_COMPANY_ID+0xb>)
     5c8:	a305      	add	r3, pc, #20	; (adr r3, 5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>)
     5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
     5ce:	fba1 0100 	umull	r0, r1, r1, r0
     5d2:	f7ff fd95 	bl	100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
     5d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
     5d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
     5dc:	4407      	add	r7, r0
     5de:	e7a2      	b.n	526 <ull_scan_enable+0x7e>
     5e0:	1afd498d 	.word	0x1afd498d
     5e4:	00000007 	.word	0x00000007
     5e8:	84e72a00 	.word	0x84e72a00
     5ec:	20001b68 	.word	0x20001b68
     5f0:	f0f0f0f1 	.word	0xf0f0f0f1
     5f4:	0000b009 	.word	0x0000b009
     5f8:	0000c12d 	.word	0x0000c12d
     5fc:	3b9aca00 	.word	0x3b9aca00

00000600 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     604:	f890 e0bc 	ldrb.w	lr, [r0, #188]	; 0xbc
     608:	f890 c0bb 	ldrb.w	ip, [r0, #187]	; 0xbb
     60c:	45e6      	cmp	lr, ip
{
     60e:	b08b      	sub	sp, #44	; 0x2c
     610:	4604      	mov	r4, r0
     612:	460e      	mov	r6, r1
     614:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
     616:	d02e      	beq.n	676 <ull_conn_llcp+0x76>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     618:	ebac 0c0e 	sub.w	ip, ip, lr
     61c:	f00c 0c03 	and.w	ip, ip, #3
     620:	f1bc 0f02 	cmp.w	ip, #2
     624:	d00c      	beq.n	640 <ull_conn_llcp+0x40>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
     626:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
     62a:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
     62e:	1a9b      	subs	r3, r3, r2
     630:	b2db      	uxtb	r3, r3
     632:	2b01      	cmp	r3, #1
     634:	f000 817f 	beq.w	936 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x136>
					  ticks_at_expire);

	}
#endif /* CONFIG_BT_CTLR_PERIPHERAL_ISO */

	return 0;
     638:	2000      	movs	r0, #0
	}

	/* Continue prepare */
	return 0;
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */
}
     63a:	b00b      	add	sp, #44	; 0x2c
     63c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     640:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
     644:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
     648:	429a      	cmp	r2, r3
     64a:	d006      	beq.n	65a <ull_conn_llcp+0x5a>
			     LLCP_LENGTH_STATE_RESIZE) ||
     64c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			if ((conn->llcp_length.state ==
     650:	f003 0306 	and.w	r3, r3, #6
     654:	2b04      	cmp	r3, #4
     656:	f000 83b1 	beq.w	dbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5bc>
		switch (conn->llcp_type) {
     65a:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
     65e:	1e7b      	subs	r3, r7, #1
     660:	2b05      	cmp	r3, #5
     662:	f200 835a 	bhi.w	d1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x51a>
     666:	e8df f013 	tbh	[pc, r3, lsl #1]
     66a:	001f      	.short	0x001f
     66c:	02a4032e 	.word	0x02a4032e
     670:	02690358 	.word	0x02690358
     674:	01cf      	.short	0x01cf
	    !conn->llcp_enc.pause_rx) {
     676:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
     67a:	f013 0801 	ands.w	r8, r3, #1
     67e:	d1d2      	bne.n	626 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     680:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
     684:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
     688:	428a      	cmp	r2, r1
     68a:	f000 8354 	beq.w	d36 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x536>
			conn->llcp_type = LLCP_CONN_UPD;
     68e:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     690:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
			conn->llcp_type = LLCP_CONN_UPD;
     694:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     698:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
			conn->llcp_ack -= 2U;
     69c:	f1ae 0c02 	sub.w	ip, lr, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     6a0:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
     6a2:	f880 c0bc 	strb.w	ip, [r0, #188]	; 0xbc
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     6a6:	d1d1      	bne.n	64c <ull_conn_llcp+0x4c>
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     6a8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     6aa:	8e67      	ldrh	r7, [r4, #50]	; 0x32
     6ac:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     6ae:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     6b2:	b2bf      	uxth	r7, r7
     6b4:	19ea      	adds	r2, r5, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     6b6:	f013 0107 	ands.w	r1, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     6ba:	b292      	uxth	r2, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     6bc:	f040 83c4 	bne.w	e48 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x648>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     6c0:	f8b4 50c0 	ldrh.w	r5, [r4, #192]	; 0xc0
     6c4:	1b52      	subs	r2, r2, r5
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     6c6:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     6c8:	fa1f f982 	uxth.w	r9, r2
	} else if (instant_latency <= 0x7FFF) {
     6cc:	d4ab      	bmi.n	626 <ull_conn_llcp+0x26>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     6ce:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
     6d2:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
     6d6:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
     6da:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     6de:	4293      	cmp	r3, r2
		conn->llcp_cu.ack = conn->llcp_cu.req;
     6e0:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
     6e4:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     6e8:	d009      	beq.n	6fe <ull_conn_llcp+0xfe>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     6ea:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     6ee:	f003 030f 	and.w	r3, r3, #15
     6f2:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     6f4:	bf04      	itt	eq
     6f6:	f884 215d 	strbeq.w	r2, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
     6fa:	f8a4 10ac 	strheq.w	r1, [r4, #172]	; 0xac
	return conn_upd_curr && (conn_upd_curr != conn);
}

static inline void cpr_active_check_and_reset(struct ll_conn *conn)
{
	if (conn == conn_upd_curr) {
     6fe:	4bb6      	ldr	r3, [pc, #728]	; (9d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d8>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     700:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
     704:	681a      	ldr	r2, [r3, #0]
     706:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
     708:	bf04      	itt	eq
     70a:	2200      	moveq	r2, #0
     70c:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     70e:	f1b8 0f00 	cmp.w	r8, #0
     712:	f000 872a 	beq.w	156a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e2>
     716:	f8d8 0000 	ldr.w	r0, [r8]
     71a:	2800      	cmp	r0, #0
     71c:	f000 8725 	beq.w	156a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e2>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     720:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
     724:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
     728:	6842      	ldr	r2, [r0, #4]
     72a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
     72e:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
     730:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     734:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
		if ((conn->llcp_cu.interval != lll->interval) ||
     738:	d104      	bne.n	744 <ull_conn_llcp+0x144>
     73a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
     73e:	4594      	cmp	ip, r2
     740:	f001 8044 	beq.w	17cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x444>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     744:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
     748:	f8a8 301e 	strh.w	r3, [r8, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     74c:	2319      	movs	r3, #25
     74e:	f888 3004 	strb.w	r3, [r8, #4]
			cu->status = 0x00;
     752:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
     754:	f8a8 c006 	strh.w	ip, [r8, #6]
			cu->latency = conn->llcp_cu.latency;
     758:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
     75c:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->status = 0x00;
     760:	f888 301c 	strb.w	r3, [r8, #28]
#if defined(CONFIG_BT_CTLR_RX_ENQUEUE_HOLD)
			/* hold node rx until the instant's anchor point sync */
			rx_hold_put(conn, rx->hdr.link, rx);
#else /* !CONFIG_BT_CTLR_RX_ENQUEUE_HOLD */
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
     764:	4641      	mov	r1, r8
     766:	f00b f857 	bl	b818 <ll_rx_put>
			ll_rx_sched();
     76a:	f00b f85f 	bl	b82c <ll_rx_sched>
			ll_rx_sched();
		}

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     76e:	68a3      	ldr	r3, [r4, #8]
     770:	2b00      	cmp	r3, #0
     772:	da09      	bge.n	788 <__data_size+0x13>
			uint32_t ticks_prepare_to_start =
     774:	68e0      	ldr	r0, [r4, #12]
     776:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     77c:	4290      	cmp	r0, r2
     77e:	bf2c      	ite	cs
     780:	1831      	addcs	r1, r6, r0
     782:	18b1      	addcc	r1, r6, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     784:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     786:	1ace      	subs	r6, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     78a:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
     78e:	fb13 f309 	smulbb	r3, r3, r9
     792:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     794:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
     798:	fb18 f201 	smulbb	r2, r8, r1
     79c:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     79e:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
     7a0:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
     7a4:	f080 86cf 	bcs.w	1546 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1be>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     7a8:	1ad3      	subs	r3, r2, r3
     7aa:	498c      	ldr	r1, [pc, #560]	; (9dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1dc>)
     7ac:	f240 42e2 	movw	r2, #1250	; 0x4e2
     7b0:	fb02 f303 	mul.w	r3, r2, r3
     7b4:	fba3 0101 	umull	r0, r1, r3, r1
     7b8:	a385      	add	r3, pc, #532	; (adr r3, 9d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d0>)
     7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
     7be:	f7ff fc9f 	bl	100 <__aeabi_uldivmod>
     7c2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
     7c6:	441e      	add	r6, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
     7c8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     7ca:	441d      	add	r5, r3
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
     7cc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
     7d0:	1bef      	subs	r7, r5, r7
     7d2:	444f      	add	r7, r9
		conn_interval_us = conn->llcp_cu.interval *
     7d4:	f240 45e2 	movw	r5, #1250	; 0x4e2
		} else if (!lll->role) {
     7d8:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     7da:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
     7dc:	fb05 f508 	mul.w	r5, r5, r8
		} else if (!lll->role) {
     7e0:	f2c0 87a5 	blt.w	172e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a6>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     7e4:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
     7e8:	487c      	ldr	r0, [pc, #496]	; (9dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1dc>)
     7ea:	a379      	add	r3, pc, #484	; (adr r3, 9d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d0>)
     7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
     7f0:	fba1 0100 	umull	r0, r1, r1, r0
     7f4:	f7ff fc84 	bl	100 <__aeabi_uldivmod>
     7f8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
     7fc:	3701      	adds	r7, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     7fe:	4978      	ldr	r1, [pc, #480]	; (9e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e0>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     800:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
     804:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     808:	4b76      	ldr	r3, [pc, #472]	; (9e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e4>)
		lll->interval = conn->llcp_cu.interval;
     80a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     80e:	4429      	add	r1, r5
     810:	fbb1 f1f5 	udiv	r1, r1, r5
     814:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     818:	f242 7110 	movw	r1, #10000	; 0x2710
     81c:	fb01 5202 	mla	r2, r1, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     820:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     822:	3a01      	subs	r2, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     824:	1d81      	adds	r1, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     826:	fbb2 f2f5 	udiv	r2, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     82a:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     82e:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     832:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     834:	428a      	cmp	r2, r1
		lll->latency = conn->llcp_cu.latency;
     836:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     838:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     83c:	dd04      	ble.n	848 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48>
     83e:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
     842:	30fa      	adds	r0, #250	; 0xfa
     844:	4402      	add	r2, r0
     846:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     848:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     84c:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
     850:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
     852:	bf44      	itt	mi
     854:	2300      	movmi	r3, #0
     856:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     85a:	2102      	movs	r1, #2
     85c:	2001      	movs	r0, #1
     85e:	f011 fcd3 	bl	12208 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     862:	2200      	movs	r2, #0
     864:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     866:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     868:	2001      	movs	r0, #1
     86a:	f007 fc29 	bl	80c0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     86e:	495e      	ldr	r1, [pc, #376]	; (9e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e8>)
     870:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
     874:	4620      	mov	r0, r4
     876:	f007 fbb3 	bl	7fe0 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     87a:	f100 0803 	add.w	r8, r0, #3
     87e:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     882:	4b5a      	ldr	r3, [pc, #360]	; (9ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ec>)
     884:	9400      	str	r4, [sp, #0]
     886:	4642      	mov	r2, r8
     888:	2101      	movs	r1, #1
     88a:	2000      	movs	r0, #0
     88c:	f008 feac 	bl	95e8 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     890:	f030 0302 	bics.w	r3, r0, #2
     894:	d00c      	beq.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     896:	4a56      	ldr	r2, [pc, #344]	; (9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>)
     898:	4956      	ldr	r1, [pc, #344]	; (9f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f4>)
     89a:	4857      	ldr	r0, [pc, #348]	; (9f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f8>)
     89c:	f640 5356 	movw	r3, #3414	; 0xd56
     8a0:	f015 fd27 	bl	162f2 <assert_print>
     8a4:	4040      	eors	r0, r0
     8a6:	f380 8811 	msr	BASEPRI, r0
     8aa:	f04f 0003 	mov.w	r0, #3
     8ae:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     8b0:	9408      	str	r4, [sp, #32]
     8b2:	9406      	str	r4, [sp, #24]
     8b4:	6923      	ldr	r3, [r4, #16]
     8b6:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     8b8:	4c48      	ldr	r4, [pc, #288]	; (9dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1dc>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     8ba:	4b50      	ldr	r3, [pc, #320]	; (9fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1fc>)
     8bc:	9307      	str	r3, [sp, #28]
     8be:	4b50      	ldr	r3, [pc, #320]	; (a00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x200>)
     8c0:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     8c2:	fba5 5404 	umull	r5, r4, r5, r4
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     8c6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
     8ca:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     8cc:	4628      	mov	r0, r5
     8ce:	a340      	add	r3, pc, #256	; (adr r3, 9d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d0>)
     8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
     8d4:	4621      	mov	r1, r4
     8d6:	f7ff fc13 	bl	100 <__aeabi_uldivmod>
     8da:	4610      	mov	r0, r2
     8dc:	4619      	mov	r1, r3
     8de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8e2:	2300      	movs	r3, #0
     8e4:	f7ff fc0c 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     8e8:	a339      	add	r3, pc, #228	; (adr r3, 9d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d0>)
     8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     8ee:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     8f0:	4621      	mov	r1, r4
     8f2:	4628      	mov	r0, r5
     8f4:	f7ff fc04 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     8f8:	4633      	mov	r3, r6
     8fa:	e9cd 7000 	strd	r7, r0, [sp]
     8fe:	4642      	mov	r2, r8
     900:	2101      	movs	r1, #1
     902:	2000      	movs	r0, #0
     904:	f008 fde6 	bl	94d4 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     908:	f030 0302 	bics.w	r3, r0, #2
     90c:	d00c      	beq.n	928 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x128>
     90e:	4a38      	ldr	r2, [pc, #224]	; (9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>)
     910:	4938      	ldr	r1, [pc, #224]	; (9f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f4>)
     912:	4839      	ldr	r0, [pc, #228]	; (9f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f8>)
     914:	f44f 6357 	mov.w	r3, #3440	; 0xd70
     918:	f015 fceb 	bl	162f2 <assert_print>
     91c:	4040      	eors	r0, r0
     91e:	f380 8811 	msr	BASEPRI, r0
     922:	f04f 0003 	mov.w	r0, #3
     926:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     928:	f1b9 0f00 	cmp.w	r9, #0
     92c:	f040 86e0 	bne.w	16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
				return -ECANCELED;
     930:	f06f 008b 	mvn.w	r0, #139	; 0x8b
     934:	e681      	b.n	63a <ull_conn_llcp+0x3a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     936:	4833      	ldr	r0, [pc, #204]	; (a04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x204>)
     938:	f007 fb1c 	bl	7f74 <mem_acquire>
		if (tx) {
     93c:	2800      	cmp	r0, #0
     93e:	d038      	beq.n	9b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b2>
			conn->llcp_terminate.ack--;
     940:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
     944:	3b01      	subs	r3, #1
     946:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     94a:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     94c:	2202      	movs	r2, #2
     94e:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     950:	f043 0303 	orr.w	r3, r3, #3
     954:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
     956:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
     958:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
     95c:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		if (!conn->tx_ctrl) {
     960:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			pdu_tx->llctrl.terminate_ind.error_code =
     964:	7202      	strb	r2, [r0, #8]
	if (
     966:	b1b3      	cbz	r3, 996 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x196>
	    !conn->llcp_enc.pause_tx &&
     968:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     96c:	0795      	lsls	r5, r2, #30
     96e:	d412      	bmi.n	996 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x196>
	    !conn->llcp_phy.pause_tx &&
     970:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     974:	07d2      	lsls	r2, r2, #31
     976:	d40e      	bmi.n	996 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x196>
		if (conn->tx_head == conn->tx_data) {
     978:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
     97c:	4293      	cmp	r3, r2
     97e:	f000 86ec 	beq.w	175a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d2>
		} else if (!conn->tx_ctrl) {
     982:	b959      	cbnz	r1, 99c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x19c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
     984:	791a      	ldrb	r2, [r3, #4]
     986:	f002 0203 	and.w	r2, r2, #3
     98a:	2a03      	cmp	r2, #3
     98c:	f001 80a6 	beq.w	1adc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x754>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
     990:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
     994:	e004      	b.n	9a0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a0>
		if (!conn->tx_ctrl) {
     996:	2900      	cmp	r1, #0
     998:	f000 8483 	beq.w	12a2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xaa2>
	tx->next = conn->tx_ctrl_last->next;
     99c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     9a0:	681a      	ldr	r2, [r3, #0]
     9a2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
     9a4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
     9a6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
     9a8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
     9ac:	2b00      	cmp	r3, #0
     9ae:	f000 8209 	beq.w	dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>
		if (!conn->procedure_expire) {
     9b2:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
     9b6:	2800      	cmp	r0, #0
     9b8:	f47f ae3e 	bne.w	638 <ull_conn_llcp+0x38>
			conn->procedure_expire = conn->supervision_reload;
     9bc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
     9c0:	2b01      	cmp	r3, #1
     9c2:	f240 8469 	bls.w	1298 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa98>
			conn->procedure_expire = conn->supervision_reload;
     9c6:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
     9ca:	e635      	b.n	638 <ull_conn_llcp+0x38>
     9cc:	f3af 8000 	nop.w
     9d0:	1afd498d 	.word	0x1afd498d
     9d4:	00000007 	.word	0x00000007
     9d8:	20001bc0 	.word	0x20001bc0
     9dc:	3b9aca00 	.word	0x3b9aca00
     9e0:	026259ff 	.word	0x026259ff
     9e4:	01c9c37f 	.word	0x01c9c37f
     9e8:	20000c58 	.word	0x20000c58
     9ec:	0000c7bd 	.word	0x0000c7bd
     9f0:	0001a924 	.word	0x0001a924
     9f4:	0001aa40 	.word	0x0001aa40
     9f8:	0001a580 	.word	0x0001a580
     9fc:	0000c765 	.word	0x0000c765
     a00:	0000f2b5 	.word	0x0000f2b5
     a04:	20001c78 	.word	0x20001c78
			event_counter = lll->event_counter +
     a08:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     a0a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
     a0c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
     a10:	441a      	add	r2, r3
     a12:	442a      	add	r2, r5
	if (conn->llcp.phy_upd_ind.initiate) {
     a14:	07ce      	lsls	r6, r1, #31
			event_counter = lll->event_counter +
     a16:	b295      	uxth	r5, r2
	if (conn->llcp.phy_upd_ind.initiate) {
     a18:	468c      	mov	ip, r1
     a1a:	f100 827b 	bmi.w	f14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x714>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
     a1e:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
     a22:	1aad      	subs	r5, r5, r2
     a24:	042e      	lsls	r6, r5, #16
     a26:	f53f adfe 	bmi.w	626 <ull_conn_llcp+0x26>
		if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED)) {
			phy_bitmask |= PHY_CODED;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
     a2a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
     a2e:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
     a32:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
     a36:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
     a3a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
     a3e:	f011 0f1c 	tst.w	r1, #28
		old_tx = lll->phy_tx;
     a42:	f003 0907 	and.w	r9, r3, #7
		old_rx = lll->phy_rx;
     a46:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
     a4a:	f040 859f 	bne.w	158c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x204>
		uint16_t eff_tx_time = lll->max_tx_time;
     a4e:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
     a52:	f011 0fe0 	tst.w	r1, #224	; 0xe0
     a56:	d00d      	beq.n	a74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x274>
			if (conn->llcp.phy_upd_ind.rx & phy_bitmask) {
     a58:	f011 0f60 	tst.w	r1, #96	; 0x60
				lll->phy_rx = conn->llcp.phy_upd_ind.rx &
     a5c:	bf18      	it	ne
     a5e:	f894 2047 	ldrbne.w	r2, [r4, #71]	; 0x47
     a62:	f3c1 1341 	ubfx	r3, r1, #5, #2
     a66:	bf1c      	itt	ne
     a68:	f363 0202 	bfine	r2, r3, #0, #3
     a6c:	f884 2047 	strbne.w	r2, [r4, #71]	; 0x47
					      phy_bitmask;
			}

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
     a70:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     a74:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
     a78:	2d00      	cmp	r5, #0
     a7a:	f000 8594 	beq.w	15a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21e>
     a7e:	6828      	ldr	r0, [r5, #0]
     a80:	2800      	cmp	r0, #0
     a82:	f000 8590 	beq.w	15a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
     a86:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		    (lll->phy_rx == old_rx)) {
     a8a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		conn->llcp_rx = rx->hdr.link->mem;
     a8e:	6841      	ldr	r1, [r0, #4]
     a90:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
     a94:	f01c 0f02 	tst.w	ip, #2
     a98:	f3c3 0102 	ubfx	r1, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
     a9c:	f3c2 0e02 	ubfx	lr, r2, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
     aa0:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
     aa4:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
     aa8:	d102      	bne.n	ab0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b0>
     aaa:	4599      	cmp	r9, r3
     aac:	f000 8671 	beq.w	1792 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40a>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
     ab0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ab2:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
     ab4:	231d      	movs	r3, #29
     ab6:	712b      	strb	r3, [r5, #4]

		upd = (void *)rx->pdu;
		upd->status = 0U;
     ab8:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
     aba:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
     abc:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
     ac0:	772b      	strb	r3, [r5, #28]
#if defined(CONFIG_BT_CTLR_RX_ENQUEUE_HOLD)
		/* hold node rx until the instant's anchor point sync */
		rx_hold_put(conn, rx->hdr.link, rx);
#else /* !CONFIG_BT_CTLR_RX_ENQUEUE_HOLD */
		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     ac2:	4629      	mov	r1, r5
     ac4:	f00a fea8 	bl	b818 <ll_rx_put>
#endif /* !CONFIG_BT_CTLR_RX_ENQUEUE_HOLD */

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
     ac8:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
     acc:	2d00      	cmp	r5, #0
     ace:	f000 85fb 	beq.w	16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>
     ad2:	6828      	ldr	r0, [r5, #0]
     ad4:	2800      	cmp	r0, #0
     ad6:	f000 85f7 	beq.w	16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
     ada:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
     ade:	6842      	ldr	r2, [r0, #4]
     ae0:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
     ae4:	42b3      	cmp	r3, r6
     ae6:	d30a      	bcc.n	afe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fe>
     ae8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
     aec:	d807      	bhi.n	afe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fe>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
     aee:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
     af2:	42bb      	cmp	r3, r7
     af4:	d303      	bcc.n	afe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fe>
		    (eff_rx_time <= lll->max_rx_time) &&
     af6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
     afa:	f241 8001 	bls.w	1b00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x778>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
     afe:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
     b02:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
     b06:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
     b08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     b0a:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b0c:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
     b10:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
     b14:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b16:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
     b1a:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
     b1c:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
     b1e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
     b22:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
     b24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
     b26:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
     b28:	2315      	movs	r3, #21
#if defined(CONFIG_BT_CTLR_RX_ENQUEUE_HOLD)
		/* hold node rx until the instant's anchor point sync */
		rx_hold_put(conn, rx->hdr.link, rx);
#else /* !CONFIG_BT_CTLR_RX_ENQUEUE_HOLD */
		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     b2a:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
     b2c:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
     b2e:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
     b30:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
     b32:	f00a fe71 	bl	b818 <ll_rx_put>

		if (!IS_ENABLED(CONFIG_BT_CTLR_RX_ENQUEUE_HOLD)) {
			/* Only trigger the rx_demux mayfly when PHY and/or DLE
			 * node rx are not held back until the anchor point sync
			 */
			ll_rx_sched();
     b36:	f00a fe79 	bl	b82c <ll_rx_sched>
     b3a:	e574      	b.n	626 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     b3c:	48cb      	ldr	r0, [pc, #812]	; (e6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66c>)
     b3e:	f007 fa19 	bl	7f74 <mem_acquire>
	if (tx) {
     b42:	2800      	cmp	r0, #0
     b44:	f43f ad6f 	beq.w	626 <ull_conn_llcp+0x26>
		conn->llcp_ack = conn->llcp_req;
     b48:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
     b4c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
     b50:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     b52:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
     b54:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
     b56:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     b5a:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
     b5e:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     b60:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
     b62:	71c1      	strb	r1, [r0, #7]
		if (!conn->tx_ctrl) {
     b64:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	if (
     b68:	2b00      	cmp	r3, #0
     b6a:	f000 83a3 	beq.w	12b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xab4>
	    !conn->llcp_enc.pause_tx &&
     b6e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
     b72:	0789      	lsls	r1, r1, #30
     b74:	f100 839e 	bmi.w	12b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xab4>
	    !conn->llcp_phy.pause_tx &&
     b78:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
     b7c:	07cf      	lsls	r7, r1, #31
     b7e:	f100 8399 	bmi.w	12b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xab4>
		if (conn->tx_head == conn->tx_data) {
     b82:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
     b86:	428b      	cmp	r3, r1
     b88:	f000 876d 	beq.w	1a66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6de>
		} else if (!conn->tx_ctrl) {
     b8c:	2a00      	cmp	r2, #0
     b8e:	f000 87e6 	beq.w	1b5e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d6>
	tx->next = conn->tx_ctrl_last->next;
     b92:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     b96:	681a      	ldr	r2, [r3, #0]
     b98:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
     b9a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
     b9c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
     b9e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
     ba2:	2b00      	cmp	r3, #0
     ba4:	f000 85a0 	beq.w	16e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x360>
		conn->procedure_expire = conn->procedure_reload;
     ba8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
     bac:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
     bb0:	e539      	b.n	626 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
     bb2:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     bb6:	f013 0503 	ands.w	r5, r3, #3
     bba:	f47f ad34 	bne.w	626 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     bbe:	48ab      	ldr	r0, [pc, #684]	; (e6c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66c>)
     bc0:	f007 f9d8 	bl	7f74 <mem_acquire>
	if (!tx) {
     bc4:	4606      	mov	r6, r0
     bc6:	2800      	cmp	r0, #0
     bc8:	f43f ad2d 	beq.w	626 <ull_conn_llcp+0x26>
	if (!lll->role) {
     bcc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     bd0:	2b00      	cmp	r3, #0
     bd2:	f280 82fd 	bge.w	11d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9d0>
	else if (!lll->enc_rx) {
     bd6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
     bda:	0719      	lsls	r1, r3, #28
     bdc:	f100 8613 	bmi.w	1806 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x47e>
		if (conn->llcp.encryption.error_code) {
     be0:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
     be4:	2d00      	cmp	r5, #0
     be6:	f040 86cb 	bne.w	1980 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5f8>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
     bea:	f104 075f 	add.w	r7, r4, #95	; 0x5f
     bee:	463b      	mov	r3, r7
     bf0:	462a      	mov	r2, r5
     bf2:	f104 01ce 	add.w	r1, r4, #206	; 0xce
     bf6:	f204 1049 	addw	r0, r4, #329	; 0x149
     bfa:	f010 feb1 	bl	11960 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
     bfe:	2210      	movs	r2, #16
     c00:	4639      	mov	r1, r7
     c02:	f104 0080 	add.w	r0, r4, #128	; 0x80
     c06:	f015 fdf4 	bl	167f2 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
     c0a:	2208      	movs	r2, #8
     c0c:	f104 0178 	add.w	r1, r4, #120	; 0x78
     c10:	f104 0099 	add.w	r0, r4, #153	; 0x99
     c14:	f015 fded 	bl	167f2 <memcpy>
			lll->ccm_rx.direction = 1U;
     c18:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
     c1c:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
			lll->ccm_rx.counter = 0U;
     c20:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
     c24:	f043 0301 	orr.w	r3, r3, #1
     c28:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
			lll->enc_rx = 1U;
     c2c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
     c30:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
			lll->ccm_tx.direction = 0U;
     c34:	f365 0200 	bfi	r2, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     c38:	2101      	movs	r1, #1
			lll->enc_rx = 1U;
     c3a:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_tx.direction = 0U;
     c3e:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
     c42:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_tx.counter = 0U;
     c46:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
			lll->ccm_rx.counter = 0U;
     c4a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
     c4e:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
     c52:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
     c56:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
     c5a:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
     c5e:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c62:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     c64:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
     c66:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c6a:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
     c6e:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c70:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
     c72:	71f1      	strb	r1, [r6, #7]
	if (
     c74:	2b00      	cmp	r3, #0
     c76:	f000 8326 	beq.w	12c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xac6>
	    !conn->llcp_enc.pause_tx &&
     c7a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     c7e:	0792      	lsls	r2, r2, #30
     c80:	f100 8321 	bmi.w	12c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xac6>
	    !conn->llcp_phy.pause_tx &&
     c84:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     c88:	07d7      	lsls	r7, r2, #31
     c8a:	f100 831c 	bmi.w	12c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xac6>
		if (conn->tx_head == conn->tx_data) {
     c8e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
     c92:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
     c96:	428b      	cmp	r3, r1
     c98:	f000 82f1 	beq.w	127e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa7e>
		} else if (!conn->tx_ctrl) {
     c9c:	2a00      	cmp	r2, #0
     c9e:	f000 8776 	beq.w	1b8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x806>
	tx->next = conn->tx_ctrl_last->next;
     ca2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     ca6:	681a      	ldr	r2, [r3, #0]
     ca8:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
     caa:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
     cac:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
     cae:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
     cb2:	2b00      	cmp	r3, #0
     cb4:	f000 854d 	beq.w	1752 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ca>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
     cb8:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     cbc:	f043 0303 	orr.w	r3, r3, #3
     cc0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
     cc4:	e4af      	b.n	626 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
     cc6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     cc8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
     cca:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
     cce:	440a      	add	r2, r1
     cd0:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
     cd2:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
     cd4:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
     cd6:	f100 80d1 	bmi.w	e7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x67c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
     cda:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
     cde:	1aad      	subs	r5, r5, r2
     ce0:	0428      	lsls	r0, r5, #16
     ce2:	f53f aca0 	bmi.w	626 <ull_conn_llcp+0x26>
			conn->llcp_ack = conn->llcp_req;
     ce6:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
     cea:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
     cee:	f104 0534 	add.w	r5, r4, #52	; 0x34
     cf2:	2205      	movs	r2, #5
     cf4:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
     cf8:	4628      	mov	r0, r5
     cfa:	f015 fd7a 	bl	167f2 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
     cfe:	2105      	movs	r1, #5
     d00:	4628      	mov	r0, r5
     d02:	f007 fb0d 	bl	8320 <util_ones_count_get>
		lll->data_chan_count =
     d06:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
     d0a:	2201      	movs	r2, #1
		lll->data_chan_count =
     d0c:	f360 0305 	bfi	r3, r0, #0, #6
     d10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
     d14:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
     d18:	e485      	b.n	626 <ull_conn_llcp+0x26>
			LL_ASSERT(0);
     d1a:	4a55      	ldr	r2, [pc, #340]	; (e70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x670>)
     d1c:	4955      	ldr	r1, [pc, #340]	; (e74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x674>)
     d1e:	4856      	ldr	r0, [pc, #344]	; (e78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x678>)
     d20:	f240 43ec 	movw	r3, #1260	; 0x4ec
     d24:	f015 fae5 	bl	162f2 <assert_print>
     d28:	4040      	eors	r0, r0
     d2a:	f380 8811 	msr	BASEPRI, r0
     d2e:	f04f 0003 	mov.w	r0, #3
     d32:	df02      	svc	2
			break;
     d34:	e477      	b.n	626 <ull_conn_llcp+0x26>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     d36:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
     d3a:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
     d3e:	42ba      	cmp	r2, r7
     d40:	d143      	bne.n	dca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ca>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     d42:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
     d46:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
     d4a:	42ba      	cmp	r2, r7
     d4c:	f000 82c6 	beq.w	12dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xadc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     d50:	1bd2      	subs	r2, r2, r7
     d52:	07d0      	lsls	r0, r2, #31
     d54:	f57f ac67 	bpl.w	626 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
     d58:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
     d5c:	07d9      	lsls	r1, r3, #31
     d5e:	f140 85c5 	bpl.w	18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>
	} else if (conn->llcp_version.rx) {
     d62:	0798      	lsls	r0, r3, #30
     d64:	f140 85b2 	bpl.w	18cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x544>
		rx = ll_pdu_rx_alloc();
     d68:	f00a fd86 	bl	b878 <ll_pdu_rx_alloc>
		if (!rx) {
     d6c:	4601      	mov	r1, r0
     d6e:	b300      	cbz	r0, db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
		conn->llcp_version.ack = conn->llcp_version.req;
     d70:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
     d74:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		rx->hdr.handle = conn->lll.handle;
     d78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d7a:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     d7c:	2303      	movs	r3, #3
     d7e:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     d80:	7f03      	ldrb	r3, [r0, #28]
     d82:	f043 0303 	orr.w	r3, r3, #3
     d86:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     d88:	2306      	movs	r3, #6
     d8a:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     d8c:	230c      	movs	r3, #12
     d8e:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
     d90:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
     d94:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
     d98:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
     d9c:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
     da0:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
     da4:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
     da8:	6808      	ldr	r0, [r1, #0]
     daa:	f00a fd35 	bl	b818 <ll_rx_put>
	ll_rx_sched();
     dae:	f00a fd3d 	bl	b82c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     db2:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
     db6:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
     dba:	e42d      	b.n	618 <ull_conn_llcp+0x18>
				event_len_prep(conn);
     dbc:	4620      	mov	r0, r4
     dbe:	f00b fdeb 	bl	c998 <event_len_prep>
     dc2:	e44a      	b.n	65a <ull_conn_llcp+0x5a>
		conn->tx_data_last = tx;
     dc4:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
     dc8:	e5f3      	b.n	9b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b2>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     dca:	1bd2      	subs	r2, r2, r7
     dcc:	07d1      	lsls	r1, r2, #31
     dce:	f57f ac2a 	bpl.w	626 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
     dd2:	f890 10ba 	ldrb.w	r1, [r0, #186]	; 0xba
     dd6:	f011 0701 	ands.w	r7, r1, #1
     dda:	f000 840d 	beq.w	15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>
		rx = ll_pdu_rx_alloc();
     dde:	f00a fd4b 	bl	b878 <ll_pdu_rx_alloc>
		if (!rx) {
     de2:	4607      	mov	r7, r0
     de4:	2800      	cmp	r0, #0
     de6:	d0e4      	beq.n	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
		conn->llcp_feature.ack = conn->llcp_feature.req;
     de8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
     dec:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     df0:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
     df2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     df4:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     df6:	f043 0303 	orr.w	r3, r3, #3
     dfa:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     dfc:	2309      	movs	r3, #9
     dfe:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     e00:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     e02:	2303      	movs	r3, #3
     e04:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     e06:	4641      	mov	r1, r8
     e08:	2208      	movs	r2, #8
     e0a:	3020      	adds	r0, #32
     e0c:	f015 fcfc 	bl	16808 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
     e10:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
     e14:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
     e16:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
     e1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
     e1e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
     e22:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
     e24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     e28:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
     e2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
     e30:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
     e32:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
     e36:	0a12      	lsrs	r2, r2, #8
     e38:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
     e3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     e40:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
     e44:	4639      	mov	r1, r7
     e46:	e7af      	b.n	da8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a8>
		switch (conn->llcp_cu.state) {
     e48:	1e4b      	subs	r3, r1, #1
     e4a:	2b04      	cmp	r3, #4
     e4c:	f201 8129 	bhi.w	20a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd1a>
     e50:	a101      	add	r1, pc, #4	; (adr r1, e58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x658>)
     e52:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     e56:	bf00      	nop
     e58:	000010bd 	.word	0x000010bd
     e5c:	00000fdd 	.word	0x00000fdd
     e60:	00000627 	.word	0x00000627
     e64:	000010c3 	.word	0x000010c3
     e68:	00001133 	.word	0x00001133
     e6c:	20001c78 	.word	0x20001c78
     e70:	0001a924 	.word	0x0001a924
     e74:	0001a5e0 	.word	0x0001a5e0
     e78:	0001a580 	.word	0x0001a580
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e7c:	48cb      	ldr	r0, [pc, #812]	; (11ac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9ac>)
     e7e:	f007 f879 	bl	7f74 <mem_acquire>
		if (tx) {
     e82:	4606      	mov	r6, r0
     e84:	2800      	cmp	r0, #0
     e86:	f43f abce 	beq.w	626 <ull_conn_llcp+0x26>
						      conn->lll.latency + 6;
     e8a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
     e8c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e90:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
     e92:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
     e94:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
     e98:	442a      	add	r2, r5
			conn->llcp.chan_map.initiate = 0U;
     e9a:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
     e9e:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     ea2:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     ea6:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
     ea8:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     eaa:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     eac:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     eae:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
     eb0:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
     eb4:	2205      	movs	r2, #5
     eb6:	3008      	adds	r0, #8
     eb8:	f015 fc9b 	bl	167f2 <memcpy>
	    conn->tx_head &&
     ebc:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
     ec0:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
     ec4:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
     ec8:	2b00      	cmp	r3, #0
     eca:	f000 841a 	beq.w	1702 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37a>
	    !conn->llcp_enc.pause_tx &&
     ece:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     ed2:	0797      	lsls	r7, r2, #30
     ed4:	f100 8415 	bmi.w	1702 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37a>
	    !conn->llcp_phy.pause_tx &&
     ed8:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     edc:	07d5      	lsls	r5, r2, #31
     ede:	f100 8410 	bmi.w	1702 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37a>
		if (conn->tx_head == conn->tx_data) {
     ee2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
     ee6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
     eea:	428b      	cmp	r3, r1
     eec:	f000 8641 	beq.w	1b72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ea>
		} else if (!conn->tx_ctrl) {
     ef0:	2a00      	cmp	r2, #0
     ef2:	f000 873f 	beq.w	1d74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ec>
	tx->next = conn->tx_ctrl_last->next;
     ef6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     efa:	681a      	ldr	r2, [r3, #0]
     efc:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
     efe:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
     f00:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
     f02:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
     f06:	2b00      	cmp	r3, #0
     f08:	f47f ab8d 	bne.w	626 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
     f0c:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
     f10:	f7ff bb89 	b.w	626 <ull_conn_llcp+0x26>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
     f14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
     f18:	2200      	movs	r2, #0
     f1a:	f007 f899 	bl	8050 <memq_peek>
     f1e:	4606      	mov	r6, r0
     f20:	2800      	cmp	r0, #0
     f22:	f47f ab80 	bne.w	626 <ull_conn_llcp+0x26>
		rx = ll_pdu_rx_alloc_peek(2);
     f26:	2002      	movs	r0, #2
     f28:	f00a fc86 	bl	b838 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     f2c:	4680      	mov	r8, r0
     f2e:	2800      	cmp	r0, #0
     f30:	f43f ab79 	beq.w	626 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f34:	489d      	ldr	r0, [pc, #628]	; (11ac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9ac>)
     f36:	f007 f81d 	bl	7f74 <mem_acquire>
		if (!tx) {
     f3a:	4607      	mov	r7, r0
     f3c:	2800      	cmp	r0, #0
     f3e:	f43f ab72 	beq.w	626 <ull_conn_llcp+0x26>
		conn->llcp.phy_upd_ind.initiate = 0U;
     f42:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
     f46:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
     f4a:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
     f4e:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
     f52:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
     f56:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
     f5a:	b2db      	uxtb	r3, r3
     f5c:	f040 859c 	bne.w	1a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x710>
			conn->llcp_ack = conn->llcp_req;
     f60:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
     f64:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
     f68:	079d      	lsls	r5, r3, #30
			conn->llcp_ack = conn->llcp_req;
     f6a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
     f6e:	f100 85d0 	bmi.w	1b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78a>
     f72:	4633      	mov	r3, r6
     f74:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
     f76:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
     f78:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
     f7a:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
     f7c:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
     f7e:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
     f80:	2218      	movs	r2, #24
	    conn->tx_head &&
     f82:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		if (!conn->tx_ctrl) {
     f86:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->llctrl.opcode =
     f8a:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f8c:	793a      	ldrb	r2, [r7, #4]
     f8e:	f042 0203 	orr.w	r2, r2, #3
     f92:	713a      	strb	r2, [r7, #4]
	if (
     f94:	2b00      	cmp	r3, #0
     f96:	f000 852d 	beq.w	19f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66c>
	    !conn->llcp_enc.pause_tx &&
     f9a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     f9e:	0790      	lsls	r0, r2, #30
     fa0:	f100 8528 	bmi.w	19f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66c>
	    !conn->llcp_phy.pause_tx &&
     fa4:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     fa8:	07d2      	lsls	r2, r2, #31
     faa:	f100 8523 	bmi.w	19f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66c>
		if (conn->tx_head == conn->tx_data) {
     fae:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
     fb2:	4293      	cmp	r3, r2
     fb4:	f000 8647 	beq.w	1c46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8be>
		} else if (!conn->tx_ctrl) {
     fb8:	2900      	cmp	r1, #0
     fba:	f000 8703 	beq.w	1dc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa3c>
	tx->next = conn->tx_ctrl_last->next;
     fbe:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     fc2:	681a      	ldr	r2, [r3, #0]
     fc4:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
     fc6:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
     fc8:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	2b00      	cmp	r3, #0
     fd0:	f47f ab29 	bne.w	626 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
     fd4:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
     fd8:	f7ff bb25 	b.w	626 <ull_conn_llcp+0x26>
		switch (conn->llcp_cu.state) {
     fdc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 11b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9b0>
		rx = ll_pdu_rx_alloc_peek(1);
     fe0:	2001      	movs	r0, #1
     fe2:	f00a fc29 	bl	b838 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     fe6:	4607      	mov	r7, r0
     fe8:	2800      	cmp	r0, #0
     fea:	f43f ab1c 	beq.w	626 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     fee:	486f      	ldr	r0, [pc, #444]	; (11ac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9ac>)
     ff0:	f006 ffc0 	bl	7f74 <mem_acquire>
		if (!tx) {
     ff4:	4605      	mov	r5, r0
     ff6:	2800      	cmp	r0, #0
     ff8:	f43f ab15 	beq.w	626 <ull_conn_llcp+0x26>
	if (!conn_upd_curr) {
     ffc:	4b6d      	ldr	r3, [pc, #436]	; (11b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9b4>)
     ffe:	681a      	ldr	r2, [r3, #0]
    1000:	2a00      	cmp	r2, #0
    1002:	f000 8460 	beq.w	18c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x53e>
		(void)ll_pdu_rx_alloc();
    1006:	f00a fc37 	bl	b878 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    100a:	683b      	ldr	r3, [r7, #0]
    100c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    1010:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1012:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    1014:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1018:	f043 0303 	orr.w	r3, r3, #3
    101c:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    101e:	230c      	movs	r3, #12
    1020:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1022:	2300      	movs	r3, #0
    1024:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1026:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    102a:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    102c:	4a62      	ldr	r2, [pc, #392]	; (11b8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9b8>)
    102e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    1032:	fba2 2303 	umull	r2, r3, r2, r3
    1036:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1038:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    103c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    1040:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1044:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    1048:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    104c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    1050:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1054:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    1058:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    105c:	2203      	movs	r2, #3
    105e:	f362 0302 	bfi	r3, r2, #0, #3
    1062:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1066:	68a3      	ldr	r3, [r4, #8]
    1068:	2b00      	cmp	r3, #0
    106a:	da0a      	bge.n	1082 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x882>
			uint32_t ticks_prepare_to_start =
    106c:	68e0      	ldr	r0, [r4, #12]
    106e:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    1070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1074:	4290      	cmp	r0, r2
    1076:	bf2c      	ite	cs
    1078:	1831      	addcs	r1, r6, r0
    107a:	18b1      	addcc	r1, r6, r2
    107c:	1acb      	subs	r3, r1, r3
    107e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1082:	4b4e      	ldr	r3, [pc, #312]	; (11bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9bc>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1084:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    1086:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    1088:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    108c:	2102      	movs	r1, #2
    108e:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    1090:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1094:	f007 f846 	bl	8124 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1098:	2800      	cmp	r0, #0
    109a:	f43f aac4 	beq.w	626 <ull_conn_llcp+0x26>
    109e:	4a48      	ldr	r2, [pc, #288]	; (11c0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c0>)
    10a0:	4948      	ldr	r1, [pc, #288]	; (11c4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c4>)
    10a2:	4849      	ldr	r0, [pc, #292]	; (11c8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c8>)
    10a4:	f640 33f4 	movw	r3, #3060	; 0xbf4
    10a8:	f015 f923 	bl	162f2 <assert_print>
    10ac:	4040      	eors	r0, r0
    10ae:	f380 8811 	msr	BASEPRI, r0
    10b2:	f04f 0003 	mov.w	r0, #3
    10b6:	df02      	svc	2
    10b8:	f7ff bab5 	b.w	626 <ull_conn_llcp+0x26>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    10bc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 11cc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9cc>
    10c0:	e78e      	b.n	fe0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7e0>
						      conn->lll.latency + 6;
    10c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    10c4:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    10c8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    10cc:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
						      conn->lll.latency + 6;
    10d0:	3306      	adds	r3, #6
    10d2:	441a      	add	r2, r3
    10d4:	b293      	uxth	r3, r2
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    10d6:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    10da:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    10de:	f1a5 0209 	sub.w	r2, r5, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    10e2:	812b      	strh	r3, [r5, #8]
		if (!conn->tx_ctrl) {
    10e4:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    10e8:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (
    10ec:	2900      	cmp	r1, #0
    10ee:	f000 83d3 	beq.w	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
	    !conn->llcp_enc.pause_tx &&
    10f2:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    10f6:	0787      	lsls	r7, r0, #30
    10f8:	f100 83ce 	bmi.w	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
	    !conn->llcp_phy.pause_tx &&
    10fc:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    1100:	07c6      	lsls	r6, r0, #31
    1102:	f100 83c9 	bmi.w	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
		if (conn->tx_head == conn->tx_data) {
    1106:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    110a:	4281      	cmp	r1, r0
    110c:	f000 85c7 	beq.w	1c9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x916>
		} else if (!conn->tx_ctrl) {
    1110:	2b00      	cmp	r3, #0
    1112:	f000 8646 	beq.w	1da2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa1a>
	tx->next = conn->tx_ctrl_last->next;
    1116:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    111a:	6819      	ldr	r1, [r3, #0]
    111c:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    1120:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    1122:	f855 1c09 	ldr.w	r1, [r5, #-9]
	conn->tx_ctrl_last = tx;
    1126:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    112a:	2900      	cmp	r1, #0
    112c:	f47f aa7b 	bne.w	626 <ull_conn_llcp+0x26>
    1130:	e038      	b.n	11a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9a4>
			conn->llcp_ack = conn->llcp_req;
    1132:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    1136:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			conn->llcp_cu.ack = conn->llcp_cu.req;
    113a:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
    113e:	4a1d      	ldr	r2, [pc, #116]	; (11b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9b4>)
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1140:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1144:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	    conn->tx_head &&
    1148:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    114c:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    1150:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
    1154:	2100      	movs	r1, #0
    1156:	6011      	str	r1, [r2, #0]
		if (!conn->tx_ctrl) {
    1158:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    115c:	f1a5 0209 	sub.w	r2, r5, #9
	if (
    1160:	2b00      	cmp	r3, #0
    1162:	f000 83a6 	beq.w	18b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52a>
	    !conn->llcp_enc.pause_tx &&
    1166:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    116a:	0786      	lsls	r6, r0, #30
    116c:	f100 83a1 	bmi.w	18b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52a>
	    !conn->llcp_phy.pause_tx &&
    1170:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    1174:	07c0      	lsls	r0, r0, #31
    1176:	f100 839c 	bmi.w	18b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x52a>
		if (conn->tx_head == conn->tx_data) {
    117a:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    117e:	4283      	cmp	r3, r0
    1180:	f000 856e 	beq.w	1c60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d8>
		} else if (!conn->tx_ctrl) {
    1184:	2900      	cmp	r1, #0
    1186:	f000 8602 	beq.w	1d8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa06>
	tx->next = conn->tx_ctrl_last->next;
    118a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    118e:	6819      	ldr	r1, [r3, #0]
    1190:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    1194:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    1196:	f855 3c09 	ldr.w	r3, [r5, #-9]
	conn->tx_ctrl_last = tx;
    119a:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    119e:	2b00      	cmp	r3, #0
    11a0:	f47f aa41 	bne.w	626 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    11a4:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    11a8:	f7ff ba3d 	b.w	626 <ull_conn_llcp+0x26>
    11ac:	20001c78 	.word	0x20001c78
    11b0:	00002851 	.word	0x00002851
    11b4:	20001bc0 	.word	0x20001bc0
    11b8:	d1b71759 	.word	0xd1b71759
    11bc:	20000560 	.word	0x20000560
    11c0:	0001a924 	.word	0x0001a924
    11c4:	0001a868 	.word	0x0001a868
    11c8:	0001a580 	.word	0x0001a580
    11cc:	0000f9f1 	.word	0x0000f9f1
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    11d0:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    11d4:	463b      	mov	r3, r7
    11d6:	462a      	mov	r2, r5
    11d8:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    11dc:	f204 1049 	addw	r0, r4, #329	; 0x149
    11e0:	f010 fbbe 	bl	11960 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    11e4:	2210      	movs	r2, #16
    11e6:	4639      	mov	r1, r7
    11e8:	f104 0080 	add.w	r0, r4, #128	; 0x80
    11ec:	f015 fb01 	bl	167f2 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    11f0:	2208      	movs	r2, #8
    11f2:	f104 0178 	add.w	r1, r4, #120	; 0x78
    11f6:	f104 0099 	add.w	r0, r4, #153	; 0x99
    11fa:	f015 fafa 	bl	167f2 <memcpy>
		lll->ccm_rx.direction = 0;
    11fe:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    1202:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    1206:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    120a:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->ccm_tx.counter = 0;
    120e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
		lll->enc_rx = 1;
    1212:	f023 0318 	bic.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    1216:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    121a:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.counter = 0;
    121e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    1222:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    1226:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    122a:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    122e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    1232:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    1236:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->enc_rx = 1;
    123a:	f043 0318 	orr.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    123e:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    1242:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conn->lll.enc_tx = 1;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    1246:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    1248:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    124c:	7932      	ldrb	r2, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    124e:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    1250:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1254:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    1258:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    125a:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    125c:	71f1      	strb	r1, [r6, #7]
	if (
    125e:	b393      	cbz	r3, 12c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xac6>
	    !conn->llcp_enc.pause_tx &&
    1260:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1264:	0795      	lsls	r5, r2, #30
    1266:	d42e      	bmi.n	12c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xac6>
	    !conn->llcp_phy.pause_tx &&
    1268:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    126c:	07d0      	lsls	r0, r2, #31
    126e:	d42a      	bmi.n	12c6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xac6>
		if (conn->tx_head == conn->tx_data) {
    1270:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1274:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1276:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    127a:	f47f ad0f 	bne.w	c9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x49c>
			conn->tx_data = conn->tx_data->next;
    127e:	6819      	ldr	r1, [r3, #0]
    1280:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1284:	2a00      	cmp	r2, #0
    1286:	f47f ad0c 	bne.w	ca2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a2>
			tx->next = conn->tx_head->next;
    128a:	681a      	ldr	r2, [r3, #0]
    128c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    128e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    1290:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    1292:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1296:	e50c      	b.n	cb2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b2>
				conn->procedure_expire++;
    1298:	3301      	adds	r3, #1
    129a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    129e:	f7ff b9cc 	b.w	63a <ull_conn_llcp+0x3a>
			tx->next = conn->tx_head;
    12a2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    12a4:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    12a8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    12ac:	2b00      	cmp	r3, #0
    12ae:	f47f ab80 	bne.w	9b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b2>
    12b2:	e587      	b.n	dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>
		if (!conn->tx_ctrl) {
    12b4:	2a00      	cmp	r2, #0
    12b6:	f47f ac6c 	bne.w	b92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x392>
			tx->next = conn->tx_head;
    12ba:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    12bc:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    12c0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    12c4:	e46d      	b.n	ba2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a2>
		if (!conn->tx_ctrl) {
    12c6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    12ca:	2a00      	cmp	r2, #0
    12cc:	f47f ace9 	bne.w	ca2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a2>
			tx->next = conn->tx_head;
    12d0:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    12d2:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    12d6:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    12da:	e4ea      	b.n	cb2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b2>
		} else if (conn->llcp_conn_param.ack !=
    12dc:	f890 715d 	ldrb.w	r7, [r0, #349]	; 0x15d
    12e0:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    12e4:	4297      	cmp	r7, r2
    12e6:	f000 8218 	beq.w	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
	return conn_upd_curr && (conn_upd_curr != conn);
    12ea:	4fbb      	ldr	r7, [pc, #748]	; (15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>)
    12ec:	683a      	ldr	r2, [r7, #0]
    12ee:	2a00      	cmp	r2, #0
    12f0:	f000 8399 	beq.w	1a26 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x69e>
    12f4:	4290      	cmp	r0, r2
    12f6:	f47f a996 	bne.w	626 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    12fa:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    12fe:	f002 020f 	and.w	r2, r2, #15
    1302:	2a08      	cmp	r2, #8
    1304:	f200 86de 	bhi.w	20c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd3c>
    1308:	a001      	add	r0, pc, #4	; (adr r0, 1310 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb10>)
    130a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    130e:	bf00      	nop
    1310:	00001479 	.word	0x00001479
    1314:	000013f1 	.word	0x000013f1
    1318:	000013a1 	.word	0x000013a1
    131c:	00000619 	.word	0x00000619
    1320:	00000619 	.word	0x00000619
    1324:	00000619 	.word	0x00000619
    1328:	00000619 	.word	0x00000619
    132c:	00000619 	.word	0x00000619
    1330:	00001335 	.word	0x00001335
			event_counter = lll->event_counter +
    1334:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    1336:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    1338:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    133c:	440a      	add	r2, r1
    133e:	442a      	add	r2, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1340:	f894 515e 	ldrb.w	r5, [r4, #350]	; 0x15e
	    conn->tx_head &&
    1344:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    1348:	f820 2c02 	strh.w	r2, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    134c:	2204      	movs	r2, #4
    134e:	f362 0503 	bfi	r5, r2, #0, #4
    1352:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1356:	f1a0 0213 	sub.w	r2, r0, #19
		if (!conn->tx_ctrl) {
    135a:	f8d4 51a0 	ldr.w	r5, [r4, #416]	; 0x1a0
	if (
    135e:	2900      	cmp	r1, #0
    1360:	f000 83c4 	beq.w	1aec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x764>
	    conn->tx_head &&
    1364:	079e      	lsls	r6, r3, #30
    1366:	f100 83c1 	bmi.w	1aec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x764>
	    !conn->llcp_phy.pause_tx &&
    136a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    136e:	07db      	lsls	r3, r3, #31
    1370:	f100 83bc 	bmi.w	1aec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x764>
		if (conn->tx_head == conn->tx_data) {
    1374:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    1378:	4299      	cmp	r1, r3
    137a:	f000 8666 	beq.w	204a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc2>
		} else if (!conn->tx_ctrl) {
    137e:	2d00      	cmp	r5, #0
    1380:	f000 862a 	beq.w	1fd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc50>
	tx->next = conn->tx_ctrl_last->next;
    1384:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1388:	6819      	ldr	r1, [r3, #0]
    138a:	f840 1c13 	str.w	r1, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
    138e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    1390:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1394:	f850 3c13 	ldr.w	r3, [r0, #-19]
    1398:	2b00      	cmp	r3, #0
    139a:	f47f a944 	bne.w	626 <ull_conn_llcp+0x26>
    139e:	e701      	b.n	11a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9a4>
	if (conn->llcp_enc.pause_tx) {
    13a0:	079f      	lsls	r7, r3, #30
    13a2:	f53f a940 	bmi.w	626 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    13a6:	f00a fa67 	bl	b878 <ll_pdu_rx_alloc>
	if (!rx) {
    13aa:	4601      	mov	r1, r0
    13ac:	2800      	cmp	r0, #0
    13ae:	f43f ad00 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    13b2:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    13b6:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    13b8:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    13ba:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    13be:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    13c2:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    13c4:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	rx->hdr.handle = conn->lll.handle;
    13c8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    13ca:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    13cc:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    13ce:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    13d0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    13d4:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    13d6:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    13da:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    13dc:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    13e0:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    13e2:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    13e6:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    13e8:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    13ea:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    13ec:	77cb      	strb	r3, [r1, #31]
    13ee:	e4db      	b.n	da8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a8>
	if (conn->llcp_conn_param.status) {
    13f0:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    13f4:	2b00      	cmp	r3, #0
    13f6:	f040 83e7 	bne.w	1bc8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x840>
	if (!conn->lll.role) {
    13fa:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    13fe:	2a00      	cmp	r2, #0
    1400:	f2c0 84fc 	blt.w	1dfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa74>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1404:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_offset_us = 0U;
    1408:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    140c:	2006      	movs	r0, #6
    140e:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    1412:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1416:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    141a:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
    141c:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
		conn->llcp_cu.win_size = 1U;
    1420:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		if (preferred_periodicity) {
    1424:	2800      	cmp	r0, #0
    1426:	f000 84ae 	beq.w	1d86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9fe>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    142a:	fbb2 f3f0 	udiv	r3, r2, r0
    142e:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    1432:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    1436:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    1438:	4298      	cmp	r0, r3
    143a:	bf98      	it	ls
    143c:	461a      	movls	r2, r3
    143e:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1442:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1446:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    144a:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    144e:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1452:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1456:	00db      	lsls	r3, r3, #3
    1458:	f022 020f 	bic.w	r2, r2, #15
    145c:	f043 0302 	orr.w	r3, r3, #2
    1460:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    1462:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1464:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    1468:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    146c:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    1470:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		return;
    1474:	f7ff b8d7 	b.w	626 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1478:	4858      	ldr	r0, [pc, #352]	; (15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>)
    147a:	f006 fd7b 	bl	7f74 <mem_acquire>
	if (!tx) {
    147e:	4602      	mov	r2, r0
    1480:	2800      	cmp	r0, #0
    1482:	f43f ac96 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1486:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    1488:	603c      	str	r4, [r7, #0]
    148a:	f043 0303 	orr.w	r3, r3, #3
    148e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1490:	2318      	movs	r3, #24
    1492:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1494:	230f      	movs	r3, #15
    1496:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1498:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    149c:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    149e:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    14a2:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    14a4:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    14a8:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    14aa:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    14ae:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    14b0:	2300      	movs	r3, #0
    14b2:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    14b4:	74c3      	strb	r3, [r0, #19]
    14b6:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    14b8:	f04f 33ff 	mov.w	r3, #4294967295
    14bc:	7543      	strb	r3, [r0, #21]
    14be:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    14c0:	75c3      	strb	r3, [r0, #23]
    14c2:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    14c4:	7643      	strb	r3, [r0, #25]
    14c6:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    14c8:	76c3      	strb	r3, [r0, #27]
    14ca:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    14cc:	7743      	strb	r3, [r0, #29]
    14ce:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
    14d0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    14d4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    14d8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    14dc:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    14e0:	2107      	movs	r1, #7
    14e2:	f361 0303 	bfi	r3, r1, #0, #4
    14e6:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    14ea:	68a3      	ldr	r3, [r4, #8]
    14ec:	2b00      	cmp	r3, #0
    14ee:	da0a      	bge.n	1506 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17e>
			uint32_t ticks_prepare_to_start =
    14f0:	68e7      	ldr	r7, [r4, #12]
    14f2:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    14f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    14f8:	4287      	cmp	r7, r0
    14fa:	bf2c      	ite	cs
    14fc:	19f1      	addcs	r1, r6, r7
    14fe:	1831      	addcc	r1, r6, r0
    1500:	1acb      	subs	r3, r1, r3
    1502:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		win_offs = &p->offset0;
    1506:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    1508:	4b35      	ldr	r3, [pc, #212]	; (15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
    150a:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    150e:	2201      	movs	r2, #1
    1510:	2102      	movs	r1, #2
    1512:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    1514:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1516:	f006 fe05 	bl	8124 <mayfly_enqueue>
		LL_ASSERT(!retval);
    151a:	2800      	cmp	r0, #0
    151c:	f43f ac49 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
    1520:	4a30      	ldr	r2, [pc, #192]	; (15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>)
    1522:	4931      	ldr	r1, [pc, #196]	; (15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>)
    1524:	f640 7381 	movw	r3, #3969	; 0xf81
		LL_ASSERT(0);
    1528:	4830      	ldr	r0, [pc, #192]	; (15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>)
    152a:	f014 fee2 	bl	162f2 <assert_print>
    152e:	4040      	eors	r0, r0
    1530:	f380 8811 	msr	BASEPRI, r0
    1534:	f04f 0003 	mov.w	r0, #3
    1538:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    153a:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    153e:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		break;
    1542:	f7ff b869 	b.w	618 <ull_conn_llcp+0x18>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1546:	fb08 3311 	mls	r3, r8, r1, r3
    154a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    154e:	4928      	ldr	r1, [pc, #160]	; (15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>)
    1550:	b29b      	uxth	r3, r3
    1552:	fb02 f303 	mul.w	r3, r2, r3
    1556:	fba3 0101 	umull	r0, r1, r3, r1
    155a:	a31d      	add	r3, pc, #116	; (adr r3, 15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>)
    155c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1560:	f7fe fdce 	bl	100 <__aeabi_uldivmod>
    1564:	1a36      	subs	r6, r6, r0
    1566:	f7ff b92f 	b.w	7c8 <__data_size+0x53>
		LL_ASSERT(rx && rx->hdr.link);
    156a:	4a1e      	ldr	r2, [pc, #120]	; (15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>)
    156c:	4921      	ldr	r1, [pc, #132]	; (15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>)
    156e:	481f      	ldr	r0, [pc, #124]	; (15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>)
    1570:	f640 43a1 	movw	r3, #3233	; 0xca1
    1574:	f014 febd 	bl	162f2 <assert_print>
    1578:	4040      	eors	r0, r0
    157a:	f380 8811 	msr	BASEPRI, r0
    157e:	f04f 0003 	mov.w	r0, #3
    1582:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1584:	f8d8 0000 	ldr.w	r0, [r8]
    1588:	f7ff b8ca 	b.w	720 <ull_conn_llcp+0x120>
			if (conn->llcp.phy_upd_ind.tx & phy_bitmask) {
    158c:	f011 0f0c 	tst.w	r1, #12
				lll->phy_tx = conn->llcp.phy_upd_ind.tx &
    1590:	f3c1 0281 	ubfx	r2, r1, #2, #2
    1594:	bf1c      	itt	ne
    1596:	f362 0302 	bfine	r3, r2, #0, #3
    159a:	f884 3046 	strbne.w	r3, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    159e:	f44f 76a4 	mov.w	r6, #328	; 0x148
    15a2:	f7ff ba56 	b.w	a52 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x252>
		LL_ASSERT(rx && rx->hdr.link);
    15a6:	4a0f      	ldr	r2, [pc, #60]	; (15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>)
    15a8:	4912      	ldr	r1, [pc, #72]	; (15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>)
    15aa:	4810      	ldr	r0, [pc, #64]	; (15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>)
    15ac:	f241 23b5 	movw	r3, #4789	; 0x12b5
    15b0:	f014 fe9f 	bl	162f2 <assert_print>
    15b4:	4040      	eors	r0, r0
    15b6:	f380 8811 	msr	BASEPRI, r0
    15ba:	f04f 0003 	mov.w	r0, #3
    15be:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    15c0:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    15c2:	f894 c0c0 	ldrb.w	ip, [r4, #192]	; 0xc0
    15c6:	f7ff ba5e 	b.w	a86 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x286>
    15ca:	bf00      	nop
    15cc:	f3af 8000 	nop.w
    15d0:	1afd498d 	.word	0x1afd498d
    15d4:	00000007 	.word	0x00000007
    15d8:	20001bc0 	.word	0x20001bc0
    15dc:	20001c78 	.word	0x20001c78
    15e0:	20000570 	.word	0x20000570
    15e4:	0001a924 	.word	0x0001a924
    15e8:	0001a868 	.word	0x0001a868
    15ec:	0001a580 	.word	0x0001a580
    15f0:	3b9aca00 	.word	0x3b9aca00
    15f4:	0001aa04 	.word	0x0001aa04
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    15f8:	48b7      	ldr	r0, [pc, #732]	; (18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>)
    15fa:	f006 fcbb 	bl	7f74 <mem_acquire>
	if (tx) {
    15fe:	4680      	mov	r8, r0
    1600:	2800      	cmp	r0, #0
    1602:	f43f abd6 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
		conn->llcp_feature.ack--;
    1606:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    160a:	3b01      	subs	r3, #1
    160c:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1610:	2309      	movs	r3, #9
    1612:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1614:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    1618:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    161a:	7903      	ldrb	r3, [r0, #4]
    161c:	f043 0303 	orr.w	r3, r3, #3
    1620:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1622:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    1626:	bfac      	ite	ge
    1628:	2308      	movge	r3, #8
    162a:	230e      	movlt	r3, #14
    162c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    162e:	4639      	mov	r1, r7
    1630:	4410      	add	r0, r2
    1632:	f015 f8e9 	bl	16808 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    1636:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    163a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    163c:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    1640:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1644:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    1648:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    164a:	f888 300c 	strb.w	r3, [r8, #12]
    164e:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    1652:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    1656:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    165a:	0a09      	lsrs	r1, r1, #8
    165c:	0a12      	lsrs	r2, r2, #8
    165e:	f888 100b 	strb.w	r1, [r8, #11]
    1662:	f888 300d 	strb.w	r3, [r8, #13]
    1666:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    166a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    166e:	2b00      	cmp	r3, #0
    1670:	f000 8084 	beq.w	177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>
	    !conn->llcp_enc.pause_tx &&
    1674:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1678:	0792      	lsls	r2, r2, #30
    167a:	d47f      	bmi.n	177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>
	    !conn->llcp_phy.pause_tx &&
    167c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1680:	07d7      	lsls	r7, r2, #31
    1682:	d47b      	bmi.n	177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>
		if (conn->tx_head == conn->tx_data) {
    1684:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1688:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    168c:	428b      	cmp	r3, r1
    168e:	f000 8288 	beq.w	1ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81a>
		} else if (!conn->tx_ctrl) {
    1692:	2a00      	cmp	r2, #0
    1694:	f000 8445 	beq.w	1f22 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb9a>
	tx->next = conn->tx_ctrl_last->next;
    1698:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    169c:	681a      	ldr	r2, [r3, #0]
    169e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    16a2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    16a6:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    16aa:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
	if (!tx->next) {
    16ae:	2b00      	cmp	r3, #0
    16b0:	f000 81d6 	beq.w	1a60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d8>
		conn->procedure_expire = conn->procedure_reload;
    16b4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    16b8:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    16bc:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		conn->procedure_expire = conn->procedure_reload;
    16c0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    16c4:	f7fe bfa8 	b.w	618 <ull_conn_llcp+0x18>
		LL_ASSERT(rx && rx->hdr.link);
    16c8:	4a84      	ldr	r2, [pc, #528]	; (18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>)
    16ca:	4985      	ldr	r1, [pc, #532]	; (18e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x558>)
    16cc:	4885      	ldr	r0, [pc, #532]	; (18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>)
    16ce:	f241 23e9 	movw	r3, #4841	; 0x12e9
    16d2:	f014 fe0e 	bl	162f2 <assert_print>
    16d6:	4040      	eors	r0, r0
    16d8:	f380 8811 	msr	BASEPRI, r0
    16dc:	f04f 0003 	mov.w	r0, #3
    16e0:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    16e2:	6828      	ldr	r0, [r5, #0]
    16e4:	f7ff b9f9 	b.w	ada <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2da>
		conn->tx_data_last = tx;
    16e8:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    16ec:	f7ff ba5c 	b.w	ba8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a8>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    16f0:	2201      	movs	r2, #1
    16f2:	4610      	mov	r0, r2
    16f4:	2102      	movs	r1, #2
    16f6:	f006 fce3 	bl	80c0 <mayfly_enable>
				return -ECANCELED;
    16fa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    16fe:	f7fe bf9c 	b.w	63a <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    1702:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1706:	2a00      	cmp	r2, #0
    1708:	f47f abf5 	bne.w	ef6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6f6>
			tx->next = conn->tx_head;
    170c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    170e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1712:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    1716:	f7ff bbf6 	b.w	f06 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x706>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    171a:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    171e:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
    1722:	429a      	cmp	r2, r3
    1724:	d072      	beq.n	180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>
			event_len_prep(conn);
    1726:	f00b f937 	bl	c998 <event_len_prep>
    172a:	f7ff bb42 	b.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
			LL_ASSERT(0);
    172e:	4a6b      	ldr	r2, [pc, #428]	; (18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>)
    1730:	496d      	ldr	r1, [pc, #436]	; (18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>)
    1732:	486c      	ldr	r0, [pc, #432]	; (18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>)
    1734:	f640 5327 	movw	r3, #3367	; 0xd27
    1738:	f014 fddb 	bl	162f2 <assert_print>
    173c:	4040      	eors	r0, r0
    173e:	f380 8811 	msr	BASEPRI, r0
    1742:	f04f 0003 	mov.w	r0, #3
    1746:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    1748:	2700      	movs	r7, #0
		lll->interval = conn->llcp_cu.interval;
    174a:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    174e:	f7ff b856 	b.w	7fe <__data_size+0x89>
		conn->tx_data_last = tx;
    1752:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    1756:	f7ff baaf 	b.w	cb8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b8>
			conn->tx_data = conn->tx_data->next;
    175a:	681a      	ldr	r2, [r3, #0]
    175c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1760:	2900      	cmp	r1, #0
    1762:	f47f a91b 	bne.w	99c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x19c>
			tx->next = conn->tx_head->next;
    1766:	681a      	ldr	r2, [r3, #0]
    1768:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    176a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    176c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    176e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    1772:	2b00      	cmp	r3, #0
    1774:	f47f a91d 	bne.w	9b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b2>
    1778:	f7ff bb24 	b.w	dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>
		if (!conn->tx_ctrl) {
    177c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1780:	2a00      	cmp	r2, #0
    1782:	d189      	bne.n	1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>
			tx->next = conn->tx_head;
    1784:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    1788:	e9c4 8867 	strd	r8, r8, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    178c:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
    1790:	e78d      	b.n	16ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x326>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1792:	4590      	cmp	r8, r2
    1794:	f47f a98c 	bne.w	ab0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1798:	2301      	movs	r3, #1
    179a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    179c:	4629      	mov	r1, r5
    179e:	f00a f83b 	bl	b818 <ll_rx_put>
				rx = conn->llcp_rx;
    17a2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    17a6:	2d00      	cmp	r5, #0
    17a8:	f000 826a 	beq.w	1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>
    17ac:	6828      	ldr	r0, [r5, #0]
    17ae:	2800      	cmp	r0, #0
    17b0:	f000 8266 	beq.w	1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>
				conn->llcp_rx = rx->hdr.link->mem;
    17b4:	6842      	ldr	r2, [r0, #4]
    17b6:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    17ba:	2301      	movs	r3, #1
    17bc:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    17be:	4629      	mov	r1, r5
    17c0:	f00a f82a 	bl	b818 <ll_rx_put>
			ll_rx_sched();
    17c4:	f00a f832 	bl	b82c <ll_rx_sched>
			return;
    17c8:	f7fe bf2d 	b.w	626 <ull_conn_llcp+0x26>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    17cc:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    17d0:	fb0c fe03 	mul.w	lr, ip, r3
    17d4:	f242 7c10 	movw	ip, #10000	; 0x2710
    17d8:	fb0c ec01 	mla	ip, ip, r1, lr
    17dc:	f10c 3cff 	add.w	ip, ip, #4294967295
    17e0:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    17e4:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
    17e8:	fa1f fc8c 	uxth.w	ip, ip
    17ec:	45e6      	cmp	lr, ip
    17ee:	f47e afa9 	bne.w	744 <ull_conn_llcp+0x144>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    17f2:	2301      	movs	r3, #1
    17f4:	f888 3004 	strb.w	r3, [r8, #4]
			ll_rx_put(rx->hdr.link, rx);
    17f8:	4641      	mov	r1, r8
    17fa:	f00a f80d 	bl	b818 <ll_rx_put>
			ll_rx_sched();
    17fe:	f00a f815 	bl	b82c <ll_rx_sched>
    1802:	f7fe bfb4 	b.w	76e <ull_conn_llcp+0x16e>
	conn->lll.enc_tx = 1;
    1806:	f043 0310 	orr.w	r3, r3, #16
    180a:	e51c      	b.n	1246 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa46>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    180c:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    1810:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
    1814:	429a      	cmp	r2, r3
    1816:	f43e af06 	beq.w	626 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    181a:	f890 2196 	ldrb.w	r2, [r0, #406]	; 0x196
    181e:	f002 0103 	and.w	r1, r2, #3
    1822:	2903      	cmp	r1, #3
    1824:	f000 824e 	beq.w	1cc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x93c>
    1828:	2900      	cmp	r1, #0
    182a:	f47e aefc 	bne.w	626 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    182e:	482a      	ldr	r0, [pc, #168]	; (18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>)
    1830:	f006 fba0 	bl	7f74 <mem_acquire>
		if (!tx) {
    1834:	4601      	mov	r1, r0
    1836:	2800      	cmp	r0, #0
    1838:	f43f aabb 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    183c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    1840:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1844:	2201      	movs	r2, #1
    1846:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    184a:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    184e:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    1852:	f3c3 0782 	ubfx	r7, r3, #2, #3
    1856:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    185a:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
    185e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1862:	f360 07c3 	bfi	r7, r0, #3, #1
    1866:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
		conn->phy_pref_rx = conn->llcp_phy.rx;
    186a:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    186e:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1870:	f367 02c5 	bfi	r2, r7, #3, #3
    1874:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->phy_pref_tx = conn->llcp_phy.tx;
    1878:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    187c:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    187e:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    1882:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    1884:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1886:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    1888:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    188a:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    188c:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    188e:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1890:	4620      	mov	r0, r4
    1892:	f00a fd8b 	bl	c3ac <ctrl_tx_pause_enqueue>
    1896:	e70d      	b.n	16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>
		if (!conn->tx_ctrl) {
    1898:	2b00      	cmp	r3, #0
    189a:	f47f ac3c 	bne.w	1116 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x916>
			tx->next = conn->tx_head;
    189e:	f845 1c09 	str.w	r1, [r5, #-9]
				conn->tx_ctrl = tx;
    18a2:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    18a6:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    18aa:	2900      	cmp	r1, #0
    18ac:	f47e aebb 	bne.w	626 <ull_conn_llcp+0x26>
    18b0:	e478      	b.n	11a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9a4>
		if (!conn->tx_ctrl) {
    18b2:	2900      	cmp	r1, #0
    18b4:	f47f ac69 	bne.w	118a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98a>
			tx->next = conn->tx_head;
    18b8:	f845 3c09 	str.w	r3, [r5, #-9]
				conn->tx_ctrl = tx;
    18bc:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    18c0:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    18c4:	e46b      	b.n	119e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x99e>
		conn_upd_curr = conn;
    18c6:	601c      	str	r4, [r3, #0]
    18c8:	f7ff bb9d 	b.w	1006 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x806>
		LL_ASSERT(0);
    18cc:	4a03      	ldr	r2, [pc, #12]	; (18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>)
    18ce:	4906      	ldr	r1, [pc, #24]	; (18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>)
    18d0:	f640 732c 	movw	r3, #3884	; 0xf2c
    18d4:	e628      	b.n	1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>
    18d6:	bf00      	nop
    18d8:	20001c78 	.word	0x20001c78
    18dc:	0001a924 	.word	0x0001a924
    18e0:	0001aa04 	.word	0x0001aa04
    18e4:	0001a580 	.word	0x0001a580
    18e8:	0001a5e0 	.word	0x0001a5e0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    18ec:	48b5      	ldr	r0, [pc, #724]	; (1bc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83c>)
    18ee:	f006 fb41 	bl	7f74 <mem_acquire>
		if (tx) {
    18f2:	2800      	cmp	r0, #0
    18f4:	f43f aa5d 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
			conn->llcp_version.ack--;
    18f8:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    18fc:	3b01      	subs	r3, #1
    18fe:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    1902:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    1906:	f043 0301 	orr.w	r3, r3, #1
    190a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    190e:	7903      	ldrb	r3, [r0, #4]
    1910:	f043 0303 	orr.w	r3, r3, #3
    1914:	7103      	strb	r3, [r0, #4]
			pdu->len =
    1916:	2306      	movs	r3, #6
    1918:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    191a:	230c      	movs	r3, #12
    191c:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    191e:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    1920:	f06f 030e 	mvn.w	r3, #14
    1924:	7243      	strb	r3, [r0, #9]
    1926:	2305      	movs	r3, #5
    1928:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    192a:	f04f 33ff 	mov.w	r3, #4294967295
    192e:	72c3      	strb	r3, [r0, #11]
    1930:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    1932:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    1936:	2b00      	cmp	r3, #0
    1938:	f000 80a3 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
	    !conn->llcp_enc.pause_tx &&
    193c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1940:	0792      	lsls	r2, r2, #30
    1942:	f100 809e 	bmi.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
	    !conn->llcp_phy.pause_tx &&
    1946:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    194a:	07d7      	lsls	r7, r2, #31
    194c:	f100 8099 	bmi.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
		if (conn->tx_head == conn->tx_data) {
    1950:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1954:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1956:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    195a:	f000 82ec 	beq.w	1f36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbae>
		} else if (!conn->tx_ctrl) {
    195e:	2a00      	cmp	r2, #0
    1960:	f000 8360 	beq.w	2024 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc9c>
	tx->next = conn->tx_ctrl_last->next;
    1964:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1968:	681a      	ldr	r2, [r3, #0]
    196a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    196c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    196e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1972:	6803      	ldr	r3, [r0, #0]
    1974:	2b00      	cmp	r3, #0
    1976:	f47f ae9d 	bne.w	16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>
		conn->tx_data_last = tx;
    197a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    197e:	e699      	b.n	16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1980:	7903      	ldrb	r3, [r0, #4]
    1982:	f043 0303 	orr.w	r3, r3, #3
    1986:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1988:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    198c:	07da      	lsls	r2, r3, #31
    198e:	d545      	bpl.n	1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>
	    (conn->llcp_feature.features_conn &
    1990:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	if (conn->common.fex_valid &&
    1994:	075b      	lsls	r3, r3, #29
    1996:	d541      	bpl.n	1a1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x694>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1998:	2311      	movs	r3, #17
    199a:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    199c:	2303      	movs	r3, #3
    199e:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    19a0:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    19a2:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    19a4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
    19a8:	2200      	movs	r2, #0
    19aa:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
    19ae:	b35b      	cbz	r3, 1a08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x680>
	    !conn->llcp_enc.pause_tx &&
    19b0:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    19b4:	0790      	lsls	r0, r2, #30
    19b6:	d427      	bmi.n	1a08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x680>
	    !conn->llcp_phy.pause_tx &&
    19b8:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    19bc:	07d1      	lsls	r1, r2, #31
    19be:	d423      	bmi.n	1a08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x680>
		if (conn->tx_head == conn->tx_data) {
    19c0:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    19c4:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    19c6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    19ca:	f000 81bf 	beq.w	1d4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c4>
		} else if (!conn->tx_ctrl) {
    19ce:	2a00      	cmp	r2, #0
    19d0:	f000 8278 	beq.w	1ec4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb3c>
	tx->next = conn->tx_ctrl_last->next;
    19d4:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    19d8:	681a      	ldr	r2, [r3, #0]
    19da:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    19dc:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    19de:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    19e2:	6833      	ldr	r3, [r6, #0]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d076      	beq.n	1ad6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74e>
			conn->llcp_ack = conn->llcp_req;
    19e8:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    19ec:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			return;
    19f0:	f7fe be19 	b.w	626 <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    19f4:	2900      	cmp	r1, #0
    19f6:	f47f aae2 	bne.w	fbe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7be>
			tx->next = conn->tx_head;
    19fa:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    19fc:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1a00:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    1a04:	f7ff bae2 	b.w	fcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7cc>
		if (!conn->tx_ctrl) {
    1a08:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1a0c:	2a00      	cmp	r2, #0
    1a0e:	d1e1      	bne.n	19d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64c>
			tx->next = conn->tx_head;
    1a10:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    1a12:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1a16:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    1a1a:	e7e2      	b.n	19e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1a1c:	230d      	movs	r3, #13
    1a1e:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1a20:	7235      	strb	r5, [r6, #8]
    1a22:	2702      	movs	r7, #2
    1a24:	e7bd      	b.n	19a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x61a>
	switch (conn->llcp_conn_param.state) {
    1a26:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    1a2a:	f002 020f 	and.w	r2, r2, #15
    1a2e:	2a08      	cmp	r2, #8
    1a30:	f200 8348 	bhi.w	20c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd3c>
    1a34:	a001      	add	r0, pc, #4	; (adr r0, 1a3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b4>)
    1a36:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    1a3a:	bf00      	nop
    1a3c:	00001479 	.word	0x00001479
    1a40:	000013f1 	.word	0x000013f1
    1a44:	000013a1 	.word	0x000013a1
    1a48:	00000627 	.word	0x00000627
    1a4c:	00000627 	.word	0x00000627
    1a50:	00000627 	.word	0x00000627
    1a54:	00000627 	.word	0x00000627
    1a58:	00000627 	.word	0x00000627
    1a5c:	00001335 	.word	0x00001335
		conn->tx_data_last = tx;
    1a60:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    1a64:	e626      	b.n	16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>
			conn->tx_data = conn->tx_data->next;
    1a66:	6819      	ldr	r1, [r3, #0]
    1a68:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1a6c:	2a00      	cmp	r2, #0
    1a6e:	f47f a890 	bne.w	b92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x392>
			tx->next = conn->tx_head->next;
    1a72:	681a      	ldr	r2, [r3, #0]
    1a74:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1a76:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    1a78:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1a7a:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1a7e:	f7ff b890 	b.w	ba2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a2>
		if (!conn->tx_ctrl) {
    1a82:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1a86:	2a00      	cmp	r2, #0
    1a88:	f47f af6c 	bne.w	1964 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5dc>
			tx->next = conn->tx_head;
    1a8c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1a8e:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1a92:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    1a96:	e76c      	b.n	1972 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ea>
							 lll->latency +
    1a98:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1a9a:	3206      	adds	r2, #6
    1a9c:	442a      	add	r2, r5
			conn->llcp.phy_upd_ind.instant = event_counter +
    1a9e:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    1aa2:	f009 fee9 	bl	b878 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    1aa6:	f8d8 3000 	ldr.w	r3, [r8]
    1aaa:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    1aae:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    1ab0:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
				rx = ll_pdu_rx_alloc();
    1ab4:	f009 fee0 	bl	b878 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    1ab8:	6803      	ldr	r3, [r0, #0]
    1aba:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    1abe:	6059      	str	r1, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    1ac0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1ac4:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
				conn->llcp_rx = rx;
    1ac8:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    1acc:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    1ad0:	095b      	lsrs	r3, r3, #5
    1ad2:	f7ff ba50 	b.w	f76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x776>
		conn->tx_data_last = tx;
    1ad6:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    1ada:	e785      	b.n	19e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x660>
	    ((pdu_data_tx->llctrl.opcode !=
    1adc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1ade:	2a03      	cmp	r2, #3
    1ae0:	f43f ae41 	beq.w	1766 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3de>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1ae4:	2a0a      	cmp	r2, #10
    1ae6:	f47e af53 	bne.w	990 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x190>
    1aea:	e63c      	b.n	1766 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3de>
		if (!conn->tx_ctrl) {
    1aec:	2d00      	cmp	r5, #0
    1aee:	f47f ac49 	bne.w	1384 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb84>
			tx->next = conn->tx_head;
    1af2:	f840 1c13 	str.w	r1, [r0, #-19]
				conn->tx_ctrl = tx;
    1af6:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1afa:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    1afe:	e449      	b.n	1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1b00:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
    1b02:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1b04:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    1b06:	f009 fe87 	bl	b818 <ll_rx_put>
			ll_rx_sched();
    1b0a:	f009 fe8f 	bl	b82c <ll_rx_sched>
			return;
    1b0e:	f7fe bd8a 	b.w	626 <ull_conn_llcp+0x26>
				(void)ll_pdu_rx_alloc();
    1b12:	f009 feb1 	bl	b878 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    1b16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1b18:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1b1c:	231d      	movs	r3, #29
				upd->status = 0U;
    1b1e:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1b22:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    1b26:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    1b2a:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    1b2e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b32:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    1b36:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    1b3a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1b3e:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    1b42:	4641      	mov	r1, r8
    1b44:	f009 fe68 	bl	b818 <ll_rx_put>
				ll_rx_sched();
    1b48:	f009 fe70 	bl	b82c <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    1b4c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1b50:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    1b54:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    1b58:	095b      	lsrs	r3, r3, #5
    1b5a:	f7ff ba0c 	b.w	f76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x776>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1b5e:	791a      	ldrb	r2, [r3, #4]
    1b60:	f002 0203 	and.w	r2, r2, #3
    1b64:	2a03      	cmp	r2, #3
    1b66:	f000 80fd 	beq.w	1d64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1b6a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1b6e:	f7ff b810 	b.w	b92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x392>
			conn->tx_data = conn->tx_data->next;
    1b72:	6819      	ldr	r1, [r3, #0]
    1b74:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1b78:	2a00      	cmp	r2, #0
    1b7a:	f47f a9bc 	bne.w	ef6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6f6>
			tx->next = conn->tx_head->next;
    1b7e:	681a      	ldr	r2, [r3, #0]
    1b80:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    1b82:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    1b84:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    1b86:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1b8a:	f7ff b9bc 	b.w	f06 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x706>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1b8e:	791a      	ldrb	r2, [r3, #4]
    1b90:	f002 0203 	and.w	r2, r2, #3
    1b94:	2a03      	cmp	r2, #3
    1b96:	f000 8128 	beq.w	1dea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa62>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1b9a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1b9e:	f7ff b880 	b.w	ca2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a2>
			conn->tx_data = conn->tx_data->next;
    1ba2:	6819      	ldr	r1, [r3, #0]
    1ba4:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1ba8:	2a00      	cmp	r2, #0
    1baa:	f47f ad75 	bne.w	1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>
			tx->next = conn->tx_head->next;
    1bae:	681a      	ldr	r2, [r3, #0]
    1bb0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    1bb4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    1bb8:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    1bbc:	e9c4 8868 	strd	r8, r8, [r4, #416]	; 0x1a0
    1bc0:	e575      	b.n	16ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x326>
    1bc2:	bf00      	nop
    1bc4:	20001c78 	.word	0x20001c78
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1bc8:	48c7      	ldr	r0, [pc, #796]	; (1ee8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb60>)
    1bca:	f006 f9d3 	bl	7f74 <mem_acquire>
		if (!tx) {
    1bce:	2800      	cmp	r0, #0
    1bd0:	f43f a8ef 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1bd4:	7902      	ldrb	r2, [r0, #4]
    1bd6:	f042 0203 	orr.w	r2, r2, #3
    1bda:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1bdc:	2211      	movs	r2, #17
    1bde:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    1be0:	2203      	movs	r2, #3
    1be2:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1be4:	220f      	movs	r2, #15
    1be6:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    1be8:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
    1bec:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    1bee:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    1bf2:	2a00      	cmp	r2, #0
    1bf4:	f000 818a 	beq.w	1f0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb84>
	    !conn->llcp_enc.pause_tx &&
    1bf8:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1bfc:	0789      	lsls	r1, r1, #30
    1bfe:	f100 8185 	bmi.w	1f0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb84>
	    !conn->llcp_phy.pause_tx &&
    1c02:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    1c06:	07cb      	lsls	r3, r1, #31
    1c08:	f100 8180 	bmi.w	1f0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb84>
		if (conn->tx_head == conn->tx_data) {
    1c0c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1c10:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    1c12:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1c16:	f000 81af 	beq.w	1f78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf0>
		} else if (!conn->tx_ctrl) {
    1c1a:	2900      	cmp	r1, #0
    1c1c:	f000 822b 	beq.w	2076 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcee>
	tx->next = conn->tx_ctrl_last->next;
    1c20:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    1c24:	6811      	ldr	r1, [r2, #0]
    1c26:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1c28:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    1c2a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1c2e:	6802      	ldr	r2, [r0, #0]
    1c30:	2a00      	cmp	r2, #0
    1c32:	f000 81ff 	beq.w	2034 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcac>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1c36:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    1c3a:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    1c3e:	2300      	movs	r3, #0
    1c40:	603b      	str	r3, [r7, #0]
		return;
    1c42:	f7ff b8b6 	b.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
			conn->tx_data = conn->tx_data->next;
    1c46:	681a      	ldr	r2, [r3, #0]
    1c48:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1c4c:	2900      	cmp	r1, #0
    1c4e:	f47f a9b6 	bne.w	fbe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7be>
			tx->next = conn->tx_head->next;
    1c52:	681a      	ldr	r2, [r3, #0]
    1c54:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    1c56:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    1c58:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    1c5c:	f7ff b9b6 	b.w	fcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7cc>
			conn->tx_data = conn->tx_data->next;
    1c60:	6818      	ldr	r0, [r3, #0]
    1c62:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1c66:	2900      	cmp	r1, #0
    1c68:	f47f aa8f 	bne.w	118a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98a>
			tx->next = conn->tx_head->next;
    1c6c:	6819      	ldr	r1, [r3, #0]
    1c6e:	f845 1c09 	str.w	r1, [r5, #-9]
			conn->tx_head->next = tx;
    1c72:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    1c74:	f855 3c09 	ldr.w	r3, [r5, #-9]
				conn->tx_ctrl_last = tx;
    1c78:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    1c7c:	f7ff ba8f 	b.w	119e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x99e>
				LL_ASSERT(rx && rx->hdr.link);
    1c80:	4a9a      	ldr	r2, [pc, #616]	; (1eec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb64>)
    1c82:	499b      	ldr	r1, [pc, #620]	; (1ef0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb68>)
    1c84:	489b      	ldr	r0, [pc, #620]	; (1ef4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb6c>)
    1c86:	f241 23c7 	movw	r3, #4807	; 0x12c7
    1c8a:	f014 fb32 	bl	162f2 <assert_print>
    1c8e:	4040      	eors	r0, r0
    1c90:	f380 8811 	msr	BASEPRI, r0
    1c94:	f04f 0003 	mov.w	r0, #3
    1c98:	df02      	svc	2
    1c9a:	6828      	ldr	r0, [r5, #0]
    1c9c:	e58a      	b.n	17b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42c>
			conn->tx_data = conn->tx_data->next;
    1c9e:	6808      	ldr	r0, [r1, #0]
    1ca0:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	f47f aa36 	bne.w	1116 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x916>
			tx->next = conn->tx_head->next;
    1caa:	680b      	ldr	r3, [r1, #0]
    1cac:	f845 3c09 	str.w	r3, [r5, #-9]
			conn->tx_head->next = tx;
    1cb0:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
    1cb2:	f855 1c09 	ldr.w	r1, [r5, #-9]
				conn->tx_ctrl_last = tx;
    1cb6:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
	if (!tx->next) {
    1cba:	2900      	cmp	r1, #0
    1cbc:	f47e acb3 	bne.w	626 <ull_conn_llcp+0x26>
    1cc0:	f7ff ba70 	b.w	11a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9a4>
		if (conn->llcp_phy.tx & PHY_2M) {
    1cc4:	0717      	lsls	r7, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    1cc6:	f880 3195 	strb.w	r3, [r0, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    1cca:	f3c2 0382 	ubfx	r3, r2, #2, #3
    1cce:	f140 8113 	bpl.w	1ef8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb70>
			conn->llcp_phy.tx = PHY_2M;
    1cd2:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    1cd6:	2202      	movs	r2, #2
    1cd8:	f362 0384 	bfi	r3, r2, #2, #3
    1cdc:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    1ce0:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    1ce4:	0659      	lsls	r1, r3, #25
    1ce6:	ea4f 1253 	mov.w	r2, r3, lsr #5
    1cea:	d575      	bpl.n	1dd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa50>
			conn->llcp_phy.rx = PHY_2M;
    1cec:	2202      	movs	r2, #2
    1cee:	f362 1347 	bfi	r3, r2, #5, #3
    1cf2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    1cf6:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    1cfa:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    1cfe:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    1d02:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    1d06:	f3c2 0182 	ubfx	r1, r2, #2, #3
    1d0a:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    1d0e:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    1d12:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    1d16:	428f      	cmp	r7, r1
    1d18:	bf08      	it	eq
    1d1a:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    1d1c:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    1d1e:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    1d22:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    1d26:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    1d2a:	bf08      	it	eq
    1d2c:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    1d2e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    1d32:	f1ae 0c02 	sub.w	ip, lr, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    1d36:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    1d3a:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    1d3c:	f884 c0bc 	strb.w	ip, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    1d40:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    1d44:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1d48:	f7fe bc87 	b.w	65a <ull_conn_llcp+0x5a>
			conn->tx_data = conn->tx_data->next;
    1d4c:	6819      	ldr	r1, [r3, #0]
    1d4e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1d52:	2a00      	cmp	r2, #0
    1d54:	f47f ae3e 	bne.w	19d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64c>
			tx->next = conn->tx_head->next;
    1d58:	681a      	ldr	r2, [r3, #0]
    1d5a:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    1d5c:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    1d5e:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1d62:	e63e      	b.n	19e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65a>
	    ((pdu_data_tx->llctrl.opcode !=
    1d64:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1d66:	2a03      	cmp	r2, #3
    1d68:	f43f ae83 	beq.w	1a72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ea>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1d6c:	2a0a      	cmp	r2, #10
    1d6e:	f47f aefc 	bne.w	1b6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e2>
    1d72:	e67e      	b.n	1a72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ea>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1d74:	791a      	ldrb	r2, [r3, #4]
    1d76:	f002 0203 	and.w	r2, r2, #3
    1d7a:	2a03      	cmp	r2, #3
    1d7c:	d01b      	beq.n	1db6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa2e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1d7e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1d82:	f7ff b8b8 	b.w	ef6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6f6>
			conn->llcp_cu.interval = interval_max;
    1d86:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
    1d8a:	f7ff bb5a 	b.w	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1d8e:	7919      	ldrb	r1, [r3, #4]
    1d90:	f001 0103 	and.w	r1, r1, #3
    1d94:	2903      	cmp	r1, #3
    1d96:	f000 813d 	beq.w	2014 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1d9a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1d9e:	f7ff b9f4 	b.w	118a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1da2:	790b      	ldrb	r3, [r1, #4]
    1da4:	f003 0303 	and.w	r3, r3, #3
    1da8:	2b03      	cmp	r3, #3
    1daa:	f000 811e 	beq.w	1fea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc62>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1dae:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    1db2:	f7ff b9b0 	b.w	1116 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x916>
	    ((pdu_data_tx->llctrl.opcode !=
    1db6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1db8:	2a03      	cmp	r2, #3
    1dba:	f43f aee0 	beq.w	1b7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1dbe:	2a0a      	cmp	r2, #10
    1dc0:	d1dd      	bne.n	1d7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9f6>
    1dc2:	e6dc      	b.n	1b7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1dc4:	791a      	ldrb	r2, [r3, #4]
    1dc6:	f002 0203 	and.w	r2, r2, #3
    1dca:	2a03      	cmp	r2, #3
    1dcc:	f000 8135 	beq.w	203a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1dd0:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1dd4:	f7ff b8f3 	b.w	fbe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7be>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    1dd8:	07d7      	lsls	r7, r2, #31
    1dda:	f140 80c4 	bpl.w	1f66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbde>
			conn->llcp_phy.rx = PHY_1M;
    1dde:	2201      	movs	r2, #1
    1de0:	f362 1347 	bfi	r3, r2, #5, #3
    1de4:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    1de8:	e785      	b.n	1cf6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x96e>
	    ((pdu_data_tx->llctrl.opcode !=
    1dea:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1dec:	2a03      	cmp	r2, #3
    1dee:	f43f aa4c 	beq.w	128a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1df2:	2a0a      	cmp	r2, #10
    1df4:	f47f aed1 	bne.w	1b9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x812>
    1df8:	f7ff ba47 	b.w	128a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa8a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1dfc:	483a      	ldr	r0, [pc, #232]	; (1ee8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb60>)
    1dfe:	f006 f8b9 	bl	7f74 <mem_acquire>
	if (!tx) {
    1e02:	2800      	cmp	r0, #0
    1e04:	f43e afd5 	beq.w	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e08:	7902      	ldrb	r2, [r0, #4]
    1e0a:	f042 0203 	orr.w	r2, r2, #3
    1e0e:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    1e10:	2218      	movs	r2, #24
    1e12:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    1e14:	2210      	movs	r2, #16
    1e16:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    1e18:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
    1e1c:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    1e1e:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    1e22:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    1e24:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    1e28:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    1e2a:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    1e2e:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    1e30:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
    1e34:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    1e36:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
    1e3a:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    1e3e:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    1e42:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    1e46:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
    1e4a:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    1e4e:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
    1e52:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    1e56:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    1e5a:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    1e5e:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
    1e62:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    1e66:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
    1e6a:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    1e6e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    1e72:	b37a      	cbz	r2, 1ed4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4c>
	    !conn->llcp_enc.pause_tx &&
    1e74:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1e78:	0789      	lsls	r1, r1, #30
    1e7a:	d42b      	bmi.n	1ed4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4c>
	    !conn->llcp_phy.pause_tx &&
    1e7c:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    1e80:	07cb      	lsls	r3, r1, #31
    1e82:	d427      	bmi.n	1ed4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4c>
		if (conn->tx_head == conn->tx_data) {
    1e84:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1e88:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    1e8a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1e8e:	f000 808a 	beq.w	1fa6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc1e>
		} else if (!conn->tx_ctrl) {
    1e92:	2900      	cmp	r1, #0
    1e94:	d07f      	beq.n	1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
	tx->next = conn->tx_ctrl_last->next;
    1e96:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    1e9a:	6811      	ldr	r1, [r2, #0]
    1e9c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1e9e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    1ea0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1ea4:	6802      	ldr	r2, [r0, #0]
    1ea6:	2a00      	cmp	r2, #0
    1ea8:	d072      	beq.n	1f90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc08>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    1eaa:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1eae:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    1eb2:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    1eb6:	2205      	movs	r2, #5
    1eb8:	f362 0303 	bfi	r3, r2, #0, #4
    1ebc:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    1ec0:	f7fe bbaa 	b.w	618 <ull_conn_llcp+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1ec4:	791a      	ldrb	r2, [r3, #4]
    1ec6:	f002 0203 	and.w	r2, r2, #3
    1eca:	2a03      	cmp	r2, #3
    1ecc:	d077      	beq.n	1fbe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc36>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1ece:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1ed2:	e57f      	b.n	19d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64c>
		if (!conn->tx_ctrl) {
    1ed4:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    1ed8:	2900      	cmp	r1, #0
    1eda:	d1dc      	bne.n	1e96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0e>
			tx->next = conn->tx_head;
    1edc:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    1ede:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1ee2:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    1ee6:	e7dd      	b.n	1ea4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb1c>
    1ee8:	20001c78 	.word	0x20001c78
    1eec:	0001a924 	.word	0x0001a924
    1ef0:	0001aa04 	.word	0x0001aa04
    1ef4:	0001a580 	.word	0x0001a580
		} else if (conn->llcp_phy.tx & PHY_1M) {
    1ef8:	07d8      	lsls	r0, r3, #31
    1efa:	d528      	bpl.n	1f4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc6>
			conn->llcp_phy.tx = PHY_1M;
    1efc:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    1f00:	2201      	movs	r2, #1
    1f02:	f362 0384 	bfi	r3, r2, #2, #3
    1f06:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    1f0a:	e6e9      	b.n	1ce0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x958>
		if (!conn->tx_ctrl) {
    1f0c:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    1f10:	2900      	cmp	r1, #0
    1f12:	f47f ae85 	bne.w	1c20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x898>
			tx->next = conn->tx_head;
    1f16:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    1f18:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1f1c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    1f20:	e685      	b.n	1c2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f22:	791a      	ldrb	r2, [r3, #4]
    1f24:	f002 0203 	and.w	r2, r2, #3
    1f28:	2a03      	cmp	r2, #3
    1f2a:	f000 8095 	beq.w	2058 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1f2e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1f32:	f7ff bbb1 	b.w	1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>
			conn->tx_data = conn->tx_data->next;
    1f36:	6819      	ldr	r1, [r3, #0]
    1f38:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1f3c:	2a00      	cmp	r2, #0
    1f3e:	f47f ad11 	bne.w	1964 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5dc>
			tx->next = conn->tx_head->next;
    1f42:	681a      	ldr	r2, [r3, #0]
    1f44:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1f46:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    1f48:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1f4c:	e511      	b.n	1972 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ea>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    1f4e:	f013 0304 	ands.w	r3, r3, #4
    1f52:	f000 8089 	beq.w	2068 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xce0>
			conn->llcp_phy.tx = PHY_CODED;
    1f56:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    1f5a:	2204      	movs	r2, #4
    1f5c:	f362 0384 	bfi	r3, r2, #2, #3
    1f60:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    1f64:	e6bc      	b.n	1ce0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x958>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    1f66:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    1f6a:	bf18      	it	ne
    1f6c:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    1f6e:	f362 1347 	bfi	r3, r2, #5, #3
    1f72:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    1f76:	e6be      	b.n	1cf6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x96e>
			conn->tx_data = conn->tx_data->next;
    1f78:	6813      	ldr	r3, [r2, #0]
    1f7a:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1f7e:	2900      	cmp	r1, #0
    1f80:	f47f ae4e 	bne.w	1c20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x898>
			tx->next = conn->tx_head->next;
    1f84:	6811      	ldr	r1, [r2, #0]
    1f86:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    1f88:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    1f8a:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1f8e:	e64e      	b.n	1c2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a6>
		conn->tx_data_last = tx;
    1f90:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    1f94:	e789      	b.n	1eaa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb22>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f96:	7911      	ldrb	r1, [r2, #4]
    1f98:	f001 0103 	and.w	r1, r1, #3
    1f9c:	2903      	cmp	r1, #3
    1f9e:	d015      	beq.n	1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1fa0:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    1fa4:	e777      	b.n	1e96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0e>
			conn->tx_data = conn->tx_data->next;
    1fa6:	6813      	ldr	r3, [r2, #0]
    1fa8:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1fac:	2900      	cmp	r1, #0
    1fae:	f47f af72 	bne.w	1e96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0e>
			tx->next = conn->tx_head->next;
    1fb2:	6811      	ldr	r1, [r2, #0]
    1fb4:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    1fb6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    1fb8:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1fbc:	e772      	b.n	1ea4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb1c>
	    ((pdu_data_tx->llctrl.opcode !=
    1fbe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1fc0:	2a03      	cmp	r2, #3
    1fc2:	f43f aec9 	beq.w	1d58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1fc6:	2a0a      	cmp	r2, #10
    1fc8:	d181      	bne.n	1ece <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb46>
    1fca:	e6c5      	b.n	1d58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9d0>
	    ((pdu_data_tx->llctrl.opcode !=
    1fcc:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1fce:	2903      	cmp	r1, #3
    1fd0:	d0ef      	beq.n	1fb2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc2a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1fd2:	290a      	cmp	r1, #10
    1fd4:	d1e4      	bne.n	1fa0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc18>
    1fd6:	e7ec      	b.n	1fb2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1fd8:	790b      	ldrb	r3, [r1, #4]
    1fda:	f003 0303 	and.w	r3, r3, #3
    1fde:	2b03      	cmp	r3, #3
    1fe0:	d00b      	beq.n	1ffa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc72>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1fe2:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    1fe6:	f7ff b9cd 	b.w	1384 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb84>
	    ((pdu_data_tx->llctrl.opcode !=
    1fea:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1fec:	2b03      	cmp	r3, #3
    1fee:	f43f ae5c 	beq.w	1caa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x922>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1ff2:	2b0a      	cmp	r3, #10
    1ff4:	f47f aedb 	bne.w	1dae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa26>
    1ff8:	e657      	b.n	1caa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x922>
	    ((pdu_data_tx->llctrl.opcode !=
    1ffa:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1ffc:	2b03      	cmp	r3, #3
    1ffe:	d001      	beq.n	2004 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc7c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2000:	2b0a      	cmp	r3, #10
    2002:	d1ee      	bne.n	1fe2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc5a>
			tx->next = conn->tx_head->next;
    2004:	680b      	ldr	r3, [r1, #0]
    2006:	f840 3c13 	str.w	r3, [r0, #-19]
			conn->tx_head->next = tx;
    200a:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
    200c:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    2010:	f7ff b9c0 	b.w	1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
	    ((pdu_data_tx->llctrl.opcode !=
    2014:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2016:	2903      	cmp	r1, #3
    2018:	f43f ae28 	beq.w	1c6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    201c:	290a      	cmp	r1, #10
    201e:	f47f aebc 	bne.w	1d9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa12>
    2022:	e623      	b.n	1c6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2024:	791a      	ldrb	r2, [r3, #4]
    2026:	f002 0203 	and.w	r2, r2, #3
    202a:	2a03      	cmp	r2, #3
    202c:	d02b      	beq.n	2086 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcfe>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    202e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2032:	e497      	b.n	1964 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5dc>
		conn->tx_data_last = tx;
    2034:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2038:	e5fd      	b.n	1c36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ae>
	    ((pdu_data_tx->llctrl.opcode !=
    203a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    203c:	2a03      	cmp	r2, #3
    203e:	f43f ae08 	beq.w	1c52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ca>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2042:	2a0a      	cmp	r2, #10
    2044:	f47f aec4 	bne.w	1dd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa48>
    2048:	e603      	b.n	1c52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ca>
			conn->tx_data = conn->tx_data->next;
    204a:	680b      	ldr	r3, [r1, #0]
    204c:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2050:	2d00      	cmp	r5, #0
    2052:	d0d7      	beq.n	2004 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc7c>
    2054:	f7ff b996 	b.w	1384 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb84>
	    ((pdu_data_tx->llctrl.opcode !=
    2058:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    205a:	2a03      	cmp	r2, #3
    205c:	f43f ada7 	beq.w	1bae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x826>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2060:	2a0a      	cmp	r2, #10
    2062:	f47f af64 	bne.w	1f2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba6>
    2066:	e5a2      	b.n	1bae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x826>
			conn->llcp_phy.tx = 0U;
    2068:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    206c:	f363 0284 	bfi	r2, r3, #2, #3
    2070:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    2074:	e634      	b.n	1ce0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x958>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2076:	7911      	ldrb	r1, [r2, #4]
    2078:	f001 0103 	and.w	r1, r1, #3
    207c:	2903      	cmp	r1, #3
    207e:	d009      	beq.n	2094 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2080:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    2084:	e5cc      	b.n	1c20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x898>
	    ((pdu_data_tx->llctrl.opcode !=
    2086:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2088:	2a03      	cmp	r2, #3
    208a:	f43f af5a 	beq.w	1f42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    208e:	2a0a      	cmp	r2, #10
    2090:	d1cd      	bne.n	202e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca6>
    2092:	e756      	b.n	1f42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbba>
	    ((pdu_data_tx->llctrl.opcode !=
    2094:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2096:	2903      	cmp	r1, #3
    2098:	f43f af74 	beq.w	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    209c:	290a      	cmp	r1, #10
    209e:	d1ef      	bne.n	2080 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcf8>
    20a0:	e770      	b.n	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
			LL_ASSERT(0);
    20a2:	4a0b      	ldr	r2, [pc, #44]	; (20d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd48>)
    20a4:	490b      	ldr	r1, [pc, #44]	; (20d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4c>)
    20a6:	480c      	ldr	r0, [pc, #48]	; (20d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd50>)
    20a8:	f640 4348 	movw	r3, #3144	; 0xc48
    20ac:	f014 f921 	bl	162f2 <assert_print>
    20b0:	4040      	eors	r0, r0
    20b2:	f380 8811 	msr	BASEPRI, r0
    20b6:	f04f 0003 	mov.w	r0, #3
    20ba:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    20bc:	f04f 0800 	mov.w	r8, #0
			break;
    20c0:	f7fe bf8e 	b.w	fe0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7e0>
		LL_ASSERT(0);
    20c4:	4a02      	ldr	r2, [pc, #8]	; (20d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd48>)
    20c6:	4903      	ldr	r1, [pc, #12]	; (20d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4c>)
    20c8:	f241 036c 	movw	r3, #4204	; 0x106c
    20cc:	f7ff ba2c 	b.w	1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>
    20d0:	0001a924 	.word	0x0001a924
    20d4:	0001a5e0 	.word	0x0001a5e0
    20d8:	0001a580 	.word	0x0001a580
    20dc:	00000000 	.word	0x00000000

000020e0 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    20e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20e4:	b08b      	sub	sp, #44	; 0x2c
    20e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    20ea:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    20ee:	9306      	str	r3, [sp, #24]
    20f0:	4606      	mov	r6, r0
    20f2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    20f6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    20fa:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    20fe:	9303      	str	r3, [sp, #12]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2100:	2000      	movs	r0, #0
{
    2102:	460f      	mov	r7, r1
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2104:	f00a f8ee 	bl	c2e4 <ull_scan_is_disabled_get>
	if (!scan) {
    2108:	2800      	cmp	r0, #0
    210a:	f000 8174 	beq.w	23f6 <ll_create_connection+0x316>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    210e:	f009 0401 	and.w	r4, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    2112:	4605      	mov	r5, r0
    2114:	4620      	mov	r0, r4
    2116:	f007 fb31 	bl	977c <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    211a:	2c00      	cmp	r4, #0
    211c:	d14b      	bne.n	21b6 <ll_create_connection+0xd6>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    211e:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    2120:	f105 0a1c 	add.w	sl, r5, #28
	if (lll->conn) {
    2124:	2b00      	cmp	r3, #0
    2126:	d04d      	beq.n	21c4 <ll_create_connection+0xe4>
		conn_lll = lll->conn;
    2128:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    212c:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    2130:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    2134:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    2138:	f000 0007 	and.w	r0, r0, #7
    213c:	f00e f94a 	bl	103d4 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2140:	f8b8 1026 	ldrh.w	r1, [r8, #38]	; 0x26
    2144:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    2148:	4401      	add	r1, r0
    214a:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
    214e:	4401      	add	r1, r0
    2150:	48cd      	ldr	r0, [pc, #820]	; (2488 <ll_create_connection+0x3a8>)
    2152:	a3cb      	add	r3, pc, #812	; (adr r3, 2480 <ll_create_connection+0x3a0>)
    2154:	e9d3 2300 	ldrd	r2, r3, [r3]
    2158:	fba1 0100 	umull	r0, r1, r1, r0
    215c:	f7fd ffd0 	bl	100 <__aeabi_uldivmod>
    2160:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    2164:	6120      	str	r0, [r4, #16]
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    2166:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
	lll->adv_addr_type = peer_addr_type;
    216a:	9a05      	ldr	r2, [sp, #20]
	scan->own_addr_type = own_addr_type;
    216c:	f369 0342 	bfi	r3, r9, #1, #2
    2170:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	lll->adv_addr_type = peer_addr_type;
    2174:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2178:	f362 0300 	bfi	r3, r2, #0, #1
    217c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    2180:	9914      	ldr	r1, [sp, #80]	; 0x50
    2182:	2206      	movs	r2, #6
    2184:	f105 0024 	add.w	r0, r5, #36	; 0x24
    2188:	f014 fb33 	bl	167f2 <memcpy>
	lll->conn_timeout = timeout;
    218c:	9b03      	ldr	r3, [sp, #12]

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    218e:	9904      	ldr	r1, [sp, #16]
	lll->conn_timeout = timeout;
    2190:	862b      	strh	r3, [r5, #48]	; 0x30
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    2192:	4632      	mov	r2, r6
    2194:	463b      	mov	r3, r7
    2196:	4650      	mov	r0, sl
    2198:	9100      	str	r1, [sp, #0]
    219a:	2100      	movs	r1, #0
    219c:	f7fe f958 	bl	450 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    21a0:	f00e fac0 	bl	10724 <lll_clock_wait>
	if (err) {
    21a4:	2800      	cmp	r0, #0
    21a6:	f040 812a 	bne.w	23fe <ll_create_connection+0x31e>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    21aa:	4628      	mov	r0, r5
    21ac:	f7fe f97c 	bl	4a8 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    21b0:	b00b      	add	sp, #44	; 0x2c
    21b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    21b6:	2106      	movs	r1, #6
    21b8:	f005 ff26 	bl	8008 <mem_nz>
    21bc:	2800      	cmp	r0, #0
    21be:	d1ae      	bne.n	211e <ll_create_connection+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
    21c0:	2012      	movs	r0, #18
    21c2:	e7f5      	b.n	21b0 <ll_create_connection+0xd0>
	link = ll_rx_link_alloc();
    21c4:	f009 fb1c 	bl	b800 <ll_rx_link_alloc>
	if (!link) {
    21c8:	9007      	str	r0, [sp, #28]
    21ca:	2800      	cmp	r0, #0
    21cc:	f000 814f 	beq.w	246e <ll_create_connection+0x38e>
	conn = ll_conn_acquire();
    21d0:	f00a fcd8 	bl	cb84 <ll_conn_acquire>
	if (!conn) {
    21d4:	4604      	mov	r4, r0
    21d6:	2800      	cmp	r0, #0
    21d8:	f000 818a 	beq.w	24f0 <ll_create_connection+0x410>
	err = util_aa_le32(conn_lll->access_addr);
    21dc:	3020      	adds	r0, #32
    21de:	f006 f8b3 	bl	8348 <util_aa_le32>
	conn_lll = &conn->lll;
    21e2:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    21e6:	2800      	cmp	r0, #0
    21e8:	f040 8134 	bne.w	2454 <ll_create_connection+0x374>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    21ec:	2103      	movs	r1, #3
    21ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
    21f2:	f00d ffb1 	bl	10158 <lll_csrand_get>
	conn_lll->interval = interval;
    21f6:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    21f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->interval = interval;
    21fa:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    21fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    2200:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    2204:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    2206:	2800      	cmp	r0, #0
    2208:	f000 8133 	beq.w	2472 <ll_create_connection+0x392>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    220c:	f104 0148 	add.w	r1, r4, #72	; 0x48
    2210:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    2214:	f005 ff04 	bl	8020 <memq_init>
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    2218:	6c63      	ldr	r3, [r4, #68]	; 0x44
    221a:	4a9c      	ldr	r2, [pc, #624]	; (248c <ll_create_connection+0x3ac>)
    221c:	401a      	ands	r2, r3
	conn_lll->sn = 0;
    221e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    2222:	f023 0307 	bic.w	r3, r3, #7
    2226:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    222a:	4b99      	ldr	r3, [pc, #612]	; (2490 <ll_create_connection+0x3b0>)
    222c:	4313      	orrs	r3, r2
    222e:	6463      	str	r3, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2230:	4b98      	ldr	r3, [pc, #608]	; (2494 <ll_create_connection+0x3b4>)
    2232:	6423      	str	r3, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
    2234:	f04f 0b00 	mov.w	fp, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2238:	231b      	movs	r3, #27
    223a:	87e3      	strh	r3, [r4, #62]	; 0x3e
	conn_lll->link_tx_free = NULL;
    223c:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    2240:	f8a4 b05c 	strh.w	fp, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    2244:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    2248:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    224c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2250:	f00d fc22 	bl	fa98 <ull_chan_map_get>
    2254:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    2258:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    225c:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    225e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    2262:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    2266:	f00d ff77 	bl	10158 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    226a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    226e:	4b8a      	ldr	r3, [pc, #552]	; (2498 <ll_create_connection+0x3b8>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2270:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2274:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    2276:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    227a:	fba3 1302 	umull	r1, r3, r3, r2
    227e:	08db      	lsrs	r3, r3, #3
    2280:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2284:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    2288:	3305      	adds	r3, #5
    228a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    228e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2292:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    2294:	f8a4 b0a8 	strh.w	fp, [r4, #168]	; 0xa8
	conn_lll->data_chan_sel = 0;
    2298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    229c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    22a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    22a4:	f8a4 b0ac 	strh.w	fp, [r4, #172]	; 0xac
	conn_lll->central.initiated = 0;
    22a8:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    22ac:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    22b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    22b4:	4b79      	ldr	r3, [pc, #484]	; (249c <ll_create_connection+0x3bc>)
	conn->apto_expire = 0U;
    22b6:	f8a4 b0b4 	strh.w	fp, [r4, #180]	; 0xb4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    22ba:	fb02 f101 	mul.w	r1, r2, r1
    22be:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    22c0:	440b      	add	r3, r1
    22c2:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    22c6:	4976      	ldr	r1, [pc, #472]	; (24a0 <ll_create_connection+0x3c0>)
	conn->appto_expire = 0U;
    22c8:	f8a4 b0b0 	strh.w	fp, [r4, #176]	; 0xb0
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    22cc:	4411      	add	r1, r2
    22ce:	fbb1 f1f2 	udiv	r1, r1, r2
    22d2:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    22d6:	f242 7110 	movw	r1, #10000	; 0x2710
    22da:	fb01 210c 	mla	r1, r1, ip, r2
    22de:	3901      	subs	r1, #1
    22e0:	fbb1 f2f2 	udiv	r2, r1, r2
    22e4:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    22e8:	2206      	movs	r2, #6
    22ea:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    22ee:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    22f0:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    22f2:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    22f4:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    22f8:	dd02      	ble.n	2300 <ll_create_connection+0x220>
    22fa:	3a06      	subs	r2, #6
    22fc:	1a12      	subs	r2, r2, r0
    22fe:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    2300:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2304:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2308:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    230c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    2310:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2314:	f8a4 b0bc 	strh.w	fp, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    2318:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    231c:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    2320:	f8a4 b0f8 	strh.w	fp, [r4, #248]	; 0xf8
	conn->llcp_feature.features_conn = ll_feat_get();
    2324:	f008 fe20 	bl	af68 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    2328:	9b07      	ldr	r3, [sp, #28]
    232a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    232e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    2332:	f8a4 b110 	strh.w	fp, [r4, #272]	; 0x110
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    2336:	f023 0303 	bic.w	r3, r3, #3
    233a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    233e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    2342:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    2346:	f023 0318 	bic.w	r3, r3, #24
    234a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    234e:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_terminate.reason_final = 0U;
    2352:	f884 b11b 	strb.w	fp, [r4, #283]	; 0x11b
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2356:	f023 0307 	bic.w	r3, r3, #7
    235a:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_conn_param.disabled = 0U;
    235e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    2362:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
	conn->llcp_conn_param.disabled = 0U;
    2366:	f36b 1345 	bfi	r3, fp, #5, #1
    236a:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_length.disabled = 0U;
    236e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_conn_param.req = 0U;
    2372:	f8a4 b15c 	strh.w	fp, [r4, #348]	; 0x15c
	conn->llcp_length.disabled = 0U;
    2376:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    237a:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    237c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_feature.features_peer = 0;
    2380:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    2382:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    2386:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    238a:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    238e:	f8a4 b190 	strh.w	fp, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    2392:	f00a fefb 	bl	d18c <ull_conn_default_tx_octets_get>
    2396:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    239a:	f00a fefd 	bl	d198 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    239e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    23a2:	4b40      	ldr	r3, [pc, #256]	; (24a4 <ll_create_connection+0x3c4>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    23a4:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    23a8:	4013      	ands	r3, r2
    23aa:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    23ae:	f00a fef9 	bl	d1a4 <ull_conn_default_phy_tx_get>
    23b2:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    23b6:	f360 0302 	bfi	r3, r0, #0, #3
    23ba:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    23be:	f00a fef7 	bl	d1b0 <ull_conn_default_phy_rx_get>
    23c2:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    23c6:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    23ca:	f360 03c5 	bfi	r3, r0, #3, #3
    23ce:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->ull.ticks_prepare_to_start =
    23d2:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    23d4:	e9c4 bb6a 	strd	fp, fp, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    23d8:	e9c4 bb68 	strd	fp, fp, [r4, #416]	; 0x1a0
	conn->ull.ticks_active_to_start = 0U;
    23dc:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    23e0:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    23e4:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    23e6:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    23ea:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    23ee:	f884 b000 	strb.w	fp, [r4]
    23f2:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    23f4:	e69c      	b.n	2130 <ll_create_connection+0x50>
		return BT_HCI_ERR_CMD_DISALLOWED;
    23f6:	200c      	movs	r0, #12
}
    23f8:	b00b      	add	sp, #44	; 0x2c
    23fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    23fe:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    2400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2402:	b163      	cbz	r3, 241e <ll_create_connection+0x33e>
    2404:	4a28      	ldr	r2, [pc, #160]	; (24a8 <ll_create_connection+0x3c8>)
    2406:	4929      	ldr	r1, [pc, #164]	; (24ac <ll_create_connection+0x3cc>)
    2408:	4829      	ldr	r0, [pc, #164]	; (24b0 <ll_create_connection+0x3d0>)
    240a:	f240 43c7 	movw	r3, #1223	; 0x4c7
    240e:	f013 ff70 	bl	162f2 <assert_print>
    2412:	4040      	eors	r0, r0
    2414:	f380 8811 	msr	BASEPRI, r0
    2418:	f04f 0003 	mov.w	r0, #3
    241c:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    241e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    2422:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    2426:	f005 fdff 	bl	8028 <memq_deinit>
	LL_ASSERT(link);
    242a:	4606      	mov	r6, r0
    242c:	2800      	cmp	r0, #0
    242e:	d051      	beq.n	24d4 <ll_create_connection+0x3f4>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    2430:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    2432:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    2434:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    2438:	2c00      	cmp	r4, #0
    243a:	d03d      	beq.n	24b8 <ll_create_connection+0x3d8>

	ll_rx_link_release(link);
    243c:	4620      	mov	r0, r4
    243e:	f009 f9e5 	bl	b80c <ll_rx_link_release>

	ll_conn_release(conn);
    2442:	4638      	mov	r0, r7
    2444:	f00a fba4 	bl	cb90 <ll_conn_release>
	scan->lll.conn = NULL;
    2448:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    244a:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    244c:	622b      	str	r3, [r5, #32]
}
    244e:	b00b      	add	sp, #44	; 0x2c
    2450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    2454:	4a14      	ldr	r2, [pc, #80]	; (24a8 <ll_create_connection+0x3c8>)
    2456:	4917      	ldr	r1, [pc, #92]	; (24b4 <ll_create_connection+0x3d4>)
    2458:	4815      	ldr	r0, [pc, #84]	; (24b0 <ll_create_connection+0x3d0>)
    245a:	23bf      	movs	r3, #191	; 0xbf
    245c:	f013 ff49 	bl	162f2 <assert_print>
    2460:	4040      	eors	r0, r0
    2462:	f380 8811 	msr	BASEPRI, r0
    2466:	f04f 0003 	mov.w	r0, #3
    246a:	df02      	svc	2
    246c:	e6be      	b.n	21ec <ll_create_connection+0x10c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    246e:	2007      	movs	r0, #7
    2470:	e69e      	b.n	21b0 <ll_create_connection+0xd0>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    2472:	f104 0050 	add.w	r0, r4, #80	; 0x50
    2476:	65a0      	str	r0, [r4, #88]	; 0x58
    2478:	e6c8      	b.n	220c <ll_create_connection+0x12c>
    247a:	bf00      	nop
    247c:	f3af 8000 	nop.w
    2480:	1afd498d 	.word	0x1afd498d
    2484:	00000007 	.word	0x00000007
    2488:	3b9aca00 	.word	0x3b9aca00
    248c:	f8800000 	.word	0xf8800000
    2490:	01110148 	.word	0x01110148
    2494:	0148001b 	.word	0x0148001b
    2498:	aaaaaaab 	.word	0xaaaaaaab
    249c:	01c9c37f 	.word	0x01c9c37f
    24a0:	026259ff 	.word	0x026259ff
    24a4:	f6ff0000 	.word	0xf6ff0000
    24a8:	0001aaf0 	.word	0x0001aaf0
    24ac:	0001ab34 	.word	0x0001ab34
    24b0:	0001a580 	.word	0x0001a580
    24b4:	0001a764 	.word	0x0001a764
	LL_ASSERT(link);
    24b8:	4a10      	ldr	r2, [pc, #64]	; (24fc <ll_create_connection+0x41c>)
    24ba:	4911      	ldr	r1, [pc, #68]	; (2500 <ll_create_connection+0x420>)
    24bc:	4811      	ldr	r0, [pc, #68]	; (2504 <ll_create_connection+0x424>)
    24be:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
    24c2:	f013 ff16 	bl	162f2 <assert_print>
    24c6:	4040      	eors	r0, r0
    24c8:	f380 8811 	msr	BASEPRI, r0
    24cc:	f04f 0003 	mov.w	r0, #3
    24d0:	df02      	svc	2
    24d2:	e7b3      	b.n	243c <ll_create_connection+0x35c>
	LL_ASSERT(link);
    24d4:	4a09      	ldr	r2, [pc, #36]	; (24fc <ll_create_connection+0x41c>)
    24d6:	490a      	ldr	r1, [pc, #40]	; (2500 <ll_create_connection+0x420>)
    24d8:	480a      	ldr	r0, [pc, #40]	; (2504 <ll_create_connection+0x424>)
    24da:	f240 43c9 	movw	r3, #1225	; 0x4c9
    24de:	f013 ff08 	bl	162f2 <assert_print>
    24e2:	4040      	eors	r0, r0
    24e4:	f380 8811 	msr	BASEPRI, r0
    24e8:	f04f 0003 	mov.w	r0, #3
    24ec:	df02      	svc	2
    24ee:	e79f      	b.n	2430 <ll_create_connection+0x350>
		ll_rx_link_release(link);
    24f0:	9807      	ldr	r0, [sp, #28]
    24f2:	f009 f98b 	bl	b80c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    24f6:	2007      	movs	r0, #7
    24f8:	e65a      	b.n	21b0 <ll_create_connection+0xd0>
    24fa:	bf00      	nop
    24fc:	0001aaf0 	.word	0x0001aaf0
    2500:	0001a97c 	.word	0x0001a97c
    2504:	0001a580 	.word	0x0001a580

00002508 <ull_central_setup>:
{
    2508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	peer_addr_type = pdu_tx->rx_addr;
    250c:	4680      	mov	r8, r0
{
    250e:	b08c      	sub	sp, #48	; 0x30
    2510:	4604      	mov	r4, r0
	peer_addr_type = pdu_tx->rx_addr;
    2512:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
{
    2516:	4689      	mov	r9, r1
    2518:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    251a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    251e:	2206      	movs	r2, #6
    2520:	a80a      	add	r0, sp, #40	; 0x28
    2522:	f014 f966 	bl	167f2 <memcpy>
	chan_sel = pdu_tx->chan_sel;
    2526:	7f27      	ldrb	r7, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2528:	f018 0f01 	tst.w	r8, #1
	peer_addr_type = pdu_tx->rx_addr;
    252c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    2530:	f3c7 1740 	ubfx	r7, r7, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2534:	f040 80d0 	bne.w	26d8 <ull_central_setup+0x1d0>
	cc->status = 0U;
    2538:	2300      	movs	r3, #0
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    253a:	a90a      	add	r1, sp, #40	; 0x28
    253c:	2206      	movs	r2, #6
		cc->peer_addr_type = peer_addr_type;
    253e:	77a6      	strb	r6, [r4, #30]
	cc->status = 0U;
    2540:	83a3      	strh	r3, [r4, #28]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    2542:	f104 001f 	add.w	r0, r4, #31
    2546:	f014 f954 	bl	167f2 <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    254a:	f8d9 3000 	ldr.w	r3, [r9]
    254e:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    2552:	89eb      	ldrh	r3, [r5, #14]
    2554:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    2556:	8a2b      	ldrh	r3, [r5, #16]
    2558:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->timeout = scan->lll.conn_timeout;
    255a:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    255e:	8563      	strh	r3, [r4, #42]	; 0x2a
	cc->sca = lll_clock_sca_local_get();
    2560:	f00e f932 	bl	107c8 <lll_clock_sca_local_get>
    2564:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	conn = lll->hdr.parent;
    2568:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    256c:	4640      	mov	r0, r8
    256e:	f00a fb15 	bl	cb9c <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    2572:	f8d9 6004 	ldr.w	r6, [r9, #4]
	lll->handle = ll_conn_handle_get(conn);
    2576:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    2578:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    257a:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    257c:	6820      	ldr	r0, [r4, #0]
    257e:	f009 f94b 	bl	b818 <ll_rx_put>
		rx->handle = lll->handle;
    2582:	89ab      	ldrh	r3, [r5, #12]
    2584:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2586:	231c      	movs	r3, #28
		link = rx->link;
    2588:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    258a:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    258c:	2f00      	cmp	r7, #0
    258e:	f040 80b1 	bne.w	26f4 <ull_central_setup+0x1ec>
			cs->csa = 0x00;
    2592:	7737      	strb	r7, [r6, #28]
	ll_rx_put(link, rx);
    2594:	4631      	mov	r1, r6
    2596:	4620      	mov	r0, r4
    2598:	f009 f93e 	bl	b818 <ll_rx_put>
	ll_rx_sched();
    259c:	f009 f946 	bl	b82c <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    25a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    25a4:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    25a8:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    25ac:	89ef      	ldrh	r7, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    25ae:	f8d9 400c 	ldr.w	r4, [r9, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    25b2:	429e      	cmp	r6, r3
    25b4:	bf38      	it	cc
    25b6:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    25b8:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    25bc:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    25c0:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    25c4:	fb03 f707 	mul.w	r7, r3, r7
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    25c8:	f00d ff04 	bl	103d4 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    25cc:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    25ce:	2200      	movs	r2, #0
    25d0:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    25d2:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    25d4:	2001      	movs	r0, #1
    25d6:	f005 fd73 	bl	80c0 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    25da:	4650      	mov	r0, sl
    25dc:	f009 fe5a 	bl	c294 <ull_scan_handle_get>
    25e0:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    25e2:	4b4d      	ldr	r3, [pc, #308]	; (2718 <ull_central_setup+0x210>)
    25e4:	f8cd a000 	str.w	sl, [sp]
    25e8:	b2d2      	uxtb	r2, r2
    25ea:	2101      	movs	r1, #1
    25ec:	2000      	movs	r0, #0
    25ee:	f006 fffb 	bl	95e8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    25f2:	f030 0302 	bics.w	r3, r0, #2
    25f6:	d00c      	beq.n	2612 <ull_central_setup+0x10a>
    25f8:	4a48      	ldr	r2, [pc, #288]	; (271c <ull_central_setup+0x214>)
    25fa:	4949      	ldr	r1, [pc, #292]	; (2720 <ull_central_setup+0x218>)
    25fc:	4849      	ldr	r0, [pc, #292]	; (2724 <ull_central_setup+0x21c>)
    25fe:	f44f 7376 	mov.w	r3, #984	; 0x3d8
    2602:	f013 fe76 	bl	162f2 <assert_print>
    2606:	4040      	eors	r0, r0
    2608:	f380 8811 	msr	BASEPRI, r0
    260c:	f04f 0003 	mov.w	r0, #3
    2610:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2612:	f04f 0a00 	mov.w	sl, #0
    2616:	2201      	movs	r2, #1
    2618:	4611      	mov	r1, r2
    261a:	4653      	mov	r3, sl
    261c:	f8cd a000 	str.w	sl, [sp]
    2620:	4650      	mov	r0, sl
    2622:	f006 ffe1 	bl	95e8 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2626:	4640      	mov	r0, r8
    2628:	f00a fab8 	bl	cb9c <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    262c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2630:	f8cd 8018 	str.w	r8, [sp, #24]
    2634:	3b09      	subs	r3, #9
    2636:	1b9e      	subs	r6, r3, r6
    2638:	4b3b      	ldr	r3, [pc, #236]	; (2728 <ull_central_setup+0x220>)
    263a:	9307      	str	r3, [sp, #28]
    263c:	4b3b      	ldr	r3, [pc, #236]	; (272c <ull_central_setup+0x224>)
    263e:	9305      	str	r3, [sp, #20]
    2640:	f44f 6381 	mov.w	r3, #1032	; 0x408
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2644:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 2730 <ull_central_setup+0x228>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2648:	9308      	str	r3, [sp, #32]
    264a:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    264e:	fba7 8709 	umull	r8, r7, r7, r9
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2652:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2656:	1cc5      	adds	r5, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2658:	a32d      	add	r3, pc, #180	; (adr r3, 2710 <ull_central_setup+0x208>)
    265a:	e9d3 2300 	ldrd	r2, r3, [r3]
    265e:	4640      	mov	r0, r8
    2660:	4639      	mov	r1, r7
    2662:	f7fd fd4d 	bl	100 <__aeabi_uldivmod>
    2666:	4610      	mov	r0, r2
    2668:	4619      	mov	r1, r3
    266a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    266e:	2300      	movs	r3, #0
    2670:	f7fd fd46 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2674:	a326      	add	r3, pc, #152	; (adr r3, 2710 <ull_central_setup+0x208>)
    2676:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    267a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    267c:	4639      	mov	r1, r7
    267e:	4640      	mov	r0, r8
    2680:	f7fd fd3e 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2684:	a322      	add	r3, pc, #136	; (adr r3, 2710 <ull_central_setup+0x208>)
    2686:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    268a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    268c:	fba4 0109 	umull	r0, r1, r4, r9
    2690:	f7fd fd36 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2694:	b2ed      	uxtb	r5, r5
    2696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    269a:	9000      	str	r0, [sp, #0]
    269c:	4633      	mov	r3, r6
    269e:	462a      	mov	r2, r5
    26a0:	2101      	movs	r1, #1
    26a2:	4650      	mov	r0, sl
    26a4:	f006 ff16 	bl	94d4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    26a8:	f030 0302 	bics.w	r3, r0, #2
    26ac:	d00c      	beq.n	26c8 <ull_central_setup+0x1c0>
    26ae:	4a1b      	ldr	r2, [pc, #108]	; (271c <ull_central_setup+0x214>)
    26b0:	491b      	ldr	r1, [pc, #108]	; (2720 <ull_central_setup+0x218>)
    26b2:	481c      	ldr	r0, [pc, #112]	; (2724 <ull_central_setup+0x21c>)
    26b4:	f240 4309 	movw	r3, #1033	; 0x409
    26b8:	f013 fe1b 	bl	162f2 <assert_print>
    26bc:	4040      	eors	r0, r0
    26be:	f380 8811 	msr	BASEPRI, r0
    26c2:	f04f 0003 	mov.w	r0, #3
    26c6:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    26c8:	2201      	movs	r2, #1
    26ca:	2102      	movs	r1, #2
    26cc:	4610      	mov	r0, r2
    26ce:	f005 fcf7 	bl	80c0 <mayfly_enable>
}
    26d2:	b00c      	add	sp, #48	; 0x30
    26d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    26d8:	4a10      	ldr	r2, [pc, #64]	; (271c <ull_central_setup+0x214>)
    26da:	4916      	ldr	r1, [pc, #88]	; (2734 <ull_central_setup+0x22c>)
    26dc:	4811      	ldr	r0, [pc, #68]	; (2724 <ull_central_setup+0x21c>)
    26de:	f240 3357 	movw	r3, #855	; 0x357
    26e2:	f013 fe06 	bl	162f2 <assert_print>
    26e6:	4040      	eors	r0, r0
    26e8:	f380 8811 	msr	BASEPRI, r0
    26ec:	f04f 0003 	mov.w	r0, #3
    26f0:	df02      	svc	2
    26f2:	e721      	b.n	2538 <ull_central_setup+0x30>
			lll->data_chan_sel = 1;
    26f4:	7f6b      	ldrb	r3, [r5, #29]
    26f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26fa:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    26fc:	1d28      	adds	r0, r5, #4
    26fe:	f00d fa17 	bl	fb30 <lll_chan_id>
			cs->csa = 0x01;
    2702:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2704:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    2706:	7733      	strb	r3, [r6, #28]
    2708:	e744      	b.n	2594 <ull_central_setup+0x8c>
    270a:	bf00      	nop
    270c:	f3af 8000 	nop.w
    2710:	1afd498d 	.word	0x1afd498d
    2714:	00000007 	.word	0x00000007
    2718:	0000f281 	.word	0x0000f281
    271c:	0001aaf0 	.word	0x0001aaf0
    2720:	0001aa40 	.word	0x0001aa40
    2724:	0001a580 	.word	0x0001a580
    2728:	0000f285 	.word	0x0000f285
    272c:	0000f2b5 	.word	0x0000f2b5
    2730:	3b9aca00 	.word	0x3b9aca00
    2734:	0001a694 	.word	0x0001a694

00002738 <after_cen_offset_get>:
}

static void after_cen_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				 uint32_t ticks_anchor,
				 uint32_t *win_offset_us)
{
    2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    273c:	b086      	sub	sp, #24
	ticker_id = after_match_slot_get(user_id, ticks_slot_abs,
    273e:	ac05      	add	r4, sp, #20
    2740:	9400      	str	r4, [sp, #0]
	uint32_t ticks_anchor_offset = ticks_anchor;
    2742:	9203      	str	r2, [sp, #12]
{
    2744:	4616      	mov	r6, r2
    2746:	461d      	mov	r5, r3
    2748:	4604      	mov	r4, r0
	ticker_id = after_match_slot_get(user_id, ticks_slot_abs,
    274a:	ab04      	add	r3, sp, #16
    274c:	aa03      	add	r2, sp, #12
    274e:	2002      	movs	r0, #2
    2750:	f00d f8cc 	bl	f8ec <after_match_slot_get.constprop.0>
	if (ticker_id != TICKER_NULL) {
    2754:	28ff      	cmp	r0, #255	; 0xff
    2756:	d030      	beq.n	27ba <after_cen_offset_get+0x82>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire +
    2758:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
    275c:	4f24      	ldr	r7, [pc, #144]	; (27f0 <after_cen_offset_get+0xb8>)
    275e:	440b      	add	r3, r1
    2760:	fba3 0107 	umull	r0, r1, r3, r7
    2764:	f04f 0807 	mov.w	r8, #7
    2768:	fb08 1103 	mla	r1, r8, r3, r1
    276c:	a31e      	add	r3, pc, #120	; (adr r3, 27e8 <after_cen_offset_get+0xb0>)
    276e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2772:	f7fd fcc5 	bl	100 <__aeabi_uldivmod>
						    ticks_slot) +
    2776:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire +
    2778:	6028      	str	r0, [r5, #0]
					   win_offset_us);
	if (err) {
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    277a:	9803      	ldr	r0, [sp, #12]
    277c:	1b83      	subs	r3, r0, r6
    277e:	021b      	lsls	r3, r3, #8
    2780:	d41e      	bmi.n	27c0 <after_cen_offset_get+0x88>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    2782:	4631      	mov	r1, r6
    2784:	f006 ffd2 	bl	972c <ticker_ticks_diff_get>
    2788:	4603      	mov	r3, r0
    278a:	fba0 0107 	umull	r0, r1, r0, r7
    278e:	fb08 1103 	mla	r1, r8, r3, r1
    2792:	a315      	add	r3, pc, #84	; (adr r3, 27e8 <after_cen_offset_get+0xb0>)
    2794:	e9d3 2300 	ldrd	r2, r3, [r3]
    2798:	f7fd fcb2 	bl	100 <__aeabi_uldivmod>
    279c:	682a      	ldr	r2, [r5, #0]
    279e:	4402      	add	r2, r0
    27a0:	602a      	str	r2, [r5, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    27a2:	2a00      	cmp	r2, #0
    27a4:	db09      	blt.n	27ba <after_cen_offset_get+0x82>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    27a6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    27aa:	fb04 f000 	mul.w	r0, r4, r0

		while (*win_offset_us > conn_interval_us) {
    27ae:	4290      	cmp	r0, r2
    27b0:	d203      	bcs.n	27ba <after_cen_offset_get+0x82>
			*win_offset_us -= conn_interval_us;
    27b2:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    27b4:	4282      	cmp	r2, r0
    27b6:	d8fc      	bhi.n	27b2 <after_cen_offset_get+0x7a>
    27b8:	602a      	str	r2, [r5, #0]
		}
	}
}
    27ba:	b006      	add	sp, #24
    27bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    27c0:	4601      	mov	r1, r0
    27c2:	4630      	mov	r0, r6
    27c4:	f006 ffb2 	bl	972c <ticker_ticks_diff_get>
    27c8:	4603      	mov	r3, r0
    27ca:	fba0 0107 	umull	r0, r1, r0, r7
    27ce:	fb08 1103 	mla	r1, r8, r3, r1
    27d2:	a305      	add	r3, pc, #20	; (adr r3, 27e8 <after_cen_offset_get+0xb0>)
    27d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    27d8:	f7fd fc92 	bl	100 <__aeabi_uldivmod>
    27dc:	682a      	ldr	r2, [r5, #0]
    27de:	1a12      	subs	r2, r2, r0
    27e0:	602a      	str	r2, [r5, #0]
    27e2:	e7de      	b.n	27a2 <after_cen_offset_get+0x6a>
    27e4:	f3af 8000 	nop.w
    27e8:	3b9aca00 	.word	0x3b9aca00
    27ec:	00000000 	.word	0x00000000
    27f0:	1afd498d 	.word	0x1afd498d
    27f4:	00000000 	.word	0x00000000

000027f8 <ull_sched_after_cen_slot_get>:
{
    27f8:	b510      	push	{r4, lr}
    27fa:	b084      	sub	sp, #16
	ticker_id = after_match_slot_get(user_id, ticks_slot_abs,
    27fc:	ac03      	add	r4, sp, #12
{
    27fe:	469c      	mov	ip, r3
	ticker_id = after_match_slot_get(user_id, ticks_slot_abs,
    2800:	9400      	str	r4, [sp, #0]
    2802:	ab02      	add	r3, sp, #8
{
    2804:	4664      	mov	r4, ip
	ticker_id = after_match_slot_get(user_id, ticks_slot_abs,
    2806:	f00d f871 	bl	f8ec <after_match_slot_get.constprop.0>
	if (ticker_id != TICKER_NULL) {
    280a:	28ff      	cmp	r0, #255	; 0xff
    280c:	d012      	beq.n	2834 <ull_sched_after_cen_slot_get+0x3c>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire +
    280e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2812:	480d      	ldr	r0, [pc, #52]	; (2848 <ull_sched_after_cen_slot_get+0x50>)
    2814:	440a      	add	r2, r1
    2816:	fba2 0100 	umull	r0, r1, r2, r0
    281a:	2307      	movs	r3, #7
    281c:	fb03 1102 	mla	r1, r3, r2, r1
    2820:	a307      	add	r3, pc, #28	; (adr r3, 2840 <ull_sched_after_cen_slot_get+0x48>)
    2822:	e9d3 2300 	ldrd	r2, r3, [r3]
    2826:	f7fd fc6b 	bl	100 <__aeabi_uldivmod>
						    ticks_slot) +
    282a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire +
    282c:	6020      	str	r0, [r4, #0]
		return 0;
    282e:	2000      	movs	r0, #0
}
    2830:	b004      	add	sp, #16
    2832:	bd10      	pop	{r4, pc}
	return -ECHILD;
    2834:	f06f 0009 	mvn.w	r0, #9
    2838:	e7fa      	b.n	2830 <ull_sched_after_cen_slot_get+0x38>
    283a:	bf00      	nop
    283c:	f3af 8000 	nop.w
    2840:	3b9aca00 	.word	0x3b9aca00
    2844:	00000000 	.word	0x00000000
    2848:	1afd498d 	.word	0x1afd498d
    284c:	00000000 	.word	0x00000000

00002850 <ull_sched_mfy_win_offset_select>:
{
    2850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2854:	f8b0 116c 	ldrh.w	r1, [r0, #364]	; 0x16c
{
    2858:	b088      	sub	sp, #32
    285a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    285c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2860:	4847      	ldr	r0, [pc, #284]	; (2980 <ull_sched_mfy_win_offset_select+0x130>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2862:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2864:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2868:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    286a:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    286c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    2870:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2874:	fba1 0100 	umull	r0, r1, r1, r0
    2878:	a33f      	add	r3, pc, #252	; (adr r3, 2978 <ull_sched_mfy_win_offset_select+0x128>)
    287a:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    287e:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2880:	f7fd fc3e 	bl	100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    2884:	f10d 030f 	add.w	r3, sp, #15
    2888:	9501      	str	r5, [sp, #4]
    288a:	9300      	str	r3, [sp, #0]
    288c:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2890:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    2892:	aa04      	add	r2, sp, #16
    2894:	4620      	mov	r0, r4
    2896:	2101      	movs	r1, #1
    2898:	f00c fedc 	bl	f654 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    289c:	f89d 800f 	ldrb.w	r8, [sp, #15]
    28a0:	f108 3cff 	add.w	ip, r8, #4294967295
    28a4:	fa5f fc8c 	uxtb.w	ip, ip
    28a8:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    28ac:	4630      	mov	r0, r6
    28ae:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
    28b2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    28b6:	f504 76bc 	add.w	r6, r4, #376	; 0x178
			if (win_offset_s != 0xffff) {
    28ba:	f64f 7eff 	movw	lr, #65535	; 0xffff
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    28be:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    28c0:	f1b8 0f00 	cmp.w	r8, #0
    28c4:	d00a      	beq.n	28dc <ull_sched_mfy_win_offset_select+0x8c>
    28c6:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    28c8:	4572      	cmp	r2, lr
    28ca:	d004      	beq.n	28d6 <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    28cc:	8819      	ldrh	r1, [r3, #0]
    28ce:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    28d0:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    28d4:	d01d      	beq.n	2912 <ull_sched_mfy_win_offset_select+0xc2>
		while (offset_index_m < offset_m_max) {
    28d6:	3302      	adds	r3, #2
    28d8:	459c      	cmp	ip, r3
    28da:	d1f5      	bne.n	28c8 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    28dc:	3702      	adds	r7, #2
    28de:	42be      	cmp	r6, r7
    28e0:	d1ed      	bne.n	28be <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    28e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	} else if (!has_offset_s) {
    28e6:	bb48      	cbnz	r0, 293c <ull_sched_mfy_win_offset_select+0xec>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    28e8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    28ec:	f240 41e2 	movw	r1, #1250	; 0x4e2
    28f0:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    28f4:	0a10      	lsrs	r0, r2, #8
    28f6:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
	dst[0] = val;
    28fa:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    28fc:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    28fe:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    2902:	2204      	movs	r2, #4
    2904:	f362 0302 	bfi	r3, r2, #0, #3
    2908:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    290c:	b008      	add	sp, #32
    290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2912:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    2916:	f240 43e2 	movw	r3, #1250	; 0x4e2
    291a:	fb02 f303 	mul.w	r3, r2, r3
    291e:	0a10      	lsrs	r0, r2, #8
    2920:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	dst[0] = val;
    2924:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    2926:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2928:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    292c:	2204      	movs	r2, #4
    292e:	f362 0302 	bfi	r3, r2, #0, #3
    2932:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    2936:	b008      	add	sp, #32
    2938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    293c:	2203      	movs	r2, #3
    293e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2942:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2946:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    294a:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    294c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    2950:	2011      	movs	r0, #17
    2952:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2956:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    295a:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    295e:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2960:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2962:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2966:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2968:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
}
    296c:	b008      	add	sp, #32
    296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2972:	bf00      	nop
    2974:	f3af 8000 	nop.w
    2978:	1afd498d 	.word	0x1afd498d
    297c:	00000007 	.word	0x00000007
    2980:	3b9aca00 	.word	0x3b9aca00
    2984:	00000000 	.word	0x00000000

00002988 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    2988:	b538      	push	{r3, r4, r5, lr}
    298a:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    298c:	f00e f836 	bl	109fc <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    2990:	7da2      	ldrb	r2, [r4, #22]
    2992:	f3c2 0341 	ubfx	r3, r2, #1, #2
    2996:	3301      	adds	r3, #1
    2998:	f003 0303 	and.w	r3, r3, #3
    299c:	2b03      	cmp	r3, #3
    299e:	d034      	beq.n	2a0a <isr_window+0x82>
    29a0:	f363 0242 	bfi	r2, r3, #1, #2
    29a4:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    29a6:	f103 0025 	add.w	r0, r3, #37	; 0x25
    29aa:	f00d fcd1 	bl	10350 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    29ae:	6863      	ldr	r3, [r4, #4]
    29b0:	b30b      	cbz	r3, 29f6 <isr_window+0x6e>
    29b2:	6923      	ldr	r3, [r4, #16]
    29b4:	b1fb      	cbz	r3, 29f6 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    29b6:	f00f fb23 	bl	12000 <radio_tmr_start_get>
    29ba:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    29bc:	f006 feb4 	bl	9728 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    29c0:	1cc1      	adds	r1, r0, #3
    29c2:	2000      	movs	r0, #0
    29c4:	f00f faea 	bl	11f9c <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    29c8:	f00f fb4c 	bl	12064 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    29cc:	f00f fb18 	bl	12000 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    29d0:	4629      	mov	r1, r5
    29d2:	f006 feab 	bl	972c <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    29d6:	4912      	ldr	r1, [pc, #72]	; (2a20 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    29d8:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    29da:	2207      	movs	r2, #7
    29dc:	fba0 0101 	umull	r0, r1, r0, r1
    29e0:	fb02 1103 	mla	r1, r2, r3, r1
    29e4:	a30c      	add	r3, pc, #48	; (adr r3, 2a18 <isr_window+0x90>)
    29e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    29ea:	f7fd fb89 	bl	100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    29ee:	6923      	ldr	r3, [r4, #16]
    29f0:	1a1b      	subs	r3, r3, r0
    29f2:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    29f4:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    29f6:	f006 fe97 	bl	9728 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    29fa:	1cc1      	adds	r1, r0, #3
    29fc:	2000      	movs	r0, #0
    29fe:	f00f facd 	bl	11f9c <radio_tmr_start_tick>
}
    2a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    2a06:	f00f bb2d 	b.w	12064 <radio_tmr_end_capture>
		lll->chan = 0U;
    2a0a:	f36f 0242 	bfc	r2, #1, #2
    2a0e:	75a2      	strb	r2, [r4, #22]
    2a10:	2025      	movs	r0, #37	; 0x25
    2a12:	e7ca      	b.n	29aa <isr_window+0x22>
    2a14:	f3af 8000 	nop.w
    2a18:	3b9aca00 	.word	0x3b9aca00
    2a1c:	00000000 	.word	0x00000000
    2a20:	1afd498d 	.word	0x1afd498d
    2a24:	00000000 	.word	0x00000000

00002a28 <isr_rx>:
{
    2a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a2a:	b087      	sub	sp, #28
    2a2c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    2a2e:	f00f f8e9 	bl	11c04 <radio_is_done>
	if (trx_done) {
    2a32:	b2c0      	uxtb	r0, r0
    2a34:	b950      	cbnz	r0, 2a4c <isr_rx+0x24>
	lll_isr_status_reset();
    2a36:	f00d fce1 	bl	103fc <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    2a3a:	48b1      	ldr	r0, [pc, #708]	; (2d00 <isr_rx+0x2d8>)
    2a3c:	4621      	mov	r1, r4
    2a3e:	f00e ffc1 	bl	119c4 <radio_isr_set>
}
    2a42:	b007      	add	sp, #28
    2a44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	radio_disable();
    2a48:	f00f b8b2 	b.w	11bb0 <radio_disable>
		crc_ok = radio_crc_is_valid();
    2a4c:	f00f f8fa 	bl	11c44 <radio_crc_is_valid>
    2a50:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    2a52:	f00f f9f5 	bl	11e40 <radio_filter_has_match>
    2a56:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
    2a58:	f00f f9fc 	bl	11e54 <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
    2a5c:	f00f f9d4 	bl	11e08 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    2a60:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    2a62:	4606      	mov	r6, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    2a64:	f00f f9b6 	bl	11dd4 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    2a68:	f00d fcc8 	bl	103fc <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    2a6c:	2d00      	cmp	r5, #0
    2a6e:	d0e4      	beq.n	2a3a <isr_rx+0x12>
	node_rx = ull_pdu_rx_alloc_peek(1);
    2a70:	2001      	movs	r0, #1
    2a72:	f009 f819 	bl	baa8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    2a76:	4605      	mov	r5, r0
    2a78:	2800      	cmp	r0, #0
    2a7a:	f000 8147 	beq.w	2d0c <isr_rx+0x2e4>
	return ((lll->filter_policy & SCAN_FP_FILTER) == 0U) ||
    2a7e:	7da3      	ldrb	r3, [r4, #22]
    2a80:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    2a84:	071b      	lsls	r3, r3, #28
    2a86:	d502      	bpl.n	2a8e <isr_rx+0x66>
    2a88:	b2ff      	uxtb	r7, r7
    2a8a:	2f00      	cmp	r7, #0
    2a8c:	d0d5      	beq.n	2a3a <isr_rx+0x12>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    2a8e:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    2a90:	6860      	ldr	r0, [r4, #4]
		rssi_ready = radio_rssi_is_ready();
    2a92:	b2f6      	uxtb	r6, r6
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    2a94:	f003 020f 	and.w	r2, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    2a98:	2800      	cmp	r0, #0
    2a9a:	f000 80b0 	beq.w	2bfe <isr_rx+0x1d6>
    2a9e:	6860      	ldr	r0, [r4, #4]
    2aa0:	f890 0020 	ldrb.w	r0, [r0, #32]
    2aa4:	0780      	lsls	r0, r0, #30
    2aa6:	f100 80aa 	bmi.w	2bfe <isr_rx+0x1d6>
    2aaa:	2a07      	cmp	r2, #7
    2aac:	d0c5      	beq.n	2a3a <isr_rx+0x12>
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    2aae:	2900      	cmp	r1, #0
    2ab0:	f000 813a 	beq.w	2d28 <isr_rx+0x300>
    2ab4:	2a00      	cmp	r2, #0
    2ab6:	f040 8084 	bne.w	2bc2 <isr_rx+0x19a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2aba:	7f6a      	ldrb	r2, [r5, #29]
    2abc:	2a25      	cmp	r2, #37	; 0x25
    2abe:	f200 80c2 	bhi.w	2c46 <isr_rx+0x21e>
			rx = ull_pdu_rx_alloc_peek(4);
    2ac2:	2004      	movs	r0, #4
    2ac4:	f008 fff0 	bl	baa8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    2ac8:	2800      	cmp	r0, #0
    2aca:	d0b6      	beq.n	2a3a <isr_rx+0x12>
		pdu_end_us = radio_tmr_end_get();
    2acc:	f00f fad2 	bl	12074 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    2ad0:	6a23      	ldr	r3, [r4, #32]
		pdu_end_us = radio_tmr_end_get();
    2ad2:	4606      	mov	r6, r0
		if (!lll->ticks_window) {
    2ad4:	b943      	cbnz	r3, 2ae8 <isr_rx+0xc0>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    2ad6:	8be3      	ldrh	r3, [r4, #30]
    2ad8:	f240 2271 	movw	r2, #625	; 0x271
    2adc:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    2ae0:	fbb0 f2f3 	udiv	r2, r0, r3
    2ae4:	fb03 0612 	mls	r6, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    2ae8:	6822      	ldr	r2, [r4, #0]
    2aea:	4b86      	ldr	r3, [pc, #536]	; (2d04 <isr_rx+0x2dc>)
    2aec:	6912      	ldr	r2, [r2, #16]
    2aee:	2107      	movs	r1, #7
    2af0:	fba2 0303 	umull	r0, r3, r2, r3
    2af4:	fb01 3102 	mla	r1, r1, r2, r3
    2af8:	a37f      	add	r3, pc, #508	; (adr r3, 2cf8 <isr_rx+0x2d0>)
    2afa:	e9d3 2300 	ldrd	r2, r3, [r3]
    2afe:	f7fd faff 	bl	100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    2b02:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    2b06:	42b3      	cmp	r3, r6
    2b08:	d397      	bcc.n	2a3a <isr_rx+0x12>
		radio_switch_complete_and_disable();
    2b0a:	f00f f955 	bl	11db8 <radio_switch_complete_and_disable>
			init_tx_addr = lll->init_addr_type;
    2b0e:	7da6      	ldrb	r6, [r4, #22]
		lll_conn = lll->conn;
    2b10:	6863      	ldr	r3, [r4, #4]
		pdu_tx = (void *)radio_pkt_scratch_get();
    2b12:	f00f f8a5 	bl	11c60 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    2b16:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    2b18:	a905      	add	r1, sp, #20
					     pdu_adv_rx->adv_ind.addr,
    2b1a:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    2b1e:	9103      	str	r1, [sp, #12]
			init_tx_addr = lll->init_addr_type;
    2b20:	f3c6 1680 	ubfx	r6, r6, #6, #1
			init_addr = lll->init_addr;
    2b24:	f104 0118 	add.w	r1, r4, #24
		pdu_tx = (void *)radio_pkt_scratch_get();
    2b28:	4607      	mov	r7, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    2b2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2b2e:	9200      	str	r2, [sp, #0]
    2b30:	9102      	str	r1, [sp, #8]
    2b32:	2200      	movs	r2, #0
    2b34:	4601      	mov	r1, r0
    2b36:	9601      	str	r6, [sp, #4]
    2b38:	4620      	mov	r0, r4
    2b3a:	f00e f929 	bl	10d90 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    2b3e:	4638      	mov	r0, r7
    2b40:	f00f f81c 	bl	11b7c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    2b44:	f00f f854 	bl	11bf0 <radio_is_ready>
    2b48:	2800      	cmp	r0, #0
    2b4a:	f040 816f 	bne.w	2e2c <isr_rx+0x404>
		radio_isr_set(isr_done_cleanup, lll);
    2b4e:	4621      	mov	r1, r4
    2b50:	486d      	ldr	r0, [pc, #436]	; (2d08 <isr_rx+0x2e0>)
    2b52:	f00e ff37 	bl	119c4 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    2b56:	6862      	ldr	r2, [r4, #4]
    2b58:	f892 3020 	ldrb.w	r3, [r2, #32]
    2b5c:	f043 0301 	orr.w	r3, r3, #1
    2b60:	f882 3020 	strb.w	r3, [r2, #32]
		lll->is_stop = 1U;
    2b64:	7da3      	ldrb	r3, [r4, #22]
    2b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2b6a:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    2b6c:	f008 ffbc 	bl	bae8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    2b70:	2317      	movs	r3, #23
		rx = ull_pdu_rx_alloc();
    2b72:	4606      	mov	r6, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    2b74:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    2b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    2b7a:	2224      	movs	r2, #36	; 0x24
    2b7c:	4639      	mov	r1, r7
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    2b7e:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    2b80:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    2b82:	301c      	adds	r0, #28
    2b84:	f013 fe35 	bl	167f2 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    2b88:	7f33      	ldrb	r3, [r6, #28]
		ftr->param = lll;
    2b8a:	60b4      	str	r4, [r6, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    2b8c:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    2b90:	f365 1345 	bfi	r3, r5, #5, #1
    2b94:	7733      	strb	r3, [r6, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    2b96:	f00f fa33 	bl	12000 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2b9a:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    2b9c:	6130      	str	r0, [r6, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2b9e:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    2ba0:	9c05      	ldr	r4, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    2ba2:	f00e fff9 	bl	11b98 <radio_rx_chain_delay_get>
		ftr->radio_end_us = conn_space_us -
    2ba6:	1a24      	subs	r4, r4, r0
    2ba8:	6174      	str	r4, [r6, #20]
			ftr->extra = ull_pdu_rx_alloc();
    2baa:	f008 ff9d 	bl	bae8 <ull_pdu_rx_alloc>
    2bae:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    2bb0:	4631      	mov	r1, r6
    2bb2:	6830      	ldr	r0, [r6, #0]
			ftr->extra = ull_pdu_rx_alloc();
    2bb4:	60f3      	str	r3, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
    2bb6:	f008 ffad 	bl	bb14 <ull_rx_put>
		ull_rx_sched();
    2bba:	f008 ffbb 	bl	bb34 <ull_rx_sched>
}
    2bbe:	b007      	add	sp, #28
    2bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2bc2:	2a01      	cmp	r2, #1
    2bc4:	d11d      	bne.n	2c02 <isr_rx+0x1da>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    2bc6:	7f6a      	ldrb	r2, [r5, #29]
    2bc8:	2a0c      	cmp	r2, #12
    2bca:	f47f af36 	bne.w	2a3a <isr_rx+0x12>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == addr_type) &&
    2bce:	7da2      	ldrb	r2, [r4, #22]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
    2bd0:	f3c2 1180 	ubfx	r1, r2, #6, #1
    2bd4:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    2bd8:	ea4f 17d3 	mov.w	r7, r3, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
    2bdc:	f000 814b 	beq.w	2e76 <isr_rx+0x44e>
static inline bool isr_scan_tgta_rpa_check(const struct lll_scan *lll,
					   uint8_t addr_type,
					   const uint8_t *addr,
					   bool *const dir_report)
{
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
    2be0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
    2be4:	0792      	lsls	r2, r2, #30
    2be6:	d507      	bpl.n	2bf8 <isr_rx+0x1d0>
    2be8:	b137      	cbz	r7, 2bf8 <isr_rx+0x1d0>
    2bea:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    2bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2bf2:	2b40      	cmp	r3, #64	; 0x40
    2bf4:	f43f af65 	beq.w	2ac2 <isr_rx+0x9a>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2bf8:	7f2b      	ldrb	r3, [r5, #28]
    2bfa:	f003 020f 	and.w	r2, r3, #15
    2bfe:	2a00      	cmp	r2, #0
    2c00:	d06b      	beq.n	2cda <isr_rx+0x2b2>
    2c02:	2a06      	cmp	r2, #6
    2c04:	d069      	beq.n	2cda <isr_rx+0x2b2>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2c06:	2a02      	cmp	r2, #2
    2c08:	f000 80a8 	beq.w	2d5c <isr_rx+0x334>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2c0c:	2a01      	cmp	r2, #1
    2c0e:	d11a      	bne.n	2c46 <isr_rx+0x21e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    2c10:	7f6a      	ldrb	r2, [r5, #29]
    2c12:	2a0c      	cmp	r2, #12
    2c14:	f47f af11 	bne.w	2a3a <isr_rx+0x12>
	return (((lll->init_addr_type == addr_type) &&
    2c18:	7da2      	ldrb	r2, [r4, #22]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
    2c1a:	f3c2 1180 	ubfx	r1, r2, #6, #1
    2c1e:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    2c22:	ea4f 17d3 	mov.w	r7, r3, lsr #7
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
    2c26:	f000 80f6 	beq.w	2e16 <isr_rx+0x3ee>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
    2c2a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
    2c2e:	0790      	lsls	r0, r2, #30
    2c30:	f57f af03 	bpl.w	2a3a <isr_rx+0x12>
    2c34:	b137      	cbz	r7, 2c44 <isr_rx+0x21c>
    2c36:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    2c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2c3e:	2b40      	cmp	r3, #64	; 0x40
    2c40:	f000 8117 	beq.w	2e72 <isr_rx+0x44a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    2c44:	7f2b      	ldrb	r3, [r5, #28]
    2c46:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    2c4a:	2b04      	cmp	r3, #4
    2c4c:	f47f aef5 	bne.w	2a3a <isr_rx+0x12>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    2c50:	7f6b      	ldrb	r3, [r5, #29]
    2c52:	2b25      	cmp	r3, #37	; 0x25
    2c54:	f63f aef1 	bhi.w	2a3a <isr_rx+0x12>
		   (lll->state != 0U) &&
    2c58:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    2c5a:	07df      	lsls	r7, r3, #31
    2c5c:	f57f aeed 	bpl.w	2a3a <isr_rx+0x12>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    2c60:	f00e fffe 	bl	11c60 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    2c64:	7f2b      	ldrb	r3, [r5, #28]
    2c66:	7802      	ldrb	r2, [r0, #0]
    2c68:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2c6c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    2c70:	f47f aee3 	bne.w	2a3a <isr_rx+0x12>
		(memcmp(&sreq->scan_req.adv_addr[0],
    2c74:	2206      	movs	r2, #6
    2c76:	3008      	adds	r0, #8
    2c78:	f105 011e 	add.w	r1, r5, #30
    2c7c:	f013 fda8 	bl	167d0 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    2c80:	2800      	cmp	r0, #0
    2c82:	f47f aeda 	bne.w	2a3a <isr_rx+0x12>
		 (pdu_adv_rx->len != 0) &&
    2c86:	7f6a      	ldrb	r2, [r5, #29]
    2c88:	4607      	mov	r7, r0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    2c8a:	2a00      	cmp	r2, #0
    2c8c:	f43f aed5 	beq.w	2a3a <isr_rx+0x12>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    2c90:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    2c92:	b12b      	cbz	r3, 2ca0 <isr_rx+0x278>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    2c94:	7f2b      	ldrb	r3, [r5, #28]
    2c96:	f003 030f 	and.w	r3, r3, #15
    2c9a:	2b07      	cmp	r3, #7
    2c9c:	f47f aecd 	bne.w	2a3a <isr_rx+0x12>
			      bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    2ca0:	2003      	movs	r0, #3
    2ca2:	f008 ff01 	bl	baa8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    2ca6:	4605      	mov	r5, r0
    2ca8:	2800      	cmp	r0, #0
    2caa:	f43f aec6 	beq.w	2a3a <isr_rx+0x12>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    2cae:	f008 ff1b 	bl	bae8 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    2cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2cb6:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    2cb8:	2305      	movs	r3, #5
    2cba:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2cbc:	2e00      	cmp	r6, #0
    2cbe:	d149      	bne.n	2d54 <isr_rx+0x32c>
    2cc0:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    2cc2:	7e6b      	ldrb	r3, [r5, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2cc4:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
    2cc6:	f367 0300 	bfi	r3, r7, #0, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    2cca:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    2ccc:	766b      	strb	r3, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    2cce:	4629      	mov	r1, r5
    2cd0:	f008 ff20 	bl	bb14 <ull_rx_put>
	ull_rx_sched();
    2cd4:	f008 ff2e 	bl	bb34 <ull_rx_sched>
	if (!err) {
    2cd8:	e6af      	b.n	2a3a <isr_rx+0x12>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2cda:	7f6a      	ldrb	r2, [r5, #29]
    2cdc:	2a25      	cmp	r2, #37	; 0x25
    2cde:	d8b2      	bhi.n	2c46 <isr_rx+0x21e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    2ce0:	7da1      	ldrb	r1, [r4, #22]
    2ce2:	0689      	lsls	r1, r1, #26
    2ce4:	d502      	bpl.n	2cec <isr_rx+0x2c4>
		   !lll->conn) {
    2ce6:	6861      	ldr	r1, [r4, #4]
		   lll->type &&
    2ce8:	2900      	cmp	r1, #0
    2cea:	d039      	beq.n	2d60 <isr_rx+0x338>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2cec:	2a25      	cmp	r2, #37	; 0x25
	bool dir_report = false;
    2cee:	bf98      	it	ls
    2cf0:	2700      	movls	r7, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2cf2:	d9ca      	bls.n	2c8a <isr_rx+0x262>
    2cf4:	e7a7      	b.n	2c46 <isr_rx+0x21e>
    2cf6:	bf00      	nop
    2cf8:	3b9aca00 	.word	0x3b9aca00
    2cfc:	00000000 	.word	0x00000000
    2d00:	00010a95 	.word	0x00010a95
    2d04:	1afd498d 	.word	0x1afd498d
    2d08:	00010c65 	.word	0x00010c65
	LL_ASSERT(node_rx);
    2d0c:	4a60      	ldr	r2, [pc, #384]	; (2e90 <isr_rx+0x468>)
    2d0e:	4961      	ldr	r1, [pc, #388]	; (2e94 <isr_rx+0x46c>)
    2d10:	4861      	ldr	r0, [pc, #388]	; (2e98 <isr_rx+0x470>)
    2d12:	f240 23cb 	movw	r3, #715	; 0x2cb
    2d16:	f013 faec 	bl	162f2 <assert_print>
    2d1a:	4040      	eors	r0, r0
    2d1c:	f380 8811 	msr	BASEPRI, r0
    2d20:	f04f 0003 	mov.w	r0, #3
    2d24:	df02      	svc	2
    2d26:	e6aa      	b.n	2a7e <isr_rx+0x56>
	return ((lll->adv_addr_type == addr_type) &&
    2d28:	7de1      	ldrb	r1, [r4, #23]
    2d2a:	f3c3 1080 	ubfx	r0, r3, #6, #1
    2d2e:	f001 0101 	and.w	r1, r1, #1
    2d32:	4288      	cmp	r0, r1
    2d34:	f47f af63 	bne.w	2bfe <isr_rx+0x1d6>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    2d38:	2206      	movs	r2, #6
    2d3a:	f105 011e 	add.w	r1, r5, #30
    2d3e:	f104 0008 	add.w	r0, r4, #8
    2d42:	f013 fd45 	bl	167d0 <memcmp>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2d46:	7f2b      	ldrb	r3, [r5, #28]
    2d48:	f003 020f 	and.w	r2, r3, #15
	return ((lll->adv_addr_type == addr_type) &&
    2d4c:	2800      	cmp	r0, #0
    2d4e:	f43f aeb1 	beq.w	2ab4 <isr_rx+0x8c>
    2d52:	e754      	b.n	2bfe <isr_rx+0x1d6>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2d54:	f00f f84a 	bl	11dec <radio_rssi_get>
    2d58:	b2c0      	uxtb	r0, r0
    2d5a:	e7b2      	b.n	2cc2 <isr_rx+0x29a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2d5c:	7f6a      	ldrb	r2, [r5, #29]
    2d5e:	e7c5      	b.n	2cec <isr_rx+0x2c4>
		radio_tmr_tifs_set(EVENT_IFS_US);
    2d60:	2096      	movs	r0, #150	; 0x96
    2d62:	f00f f88d 	bl	11e80 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    2d66:	2000      	movs	r0, #0
    2d68:	f00e ff7e 	bl	11c68 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    2d6c:	2003      	movs	r0, #3
    2d6e:	f008 fe9b 	bl	baa8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    2d72:	4607      	mov	r7, r0
    2d74:	2800      	cmp	r0, #0
    2d76:	f43f ae60 	beq.w	2a3a <isr_rx+0x12>
	ull_pdu_rx_alloc();
    2d7a:	f008 feb5 	bl	bae8 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    2d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d82:	80fb      	strh	r3, [r7, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    2d84:	2305      	movs	r3, #5
    2d86:	713b      	strb	r3, [r7, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2d88:	2e00      	cmp	r6, #0
    2d8a:	d140      	bne.n	2e0e <isr_rx+0x3e6>
    2d8c:	227f      	movs	r2, #127	; 0x7f
	node_rx->hdr.rx_ftr.direct = dir_report;
    2d8e:	7e7b      	ldrb	r3, [r7, #25]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2d90:	763a      	strb	r2, [r7, #24]
	node_rx->hdr.rx_ftr.direct = dir_report;
    2d92:	f36f 0300 	bfc	r3, #0, #1
    2d96:	767b      	strb	r3, [r7, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    2d98:	4639      	mov	r1, r7
    2d9a:	6838      	ldr	r0, [r7, #0]
    2d9c:	f008 feba 	bl	bb14 <ull_rx_put>
	ull_rx_sched();
    2da0:	f008 fec8 	bl	bb34 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    2da4:	f00e ff5c 	bl	11c60 <radio_pkt_scratch_get>
			pdu_tx->tx_addr = lll->init_addr_type;
    2da8:	7da3      	ldrb	r3, [r4, #22]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    2daa:	7f2a      	ldrb	r2, [r5, #28]
			pdu_tx->tx_addr = lll->init_addr_type;
    2dac:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    2db0:	019b      	lsls	r3, r3, #6
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    2db2:	f3c2 1280 	ubfx	r2, r2, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    2db6:	f043 0303 	orr.w	r3, r3, #3
    2dba:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    2dbe:	7802      	ldrb	r2, [r0, #0]
    2dc0:	f002 0230 	and.w	r2, r2, #48	; 0x30
    2dc4:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    2dc6:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    2dc8:	7003      	strb	r3, [r0, #0]
		pdu_tx = (void *)radio_pkt_scratch_get();
    2dca:	4606      	mov	r6, r0
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    2dcc:	7042      	strb	r2, [r0, #1]
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    2dce:	f104 0118 	add.w	r1, r4, #24
    2dd2:	2206      	movs	r2, #6
    2dd4:	3002      	adds	r0, #2
    2dd6:	f013 fd0c 	bl	167f2 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    2dda:	2206      	movs	r2, #6
    2ddc:	f105 011e 	add.w	r1, r5, #30
    2de0:	f106 0008 	add.w	r0, r6, #8
    2de4:	f013 fd05 	bl	167f2 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    2de8:	4630      	mov	r0, r6
    2dea:	f00e fec7 	bl	11b7c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    2dee:	f00e feff 	bl	11bf0 <radio_is_ready>
    2df2:	bb80      	cbnz	r0, 2e56 <isr_rx+0x42e>
		radio_tmr_end_capture();
    2df4:	f00f f936 	bl	12064 <radio_tmr_end_capture>
		lll->state = 1U;
    2df8:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    2dfa:	4828      	ldr	r0, [pc, #160]	; (2e9c <isr_rx+0x474>)
		lll->state = 1U;
    2dfc:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
    2e00:	4621      	mov	r1, r4
		lll->state = 1U;
    2e02:	75a3      	strb	r3, [r4, #22]
}
    2e04:	b007      	add	sp, #28
    2e06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_isr_set(isr_tx, lll);
    2e0a:	f00e bddb 	b.w	119c4 <radio_isr_set>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    2e0e:	f00e ffed 	bl	11dec <radio_rssi_get>
    2e12:	b2c2      	uxtb	r2, r0
    2e14:	e7bb      	b.n	2d8e <isr_rx+0x366>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
    2e16:	2206      	movs	r2, #6
    2e18:	f105 0124 	add.w	r1, r5, #36	; 0x24
    2e1c:	f104 0018 	add.w	r0, r4, #24
    2e20:	f013 fcd6 	bl	167d0 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
    2e24:	b980      	cbnz	r0, 2e48 <isr_rx+0x420>
		 (pdu_adv_rx->len != 0) &&
    2e26:	7f6a      	ldrb	r2, [r5, #29]
	bool dir_report = false;
    2e28:	4607      	mov	r7, r0
    2e2a:	e72e      	b.n	2c8a <isr_rx+0x262>
		LL_ASSERT(!radio_is_ready());
    2e2c:	4a18      	ldr	r2, [pc, #96]	; (2e90 <isr_rx+0x468>)
    2e2e:	491c      	ldr	r1, [pc, #112]	; (2ea0 <isr_rx+0x478>)
    2e30:	4819      	ldr	r0, [pc, #100]	; (2e98 <isr_rx+0x470>)
    2e32:	f240 43a4 	movw	r3, #1188	; 0x4a4
    2e36:	f013 fa5c 	bl	162f2 <assert_print>
    2e3a:	4040      	eors	r0, r0
    2e3c:	f380 8811 	msr	BASEPRI, r0
    2e40:	f04f 0003 	mov.w	r0, #3
    2e44:	df02      	svc	2
    2e46:	e682      	b.n	2b4e <isr_rx+0x126>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
    2e48:	7da3      	ldrb	r3, [r4, #22]
    2e4a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2e4e:	079b      	lsls	r3, r3, #30
    2e50:	f53f aef0 	bmi.w	2c34 <isr_rx+0x20c>
    2e54:	e6f6      	b.n	2c44 <isr_rx+0x21c>
		LL_ASSERT(!radio_is_ready());
    2e56:	4a0e      	ldr	r2, [pc, #56]	; (2e90 <isr_rx+0x468>)
    2e58:	4911      	ldr	r1, [pc, #68]	; (2ea0 <isr_rx+0x478>)
    2e5a:	480f      	ldr	r0, [pc, #60]	; (2e98 <isr_rx+0x470>)
    2e5c:	f240 5329 	movw	r3, #1321	; 0x529
    2e60:	f013 fa47 	bl	162f2 <assert_print>
    2e64:	4040      	eors	r0, r0
    2e66:	f380 8811 	msr	BASEPRI, r0
    2e6a:	f04f 0003 	mov.w	r0, #3
    2e6e:	df02      	svc	2
    2e70:	e7c0      	b.n	2df4 <isr_rx+0x3cc>
		 (pdu_adv_rx->len != 0) &&
    2e72:	7f6a      	ldrb	r2, [r5, #29]
    2e74:	e709      	b.n	2c8a <isr_rx+0x262>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
    2e76:	2206      	movs	r2, #6
    2e78:	f105 0124 	add.w	r1, r5, #36	; 0x24
    2e7c:	f104 0018 	add.w	r0, r4, #24
    2e80:	f013 fca6 	bl	167d0 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
    2e84:	2800      	cmp	r0, #0
    2e86:	f43f ae1c 	beq.w	2ac2 <isr_rx+0x9a>
    2e8a:	7da2      	ldrb	r2, [r4, #22]
    2e8c:	e6a8      	b.n	2be0 <isr_rx+0x1b8>
    2e8e:	bf00      	nop
    2e90:	0001ad38 	.word	0x0001ad38
    2e94:	0001ad84 	.word	0x0001ad84
    2e98:	0001a580 	.word	0x0001a580
    2e9c:	00010aa9 	.word	0x00010aa9
    2ea0:	0001ad8c 	.word	0x0001ad8c

00002ea4 <start_scan>:
		start_scan();
	}
}

static void start_scan(void)
{
    2ea4:	b530      	push	{r4, r5, lr}
	int err;

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    2ea6:	4d0b      	ldr	r5, [pc, #44]	; (2ed4 <start_scan+0x30>)
    2ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2eaa:	b087      	sub	sp, #28
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    2eac:	ac01      	add	r4, sp, #4
    2eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2eb0:	682b      	ldr	r3, [r5, #0]
    2eb2:	4909      	ldr	r1, [pc, #36]	; (2ed8 <start_scan+0x34>)
    2eb4:	6023      	str	r3, [r4, #0]
    2eb6:	a801      	add	r0, sp, #4
    2eb8:	f002 fe3c 	bl	5b34 <bt_le_scan_start>
	if (err) {
    2ebc:	4601      	mov	r1, r0
    2ebe:	b120      	cbz	r0, 2eca <start_scan+0x26>
		printk("Scanning failed to start (err %d)\n", err);
    2ec0:	4806      	ldr	r0, [pc, #24]	; (2edc <start_scan+0x38>)
    2ec2:	f012 ff00 	bl	15cc6 <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
    2ec6:	b007      	add	sp, #28
    2ec8:	bd30      	pop	{r4, r5, pc}
	printk("Scanning successfully started\n");
    2eca:	4805      	ldr	r0, [pc, #20]	; (2ee0 <start_scan+0x3c>)
    2ecc:	f012 fefb 	bl	15cc6 <printk>
    2ed0:	e7f9      	b.n	2ec6 <start_scan+0x22>
    2ed2:	bf00      	nop
    2ed4:	0001a160 	.word	0x0001a160
    2ed8:	00002f99 	.word	0x00002f99
    2edc:	0001b104 	.word	0x0001b104
    2ee0:	0001b127 	.word	0x0001b127

00002ee4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2ee4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2ee6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2ee8:	b08a      	sub	sp, #40	; 0x28
    2eea:	4604      	mov	r4, r0
    2eec:	460e      	mov	r6, r1
    2eee:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    2ef0:	2b03      	cmp	r3, #3
    2ef2:	d820      	bhi.n	2f36 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    2ef4:	e8df f003 	tbb	[pc, r3]
    2ef8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2efc:	4911      	ldr	r1, [pc, #68]	; (2f44 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2efe:	4628      	mov	r0, r5
    2f00:	f013 fc40 	bl	16784 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2f04:	7863      	ldrb	r3, [r4, #1]
    2f06:	9304      	str	r3, [sp, #16]
    2f08:	78a3      	ldrb	r3, [r4, #2]
    2f0a:	9303      	str	r3, [sp, #12]
    2f0c:	78e3      	ldrb	r3, [r4, #3]
    2f0e:	9302      	str	r3, [sp, #8]
    2f10:	7923      	ldrb	r3, [r4, #4]
    2f12:	9301      	str	r3, [sp, #4]
    2f14:	7963      	ldrb	r3, [r4, #5]
    2f16:	9300      	str	r3, [sp, #0]
    2f18:	4a0b      	ldr	r2, [pc, #44]	; (2f48 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    2f1a:	79a3      	ldrb	r3, [r4, #6]
    2f1c:	9505      	str	r5, [sp, #20]
    2f1e:	211e      	movs	r1, #30
    2f20:	4630      	mov	r0, r6
    2f22:	f012 fedd 	bl	15ce0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    2f26:	b00a      	add	sp, #40	; 0x28
    2f28:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2f2a:	4908      	ldr	r1, [pc, #32]	; (2f4c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    2f2c:	e7e7      	b.n	2efe <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    2f2e:	4908      	ldr	r1, [pc, #32]	; (2f50 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    2f30:	e7e5      	b.n	2efe <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    2f32:	4908      	ldr	r1, [pc, #32]	; (2f54 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    2f34:	e7e3      	b.n	2efe <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2f36:	4a08      	ldr	r2, [pc, #32]	; (2f58 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    2f38:	210a      	movs	r1, #10
    2f3a:	4628      	mov	r0, r5
    2f3c:	f012 fed0 	bl	15ce0 <snprintk>
		break;
    2f40:	e7e0      	b.n	2f04 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    2f42:	bf00      	nop
    2f44:	0001b146 	.word	0x0001b146
    2f48:	0001b16f 	.word	0x0001b16f
    2f4c:	0001b14d 	.word	0x0001b14d
    2f50:	0001b154 	.word	0x0001b154
    2f54:	0001b15e 	.word	0x0001b15e
    2f58:	0001b168 	.word	0x0001b168

00002f5c <disconnected>:

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    2f5c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];

	if (conn != default_conn) {
    2f5e:	4c0c      	ldr	r4, [pc, #48]	; (2f90 <disconnected+0x34>)
    2f60:	6823      	ldr	r3, [r4, #0]
    2f62:	4283      	cmp	r3, r0
{
    2f64:	b089      	sub	sp, #36	; 0x24
    2f66:	460d      	mov	r5, r1
	if (conn != default_conn) {
    2f68:	d110      	bne.n	2f8c <disconnected+0x30>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2f6a:	f014 f8ab 	bl	170c4 <bt_conn_get_dst>
    2f6e:	4669      	mov	r1, sp
    2f70:	f7ff ffb8 	bl	2ee4 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    2f74:	4807      	ldr	r0, [pc, #28]	; (2f94 <disconnected+0x38>)
    2f76:	462a      	mov	r2, r5
    2f78:	4669      	mov	r1, sp
    2f7a:	f012 fea4 	bl	15cc6 <printk>

	bt_conn_unref(default_conn);
    2f7e:	6820      	ldr	r0, [r4, #0]
    2f80:	f014 f869 	bl	17056 <bt_conn_unref>
	default_conn = NULL;
    2f84:	2300      	movs	r3, #0
    2f86:	6023      	str	r3, [r4, #0]

	start_scan();
    2f88:	f7ff ff8c 	bl	2ea4 <start_scan>
}
    2f8c:	b009      	add	sp, #36	; 0x24
    2f8e:	bd30      	pop	{r4, r5, pc}
    2f90:	20000fd8 	.word	0x20000fd8
    2f94:	0001b192 	.word	0x0001b192

00002f98 <device_found>:
{
    2f98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (default_conn) {
    2f9a:	4f18      	ldr	r7, [pc, #96]	; (2ffc <device_found+0x64>)
    2f9c:	683b      	ldr	r3, [r7, #0]
{
    2f9e:	b08f      	sub	sp, #60	; 0x3c
    2fa0:	4605      	mov	r5, r0
    2fa2:	460c      	mov	r4, r1
	if (default_conn) {
    2fa4:	bb3b      	cbnz	r3, 2ff6 <device_found+0x5e>
	if (type != BT_GAP_ADV_TYPE_ADV_IND &&
    2fa6:	2a01      	cmp	r2, #1
    2fa8:	d825      	bhi.n	2ff6 <device_found+0x5e>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    2faa:	a906      	add	r1, sp, #24
    2fac:	f7ff ff9a 	bl	2ee4 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
    2fb0:	4622      	mov	r2, r4
    2fb2:	4813      	ldr	r0, [pc, #76]	; (3000 <device_found+0x68>)
    2fb4:	a906      	add	r1, sp, #24
    2fb6:	f012 fe86 	bl	15cc6 <printk>
	if (rssi < -70) {
    2fba:	3446      	adds	r4, #70	; 0x46
    2fbc:	db1b      	blt.n	2ff6 <device_found+0x5e>
	if (bt_le_scan_stop()) {
    2fbe:	f002 fe39 	bl	5c34 <bt_le_scan_stop>
    2fc2:	b9c0      	cbnz	r0, 2ff6 <device_found+0x5e>
	err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    2fc4:	4e0f      	ldr	r6, [pc, #60]	; (3004 <device_found+0x6c>)
    2fc6:	f106 0314 	add.w	r3, r6, #20
    2fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2fcc:	ac02      	add	r4, sp, #8
    2fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				BT_LE_CONN_PARAM_DEFAULT, &default_conn);
    2fd2:	6a70      	ldr	r0, [r6, #36]	; 0x24
    2fd4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2fd6:	466b      	mov	r3, sp
    2fd8:	c303      	stmia	r3!, {r0, r1}
	err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    2fda:	466a      	mov	r2, sp
    2fdc:	463b      	mov	r3, r7
    2fde:	4621      	mov	r1, r4
    2fe0:	4628      	mov	r0, r5
    2fe2:	f003 f9b7 	bl	6354 <bt_conn_le_create>
	if (err) {
    2fe6:	4602      	mov	r2, r0
    2fe8:	b128      	cbz	r0, 2ff6 <device_found+0x5e>
		printk("Create conn to %s failed (%u)\n", addr_str, err);
    2fea:	4807      	ldr	r0, [pc, #28]	; (3008 <device_found+0x70>)
    2fec:	a906      	add	r1, sp, #24
    2fee:	f012 fe6a 	bl	15cc6 <printk>
		start_scan();
    2ff2:	f7ff ff57 	bl	2ea4 <start_scan>
}
    2ff6:	b00f      	add	sp, #60	; 0x3c
    2ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ffa:	bf00      	nop
    2ffc:	20000fd8 	.word	0x20000fd8
    3000:	0001b1b4 	.word	0x0001b1b4
    3004:	0001a160 	.word	0x0001a160
    3008:	0001b1d0 	.word	0x0001b1d0

0000300c <connected>:
{
    300c:	b570      	push	{r4, r5, r6, lr}
    300e:	b088      	sub	sp, #32
    3010:	460c      	mov	r4, r1
    3012:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    3014:	f014 f856 	bl	170c4 <bt_conn_get_dst>
    3018:	4669      	mov	r1, sp
    301a:	f7ff ff63 	bl	2ee4 <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
    301e:	4e0e      	ldr	r6, [pc, #56]	; (3058 <connected+0x4c>)
    3020:	b16c      	cbz	r4, 303e <connected+0x32>
		printk("Failed to connect to %s (%u)\n", addr, err);
    3022:	480e      	ldr	r0, [pc, #56]	; (305c <connected+0x50>)
    3024:	4622      	mov	r2, r4
    3026:	4669      	mov	r1, sp
    3028:	f012 fe4d 	bl	15cc6 <printk>
		bt_conn_unref(default_conn);
    302c:	6830      	ldr	r0, [r6, #0]
    302e:	f014 f812 	bl	17056 <bt_conn_unref>
		default_conn = NULL;
    3032:	2300      	movs	r3, #0
    3034:	6033      	str	r3, [r6, #0]
		start_scan();
    3036:	f7ff ff35 	bl	2ea4 <start_scan>
}
    303a:	b008      	add	sp, #32
    303c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn != default_conn) {
    303e:	6834      	ldr	r4, [r6, #0]
    3040:	42ac      	cmp	r4, r5
    3042:	d1fa      	bne.n	303a <connected+0x2e>
	printk("Connected: %s\n", addr);
    3044:	4669      	mov	r1, sp
    3046:	4806      	ldr	r0, [pc, #24]	; (3060 <connected+0x54>)
    3048:	f012 fe3d 	bl	15cc6 <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    304c:	2113      	movs	r1, #19
    304e:	4620      	mov	r0, r4
    3050:	f014 f83a 	bl	170c8 <bt_conn_disconnect>
    3054:	e7f1      	b.n	303a <connected+0x2e>
    3056:	bf00      	nop
    3058:	20000fd8 	.word	0x20000fd8
    305c:	0001b1ef 	.word	0x0001b1ef
    3060:	0001b20d 	.word	0x0001b20d

00003064 <main>:
	.connected = connected,
	.disconnected = disconnected,
};

void main(void)
{
    3064:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
    3068:	491b      	ldr	r1, [pc, #108]	; (30d8 <main+0x74>)
    306a:	481c      	ldr	r0, [pc, #112]	; (30dc <main+0x78>)
    306c:	f012 fe2b 	bl	15cc6 <printk>

    console_getline_init();
    3070:	f000 fd32 	bl	3ad8 <console_getline_init>
	int err = bt_enable(NULL);
    3074:	2000      	movs	r0, #0
    3076:	f002 f99b 	bl	53b0 <bt_enable>

    if (err) {
    307a:	4601      	mov	r1, r0
    307c:	b128      	cbz	r0, 308a <main+0x26>
		printk("Bluetooth init failed (err %d)\n", err);
    307e:	4818      	ldr	r0, [pc, #96]	; (30e0 <main+0x7c>)
        printk("Sending '%s'...", line);
        int err = bt_gatt_write_without_response(default_conn, 1234, line, strlen(line), 0);

            printk("Sent with error %d",  err);
    }
    3080:	b004      	add	sp, #16
    3082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    3086:	f012 be1e 	b.w	15cc6 <printk>
	printk("Bluetooth initialized\n");
    308a:	4816      	ldr	r0, [pc, #88]	; (30e4 <main+0x80>)
        printk(">");
    308c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 30e8 <main+0x84>
        printk("Sending '%s'...", line);
    3090:	4f16      	ldr	r7, [pc, #88]	; (30ec <main+0x88>)
        int err = bt_gatt_write_without_response(default_conn, 1234, line, strlen(line), 0);
    3092:	4e17      	ldr	r6, [pc, #92]	; (30f0 <main+0x8c>)
	printk("Bluetooth initialized\n");
    3094:	f012 fe17 	bl	15cc6 <printk>
	start_scan();
    3098:	f7ff ff04 	bl	2ea4 <start_scan>
        printk(">");
    309c:	4640      	mov	r0, r8
    309e:	f012 fe12 	bl	15cc6 <printk>
        char* line = console_getline();
    30a2:	f000 fd01 	bl	3aa8 <console_getline>
    30a6:	4604      	mov	r4, r0
        printk("Sending '%s'...", line);
    30a8:	4601      	mov	r1, r0
    30aa:	4638      	mov	r0, r7
    30ac:	f012 fe0b 	bl	15cc6 <printk>
        int err = bt_gatt_write_without_response(default_conn, 1234, line, strlen(line), 0);
    30b0:	4620      	mov	r0, r4
    30b2:	6835      	ldr	r5, [r6, #0]
    30b4:	f013 fb70 	bl	16798 <strlen>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
    30b8:	2200      	movs	r2, #0
    30ba:	e9cd 2201 	strd	r2, r2, [sp, #4]
    30be:	9200      	str	r2, [sp, #0]
    30c0:	b283      	uxth	r3, r0
    30c2:	4622      	mov	r2, r4
    30c4:	f240 41d2 	movw	r1, #1234	; 0x4d2
    30c8:	4628      	mov	r0, r5
    30ca:	f015 fb1f 	bl	1870c <bt_gatt_write_without_response_cb>
    30ce:	4601      	mov	r1, r0
            printk("Sent with error %d",  err);
    30d0:	4808      	ldr	r0, [pc, #32]	; (30f4 <main+0x90>)
    30d2:	f012 fdf8 	bl	15cc6 <printk>
    while(true) {
    30d6:	e7e1      	b.n	309c <main+0x38>
    30d8:	0001b21c 	.word	0x0001b21c
    30dc:	0001b230 	.word	0x0001b230
    30e0:	0001b241 	.word	0x0001b241
    30e4:	0001b261 	.word	0x0001b261
    30e8:	0001b278 	.word	0x0001b278
    30ec:	0001b27a 	.word	0x0001b27a
    30f0:	20000fd8 	.word	0x20000fd8
    30f4:	0001b28a 	.word	0x0001b28a

000030f8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    30f8:	680b      	ldr	r3, [r1, #0]
    30fa:	3301      	adds	r3, #1
    30fc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    30fe:	4b01      	ldr	r3, [pc, #4]	; (3104 <char_out+0xc>)
    3100:	681b      	ldr	r3, [r3, #0]
    3102:	4718      	bx	r3
    3104:	20000160 	.word	0x20000160

00003108 <__printk_hook_install>:
	_char_out = fn;
    3108:	4b01      	ldr	r3, [pc, #4]	; (3110 <__printk_hook_install+0x8>)
    310a:	6018      	str	r0, [r3, #0]
}
    310c:	4770      	bx	lr
    310e:	bf00      	nop
    3110:	20000160 	.word	0x20000160

00003114 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    3114:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    3116:	2400      	movs	r4, #0
{
    3118:	4602      	mov	r2, r0
    311a:	460b      	mov	r3, r1
 * returned from invoking @p out.
 */
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    311c:	9400      	str	r4, [sp, #0]
    311e:	a903      	add	r1, sp, #12
    3120:	4802      	ldr	r0, [pc, #8]	; (312c <vprintk+0x18>)
		struct out_context ctx = { 0 };
    3122:	9403      	str	r4, [sp, #12]
    3124:	f000 f8fa 	bl	331c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    3128:	b004      	add	sp, #16
    312a:	bd10      	pop	{r4, pc}
    312c:	000030f9 	.word	0x000030f9

00003130 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3130:	b530      	push	{r4, r5, lr}
    3132:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    3134:	2500      	movs	r5, #0
    3136:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    313a:	4604      	mov	r4, r0
    313c:	9500      	str	r5, [sp, #0]
    313e:	a903      	add	r1, sp, #12
    3140:	4805      	ldr	r0, [pc, #20]	; (3158 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    3142:	9505      	str	r5, [sp, #20]
    3144:	f000 f8ea 	bl	331c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    3148:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    314c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    314e:	bfb8      	it	lt
    3150:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3152:	b007      	add	sp, #28
    3154:	bd30      	pop	{r4, r5, pc}
    3156:	bf00      	nop
    3158:	00015ca1 	.word	0x00015ca1

0000315c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    315c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3160:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3164:	f019 0808 	ands.w	r8, r9, #8
{
    3168:	4604      	mov	r4, r0
    316a:	4693      	mov	fp, r2
	if (processing) {
    316c:	d00d      	beq.n	318a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    316e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3170:	bf0c      	ite	eq
    3172:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3176:	f049 0920 	orrne.w	r9, r9, #32
    317a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    317e:	f38b 8811 	msr	BASEPRI, fp
    3182:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    318a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    318e:	2902      	cmp	r1, #2
    3190:	d107      	bne.n	31a2 <process_event+0x46>
			evt = process_recheck(mgr);
    3192:	4620      	mov	r0, r4
    3194:	f012 fdb1 	bl	15cfa <process_recheck>
		if (evt == EVT_NOP) {
    3198:	2800      	cmp	r0, #0
    319a:	d0f0      	beq.n	317e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    319c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    319e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    31a0:	d14e      	bne.n	3240 <process_event+0xe4>
			res = mgr->last_res;
    31a2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    31a4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    31a6:	2f00      	cmp	r7, #0
    31a8:	da15      	bge.n	31d6 <process_event+0x7a>
		*clients = mgr->clients;
    31aa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31ac:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    31b0:	e9c4 8800 	strd	r8, r8, [r4]
    31b4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    31b8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    31ba:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    31bc:	8b21      	ldrh	r1, [r4, #24]
    31be:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    31c2:	45ca      	cmp	sl, r9
    31c4:	d002      	beq.n	31cc <process_event+0x70>
		if (do_monitors
    31c6:	68a3      	ldr	r3, [r4, #8]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d15a      	bne.n	3282 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    31cc:	b90d      	cbnz	r5, 31d2 <process_event+0x76>
		    || (transit != NULL)) {
    31ce:	2e00      	cmp	r6, #0
    31d0:	d071      	beq.n	32b6 <process_event+0x15a>
    31d2:	2300      	movs	r3, #0
    31d4:	e056      	b.n	3284 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    31d6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    31da:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    31dc:	2a01      	cmp	r2, #1
    31de:	d81e      	bhi.n	321e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31e0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    31e4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    31e6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    31e8:	b289      	uxth	r1, r1
    31ea:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    31ee:	d10a      	bne.n	3206 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    31f0:	b13d      	cbz	r5, 3202 <process_event+0xa6>
    31f2:	8b63      	ldrh	r3, [r4, #26]
    31f4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    31f6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    31f8:	3301      	adds	r3, #1
    31fa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    31fc:	2a00      	cmp	r2, #0
    31fe:	d1fa      	bne.n	31f6 <process_event+0x9a>
    3200:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3202:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3206:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3208:	4620      	mov	r0, r4
    320a:	f012 fd76 	bl	15cfa <process_recheck>
    320e:	4606      	mov	r6, r0
    3210:	2800      	cmp	r0, #0
    3212:	d0d3      	beq.n	31bc <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3214:	8b23      	ldrh	r3, [r4, #24]
    3216:	f043 0320 	orr.w	r3, r3, #32
    321a:	8323      	strh	r3, [r4, #24]
    321c:	e7cd      	b.n	31ba <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    321e:	2b04      	cmp	r3, #4
    3220:	d10c      	bne.n	323c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3222:	f021 0107 	bic.w	r1, r1, #7
    3226:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3228:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    322a:	4620      	mov	r0, r4
    322c:	f012 fd65 	bl	15cfa <process_recheck>
    3230:	4605      	mov	r5, r0
    3232:	2800      	cmp	r0, #0
    3234:	d0c1      	beq.n	31ba <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3236:	f041 0120 	orr.w	r1, r1, #32
    323a:	8321      	strh	r1, [r4, #24]
    323c:	2500      	movs	r5, #0
    323e:	e7bc      	b.n	31ba <process_event+0x5e>
		} else if (evt == EVT_START) {
    3240:	2803      	cmp	r0, #3
    3242:	d109      	bne.n	3258 <process_event+0xfc>
			transit = mgr->transitions->start;
    3244:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3246:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    324a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    324c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    3250:	8323      	strh	r3, [r4, #24]
}
    3252:	2500      	movs	r5, #0
		res = 0;
    3254:	462f      	mov	r7, r5
    3256:	e7b1      	b.n	31bc <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3258:	2804      	cmp	r0, #4
    325a:	d106      	bne.n	326a <process_event+0x10e>
			transit = mgr->transitions->stop;
    325c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    325e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    3262:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3264:	f043 0304 	orr.w	r3, r3, #4
    3268:	e7f2      	b.n	3250 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    326a:	2805      	cmp	r0, #5
    326c:	d106      	bne.n	327c <process_event+0x120>
			transit = mgr->transitions->reset;
    326e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3270:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    3274:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3276:	f043 0305 	orr.w	r3, r3, #5
    327a:	e7e9      	b.n	3250 <process_event+0xf4>
    327c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    327e:	462e      	mov	r6, r5
    3280:	e7e8      	b.n	3254 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    3282:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3284:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3288:	8321      	strh	r1, [r4, #24]
    328a:	f38b 8811 	msr	BASEPRI, fp
    328e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3292:	b9fb      	cbnz	r3, 32d4 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    3294:	bb85      	cbnz	r5, 32f8 <process_event+0x19c>
			if (transit != NULL) {
    3296:	b116      	cbz	r6, 329e <process_event+0x142>
				transit(mgr, transition_complete);
    3298:	491f      	ldr	r1, [pc, #124]	; (3318 <process_event+0x1bc>)
    329a:	4620      	mov	r0, r4
    329c:	47b0      	blx	r6
	__asm__ volatile(
    329e:	f04f 0320 	mov.w	r3, #32
    32a2:	f3ef 8b11 	mrs	fp, BASEPRI
    32a6:	f383 8812 	msr	BASEPRI_MAX, r3
    32aa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    32ae:	8b23      	ldrh	r3, [r4, #24]
    32b0:	f023 0308 	bic.w	r3, r3, #8
    32b4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    32b6:	8b23      	ldrh	r3, [r4, #24]
    32b8:	06da      	lsls	r2, r3, #27
    32ba:	d525      	bpl.n	3308 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    32bc:	f023 0310 	bic.w	r3, r3, #16
    32c0:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    32c2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    32c4:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    32c8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    32cc:	2900      	cmp	r1, #0
    32ce:	f47f af5e 	bne.w	318e <process_event+0x32>
out:
    32d2:	e754      	b.n	317e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    32d4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    32d6:	2900      	cmp	r1, #0
    32d8:	d0dc      	beq.n	3294 <process_event+0x138>
	return node->next;
    32da:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    32de:	f8d1 b004 	ldr.w	fp, [r1, #4]
    32e2:	463b      	mov	r3, r7
    32e4:	4652      	mov	r2, sl
    32e6:	4620      	mov	r0, r4
    32e8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    32ea:	f1b9 0f00 	cmp.w	r9, #0
    32ee:	d0d1      	beq.n	3294 <process_event+0x138>
    32f0:	4649      	mov	r1, r9
    32f2:	f8d9 9000 	ldr.w	r9, [r9]
    32f6:	e7f2      	b.n	32de <process_event+0x182>
    32f8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    32fa:	463b      	mov	r3, r7
    32fc:	4652      	mov	r2, sl
    32fe:	4620      	mov	r0, r4
    3300:	682d      	ldr	r5, [r5, #0]
    3302:	f012 fd16 	bl	15d32 <notify_one>
    3306:	e7c5      	b.n	3294 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3308:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    330c:	bf1e      	ittt	ne
    330e:	f023 0320 	bicne.w	r3, r3, #32
    3312:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3314:	2102      	movne	r1, #2
    3316:	e7d5      	b.n	32c4 <process_event+0x168>
    3318:	00015d5f 	.word	0x00015d5f

0000331c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3320:	b091      	sub	sp, #68	; 0x44
    3322:	468b      	mov	fp, r1
    3324:	9002      	str	r0, [sp, #8]
    3326:	4692      	mov	sl, r2
    3328:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    332a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    332c:	f89a 0000 	ldrb.w	r0, [sl]
    3330:	b908      	cbnz	r0, 3336 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3332:	4628      	mov	r0, r5
    3334:	e363      	b.n	39fe <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
    3336:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    3338:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    333c:	d007      	beq.n	334e <z_cbvprintf_impl+0x32>
			OUTC('%');
    333e:	9b02      	ldr	r3, [sp, #8]
    3340:	4659      	mov	r1, fp
    3342:	4798      	blx	r3
    3344:	2800      	cmp	r0, #0
    3346:	f2c0 835a 	blt.w	39fe <z_cbvprintf_impl+0x6e2>
    334a:	3501      	adds	r5, #1
			break;
    334c:	e212      	b.n	3774 <z_cbvprintf_impl+0x458>
		} state = {
    334e:	2218      	movs	r2, #24
    3350:	2100      	movs	r1, #0
    3352:	a80a      	add	r0, sp, #40	; 0x28
    3354:	f013 fa58 	bl	16808 <memset>
	if (*sp == '%') {
    3358:	f89a 3001 	ldrb.w	r3, [sl, #1]
    335c:	2b25      	cmp	r3, #37	; 0x25
    335e:	d078      	beq.n	3452 <z_cbvprintf_impl+0x136>
    3360:	2200      	movs	r2, #0
    3362:	4610      	mov	r0, r2
    3364:	4696      	mov	lr, r2
    3366:	4694      	mov	ip, r2
    3368:	4616      	mov	r6, r2
    336a:	4639      	mov	r1, r7
		switch (*sp) {
    336c:	f817 3b01 	ldrb.w	r3, [r7], #1
    3370:	2b2b      	cmp	r3, #43	; 0x2b
    3372:	f000 809d 	beq.w	34b0 <z_cbvprintf_impl+0x194>
    3376:	f200 8094 	bhi.w	34a2 <z_cbvprintf_impl+0x186>
    337a:	2b20      	cmp	r3, #32
    337c:	f000 809b 	beq.w	34b6 <z_cbvprintf_impl+0x19a>
    3380:	2b23      	cmp	r3, #35	; 0x23
    3382:	f000 809b 	beq.w	34bc <z_cbvprintf_impl+0x1a0>
    3386:	b12e      	cbz	r6, 3394 <z_cbvprintf_impl+0x78>
    3388:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    338c:	f046 0604 	orr.w	r6, r6, #4
    3390:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    3394:	f1bc 0f00 	cmp.w	ip, #0
    3398:	d005      	beq.n	33a6 <z_cbvprintf_impl+0x8a>
    339a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    339e:	f046 0608 	orr.w	r6, r6, #8
    33a2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    33a6:	f1be 0f00 	cmp.w	lr, #0
    33aa:	d005      	beq.n	33b8 <z_cbvprintf_impl+0x9c>
    33ac:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    33b0:	f046 0610 	orr.w	r6, r6, #16
    33b4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    33b8:	b128      	cbz	r0, 33c6 <z_cbvprintf_impl+0xaa>
    33ba:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    33be:	f040 0020 	orr.w	r0, r0, #32
    33c2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    33c6:	b12a      	cbz	r2, 33d4 <z_cbvprintf_impl+0xb8>
    33c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    33cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    33d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    33d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    33d8:	f002 0044 	and.w	r0, r2, #68	; 0x44
    33dc:	2844      	cmp	r0, #68	; 0x44
    33de:	d103      	bne.n	33e8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    33e0:	f36f 1286 	bfc	r2, #6, #1
    33e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    33e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    33ec:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    33ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    33f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    33f6:	d17b      	bne.n	34f0 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
    33f8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    33fc:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    3400:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    3402:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    3406:	781a      	ldrb	r2, [r3, #0]
    3408:	2a2e      	cmp	r2, #46	; 0x2e
    340a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    340e:	bf0c      	ite	eq
    3410:	2101      	moveq	r1, #1
    3412:	2100      	movne	r1, #0
    3414:	f361 0241 	bfi	r2, r1, #1, #1
    3418:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    341c:	d174      	bne.n	3508 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
    341e:	785a      	ldrb	r2, [r3, #1]
    3420:	2a2a      	cmp	r2, #42	; 0x2a
    3422:	d06a      	beq.n	34fa <z_cbvprintf_impl+0x1de>
	++sp;
    3424:	3301      	adds	r3, #1
	size_t val = 0;
    3426:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    3428:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    342a:	4618      	mov	r0, r3
    342c:	f810 2b01 	ldrb.w	r2, [r0], #1
    3430:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3434:	2f09      	cmp	r7, #9
    3436:	f240 808e 	bls.w	3556 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    343a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    343e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    3440:	f3c2 0040 	ubfx	r0, r2, #1, #1
    3444:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    3448:	f361 0241 	bfi	r2, r1, #1, #1
    344c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    3450:	e05a      	b.n	3508 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
    3452:	f10a 0702 	add.w	r7, sl, #2
    3456:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    345a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    345e:	07d9      	lsls	r1, r3, #31
    3460:	f140 8149 	bpl.w	36f6 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
    3464:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    3468:	f1b9 0f00 	cmp.w	r9, #0
    346c:	da07      	bge.n	347e <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
    346e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    3472:	f042 0204 	orr.w	r2, r2, #4
    3476:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    347a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    347e:	075a      	lsls	r2, r3, #29
    3480:	f140 8142 	bpl.w	3708 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
    3484:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    3488:	f1b8 0f00 	cmp.w	r8, #0
    348c:	f280 8141 	bge.w	3712 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
    3490:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3494:	f36f 0341 	bfc	r3, #1, #1
    3498:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    349c:	f04f 38ff 	mov.w	r8, #4294967295
    34a0:	e137      	b.n	3712 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
    34a2:	2b2d      	cmp	r3, #45	; 0x2d
    34a4:	d00c      	beq.n	34c0 <z_cbvprintf_impl+0x1a4>
    34a6:	2b30      	cmp	r3, #48	; 0x30
    34a8:	f47f af6d 	bne.w	3386 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
    34ac:	2201      	movs	r2, #1
	} while (loop);
    34ae:	e75c      	b.n	336a <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
    34b0:	f04f 0c01 	mov.w	ip, #1
    34b4:	e759      	b.n	336a <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
    34b6:	f04f 0e01 	mov.w	lr, #1
    34ba:	e756      	b.n	336a <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
    34bc:	2001      	movs	r0, #1
    34be:	e754      	b.n	336a <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    34c0:	2601      	movs	r6, #1
    34c2:	e752      	b.n	336a <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
    34c4:	fb0c 0202 	mla	r2, ip, r2, r0
    34c8:	3a30      	subs	r2, #48	; 0x30
    34ca:	4633      	mov	r3, r6
    34cc:	461e      	mov	r6, r3
    34ce:	f816 0b01 	ldrb.w	r0, [r6], #1
    34d2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    34d6:	2f09      	cmp	r7, #9
    34d8:	d9f4      	bls.n	34c4 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
    34da:	4299      	cmp	r1, r3
    34dc:	d093      	beq.n	3406 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    34de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    34e2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    34e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    34e6:	f362 0141 	bfi	r1, r2, #1, #1
    34ea:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    34ee:	e78a      	b.n	3406 <z_cbvprintf_impl+0xea>
    34f0:	460b      	mov	r3, r1
	size_t val = 0;
    34f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    34f4:	f04f 0c0a 	mov.w	ip, #10
    34f8:	e7e8      	b.n	34cc <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
    34fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    34fe:	f042 0204 	orr.w	r2, r2, #4
    3502:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    3506:	3302      	adds	r3, #2
	switch (*sp) {
    3508:	461f      	mov	r7, r3
    350a:	f817 2b01 	ldrb.w	r2, [r7], #1
    350e:	2a6c      	cmp	r2, #108	; 0x6c
    3510:	d041      	beq.n	3596 <z_cbvprintf_impl+0x27a>
    3512:	d825      	bhi.n	3560 <z_cbvprintf_impl+0x244>
    3514:	2a68      	cmp	r2, #104	; 0x68
    3516:	d02b      	beq.n	3570 <z_cbvprintf_impl+0x254>
    3518:	2a6a      	cmp	r2, #106	; 0x6a
    351a:	d046      	beq.n	35aa <z_cbvprintf_impl+0x28e>
    351c:	2a4c      	cmp	r2, #76	; 0x4c
    351e:	d04c      	beq.n	35ba <z_cbvprintf_impl+0x29e>
    3520:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    3522:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    3526:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    352a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    352e:	2a78      	cmp	r2, #120	; 0x78
    3530:	f200 80d9 	bhi.w	36e6 <z_cbvprintf_impl+0x3ca>
    3534:	2a57      	cmp	r2, #87	; 0x57
    3536:	d84d      	bhi.n	35d4 <z_cbvprintf_impl+0x2b8>
    3538:	2a41      	cmp	r2, #65	; 0x41
    353a:	d003      	beq.n	3544 <z_cbvprintf_impl+0x228>
    353c:	3a45      	subs	r2, #69	; 0x45
    353e:	2a02      	cmp	r2, #2
    3540:	f200 80d1 	bhi.w	36e6 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    3544:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3548:	2204      	movs	r2, #4
    354a:	f362 0302 	bfi	r3, r2, #0, #3
    354e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    3552:	2301      	movs	r3, #1
			break;
    3554:	e09e      	b.n	3694 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
    3556:	fb06 2101 	mla	r1, r6, r1, r2
    355a:	3930      	subs	r1, #48	; 0x30
    355c:	4603      	mov	r3, r0
    355e:	e764      	b.n	342a <z_cbvprintf_impl+0x10e>
	switch (*sp) {
    3560:	2a74      	cmp	r2, #116	; 0x74
    3562:	d026      	beq.n	35b2 <z_cbvprintf_impl+0x296>
    3564:	2a7a      	cmp	r2, #122	; 0x7a
    3566:	d1db      	bne.n	3520 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
    3568:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    356c:	2206      	movs	r2, #6
    356e:	e00d      	b.n	358c <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
    3570:	785a      	ldrb	r2, [r3, #1]
    3572:	2a68      	cmp	r2, #104	; 0x68
    3574:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    3578:	d106      	bne.n	3588 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
    357a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    357c:	f361 02c6 	bfi	r2, r1, #3, #4
    3580:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    3584:	1c9f      	adds	r7, r3, #2
    3586:	e7cc      	b.n	3522 <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
    3588:	4613      	mov	r3, r2
    358a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    358c:	f362 03c6 	bfi	r3, r2, #3, #4
    3590:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    3594:	e7c5      	b.n	3522 <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
    3596:	785a      	ldrb	r2, [r3, #1]
    3598:	2a6c      	cmp	r2, #108	; 0x6c
    359a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    359e:	d101      	bne.n	35a4 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
    35a0:	2104      	movs	r1, #4
    35a2:	e7eb      	b.n	357c <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
    35a4:	4613      	mov	r3, r2
    35a6:	2203      	movs	r2, #3
    35a8:	e7f0      	b.n	358c <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
    35aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    35ae:	2205      	movs	r2, #5
    35b0:	e7ec      	b.n	358c <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
    35b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    35b6:	2207      	movs	r2, #7
    35b8:	e7e8      	b.n	358c <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
    35ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    35be:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    35c2:	f023 0302 	bic.w	r3, r3, #2
    35c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    35ca:	f043 0302 	orr.w	r3, r3, #2
    35ce:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    35d2:	e7a6      	b.n	3522 <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
    35d4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    35d8:	2920      	cmp	r1, #32
    35da:	f200 8084 	bhi.w	36e6 <z_cbvprintf_impl+0x3ca>
    35de:	a001      	add	r0, pc, #4	; (adr r0, 35e4 <z_cbvprintf_impl+0x2c8>)
    35e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    35e4:	000036a9 	.word	0x000036a9
    35e8:	000036e7 	.word	0x000036e7
    35ec:	000036e7 	.word	0x000036e7
    35f0:	000036e7 	.word	0x000036e7
    35f4:	000036e7 	.word	0x000036e7
    35f8:	000036e7 	.word	0x000036e7
    35fc:	000036e7 	.word	0x000036e7
    3600:	000036e7 	.word	0x000036e7
    3604:	000036e7 	.word	0x000036e7
    3608:	00003545 	.word	0x00003545
    360c:	000036e7 	.word	0x000036e7
    3610:	000036a9 	.word	0x000036a9
    3614:	00003669 	.word	0x00003669
    3618:	00003545 	.word	0x00003545
    361c:	00003545 	.word	0x00003545
    3620:	00003545 	.word	0x00003545
    3624:	000036e7 	.word	0x000036e7
    3628:	00003669 	.word	0x00003669
    362c:	000036e7 	.word	0x000036e7
    3630:	000036e7 	.word	0x000036e7
    3634:	000036e7 	.word	0x000036e7
    3638:	000036e7 	.word	0x000036e7
    363c:	000036b1 	.word	0x000036b1
    3640:	000036a9 	.word	0x000036a9
    3644:	000036cd 	.word	0x000036cd
    3648:	000036e7 	.word	0x000036e7
    364c:	000036e7 	.word	0x000036e7
    3650:	000036cd 	.word	0x000036cd
    3654:	000036e7 	.word	0x000036e7
    3658:	000036a9 	.word	0x000036a9
    365c:	000036e7 	.word	0x000036e7
    3660:	000036e7 	.word	0x000036e7
    3664:	000036a9 	.word	0x000036a9
		conv->specifier_cat = SPECIFIER_SINT;
    3668:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    366c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    366e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    3672:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3676:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3678:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    367c:	bf02      	ittt	eq
    367e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    3682:	f041 0101 	orreq.w	r1, r1, #1
    3686:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    368a:	2a63      	cmp	r2, #99	; 0x63
    368c:	d131      	bne.n	36f2 <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    368e:	3b00      	subs	r3, #0
    3690:	bf18      	it	ne
    3692:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3694:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    3698:	f3c2 0140 	ubfx	r1, r2, #1, #1
    369c:	430b      	orrs	r3, r1
    369e:	f363 0241 	bfi	r2, r3, #1, #1
    36a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    36a6:	e6d8      	b.n	345a <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    36a8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    36ac:	2002      	movs	r0, #2
    36ae:	e7de      	b.n	366e <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    36b0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    36b4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    36b8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    36bc:	2103      	movs	r1, #3
    36be:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    36c2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    36c4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    36c8:	4143      	adcs	r3, r0
    36ca:	e7e3      	b.n	3694 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    36cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    36d0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    36d2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    36d6:	f361 0202 	bfi	r2, r1, #0, #3
    36da:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    36de:	bf14      	ite	ne
    36e0:	2301      	movne	r3, #1
    36e2:	2300      	moveq	r3, #0
    36e4:	e7d6      	b.n	3694 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
    36e6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    36ea:	f043 0301 	orr.w	r3, r3, #1
    36ee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    36f2:	2300      	movs	r3, #0
    36f4:	e7ce      	b.n	3694 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
    36f6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    36fa:	2a00      	cmp	r2, #0
			width = conv->width_value;
    36fc:	bfb4      	ite	lt
    36fe:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    3702:	f04f 39ff 	movge.w	r9, #4294967295
    3706:	e6ba      	b.n	347e <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
    3708:	079b      	lsls	r3, r3, #30
    370a:	f57f aec7 	bpl.w	349c <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
    370e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    3712:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    3716:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3718:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    371c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    3720:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3724:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3726:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    372a:	d135      	bne.n	3798 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
    372c:	1ecb      	subs	r3, r1, #3
    372e:	2b04      	cmp	r3, #4
    3730:	d822      	bhi.n	3778 <z_cbvprintf_impl+0x45c>
    3732:	e8df f003 	tbb	[pc, r3]
    3736:	0903      	.short	0x0903
    3738:	2109      	.short	0x2109
    373a:	21          	.byte	0x21
    373b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    373c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    3740:	17da      	asrs	r2, r3, #31
    3742:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    3746:	e006      	b.n	3756 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    3748:	3407      	adds	r4, #7
    374a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    374e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    3752:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    3756:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    375a:	f013 0603 	ands.w	r6, r3, #3
    375e:	d059      	beq.n	3814 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
    3760:	9802      	ldr	r0, [sp, #8]
    3762:	463b      	mov	r3, r7
    3764:	4652      	mov	r2, sl
    3766:	4659      	mov	r1, fp
    3768:	f012 fdad 	bl	162c6 <outs>
    376c:	2800      	cmp	r0, #0
    376e:	f2c0 8146 	blt.w	39fe <z_cbvprintf_impl+0x6e2>
    3772:	4405      	add	r5, r0
			continue;
    3774:	46ba      	mov	sl, r7
    3776:	e5d9      	b.n	332c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3778:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    377c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    377e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    3782:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3786:	d102      	bne.n	378e <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
    3788:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    378c:	e7d8      	b.n	3740 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
    378e:	2902      	cmp	r1, #2
    3790:	d1e1      	bne.n	3756 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
    3792:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    3796:	e7d3      	b.n	3740 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3798:	2b02      	cmp	r3, #2
    379a:	d129      	bne.n	37f0 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
    379c:	1ecb      	subs	r3, r1, #3
    379e:	2b04      	cmp	r3, #4
    37a0:	d813      	bhi.n	37ca <z_cbvprintf_impl+0x4ae>
    37a2:	e8df f003 	tbb	[pc, r3]
    37a6:	0a03      	.short	0x0a03
    37a8:	120a      	.short	0x120a
    37aa:	12          	.byte	0x12
    37ab:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    37ac:	6822      	ldr	r2, [r4, #0]
    37ae:	920a      	str	r2, [sp, #40]	; 0x28
    37b0:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    37b2:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    37b4:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    37b6:	4604      	mov	r4, r0
    37b8:	e7cd      	b.n	3756 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
    37ba:	1de0      	adds	r0, r4, #7
    37bc:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    37c0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    37c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    37c8:	e7f5      	b.n	37b6 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
    37ca:	f854 3b04 	ldr.w	r3, [r4], #4
    37ce:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    37d0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    37d2:	f04f 0300 	mov.w	r3, #0
    37d6:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    37d8:	d105      	bne.n	37e6 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
    37da:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    37de:	930a      	str	r3, [sp, #40]	; 0x28
    37e0:	2300      	movs	r3, #0
    37e2:	930b      	str	r3, [sp, #44]	; 0x2c
    37e4:	e7b7      	b.n	3756 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
    37e6:	2902      	cmp	r1, #2
    37e8:	d1b5      	bne.n	3756 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
    37ea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    37ee:	e7f6      	b.n	37de <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
    37f0:	2b04      	cmp	r3, #4
    37f2:	d109      	bne.n	3808 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    37f4:	1de3      	adds	r3, r4, #7
    37f6:	f023 0307 	bic.w	r3, r3, #7
    37fa:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    37fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3802:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3806:	e7a6      	b.n	3756 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3808:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    380a:	bf04      	itt	eq
    380c:	f854 3b04 	ldreq.w	r3, [r4], #4
    3810:	930a      	streq	r3, [sp, #40]	; 0x28
    3812:	e7a0      	b.n	3756 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
    3814:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3818:	2878      	cmp	r0, #120	; 0x78
    381a:	d8ab      	bhi.n	3774 <z_cbvprintf_impl+0x458>
    381c:	2862      	cmp	r0, #98	; 0x62
    381e:	d822      	bhi.n	3866 <z_cbvprintf_impl+0x54a>
    3820:	2825      	cmp	r0, #37	; 0x25
    3822:	f43f ad8c 	beq.w	333e <z_cbvprintf_impl+0x22>
    3826:	2858      	cmp	r0, #88	; 0x58
    3828:	d1a4      	bne.n	3774 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    382a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    382e:	9300      	str	r3, [sp, #0]
    3830:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3834:	ab04      	add	r3, sp, #16
    3836:	aa0c      	add	r2, sp, #48	; 0x30
    3838:	f012 fcff 	bl	1623a <encode_uint>
    383c:	4682      	mov	sl, r0
			if (precision >= 0) {
    383e:	f1b8 0f00 	cmp.w	r8, #0
    3842:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    3846:	db0c      	blt.n	3862 <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
    3848:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    384c:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    3850:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3854:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    3856:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    385a:	d902      	bls.n	3862 <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
    385c:	eba8 0303 	sub.w	r3, r8, r3
    3860:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    3862:	4680      	mov	r8, r0
    3864:	e03e      	b.n	38e4 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
    3866:	3863      	subs	r0, #99	; 0x63
    3868:	2815      	cmp	r0, #21
    386a:	d883      	bhi.n	3774 <z_cbvprintf_impl+0x458>
    386c:	a201      	add	r2, pc, #4	; (adr r2, 3874 <z_cbvprintf_impl+0x558>)
    386e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    3872:	bf00      	nop
    3874:	000038f5 	.word	0x000038f5
    3878:	00003959 	.word	0x00003959
    387c:	00003775 	.word	0x00003775
    3880:	00003775 	.word	0x00003775
    3884:	00003775 	.word	0x00003775
    3888:	00003775 	.word	0x00003775
    388c:	00003959 	.word	0x00003959
    3890:	00003775 	.word	0x00003775
    3894:	00003775 	.word	0x00003775
    3898:	00003775 	.word	0x00003775
    389c:	00003775 	.word	0x00003775
    38a0:	000039b3 	.word	0x000039b3
    38a4:	00003981 	.word	0x00003981
    38a8:	00003985 	.word	0x00003985
    38ac:	00003775 	.word	0x00003775
    38b0:	00003775 	.word	0x00003775
    38b4:	000038cd 	.word	0x000038cd
    38b8:	00003775 	.word	0x00003775
    38bc:	00003981 	.word	0x00003981
    38c0:	00003775 	.word	0x00003775
    38c4:	00003775 	.word	0x00003775
    38c8:	00003981 	.word	0x00003981
			if (precision >= 0) {
    38cc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    38d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    38d4:	db0a      	blt.n	38ec <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
    38d6:	4641      	mov	r1, r8
    38d8:	4650      	mov	r0, sl
    38da:	f012 ff64 	bl	167a6 <strnlen>
			bpe = bps + len;
    38de:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    38e2:	2600      	movs	r6, #0
		if (bps == NULL) {
    38e4:	f1ba 0f00 	cmp.w	sl, #0
    38e8:	d10c      	bne.n	3904 <z_cbvprintf_impl+0x5e8>
    38ea:	e743      	b.n	3774 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
    38ec:	4650      	mov	r0, sl
    38ee:	f012 ff53 	bl	16798 <strlen>
    38f2:	e7f4      	b.n	38de <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    38f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    38f6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    38fa:	2600      	movs	r6, #0
			bps = buf;
    38fc:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    3900:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    3904:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    3908:	b106      	cbz	r6, 390c <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
    390a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    390c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    3910:	06d0      	lsls	r0, r2, #27
    3912:	d568      	bpl.n	39e6 <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
    3914:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3916:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3918:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    391a:	bf48      	it	mi
    391c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    391e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    3920:	bf48      	it	mi
    3922:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3924:	f1b9 0f00 	cmp.w	r9, #0
    3928:	dd76      	ble.n	3a18 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
    392a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    392e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    3932:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3936:	9303      	str	r3, [sp, #12]
    3938:	0753      	lsls	r3, r2, #29
    393a:	d46d      	bmi.n	3a18 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
    393c:	0650      	lsls	r0, r2, #25
    393e:	d561      	bpl.n	3a04 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
    3940:	b146      	cbz	r6, 3954 <z_cbvprintf_impl+0x638>
						OUTC(sign);
    3942:	9b02      	ldr	r3, [sp, #8]
    3944:	4659      	mov	r1, fp
    3946:	4630      	mov	r0, r6
    3948:	4798      	blx	r3
    394a:	2800      	cmp	r0, #0
    394c:	db57      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
						sign = 0;
    394e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3950:	3501      	adds	r5, #1
						sign = 0;
    3952:	461e      	mov	r6, r3
					pad = '0';
    3954:	2330      	movs	r3, #48	; 0x30
    3956:	e056      	b.n	3a06 <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
    3958:	071e      	lsls	r6, r3, #28
    395a:	d40f      	bmi.n	397c <z_cbvprintf_impl+0x660>
				sign = ' ';
    395c:	f013 0610 	ands.w	r6, r3, #16
    3960:	bf18      	it	ne
    3962:	2620      	movne	r6, #32
			sint = value->sint;
    3964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    3968:	2b00      	cmp	r3, #0
    396a:	f6bf af5e 	bge.w	382a <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
    396e:	4252      	negs	r2, r2
    3970:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3974:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    3978:	262d      	movs	r6, #45	; 0x2d
    397a:	e756      	b.n	382a <z_cbvprintf_impl+0x50e>
				sign = '+';
    397c:	262b      	movs	r6, #43	; 0x2b
    397e:	e7f1      	b.n	3964 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
    3980:	2600      	movs	r6, #0
    3982:	e752      	b.n	382a <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
    3984:	980a      	ldr	r0, [sp, #40]	; 0x28
    3986:	b340      	cbz	r0, 39da <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3988:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    398c:	9300      	str	r3, [sp, #0]
    398e:	aa0c      	add	r2, sp, #48	; 0x30
    3990:	ab04      	add	r3, sp, #16
    3992:	2100      	movs	r1, #0
    3994:	f012 fc51 	bl	1623a <encode_uint>
				conv->altform_0c = true;
    3998:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    399c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    39a0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    39a4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    39a8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    39aa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    39ae:	2600      	movs	r6, #0
				goto prec_int_pad0;
    39b0:	e745      	b.n	383e <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
    39b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    39b4:	2907      	cmp	r1, #7
    39b6:	f63f aedd 	bhi.w	3774 <z_cbvprintf_impl+0x458>
    39ba:	e8df f001 	tbb	[pc, r1]
    39be:	040c      	.short	0x040c
    39c0:	08080c06 	.word	0x08080c06
    39c4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    39c6:	701d      	strb	r5, [r3, #0]
		break;
    39c8:	e6d4      	b.n	3774 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
    39ca:	801d      	strh	r5, [r3, #0]
		break;
    39cc:	e6d2      	b.n	3774 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    39ce:	17ea      	asrs	r2, r5, #31
    39d0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    39d4:	e6ce      	b.n	3774 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    39d6:	601d      	str	r5, [r3, #0]
		break;
    39d8:	e6cc      	b.n	3774 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
    39da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    39de:	4606      	mov	r6, r0
			bpe = bps + 5;
    39e0:	f10a 0805 	add.w	r8, sl, #5
    39e4:	e78e      	b.n	3904 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
    39e6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    39e8:	bf48      	it	mi
    39ea:	3301      	addmi	r3, #1
    39ec:	e793      	b.n	3916 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
    39ee:	4618      	mov	r0, r3
    39f0:	9303      	str	r3, [sp, #12]
    39f2:	4659      	mov	r1, fp
    39f4:	9b02      	ldr	r3, [sp, #8]
    39f6:	4798      	blx	r3
    39f8:	2800      	cmp	r0, #0
    39fa:	9b03      	ldr	r3, [sp, #12]
    39fc:	da04      	bge.n	3a08 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
    39fe:	b011      	add	sp, #68	; 0x44
    3a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3a04:	2320      	movs	r3, #32
    3a06:	444d      	add	r5, r9
    3a08:	464a      	mov	r2, r9
				while (width-- > 0) {
    3a0a:	2a00      	cmp	r2, #0
    3a0c:	eba5 0109 	sub.w	r1, r5, r9
    3a10:	f109 39ff 	add.w	r9, r9, #4294967295
    3a14:	dceb      	bgt.n	39ee <z_cbvprintf_impl+0x6d2>
    3a16:	460d      	mov	r5, r1
		if (sign != 0) {
    3a18:	b136      	cbz	r6, 3a28 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
    3a1a:	9b02      	ldr	r3, [sp, #8]
    3a1c:	4659      	mov	r1, fp
    3a1e:	4630      	mov	r0, r6
    3a20:	4798      	blx	r3
    3a22:	2800      	cmp	r0, #0
    3a24:	dbeb      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
    3a26:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3a28:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3a2c:	06d9      	lsls	r1, r3, #27
    3a2e:	d401      	bmi.n	3a34 <z_cbvprintf_impl+0x718>
    3a30:	071a      	lsls	r2, r3, #28
    3a32:	d506      	bpl.n	3a42 <z_cbvprintf_impl+0x726>
				OUTC('0');
    3a34:	9b02      	ldr	r3, [sp, #8]
    3a36:	4659      	mov	r1, fp
    3a38:	2030      	movs	r0, #48	; 0x30
    3a3a:	4798      	blx	r3
    3a3c:	2800      	cmp	r0, #0
    3a3e:	dbde      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
    3a40:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3a42:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3a46:	06db      	lsls	r3, r3, #27
    3a48:	d507      	bpl.n	3a5a <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
    3a4a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3a4e:	9b02      	ldr	r3, [sp, #8]
    3a50:	4659      	mov	r1, fp
    3a52:	4798      	blx	r3
    3a54:	2800      	cmp	r0, #0
    3a56:	dbd2      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
    3a58:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3a5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3a5c:	442e      	add	r6, r5
    3a5e:	1b73      	subs	r3, r6, r5
    3a60:	2b00      	cmp	r3, #0
    3a62:	dc16      	bgt.n	3a92 <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
    3a64:	9802      	ldr	r0, [sp, #8]
    3a66:	4643      	mov	r3, r8
    3a68:	4652      	mov	r2, sl
    3a6a:	4659      	mov	r1, fp
    3a6c:	f012 fc2b 	bl	162c6 <outs>
    3a70:	2800      	cmp	r0, #0
    3a72:	dbc4      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
    3a74:	4405      	add	r5, r0
		while (width > 0) {
    3a76:	44a9      	add	r9, r5
    3a78:	eba9 0305 	sub.w	r3, r9, r5
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	f77f ae79 	ble.w	3774 <z_cbvprintf_impl+0x458>
			OUTC(' ');
    3a82:	9b02      	ldr	r3, [sp, #8]
    3a84:	4659      	mov	r1, fp
    3a86:	2020      	movs	r0, #32
    3a88:	4798      	blx	r3
    3a8a:	2800      	cmp	r0, #0
    3a8c:	dbb7      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
    3a8e:	3501      	adds	r5, #1
			--width;
    3a90:	e7f2      	b.n	3a78 <z_cbvprintf_impl+0x75c>
				OUTC('0');
    3a92:	9b02      	ldr	r3, [sp, #8]
    3a94:	4659      	mov	r1, fp
    3a96:	2030      	movs	r0, #48	; 0x30
    3a98:	4798      	blx	r3
    3a9a:	2800      	cmp	r0, #0
    3a9c:	dbaf      	blt.n	39fe <z_cbvprintf_impl+0x6e2>
    3a9e:	3501      	adds	r5, #1
    3aa0:	e7dd      	b.n	3a5e <z_cbvprintf_impl+0x742>
    3aa2:	bf00      	nop
    3aa4:	0001b29d 	.word	0x0001b29d

00003aa8 <console_getline>:

static K_FIFO_DEFINE(free_queue);
static K_FIFO_DEFINE(used_queue);

char *console_getline(void)
{
    3aa8:	b510      	push	{r4, lr}
	static struct console_input *cmd;

	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    3aaa:	4c08      	ldr	r4, [pc, #32]	; (3acc <console_getline+0x24>)
    3aac:	6821      	ldr	r1, [r4, #0]
    3aae:	b111      	cbz	r1, 3ab6 <console_getline+0xe>
		k_fifo_put(&free_queue, cmd);
    3ab0:	4807      	ldr	r0, [pc, #28]	; (3ad0 <console_getline+0x28>)
    3ab2:	f015 fdca 	bl	1964a <k_queue_append>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
    3ab6:	f04f 32ff 	mov.w	r2, #4294967295
    3aba:	f04f 33ff 	mov.w	r3, #4294967295
    3abe:	4805      	ldr	r0, [pc, #20]	; (3ad4 <console_getline+0x2c>)
    3ac0:	f011 f958 	bl	14d74 <z_impl_k_queue_get>
	}

	cmd = k_fifo_get(&used_queue, K_FOREVER);
    3ac4:	6020      	str	r0, [r4, #0]
	return cmd->line;
}
    3ac6:	3005      	adds	r0, #5
    3ac8:	bd10      	pop	{r4, pc}
    3aca:	bf00      	nop
    3acc:	20000fdc 	.word	0x20000fdc
    3ad0:	200007fc 	.word	0x200007fc
    3ad4:	2000082c 	.word	0x2000082c

00003ad8 <console_getline_init>:

void console_getline_init(void)
{
    3ad8:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
		k_fifo_put(&free_queue, &line_bufs[i]);
    3ada:	4c09      	ldr	r4, [pc, #36]	; (3b00 <console_getline_init+0x28>)
    3adc:	4d09      	ldr	r5, [pc, #36]	; (3b04 <console_getline_init+0x2c>)
    3ade:	4620      	mov	r0, r4
    3ae0:	4629      	mov	r1, r5
    3ae2:	f015 fdb2 	bl	1964a <k_queue_append>
    3ae6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    3aea:	4620      	mov	r0, r4
    3aec:	f015 fdad 	bl	1964a <k_queue_append>

	/* Zephyr UART handler takes an empty buffer from free_queue,
	 * stores UART input in it until EOL, and then puts it into
	 * used_queue.
	 */
	uart_register_input(&free_queue, &used_queue, NULL);
    3af0:	4620      	mov	r0, r4
    3af2:	4905      	ldr	r1, [pc, #20]	; (3b08 <console_getline_init+0x30>)
}
    3af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart_register_input(&free_queue, &used_queue, NULL);
    3af8:	2200      	movs	r2, #0
    3afa:	f00f ba91 	b.w	13020 <uart_register_input>
    3afe:	bf00      	nop
    3b00:	200007fc 	.word	0x200007fc
    3b04:	20000fe0 	.word	0x20000fe0
    3b08:	2000082c 	.word	0x2000082c

00003b0c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b10:	4605      	mov	r5, r0
    3b12:	f04f 0320 	mov.w	r3, #32
    3b16:	f3ef 8611 	mrs	r6, BASEPRI
    3b1a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b1e:	f3bf 8f6f 	isb	sy
	return list->head;
    3b22:	4b0e      	ldr	r3, [pc, #56]	; (3b5c <pm_state_notify+0x50>)
    3b24:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3b26:	b19c      	cbz	r4, 3b50 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3b28:	4f0d      	ldr	r7, [pc, #52]	; (3b60 <pm_state_notify+0x54>)
    3b2a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3b64 <pm_state_notify+0x58>
    3b2e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    3b32:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3b36:	2d00      	cmp	r5, #0
    3b38:	bf08      	it	eq
    3b3a:	4613      	moveq	r3, r2
		if (callback) {
    3b3c:	b12b      	cbz	r3, 3b4a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3b3e:	f898 2014 	ldrb.w	r2, [r8, #20]
    3b42:	fb09 f202 	mul.w	r2, r9, r2
    3b46:	5cb8      	ldrb	r0, [r7, r2]
    3b48:	4798      	blx	r3
	return node->next;
    3b4a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3b4c:	2c00      	cmp	r4, #0
    3b4e:	d1f0      	bne.n	3b32 <pm_state_notify+0x26>
	__asm__ volatile(
    3b50:	f386 8811 	msr	BASEPRI, r6
    3b54:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b5c:	200010f0 	.word	0x200010f0
    3b60:	20001104 	.word	0x20001104
    3b64:	200021d8 	.word	0x200021d8

00003b68 <pm_system_resume>:

void pm_system_resume(void)
{
    3b68:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    3b6a:	4b1a      	ldr	r3, [pc, #104]	; (3bd4 <pm_system_resume+0x6c>)
    3b6c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b6e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3b72:	f004 031f 	and.w	r3, r4, #31
    3b76:	2201      	movs	r2, #1
    3b78:	409a      	lsls	r2, r3
    3b7a:	4b17      	ldr	r3, [pc, #92]	; (3bd8 <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b7c:	0961      	lsrs	r1, r4, #5
    3b7e:	43d0      	mvns	r0, r2
    3b80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3b84:	e853 1f00 	ldrex	r1, [r3]
    3b88:	ea01 0500 	and.w	r5, r1, r0
    3b8c:	e843 5c00 	strex	ip, r5, [r3]
    3b90:	f1bc 0f00 	cmp.w	ip, #0
    3b94:	d1f6      	bne.n	3b84 <pm_system_resume+0x1c>
    3b96:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3b9a:	4211      	tst	r1, r2
    3b9c:	d013      	beq.n	3bc6 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    3b9e:	4b0f      	ldr	r3, [pc, #60]	; (3bdc <pm_system_resume+0x74>)
    3ba0:	4d0f      	ldr	r5, [pc, #60]	; (3be0 <pm_system_resume+0x78>)
    3ba2:	b18b      	cbz	r3, 3bc8 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3ba4:	230c      	movs	r3, #12
    3ba6:	4363      	muls	r3, r4
    3ba8:	18ea      	adds	r2, r5, r3
    3baa:	5ce8      	ldrb	r0, [r5, r3]
    3bac:	7851      	ldrb	r1, [r2, #1]
    3bae:	f012 fe43 	bl	16838 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3bb2:	2000      	movs	r0, #0
    3bb4:	f7ff ffaa 	bl	3b0c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3bb8:	230c      	movs	r3, #12
    3bba:	435c      	muls	r4, r3
    3bbc:	192a      	adds	r2, r5, r4
    3bbe:	2300      	movs	r3, #0
    3bc0:	512b      	str	r3, [r5, r4]
    3bc2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3bc6:	bd38      	pop	{r3, r4, r5, pc}
    3bc8:	f383 8811 	msr	BASEPRI, r3
    3bcc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3bd0:	e7ef      	b.n	3bb2 <pm_system_resume+0x4a>
    3bd2:	bf00      	nop
    3bd4:	200021d8 	.word	0x200021d8
    3bd8:	20001110 	.word	0x20001110
    3bdc:	00016839 	.word	0x00016839
    3be0:	20001104 	.word	0x20001104

00003be4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    3be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    3be8:	4b33      	ldr	r3, [pc, #204]	; (3cb8 <pm_system_suspend+0xd4>)
{
    3bea:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    3bec:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    3bee:	f04f 0320 	mov.w	r3, #32
    3bf2:	f3ef 8811 	mrs	r8, BASEPRI
    3bf6:	f383 8812 	msr	BASEPRI_MAX, r3
    3bfa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    3bfe:	240c      	movs	r4, #12
    3c00:	4b2e      	ldr	r3, [pc, #184]	; (3cbc <pm_system_suspend+0xd8>)
    3c02:	4e2f      	ldr	r6, [pc, #188]	; (3cc0 <pm_system_suspend+0xdc>)
    3c04:	436c      	muls	r4, r5
    3c06:	191a      	adds	r2, r3, r4
    3c08:	5d19      	ldrb	r1, [r3, r4]
    3c0a:	2900      	cmp	r1, #0
    3c0c:	d049      	beq.n	3ca2 <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    3c0e:	ca07      	ldmia	r2, {r0, r1, r2}
    3c10:	eb06 0c04 	add.w	ip, r6, r4
    3c14:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    3c18:	2200      	movs	r2, #0
    3c1a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    3c1c:	f388 8811 	msr	BASEPRI, r8
    3c20:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3c24:	230c      	movs	r3, #12
    3c26:	436b      	muls	r3, r5
    3c28:	18f2      	adds	r2, r6, r3
    3c2a:	5cf0      	ldrb	r0, [r6, r3]
    3c2c:	b3b8      	cbz	r0, 3c9e <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    3c2e:	1c7b      	adds	r3, r7, #1
    3c30:	d00f      	beq.n	3c52 <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3c32:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3c36:	4823      	ldr	r0, [pc, #140]	; (3cc4 <pm_system_suspend+0xe0>)
    3c38:	4a23      	ldr	r2, [pc, #140]	; (3cc8 <pm_system_suspend+0xe4>)
    3c3a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    3c3e:	2100      	movs	r1, #0
    3c40:	2300      	movs	r3, #0
    3c42:	fbec 0104 	umlal	r0, r1, ip, r4
    3c46:	f7fc fa5b 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    3c4a:	2101      	movs	r1, #1
    3c4c:	1a38      	subs	r0, r7, r0
    3c4e:	f015 ff6b 	bl	19b28 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3c52:	f011 fb29 	bl	152a8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    3c56:	2001      	movs	r0, #1
    3c58:	f7ff ff58 	bl	3b0c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c5c:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3c60:	f005 021f 	and.w	r2, r5, #31
    3c64:	2101      	movs	r1, #1
    3c66:	4091      	lsls	r1, r2
    3c68:	4a18      	ldr	r2, [pc, #96]	; (3ccc <pm_system_suspend+0xe8>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c6a:	096b      	lsrs	r3, r5, #5
    3c6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c70:	e853 2f00 	ldrex	r2, [r3]
    3c74:	430a      	orrs	r2, r1
    3c76:	e843 2000 	strex	r0, r2, [r3]
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d1f8      	bne.n	3c70 <pm_system_suspend+0x8c>
    3c7e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3c82:	4b13      	ldr	r3, [pc, #76]	; (3cd0 <pm_system_suspend+0xec>)
    3c84:	b133      	cbz	r3, 3c94 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    3c86:	200c      	movs	r0, #12
    3c88:	4368      	muls	r0, r5
    3c8a:	1833      	adds	r3, r6, r0
    3c8c:	5c30      	ldrb	r0, [r6, r0]
    3c8e:	7859      	ldrb	r1, [r3, #1]
    3c90:	f012 fdc6 	bl	16820 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    3c94:	f7ff ff68 	bl	3b68 <pm_system_resume>
	k_sched_unlock();
    3c98:	f011 fc8e 	bl	155b8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    3c9c:	2001      	movs	r0, #1
}
    3c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    3ca2:	4601      	mov	r1, r0
    3ca4:	4628      	mov	r0, r5
    3ca6:	f000 f815 	bl	3cd4 <pm_policy_next_state>
		if (info != NULL) {
    3caa:	2800      	cmp	r0, #0
    3cac:	d0b6      	beq.n	3c1c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    3cae:	c807      	ldmia	r0, {r0, r1, r2}
    3cb0:	4434      	add	r4, r6
    3cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    3cb6:	e7b1      	b.n	3c1c <pm_system_suspend+0x38>
    3cb8:	200021d8 	.word	0x200021d8
    3cbc:	200010f8 	.word	0x200010f8
    3cc0:	20001104 	.word	0x20001104
    3cc4:	000f423f 	.word	0x000f423f
    3cc8:	000f4240 	.word	0x000f4240
    3ccc:	20001110 	.word	0x20001110
    3cd0:	00016821 	.word	0x00016821

00003cd4 <pm_policy_next_state>:
	max_latency_ticks = new_max_latency_ticks;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd8:	b085      	sub	sp, #20
    3cda:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3cdc:	a903      	add	r1, sp, #12
    3cde:	f000 f841 	bl	3d64 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    3ce2:	9b03      	ldr	r3, [sp, #12]
    3ce4:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3ce6:	4b1c      	ldr	r3, [pc, #112]	; (3d58 <pm_policy_next_state+0x84>)
    3ce8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3d5c <pm_policy_next_state+0x88>
    3cec:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3cf0:	1e44      	subs	r4, r0, #1
    3cf2:	b224      	sxth	r4, r4
    3cf4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3cf8:	f04f 0b00 	mov.w	fp, #0
    3cfc:	1c63      	adds	r3, r4, #1
    3cfe:	d104      	bne.n	3d0a <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    3d00:	2500      	movs	r5, #0
}
    3d02:	4628      	mov	r0, r5
    3d04:	b005      	add	sp, #20
    3d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3d0a:	9b01      	ldr	r3, [sp, #4]
    3d0c:	4a14      	ldr	r2, [pc, #80]	; (3d60 <pm_policy_next_state+0x8c>)
    3d0e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    3d12:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3d16:	46c4      	mov	ip, r8
    3d18:	6868      	ldr	r0, [r5, #4]
    3d1a:	4659      	mov	r1, fp
    3d1c:	fbe0 c107 	umlal	ip, r1, r0, r7
    3d20:	2300      	movs	r3, #0
    3d22:	4660      	mov	r0, ip
    3d24:	f7fc f9ec 	bl	100 <__aeabi_uldivmod>
    3d28:	4681      	mov	r9, r0
    3d2a:	68a8      	ldr	r0, [r5, #8]
    3d2c:	4a0c      	ldr	r2, [pc, #48]	; (3d60 <pm_policy_next_state+0x8c>)
    3d2e:	46c4      	mov	ip, r8
    3d30:	4659      	mov	r1, fp
    3d32:	fbe0 c107 	umlal	ip, r1, r0, r7
    3d36:	2300      	movs	r3, #0
    3d38:	4660      	mov	r0, ip
    3d3a:	f7fc f9e1 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3d3e:	f1ba 3fff 	cmp.w	sl, #4294967295
    3d42:	d001      	beq.n	3d48 <pm_policy_next_state+0x74>
    3d44:	4582      	cmp	sl, r0
    3d46:	d904      	bls.n	3d52 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    3d48:	1c72      	adds	r2, r6, #1
    3d4a:	d0da      	beq.n	3d02 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    3d4c:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    3d4e:	42b0      	cmp	r0, r6
    3d50:	d9d7      	bls.n	3d02 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3d52:	3c01      	subs	r4, #1
    3d54:	b224      	sxth	r4, r4
    3d56:	e7d1      	b.n	3cfc <pm_policy_next_state+0x28>
    3d58:	20000164 	.word	0x20000164
    3d5c:	000f423f 	.word	0x000f423f
    3d60:	000f4240 	.word	0x000f4240

00003d64 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3d64:	b908      	cbnz	r0, 3d6a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3d66:	4b02      	ldr	r3, [pc, #8]	; (3d70 <pm_state_cpu_get_all+0xc>)
    3d68:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3d6a:	2000      	movs	r0, #0
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	0001a1d8 	.word	0x0001a1d8

00003d74 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    3d74:	4904      	ldr	r1, [pc, #16]	; (3d88 <sub_bytes+0x14>)
    3d76:	1e43      	subs	r3, r0, #1
    3d78:	300f      	adds	r0, #15
    3d7a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3d7e:	5c8a      	ldrb	r2, [r1, r2]
    3d80:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3d82:	4283      	cmp	r3, r0
    3d84:	d1f9      	bne.n	3d7a <sub_bytes+0x6>
	}
}
    3d86:	4770      	bx	lr
    3d88:	0001b2a3 	.word	0x0001b2a3

00003d8c <tc_aes128_set_encrypt_key>:
{
    3d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    3d8e:	4e26      	ldr	r6, [pc, #152]	; (3e28 <tc_aes128_set_encrypt_key+0x9c>)
{
    3d90:	4607      	mov	r7, r0
    3d92:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3d94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    3d96:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3d98:	ad01      	add	r5, sp, #4
    3d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3d9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3da0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3da4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    3da8:	4638      	mov	r0, r7
    3daa:	2f00      	cmp	r7, #0
    3dac:	d038      	beq.n	3e20 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    3dae:	2c00      	cmp	r4, #0
    3db0:	d038      	beq.n	3e24 <tc_aes128_set_encrypt_key+0x98>
    3db2:	1f38      	subs	r0, r7, #4
    3db4:	4621      	mov	r1, r4
    3db6:	4602      	mov	r2, r0
    3db8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3dba:	784b      	ldrb	r3, [r1, #1]
    3dbc:	780d      	ldrb	r5, [r1, #0]
    3dbe:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3dc0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3dc4:	78cd      	ldrb	r5, [r1, #3]
    3dc6:	432b      	orrs	r3, r5
    3dc8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    3dca:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3dcc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3dd0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3dd2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3dd6:	d1f0      	bne.n	3dba <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3dd8:	4c14      	ldr	r4, [pc, #80]	; (3e2c <tc_aes128_set_encrypt_key+0xa0>)
    3dda:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    3ddc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3dde:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3de0:	d116      	bne.n	3e10 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3de2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3de6:	5ca5      	ldrb	r5, [r4, r2]
    3de8:	0e1a      	lsrs	r2, r3, #24
    3dea:	5ca2      	ldrb	r2, [r4, r2]
    3dec:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3df0:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3df4:	b2db      	uxtb	r3, r3
    3df6:	5d65      	ldrb	r5, [r4, r5]
    3df8:	5ce3      	ldrb	r3, [r4, r3]
    3dfa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3dfe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3e02:	ad0c      	add	r5, sp, #48	; 0x30
    3e04:	f021 0303 	bic.w	r3, r1, #3
    3e08:	442b      	add	r3, r5
    3e0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3e0e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    3e10:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3e14:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    3e16:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3e18:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3e1a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3e1c:	d1de      	bne.n	3ddc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    3e1e:	2001      	movs	r0, #1
}
    3e20:	b00d      	add	sp, #52	; 0x34
    3e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3e24:	4620      	mov	r0, r4
    3e26:	e7fb      	b.n	3e20 <tc_aes128_set_encrypt_key+0x94>
    3e28:	0001a18c 	.word	0x0001a18c
    3e2c:	0001b2a3 	.word	0x0001b2a3

00003e30 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3e30:	4901      	ldr	r1, [pc, #4]	; (3e38 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3e32:	2210      	movs	r2, #16
	str	r2, [r1]
    3e34:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3e36:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3e38:	e000ed10 	.word	0xe000ed10

00003e3c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3e3c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3e3e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3e40:	f380 8811 	msr	BASEPRI, r0
	isb
    3e44:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3e48:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3e4c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3e4e:	b662      	cpsie	i
	isb
    3e50:	f3bf 8f6f 	isb	sy

	bx	lr
    3e54:	4770      	bx	lr
    3e56:	bf00      	nop

00003e58 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3e58:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3e5a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3e5c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3e60:	bf20      	wfe

	msr	BASEPRI, r0
    3e62:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3e66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3e68:	4770      	bx	lr
    3e6a:	bf00      	nop

00003e6c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3e6c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3e6e:	2b00      	cmp	r3, #0
    3e70:	db08      	blt.n	3e84 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e72:	2201      	movs	r2, #1
    3e74:	f000 001f 	and.w	r0, r0, #31
    3e78:	fa02 f000 	lsl.w	r0, r2, r0
    3e7c:	095b      	lsrs	r3, r3, #5
    3e7e:	4a02      	ldr	r2, [pc, #8]	; (3e88 <arch_irq_enable+0x1c>)
    3e80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	e000e100 	.word	0xe000e100

00003e8c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3e8c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3e8e:	2b00      	cmp	r3, #0
    3e90:	db0d      	blt.n	3eae <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e92:	2201      	movs	r2, #1
    3e94:	095b      	lsrs	r3, r3, #5
    3e96:	f000 001f 	and.w	r0, r0, #31
    3e9a:	fa02 f000 	lsl.w	r0, r2, r0
    3e9e:	3320      	adds	r3, #32
    3ea0:	4a03      	ldr	r2, [pc, #12]	; (3eb0 <arch_irq_disable+0x24>)
    3ea2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3ea6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3eaa:	f3bf 8f6f 	isb	sy
}
    3eae:	4770      	bx	lr
    3eb0:	e000e100 	.word	0xe000e100

00003eb4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3eb4:	4b05      	ldr	r3, [pc, #20]	; (3ecc <arch_irq_is_enabled+0x18>)
    3eb6:	0942      	lsrs	r2, r0, #5
    3eb8:	f000 001f 	and.w	r0, r0, #31
    3ebc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3ec0:	2301      	movs	r3, #1
    3ec2:	fa03 f000 	lsl.w	r0, r3, r0
}
    3ec6:	4010      	ands	r0, r2
    3ec8:	4770      	bx	lr
    3eca:	bf00      	nop
    3ecc:	e000e100 	.word	0xe000e100

00003ed0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3ed0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3ed2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ed4:	bfa8      	it	ge
    3ed6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3eda:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ede:	bfb8      	it	lt
    3ee0:	4b06      	ldrlt	r3, [pc, #24]	; (3efc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ee2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3ee6:	bfac      	ite	ge
    3ee8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3eec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ef0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ef2:	bfb4      	ite	lt
    3ef4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ef6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    3efa:	4770      	bx	lr
    3efc:	e000ed14 	.word	0xe000ed14

00003f00 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3f00:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3f02:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3f04:	4b04      	ldr	r3, [pc, #16]	; (3f18 <_arch_isr_direct_pm+0x18>)
    3f06:	699a      	ldr	r2, [r3, #24]
    3f08:	b11a      	cbz	r2, 3f12 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    3f0a:	2200      	movs	r2, #0
    3f0c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    3f0e:	f015 fb19 	bl	19544 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3f12:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3f14:	bd08      	pop	{r3, pc}
    3f16:	bf00      	nop
    3f18:	200021d8 	.word	0x200021d8

00003f1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3f1c:	bf30      	wfi
    b z_SysNmiOnReset
    3f1e:	f7ff bffd 	b.w	3f1c <z_SysNmiOnReset>
    3f22:	bf00      	nop

00003f24 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3f24:	4a0f      	ldr	r2, [pc, #60]	; (3f64 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3f26:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3f28:	4b0f      	ldr	r3, [pc, #60]	; (3f68 <z_arm_prep_c+0x44>)
    3f2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3f2e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f34:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3f38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3f3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3f44:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3f48:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3f4c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3f50:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3f54:	f010 fd28 	bl	149a8 <z_bss_zero>
	z_data_copy();
    3f58:	f011 fc70 	bl	1583c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3f5c:	f000 f9d0 	bl	4300 <z_arm_interrupt_init>
	z_cstart();
    3f60:	f010 fd66 	bl	14a30 <z_cstart>
    3f64:	00000000 	.word	0x00000000
    3f68:	e000ed00 	.word	0xe000ed00

00003f6c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3f6c:	4a09      	ldr	r2, [pc, #36]	; (3f94 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3f6e:	490a      	ldr	r1, [pc, #40]	; (3f98 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3f70:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3f72:	6809      	ldr	r1, [r1, #0]
    3f74:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3f76:	4909      	ldr	r1, [pc, #36]	; (3f9c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3f78:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3f7a:	684b      	ldr	r3, [r1, #4]
    3f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3f80:	604b      	str	r3, [r1, #4]
    3f82:	2300      	movs	r3, #0
    3f84:	f383 8811 	msr	BASEPRI, r3
    3f88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3f8c:	6893      	ldr	r3, [r2, #8]
}
    3f8e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3f90:	4770      	bx	lr
    3f92:	bf00      	nop
    3f94:	200021d8 	.word	0x200021d8
    3f98:	0001b100 	.word	0x0001b100
    3f9c:	e000ed00 	.word	0xe000ed00

00003fa0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3fa0:	4912      	ldr	r1, [pc, #72]	; (3fec <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3fa2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3fa4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3fa8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3faa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3fae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3fb2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3fb4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3fb8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3fbc:	4f0c      	ldr	r7, [pc, #48]	; (3ff0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3fbe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3fc2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3fc4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3fc6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3fc8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3fca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3fcc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3fce:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3fd2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3fd4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3fd6:	f000 f9d9 	bl	438c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3fda:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3fde:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3fe2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3fe6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3fea:	4770      	bx	lr
    ldr r1, =_kernel
    3fec:	200021d8 	.word	0x200021d8
    ldr v4, =_SCS_ICSR
    3ff0:	e000ed04 	.word	0xe000ed04

00003ff4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3ff4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3ff8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3ffa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3ffe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4002:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4004:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4008:	2902      	cmp	r1, #2
    beq _oops
    400a:	d0ff      	beq.n	400c <_oops>

0000400c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    400c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    400e:	f012 fbaa 	bl	16766 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4012:	bd01      	pop	{r0, pc}

00004014 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4014:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4018:	9b00      	ldr	r3, [sp, #0]
    401a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    401e:	490a      	ldr	r1, [pc, #40]	; (4048 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4020:	9b01      	ldr	r3, [sp, #4]
    4022:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4026:	9b02      	ldr	r3, [sp, #8]
    4028:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    402c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4034:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4038:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    403c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    403e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4040:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4042:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4044:	4770      	bx	lr
    4046:	bf00      	nop
    4048:	00015e9b 	.word	0x00015e9b

0000404c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    404c:	4a09      	ldr	r2, [pc, #36]	; (4074 <z_check_thread_stack_fail+0x28>)
{
    404e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4050:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4052:	b170      	cbz	r0, 4072 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4054:	f113 0f16 	cmn.w	r3, #22
    4058:	6e80      	ldr	r0, [r0, #104]	; 0x68
    405a:	d005      	beq.n	4068 <z_check_thread_stack_fail+0x1c>
    405c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    4060:	429a      	cmp	r2, r3
    4062:	d805      	bhi.n	4070 <z_check_thread_stack_fail+0x24>
    4064:	4283      	cmp	r3, r0
    4066:	d203      	bcs.n	4070 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4068:	4281      	cmp	r1, r0
    406a:	bf28      	it	cs
    406c:	2000      	movcs	r0, #0
    406e:	4770      	bx	lr
    4070:	2000      	movs	r0, #0
}
    4072:	4770      	bx	lr
    4074:	200021d8 	.word	0x200021d8

00004078 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4078:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    407a:	4b09      	ldr	r3, [pc, #36]	; (40a0 <arch_switch_to_main_thread+0x28>)
    407c:	6098      	str	r0, [r3, #8]
{
    407e:	460d      	mov	r5, r1
    4080:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4082:	f000 f983 	bl	438c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4086:	4620      	mov	r0, r4
    4088:	f385 8809 	msr	PSP, r5
    408c:	2100      	movs	r1, #0
    408e:	b663      	cpsie	if
    4090:	f381 8811 	msr	BASEPRI, r1
    4094:	f3bf 8f6f 	isb	sy
    4098:	2200      	movs	r2, #0
    409a:	2300      	movs	r3, #0
    409c:	f011 fefd 	bl	15e9a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    40a0:	200021d8 	.word	0x200021d8

000040a4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    40a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    40a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    40a8:	4a0b      	ldr	r2, [pc, #44]	; (40d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    40aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    40ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    40ae:	bf1e      	ittt	ne
	movne	r1, #0
    40b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    40b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    40b4:	f015 fa46 	blne	19544 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    40b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    40ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    40be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    40c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    40c6:	4905      	ldr	r1, [pc, #20]	; (40dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    40c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    40ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    40cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    40ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    40d2:	4903      	ldr	r1, [pc, #12]	; (40e0 <_isr_wrapper+0x3c>)
	bx r1
    40d4:	4708      	bx	r1
    40d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    40d8:	200021d8 	.word	0x200021d8
	ldr r1, =_sw_isr_table
    40dc:	00019f74 	.word	0x00019f74
	ldr r1, =z_arm_int_exit
    40e0:	000040e5 	.word	0x000040e5

000040e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    40e4:	4b04      	ldr	r3, [pc, #16]	; (40f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    40e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    40e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    40ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    40ec:	d003      	beq.n	40f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    40ee:	4903      	ldr	r1, [pc, #12]	; (40fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    40f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    40f4:	600a      	str	r2, [r1, #0]

000040f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    40f6:	4770      	bx	lr
	ldr r3, =_kernel
    40f8:	200021d8 	.word	0x200021d8
	ldr r1, =_SCS_ICSR
    40fc:	e000ed04 	.word	0xe000ed04

00004100 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4100:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4102:	4b1c      	ldr	r3, [pc, #112]	; (4174 <mem_manage_fault+0x74>)
{
    4104:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    410a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    410c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    410e:	0790      	lsls	r0, r2, #30
    4110:	d520      	bpl.n	4154 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    4112:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4116:	0612      	lsls	r2, r2, #24
    4118:	d51c      	bpl.n	4154 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    411a:	b119      	cbz	r1, 4124 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    411c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    411e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4122:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    412a:	06d2      	lsls	r2, r2, #27
    412c:	d415      	bmi.n	415a <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4130:	079b      	lsls	r3, r3, #30
    4132:	d412      	bmi.n	415a <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4134:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4136:	4b0f      	ldr	r3, [pc, #60]	; (4174 <mem_manage_fault+0x74>)
    4138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    413a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    413c:	bf42      	ittt	mi
    413e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    4140:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    4144:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4148:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    414c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    414e:	2300      	movs	r3, #0
    4150:	7023      	strb	r3, [r4, #0]

	return reason;
}
    4152:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    4154:	f06f 0015 	mvn.w	r0, #21
    4158:	e7e4      	b.n	4124 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    415a:	4b06      	ldr	r3, [pc, #24]	; (4174 <mem_manage_fault+0x74>)
    415c:	685b      	ldr	r3, [r3, #4]
    415e:	0519      	lsls	r1, r3, #20
    4160:	d5e8      	bpl.n	4134 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4162:	4629      	mov	r1, r5
    4164:	f7ff ff72 	bl	404c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4168:	2800      	cmp	r0, #0
    416a:	d0e3      	beq.n	4134 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    416c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4170:	2002      	movs	r0, #2
    4172:	e7e0      	b.n	4136 <mem_manage_fault+0x36>
    4174:	e000ed00 	.word	0xe000ed00

00004178 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4178:	4b0d      	ldr	r3, [pc, #52]	; (41b0 <bus_fault.constprop.0+0x38>)
    417a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    417c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    417e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4180:	0592      	lsls	r2, r2, #22
    4182:	d508      	bpl.n	4196 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4184:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4188:	0412      	lsls	r2, r2, #16
    418a:	d504      	bpl.n	4196 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    418c:	b118      	cbz	r0, 4196 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    418e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4194:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4196:	4b06      	ldr	r3, [pc, #24]	; (41b0 <bus_fault.constprop.0+0x38>)
    4198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    419a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    419c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    419e:	bf58      	it	pl
    41a0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    41a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    41a4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    41a6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    41aa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    41ac:	7008      	strb	r0, [r1, #0]

	return reason;
}
    41ae:	4770      	bx	lr
    41b0:	e000ed00 	.word	0xe000ed00

000041b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    41b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41b6:	4b48      	ldr	r3, [pc, #288]	; (42d8 <z_arm_fault+0x124>)
    41b8:	685b      	ldr	r3, [r3, #4]
{
    41ba:	b08a      	sub	sp, #40	; 0x28
    41bc:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41be:	f3c3 0308 	ubfx	r3, r3, #0, #9
    41c2:	2600      	movs	r6, #0
    41c4:	f386 8811 	msr	BASEPRI, r6
    41c8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    41cc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    41d0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    41d4:	d111      	bne.n	41fa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    41d6:	f002 010c 	and.w	r1, r2, #12
    41da:	2908      	cmp	r1, #8
    41dc:	d00d      	beq.n	41fa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    41de:	0711      	lsls	r1, r2, #28
    41e0:	d401      	bmi.n	41e6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    41e2:	4605      	mov	r5, r0
			*nested_exc = true;
    41e4:	2601      	movs	r6, #1
	*recoverable = false;
    41e6:	2200      	movs	r2, #0
	switch (fault) {
    41e8:	3b03      	subs	r3, #3
	*recoverable = false;
    41ea:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    41ee:	2b03      	cmp	r3, #3
    41f0:	d86b      	bhi.n	42ca <z_arm_fault+0x116>
    41f2:	e8df f003 	tbb	[pc, r3]
    41f6:	5504      	.short	0x5504
    41f8:	5d59      	.short	0x5d59
		return NULL;
    41fa:	4635      	mov	r5, r6
    41fc:	e7f3      	b.n	41e6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41fe:	4b36      	ldr	r3, [pc, #216]	; (42d8 <z_arm_fault+0x124>)
    4200:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4202:	f014 0402 	ands.w	r4, r4, #2
    4206:	d160      	bne.n	42ca <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    420a:	2a00      	cmp	r2, #0
    420c:	db15      	blt.n	423a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4210:	0052      	lsls	r2, r2, #1
    4212:	d512      	bpl.n	423a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    4214:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4216:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    421a:	f64d 7202 	movw	r2, #57090	; 0xdf02
    421e:	4291      	cmp	r1, r2
    4220:	d00a      	beq.n	4238 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    4222:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    4226:	b30a      	cbz	r2, 426c <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    4228:	f10d 0207 	add.w	r2, sp, #7
    422c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    422e:	4628      	mov	r0, r5
    4230:	f7ff ff66 	bl	4100 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    4234:	4604      	mov	r4, r0
		break;
    4236:	e000      	b.n	423a <z_arm_fault+0x86>
			reason = esf->basic.r0;
    4238:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    423a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    423e:	b99b      	cbnz	r3, 4268 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4240:	2220      	movs	r2, #32
    4242:	4629      	mov	r1, r5
    4244:	a802      	add	r0, sp, #8
    4246:	f012 fad4 	bl	167f2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    424c:	2e00      	cmp	r6, #0
    424e:	d03e      	beq.n	42ce <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4250:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4254:	b922      	cbnz	r2, 4260 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4256:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    425a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    425e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4260:	a902      	add	r1, sp, #8
    4262:	4620      	mov	r0, r4
    4264:	f012 fa7d 	bl	16762 <z_arm_fatal_error>
}
    4268:	b00a      	add	sp, #40	; 0x28
    426a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    426c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    4270:	b12a      	cbz	r2, 427e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    4272:	f10d 0107 	add.w	r1, sp, #7
    4276:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4278:	f7ff ff7e 	bl	4178 <bus_fault.constprop.0>
    427c:	e7da      	b.n	4234 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    427e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    4280:	b292      	uxth	r2, r2
    4282:	2a00      	cmp	r2, #0
    4284:	d0d9      	beq.n	423a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    428a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    428c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    428e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4294:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4298:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    429c:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    429e:	e7cc      	b.n	423a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    42a0:	f10d 0207 	add.w	r2, sp, #7
    42a4:	2100      	movs	r1, #0
    42a6:	e7c2      	b.n	422e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    42a8:	f10d 0107 	add.w	r1, sp, #7
    42ac:	2000      	movs	r0, #0
    42ae:	e7e3      	b.n	4278 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    42b0:	4b09      	ldr	r3, [pc, #36]	; (42d8 <z_arm_fault+0x124>)
    42b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    42b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    42b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    42b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    42ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    42bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    42be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42c0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    42c4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    42c8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    42ca:	2400      	movs	r4, #0
    42cc:	e7b5      	b.n	423a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    42ce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    42d2:	f023 0301 	bic.w	r3, r3, #1
    42d6:	e7c2      	b.n	425e <z_arm_fault+0xaa>
    42d8:	e000ed00 	.word	0xe000ed00

000042dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    42dc:	4a02      	ldr	r2, [pc, #8]	; (42e8 <z_arm_fault_init+0xc>)
    42de:	6953      	ldr	r3, [r2, #20]
    42e0:	f043 0310 	orr.w	r3, r3, #16
    42e4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    42e6:	4770      	bx	lr
    42e8:	e000ed00 	.word	0xe000ed00

000042ec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    42ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    42f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    42f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    42f6:	4672      	mov	r2, lr
	bl z_arm_fault
    42f8:	f7ff ff5c 	bl	41b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    42fc:	bd01      	pop	{r0, pc}
    42fe:	bf00      	nop

00004300 <z_arm_interrupt_init>:
    4300:	4804      	ldr	r0, [pc, #16]	; (4314 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4302:	2300      	movs	r3, #0
    4304:	2120      	movs	r1, #32
    4306:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4308:	3301      	adds	r3, #1
    430a:	2b30      	cmp	r3, #48	; 0x30
    430c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4310:	d1f9      	bne.n	4306 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4312:	4770      	bx	lr
    4314:	e000e100 	.word	0xe000e100

00004318 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4318:	f015 fda6 	bl	19e68 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    431c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    431e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4322:	4808      	ldr	r0, [pc, #32]	; (4344 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4324:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    4328:	1840      	adds	r0, r0, r1
    msr PSP, r0
    432a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    432e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4332:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4334:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4336:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    433a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    433e:	f7ff fdf1 	bl	3f24 <z_arm_prep_c>
    4342:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4344:	20003700 	.word	0x20003700

00004348 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4348:	4b08      	ldr	r3, [pc, #32]	; (436c <z_impl_k_thread_abort+0x24>)
    434a:	689b      	ldr	r3, [r3, #8]
    434c:	4283      	cmp	r3, r0
    434e:	d10b      	bne.n	4368 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4350:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4354:	b143      	cbz	r3, 4368 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4356:	4b06      	ldr	r3, [pc, #24]	; (4370 <z_impl_k_thread_abort+0x28>)
    4358:	685a      	ldr	r2, [r3, #4]
    435a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    435e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4366:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4368:	f011 b9f6 	b.w	15758 <z_thread_abort>
    436c:	200021d8 	.word	0x200021d8
    4370:	e000ed00 	.word	0xe000ed00

00004374 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4374:	4b02      	ldr	r3, [pc, #8]	; (4380 <z_arm_configure_static_mpu_regions+0xc>)
    4376:	4a03      	ldr	r2, [pc, #12]	; (4384 <z_arm_configure_static_mpu_regions+0x10>)
    4378:	4803      	ldr	r0, [pc, #12]	; (4388 <z_arm_configure_static_mpu_regions+0x14>)
    437a:	2101      	movs	r1, #1
    437c:	f000 b86e 	b.w	445c <arm_core_mpu_configure_static_mpu_regions>
    4380:	20040000 	.word	0x20040000
    4384:	20000000 	.word	0x20000000
    4388:	0001a1d8 	.word	0x0001a1d8

0000438c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    438c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    438e:	4b05      	ldr	r3, [pc, #20]	; (43a4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4390:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    4392:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4394:	4a04      	ldr	r2, [pc, #16]	; (43a8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4396:	2140      	movs	r1, #64	; 0x40
    4398:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    439c:	4618      	mov	r0, r3
    439e:	2101      	movs	r1, #1
    43a0:	f000 b866 	b.w	4470 <arm_core_mpu_configure_dynamic_mpu_regions>
    43a4:	20001114 	.word	0x20001114
    43a8:	150b0000 	.word	0x150b0000

000043ac <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    43ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    43ae:	4f1f      	ldr	r7, [pc, #124]	; (442c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    43b0:	2600      	movs	r6, #0
    43b2:	428e      	cmp	r6, r1
    43b4:	db01      	blt.n	43ba <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    43b6:	4610      	mov	r0, r2
    43b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    43ba:	6844      	ldr	r4, [r0, #4]
    43bc:	b39c      	cbz	r4, 4426 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    43be:	b153      	cbz	r3, 43d6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    43c0:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    43c4:	ea14 0f0c 	tst.w	r4, ip
    43c8:	d118      	bne.n	43fc <mpu_configure_regions+0x50>
		&&
    43ca:	2c1f      	cmp	r4, #31
    43cc:	d916      	bls.n	43fc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    43ce:	6805      	ldr	r5, [r0, #0]
		&&
    43d0:	ea1c 0f05 	tst.w	ip, r5
    43d4:	d112      	bne.n	43fc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    43d6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    43d8:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    43da:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    43de:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    43e0:	d90f      	bls.n	4402 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    43e2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    43e6:	d80e      	bhi.n	4406 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    43e8:	3c01      	subs	r4, #1
    43ea:	fab4 f484 	clz	r4, r4
    43ee:	f1c4 041f 	rsb	r4, r4, #31
    43f2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    43f4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    43f6:	ea4c 0404 	orr.w	r4, ip, r4
    43fa:	d906      	bls.n	440a <mpu_configure_regions+0x5e>
			return -EINVAL;
    43fc:	f06f 0215 	mvn.w	r2, #21
    4400:	e7d9      	b.n	43b6 <mpu_configure_regions+0xa>
		return REGION_32B;
    4402:	2408      	movs	r4, #8
    4404:	e7f6      	b.n	43f4 <mpu_configure_regions+0x48>
		return REGION_4G;
    4406:	243e      	movs	r4, #62	; 0x3e
    4408:	e7f4      	b.n	43f4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    440a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    440e:	4315      	orrs	r5, r2
    4410:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4414:	f044 0401 	orr.w	r4, r4, #1
    4418:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    441c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    4420:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4422:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    4426:	3601      	adds	r6, #1
    4428:	300c      	adds	r0, #12
    442a:	e7c2      	b.n	43b2 <mpu_configure_regions+0x6>
    442c:	e000ed00 	.word	0xe000ed00

00004430 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4430:	4b04      	ldr	r3, [pc, #16]	; (4444 <arm_core_mpu_enable+0x14>)
    4432:	2205      	movs	r2, #5
    4434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    443c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4440:	4770      	bx	lr
    4442:	bf00      	nop
    4444:	e000ed00 	.word	0xe000ed00

00004448 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4448:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    444c:	4b02      	ldr	r3, [pc, #8]	; (4458 <arm_core_mpu_disable+0x10>)
    444e:	2200      	movs	r2, #0
    4450:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4454:	4770      	bx	lr
    4456:	bf00      	nop
    4458:	e000ed00 	.word	0xe000ed00

0000445c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    445c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    445e:	4c03      	ldr	r4, [pc, #12]	; (446c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4460:	2301      	movs	r3, #1
    4462:	7822      	ldrb	r2, [r4, #0]
    4464:	f7ff ffa2 	bl	43ac <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4468:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    446a:	bd10      	pop	{r4, pc}
    446c:	20002230 	.word	0x20002230

00004470 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4470:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4472:	4a09      	ldr	r2, [pc, #36]	; (4498 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4474:	2300      	movs	r3, #0
    4476:	7812      	ldrb	r2, [r2, #0]
    4478:	f7ff ff98 	bl	43ac <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    447c:	f110 0f16 	cmn.w	r0, #22
    4480:	d002      	beq.n	4488 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4482:	4a06      	ldr	r2, [pc, #24]	; (449c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4484:	2807      	cmp	r0, #7
    4486:	dd00      	ble.n	448a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4488:	bd08      	pop	{r3, pc}
    448a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    448e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    4492:	3001      	adds	r0, #1
    4494:	e7f6      	b.n	4484 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    4496:	bf00      	nop
    4498:	20002230 	.word	0x20002230
    449c:	e000ed00 	.word	0xe000ed00

000044a0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    44a0:	4914      	ldr	r1, [pc, #80]	; (44f4 <z_arm_mpu_init+0x54>)
    44a2:	6808      	ldr	r0, [r1, #0]
    44a4:	2808      	cmp	r0, #8
{
    44a6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    44a8:	d821      	bhi.n	44ee <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    44aa:	f7ff ffcd 	bl	4448 <arm_core_mpu_disable>
    44ae:	4c12      	ldr	r4, [pc, #72]	; (44f8 <z_arm_mpu_init+0x58>)
    44b0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    44b2:	2200      	movs	r2, #0
    44b4:	4290      	cmp	r0, r2
    44b6:	f101 010c 	add.w	r1, r1, #12
    44ba:	d105      	bne.n	44c8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    44bc:	4b0f      	ldr	r3, [pc, #60]	; (44fc <z_arm_mpu_init+0x5c>)
    44be:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    44c0:	f7ff ffb6 	bl	4430 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    44c4:	2000      	movs	r0, #0
}
    44c6:	bd10      	pop	{r4, pc}
    44c8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    44cc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    44d0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    44d4:	4313      	orrs	r3, r2
    44d6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    44da:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    44de:	f851 3c04 	ldr.w	r3, [r1, #-4]
    44e2:	f043 0301 	orr.w	r3, r3, #1
    44e6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    44ea:	3201      	adds	r2, #1
    44ec:	e7e2      	b.n	44b4 <z_arm_mpu_init+0x14>
		return -1;
    44ee:	f04f 30ff 	mov.w	r0, #4294967295
    44f2:	e7e8      	b.n	44c6 <z_arm_mpu_init+0x26>
    44f4:	0001a1e4 	.word	0x0001a1e4
    44f8:	e000ed00 	.word	0xe000ed00
    44fc:	20002230 	.word	0x20002230

00004500 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4500:	4b01      	ldr	r3, [pc, #4]	; (4508 <__stdout_hook_install+0x8>)
    4502:	6018      	str	r0, [r3, #0]
}
    4504:	4770      	bx	lr
    4506:	bf00      	nop
    4508:	20000168 	.word	0x20000168

0000450c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    450c:	b510      	push	{r4, lr}
	__asm__ volatile(
    450e:	f04f 0320 	mov.w	r3, #32
    4512:	f3ef 8011 	mrs	r0, BASEPRI
    4516:	f383 8812 	msr	BASEPRI_MAX, r3
    451a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    451e:	4a11      	ldr	r2, [pc, #68]	; (4564 <nordicsemi_nrf52_init+0x58>)
    4520:	2301      	movs	r3, #1
    4522:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    452a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    452e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4532:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    4536:	2c08      	cmp	r4, #8
    4538:	d108      	bne.n	454c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    453a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    453e:	2905      	cmp	r1, #5
    4540:	d804      	bhi.n	454c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4542:	4c09      	ldr	r4, [pc, #36]	; (4568 <nordicsemi_nrf52_init+0x5c>)
    4544:	5c61      	ldrb	r1, [r4, r1]
    4546:	b109      	cbz	r1, 454c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4548:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    454c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4550:	2201      	movs	r2, #1
    4552:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4556:	f380 8811 	msr	BASEPRI, r0
    455a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    455e:	2000      	movs	r0, #0
    4560:	bd10      	pop	{r4, pc}
    4562:	bf00      	nop
    4564:	4001e000 	.word	0x4001e000
    4568:	0001b3b2 	.word	0x0001b3b2

0000456c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    456c:	b120      	cbz	r0, 4578 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    456e:	4b03      	ldr	r3, [pc, #12]	; (457c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4570:	0180      	lsls	r0, r0, #6
    4572:	f043 0301 	orr.w	r3, r3, #1
    4576:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4578:	4770      	bx	lr
    457a:	bf00      	nop
    457c:	0001a1d0 	.word	0x0001a1d0

00004580 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4580:	b430      	push	{r4, r5}
    4582:	4603      	mov	r3, r0
    4584:	4608      	mov	r0, r1
	switch (src->type) {
    4586:	781a      	ldrb	r2, [r3, #0]
    4588:	2a01      	cmp	r2, #1
    458a:	d013      	beq.n	45b4 <uuid_to_uuid128+0x34>
    458c:	2a02      	cmp	r2, #2
    458e:	d026      	beq.n	45de <uuid_to_uuid128+0x5e>
    4590:	b972      	cbnz	r2, 45b0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4592:	4a15      	ldr	r2, [pc, #84]	; (45e8 <uuid_to_uuid128+0x68>)
    4594:	f102 0410 	add.w	r4, r2, #16
    4598:	f852 5b04 	ldr.w	r5, [r2], #4
    459c:	f841 5b04 	str.w	r5, [r1], #4
    45a0:	42a2      	cmp	r2, r4
    45a2:	d1f9      	bne.n	4598 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    45a4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    45a6:	7812      	ldrb	r2, [r2, #0]
    45a8:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    45aa:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    45ac:	0a1b      	lsrs	r3, r3, #8
    45ae:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    45b0:	bc30      	pop	{r4, r5}
    45b2:	4770      	bx	lr
		*dst = uuid128_base;
    45b4:	4a0c      	ldr	r2, [pc, #48]	; (45e8 <uuid_to_uuid128+0x68>)
    45b6:	f102 0410 	add.w	r4, r2, #16
    45ba:	f852 5b04 	ldr.w	r5, [r2], #4
    45be:	f841 5b04 	str.w	r5, [r1], #4
    45c2:	42a2      	cmp	r2, r4
    45c4:	d1f9      	bne.n	45ba <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    45c6:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    45c8:	7812      	ldrb	r2, [r2, #0]
    45ca:	700a      	strb	r2, [r1, #0]
    45cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    45d0:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    45d2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    45d4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    45d6:	0a1b      	lsrs	r3, r3, #8
    45d8:	7382      	strb	r2, [r0, #14]
    45da:	7403      	strb	r3, [r0, #16]
}
    45dc:	e7e8      	b.n	45b0 <uuid_to_uuid128+0x30>
}
    45de:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    45e0:	2211      	movs	r2, #17
    45e2:	4619      	mov	r1, r3
    45e4:	f012 b905 	b.w	167f2 <memcpy>
    45e8:	0001b3b8 	.word	0x0001b3b8

000045ec <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    45ec:	b538      	push	{r3, r4, r5, lr}
    45ee:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    45f0:	4805      	ldr	r0, [pc, #20]	; (4608 <bt_buf_get_rx+0x1c>)
    45f2:	f014 fa25 	bl	18a40 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    45f6:	4604      	mov	r4, r0
    45f8:	b120      	cbz	r0, 4604 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    45fa:	2100      	movs	r1, #0
    45fc:	3008      	adds	r0, #8
    45fe:	f014 fa44 	bl	18a8a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    4602:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4604:	4620      	mov	r0, r4
    4606:	bd38      	pop	{r3, r4, r5, pc}
    4608:	200008f4 	.word	0x200008f4

0000460c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    460c:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    460e:	490b      	ldr	r1, [pc, #44]	; (463c <bt_buf_get_cmd_complete+0x30>)
{
    4610:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    4612:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    4616:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    4618:	b920      	cbnz	r0, 4624 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    461a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    461e:	2001      	movs	r0, #1
    4620:	f7ff bfe4 	b.w	45ec <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    4624:	f014 fa42 	bl	18aac <net_buf_ref>
    4628:	2301      	movs	r3, #1
		buf->len = 0U;
    462a:	2100      	movs	r1, #0
    462c:	7503      	strb	r3, [r0, #20]
    462e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    4630:	4604      	mov	r4, r0
    4632:	3008      	adds	r0, #8
    4634:	f014 fa29 	bl	18a8a <net_buf_simple_reserve>
}
    4638:	4620      	mov	r0, r4
    463a:	bd10      	pop	{r4, pc}
    463c:	20000000 	.word	0x20000000

00004640 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4640:	b570      	push	{r4, r5, r6, lr}
    4642:	4604      	mov	r4, r0
	switch (evt) {
    4644:	2c0f      	cmp	r4, #15
{
    4646:	460d      	mov	r5, r1
    4648:	4610      	mov	r0, r2
    464a:	4619      	mov	r1, r3
	switch (evt) {
    464c:	d805      	bhi.n	465a <bt_buf_get_evt+0x1a>
    464e:	2c0d      	cmp	r4, #13
    4650:	d912      	bls.n	4678 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4656:	f7ff bfd9 	b.w	460c <bt_buf_get_cmd_complete>
	switch (evt) {
    465a:	2c13      	cmp	r4, #19
    465c:	d10c      	bne.n	4678 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    465e:	480b      	ldr	r0, [pc, #44]	; (468c <bt_buf_get_evt+0x4c>)
    4660:	f014 f9ee 	bl	18a40 <net_buf_alloc_fixed>
			if (buf) {
    4664:	4604      	mov	r4, r0
    4666:	b128      	cbz	r0, 4674 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4668:	2100      	movs	r1, #0
    466a:	3008      	adds	r0, #8
    466c:	f014 fa0d 	bl	18a8a <net_buf_simple_reserve>
    4670:	2301      	movs	r3, #1
    4672:	7523      	strb	r3, [r4, #20]
}
    4674:	4620      	mov	r0, r4
    4676:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    4678:	4602      	mov	r2, r0
    467a:	460b      	mov	r3, r1
		if (discardable) {
    467c:	b10d      	cbz	r5, 4682 <bt_buf_get_evt+0x42>
    467e:	4804      	ldr	r0, [pc, #16]	; (4690 <bt_buf_get_evt+0x50>)
    4680:	e7ee      	b.n	4660 <bt_buf_get_evt+0x20>
}
    4682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4686:	2001      	movs	r0, #1
    4688:	f7ff bfb0 	b.w	45ec <bt_buf_get_rx>
    468c:	20000920 	.word	0x20000920
    4690:	20000870 	.word	0x20000870

00004694 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    4694:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4696:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    4698:	781a      	ldrb	r2, [r3, #0]
    469a:	b972      	cbnz	r2, 46ba <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    469c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    46a0:	4620      	mov	r0, r4
    46a2:	f001 fc7b 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
    46a6:	4605      	mov	r5, r0
    46a8:	b940      	cbnz	r0, 46bc <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    46aa:	4b08      	ldr	r3, [pc, #32]	; (46cc <hci_disconn_complete_prio+0x38>)
    46ac:	881a      	ldrh	r2, [r3, #0]
    46ae:	b922      	cbnz	r2, 46ba <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    46b0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    46b4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    46b8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    46ba:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    46bc:	2101      	movs	r1, #1
    46be:	f001 fc75 	bl	5fac <bt_conn_set_state>
	bt_conn_unref(conn);
    46c2:	4628      	mov	r0, r5
}
    46c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    46c8:	f012 bcc5 	b.w	17056 <bt_conn_unref>
    46cc:	20002218 	.word	0x20002218

000046d0 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    46d0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    46d2:	2101      	movs	r1, #1
    46d4:	4604      	mov	r4, r0
    46d6:	3008      	adds	r0, #8
    46d8:	f014 fa43 	bl	18b62 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    46dc:	4621      	mov	r1, r4
    46de:	4a03      	ldr	r2, [pc, #12]	; (46ec <hci_le_meta_event+0x1c>)
    46e0:	7800      	ldrb	r0, [r0, #0]
}
    46e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    46e6:	2308      	movs	r3, #8
    46e8:	f012 b915 	b.w	16916 <handle_event>
    46ec:	0001a234 	.word	0x0001a234

000046f0 <hci_cmd_done>:
{
    46f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46f2:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    46f4:	7990      	ldrb	r0, [r2, #6]
{
    46f6:	460e      	mov	r6, r1
    46f8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    46fa:	f00d ff7d 	bl	125f8 <net_buf_pool_get>
    46fe:	4b28      	ldr	r3, [pc, #160]	; (47a0 <hci_cmd_done+0xb0>)
    4700:	4283      	cmp	r3, r0
    4702:	d14b      	bne.n	479c <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
    4704:	4620      	mov	r0, r4
    4706:	f00d ff7f 	bl	12608 <net_buf_id>
    470a:	4d26      	ldr	r5, [pc, #152]	; (47a4 <hci_cmd_done+0xb4>)
    470c:	230c      	movs	r3, #12
    470e:	fb03 5000 	mla	r0, r3, r0, r5
    4712:	8843      	ldrh	r3, [r0, #2]
    4714:	42bb      	cmp	r3, r7
    4716:	d141      	bne.n	479c <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
    4718:	4f23      	ldr	r7, [pc, #140]	; (47a8 <hci_cmd_done+0xb8>)
    471a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    471e:	b120      	cbz	r0, 472a <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    4720:	f00e f82e 	bl	12780 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4724:	2300      	movs	r3, #0
    4726:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    472a:	4620      	mov	r0, r4
    472c:	f00d ff6c 	bl	12608 <net_buf_id>
    4730:	270c      	movs	r7, #12
    4732:	fb07 5000 	mla	r0, r7, r0, r5
    4736:	6843      	ldr	r3, [r0, #4]
    4738:	b19b      	cbz	r3, 4762 <hci_cmd_done+0x72>
    473a:	b996      	cbnz	r6, 4762 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    473c:	4620      	mov	r0, r4
    473e:	f00d ff63 	bl	12608 <net_buf_id>
    4742:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4746:	2101      	movs	r1, #1
    4748:	6842      	ldr	r2, [r0, #4]
    474a:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    474e:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    4750:	f003 071f 	and.w	r7, r3, #31
    4754:	40b9      	lsls	r1, r7
	if (val) {
    4756:	095b      	lsrs	r3, r3, #5
    4758:	b1d2      	cbz	r2, 4790 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    475a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    475e:	f012 f930 	bl	169c2 <atomic_or>
	if (cmd(buf)->sync) {
    4762:	4620      	mov	r0, r4
    4764:	f00d ff50 	bl	12608 <net_buf_id>
    4768:	270c      	movs	r7, #12
    476a:	fb07 5000 	mla	r0, r7, r0, r5
    476e:	6883      	ldr	r3, [r0, #8]
    4770:	b1a3      	cbz	r3, 479c <hci_cmd_done+0xac>
		cmd(buf)->status = status;
    4772:	4620      	mov	r0, r4
    4774:	f00d ff48 	bl	12608 <net_buf_id>
    4778:	4378      	muls	r0, r7
    477a:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    477c:	4620      	mov	r0, r4
    477e:	f00d ff43 	bl	12608 <net_buf_id>
    4782:	fb07 5500 	mla	r5, r7, r0, r5
    4786:	68a8      	ldr	r0, [r5, #8]
}
    4788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    478c:	f010 bb26 	b.w	14ddc <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4790:	43c9      	mvns	r1, r1
    4792:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4796:	f012 f989 	bl	16aac <atomic_and.isra.0>
    479a:	e7e2      	b.n	4762 <hci_cmd_done+0x72>
    479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    479e:	bf00      	nop
    47a0:	200008c8 	.word	0x200008c8
    47a4:	20001120 	.word	0x20001120
    47a8:	20000000 	.word	0x20000000

000047ac <hci_cmd_status>:
{
    47ac:	b538      	push	{r3, r4, r5, lr}
    47ae:	2104      	movs	r1, #4
    47b0:	4604      	mov	r4, r0
    47b2:	3008      	adds	r0, #8
    47b4:	f014 f9d5 	bl	18b62 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    47b8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    47ba:	7801      	ldrb	r1, [r0, #0]
    47bc:	8840      	ldrh	r0, [r0, #2]
    47be:	4622      	mov	r2, r4
    47c0:	f7ff ff96 	bl	46f0 <hci_cmd_done>
	if (ncmd) {
    47c4:	b125      	cbz	r5, 47d0 <hci_cmd_status+0x24>
    47c6:	4803      	ldr	r0, [pc, #12]	; (47d4 <hci_cmd_status+0x28>)
}
    47c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    47cc:	f010 bb06 	b.w	14ddc <z_impl_k_sem_give>
    47d0:	bd38      	pop	{r3, r4, r5, pc}
    47d2:	bf00      	nop
    47d4:	20000118 	.word	0x20000118

000047d8 <hci_cmd_complete>:
{
    47d8:	b538      	push	{r3, r4, r5, lr}
    47da:	2103      	movs	r1, #3
    47dc:	4604      	mov	r4, r0
    47de:	3008      	adds	r0, #8
    47e0:	f014 f9bf 	bl	18b62 <net_buf_simple_pull_mem>
	status = buf->data[0];
    47e4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    47e6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    47e8:	7819      	ldrb	r1, [r3, #0]
    47ea:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    47ee:	4622      	mov	r2, r4
    47f0:	f7ff ff7e 	bl	46f0 <hci_cmd_done>
	if (ncmd) {
    47f4:	b125      	cbz	r5, 4800 <hci_cmd_complete+0x28>
    47f6:	4803      	ldr	r0, [pc, #12]	; (4804 <hci_cmd_complete+0x2c>)
}
    47f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    47fc:	f010 baee 	b.w	14ddc <z_impl_k_sem_give>
    4800:	bd38      	pop	{r3, r4, r5, pc}
    4802:	bf00      	nop
    4804:	20000118 	.word	0x20000118

00004808 <bt_hci_cmd_state_set_init>:
{
    4808:	b510      	push	{r4, lr}
	state->bit = bit;
    480a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    480e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4812:	720b      	strb	r3, [r1, #8]
{
    4814:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    4816:	f00d fef7 	bl	12608 <net_buf_id>
    481a:	4b03      	ldr	r3, [pc, #12]	; (4828 <bt_hci_cmd_state_set_init+0x20>)
    481c:	220c      	movs	r2, #12
    481e:	fb02 3300 	mla	r3, r2, r0, r3
    4822:	605c      	str	r4, [r3, #4]
}
    4824:	bd10      	pop	{r4, pc}
    4826:	bf00      	nop
    4828:	20001120 	.word	0x20001120

0000482c <bt_hci_cmd_create>:
{
    482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    4830:	f04f 32ff 	mov.w	r2, #4294967295
    4834:	f04f 33ff 	mov.w	r3, #4294967295
    4838:	4606      	mov	r6, r0
    483a:	4817      	ldr	r0, [pc, #92]	; (4898 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    483c:	4d17      	ldr	r5, [pc, #92]	; (489c <bt_hci_cmd_create+0x70>)
{
    483e:	460f      	mov	r7, r1
    4840:	f014 f8fe 	bl	18a40 <net_buf_alloc_fixed>
    4844:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    4846:	f100 0a08 	add.w	sl, r0, #8
    484a:	2100      	movs	r1, #0
    484c:	f04f 0800 	mov.w	r8, #0
    4850:	4650      	mov	r0, sl
    4852:	f014 f91a 	bl	18a8a <net_buf_simple_reserve>
    4856:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    485a:	4620      	mov	r0, r4
    485c:	f00d fed4 	bl	12608 <net_buf_id>
    4860:	f04f 090c 	mov.w	r9, #12
    4864:	fb09 5000 	mla	r0, r9, r0, r5
    4868:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    486a:	4620      	mov	r0, r4
    486c:	f00d fecc 	bl	12608 <net_buf_id>
    4870:	fb09 5000 	mla	r0, r9, r0, r5
    4874:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    4878:	4620      	mov	r0, r4
    487a:	f00d fec5 	bl	12608 <net_buf_id>
    487e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    4882:	2103      	movs	r1, #3
    4884:	f8c5 8004 	str.w	r8, [r5, #4]
    4888:	4650      	mov	r0, sl
    488a:	f014 f941 	bl	18b10 <net_buf_simple_add>
	hdr->param_len = param_len;
    488e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    4890:	8006      	strh	r6, [r0, #0]
}
    4892:	4620      	mov	r0, r4
    4894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4898:	200008c8 	.word	0x200008c8
    489c:	20001120 	.word	0x20001120

000048a0 <bt_hci_cmd_send_sync>:
{
    48a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    48a2:	4615      	mov	r5, r2
    48a4:	b087      	sub	sp, #28
	if (!buf) {
    48a6:	460c      	mov	r4, r1
    48a8:	b921      	cbnz	r1, 48b4 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    48aa:	f7ff ffbf 	bl	482c <bt_hci_cmd_create>
		if (!buf) {
    48ae:	4604      	mov	r4, r0
    48b0:	2800      	cmp	r0, #0
    48b2:	d048      	beq.n	4946 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    48b4:	2201      	movs	r2, #1
    48b6:	2100      	movs	r1, #0
    48b8:	4668      	mov	r0, sp
    48ba:	f014 ff17 	bl	196ec <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    48be:	4620      	mov	r0, r4
    48c0:	f00d fea2 	bl	12608 <net_buf_id>
    48c4:	4f21      	ldr	r7, [pc, #132]	; (494c <bt_hci_cmd_send_sync+0xac>)
    48c6:	230c      	movs	r3, #12
    48c8:	fb03 7000 	mla	r0, r3, r0, r7
    48cc:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    48d0:	4620      	mov	r0, r4
    48d2:	f014 f8eb 	bl	18aac <net_buf_ref>
    48d6:	4601      	mov	r1, r0
    48d8:	481d      	ldr	r0, [pc, #116]	; (4950 <bt_hci_cmd_send_sync+0xb0>)
    48da:	f014 f8da 	bl	18a92 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    48de:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    48e2:	2300      	movs	r3, #0
    48e4:	4668      	mov	r0, sp
    48e6:	f010 fa9f 	bl	14e28 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    48ea:	4606      	mov	r6, r0
    48ec:	b180      	cbz	r0, 4910 <bt_hci_cmd_send_sync+0x70>
    48ee:	4a19      	ldr	r2, [pc, #100]	; (4954 <bt_hci_cmd_send_sync+0xb4>)
    48f0:	4919      	ldr	r1, [pc, #100]	; (4958 <bt_hci_cmd_send_sync+0xb8>)
    48f2:	481a      	ldr	r0, [pc, #104]	; (495c <bt_hci_cmd_send_sync+0xbc>)
    48f4:	f240 132b 	movw	r3, #299	; 0x12b
    48f8:	f011 fcfb 	bl	162f2 <assert_print>
    48fc:	4818      	ldr	r0, [pc, #96]	; (4960 <bt_hci_cmd_send_sync+0xc0>)
    48fe:	4631      	mov	r1, r6
    4900:	f011 fcf7 	bl	162f2 <assert_print>
    4904:	4040      	eors	r0, r0
    4906:	f380 8811 	msr	BASEPRI, r0
    490a:	f04f 0003 	mov.w	r0, #3
    490e:	df02      	svc	2
	status = cmd(buf)->status;
    4910:	4620      	mov	r0, r4
    4912:	f00d fe79 	bl	12608 <net_buf_id>
    4916:	230c      	movs	r3, #12
    4918:	4358      	muls	r0, r3
    491a:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    491c:	b156      	cbz	r6, 4934 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    491e:	4620      	mov	r0, r4
    4920:	f00d ff2e 	bl	12780 <net_buf_unref>
			return -EIO;
    4924:	2e09      	cmp	r6, #9
    4926:	bf0c      	ite	eq
    4928:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    492c:	f06f 0004 	mvnne.w	r0, #4
}
    4930:	b007      	add	sp, #28
    4932:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    4934:	b115      	cbz	r5, 493c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    4936:	602c      	str	r4, [r5, #0]
	return 0;
    4938:	4630      	mov	r0, r6
    493a:	e7f9      	b.n	4930 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    493c:	4620      	mov	r0, r4
    493e:	f00d ff1f 	bl	12780 <net_buf_unref>
	return 0;
    4942:	4628      	mov	r0, r5
    4944:	e7f4      	b.n	4930 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    4946:	f06f 0068 	mvn.w	r0, #104	; 0x68
    494a:	e7f1      	b.n	4930 <bt_hci_cmd_send_sync+0x90>
    494c:	20001120 	.word	0x20001120
    4950:	20000134 	.word	0x20000134
    4954:	0001b3c9 	.word	0x0001b3c9
    4958:	0001b3fd 	.word	0x0001b3fd
    495c:	0001b406 	.word	0x0001b406
    4960:	0001b423 	.word	0x0001b423

00004964 <bt_le_create_conn_legacy>:
{
    4964:	b5f0      	push	{r4, r5, r6, r7, lr}
    4966:	b087      	sub	sp, #28
    4968:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    496a:	f10d 010b 	add.w	r1, sp, #11
    496e:	2000      	movs	r0, #0
    4970:	f000 feec 	bl	574c <bt_id_set_create_conn_own_addr>
	if (err) {
    4974:	4604      	mov	r4, r0
    4976:	2800      	cmp	r0, #0
    4978:	d13d      	bne.n	49f6 <bt_le_create_conn_legacy+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    497a:	2119      	movs	r1, #25
    497c:	f242 000d 	movw	r0, #8205	; 0x200d
    4980:	f7ff ff54 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    4984:	4607      	mov	r7, r0
    4986:	b3c8      	cbz	r0, 49fc <bt_le_create_conn_legacy+0x98>
    4988:	2119      	movs	r1, #25
    498a:	3008      	adds	r0, #8
    498c:	f014 f8c0 	bl	18b10 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    4990:	2219      	movs	r2, #25
    4992:	4605      	mov	r5, r0
    4994:	4621      	mov	r1, r4
    4996:	f011 ff37 	bl	16808 <memset>
	cp->own_addr_type = own_addr_type;
    499a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    499e:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    49a0:	f106 0188 	add.w	r1, r6, #136	; 0x88
    49a4:	1d68      	adds	r0, r5, #5
    49a6:	f011 ffcb 	bl	16940 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    49aa:	4a16      	ldr	r2, [pc, #88]	; (4a04 <bt_le_create_conn_legacy+0xa0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    49ac:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    49ae:	8993      	ldrh	r3, [r2, #12]
    49b0:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    49b2:	89d3      	ldrh	r3, [r2, #14]
    49b4:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    49b6:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    49ba:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    49be:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    49c2:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    49c6:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    49ca:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    49ce:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    49d2:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    49d6:	2301      	movs	r3, #1
    49d8:	9300      	str	r3, [sp, #0]
    49da:	230c      	movs	r3, #12
    49dc:	eb0d 0103 	add.w	r1, sp, r3
    49e0:	32cc      	adds	r2, #204	; 0xcc
    49e2:	4638      	mov	r0, r7
    49e4:	f7ff ff10 	bl	4808 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    49e8:	4622      	mov	r2, r4
    49ea:	4639      	mov	r1, r7
    49ec:	f242 000d 	movw	r0, #8205	; 0x200d
    49f0:	f7ff ff56 	bl	48a0 <bt_hci_cmd_send_sync>
    49f4:	4604      	mov	r4, r0
}
    49f6:	4620      	mov	r0, r4
    49f8:	b007      	add	sp, #28
    49fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    49fc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4a00:	e7f9      	b.n	49f6 <bt_le_create_conn_legacy+0x92>
    4a02:	bf00      	nop
    4a04:	20000000 	.word	0x20000000

00004a08 <bt_le_create_conn_cancel>:
{
    4a08:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    4a0a:	2100      	movs	r1, #0
{
    4a0c:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    4a0e:	f242 000e 	movw	r0, #8206	; 0x200e
    4a12:	f7ff ff0b 	bl	482c <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    4a16:	2500      	movs	r5, #0
    4a18:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    4a1a:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    4a1c:	eb0d 0103 	add.w	r1, sp, r3
    4a20:	4a05      	ldr	r2, [pc, #20]	; (4a38 <bt_le_create_conn_cancel+0x30>)
    4a22:	9500      	str	r5, [sp, #0]
    4a24:	f7ff fef0 	bl	4808 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    4a28:	462a      	mov	r2, r5
    4a2a:	4621      	mov	r1, r4
    4a2c:	f242 000e 	movw	r0, #8206	; 0x200e
    4a30:	f7ff ff36 	bl	48a0 <bt_hci_cmd_send_sync>
}
    4a34:	b007      	add	sp, #28
    4a36:	bd30      	pop	{r4, r5, pc}
    4a38:	200000cc 	.word	0x200000cc

00004a3c <bt_hci_le_enh_conn_complete>:
{
    4a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4a40:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    4a44:	4a7c      	ldr	r2, [pc, #496]	; (4c38 <bt_hci_le_enh_conn_complete+0x1fc>)
	if (evt->status) {
    4a46:	7806      	ldrb	r6, [r0, #0]
		if (disconnected_handles[i] == handle) {
    4a48:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    4a4a:	ea6f 5308 	mvn.w	r3, r8, lsl #20
    4a4e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    4a52:	b29b      	uxth	r3, r3
    4a54:	4299      	cmp	r1, r3
    4a56:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
    4a5a:	bf08      	it	eq
    4a5c:	8017      	strheq	r7, [r2, #0]
{
    4a5e:	b089      	sub	sp, #36	; 0x24
    4a60:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4a62:	fa1f f988 	uxth.w	r9, r8
			return true;
    4a66:	bf08      	it	eq
    4a68:	2701      	moveq	r7, #1
	if (evt->status) {
    4a6a:	b306      	cbz	r6, 4aae <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4a6c:	2e02      	cmp	r6, #2
    4a6e:	d11b      	bne.n	4aa8 <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    4a70:	2100      	movs	r1, #0
    4a72:	2206      	movs	r2, #6
    4a74:	4608      	mov	r0, r1
    4a76:	f001 fc49 	bl	630c <bt_conn_lookup_state_le>
	if (!conn) {
    4a7a:	4604      	mov	r4, r0
    4a7c:	b188      	cbz	r0, 4aa2 <bt_hci_le_enh_conn_complete+0x66>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    4a7e:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4a80:	2100      	movs	r1, #0
    4a82:	f001 fa93 	bl	5fac <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4a86:	f3bf 8f5b 	dmb	ish
    4a8a:	6863      	ldr	r3, [r4, #4]
    4a8c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4a90:	07dd      	lsls	r5, r3, #31
    4a92:	d503      	bpl.n	4a9c <bt_hci_le_enh_conn_complete+0x60>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
    4a94:	4631      	mov	r1, r6
    4a96:	4620      	mov	r0, r4
    4a98:	f001 fa88 	bl	5fac <bt_conn_set_state>
	bt_conn_unref(conn);
    4a9c:	4620      	mov	r0, r4
    4a9e:	f012 fada 	bl	17056 <bt_conn_unref>
			bt_le_scan_update(false);
    4aa2:	2000      	movs	r0, #0
    4aa4:	f000 ff1e 	bl	58e4 <bt_le_scan_update>
}
    4aa8:	b009      	add	sp, #36	; 0x24
    4aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4aae:	7903      	ldrb	r3, [r0, #4]
    4ab0:	3b02      	subs	r3, #2
    4ab2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    4ab4:	f100 0404 	add.w	r4, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4ab8:	d826      	bhi.n	4b08 <bt_hci_le_enh_conn_complete+0xcc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    4aba:	4621      	mov	r1, r4
    4abc:	a806      	add	r0, sp, #24
    4abe:	f011 ff3f 	bl	16940 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4ac2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
    4ac6:	2206      	movs	r2, #6
    4ac8:	3b02      	subs	r3, #2
    4aca:	f105 0111 	add.w	r1, r5, #17
    4ace:	f10d 0011 	add.w	r0, sp, #17
    4ad2:	f88d 3018 	strb.w	r3, [sp, #24]
    4ad6:	f011 fe8c 	bl	167f2 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    4ada:	2301      	movs	r3, #1
    4adc:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    4ae0:	78e8      	ldrb	r0, [r5, #3]
    4ae2:	b960      	cbnz	r0, 4afe <bt_hci_le_enh_conn_complete+0xc2>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    4ae4:	2206      	movs	r2, #6
    4ae6:	a906      	add	r1, sp, #24
    4ae8:	f001 fc10 	bl	630c <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4aec:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    4aee:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4af0:	b923      	cbnz	r3, 4afc <bt_hci_le_enh_conn_complete+0xc0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4af2:	4852      	ldr	r0, [pc, #328]	; (4c3c <bt_hci_le_enh_conn_complete+0x200>)
    4af4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    4af8:	f011 ffd8 	bl	16aac <atomic_and.isra.0>
	if (!conn) {
    4afc:	b9bc      	cbnz	r4, 4b2e <bt_hci_le_enh_conn_complete+0xf2>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    4afe:	211f      	movs	r1, #31
    4b00:	4648      	mov	r0, r9
    4b02:	f012 f858 	bl	16bb6 <bt_hci_disconnect>
		return;
    4b06:	e7cf      	b.n	4aa8 <bt_hci_le_enh_conn_complete+0x6c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    4b08:	78c3      	ldrb	r3, [r0, #3]
    4b0a:	2b01      	cmp	r3, #1
    4b0c:	bf04      	itt	eq
    4b0e:	4b4c      	ldreq	r3, [pc, #304]	; (4c40 <bt_hci_le_enh_conn_complete+0x204>)
    4b10:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    4b14:	4621      	mov	r1, r4
    4b16:	4630      	mov	r0, r6
    4b18:	f012 f9b3 	bl	16e82 <bt_lookup_id_addr>
    4b1c:	4601      	mov	r1, r0
    4b1e:	a806      	add	r0, sp, #24
    4b20:	f011 ff0e 	bl	16940 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    4b24:	4621      	mov	r1, r4
    4b26:	a804      	add	r0, sp, #16
    4b28:	f011 ff0a 	bl	16940 <bt_addr_le_copy>
    4b2c:	e7d8      	b.n	4ae0 <bt_hci_le_enh_conn_complete+0xa4>
	conn->handle = handle;
    4b2e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    4b30:	a906      	add	r1, sp, #24
	conn->handle = handle;
    4b32:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    4b36:	f011 ff03 	bl	16940 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    4b3a:	7e2a      	ldrb	r2, [r5, #24]
    4b3c:	7deb      	ldrb	r3, [r5, #23]
    4b3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b42:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    4b46:	7eaa      	ldrb	r2, [r5, #26]
    4b48:	7e6b      	ldrb	r3, [r5, #25]
    4b4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4b52:	7f2a      	ldrb	r2, [r5, #28]
    4b54:	7eeb      	ldrb	r3, [r5, #27]
    4b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b5a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    4b5e:	78eb      	ldrb	r3, [r5, #3]
    4b60:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    4b62:	2200      	movs	r2, #0
    4b64:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4b66:	b96b      	cbnz	r3, 4b84 <bt_hci_le_enh_conn_complete+0x148>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    4b68:	a904      	add	r1, sp, #16
    4b6a:	f104 0096 	add.w	r0, r4, #150	; 0x96
    4b6e:	f011 fee7 	bl	16940 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    4b72:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    4b74:	4b32      	ldr	r3, [pc, #200]	; (4c40 <bt_hci_le_enh_conn_complete+0x204>)
					&bt_dev.id_addr[conn->id]);
    4b76:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    4b7a:	4419      	add	r1, r3
    4b7c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    4b80:	f011 fede 	bl	16940 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    4b84:	2107      	movs	r1, #7
    4b86:	4620      	mov	r0, r4
    4b88:	f001 fa10 	bl	5fac <bt_conn_set_state>
	if (is_disconnected) {
    4b8c:	b11f      	cbz	r7, 4b96 <bt_hci_le_enh_conn_complete+0x15a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4b8e:	2101      	movs	r1, #1
    4b90:	4620      	mov	r0, r4
    4b92:	f001 fa0b 	bl	5fac <bt_conn_set_state>
	bt_conn_connected(conn);
    4b96:	4620      	mov	r0, r4
    4b98:	f012 fa60 	bl	1705c <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    4b9c:	7aa3      	ldrb	r3, [r4, #10]
    4b9e:	2b07      	cmp	r3, #7
    4ba0:	d142      	bne.n	4c28 <bt_hci_le_enh_conn_complete+0x1ec>
    4ba2:	f3bf 8f5b 	dmb	ish
    4ba6:	6863      	ldr	r3, [r4, #4]
    4ba8:	4e25      	ldr	r6, [pc, #148]	; (4c40 <bt_hci_le_enh_conn_complete+0x204>)
    4baa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    4bae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4bb2:	d118      	bne.n	4be6 <bt_hci_le_enh_conn_complete+0x1aa>
    4bb4:	78e3      	ldrb	r3, [r4, #3]
    4bb6:	b11b      	cbz	r3, 4bc0 <bt_hci_le_enh_conn_complete+0x184>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    4bb8:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
    4bbc:	0718      	lsls	r0, r3, #28
    4bbe:	d512      	bpl.n	4be6 <bt_hci_le_enh_conn_complete+0x1aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4bc0:	2102      	movs	r1, #2
    4bc2:	f242 0016 	movw	r0, #8214	; 0x2016
    4bc6:	f7ff fe31 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    4bca:	4605      	mov	r5, r0
    4bcc:	b158      	cbz	r0, 4be6 <bt_hci_le_enh_conn_complete+0x1aa>
    4bce:	2102      	movs	r1, #2
    4bd0:	3008      	adds	r0, #8
    4bd2:	f013 ff9d 	bl	18b10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4bd6:	8823      	ldrh	r3, [r4, #0]
    4bd8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    4bda:	2200      	movs	r2, #0
    4bdc:	4629      	mov	r1, r5
    4bde:	f242 0016 	movw	r0, #8214	; 0x2016
    4be2:	f7ff fe5d 	bl	48a0 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    4be6:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
    4bea:	07d9      	lsls	r1, r3, #31
    4bec:	d506      	bpl.n	4bfc <bt_hci_le_enh_conn_complete+0x1c0>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    4bee:	2100      	movs	r1, #0
    4bf0:	2302      	movs	r3, #2
    4bf2:	9100      	str	r1, [sp, #0]
    4bf4:	461a      	mov	r2, r3
    4bf6:	4620      	mov	r0, r4
    4bf8:	f012 f816 	bl	16c28 <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    4bfc:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
    4c00:	069a      	lsls	r2, r3, #26
    4c02:	d511      	bpl.n	4c28 <bt_hci_le_enh_conn_complete+0x1ec>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    4c04:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    4c08:	689b      	ldr	r3, [r3, #8]
    4c0a:	079b      	lsls	r3, r3, #30
    4c0c:	d50c      	bpl.n	4c28 <bt_hci_le_enh_conn_complete+0x1ec>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    4c0e:	f10d 010e 	add.w	r1, sp, #14
    4c12:	a803      	add	r0, sp, #12
    4c14:	f011 ffb5 	bl	16b82 <hci_le_read_max_data_len>
			if (!err) {
    4c18:	b930      	cbnz	r0, 4c28 <bt_hci_le_enh_conn_complete+0x1ec>
				err = bt_le_set_data_len(conn,
    4c1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    4c1e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    4c22:	4620      	mov	r0, r4
    4c24:	f011 ffe2 	bl	16bec <bt_le_set_data_len>
	bt_conn_unref(conn);
    4c28:	4620      	mov	r0, r4
    4c2a:	f012 fa14 	bl	17056 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4c2e:	78e3      	ldrb	r3, [r4, #3]
    4c30:	2b00      	cmp	r3, #0
    4c32:	f47f af39 	bne.w	4aa8 <bt_hci_le_enh_conn_complete+0x6c>
    4c36:	e734      	b.n	4aa2 <bt_hci_le_enh_conn_complete+0x66>
    4c38:	20002218 	.word	0x20002218
    4c3c:	200000cc 	.word	0x200000cc
    4c40:	20000000 	.word	0x20000000

00004c44 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    4c44:	4b02      	ldr	r3, [pc, #8]	; (4c50 <bt_send+0xc>)
    4c46:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    4c4a:	695b      	ldr	r3, [r3, #20]
    4c4c:	4718      	bx	r3
    4c4e:	bf00      	nop
    4c50:	20000000 	.word	0x20000000

00004c54 <bt_hci_cmd_send>:
{
    4c54:	b538      	push	{r3, r4, r5, lr}
    4c56:	4605      	mov	r5, r0
	if (!buf) {
    4c58:	460c      	mov	r4, r1
    4c5a:	b919      	cbnz	r1, 4c64 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    4c5c:	f7ff fde6 	bl	482c <bt_hci_cmd_create>
		if (!buf) {
    4c60:	4604      	mov	r4, r0
    4c62:	b198      	cbz	r0, 4c8c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4c64:	f640 4335 	movw	r3, #3125	; 0xc35
    4c68:	429d      	cmp	r5, r3
    4c6a:	d109      	bne.n	4c80 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    4c6c:	4620      	mov	r0, r4
    4c6e:	f7ff ffe9 	bl	4c44 <bt_send>
		if (err) {
    4c72:	4605      	mov	r5, r0
    4c74:	b110      	cbz	r0, 4c7c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    4c76:	4620      	mov	r0, r4
    4c78:	f00d fd82 	bl	12780 <net_buf_unref>
}
    4c7c:	4628      	mov	r0, r5
    4c7e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4c80:	4804      	ldr	r0, [pc, #16]	; (4c94 <bt_hci_cmd_send+0x40>)
    4c82:	4621      	mov	r1, r4
    4c84:	f013 ff05 	bl	18a92 <net_buf_put>
	return 0;
    4c88:	2500      	movs	r5, #0
    4c8a:	e7f7      	b.n	4c7c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    4c8c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4c90:	e7f4      	b.n	4c7c <bt_hci_cmd_send+0x28>
    4c92:	bf00      	nop
    4c94:	20000134 	.word	0x20000134

00004c98 <hci_tx_thread>:
{
    4c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    4c9c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4da8 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    4ca0:	f8df a108 	ldr.w	sl, [pc, #264]	; 4dac <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    4ca4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4ca8:	4841      	ldr	r0, [pc, #260]	; (4db0 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4caa:	f36f 3352 	bfc	r3, #13, #6
    4cae:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4cb2:	f001 f937 	bl	5f24 <bt_conn_prepare_events>
    4cb6:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    4cb8:	483b      	ldr	r0, [pc, #236]	; (4da8 <hci_tx_thread+0x110>)
    4cba:	f04f 32ff 	mov.w	r2, #4294967295
    4cbe:	f04f 33ff 	mov.w	r3, #4294967295
    4cc2:	4629      	mov	r1, r5
    4cc4:	f010 ff0c 	bl	15ae0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    4cc8:	b160      	cbz	r0, 4ce4 <hci_tx_thread+0x4c>
    4cca:	493a      	ldr	r1, [pc, #232]	; (4db4 <hci_tx_thread+0x11c>)
    4ccc:	483a      	ldr	r0, [pc, #232]	; (4db8 <hci_tx_thread+0x120>)
    4cce:	f640 13ab 	movw	r3, #2475	; 0x9ab
    4cd2:	4652      	mov	r2, sl
    4cd4:	f011 fb0d 	bl	162f2 <assert_print>
    4cd8:	4040      	eors	r0, r0
    4cda:	f380 8811 	msr	BASEPRI, r0
    4cde:	f04f 0003 	mov.w	r0, #3
    4ce2:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4ce4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 4dbc <hci_tx_thread+0x124>
{
    4ce8:	4e2f      	ldr	r6, [pc, #188]	; (4da8 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    4cea:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    4cee:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    4cf2:	b915      	cbnz	r5, 4cfa <hci_tx_thread+0x62>
	z_impl_k_yield();
    4cf4:	f010 fc88 	bl	15608 <z_impl_k_yield>
	while (1) {
    4cf8:	e7d4      	b.n	4ca4 <hci_tx_thread+0xc>
		switch (ev->state) {
    4cfa:	68f3      	ldr	r3, [r6, #12]
    4cfc:	f3c3 3345 	ubfx	r3, r3, #13, #6
    4d00:	2b04      	cmp	r3, #4
    4d02:	d147      	bne.n	4d94 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    4d04:	7b33      	ldrb	r3, [r6, #12]
    4d06:	2b00      	cmp	r3, #0
    4d08:	d147      	bne.n	4d9a <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4d0a:	2200      	movs	r2, #0
    4d0c:	2300      	movs	r3, #0
    4d0e:	4648      	mov	r0, r9
    4d10:	f013 fe9b 	bl	18a4a <net_buf_get>
	BT_ASSERT(buf);
    4d14:	4604      	mov	r4, r0
    4d16:	b960      	cbnz	r0, 4d32 <hci_tx_thread+0x9a>
    4d18:	4929      	ldr	r1, [pc, #164]	; (4dc0 <hci_tx_thread+0x128>)
    4d1a:	4827      	ldr	r0, [pc, #156]	; (4db8 <hci_tx_thread+0x120>)
    4d1c:	f640 1342 	movw	r3, #2370	; 0x942
    4d20:	4652      	mov	r2, sl
    4d22:	f011 fae6 	bl	162f2 <assert_print>
    4d26:	4040      	eors	r0, r0
    4d28:	f380 8811 	msr	BASEPRI, r0
    4d2c:	f04f 0003 	mov.w	r0, #3
    4d30:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    4d32:	f04f 32ff 	mov.w	r2, #4294967295
    4d36:	f04f 33ff 	mov.w	r3, #4294967295
    4d3a:	4658      	mov	r0, fp
    4d3c:	f010 f874 	bl	14e28 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4d40:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    4d44:	b120      	cbz	r0, 4d50 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    4d46:	f00d fd1b 	bl	12780 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4d4a:	2300      	movs	r3, #0
    4d4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    4d50:	4620      	mov	r0, r4
    4d52:	f013 feab 	bl	18aac <net_buf_ref>
    4d56:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
    4d5a:	4620      	mov	r0, r4
    4d5c:	f7ff ff72 	bl	4c44 <bt_send>
	if (err) {
    4d60:	b1c0      	cbz	r0, 4d94 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    4d62:	4818      	ldr	r0, [pc, #96]	; (4dc4 <hci_tx_thread+0x12c>)
    4d64:	f010 f83a 	bl	14ddc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    4d68:	4620      	mov	r0, r4
    4d6a:	f00d fc4d 	bl	12608 <net_buf_id>
    4d6e:	4b16      	ldr	r3, [pc, #88]	; (4dc8 <hci_tx_thread+0x130>)
    4d70:	220c      	movs	r2, #12
    4d72:	fb02 3000 	mla	r0, r2, r0, r3
    4d76:	211f      	movs	r1, #31
    4d78:	8840      	ldrh	r0, [r0, #2]
    4d7a:	4622      	mov	r2, r4
    4d7c:	f7ff fcb8 	bl	46f0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4d80:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    4d84:	f00d fcfc 	bl	12780 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4d88:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4d8a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    4d8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    4d90:	f00d fcf6 	bl	12780 <net_buf_unref>
	for (; count; ev++, count--) {
    4d94:	3614      	adds	r6, #20
    4d96:	3d01      	subs	r5, #1
    4d98:	e7ab      	b.n	4cf2 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4d9a:	2b01      	cmp	r3, #1
    4d9c:	d1fa      	bne.n	4d94 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    4d9e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    4da0:	3838      	subs	r0, #56	; 0x38
    4da2:	f001 fcbb 	bl	671c <bt_conn_process_tx>
    4da6:	e7f5      	b.n	4d94 <hci_tx_thread+0xfc>
    4da8:	2000016c 	.word	0x2000016c
    4dac:	0001b3c9 	.word	0x0001b3c9
    4db0:	20000180 	.word	0x20000180
    4db4:	0001b3fd 	.word	0x0001b3fd
    4db8:	0001b406 	.word	0x0001b406
    4dbc:	20000134 	.word	0x20000134
    4dc0:	0001b443 	.word	0x0001b443
    4dc4:	20000118 	.word	0x20000118
    4dc8:	20001120 	.word	0x20001120

00004dcc <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    4dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dd0:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    4dd2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    4dd6:	4630      	mov	r0, r6
    4dd8:	f013 fedb 	bl	18b92 <net_buf_simple_headroom>
	state->len = buf->len;
    4ddc:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    4de0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    4de4:	4605      	mov	r5, r0
    4de6:	d80c      	bhi.n	4e02 <hci_event_prio+0x36>
    4de8:	4a1c      	ldr	r2, [pc, #112]	; (4e5c <hci_event_prio+0x90>)
    4dea:	491d      	ldr	r1, [pc, #116]	; (4e60 <hci_event_prio+0x94>)
    4dec:	481d      	ldr	r0, [pc, #116]	; (4e64 <hci_event_prio+0x98>)
    4dee:	f640 5347 	movw	r3, #3399	; 0xd47
    4df2:	f011 fa7e 	bl	162f2 <assert_print>
    4df6:	4040      	eors	r0, r0
    4df8:	f380 8811 	msr	BASEPRI, r0
    4dfc:	f04f 0003 	mov.w	r0, #3
    4e00:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4e02:	4630      	mov	r0, r6
    4e04:	2102      	movs	r1, #2
    4e06:	f013 feac 	bl	18b62 <net_buf_simple_pull_mem>
    4e0a:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4e0c:	7800      	ldrb	r0, [r0, #0]
    4e0e:	f011 fd70 	bl	168f2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4e12:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4e14:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4e16:	d40c      	bmi.n	4e32 <hci_event_prio+0x66>
    4e18:	4a10      	ldr	r2, [pc, #64]	; (4e5c <hci_event_prio+0x90>)
    4e1a:	4913      	ldr	r1, [pc, #76]	; (4e68 <hci_event_prio+0x9c>)
    4e1c:	4811      	ldr	r0, [pc, #68]	; (4e64 <hci_event_prio+0x98>)
    4e1e:	f640 534b 	movw	r3, #3403	; 0xd4b
    4e22:	f011 fa66 	bl	162f2 <assert_print>
    4e26:	4040      	eors	r0, r0
    4e28:	f380 8811 	msr	BASEPRI, r0
    4e2c:	f04f 0003 	mov.w	r0, #3
    4e30:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    4e32:	2305      	movs	r3, #5
    4e34:	4a0d      	ldr	r2, [pc, #52]	; (4e6c <hci_event_prio+0xa0>)
    4e36:	7838      	ldrb	r0, [r7, #0]
    4e38:	4621      	mov	r1, r4
    4e3a:	f011 fd6c 	bl	16916 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    4e3e:	07b3      	lsls	r3, r6, #30
    4e40:	d507      	bpl.n	4e52 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    4e42:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4e44:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4e48:	fa10 f585 	uxtah	r5, r0, r5
    4e4c:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    4e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    4e52:	4620      	mov	r0, r4
}
    4e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4e58:	f00d bc92 	b.w	12780 <net_buf_unref>
    4e5c:	0001b3c9 	.word	0x0001b3c9
    4e60:	0001b447 	.word	0x0001b447
    4e64:	0001b406 	.word	0x0001b406
    4e68:	0001b460 	.word	0x0001b460
    4e6c:	0001a2a4 	.word	0x0001a2a4

00004e70 <bt_recv>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_recv(struct net_buf *buf)
{
    4e70:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4e72:	7d03      	ldrb	r3, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    4e74:	2b01      	cmp	r3, #1
{
    4e76:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    4e78:	d036      	beq.n	4ee8 <bt_recv+0x78>
    4e7a:	2b03      	cmp	r3, #3
    4e7c:	d163      	bne.n	4f46 <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4e7e:	8983      	ldrh	r3, [r0, #12]
    4e80:	2b03      	cmp	r3, #3
    4e82:	d80c      	bhi.n	4e9e <bt_recv+0x2e>
    4e84:	4a32      	ldr	r2, [pc, #200]	; (4f50 <bt_recv+0xe0>)
    4e86:	4933      	ldr	r1, [pc, #204]	; (4f54 <bt_recv+0xe4>)
    4e88:	4833      	ldr	r0, [pc, #204]	; (4f58 <bt_recv+0xe8>)
    4e8a:	f240 13cf 	movw	r3, #463	; 0x1cf
    4e8e:	f011 fa30 	bl	162f2 <assert_print>
    4e92:	4040      	eors	r0, r0
    4e94:	f380 8811 	msr	BASEPRI, r0
    4e98:	f04f 0003 	mov.w	r0, #3
    4e9c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4e9e:	2104      	movs	r1, #4
    4ea0:	f104 0008 	add.w	r0, r4, #8
    4ea4:	f013 fe5d 	bl	18b62 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4ea8:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    4eaa:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4eac:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    4eae:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    4eb0:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    4eb2:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    4eb6:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    4eb8:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    4eba:	d003      	beq.n	4ec4 <bt_recv+0x54>
	net_buf_unref(buf);
    4ebc:	4620      	mov	r0, r4
    4ebe:	f00d fc5f 	bl	12780 <net_buf_unref>
    4ec2:	e00f      	b.n	4ee4 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4ec4:	f001 f86a 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
    4ec8:	4605      	mov	r5, r0
    4eca:	2800      	cmp	r0, #0
    4ecc:	d0f6      	beq.n	4ebc <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    4ece:	f001 f943 	bl	6158 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4ed2:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    4ed4:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4ed6:	4621      	mov	r1, r4
    4ed8:	4628      	mov	r0, r5
    4eda:	f012 f834 	bl	16f46 <bt_conn_recv>
	bt_conn_unref(conn);
    4ede:	4628      	mov	r0, r5
    4ee0:	f012 f8b9 	bl	17056 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			rx_queue_put(buf);
		}
#endif
		return 0;
    4ee4:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    4ee6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4ee8:	8983      	ldrh	r3, [r0, #12]
    4eea:	2b01      	cmp	r3, #1
    4eec:	d80c      	bhi.n	4f08 <bt_recv+0x98>
    4eee:	4a18      	ldr	r2, [pc, #96]	; (4f50 <bt_recv+0xe0>)
    4ef0:	4918      	ldr	r1, [pc, #96]	; (4f54 <bt_recv+0xe4>)
    4ef2:	4819      	ldr	r0, [pc, #100]	; (4f58 <bt_recv+0xe8>)
    4ef4:	f640 132f 	movw	r3, #2351	; 0x92f
    4ef8:	f011 f9fb 	bl	162f2 <assert_print>
    4efc:	4040      	eors	r0, r0
    4efe:	f380 8811 	msr	BASEPRI, r0
    4f02:	f04f 0003 	mov.w	r0, #3
    4f06:	df02      	svc	2
    4f08:	2102      	movs	r1, #2
    4f0a:	f104 0008 	add.w	r0, r4, #8
    4f0e:	f013 fe28 	bl	18b62 <net_buf_simple_pull_mem>
    4f12:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4f14:	7800      	ldrb	r0, [r0, #0]
    4f16:	f011 fcec 	bl	168f2 <bt_hci_evt_get_flags>
    4f1a:	0783      	lsls	r3, r0, #30
    4f1c:	d40c      	bmi.n	4f38 <bt_recv+0xc8>
    4f1e:	4a0c      	ldr	r2, [pc, #48]	; (4f50 <bt_recv+0xe0>)
    4f20:	490e      	ldr	r1, [pc, #56]	; (4f5c <bt_recv+0xec>)
    4f22:	480d      	ldr	r0, [pc, #52]	; (4f58 <bt_recv+0xe8>)
    4f24:	f640 1333 	movw	r3, #2355	; 0x933
    4f28:	f011 f9e3 	bl	162f2 <assert_print>
    4f2c:	4040      	eors	r0, r0
    4f2e:	f380 8811 	msr	BASEPRI, r0
    4f32:	f04f 0003 	mov.w	r0, #3
    4f36:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4f38:	4a09      	ldr	r2, [pc, #36]	; (4f60 <bt_recv+0xf0>)
    4f3a:	7828      	ldrb	r0, [r5, #0]
    4f3c:	2304      	movs	r3, #4
    4f3e:	4621      	mov	r1, r4
    4f40:	f011 fce9 	bl	16916 <handle_event>
    4f44:	e7ba      	b.n	4ebc <bt_recv+0x4c>
		net_buf_unref(buf);
    4f46:	f00d fc1b 	bl	12780 <net_buf_unref>
		return -EINVAL;
    4f4a:	f06f 0015 	mvn.w	r0, #21
    4f4e:	e7ca      	b.n	4ee6 <bt_recv+0x76>
    4f50:	0001b3c9 	.word	0x0001b3c9
    4f54:	0001b447 	.word	0x0001b447
    4f58:	0001b406 	.word	0x0001b406
    4f5c:	0001b479 	.word	0x0001b479
    4f60:	0001a284 	.word	0x0001a284

00004f64 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    4f64:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4f66:	7d03      	ldrb	r3, [r0, #20]
    4f68:	2b01      	cmp	r3, #1
{
    4f6a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4f6c:	d00c      	beq.n	4f88 <bt_recv_prio+0x24>
    4f6e:	4a09      	ldr	r2, [pc, #36]	; (4f94 <bt_recv_prio+0x30>)
    4f70:	4909      	ldr	r1, [pc, #36]	; (4f98 <bt_recv_prio+0x34>)
    4f72:	480a      	ldr	r0, [pc, #40]	; (4f9c <bt_recv_prio+0x38>)
    4f74:	f640 539d 	movw	r3, #3485	; 0xd9d
    4f78:	f011 f9bb 	bl	162f2 <assert_print>
    4f7c:	4040      	eors	r0, r0
    4f7e:	f380 8811 	msr	BASEPRI, r0
    4f82:	f04f 0003 	mov.w	r0, #3
    4f86:	df02      	svc	2

	hci_event_prio(buf);
    4f88:	4620      	mov	r0, r4
    4f8a:	f7ff ff1f 	bl	4dcc <hci_event_prio>

	return 0;
}
    4f8e:	2000      	movs	r0, #0
    4f90:	bd10      	pop	{r4, pc}
    4f92:	bf00      	nop
    4f94:	0001b3c9 	.word	0x0001b3c9
    4f98:	0001b4a7 	.word	0x0001b4a7
    4f9c:	0001b406 	.word	0x0001b406

00004fa0 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    4fa0:	4a08      	ldr	r2, [pc, #32]	; (4fc4 <bt_hci_driver_register+0x24>)
{
    4fa2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    4fa4:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    4fa8:	b930      	cbnz	r0, 4fb8 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    4faa:	68d9      	ldr	r1, [r3, #12]
    4fac:	b139      	cbz	r1, 4fbe <bt_hci_driver_register+0x1e>
    4fae:	6959      	ldr	r1, [r3, #20]
    4fb0:	b129      	cbz	r1, 4fbe <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    4fb2:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    4fb6:	4770      	bx	lr
		return -EALREADY;
    4fb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4fbc:	4770      	bx	lr
		return -EINVAL;
    4fbe:	f06f 0015 	mvn.w	r0, #21
}
    4fc2:	4770      	bx	lr
    4fc4:	20000000 	.word	0x20000000

00004fc8 <bt_finalize_init>:

void bt_finalize_init(void)
{
    4fc8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4fca:	4804      	ldr	r0, [pc, #16]	; (4fdc <bt_finalize_init+0x14>)
    4fcc:	2104      	movs	r1, #4
    4fce:	f011 fcf8 	bl	169c2 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    4fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    4fd6:	2000      	movs	r0, #0
    4fd8:	f000 bc84 	b.w	58e4 <bt_le_scan_update>
    4fdc:	200000cc 	.word	0x200000cc

00004fe0 <bt_init>:

static int bt_init(void)
{
    4fe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    4fe2:	4d3f      	ldr	r5, [pc, #252]	; (50e0 <bt_init+0x100>)
    4fe4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    4fe8:	6899      	ldr	r1, [r3, #8]
    4fea:	f011 0101 	ands.w	r1, r1, #1
    4fee:	d123      	bne.n	5038 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4ff0:	aa01      	add	r2, sp, #4
    4ff2:	f640 4003 	movw	r0, #3075	; 0xc03
    4ff6:	f7ff fc53 	bl	48a0 <bt_hci_cmd_send_sync>
		if (err) {
    4ffa:	4604      	mov	r4, r0
    4ffc:	2800      	cmp	r0, #0
    4ffe:	d16b      	bne.n	50d8 <bt_init+0xf8>
	uint8_t status = buf->data[0];
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	689b      	ldr	r3, [r3, #8]
	if (status) {
    5004:	781b      	ldrb	r3, [r3, #0]
    5006:	b9a3      	cbnz	r3, 5032 <bt_init+0x52>
		bt_scan_reset();
    5008:	f000 fc66 	bl	58d8 <bt_scan_reset>
    500c:	f3bf 8f5b 	dmb	ish
    5010:	462b      	mov	r3, r5
    5012:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    5016:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    501a:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    501e:	f3bf 8f5b 	dmb	ish
    5022:	e853 1f00 	ldrex	r1, [r3]
    5026:	e843 2000 	strex	r0, r2, [r3]
    502a:	2800      	cmp	r0, #0
    502c:	d1f9      	bne.n	5022 <bt_init+0x42>
    502e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    5032:	9801      	ldr	r0, [sp, #4]
    5034:	f00d fba4 	bl	12780 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    5038:	aa01      	add	r2, sp, #4
    503a:	2100      	movs	r1, #0
    503c:	f241 0003 	movw	r0, #4099	; 0x1003
    5040:	f7ff fc2e 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    5044:	4604      	mov	r4, r0
    5046:	2800      	cmp	r0, #0
    5048:	d146      	bne.n	50d8 <bt_init+0xf8>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    504a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    504c:	4825      	ldr	r0, [pc, #148]	; (50e4 <bt_init+0x104>)
    504e:	6899      	ldr	r1, [r3, #8]
    5050:	2208      	movs	r2, #8
    5052:	3101      	adds	r1, #1
    5054:	f011 fbcd 	bl	167f2 <memcpy>
	net_buf_unref(rsp);
    5058:	9801      	ldr	r0, [sp, #4]
    505a:	f00d fb91 	bl	12780 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    505e:	4621      	mov	r1, r4
    5060:	aa01      	add	r2, sp, #4
    5062:	f241 0001 	movw	r0, #4097	; 0x1001
    5066:	f7ff fc1b 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    506a:	4604      	mov	r4, r0
    506c:	2800      	cmp	r0, #0
    506e:	d133      	bne.n	50d8 <bt_init+0xf8>
	read_local_ver_complete(rsp);
    5070:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    5072:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    5074:	785a      	ldrb	r2, [r3, #1]
    5076:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    507a:	78d9      	ldrb	r1, [r3, #3]
    507c:	789a      	ldrb	r2, [r3, #2]
    507e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5082:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    5086:	791a      	ldrb	r2, [r3, #4]
    5088:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    508c:	7a19      	ldrb	r1, [r3, #8]
    508e:	79da      	ldrb	r2, [r3, #7]
    5090:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5094:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    5098:	795a      	ldrb	r2, [r3, #5]
    509a:	799b      	ldrb	r3, [r3, #6]
    509c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    50a0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    50a4:	f00d fb6c 	bl	12780 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    50a8:	4621      	mov	r1, r4
    50aa:	aa01      	add	r2, sp, #4
    50ac:	f241 0002 	movw	r0, #4098	; 0x1002
    50b0:	f7ff fbf6 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    50b4:	4604      	mov	r4, r0
    50b6:	b978      	cbnz	r0, 50d8 <bt_init+0xf8>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    50b8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    50ba:	480b      	ldr	r0, [pc, #44]	; (50e8 <bt_init+0x108>)
    50bc:	6899      	ldr	r1, [r3, #8]
    50be:	2240      	movs	r2, #64	; 0x40
    50c0:	3101      	adds	r1, #1
    50c2:	f011 fb96 	bl	167f2 <memcpy>
	net_buf_unref(rsp);
    50c6:	9801      	ldr	r0, [sp, #4]
    50c8:	f00d fb5a 	bl	12780 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    50cc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    50d0:	065e      	lsls	r6, r3, #25
    50d2:	d40b      	bmi.n	50ec <bt_init+0x10c>
		return -ENODEV;
    50d4:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    50d8:	4620      	mov	r0, r4
    50da:	b002      	add	sp, #8
    50dc:	bd70      	pop	{r4, r5, r6, pc}
    50de:	bf00      	nop
    50e0:	20000000 	.word	0x20000000
    50e4:	20000070 	.word	0x20000070
    50e8:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    50ec:	4621      	mov	r1, r4
    50ee:	aa01      	add	r2, sp, #4
    50f0:	f242 0003 	movw	r0, #8195	; 0x2003
    50f4:	f7ff fbd4 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    50f8:	4604      	mov	r4, r0
    50fa:	2800      	cmp	r0, #0
    50fc:	d1ec      	bne.n	50d8 <bt_init+0xf8>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    50fe:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5100:	48a1      	ldr	r0, [pc, #644]	; (5388 <bt_init+0x3a8>)
    5102:	6899      	ldr	r1, [r3, #8]
    5104:	2208      	movs	r2, #8
    5106:	3101      	adds	r1, #1
    5108:	f011 fb73 	bl	167f2 <memcpy>
	net_buf_unref(rsp);
    510c:	9801      	ldr	r0, [sp, #4]
    510e:	f00d fb37 	bl	12780 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    5112:	4621      	mov	r1, r4
    5114:	aa01      	add	r2, sp, #4
    5116:	f242 0002 	movw	r0, #8194	; 0x2002
    511a:	f7ff fbc1 	bl	48a0 <bt_hci_cmd_send_sync>
		if (err) {
    511e:	4604      	mov	r4, r0
    5120:	2800      	cmp	r0, #0
    5122:	d1d9      	bne.n	50d8 <bt_init+0xf8>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    5124:	9b01      	ldr	r3, [sp, #4]
    5126:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    5128:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    512c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    5130:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    5132:	b121      	cbz	r1, 513e <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    5134:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    5136:	4895      	ldr	r0, [pc, #596]	; (538c <bt_init+0x3ac>)
    5138:	4611      	mov	r1, r2
    513a:	f014 fad7 	bl	196ec <z_impl_k_sem_init>
		net_buf_unref(rsp);
    513e:	9801      	ldr	r0, [sp, #4]
    5140:	f00d fb1e 	bl	12780 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5144:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    5148:	f016 0620 	ands.w	r6, r6, #32
    514c:	f000 80f9 	beq.w	5342 <bt_init+0x362>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    5150:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    5154:	071c      	lsls	r4, r3, #28
    5156:	d512      	bpl.n	517e <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    5158:	aa01      	add	r2, sp, #4
    515a:	2100      	movs	r1, #0
    515c:	f242 001c 	movw	r0, #8220	; 0x201c
    5160:	f7ff fb9e 	bl	48a0 <bt_hci_cmd_send_sync>
		if (err) {
    5164:	4604      	mov	r4, r0
    5166:	2800      	cmp	r0, #0
    5168:	d1b6      	bne.n	50d8 <bt_init+0xf8>
		le_read_supp_states_complete(rsp);
    516a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    516c:	6883      	ldr	r3, [r0, #8]
    516e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    5172:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    5176:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    517a:	f00d fb01 	bl	12780 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    517e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    5182:	0698      	lsls	r0, r3, #26
    5184:	d523      	bpl.n	51ce <bt_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5186:	f10d 0102 	add.w	r1, sp, #2
    518a:	4668      	mov	r0, sp
    518c:	f011 fcf9 	bl	16b82 <hci_le_read_max_data_len>
		if (err) {
    5190:	4604      	mov	r4, r0
    5192:	2800      	cmp	r0, #0
    5194:	d1a0      	bne.n	50d8 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5196:	2104      	movs	r1, #4
    5198:	f242 0024 	movw	r0, #8228	; 0x2024
    519c:	f7ff fb46 	bl	482c <bt_hci_cmd_create>
		if (!buf) {
    51a0:	4606      	mov	r6, r0
    51a2:	2800      	cmp	r0, #0
    51a4:	f000 80d4 	beq.w	5350 <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    51a8:	2104      	movs	r1, #4
    51aa:	3008      	adds	r0, #8
    51ac:	f013 fcb0 	bl	18b10 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    51b0:	f8bd 3000 	ldrh.w	r3, [sp]
    51b4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    51b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    51ba:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    51bc:	4622      	mov	r2, r4
    51be:	4631      	mov	r1, r6
    51c0:	f242 0024 	movw	r0, #8228	; 0x2024
    51c4:	f7ff fb6c 	bl	48a0 <bt_hci_cmd_send_sync>
		if (err) {
    51c8:	4604      	mov	r4, r0
    51ca:	2800      	cmp	r0, #0
    51cc:	d184      	bne.n	50d8 <bt_init+0xf8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    51ce:	2108      	movs	r1, #8
    51d0:	f242 0001 	movw	r0, #8193	; 0x2001
    51d4:	f7ff fb2a 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    51d8:	4604      	mov	r4, r0
    51da:	2800      	cmp	r0, #0
    51dc:	f000 80b8 	beq.w	5350 <bt_init+0x370>
    51e0:	2108      	movs	r1, #8
    51e2:	4408      	add	r0, r1
    51e4:	f013 fc94 	bl	18b10 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    51e8:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    51ec:	f012 0f02 	tst.w	r2, #2
    51f0:	bf14      	ite	ne
    51f2:	232f      	movne	r3, #47	; 0x2f
    51f4:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    51f6:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    51f8:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    51fc:	bf48      	it	mi
    51fe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5202:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    5206:	bf18      	it	ne
    5208:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    520c:	2200      	movs	r2, #0
    520e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5210:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5214:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    5216:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5218:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    521a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    521c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    521e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5220:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    5222:	4621      	mov	r1, r4
    5224:	f242 0001 	movw	r0, #8193	; 0x2001
    5228:	f7ff fb3a 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    522c:	4604      	mov	r4, r0
    522e:	2800      	cmp	r0, #0
    5230:	f47f af52 	bne.w	50d8 <bt_init+0xf8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5234:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    5238:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    523c:	069a      	lsls	r2, r3, #26
    523e:	f100 809c 	bmi.w	537a <bt_init+0x39a>
	if (bt_dev.le.acl_mtu) {
    5242:	b9d9      	cbnz	r1, 527c <bt_init+0x29c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5244:	aa01      	add	r2, sp, #4
    5246:	f241 0005 	movw	r0, #4101	; 0x1005
    524a:	f7ff fb29 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    524e:	4604      	mov	r4, r0
    5250:	2800      	cmp	r0, #0
    5252:	f47f af41 	bne.w	50d8 <bt_init+0xf8>
	if (bt_dev.le.acl_mtu) {
    5256:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    525a:	b963      	cbnz	r3, 5276 <bt_init+0x296>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    525c:	9b01      	ldr	r3, [sp, #4]
    525e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    5260:	785a      	ldrb	r2, [r3, #1]
    5262:	7899      	ldrb	r1, [r3, #2]
    5264:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5268:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    526c:	889a      	ldrh	r2, [r3, #4]
    526e:	4847      	ldr	r0, [pc, #284]	; (538c <bt_init+0x3ac>)
    5270:	4611      	mov	r1, r2
    5272:	f014 fa3b 	bl	196ec <z_impl_k_sem_init>
	net_buf_unref(rsp);
    5276:	9801      	ldr	r0, [sp, #4]
    5278:	f00d fa82 	bl	12780 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    527c:	2108      	movs	r1, #8
    527e:	f640 4001 	movw	r0, #3073	; 0xc01
    5282:	f7ff fad3 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    5286:	4604      	mov	r4, r0
    5288:	2800      	cmp	r0, #0
    528a:	d061      	beq.n	5350 <bt_init+0x370>
    528c:	2108      	movs	r1, #8
    528e:	4408      	add	r0, r1
    5290:	f013 fc3e 	bl	18b10 <net_buf_simple_add>
	dst[0] = val;
    5294:	2310      	movs	r3, #16
    5296:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5298:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    529a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    529c:	7043      	strb	r3, [r0, #1]
    529e:	2602      	movs	r6, #2
    52a0:	2320      	movs	r3, #32
	dst[0] = val;
    52a2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    52a4:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    52a6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    52a8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    52aa:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    52ac:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    52ae:	4621      	mov	r1, r4
    52b0:	f640 4001 	movw	r0, #3073	; 0xc01
    52b4:	f7ff faf4 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    52b8:	4604      	mov	r4, r0
    52ba:	2800      	cmp	r0, #0
    52bc:	f47f af0c 	bne.w	50d8 <bt_init+0xf8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    52c0:	4601      	mov	r1, r0
    52c2:	aa01      	add	r2, sp, #4
    52c4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    52c8:	f7ff faea 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    52cc:	4604      	mov	r4, r0
    52ce:	bb48      	cbnz	r0, 5324 <bt_init+0x344>
	net_buf_unref(rsp);
    52d0:	9801      	ldr	r0, [sp, #4]
    52d2:	f00d fa55 	bl	12780 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    52d6:	4621      	mov	r1, r4
    52d8:	aa01      	add	r2, sp, #4
    52da:	f64f 4002 	movw	r0, #64514	; 0xfc02
    52de:	f7ff fadf 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    52e2:	4604      	mov	r4, r0
    52e4:	b9f0      	cbnz	r0, 5324 <bt_init+0x344>
	rp.cmds = (void *)rsp->data;
    52e6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    52e8:	4829      	ldr	r0, [pc, #164]	; (5390 <bt_init+0x3b0>)
    52ea:	6899      	ldr	r1, [r3, #8]
    52ec:	4632      	mov	r2, r6
    52ee:	3101      	adds	r1, #1
    52f0:	f011 fa7f 	bl	167f2 <memcpy>
	net_buf_unref(rsp);
    52f4:	9801      	ldr	r0, [sp, #4]
    52f6:	f00d fa43 	bl	12780 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    52fa:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    52fe:	075b      	lsls	r3, r3, #29
    5300:	d510      	bpl.n	5324 <bt_init+0x344>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5302:	aa01      	add	r2, sp, #4
    5304:	4621      	mov	r1, r4
    5306:	f64f 4003 	movw	r0, #64515	; 0xfc03
    530a:	f7ff fac9 	bl	48a0 <bt_hci_cmd_send_sync>
		if (err) {
    530e:	b948      	cbnz	r0, 5324 <bt_init+0x344>
		rp.feat = (void *)rsp->data;
    5310:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    5312:	4820      	ldr	r0, [pc, #128]	; (5394 <bt_init+0x3b4>)
    5314:	6899      	ldr	r1, [r3, #8]
    5316:	2201      	movs	r2, #1
    5318:	4411      	add	r1, r2
    531a:	f011 fa6a 	bl	167f2 <memcpy>
		net_buf_unref(rsp);
    531e:	9801      	ldr	r0, [sp, #4]
    5320:	f00d fa2e 	bl	12780 <net_buf_unref>
	err = bt_id_init();
    5324:	f000 fa32 	bl	578c <bt_id_init>
	if (err) {
    5328:	4604      	mov	r4, r0
    532a:	2800      	cmp	r0, #0
    532c:	f47f aed4 	bne.w	50d8 <bt_init+0xf8>
		err = bt_conn_init();
    5330:	f001 fa5a 	bl	67e8 <bt_conn_init>
		if (err) {
    5334:	4604      	mov	r4, r0
    5336:	2800      	cmp	r0, #0
    5338:	f47f aece 	bne.w	50d8 <bt_init+0xf8>
	bt_finalize_init();
    533c:	f7ff fe44 	bl	4fc8 <bt_finalize_init>
	return 0;
    5340:	e6ca      	b.n	50d8 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    5342:	2102      	movs	r1, #2
    5344:	f640 406d 	movw	r0, #3181	; 0xc6d
    5348:	f7ff fa70 	bl	482c <bt_hci_cmd_create>
		if (!buf) {
    534c:	4604      	mov	r4, r0
    534e:	b910      	cbnz	r0, 5356 <bt_init+0x376>
		return -ENOBUFS;
    5350:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5354:	e6c0      	b.n	50d8 <bt_init+0xf8>
    5356:	2102      	movs	r1, #2
    5358:	3008      	adds	r0, #8
    535a:	f013 fbd9 	bl	18b10 <net_buf_simple_add>
		cp_le->le = 0x01;
    535e:	2301      	movs	r3, #1
    5360:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    5362:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    5364:	4621      	mov	r1, r4
    5366:	4632      	mov	r2, r6
    5368:	f640 406d 	movw	r0, #3181	; 0xc6d
    536c:	f7ff fa98 	bl	48a0 <bt_hci_cmd_send_sync>
		if (err) {
    5370:	4604      	mov	r4, r0
    5372:	2800      	cmp	r0, #0
    5374:	f43f aeec 	beq.w	5150 <bt_init+0x170>
    5378:	e6ae      	b.n	50d8 <bt_init+0xf8>
	else if (!bt_dev.le.acl_mtu) {
    537a:	2900      	cmp	r1, #0
    537c:	f47f af7e 	bne.w	527c <bt_init+0x29c>
		return -EIO;
    5380:	f06f 0404 	mvn.w	r4, #4
    5384:	e6a8      	b.n	50d8 <bt_init+0xf8>
    5386:	bf00      	nop
    5388:	200000d0 	.word	0x200000d0
    538c:	20000100 	.word	0x20000100
    5390:	200000b9 	.word	0x200000b9
    5394:	200000b8 	.word	0x200000b8

00005398 <init_work>:

static void init_work(struct k_work *work)
{
    5398:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    539a:	f7ff fe21 	bl	4fe0 <bt_init>
	if (ready_cb) {
    539e:	4b03      	ldr	r3, [pc, #12]	; (53ac <init_work+0x14>)
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	b113      	cbz	r3, 53aa <init_work+0x12>
		ready_cb(err);
	}
}
    53a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    53a8:	4718      	bx	r3
}
    53aa:	bd10      	pop	{r4, pc}
    53ac:	20001138 	.word	0x20001138

000053b0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    53b0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    53b2:	4d26      	ldr	r5, [pc, #152]	; (544c <bt_enable+0x9c>)
    53b4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    53b8:	b088      	sub	sp, #32
    53ba:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    53bc:	2b00      	cmp	r3, #0
    53be:	d03f      	beq.n	5440 <bt_enable+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    53c0:	f06f 0102 	mvn.w	r1, #2
    53c4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    53c8:	f011 fb70 	bl	16aac <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    53cc:	2101      	movs	r1, #1
    53ce:	f011 faf8 	bl	169c2 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    53d2:	ea10 0401 	ands.w	r4, r0, r1
    53d6:	d136      	bne.n	5446 <bt_enable+0x96>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    53d8:	4b1d      	ldr	r3, [pc, #116]	; (5450 <bt_enable+0xa0>)
    53da:	601e      	str	r6, [r3, #0]
    53dc:	460a      	mov	r2, r1
    53de:	f505 708c 	add.w	r0, r5, #280	; 0x118
    53e2:	f014 f983 	bl	196ec <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    53e6:	f505 709a 	add.w	r0, r5, #308	; 0x134
    53ea:	f014 f922 	bl	19632 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    53ee:	2200      	movs	r2, #0
    53f0:	2300      	movs	r3, #0
    53f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    53f6:	f06f 0308 	mvn.w	r3, #8
    53fa:	e9cd 4302 	strd	r4, r3, [sp, #8]
    53fe:	e9cd 4400 	strd	r4, r4, [sp]
    5402:	4b14      	ldr	r3, [pc, #80]	; (5454 <bt_enable+0xa4>)
    5404:	4914      	ldr	r1, [pc, #80]	; (5458 <bt_enable+0xa8>)
    5406:	9404      	str	r4, [sp, #16]
    5408:	f44f 6280 	mov.w	r2, #1024	; 0x400
    540c:	4813      	ldr	r0, [pc, #76]	; (545c <bt_enable+0xac>)
    540e:	f00f fc0d 	bl	14c2c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5412:	4913      	ldr	r1, [pc, #76]	; (5460 <bt_enable+0xb0>)
    5414:	4811      	ldr	r0, [pc, #68]	; (545c <bt_enable+0xac>)
    5416:	f014 f890 	bl	1953a <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    541a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    541e:	68db      	ldr	r3, [r3, #12]
    5420:	4798      	blx	r3
	if (err) {
    5422:	4604      	mov	r4, r0
    5424:	b948      	cbnz	r0, 543a <bt_enable+0x8a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    5426:	b926      	cbnz	r6, 5432 <bt_enable+0x82>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    5428:	b008      	add	sp, #32
    542a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    542e:	f7ff bdd7 	b.w	4fe0 <bt_init>
	k_work_submit(&bt_dev.init);
    5432:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    5436:	f00f fe3d 	bl	150b4 <k_work_submit>
}
    543a:	4620      	mov	r0, r4
    543c:	b008      	add	sp, #32
    543e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    5440:	f06f 0412 	mvn.w	r4, #18
    5444:	e7f9      	b.n	543a <bt_enable+0x8a>
		return -EALREADY;
    5446:	f06f 0477 	mvn.w	r4, #119	; 0x77
    544a:	e7f6      	b.n	543a <bt_enable+0x8a>
    544c:	20000000 	.word	0x20000000
    5450:	20001138 	.word	0x20001138
    5454:	00004c99 	.word	0x00004c99
    5458:	200026c0 	.word	0x200026c0
    545c:	20000950 	.word	0x20000950
    5460:	0001b4ca 	.word	0x0001b4ca

00005464 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    5464:	4800      	ldr	r0, [pc, #0]	; (5468 <bt_get_name+0x4>)
    5466:	4770      	bx	lr
    5468:	0001b4d0 	.word	0x0001b4d0

0000546c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    546e:	4f0b      	ldr	r7, [pc, #44]	; (549c <id_find+0x30>)
{
    5470:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5472:	2500      	movs	r5, #0
    5474:	79fb      	ldrb	r3, [r7, #7]
    5476:	b2ec      	uxtb	r4, r5
    5478:	42a3      	cmp	r3, r4
    547a:	d802      	bhi.n	5482 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    547c:	f06f 0401 	mvn.w	r4, #1
    5480:	e009      	b.n	5496 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5482:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    5486:	2207      	movs	r2, #7
    5488:	4439      	add	r1, r7
    548a:	4630      	mov	r0, r6
    548c:	f011 f9a0 	bl	167d0 <memcmp>
    5490:	3501      	adds	r5, #1
    5492:	2800      	cmp	r0, #0
    5494:	d1ee      	bne.n	5474 <id_find+0x8>
}
    5496:	4620      	mov	r0, r4
    5498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    549a:	bf00      	nop
    549c:	20000000 	.word	0x20000000

000054a0 <set_random_address>:
{
    54a0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    54a2:	4914      	ldr	r1, [pc, #80]	; (54f4 <set_random_address+0x54>)
    54a4:	2206      	movs	r2, #6
    54a6:	4605      	mov	r5, r0
    54a8:	f011 f992 	bl	167d0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    54ac:	4604      	mov	r4, r0
    54ae:	b1e0      	cbz	r0, 54ea <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    54b0:	2106      	movs	r1, #6
    54b2:	f242 0005 	movw	r0, #8197	; 0x2005
    54b6:	f7ff f9b9 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    54ba:	4604      	mov	r4, r0
    54bc:	b1b8      	cbz	r0, 54ee <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    54be:	2206      	movs	r2, #6
    54c0:	4629      	mov	r1, r5
    54c2:	3008      	adds	r0, #8
    54c4:	f013 fb2a 	bl	18b1c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    54c8:	4621      	mov	r1, r4
    54ca:	2200      	movs	r2, #0
    54cc:	f242 0005 	movw	r0, #8197	; 0x2005
    54d0:	f7ff f9e6 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    54d4:	4604      	mov	r4, r0
    54d6:	b940      	cbnz	r0, 54ea <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    54d8:	2206      	movs	r2, #6
    54da:	4806      	ldr	r0, [pc, #24]	; (54f4 <set_random_address+0x54>)
    54dc:	4629      	mov	r1, r5
    54de:	f011 f988 	bl	167f2 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    54e2:	4b05      	ldr	r3, [pc, #20]	; (54f8 <set_random_address+0x58>)
    54e4:	2201      	movs	r2, #1
    54e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    54ea:	4620      	mov	r0, r4
    54ec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    54ee:	f06f 0468 	mvn.w	r4, #104	; 0x68
    54f2:	e7fa      	b.n	54ea <set_random_address+0x4a>
    54f4:	20000061 	.word	0x20000061
    54f8:	20000000 	.word	0x20000000

000054fc <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    54fc:	b530      	push	{r4, r5, lr}
    54fe:	4604      	mov	r4, r0
    5500:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5502:	460d      	mov	r5, r1
    5504:	b1a1      	cbz	r1, 5530 <id_create.constprop.0+0x34>
    5506:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5508:	2207      	movs	r2, #7
    550a:	a902      	add	r1, sp, #8
    550c:	4628      	mov	r0, r5
    550e:	9302      	str	r3, [sp, #8]
    5510:	f8cd 300b 	str.w	r3, [sp, #11]
    5514:	f011 f95c 	bl	167d0 <memcmp>
    5518:	b150      	cbz	r0, 5530 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    551a:	4812      	ldr	r0, [pc, #72]	; (5564 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    551c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5520:	2207      	movs	r2, #7
    5522:	4629      	mov	r1, r5
    5524:	4420      	add	r0, r4
    5526:	f011 f964 	bl	167f2 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    552a:	2000      	movs	r0, #0
}
    552c:	b005      	add	sp, #20
    552e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    5530:	4668      	mov	r0, sp
    5532:	f011 f9d0 	bl	168d6 <bt_addr_le_create_static>
			if (err) {
    5536:	2800      	cmp	r0, #0
    5538:	d1f8      	bne.n	552c <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    553a:	4668      	mov	r0, sp
    553c:	f7ff ff96 	bl	546c <id_find>
    5540:	2800      	cmp	r0, #0
    5542:	daf5      	bge.n	5530 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5544:	4807      	ldr	r0, [pc, #28]	; (5564 <id_create.constprop.0+0x68>)
    5546:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    554a:	4404      	add	r4, r0
    554c:	2207      	movs	r2, #7
    554e:	4669      	mov	r1, sp
    5550:	4620      	mov	r0, r4
    5552:	f011 f94e 	bl	167f2 <memcpy>
		if (addr) {
    5556:	2d00      	cmp	r5, #0
    5558:	d0e7      	beq.n	552a <id_create.constprop.0+0x2e>
    555a:	2207      	movs	r2, #7
    555c:	4621      	mov	r1, r4
    555e:	4628      	mov	r0, r5
    5560:	e7e1      	b.n	5526 <id_create.constprop.0+0x2a>
    5562:	bf00      	nop
    5564:	20000000 	.word	0x20000000

00005568 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    5568:	b573      	push	{r0, r1, r4, r5, r6, lr}
    556a:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    556c:	4605      	mov	r5, r0
    556e:	b918      	cbnz	r0, 5578 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5570:	b1ec      	cbz	r4, 55ae <bt_id_create+0x46>
		return -EINVAL;
    5572:	f06f 0015 	mvn.w	r0, #21
    5576:	e018      	b.n	55aa <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5578:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    557a:	2207      	movs	r2, #7
    557c:	4669      	mov	r1, sp
    557e:	9300      	str	r3, [sp, #0]
    5580:	f8cd 3003 	str.w	r3, [sp, #3]
    5584:	f011 f924 	bl	167d0 <memcmp>
    5588:	2800      	cmp	r0, #0
    558a:	d0f1      	beq.n	5570 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    558c:	782b      	ldrb	r3, [r5, #0]
    558e:	2b01      	cmp	r3, #1
    5590:	d1ef      	bne.n	5572 <bt_id_create+0xa>
    5592:	79ab      	ldrb	r3, [r5, #6]
    5594:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5598:	2bc0      	cmp	r3, #192	; 0xc0
    559a:	d1ea      	bne.n	5572 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    559c:	4628      	mov	r0, r5
    559e:	f7ff ff65 	bl	546c <id_find>
    55a2:	2800      	cmp	r0, #0
    55a4:	dbe4      	blt.n	5570 <bt_id_create+0x8>
			return -EALREADY;
    55a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    55aa:	b002      	add	sp, #8
    55ac:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    55ae:	4e13      	ldr	r6, [pc, #76]	; (55fc <bt_id_create+0x94>)
    55b0:	79f3      	ldrb	r3, [r6, #7]
    55b2:	2b01      	cmp	r3, #1
    55b4:	d01e      	beq.n	55f4 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    55b6:	f3bf 8f5b 	dmb	ish
    55ba:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
    55be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    55c2:	07db      	lsls	r3, r3, #31
    55c4:	d40b      	bmi.n	55de <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    55c6:	2d00      	cmp	r5, #0
    55c8:	d0d3      	beq.n	5572 <bt_id_create+0xa>
    55ca:	2207      	movs	r2, #7
    55cc:	4669      	mov	r1, sp
    55ce:	4628      	mov	r0, r5
    55d0:	9400      	str	r4, [sp, #0]
    55d2:	f8cd 4003 	str.w	r4, [sp, #3]
    55d6:	f011 f8fb 	bl	167d0 <memcmp>
    55da:	2800      	cmp	r0, #0
    55dc:	d0c9      	beq.n	5572 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    55de:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    55e0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    55e2:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    55e4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    55e6:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    55e8:	f7ff ff88 	bl	54fc <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    55ec:	2800      	cmp	r0, #0
    55ee:	bf08      	it	eq
    55f0:	4620      	moveq	r0, r4
    55f2:	e7da      	b.n	55aa <bt_id_create+0x42>
		return -ENOMEM;
    55f4:	f06f 000b 	mvn.w	r0, #11
    55f8:	e7d7      	b.n	55aa <bt_id_create+0x42>
    55fa:	bf00      	nop
    55fc:	20000000 	.word	0x20000000

00005600 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5600:	b570      	push	{r4, r5, r6, lr}
    5602:	b086      	sub	sp, #24
    5604:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    5606:	aa01      	add	r2, sp, #4
    5608:	2100      	movs	r1, #0
    560a:	f241 0009 	movw	r0, #4105	; 0x1009
    560e:	f7ff f947 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    5612:	4604      	mov	r4, r0
    5614:	b970      	cbnz	r0, 5634 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    5616:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5618:	9002      	str	r0, [sp, #8]
    561a:	689d      	ldr	r5, [r3, #8]
    561c:	f8ad 000c 	strh.w	r0, [sp, #12]
    5620:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    5622:	2206      	movs	r2, #6
    5624:	a902      	add	r1, sp, #8
    5626:	4628      	mov	r0, r5
    5628:	f011 f8d2 	bl	167d0 <memcmp>
    562c:	b920      	cbnz	r0, 5638 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    562e:	9801      	ldr	r0, [sp, #4]
    5630:	f00d f8a6 	bl	12780 <net_buf_unref>
		return 0U;
    5634:	2000      	movs	r0, #0
    5636:	e016      	b.n	5666 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5638:	4b0c      	ldr	r3, [pc, #48]	; (566c <bt_id_read_public_addr+0x6c>)
    563a:	6818      	ldr	r0, [r3, #0]
    563c:	9004      	str	r0, [sp, #16]
    563e:	889b      	ldrh	r3, [r3, #4]
    5640:	f8ad 3014 	strh.w	r3, [sp, #20]
    5644:	2206      	movs	r2, #6
    5646:	a904      	add	r1, sp, #16
    5648:	4628      	mov	r0, r5
    564a:	f011 f8c1 	bl	167d0 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    564e:	2800      	cmp	r0, #0
    5650:	d0ed      	beq.n	562e <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    5652:	2206      	movs	r2, #6
    5654:	4629      	mov	r1, r5
    5656:	1c70      	adds	r0, r6, #1
    5658:	f011 f8cb 	bl	167f2 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    565c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    565e:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    5660:	f00d f88e 	bl	12780 <net_buf_unref>
	return 1U;
    5664:	2001      	movs	r0, #1
}
    5666:	b006      	add	sp, #24
    5668:	bd70      	pop	{r4, r5, r6, pc}
    566a:	bf00      	nop
    566c:	0001a1bf 	.word	0x0001a1bf

00005670 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    5670:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    5672:	4668      	mov	r0, sp
    5674:	f7ff ffc4 	bl	5600 <bt_id_read_public_addr>
    5678:	4b04      	ldr	r3, [pc, #16]	; (568c <bt_setup_public_id_addr+0x1c>)
    567a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    567c:	b118      	cbz	r0, 5686 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    567e:	4669      	mov	r1, sp
    5680:	2000      	movs	r0, #0
    5682:	f7ff ff3b 	bl	54fc <id_create.constprop.0>
}
    5686:	b003      	add	sp, #12
    5688:	f85d fb04 	ldr.w	pc, [sp], #4
    568c:	20000000 	.word	0x20000000

00005690 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    5690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5694:	4b15      	ldr	r3, [pc, #84]	; (56ec <bt_read_static_addr+0x5c>)
    5696:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    569a:	f014 0401 	ands.w	r4, r4, #1
{
    569e:	4607      	mov	r7, r0
    56a0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    56a2:	d015      	beq.n	56d0 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    56a4:	aa01      	add	r2, sp, #4
    56a6:	2100      	movs	r1, #0
    56a8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    56ac:	f7ff f8f8 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    56b0:	4605      	mov	r5, r0
    56b2:	b9c8      	cbnz	r0, 56e8 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    56b4:	9b01      	ldr	r3, [sp, #4]
    56b6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    56b8:	785c      	ldrb	r4, [r3, #1]
    56ba:	42b4      	cmp	r4, r6
    56bc:	bf28      	it	cs
    56be:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    56c0:	f04f 0816 	mov.w	r8, #22
    56c4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    56c6:	42a5      	cmp	r5, r4
    56c8:	db06      	blt.n	56d8 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    56ca:	9801      	ldr	r0, [sp, #4]
    56cc:	f00d f858 	bl	12780 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    56d0:	4620      	mov	r0, r4
    56d2:	b002      	add	sp, #8
    56d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    56d8:	fb08 7005 	mla	r0, r8, r5, r7
    56dc:	2216      	movs	r2, #22
    56de:	4631      	mov	r1, r6
    56e0:	f011 f887 	bl	167f2 <memcpy>
	for (i = 0; i < cnt; i++) {
    56e4:	3501      	adds	r5, #1
    56e6:	e7ee      	b.n	56c6 <bt_read_static_addr+0x36>
		return 0;
    56e8:	2400      	movs	r4, #0
    56ea:	e7f1      	b.n	56d0 <bt_read_static_addr+0x40>
    56ec:	20000000 	.word	0x20000000

000056f0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    56f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    56f2:	4e15      	ldr	r6, [pc, #84]	; (5748 <bt_setup_random_id_addr+0x58>)
    56f4:	79f4      	ldrb	r4, [r6, #7]
{
    56f6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    56f8:	b9f4      	cbnz	r4, 5738 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    56fa:	2101      	movs	r1, #1
    56fc:	a802      	add	r0, sp, #8
    56fe:	f7ff ffc7 	bl	5690 <bt_read_static_addr>
    5702:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    5704:	b1c0      	cbz	r0, 5738 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    5706:	2716      	movs	r7, #22
    5708:	ab02      	add	r3, sp, #8
    570a:	b2e5      	uxtb	r5, r4
    570c:	fb07 3105 	mla	r1, r7, r5, r3
    5710:	2206      	movs	r2, #6
    5712:	f10d 0001 	add.w	r0, sp, #1
    5716:	f011 f86c 	bl	167f2 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    571a:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    571c:	4669      	mov	r1, sp
    571e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    5720:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    5724:	f7ff feea 	bl	54fc <id_create.constprop.0>
				if (err) {
    5728:	b920      	cbnz	r0, 5734 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    572a:	79f2      	ldrb	r2, [r6, #7]
    572c:	3401      	adds	r4, #1
    572e:	b2e3      	uxtb	r3, r4
    5730:	429a      	cmp	r2, r3
    5732:	d8e9      	bhi.n	5708 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    5734:	b009      	add	sp, #36	; 0x24
    5736:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    5738:	2100      	movs	r1, #0
    573a:	4608      	mov	r0, r1
}
    573c:	b009      	add	sp, #36	; 0x24
    573e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    5742:	f7ff bf11 	b.w	5568 <bt_id_create>
    5746:	bf00      	nop
    5748:	20000000 	.word	0x20000000

0000574c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    574c:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    574e:	4c07      	ldr	r4, [pc, #28]	; (576c <bt_id_set_create_conn_own_addr+0x20>)
    5750:	7823      	ldrb	r3, [r4, #0]
    5752:	2b01      	cmp	r3, #1
{
    5754:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    5756:	d003      	beq.n	5760 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    5758:	7823      	ldrb	r3, [r4, #0]
    575a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    575c:	2000      	movs	r0, #0
}
    575e:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    5760:	1c60      	adds	r0, r4, #1
    5762:	f7ff fe9d 	bl	54a0 <set_random_address>
			if (err) {
    5766:	2800      	cmp	r0, #0
    5768:	d0f6      	beq.n	5758 <bt_id_set_create_conn_own_addr+0xc>
    576a:	e7f8      	b.n	575e <bt_id_set_create_conn_own_addr+0x12>
    576c:	20000000 	.word	0x20000000

00005770 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    5770:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    5772:	4b05      	ldr	r3, [pc, #20]	; (5788 <bt_id_set_scan_own_addr+0x18>)
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    5778:	2000      	movs	r0, #0
{
    577a:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    577c:	f011 fb83 	bl	16e86 <bt_id_set_private_addr>
			if (err) {
    5780:	b908      	cbnz	r0, 5786 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    5782:	2301      	movs	r3, #1
    5784:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
    5786:	bd10      	pop	{r4, pc}
    5788:	20000000 	.word	0x20000000

0000578c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    578c:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    578e:	4c0a      	ldr	r4, [pc, #40]	; (57b8 <bt_id_init+0x2c>)
    5790:	79e3      	ldrb	r3, [r4, #7]
    5792:	b10b      	cbz	r3, 5798 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    5794:	2000      	movs	r0, #0
}
    5796:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    5798:	f7ff ff6a 	bl	5670 <bt_setup_public_id_addr>
		if (err) {
    579c:	2800      	cmp	r0, #0
    579e:	d1fa      	bne.n	5796 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    57a0:	79e3      	ldrb	r3, [r4, #7]
    57a2:	2b00      	cmp	r3, #0
    57a4:	d1f6      	bne.n	5794 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    57a6:	f7ff ffa3 	bl	56f0 <bt_setup_random_id_addr>
		if (err) {
    57aa:	2800      	cmp	r0, #0
    57ac:	d1f3      	bne.n	5796 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    57ae:	1c60      	adds	r0, r4, #1
}
    57b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    57b4:	f7ff be74 	b.w	54a0 <set_random_address>
    57b8:	20000000 	.word	0x20000000

000057bc <atomic_get.constprop.0>:
    57bc:	4b03      	ldr	r3, [pc, #12]	; (57cc <atomic_get.constprop.0+0x10>)
    57be:	f3bf 8f5b 	dmb	ish
    57c2:	6818      	ldr	r0, [r3, #0]
    57c4:	f3bf 8f5b 	dmb	ish
}
    57c8:	4770      	bx	lr
    57ca:	bf00      	nop
    57cc:	200000cc 	.word	0x200000cc

000057d0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    57d0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    57d2:	2102      	movs	r1, #2
{
    57d4:	b087      	sub	sp, #28
    57d6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    57d8:	f242 000c 	movw	r0, #8204	; 0x200c
    57dc:	f7ff f826 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    57e0:	4605      	mov	r5, r0
    57e2:	b308      	cbz	r0, 5828 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    57e4:	2102      	movs	r1, #2
    57e6:	3008      	adds	r0, #8
    57e8:	f013 f992 	bl	18b10 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    57ec:	2c01      	cmp	r4, #1
    57ee:	4602      	mov	r2, r0
    57f0:	d117      	bne.n	5822 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    57f2:	f7ff ffe3 	bl	57bc <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    57f6:	f3c0 2040 	ubfx	r0, r0, #9, #1
    57fa:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    57fc:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    57fe:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    5800:	425c      	negs	r4, r3
    5802:	415c      	adcs	r4, r3
    5804:	4a0a      	ldr	r2, [pc, #40]	; (5830 <bt_le_scan_set_enable_legacy+0x60>)
    5806:	9400      	str	r4, [sp, #0]
    5808:	a903      	add	r1, sp, #12
    580a:	4628      	mov	r0, r5
    580c:	2306      	movs	r3, #6
    580e:	f7fe fffb 	bl	4808 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    5812:	2200      	movs	r2, #0
    5814:	4629      	mov	r1, r5
    5816:	f242 000c 	movw	r0, #8204	; 0x200c
    581a:	f7ff f841 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    581e:	b007      	add	sp, #28
    5820:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    5822:	2300      	movs	r3, #0
    5824:	7043      	strb	r3, [r0, #1]
    5826:	e7e9      	b.n	57fc <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    5828:	f06f 0068 	mvn.w	r0, #104	; 0x68
    582c:	e7f7      	b.n	581e <bt_le_scan_set_enable_legacy+0x4e>
    582e:	bf00      	nop
    5830:	200000cc 	.word	0x200000cc

00005834 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    5834:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5836:	4605      	mov	r5, r0
    5838:	4614      	mov	r4, r2
    583a:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    583c:	2207      	movs	r2, #7
    583e:	2100      	movs	r1, #0
    5840:	4668      	mov	r0, sp
    5842:	f010 ffe1 	bl	16808 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    5846:	2300      	movs	r3, #0
    5848:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    584c:	1e6b      	subs	r3, r5, #1
    584e:	4258      	negs	r0, r3
    5850:	f10d 0105 	add.w	r1, sp, #5
    5854:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    5856:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    585a:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    585e:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    5862:	f7ff ff85 	bl	5770 <bt_id_set_scan_own_addr>
	if (err) {
    5866:	4604      	mov	r4, r0
    5868:	bb38      	cbnz	r0, 58ba <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    586a:	2107      	movs	r1, #7
    586c:	f242 000b 	movw	r0, #8203	; 0x200b
    5870:	f7fe ffdc 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
    5874:	4606      	mov	r6, r0
    5876:	b348      	cbz	r0, 58cc <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5878:	2207      	movs	r2, #7
    587a:	4669      	mov	r1, sp
    587c:	3008      	adds	r0, #8
    587e:	f013 f94d 	bl	18b1c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    5882:	4622      	mov	r2, r4
    5884:	4631      	mov	r1, r6
    5886:	f242 000b 	movw	r0, #8203	; 0x200b
    588a:	f7ff f809 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
    588e:	4604      	mov	r4, r0
    5890:	b998      	cbnz	r0, 58ba <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    5892:	2001      	movs	r0, #1
    5894:	f7ff ff9c 	bl	57d0 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    5898:	4604      	mov	r4, r0
    589a:	b970      	cbnz	r0, 58ba <start_le_scan_legacy+0x86>
	if (val) {
    589c:	2d01      	cmp	r5, #1
    589e:	d10f      	bne.n	58c0 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58a0:	f3bf 8f5b 	dmb	ish
    58a4:	4b0b      	ldr	r3, [pc, #44]	; (58d4 <start_le_scan_legacy+0xa0>)
    58a6:	e853 2f00 	ldrex	r2, [r3]
    58aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    58ae:	e843 2100 	strex	r1, r2, [r3]
    58b2:	2900      	cmp	r1, #0
    58b4:	d1f7      	bne.n	58a6 <start_le_scan_legacy+0x72>
    58b6:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    58ba:	4620      	mov	r0, r4
    58bc:	b002      	add	sp, #8
    58be:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    58c0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    58c4:	4803      	ldr	r0, [pc, #12]	; (58d4 <start_le_scan_legacy+0xa0>)
    58c6:	f011 faf2 	bl	16eae <atomic_and>
    58ca:	e7f6      	b.n	58ba <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    58cc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    58d0:	e7f3      	b.n	58ba <start_le_scan_legacy+0x86>
    58d2:	bf00      	nop
    58d4:	200000cc 	.word	0x200000cc

000058d8 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    58d8:	4b01      	ldr	r3, [pc, #4]	; (58e0 <bt_scan_reset+0x8>)
    58da:	2200      	movs	r2, #0
    58dc:	601a      	str	r2, [r3, #0]
}
    58de:	4770      	bx	lr
    58e0:	20001144 	.word	0x20001144

000058e4 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    58e4:	b538      	push	{r3, r4, r5, lr}
    58e6:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    58e8:	f7ff ff68 	bl	57bc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    58ec:	0601      	lsls	r1, r0, #24
    58ee:	f3c0 12c0 	ubfx	r2, r0, #7, #1
    58f2:	d501      	bpl.n	58f8 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECTING);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    58f4:	2000      	movs	r0, #0
    58f6:	e031      	b.n	595c <bt_le_scan_update+0x78>
    58f8:	f7ff ff60 	bl	57bc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    58fc:	0643      	lsls	r3, r0, #25
    58fe:	d428      	bmi.n	5952 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    5900:	2100      	movs	r1, #0
    5902:	2206      	movs	r2, #6
    5904:	4608      	mov	r0, r1
    5906:	f000 fd01 	bl	630c <bt_conn_lookup_state_le>
		if (conn) {
    590a:	4604      	mov	r4, r0
    590c:	bb38      	cbnz	r0, 595e <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    590e:	2202      	movs	r2, #2
    5910:	4601      	mov	r1, r0
    5912:	f000 fcfb 	bl	630c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
    5916:	2800      	cmp	r0, #0
    5918:	d0ec      	beq.n	58f4 <bt_le_scan_update+0x10>
    591a:	f3bf 8f5b 	dmb	ish
    591e:	4b11      	ldr	r3, [pc, #68]	; (5964 <bt_le_scan_update+0x80>)
    5920:	e853 2f00 	ldrex	r2, [r3]
    5924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5928:	e843 2100 	strex	r1, r2, [r3]
    592c:	2900      	cmp	r1, #0
    592e:	d1f7      	bne.n	5920 <bt_le_scan_update+0x3c>
    5930:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    5934:	f011 fb8f 	bl	17056 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    5938:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    593a:	4620      	mov	r0, r4
    593c:	bf18      	it	ne
    593e:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    5940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    5944:	bf0a      	itet	eq
    5946:	2212      	moveq	r2, #18
    5948:	2160      	movne	r1, #96	; 0x60
    594a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    594e:	f7ff bf71 	b.w	5834 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    5952:	4610      	mov	r0, r2
    5954:	f7ff ff3c 	bl	57d0 <bt_le_scan_set_enable_legacy>
		if (err) {
    5958:	2800      	cmp	r0, #0
    595a:	d0d1      	beq.n	5900 <bt_le_scan_update+0x1c>
}
    595c:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    595e:	f011 fb7a 	bl	17056 <bt_conn_unref>
    5962:	e7c7      	b.n	58f4 <bt_le_scan_update+0x10>
    5964:	200000cc 	.word	0x200000cc

00005968 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    5968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    596c:	f100 0808 	add.w	r8, r0, #8
    5970:	b08d      	sub	sp, #52	; 0x34
    5972:	4604      	mov	r4, r0
    5974:	4640      	mov	r0, r8
    5976:	f013 f8fc 	bl	18b72 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    597a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 5b28 <bt_hci_le_adv_report+0x1c0>
    597e:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    5980:	b916      	cbnz	r6, 5988 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    5982:	b00d      	add	sp, #52	; 0x34
    5984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    5988:	89a3      	ldrh	r3, [r4, #12]
    598a:	2b08      	cmp	r3, #8
    598c:	d9f9      	bls.n	5982 <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
    598e:	2109      	movs	r1, #9
    5990:	4640      	mov	r0, r8
    5992:	f013 f8e6 	bl	18b62 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    5996:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    5998:	237f      	movs	r3, #127	; 0x7f
    599a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    599e:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    59a0:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    59a2:	7a5b      	ldrb	r3, [r3, #9]
    59a4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    59a8:	23ff      	movs	r3, #255	; 0xff
    59aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    59ae:	2300      	movs	r3, #0
    59b0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    59b4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    59b8:	7802      	ldrb	r2, [r0, #0]
    59ba:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    59be:	2a04      	cmp	r2, #4
    59c0:	bf9c      	itt	ls
    59c2:	4b5a      	ldrls	r3, [pc, #360]	; (5b2c <bt_hci_le_adv_report+0x1c4>)
    59c4:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    59c6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    59ca:	b28b      	uxth	r3, r1
    59cc:	4605      	mov	r5, r0
    59ce:	f100 0901 	add.w	r9, r0, #1
    59d2:	9301      	str	r3, [sp, #4]
    59d4:	f7ff fef2 	bl	57bc <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    59d8:	0607      	lsls	r7, r0, #24
    59da:	d50b      	bpl.n	59f4 <bt_hci_le_adv_report+0x8c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    59dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    59e0:	0758      	lsls	r0, r3, #29
    59e2:	d507      	bpl.n	59f4 <bt_hci_le_adv_report+0x8c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    59e4:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    59e6:	4640      	mov	r0, r8
    59e8:	3101      	adds	r1, #1
    59ea:	3e01      	subs	r6, #1
    59ec:	f013 f8b1 	bl	18b52 <net_buf_simple_pull>
    59f0:	b2f6      	uxtb	r6, r6
    59f2:	e7c5      	b.n	5980 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    59f4:	786b      	ldrb	r3, [r5, #1]
    59f6:	1e9a      	subs	r2, r3, #2
    59f8:	2a01      	cmp	r2, #1
    59fa:	d848      	bhi.n	5a8e <bt_hci_le_adv_report+0x126>
	memcpy(dst, src, sizeof(*dst));
    59fc:	2207      	movs	r2, #7
    59fe:	4649      	mov	r1, r9
    5a00:	a804      	add	r0, sp, #16
    5a02:	f010 fef6 	bl	167f2 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5a06:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5a0a:	3b02      	subs	r3, #2
    5a0c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    5a10:	ab04      	add	r3, sp, #16
    5a12:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    5a14:	f8da 3000 	ldr.w	r3, [sl]
    5a18:	b1a3      	cbz	r3, 5a44 <bt_hci_le_adv_report+0xdc>
	state->offset = net_buf_simple_headroom(buf);
    5a1a:	4640      	mov	r0, r8
    5a1c:	f013 f8b9 	bl	18b92 <net_buf_simple_headroom>
		buf->len = len;
    5a20:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    5a22:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    5a24:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    5a28:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5a2a:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    5a2c:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    5a30:	f8da c000 	ldr.w	ip, [sl]
    5a34:	a804      	add	r0, sp, #16
    5a36:	4643      	mov	r3, r8
    5a38:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    5a3a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5a3c:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5a3e:	fa10 f08b 	uxtah	r0, r0, fp
    5a42:	60a0      	str	r0, [r4, #8]
	return list->head;
    5a44:	4b3a      	ldr	r3, [pc, #232]	; (5b30 <bt_hci_le_adv_report+0x1c8>)
    5a46:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5a48:	2a00      	cmp	r2, #0
    5a4a:	d033      	beq.n	5ab4 <bt_hci_le_adv_report+0x14c>
	return node->next;
    5a4c:	f852 7908 	ldr.w	r7, [r2], #-8
    5a50:	b107      	cbz	r7, 5a54 <bt_hci_le_adv_report+0xec>
    5a52:	3f08      	subs	r7, #8
		if (listener->recv) {
    5a54:	6813      	ldr	r3, [r2, #0]
    5a56:	9203      	str	r2, [sp, #12]
    5a58:	b193      	cbz	r3, 5a80 <bt_hci_le_adv_report+0x118>
	state->offset = net_buf_simple_headroom(buf);
    5a5a:	4640      	mov	r0, r8
    5a5c:	f013 f899 	bl	18b92 <net_buf_simple_headroom>
	state->len = buf->len;
    5a60:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    5a62:	9a03      	ldr	r2, [sp, #12]
    5a64:	9302      	str	r3, [sp, #8]
			buf->len = len;
    5a66:	9b01      	ldr	r3, [sp, #4]
    5a68:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5a6a:	4683      	mov	fp, r0
			listener->recv(info, buf);
    5a6c:	6812      	ldr	r2, [r2, #0]
    5a6e:	a808      	add	r0, sp, #32
    5a70:	4641      	mov	r1, r8
    5a72:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    5a74:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5a76:	9b02      	ldr	r3, [sp, #8]
    5a78:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5a7a:	fa10 f08b 	uxtah	r0, r0, fp
    5a7e:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    5a80:	b1c7      	cbz	r7, 5ab4 <bt_hci_le_adv_report+0x14c>
    5a82:	68bb      	ldr	r3, [r7, #8]
    5a84:	b103      	cbz	r3, 5a88 <bt_hci_le_adv_report+0x120>
    5a86:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    5a88:	463a      	mov	r2, r7
    5a8a:	461f      	mov	r7, r3
    5a8c:	e7e2      	b.n	5a54 <bt_hci_le_adv_report+0xec>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    5a8e:	2bff      	cmp	r3, #255	; 0xff
    5a90:	d109      	bne.n	5aa6 <bt_hci_le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    5a92:	2300      	movs	r3, #0
    5a94:	9306      	str	r3, [sp, #24]
    5a96:	2207      	movs	r2, #7
    5a98:	f8cd 301b 	str.w	r3, [sp, #27]
    5a9c:	a906      	add	r1, sp, #24
    5a9e:	a804      	add	r0, sp, #16
    5aa0:	f010 fea7 	bl	167f2 <memcpy>
}
    5aa4:	e7b4      	b.n	5a10 <bt_hci_le_adv_report+0xa8>
		bt_addr_le_copy(&id_addr,
    5aa6:	4649      	mov	r1, r9
    5aa8:	2000      	movs	r0, #0
    5aaa:	f011 f9ea 	bl	16e82 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    5aae:	2207      	movs	r2, #7
    5ab0:	4601      	mov	r1, r0
    5ab2:	e7f4      	b.n	5a9e <bt_hci_le_adv_report+0x136>
	check_pending_conn(&id_addr, addr, info->adv_props);
    5ab4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    5ab8:	f7ff fe80 	bl	57bc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5abc:	0601      	lsls	r1, r0, #24
    5abe:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
    5ac2:	d48f      	bmi.n	59e4 <bt_hci_le_adv_report+0x7c>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    5ac4:	07d2      	lsls	r2, r2, #31
    5ac6:	d58d      	bpl.n	59e4 <bt_hci_le_adv_report+0x7c>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    5ac8:	2202      	movs	r2, #2
    5aca:	a904      	add	r1, sp, #16
    5acc:	4658      	mov	r0, fp
    5ace:	f000 fc1d 	bl	630c <bt_conn_lookup_state_le>
	if (!conn) {
    5ad2:	4607      	mov	r7, r0
    5ad4:	2800      	cmp	r0, #0
    5ad6:	d085      	beq.n	59e4 <bt_hci_le_adv_report+0x7c>
    5ad8:	f7ff fe70 	bl	57bc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5adc:	0643      	lsls	r3, r0, #25
    5ade:	d411      	bmi.n	5b04 <bt_hci_le_adv_report+0x19c>
    5ae0:	2207      	movs	r2, #7
    5ae2:	4649      	mov	r1, r9
    5ae4:	f107 0096 	add.w	r0, r7, #150	; 0x96
    5ae8:	f010 fe83 	bl	167f2 <memcpy>
	if (bt_le_create_conn(conn)) {
    5aec:	4638      	mov	r0, r7
    5aee:	f011 f860 	bl	16bb2 <bt_le_create_conn>
    5af2:	b960      	cbnz	r0, 5b0e <bt_hci_le_adv_report+0x1a6>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
    5af4:	4638      	mov	r0, r7
    5af6:	2106      	movs	r1, #6
    5af8:	f000 fa58 	bl	5fac <bt_conn_set_state>
	bt_conn_unref(conn);
    5afc:	4638      	mov	r0, r7
    5afe:	f011 faaa 	bl	17056 <bt_conn_unref>
	return;
    5b02:	e76f      	b.n	59e4 <bt_hci_le_adv_report+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
    5b04:	4658      	mov	r0, fp
    5b06:	f7ff fe63 	bl	57d0 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    5b0a:	2800      	cmp	r0, #0
    5b0c:	d0e8      	beq.n	5ae0 <bt_hci_le_adv_report+0x178>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5b0e:	231f      	movs	r3, #31
    5b10:	727b      	strb	r3, [r7, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b12:	2100      	movs	r1, #0
    5b14:	4638      	mov	r0, r7
    5b16:	f000 fa49 	bl	5fac <bt_conn_set_state>
	bt_conn_unref(conn);
    5b1a:	4638      	mov	r0, r7
    5b1c:	f011 fa9b 	bl	17056 <bt_conn_unref>
	bt_le_scan_update(false);
    5b20:	2000      	movs	r0, #0
    5b22:	f7ff fedf 	bl	58e4 <bt_le_scan_update>
    5b26:	e75d      	b.n	59e4 <bt_hci_le_adv_report+0x7c>
    5b28:	20001144 	.word	0x20001144
    5b2c:	0001b4d7 	.word	0x0001b4d7
    5b30:	2000113c 	.word	0x2000113c

00005b34 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    5b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b38:	4605      	mov	r5, r0
    5b3a:	f7ff fe3f 	bl	57bc <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5b3e:	0740      	lsls	r0, r0, #29
{
    5b40:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5b42:	d56f      	bpl.n	5c24 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    5b44:	782a      	ldrb	r2, [r5, #0]
    5b46:	2a01      	cmp	r2, #1
    5b48:	d904      	bls.n	5b54 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    5b4a:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    5b4e:	4620      	mov	r0, r4
    5b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    5b54:	686b      	ldr	r3, [r5, #4]
    5b56:	f033 030f 	bics.w	r3, r3, #15
    5b5a:	d1f6      	bne.n	5b4a <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    5b5c:	8928      	ldrh	r0, [r5, #8]
    5b5e:	1f03      	subs	r3, r0, #4
    5b60:	b29b      	uxth	r3, r3
    5b62:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    5b66:	42a3      	cmp	r3, r4
    5b68:	d8ef      	bhi.n	5b4a <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    5b6a:	8969      	ldrh	r1, [r5, #10]
    5b6c:	1f0b      	subs	r3, r1, #4
    5b6e:	b29b      	uxth	r3, r3
    5b70:	42a3      	cmp	r3, r4
    5b72:	d8ea      	bhi.n	5b4a <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    5b74:	4288      	cmp	r0, r1
    5b76:	d3e8      	bcc.n	5b4a <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5b78:	b99a      	cbnz	r2, 5ba2 <bt_le_scan_start+0x6e>
    5b7a:	f3bf 8f5b 	dmb	ish
    5b7e:	4e2b      	ldr	r6, [pc, #172]	; (5c2c <bt_le_scan_start+0xf8>)
    5b80:	e856 0f00 	ldrex	r0, [r6]
    5b84:	f040 0380 	orr.w	r3, r0, #128	; 0x80
    5b88:	e846 3200 	strex	r2, r3, [r6]
    5b8c:	2a00      	cmp	r2, #0
    5b8e:	d1f7      	bne.n	5b80 <bt_le_scan_start+0x4c>
    5b90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5b94:	f010 0280 	ands.w	r2, r0, #128	; 0x80
    5b98:	46b0      	mov	r8, r6
    5b9a:	d007      	beq.n	5bac <bt_le_scan_start+0x78>
		return -EALREADY;
    5b9c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5ba0:	e7d5      	b.n	5b4e <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
    5ba2:	f011 f982 	bl	16eaa <bt_id_scan_random_addr_check>
    5ba6:	2800      	cmp	r0, #0
    5ba8:	d1e7      	bne.n	5b7a <bt_le_scan_start+0x46>
    5baa:	e7ce      	b.n	5b4a <bt_le_scan_start+0x16>
    5bac:	f7ff fe06 	bl	57bc <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5bb0:	0641      	lsls	r1, r0, #25
    5bb2:	d50a      	bpl.n	5bca <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    5bb4:	4610      	mov	r0, r2
    5bb6:	f7ff fe0b 	bl	57d0 <bt_le_scan_set_enable_legacy>
		if (err) {
    5bba:	4604      	mov	r4, r0
    5bbc:	b128      	cbz	r0, 5bca <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5bbe:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5bc2:	4630      	mov	r0, r6
    5bc4:	f011 f973 	bl	16eae <atomic_and>
		return err;
    5bc8:	e7c1      	b.n	5b4e <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    5bca:	686b      	ldr	r3, [r5, #4]
	if (val) {
    5bcc:	07db      	lsls	r3, r3, #31
    5bce:	d515      	bpl.n	5bfc <bt_le_scan_start+0xc8>
    5bd0:	f3bf 8f5b 	dmb	ish
    5bd4:	e858 3f00 	ldrex	r3, [r8]
    5bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5bdc:	e848 3200 	strex	r2, r3, [r8]
    5be0:	2a00      	cmp	r2, #0
    5be2:	d1f7      	bne.n	5bd4 <bt_le_scan_start+0xa0>
    5be4:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    5be8:	89ab      	ldrh	r3, [r5, #12]
    5bea:	b16b      	cbz	r3, 5c08 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5bec:	480f      	ldr	r0, [pc, #60]	; (5c2c <bt_le_scan_start+0xf8>)
    5bee:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5bf2:	f011 f95c 	bl	16eae <atomic_and>
			return -ENOTSUP;
    5bf6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5bfa:	e7a8      	b.n	5b4e <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5bfc:	f46f 7100 	mvn.w	r1, #512	; 0x200
    5c00:	480a      	ldr	r0, [pc, #40]	; (5c2c <bt_le_scan_start+0xf8>)
    5c02:	f011 f954 	bl	16eae <atomic_and>
    5c06:	e7ef      	b.n	5be8 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
    5c08:	896a      	ldrh	r2, [r5, #10]
    5c0a:	8929      	ldrh	r1, [r5, #8]
    5c0c:	7828      	ldrb	r0, [r5, #0]
    5c0e:	f7ff fe11 	bl	5834 <start_le_scan_legacy>
	if (err) {
    5c12:	4604      	mov	r4, r0
    5c14:	b118      	cbz	r0, 5c1e <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5c16:	4805      	ldr	r0, [pc, #20]	; (5c2c <bt_le_scan_start+0xf8>)
    5c18:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5c1c:	e7d2      	b.n	5bc4 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
    5c1e:	4b04      	ldr	r3, [pc, #16]	; (5c30 <bt_le_scan_start+0xfc>)
    5c20:	601f      	str	r7, [r3, #0]
	return 0;
    5c22:	e794      	b.n	5b4e <bt_le_scan_start+0x1a>
		return -EAGAIN;
    5c24:	f06f 040a 	mvn.w	r4, #10
    5c28:	e791      	b.n	5b4e <bt_le_scan_start+0x1a>
    5c2a:	bf00      	nop
    5c2c:	200000cc 	.word	0x200000cc
    5c30:	20001144 	.word	0x20001144

00005c34 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    5c34:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5c36:	4808      	ldr	r0, [pc, #32]	; (5c58 <bt_le_scan_stop+0x24>)
    5c38:	f06f 0180 	mvn.w	r1, #128	; 0x80
    5c3c:	f011 f937 	bl	16eae <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5c40:	0603      	lsls	r3, r0, #24
    5c42:	d506      	bpl.n	5c52 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
    5c44:	4b05      	ldr	r3, [pc, #20]	; (5c5c <bt_le_scan_stop+0x28>)
    5c46:	2000      	movs	r0, #0
    5c48:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    5c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    5c4e:	f7ff be49 	b.w	58e4 <bt_le_scan_update>
}
    5c52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5c56:	bd08      	pop	{r3, pc}
    5c58:	200000cc 	.word	0x200000cc
    5c5c:	20001144 	.word	0x20001144

00005c60 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5c60:	4b0b      	ldr	r3, [pc, #44]	; (5c90 <notify_connected+0x30>)
{
    5c62:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5c64:	681d      	ldr	r5, [r3, #0]
{
    5c66:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5c68:	b925      	cbnz	r5, 5c74 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5c6a:	4d0a      	ldr	r5, [pc, #40]	; (5c94 <notify_connected+0x34>)
    5c6c:	4e0a      	ldr	r6, [pc, #40]	; (5c98 <notify_connected+0x38>)
    5c6e:	42b5      	cmp	r5, r6
    5c70:	d307      	bcc.n	5c82 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    5c72:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    5c74:	682b      	ldr	r3, [r5, #0]
    5c76:	b113      	cbz	r3, 5c7e <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    5c78:	7a61      	ldrb	r1, [r4, #9]
    5c7a:	4620      	mov	r0, r4
    5c7c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5c7e:	692d      	ldr	r5, [r5, #16]
    5c80:	e7f2      	b.n	5c68 <notify_connected+0x8>
		if (cb->connected) {
    5c82:	682b      	ldr	r3, [r5, #0]
    5c84:	b113      	cbz	r3, 5c8c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    5c86:	7a61      	ldrb	r1, [r4, #9]
    5c88:	4620      	mov	r0, r4
    5c8a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5c8c:	3514      	adds	r5, #20
    5c8e:	e7ee      	b.n	5c6e <notify_connected+0xe>
    5c90:	20001148 	.word	0x20001148
    5c94:	0001a13c 	.word	0x0001a13c
    5c98:	0001a150 	.word	0x0001a150

00005c9c <tx_notify>:
{
    5c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
    5ca0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5cf8 <tx_notify+0x5c>
{
    5ca4:	4604      	mov	r4, r0
	tx->cb = NULL;
    5ca6:	2700      	movs	r7, #0
	__asm__ volatile(
    5ca8:	f04f 0220 	mov.w	r2, #32
    5cac:	f3ef 8311 	mrs	r3, BASEPRI
    5cb0:	f382 8812 	msr	BASEPRI_MAX, r2
    5cb4:	f3bf 8f6f 	isb	sy
	return list->head;
    5cb8:	6a21      	ldr	r1, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
    5cba:	b929      	cbnz	r1, 5cc8 <tx_notify+0x2c>
	__asm__ volatile(
    5cbc:	f383 8811 	msr	BASEPRI, r3
    5cc0:	f3bf 8f6f 	isb	sy
}
    5cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5cc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    5cca:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    5ccc:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5cce:	4281      	cmp	r1, r0
	list->tail = node;
    5cd0:	bf08      	it	eq
    5cd2:	6262      	streq	r2, [r4, #36]	; 0x24
    5cd4:	f383 8811 	msr	BASEPRI, r3
    5cd8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    5cdc:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    5ce0:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
    5ce2:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
    5ce6:	4640      	mov	r0, r8
    5ce8:	f013 fcaf 	bl	1964a <k_queue_append>
		cb(conn, user_data, 0);
    5cec:	2200      	movs	r2, #0
    5cee:	4631      	mov	r1, r6
    5cf0:	4620      	mov	r0, r4
    5cf2:	47a8      	blx	r5
	while (1) {
    5cf4:	e7d8      	b.n	5ca8 <tx_notify+0xc>
    5cf6:	bf00      	nop
    5cf8:	20000814 	.word	0x20000814

00005cfc <conn_tx_destroy>:
{
    5cfc:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
    5cfe:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
    5d02:	2200      	movs	r2, #0
	tx->user_data = NULL;
    5d04:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
    5d08:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
    5d0a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
    5d0c:	4805      	ldr	r0, [pc, #20]	; (5d24 <conn_tx_destroy+0x28>)
    5d0e:	f013 fc9c 	bl	1964a <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    5d12:	4631      	mov	r1, r6
    5d14:	4620      	mov	r0, r4
    5d16:	462b      	mov	r3, r5
    5d18:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
    5d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    5d20:	4718      	bx	r3
    5d22:	bf00      	nop
    5d24:	20000814 	.word	0x20000814

00005d28 <send_frag>:
{
    5d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    5d2c:	694d      	ldr	r5, [r1, #20]
{
    5d2e:	4604      	mov	r4, r0
    5d30:	460e      	mov	r6, r1
    5d32:	4690      	mov	r8, r2
    5d34:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    5d36:	f04f 33ff 	mov.w	r3, #4294967295
    5d3a:	483f      	ldr	r0, [pc, #252]	; (5e38 <send_frag+0x110>)
    5d3c:	f04f 32ff 	mov.w	r2, #4294967295
    5d40:	f00f f872 	bl	14e28 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    5d44:	7aa3      	ldrb	r3, [r4, #10]
    5d46:	2b07      	cmp	r3, #7
    5d48:	d146      	bne.n	5dd8 <send_frag+0xb0>
	__asm__ volatile(
    5d4a:	f04f 0320 	mov.w	r3, #32
    5d4e:	f3ef 8211 	mrs	r2, BASEPRI
    5d52:	f383 8812 	msr	BASEPRI_MAX, r3
    5d56:	f3bf 8f6f 	isb	sy
	if (tx) {
    5d5a:	69a3      	ldr	r3, [r4, #24]
    5d5c:	2d00      	cmp	r5, #0
    5d5e:	d04e      	beq.n	5dfe <send_frag+0xd6>
	parent->next = child;
    5d60:	2100      	movs	r1, #0
    5d62:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    5d64:	2b00      	cmp	r3, #0
    5d66:	d147      	bne.n	5df8 <send_frag+0xd0>
	list->head = node;
    5d68:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    5d6c:	f382 8811 	msr	BASEPRI, r2
    5d70:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    5d74:	2104      	movs	r1, #4
    5d76:	f106 0008 	add.w	r0, r6, #8
    5d7a:	f012 fee2 	bl	18b42 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5d7e:	8823      	ldrh	r3, [r4, #0]
    5d80:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    5d84:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5d88:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5d8a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5d8e:	3b04      	subs	r3, #4
    5d90:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5d92:	2302      	movs	r3, #2
    5d94:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    5d96:	4630      	mov	r0, r6
    5d98:	f7fe ff54 	bl	4c44 <bt_send>
	if (err) {
    5d9c:	2800      	cmp	r0, #0
    5d9e:	d048      	beq.n	5e32 <send_frag+0x10a>
	__asm__ volatile(
    5da0:	f04f 0320 	mov.w	r3, #32
    5da4:	f3ef 8011 	mrs	r0, BASEPRI
    5da8:	f383 8812 	msr	BASEPRI_MAX, r3
    5dac:	f3bf 8f6f 	isb	sy
		if (tx) {
    5db0:	2d00      	cmp	r5, #0
    5db2:	d038      	beq.n	5e26 <send_frag+0xfe>
	return list->head;
    5db4:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5db6:	2200      	movs	r2, #0
    5db8:	b153      	cbz	r3, 5dd0 <send_frag+0xa8>
    5dba:	429d      	cmp	r5, r3
    5dbc:	d130      	bne.n	5e20 <send_frag+0xf8>
	return node->next;
    5dbe:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    5dc0:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    5dc2:	bb42      	cbnz	r2, 5e16 <send_frag+0xee>
    5dc4:	42a9      	cmp	r1, r5
	list->head = node;
    5dc6:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    5dc8:	d100      	bne.n	5dcc <send_frag+0xa4>
	list->tail = node;
    5dca:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    5dcc:	2300      	movs	r3, #0
    5dce:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    5dd0:	f380 8811 	msr	BASEPRI, r0
    5dd4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5dd8:	4817      	ldr	r0, [pc, #92]	; (5e38 <send_frag+0x110>)
    5dda:	f00e ffff 	bl	14ddc <z_impl_k_sem_give>
	if (tx) {
    5dde:	b11d      	cbz	r5, 5de8 <send_frag+0xc0>
		conn_tx_destroy(conn, tx);
    5de0:	4629      	mov	r1, r5
    5de2:	4620      	mov	r0, r4
    5de4:	f7ff ff8a 	bl	5cfc <conn_tx_destroy>
	if (always_consume) {
    5de8:	b11f      	cbz	r7, 5df2 <send_frag+0xca>
		net_buf_unref(buf);
    5dea:	4630      	mov	r0, r6
    5dec:	f00c fcc8 	bl	12780 <net_buf_unref>
	return false;
    5df0:	2700      	movs	r7, #0
}
    5df2:	4638      	mov	r0, r7
    5df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5df8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5dfa:	61a5      	str	r5, [r4, #24]
}
    5dfc:	e7b6      	b.n	5d6c <send_frag+0x44>
		if (tail_tx) {
    5dfe:	b133      	cbz	r3, 5e0e <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
    5e00:	f103 090c 	add.w	r9, r3, #12
    5e04:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    5e06:	3301      	adds	r3, #1
    5e08:	f8c9 3000 	str.w	r3, [r9]
    5e0c:	e7ae      	b.n	5d6c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    5e0e:	69e3      	ldr	r3, [r4, #28]
    5e10:	f104 091c 	add.w	r9, r4, #28
    5e14:	e7f7      	b.n	5e06 <send_frag+0xde>
Z_GENLIST_REMOVE(slist, snode)
    5e16:	42a9      	cmp	r1, r5
	parent->next = child;
    5e18:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5e1a:	bf08      	it	eq
    5e1c:	61a2      	streq	r2, [r4, #24]
}
    5e1e:	e7d5      	b.n	5dcc <send_frag+0xa4>
	return node->next;
    5e20:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	e7c8      	b.n	5db8 <send_frag+0x90>
			(*pending_no_cb)--;
    5e26:	f8d9 3000 	ldr.w	r3, [r9]
    5e2a:	3b01      	subs	r3, #1
    5e2c:	f8c9 3000 	str.w	r3, [r9]
    5e30:	e7ce      	b.n	5dd0 <send_frag+0xa8>
	return true;
    5e32:	2701      	movs	r7, #1
    5e34:	e7dd      	b.n	5df2 <send_frag+0xca>
    5e36:	bf00      	nop
    5e38:	20000100 	.word	0x20000100

00005e3c <bt_conn_get_pkts>:
}
    5e3c:	4800      	ldr	r0, [pc, #0]	; (5e40 <bt_conn_get_pkts+0x4>)
    5e3e:	4770      	bx	lr
    5e40:	20000100 	.word	0x20000100

00005e44 <bt_conn_new>:
{
    5e44:	b538      	push	{r3, r4, r5, lr}
    5e46:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    5e48:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5e4a:	2501      	movs	r5, #1
    5e4c:	428b      	cmp	r3, r1
    5e4e:	d102      	bne.n	5e56 <bt_conn_new+0x12>
		return NULL;
    5e50:	2400      	movs	r4, #0
}
    5e52:	4620      	mov	r0, r4
    5e54:	bd38      	pop	{r3, r4, r5, pc}
    5e56:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    5e5a:	f3bf 8f5b 	dmb	ish
    5e5e:	e852 0f00 	ldrex	r0, [r2]
    5e62:	2800      	cmp	r0, #0
    5e64:	d104      	bne.n	5e70 <bt_conn_new+0x2c>
    5e66:	e842 5c00 	strex	ip, r5, [r2]
    5e6a:	f1bc 0f00 	cmp.w	ip, #0
    5e6e:	d1f6      	bne.n	5e5e <bt_conn_new+0x1a>
    5e70:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    5e74:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    5e78:	d002      	beq.n	5e80 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    5e7a:	3301      	adds	r3, #1
    5e7c:	4604      	mov	r4, r0
    5e7e:	e7e5      	b.n	5e4c <bt_conn_new+0x8>
	if (!conn) {
    5e80:	2c00      	cmp	r4, #0
    5e82:	d0e6      	beq.n	5e52 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    5e84:	22b8      	movs	r2, #184	; 0xb8
    5e86:	2100      	movs	r1, #0
    5e88:	4620      	mov	r0, r4
    5e8a:	f010 fcbd 	bl	16808 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    5e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    5e92:	4904      	ldr	r1, [pc, #16]	; (5ea4 <bt_conn_new+0x60>)
    5e94:	f013 fce8 	bl	19868 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    5e98:	4903      	ldr	r1, [pc, #12]	; (5ea8 <bt_conn_new+0x64>)
    5e9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5e9e:	f013 fca5 	bl	197ec <k_work_init>
	return conn;
    5ea2:	e7d6      	b.n	5e52 <bt_conn_new+0xe>
    5ea4:	000065cd 	.word	0x000065cd
    5ea8:	00016ef1 	.word	0x00016ef1

00005eac <bt_conn_send_cb>:
{
    5eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eae:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    5eb0:	7a83      	ldrb	r3, [r0, #10]
    5eb2:	2b07      	cmp	r3, #7
{
    5eb4:	4604      	mov	r4, r0
    5eb6:	460d      	mov	r5, r1
    5eb8:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    5eba:	d11b      	bne.n	5ef4 <bt_conn_send_cb+0x48>
	if (cb) {
    5ebc:	b342      	cbz	r2, 5f10 <bt_conn_send_cb+0x64>
	return z_impl_z_current_get();
    5ebe:	f00f fc45 	bl	1574c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    5ec2:	4b16      	ldr	r3, [pc, #88]	; (5f1c <bt_conn_send_cb+0x70>)
    5ec4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    5ec6:	4816      	ldr	r0, [pc, #88]	; (5f20 <bt_conn_send_cb+0x74>)
    5ec8:	bf07      	ittee	eq
    5eca:	2200      	moveq	r2, #0
    5ecc:	2300      	moveq	r3, #0
    5ece:	f04f 32ff 	movne.w	r2, #4294967295
    5ed2:	f04f 33ff 	movne.w	r3, #4294967295
    5ed6:	f00e ff4d 	bl	14d74 <z_impl_k_queue_get>
    5eda:	4601      	mov	r1, r0
		if (!tx) {
    5edc:	b1d0      	cbz	r0, 5f14 <bt_conn_send_cb+0x68>
		if (conn->state != BT_CONN_CONNECTED) {
    5ede:	7aa3      	ldrb	r3, [r4, #10]
    5ee0:	2b07      	cmp	r3, #7
    5ee2:	f04f 0200 	mov.w	r2, #0
    5ee6:	d008      	beq.n	5efa <bt_conn_send_cb+0x4e>
	tx->user_data = NULL;
    5ee8:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
    5eec:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5eee:	480c      	ldr	r0, [pc, #48]	; (5f20 <bt_conn_send_cb+0x74>)
    5ef0:	f013 fbab 	bl	1964a <k_queue_append>
		return -ENOTCONN;
    5ef4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    5ef8:	e009      	b.n	5f0e <bt_conn_send_cb+0x62>
		tx->user_data = user_data;
    5efa:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    5efe:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
    5f00:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    5f02:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5f06:	4629      	mov	r1, r5
    5f08:	f012 fdc3 	bl	18a92 <net_buf_put>
	return 0;
    5f0c:	2000      	movs	r0, #0
}
    5f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    5f10:	614a      	str	r2, [r1, #20]
    5f12:	e7f6      	b.n	5f02 <bt_conn_send_cb+0x56>
			return -ENOBUFS;
    5f14:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5f18:	e7f9      	b.n	5f0e <bt_conn_send_cb+0x62>
    5f1a:	bf00      	nop
    5f1c:	20000f30 	.word	0x20000f30
    5f20:	20000814 	.word	0x20000814

00005f24 <bt_conn_prepare_events>:
{
    5f24:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
    5f26:	4b1a      	ldr	r3, [pc, #104]	; (5f90 <bt_conn_prepare_events+0x6c>)
    5f28:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5f2a:	2101      	movs	r1, #1
{
    5f2c:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    5f2e:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5f30:	f013 ff76 	bl	19e20 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    5f34:	4b17      	ldr	r3, [pc, #92]	; (5f94 <bt_conn_prepare_events+0x70>)
    5f36:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    5f3a:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    5f3e:	f010 ffc5 	bl	16ecc <atomic_get>
    5f42:	b908      	cbnz	r0, 5f48 <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    5f44:	2001      	movs	r0, #1
}
    5f46:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    5f48:	7a9a      	ldrb	r2, [r3, #10]
    5f4a:	b99a      	cbnz	r2, 5f74 <bt_conn_prepare_events+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f4c:	f3bf 8f5b 	dmb	ish
    5f50:	1d1a      	adds	r2, r3, #4
    5f52:	e852 1f00 	ldrex	r1, [r2]
    5f56:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    5f5a:	e842 0c00 	strex	ip, r0, [r2]
    5f5e:	f1bc 0f00 	cmp.w	ip, #0
    5f62:	d1f6      	bne.n	5f52 <bt_conn_prepare_events+0x2e>
    5f64:	f3bf 8f5b 	dmb	ish
    5f68:	064a      	lsls	r2, r1, #25
    5f6a:	d503      	bpl.n	5f74 <bt_conn_prepare_events+0x50>
		conn_cleanup(conn);
    5f6c:	4618      	mov	r0, r3
    5f6e:	f010 ffcb 	bl	16f08 <conn_cleanup>
    5f72:	e7e7      	b.n	5f44 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    5f74:	7a9b      	ldrb	r3, [r3, #10]
    5f76:	2b07      	cmp	r3, #7
    5f78:	d1e4      	bne.n	5f44 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    5f7a:	4b07      	ldr	r3, [pc, #28]	; (5f98 <bt_conn_prepare_events+0x74>)
    5f7c:	4628      	mov	r0, r5
    5f7e:	2200      	movs	r2, #0
    5f80:	2104      	movs	r1, #4
    5f82:	f013 ff4d 	bl	19e20 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    5f86:	2301      	movs	r3, #1
    5f88:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    5f8c:	2002      	movs	r0, #2
	return ev_count;
    5f8e:	e7da      	b.n	5f46 <bt_conn_prepare_events+0x22>
    5f90:	200001a8 	.word	0x200001a8
    5f94:	200009d0 	.word	0x200009d0
    5f98:	20000a08 	.word	0x20000a08

00005f9c <bt_conn_lookup_handle>:
{
    5f9c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    5f9e:	2101      	movs	r1, #1
    5fa0:	4801      	ldr	r0, [pc, #4]	; (5fa8 <bt_conn_lookup_handle+0xc>)
    5fa2:	f011 b838 	b.w	17016 <conn_lookup_handle>
    5fa6:	bf00      	nop
    5fa8:	200009d0 	.word	0x200009d0

00005fac <bt_conn_set_state>:
{
    5fac:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    5fae:	7a85      	ldrb	r5, [r0, #10]
    5fb0:	428d      	cmp	r5, r1
{
    5fb2:	4604      	mov	r4, r0
	if (conn->state == state) {
    5fb4:	d03f      	beq.n	6036 <bt_conn_set_state+0x8a>
	conn->state = state;
    5fb6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    5fb8:	b155      	cbz	r5, 5fd0 <bt_conn_set_state+0x24>
    5fba:	2d06      	cmp	r5, #6
    5fbc:	d00e      	beq.n	5fdc <bt_conn_set_state+0x30>
	switch (conn->state) {
    5fbe:	7aa3      	ldrb	r3, [r4, #10]
    5fc0:	2b07      	cmp	r3, #7
    5fc2:	d838      	bhi.n	6036 <bt_conn_set_state+0x8a>
    5fc4:	e8df f003 	tbb	[pc, r3]
    5fc8:	37371138 	.word	0x37371138
    5fcc:	297f3737 	.word	0x297f3737
		if (conn->type != BT_CONN_TYPE_ISO) {
    5fd0:	7883      	ldrb	r3, [r0, #2]
    5fd2:	2b08      	cmp	r3, #8
    5fd4:	d0f3      	beq.n	5fbe <bt_conn_set_state+0x12>
			bt_conn_ref(conn);
    5fd6:	f011 f803 	bl	16fe0 <bt_conn_ref>
    5fda:	e7f0      	b.n	5fbe <bt_conn_set_state+0x12>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5fdc:	7883      	ldrb	r3, [r0, #2]
    5fde:	2b01      	cmp	r3, #1
    5fe0:	d1ed      	bne.n	5fbe <bt_conn_set_state+0x12>
			k_work_cancel_delayable(&conn->deferred_work);
    5fe2:	3058      	adds	r0, #88	; 0x58
    5fe4:	f013 fc4e 	bl	19884 <k_work_cancel_delayable>
    5fe8:	e7e9      	b.n	5fbe <bt_conn_set_state+0x12>
	z_impl_k_sem_give(sem);
    5fea:	4d58      	ldr	r5, [pc, #352]	; (614c <bt_conn_set_state+0x1a0>)
		tx->pending_no_cb = 0U;
    5fec:	2600      	movs	r6, #0
	__asm__ volatile(
    5fee:	f04f 0320 	mov.w	r3, #32
    5ff2:	f3ef 8211 	mrs	r2, BASEPRI
    5ff6:	f383 8812 	msr	BASEPRI_MAX, r3
    5ffa:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    5ffe:	69e3      	ldr	r3, [r4, #28]
    6000:	2b00      	cmp	r3, #0
    6002:	f000 8082 	beq.w	610a <bt_conn_set_state+0x15e>
			conn->pending_no_cb--;
    6006:	3b01      	subs	r3, #1
    6008:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    600a:	f382 8811 	msr	BASEPRI, r2
    600e:	f3bf 8f6f 	isb	sy
    6012:	4628      	mov	r0, r5
    6014:	f00e fee2 	bl	14ddc <z_impl_k_sem_give>
}
    6018:	e7e9      	b.n	5fee <bt_conn_set_state+0x42>
		if (conn->type == BT_CONN_TYPE_SCO) {
    601a:	78a3      	ldrb	r3, [r4, #2]
    601c:	2b04      	cmp	r3, #4
    601e:	d00a      	beq.n	6036 <bt_conn_set_state+0x8a>
	z_impl_k_queue_init(queue);
    6020:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6024:	f013 fb05 	bl	19632 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    6028:	4849      	ldr	r0, [pc, #292]	; (6150 <bt_conn_set_state+0x1a4>)
    602a:	2100      	movs	r1, #0
    602c:	f00f fdb4 	bl	15b98 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6030:	2300      	movs	r3, #0
	list->tail = NULL;
    6032:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
    6036:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    6038:	78a3      	ldrb	r3, [r4, #2]
    603a:	2b04      	cmp	r3, #4
    603c:	d105      	bne.n	604a <bt_conn_set_state+0x9e>
	old = atomic_dec(&conn->ref);
    603e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
    6042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	old = atomic_dec(&conn->ref);
    6046:	f010 bf47 	b.w	16ed8 <atomic_dec.isra.0>
		switch (old_state) {
    604a:	3d01      	subs	r5, #1
    604c:	2d05      	cmp	r5, #5
    604e:	d8f2      	bhi.n	6036 <bt_conn_set_state+0x8a>
    6050:	a301      	add	r3, pc, #4	; (adr r3, 6058 <bt_conn_set_state+0xac>)
    6052:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    6056:	bf00      	nop
    6058:	00006071 	.word	0x00006071
    605c:	000060b9 	.word	0x000060b9
    6060:	0000603f 	.word	0x0000603f
    6064:	0000603f 	.word	0x0000603f
    6068:	000060b9 	.word	0x000060b9
    606c:	000060b9 	.word	0x000060b9
			tx_notify(conn);
    6070:	4620      	mov	r0, r4
    6072:	f7ff fe13 	bl	5c9c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    6076:	78a3      	ldrb	r3, [r4, #2]
    6078:	2b01      	cmp	r3, #1
    607a:	d10a      	bne.n	6092 <bt_conn_set_state+0xe6>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    607c:	f104 0558 	add.w	r5, r4, #88	; 0x58
    6080:	4628      	mov	r0, r5
    6082:	f013 fbfd 	bl	19880 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    6086:	f010 0f0c 	tst.w	r0, #12
    608a:	d002      	beq.n	6092 <bt_conn_set_state+0xe6>
				k_work_cancel_delayable(&conn->deferred_work);
    608c:	4628      	mov	r0, r5
    608e:	f013 fbf9 	bl	19884 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6092:	f3bf 8f5b 	dmb	ish
    6096:	3404      	adds	r4, #4
    6098:	e854 3f00 	ldrex	r3, [r4]
    609c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    60a0:	e844 3200 	strex	r2, r3, [r4]
    60a4:	2a00      	cmp	r2, #0
    60a6:	d1f7      	bne.n	6098 <bt_conn_set_state+0xec>
    60a8:	f3bf 8f5b 	dmb	ish
    60ac:	4828      	ldr	r0, [pc, #160]	; (6150 <bt_conn_set_state+0x1a4>)
}
    60ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60b2:	2100      	movs	r1, #0
    60b4:	f00f bd70 	b.w	15b98 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    60b8:	7a63      	ldrb	r3, [r4, #9]
    60ba:	2b00      	cmp	r3, #0
    60bc:	d0bf      	beq.n	603e <bt_conn_set_state+0x92>
				notify_connected(conn);
    60be:	4620      	mov	r0, r4
    60c0:	f7ff fdce 	bl	5c60 <notify_connected>
    60c4:	e7bb      	b.n	603e <bt_conn_set_state+0x92>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    60c6:	78a3      	ldrb	r3, [r4, #2]
    60c8:	2b01      	cmp	r3, #1
    60ca:	d1b4      	bne.n	6036 <bt_conn_set_state+0x8a>
					K_MSEC(10 * bt_dev.create_param.timeout));
    60cc:	4b21      	ldr	r3, [pc, #132]	; (6154 <bt_conn_set_state+0x1a8>)
    60ce:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    60d0:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    60d2:	b1c0      	cbz	r0, 6106 <bt_conn_set_state+0x15a>
    60d4:	230a      	movs	r3, #10
    60d6:	4358      	muls	r0, r3
    60d8:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    60da:	03c9      	lsls	r1, r1, #15
    60dc:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    60e0:	f240 33e7 	movw	r3, #999	; 0x3e7
    60e4:	03c0      	lsls	r0, r0, #15
    60e6:	18c0      	adds	r0, r0, r3
    60e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    60ec:	f04f 0300 	mov.w	r3, #0
    60f0:	f141 0100 	adc.w	r1, r1, #0
    60f4:	f7fa f804 	bl	100 <__aeabi_uldivmod>
    60f8:	4602      	mov	r2, r0
    60fa:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    60fc:	4620      	mov	r0, r4
}
    60fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    6102:	f00f b83f 	b.w	15184 <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
    6106:	4601      	mov	r1, r0
    6108:	e7e7      	b.n	60da <bt_conn_set_state+0x12e>
	return list->head;
    610a:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    610c:	b129      	cbz	r1, 611a <bt_conn_set_state+0x16e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    610e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    6110:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6112:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6114:	4281      	cmp	r1, r0
	list->tail = node;
    6116:	bf08      	it	eq
    6118:	61a3      	streq	r3, [r4, #24]
    611a:	f382 8811 	msr	BASEPRI, r2
    611e:	f3bf 8f6f 	isb	sy
		if (!node) {
    6122:	2900      	cmp	r1, #0
    6124:	d087      	beq.n	6036 <bt_conn_set_state+0x8a>
	__asm__ volatile(
    6126:	f04f 0220 	mov.w	r2, #32
    612a:	f3ef 8311 	mrs	r3, BASEPRI
    612e:	f382 8812 	msr	BASEPRI_MAX, r2
    6132:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    6136:	68ca      	ldr	r2, [r1, #12]
    6138:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    613a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
    613c:	f383 8811 	msr	BASEPRI, r3
    6140:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    6144:	4620      	mov	r0, r4
    6146:	f7ff fdd9 	bl	5cfc <conn_tx_destroy>
    614a:	e762      	b.n	6012 <bt_conn_set_state+0x66>
    614c:	20000100 	.word	0x20000100
    6150:	200001a8 	.word	0x200001a8
    6154:	20000000 	.word	0x20000000

00006158 <bt_conn_index>:
		index = conn - acl_conns;
    6158:	4b03      	ldr	r3, [pc, #12]	; (6168 <bt_conn_index+0x10>)
    615a:	1ac0      	subs	r0, r0, r3
    615c:	4b03      	ldr	r3, [pc, #12]	; (616c <bt_conn_index+0x14>)
    615e:	1180      	asrs	r0, r0, #6
    6160:	4358      	muls	r0, r3
}
    6162:	b2c0      	uxtb	r0, r0
    6164:	4770      	bx	lr
    6166:	bf00      	nop
    6168:	200009d0 	.word	0x200009d0
    616c:	aaaaaaab 	.word	0xaaaaaaab

00006170 <bt_conn_create_pdu_timeout>:
{
    6170:	b538      	push	{r3, r4, r5, lr}
    6172:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    6174:	4906      	ldr	r1, [pc, #24]	; (6190 <bt_conn_create_pdu_timeout+0x20>)
    6176:	2800      	cmp	r0, #0
    6178:	bf08      	it	eq
    617a:	4608      	moveq	r0, r1
    617c:	f012 fc60 	bl	18a40 <net_buf_alloc_fixed>
	if (!buf) {
    6180:	4604      	mov	r4, r0
    6182:	b118      	cbz	r0, 618c <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    6184:	1d29      	adds	r1, r5, #4
    6186:	3008      	adds	r0, #8
    6188:	f012 fc7f 	bl	18a8a <net_buf_simple_reserve>
}
    618c:	4620      	mov	r0, r4
    618e:	bd38      	pop	{r3, r4, r5, pc}
    6190:	20000844 	.word	0x20000844

00006194 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    6194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    6196:	1d03      	adds	r3, r0, #4
{
    6198:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    619a:	4618      	mov	r0, r3
    619c:	f010 fe96 	bl	16ecc <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    61a0:	05c2      	lsls	r2, r0, #23
    61a2:	d519      	bpl.n	61d8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    61a4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    61a8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    61ac:	4291      	cmp	r1, r2
    61ae:	d813      	bhi.n	61d8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    61b0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    61b4:	4291      	cmp	r1, r2
    61b6:	d30f      	bcc.n	61d8 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    61b8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    61bc:	4291      	cmp	r1, r2
    61be:	d10b      	bne.n	61d8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61c0:	f3bf 8f5b 	dmb	ish
    61c4:	e853 2f00 	ldrex	r2, [r3]
    61c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    61cc:	e843 2100 	strex	r1, r2, [r3]
    61d0:	2900      	cmp	r1, #0
    61d2:	d1f7      	bne.n	61c4 <notify_le_param_updated+0x30>
    61d4:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    61d8:	4b0f      	ldr	r3, [pc, #60]	; (6218 <notify_le_param_updated+0x84>)
    61da:	681d      	ldr	r5, [r3, #0]
    61dc:	b925      	cbnz	r5, 61e8 <notify_le_param_updated+0x54>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    61de:	4d0f      	ldr	r5, [pc, #60]	; (621c <notify_le_param_updated+0x88>)
    61e0:	4f0f      	ldr	r7, [pc, #60]	; (6220 <notify_le_param_updated+0x8c>)
    61e2:	42bd      	cmp	r5, r7
    61e4:	d30c      	bcc.n	6200 <notify_le_param_updated+0x6c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    61e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    61e8:	68ee      	ldr	r6, [r5, #12]
    61ea:	b13e      	cbz	r6, 61fc <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
    61ec:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    61f0:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    61f4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    61f8:	4620      	mov	r0, r4
    61fa:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    61fc:	692d      	ldr	r5, [r5, #16]
    61fe:	e7ed      	b.n	61dc <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
    6200:	68ee      	ldr	r6, [r5, #12]
    6202:	b13e      	cbz	r6, 6214 <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
    6204:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    6208:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    620c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    6210:	4620      	mov	r0, r4
    6212:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6214:	3514      	adds	r5, #20
    6216:	e7e4      	b.n	61e2 <notify_le_param_updated+0x4e>
    6218:	20001148 	.word	0x20001148
    621c:	0001a13c 	.word	0x0001a13c
    6220:	0001a150 	.word	0x0001a150

00006224 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    6224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6228:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    622a:	4608      	mov	r0, r1
{
    622c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    622e:	f010 fd5d 	bl	16cec <bt_le_conn_params_valid>
    6232:	4605      	mov	r5, r0
    6234:	b918      	cbnz	r0, 623e <le_param_req+0x1a>
		return false;
    6236:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    6238:	4628      	mov	r0, r5
    623a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    623e:	4b13      	ldr	r3, [pc, #76]	; (628c <le_param_req+0x68>)
    6240:	681e      	ldr	r6, [r3, #0]
    6242:	b946      	cbnz	r6, 6256 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6244:	4e12      	ldr	r6, [pc, #72]	; (6290 <le_param_req+0x6c>)
    6246:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6294 <le_param_req+0x70>
    624a:	4546      	cmp	r6, r8
    624c:	d2f4      	bcs.n	6238 <le_param_req+0x14>
		if (!cb->le_param_req) {
    624e:	68b3      	ldr	r3, [r6, #8]
    6250:	b983      	cbnz	r3, 6274 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6252:	3614      	adds	r6, #20
    6254:	e7f9      	b.n	624a <le_param_req+0x26>
		if (!cb->le_param_req) {
    6256:	68b3      	ldr	r3, [r6, #8]
    6258:	b90b      	cbnz	r3, 625e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    625a:	6936      	ldr	r6, [r6, #16]
    625c:	e7f1      	b.n	6242 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    625e:	4621      	mov	r1, r4
    6260:	4638      	mov	r0, r7
    6262:	4798      	blx	r3
    6264:	2800      	cmp	r0, #0
    6266:	d0e6      	beq.n	6236 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    6268:	4620      	mov	r0, r4
    626a:	f010 fd3f 	bl	16cec <bt_le_conn_params_valid>
    626e:	2800      	cmp	r0, #0
    6270:	d1f3      	bne.n	625a <le_param_req+0x36>
    6272:	e7e0      	b.n	6236 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    6274:	4621      	mov	r1, r4
    6276:	4638      	mov	r0, r7
    6278:	4798      	blx	r3
    627a:	2800      	cmp	r0, #0
    627c:	d0db      	beq.n	6236 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    627e:	4620      	mov	r0, r4
    6280:	f010 fd34 	bl	16cec <bt_le_conn_params_valid>
    6284:	2800      	cmp	r0, #0
    6286:	d1e4      	bne.n	6252 <le_param_req+0x2e>
    6288:	e7d5      	b.n	6236 <le_param_req+0x12>
    628a:	bf00      	nop
    628c:	20001148 	.word	0x20001148
    6290:	0001a13c 	.word	0x0001a13c
    6294:	0001a150 	.word	0x0001a150

00006298 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    6298:	b570      	push	{r4, r5, r6, lr}
    629a:	4606      	mov	r6, r0
    629c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    629e:	4809      	ldr	r0, [pc, #36]	; (62c4 <bt_conn_add_le+0x2c>)
    62a0:	2101      	movs	r1, #1
    62a2:	f7ff fdcf 	bl	5e44 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    62a6:	4604      	mov	r4, r0
    62a8:	b150      	cbz	r0, 62c0 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    62aa:	7206      	strb	r6, [r0, #8]
    62ac:	2207      	movs	r2, #7
    62ae:	4629      	mov	r1, r5
    62b0:	3088      	adds	r0, #136	; 0x88
    62b2:	f010 fa9e 	bl	167f2 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    62b6:	2301      	movs	r3, #1
    62b8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    62ba:	4b03      	ldr	r3, [pc, #12]	; (62c8 <bt_conn_add_le+0x30>)
    62bc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    62c0:	4620      	mov	r0, r4
    62c2:	bd70      	pop	{r4, r5, r6, pc}
    62c4:	200009d0 	.word	0x200009d0
    62c8:	00280018 	.word	0x00280018

000062cc <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    62cc:	b570      	push	{r4, r5, r6, lr}
    62ce:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    62d0:	480d      	ldr	r0, [pc, #52]	; (6308 <bt_conn_lookup_addr_le+0x3c>)
{
    62d2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    62d4:	f010 fe84 	bl	16fe0 <bt_conn_ref>

		if (!conn) {
    62d8:	4604      	mov	r4, r0
    62da:	b130      	cbz	r0, 62ea <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    62dc:	7883      	ldrb	r3, [r0, #2]
    62de:	2b01      	cmp	r3, #1
    62e0:	d005      	beq.n	62ee <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
    62e2:	30b8      	adds	r0, #184	; 0xb8
    62e4:	f010 fdf8 	bl	16ed8 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    62e8:	2400      	movs	r4, #0
}
    62ea:	4620      	mov	r0, r4
    62ec:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    62ee:	4629      	mov	r1, r5
    62f0:	4632      	mov	r2, r6
    62f2:	f010 febe 	bl	17072 <bt_conn_is_peer_addr_le>
    62f6:	4601      	mov	r1, r0
    62f8:	2800      	cmp	r0, #0
    62fa:	d1f6      	bne.n	62ea <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
    62fc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    6300:	f010 fdea 	bl	16ed8 <atomic_dec.isra.0>
	return NULL;
    6304:	460c      	mov	r4, r1
			continue;
    6306:	e7f0      	b.n	62ea <bt_conn_lookup_addr_le+0x1e>
    6308:	200009d0 	.word	0x200009d0

0000630c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    630e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6310:	480f      	ldr	r0, [pc, #60]	; (6350 <bt_conn_lookup_state_le+0x44>)
{
    6312:	460e      	mov	r6, r1
    6314:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6316:	f010 fe63 	bl	16fe0 <bt_conn_ref>

		if (!conn) {
    631a:	4604      	mov	r4, r0
    631c:	b1a8      	cbz	r0, 634a <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    631e:	7883      	ldrb	r3, [r0, #2]
    6320:	2b01      	cmp	r3, #1
    6322:	d005      	beq.n	6330 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
    6324:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    6328:	f010 fdd6 	bl	16ed8 <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    632c:	2400      	movs	r4, #0
			continue;
    632e:	e00c      	b.n	634a <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    6330:	b12e      	cbz	r6, 633e <bt_conn_lookup_state_le+0x32>
    6332:	4632      	mov	r2, r6
    6334:	4629      	mov	r1, r5
    6336:	f010 fe9c 	bl	17072 <bt_conn_is_peer_addr_le>
    633a:	2800      	cmp	r0, #0
    633c:	d0f2      	beq.n	6324 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    633e:	7aa3      	ldrb	r3, [r4, #10]
    6340:	42bb      	cmp	r3, r7
    6342:	d1ef      	bne.n	6324 <bt_conn_lookup_state_le+0x18>
    6344:	7a23      	ldrb	r3, [r4, #8]
    6346:	42ab      	cmp	r3, r5
    6348:	d1ec      	bne.n	6324 <bt_conn_lookup_state_le+0x18>
}
    634a:	4620      	mov	r0, r4
    634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    634e:	bf00      	nop
    6350:	200009d0 	.word	0x200009d0

00006354 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    6354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6358:	4604      	mov	r4, r0
    635a:	4844      	ldr	r0, [pc, #272]	; (646c <bt_conn_le_create+0x118>)
    635c:	f010 fdb6 	bl	16ecc <atomic_get>
    6360:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6362:	0741      	lsls	r1, r0, #29
{
    6364:	4615      	mov	r5, r2
    6366:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6368:	d405      	bmi.n	6376 <bt_conn_le_create+0x22>
		return -EAGAIN;
    636a:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    636e:	4628      	mov	r0, r5
    6370:	b002      	add	sp, #8
    6372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
    6376:	4610      	mov	r0, r2
    6378:	f010 fcb8 	bl	16cec <bt_le_conn_params_valid>
    637c:	b910      	cbnz	r0, 6384 <bt_conn_le_create+0x30>
		return -EINVAL;
    637e:	f06f 0515 	mvn.w	r5, #21
    6382:	e7f4      	b.n	636e <bt_conn_le_create+0x1a>
    6384:	4839      	ldr	r0, [pc, #228]	; (646c <bt_conn_le_create+0x118>)
    6386:	f010 fda1 	bl	16ecc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    638a:	0602      	lsls	r2, r0, #24
    638c:	d4ed      	bmi.n	636a <bt_conn_le_create+0x16>
    638e:	4837      	ldr	r0, [pc, #220]	; (646c <bt_conn_le_create+0x118>)
    6390:	f010 fd9c 	bl	16ecc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    6394:	04c3      	lsls	r3, r0, #19
    6396:	f3c0 3800 	ubfx	r8, r0, #12, #1
    639a:	d461      	bmi.n	6460 <bt_conn_le_create+0x10c>
	if (!bt_id_scan_random_addr_check()) {
    639c:	f010 fd85 	bl	16eaa <bt_id_scan_random_addr_check>
    63a0:	2800      	cmp	r0, #0
    63a2:	d0ec      	beq.n	637e <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    63a4:	4621      	mov	r1, r4
    63a6:	4640      	mov	r0, r8
    63a8:	f010 fe83 	bl	170b2 <bt_conn_exists_le>
    63ac:	2800      	cmp	r0, #0
    63ae:	d1e6      	bne.n	637e <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    63b0:	7823      	ldrb	r3, [r4, #0]
    63b2:	3b02      	subs	r3, #2
    63b4:	2b01      	cmp	r3, #1
    63b6:	d848      	bhi.n	644a <bt_conn_le_create+0xf6>
    63b8:	2207      	movs	r2, #7
    63ba:	4621      	mov	r1, r4
    63bc:	4668      	mov	r0, sp
    63be:	f010 fa18 	bl	167f2 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    63c2:	f89d 3000 	ldrb.w	r3, [sp]
    63c6:	3b02      	subs	r3, #2
    63c8:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    63cc:	4669      	mov	r1, sp
    63ce:	2000      	movs	r0, #0
    63d0:	f7ff ff62 	bl	6298 <bt_conn_add_le>
	if (!conn) {
    63d4:	4604      	mov	r4, r0
    63d6:	2800      	cmp	r0, #0
    63d8:	d045      	beq.n	6466 <bt_conn_le_create+0x112>
	conn->le.interval_min = param->interval_min;
    63da:	882b      	ldrh	r3, [r5, #0]
    63dc:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    63e0:	886b      	ldrh	r3, [r5, #2]
    63e2:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    63e6:	88ab      	ldrh	r3, [r5, #4]
    63e8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    63ec:	88eb      	ldrh	r3, [r5, #6]
    63ee:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    63f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    63f6:	4d1e      	ldr	r5, [pc, #120]	; (6470 <bt_conn_le_create+0x11c>)
    63f8:	f105 0c08 	add.w	ip, r5, #8
    63fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    6400:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    6402:	2b00      	cmp	r3, #0
    6404:	bf08      	it	eq
    6406:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    640a:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    640c:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    640e:	b903      	cbnz	r3, 6412 <bt_conn_le_create+0xbe>
    6410:	89ab      	ldrh	r3, [r5, #12]
    6412:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
    6414:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
    6416:	b903      	cbnz	r3, 641a <bt_conn_le_create+0xc6>
    6418:	89eb      	ldrh	r3, [r5, #14]
    641a:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
    641c:	2106      	movs	r1, #6
    641e:	4620      	mov	r0, r4
    6420:	f7ff fdc4 	bl	5fac <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    6424:	4620      	mov	r0, r4
    6426:	f010 fbc4 	bl	16bb2 <bt_le_create_conn>
	if (err) {
    642a:	4605      	mov	r5, r0
    642c:	b1b0      	cbz	r0, 645c <bt_conn_le_create+0x108>
		conn->err = 0;
    642e:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6430:	4620      	mov	r0, r4
		conn->err = 0;
    6432:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6434:	4631      	mov	r1, r6
    6436:	f7ff fdb9 	bl	5fac <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    643a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    643e:	f010 fd4b 	bl	16ed8 <atomic_dec.isra.0>
		bt_le_scan_update(false);
    6442:	4630      	mov	r0, r6
    6444:	f7ff fa4e 	bl	58e4 <bt_le_scan_update>
		return err;
    6448:	e791      	b.n	636e <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    644a:	4621      	mov	r1, r4
    644c:	f010 fd19 	bl	16e82 <bt_lookup_id_addr>
    6450:	2207      	movs	r2, #7
    6452:	4601      	mov	r1, r0
    6454:	4668      	mov	r0, sp
    6456:	f010 f9cc 	bl	167f2 <memcpy>
}
    645a:	e7b7      	b.n	63cc <bt_conn_le_create+0x78>
	*ret_conn = conn;
    645c:	603c      	str	r4, [r7, #0]
	return 0;
    645e:	e786      	b.n	636e <bt_conn_le_create+0x1a>
		return -EALREADY;
    6460:	f06f 0577 	mvn.w	r5, #119	; 0x77
    6464:	e783      	b.n	636e <bt_conn_le_create+0x1a>
		return -ENOMEM;
    6466:	f06f 050b 	mvn.w	r5, #11
    646a:	e780      	b.n	636e <bt_conn_le_create+0x1a>
    646c:	200000cc 	.word	0x200000cc
    6470:	20000000 	.word	0x20000000

00006474 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    6474:	b570      	push	{r4, r5, r6, lr}
    6476:	4606      	mov	r6, r0
    6478:	4839      	ldr	r0, [pc, #228]	; (6560 <bt_le_set_auto_conn+0xec>)
    647a:	f010 fd27 	bl	16ecc <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    647e:	0740      	lsls	r0, r0, #29
{
    6480:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6482:	d566      	bpl.n	6552 <bt_le_set_auto_conn+0xde>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    6484:	b929      	cbnz	r1, 6492 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    6486:	f010 fd10 	bl	16eaa <bt_id_scan_random_addr_check>
    648a:	b940      	cbnz	r0, 649e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    648c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    6490:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    6492:	4608      	mov	r0, r1
    6494:	f010 fc2a 	bl	16cec <bt_le_conn_params_valid>
    6498:	2800      	cmp	r0, #0
    649a:	d1f4      	bne.n	6486 <bt_le_set_auto_conn+0x12>
    649c:	e7f6      	b.n	648c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    649e:	4631      	mov	r1, r6
    64a0:	2000      	movs	r0, #0
    64a2:	f7ff ff13 	bl	62cc <bt_conn_lookup_addr_le>
	if (!conn) {
    64a6:	4604      	mov	r4, r0
    64a8:	b928      	cbnz	r0, 64b6 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    64aa:	4631      	mov	r1, r6
    64ac:	f7ff fef4 	bl	6298 <bt_conn_add_le>
		if (!conn) {
    64b0:	4604      	mov	r4, r0
    64b2:	2800      	cmp	r0, #0
    64b4:	d050      	beq.n	6558 <bt_le_set_auto_conn+0xe4>
		if (!atomic_test_and_set_bit(conn->flags,
    64b6:	1d23      	adds	r3, r4, #4
	old = atomic_dec(&conn->ref);
    64b8:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
	if (param) {
    64bc:	b385      	cbz	r5, 6520 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    64be:	882a      	ldrh	r2, [r5, #0]
    64c0:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    64c4:	886a      	ldrh	r2, [r5, #2]
    64c6:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    64ca:	88aa      	ldrh	r2, [r5, #4]
    64cc:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    64d0:	88ea      	ldrh	r2, [r5, #6]
    64d2:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    64d6:	f3bf 8f5b 	dmb	ish
    64da:	e853 2f00 	ldrex	r2, [r3]
    64de:	f042 0101 	orr.w	r1, r2, #1
    64e2:	e843 1000 	strex	r0, r1, [r3]
    64e6:	2800      	cmp	r0, #0
    64e8:	d1f7      	bne.n	64da <bt_le_set_auto_conn+0x66>
    64ea:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    64ee:	07d1      	lsls	r1, r2, #31
    64f0:	d402      	bmi.n	64f8 <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
    64f2:	4620      	mov	r0, r4
    64f4:	f010 fd74 	bl	16fe0 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    64f8:	7aa3      	ldrb	r3, [r4, #10]
    64fa:	b963      	cbnz	r3, 6516 <bt_le_set_auto_conn+0xa2>
    64fc:	4818      	ldr	r0, [pc, #96]	; (6560 <bt_le_set_auto_conn+0xec>)
    64fe:	f010 fce5 	bl	16ecc <atomic_get>
    6502:	0743      	lsls	r3, r0, #29
    6504:	d507      	bpl.n	6516 <bt_le_set_auto_conn+0xa2>
		if (param) {
    6506:	b11d      	cbz	r5, 6510 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
    6508:	2102      	movs	r1, #2
    650a:	4620      	mov	r0, r4
    650c:	f7ff fd4e 	bl	5fac <bt_conn_set_state>
		bt_le_scan_update(false);
    6510:	2000      	movs	r0, #0
    6512:	f7ff f9e7 	bl	58e4 <bt_le_scan_update>
	old = atomic_dec(&conn->ref);
    6516:	4630      	mov	r0, r6
    6518:	f010 fcde 	bl	16ed8 <atomic_dec.isra.0>
	return 0;
    651c:	2000      	movs	r0, #0
    651e:	e7b7      	b.n	6490 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6520:	f3bf 8f5b 	dmb	ish
    6524:	e853 2f00 	ldrex	r2, [r3]
    6528:	f022 0101 	bic.w	r1, r2, #1
    652c:	e843 1000 	strex	r0, r1, [r3]
    6530:	2800      	cmp	r0, #0
    6532:	d1f7      	bne.n	6524 <bt_le_set_auto_conn+0xb0>
    6534:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    6538:	07d2      	lsls	r2, r2, #31
    653a:	d5dd      	bpl.n	64f8 <bt_le_set_auto_conn+0x84>
	old = atomic_dec(&conn->ref);
    653c:	4630      	mov	r0, r6
    653e:	f010 fccb 	bl	16ed8 <atomic_dec.isra.0>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
    6542:	7aa3      	ldrb	r3, [r4, #10]
    6544:	2b02      	cmp	r3, #2
    6546:	d1d7      	bne.n	64f8 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6548:	4629      	mov	r1, r5
    654a:	4620      	mov	r0, r4
    654c:	f7ff fd2e 	bl	5fac <bt_conn_set_state>
    6550:	e7d2      	b.n	64f8 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    6552:	f06f 000a 	mvn.w	r0, #10
    6556:	e79b      	b.n	6490 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    6558:	f06f 000b 	mvn.w	r0, #11
    655c:	e798      	b.n	6490 <bt_le_set_auto_conn+0x1c>
    655e:	bf00      	nop
    6560:	200000cc 	.word	0x200000cc

00006564 <send_conn_le_param_update>:
{
    6564:	b538      	push	{r3, r4, r5, lr}
    6566:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    6568:	4608      	mov	r0, r1
{
    656a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    656c:	f010 fbbe 	bl	16cec <bt_le_conn_params_valid>
    6570:	b338      	cbz	r0, 65c2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6572:	4b15      	ldr	r3, [pc, #84]	; (65c8 <send_conn_le_param_update+0x64>)
    6574:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    6578:	0799      	lsls	r1, r3, #30
    657a:	d407      	bmi.n	658c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    657c:	78e3      	ldrb	r3, [r4, #3]
    657e:	b173      	cbz	r3, 659e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    6580:	4629      	mov	r1, r5
    6582:	4620      	mov	r0, r4
}
    6584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6588:	f000 b9be 	b.w	6908 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    658c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    6590:	079a      	lsls	r2, r3, #30
    6592:	d5f3      	bpl.n	657c <send_conn_le_param_update+0x18>
    6594:	1d20      	adds	r0, r4, #4
    6596:	f010 fc99 	bl	16ecc <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    659a:	0583      	lsls	r3, r0, #22
    659c:	d4ee      	bmi.n	657c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    659e:	4629      	mov	r1, r5
    65a0:	4620      	mov	r0, r4
    65a2:	f010 fdca 	bl	1713a <bt_conn_le_conn_update>
		if (rc == 0) {
    65a6:	b958      	cbnz	r0, 65c0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    65a8:	882b      	ldrh	r3, [r5, #0]
    65aa:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    65ae:	886b      	ldrh	r3, [r5, #2]
    65b0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    65b4:	88ab      	ldrh	r3, [r5, #4]
    65b6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    65ba:	88eb      	ldrh	r3, [r5, #6]
    65bc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    65c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    65c2:	f06f 0015 	mvn.w	r0, #21
    65c6:	e7fb      	b.n	65c0 <send_conn_le_param_update+0x5c>
    65c8:	20000000 	.word	0x20000000

000065cc <deferred_work>:
{
    65cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    65ce:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    65d2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    65d4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    65d8:	bb03      	cbnz	r3, 661c <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
    65da:	4630      	mov	r0, r6
    65dc:	f010 fe02 	bl	171e4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    65e0:	4b2d      	ldr	r3, [pc, #180]	; (6698 <deferred_work+0xcc>)
    65e2:	681d      	ldr	r5, [r3, #0]
    65e4:	b955      	cbnz	r5, 65fc <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    65e6:	4d2d      	ldr	r5, [pc, #180]	; (669c <deferred_work+0xd0>)
    65e8:	4f2d      	ldr	r7, [pc, #180]	; (66a0 <deferred_work+0xd4>)
    65ea:	42bd      	cmp	r5, r7
    65ec:	d30e      	bcc.n	660c <deferred_work+0x40>
	old = atomic_dec(&conn->ref);
    65ee:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
    65f2:	b003      	add	sp, #12
    65f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	old = atomic_dec(&conn->ref);
    65f8:	f010 bc6e 	b.w	16ed8 <atomic_dec.isra.0>
		if (cb->disconnected) {
    65fc:	686b      	ldr	r3, [r5, #4]
    65fe:	b11b      	cbz	r3, 6608 <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
    6600:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    6604:	4630      	mov	r0, r6
    6606:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6608:	692d      	ldr	r5, [r5, #16]
    660a:	e7eb      	b.n	65e4 <deferred_work+0x18>
		if (cb->disconnected) {
    660c:	686b      	ldr	r3, [r5, #4]
    660e:	b11b      	cbz	r3, 6618 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
    6610:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    6614:	4630      	mov	r0, r6
    6616:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    6618:	3514      	adds	r5, #20
    661a:	e7e6      	b.n	65ea <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    661c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    6620:	2b01      	cmp	r3, #1
    6622:	d137      	bne.n	6694 <deferred_work+0xc8>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6624:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    6628:	b923      	cbnz	r3, 6634 <deferred_work+0x68>
}
    662a:	b003      	add	sp, #12
    662c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    6630:	f7fe b9ea 	b.w	4a08 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    6634:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    6638:	f3bf 8f5b 	dmb	ish
    663c:	e855 3f00 	ldrex	r3, [r5]
    6640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6644:	e845 2100 	strex	r1, r2, [r5]
    6648:	2900      	cmp	r1, #0
    664a:	d1f7      	bne.n	663c <deferred_work+0x70>
    664c:	f3bf 8f5b 	dmb	ish
    6650:	05db      	lsls	r3, r3, #23
    6652:	d513      	bpl.n	667c <deferred_work+0xb0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6654:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    6658:	f8ad 3000 	strh.w	r3, [sp]
    665c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    6660:	f8ad 3002 	strh.w	r3, [sp, #2]
    6664:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    6668:	f8ad 3004 	strh.w	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    666c:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    666e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    6672:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    6676:	4630      	mov	r0, r6
    6678:	f7ff ff74 	bl	6564 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    667c:	f3bf 8f5b 	dmb	ish
    6680:	e855 3f00 	ldrex	r3, [r5]
    6684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6688:	e845 3200 	strex	r2, r3, [r5]
    668c:	2a00      	cmp	r2, #0
    668e:	d1f7      	bne.n	6680 <deferred_work+0xb4>
    6690:	f3bf 8f5b 	dmb	ish
}
    6694:	b003      	add	sp, #12
    6696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6698:	20001148 	.word	0x20001148
    669c:	0001a13c 	.word	0x0001a13c
    66a0:	0001a150 	.word	0x0001a150

000066a4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    66a4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    66a6:	4801      	ldr	r0, [pc, #4]	; (66ac <bt_conn_create_frag_timeout+0x8>)
    66a8:	f7ff bd62 	b.w	6170 <bt_conn_create_pdu_timeout>
    66ac:	2000089c 	.word	0x2000089c

000066b0 <create_frag>:
{
    66b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66b4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    66b6:	f04f 33ff 	mov.w	r3, #4294967295
    66ba:	f04f 32ff 	mov.w	r2, #4294967295
    66be:	2000      	movs	r0, #0
{
    66c0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    66c2:	f7ff ffef 	bl	66a4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    66c6:	7ab3      	ldrb	r3, [r6, #10]
    66c8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    66ca:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    66cc:	f04f 0600 	mov.w	r6, #0
    66d0:	d005      	beq.n	66de <create_frag+0x2e>
		net_buf_unref(frag);
    66d2:	f00c f855 	bl	12780 <net_buf_unref>
		return NULL;
    66d6:	4635      	mov	r5, r6
}
    66d8:	4628      	mov	r0, r5
    66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    66de:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    66e0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    66e4:	4e0c      	ldr	r6, [pc, #48]	; (6718 <create_frag+0x68>)
    66e6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    66e8:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    66ec:	f012 fa55 	bl	18b9a <net_buf_simple_tailroom>
    66f0:	4580      	cmp	r8, r0
    66f2:	d20c      	bcs.n	670e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    66f4:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    66f8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    66fc:	4632      	mov	r2, r6
    66fe:	4638      	mov	r0, r7
    6700:	f012 fa0c 	bl	18b1c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    6704:	4631      	mov	r1, r6
    6706:	4620      	mov	r0, r4
    6708:	f012 fa23 	bl	18b52 <net_buf_simple_pull>
    670c:	e7e4      	b.n	66d8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    670e:	4638      	mov	r0, r7
    6710:	f012 fa43 	bl	18b9a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6714:	b286      	uxth	r6, r0
    6716:	e7ef      	b.n	66f8 <create_frag+0x48>
    6718:	20000000 	.word	0x20000000

0000671c <bt_conn_process_tx>:
{
    671c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    671e:	7a83      	ldrb	r3, [r0, #10]
{
    6720:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6722:	b993      	cbnz	r3, 674a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6724:	f3bf 8f5b 	dmb	ish
    6728:	1d03      	adds	r3, r0, #4
    672a:	e853 2f00 	ldrex	r2, [r3]
    672e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6732:	e843 1500 	strex	r5, r1, [r3]
    6736:	2d00      	cmp	r5, #0
    6738:	d1f7      	bne.n	672a <bt_conn_process_tx+0xe>
    673a:	f3bf 8f5b 	dmb	ish
    673e:	0653      	lsls	r3, r2, #25
    6740:	d503      	bpl.n	674a <bt_conn_process_tx+0x2e>
}
    6742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    6746:	f010 bbdf 	b.w	16f08 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    674a:	2200      	movs	r2, #0
    674c:	2300      	movs	r3, #0
    674e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6752:	f012 f97a 	bl	18a4a <net_buf_get>
	BT_ASSERT(buf);
    6756:	4605      	mov	r5, r0
    6758:	b960      	cbnz	r0, 6774 <bt_conn_process_tx+0x58>
    675a:	4a1f      	ldr	r2, [pc, #124]	; (67d8 <bt_conn_process_tx+0xbc>)
    675c:	491f      	ldr	r1, [pc, #124]	; (67dc <bt_conn_process_tx+0xc0>)
    675e:	4820      	ldr	r0, [pc, #128]	; (67e0 <bt_conn_process_tx+0xc4>)
    6760:	f240 23fe 	movw	r3, #766	; 0x2fe
    6764:	f00f fdc5 	bl	162f2 <assert_print>
    6768:	4040      	eors	r0, r0
    676a:	f380 8811 	msr	BASEPRI, r0
    676e:	f04f 0003 	mov.w	r0, #3
    6772:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    6774:	4e1b      	ldr	r6, [pc, #108]	; (67e4 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    6776:	89aa      	ldrh	r2, [r5, #12]
    6778:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    677c:	429a      	cmp	r2, r3
    677e:	d807      	bhi.n	6790 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    6780:	2300      	movs	r3, #0
    6782:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    6784:	4629      	mov	r1, r5
    6786:	4620      	mov	r0, r4
    6788:	f7ff face 	bl	5d28 <send_frag>
	if (!send_buf(conn, buf)) {
    678c:	b130      	cbz	r0, 679c <bt_conn_process_tx+0x80>
}
    678e:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    6790:	4629      	mov	r1, r5
    6792:	4620      	mov	r0, r4
    6794:	f7ff ff8c 	bl	66b0 <create_frag>
	if (!frag) {
    6798:	4601      	mov	r1, r0
    679a:	b920      	cbnz	r0, 67a6 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    679c:	4628      	mov	r0, r5
}
    679e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    67a2:	f00b bfed 	b.w	12780 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    67a6:	2301      	movs	r3, #1
    67a8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    67aa:	4620      	mov	r0, r4
    67ac:	f7ff fabc 	bl	5d28 <send_frag>
    67b0:	2800      	cmp	r0, #0
    67b2:	d0f3      	beq.n	679c <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    67b4:	89aa      	ldrh	r2, [r5, #12]
    67b6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    67ba:	429a      	cmp	r2, r3
    67bc:	d802      	bhi.n	67c4 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    67be:	2300      	movs	r3, #0
    67c0:	2203      	movs	r2, #3
    67c2:	e7df      	b.n	6784 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    67c4:	4629      	mov	r1, r5
    67c6:	4620      	mov	r0, r4
    67c8:	f7ff ff72 	bl	66b0 <create_frag>
		if (!frag) {
    67cc:	4601      	mov	r1, r0
    67ce:	2800      	cmp	r0, #0
    67d0:	d0e4      	beq.n	679c <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    67d2:	2301      	movs	r3, #1
    67d4:	461a      	mov	r2, r3
    67d6:	e7e8      	b.n	67aa <bt_conn_process_tx+0x8e>
    67d8:	0001b4dc 	.word	0x0001b4dc
    67dc:	0001b443 	.word	0x0001b443
    67e0:	0001b406 	.word	0x0001b406
    67e4:	20000000 	.word	0x20000000

000067e8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    67e8:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    67ea:	4914      	ldr	r1, [pc, #80]	; (683c <bt_conn_init+0x54>)
    67ec:	4814      	ldr	r0, [pc, #80]	; (6840 <bt_conn_init+0x58>)
    67ee:	f012 ff2c 	bl	1964a <k_queue_append>
    67f2:	4914      	ldr	r1, [pc, #80]	; (6844 <bt_conn_init+0x5c>)
    67f4:	4812      	ldr	r0, [pc, #72]	; (6840 <bt_conn_init+0x58>)
    67f6:	f012 ff28 	bl	1964a <k_queue_append>
    67fa:	4913      	ldr	r1, [pc, #76]	; (6848 <bt_conn_init+0x60>)
    67fc:	4810      	ldr	r0, [pc, #64]	; (6840 <bt_conn_init+0x58>)
    67fe:	f012 ff24 	bl	1964a <k_queue_append>
	}

	bt_att_init();
    6802:	f000 fde1 	bl	73c8 <bt_att_init>

	err = bt_smp_init();
    6806:	f012 f918 	bl	18a3a <bt_smp_init>
	if (err) {
    680a:	4605      	mov	r5, r0
    680c:	b9a0      	cbnz	r0, 6838 <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    680e:	f010 fdc0 	bl	17392 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6812:	480e      	ldr	r0, [pc, #56]	; (684c <bt_conn_init+0x64>)
    6814:	f010 fbe4 	bl	16fe0 <bt_conn_ref>

			if (!conn) {
    6818:	4604      	mov	r4, r0
    681a:	b168      	cbz	r0, 6838 <bt_conn_init+0x50>
    681c:	3004      	adds	r0, #4
    681e:	f010 fb55 	bl	16ecc <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    6822:	07c3      	lsls	r3, r0, #31
    6824:	d504      	bpl.n	6830 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    6826:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
    6828:	2102      	movs	r1, #2
    682a:	4620      	mov	r0, r4
    682c:	f7ff fbbe 	bl	5fac <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    6830:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    6834:	f010 fb50 	bl	16ed8 <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    6838:	4628      	mov	r0, r5
    683a:	bd38      	pop	{r3, r4, r5, pc}
    683c:	2000114c 	.word	0x2000114c
    6840:	20000814 	.word	0x20000814
    6844:	2000115c 	.word	0x2000115c
    6848:	2000116c 	.word	0x2000116c
    684c:	200009d0 	.word	0x200009d0

00006850 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6850:	4b04      	ldr	r3, [pc, #16]	; (6864 <l2cap_accept+0x14>)
    6852:	6818      	ldr	r0, [r3, #0]
    6854:	b918      	cbnz	r0, 685e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6856:	4a04      	ldr	r2, [pc, #16]	; (6868 <l2cap_accept+0x18>)
    6858:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    685a:	600b      	str	r3, [r1, #0]

		return 0;
    685c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    685e:	f06f 000b 	mvn.w	r0, #11
}
    6862:	4770      	bx	lr
    6864:	2000117c 	.word	0x2000117c
    6868:	0001a2ec 	.word	0x0001a2ec

0000686c <bt_l2cap_connected>:
{
    686c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    686e:	4d24      	ldr	r5, [pc, #144]	; (6900 <bt_l2cap_connected+0x94>)
    6870:	4f24      	ldr	r7, [pc, #144]	; (6904 <bt_l2cap_connected+0x98>)
{
    6872:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6874:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6876:	42bd      	cmp	r5, r7
    6878:	d301      	bcc.n	687e <bt_l2cap_connected+0x12>
}
    687a:	b003      	add	sp, #12
    687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    687e:	686b      	ldr	r3, [r5, #4]
    6880:	a901      	add	r1, sp, #4
    6882:	4620      	mov	r0, r4
    6884:	4798      	blx	r3
    6886:	2800      	cmp	r0, #0
    6888:	db34      	blt.n	68f4 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    688a:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    688c:	882a      	ldrh	r2, [r5, #0]
    688e:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    6890:	849a      	strh	r2, [r3, #36]	; 0x24
    6892:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    6896:	68a8      	ldr	r0, [r5, #8]
    6898:	f3bf 8f5b 	dmb	ish
    689c:	e852 1f00 	ldrex	r1, [r2]
    68a0:	e842 6c00 	strex	ip, r6, [r2]
    68a4:	f1bc 0f00 	cmp.w	ip, #0
    68a8:	d1f8      	bne.n	689c <bt_l2cap_connected+0x30>
    68aa:	f3bf 8f5b 	dmb	ish
	return list->tail;
    68ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
    68b0:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
    68b2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    68b6:	b9f9      	cbnz	r1, 68f8 <bt_l2cap_connected+0x8c>
	list->head = node;
    68b8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
    68bc:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    68be:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    68c0:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
    68c2:	6843      	ldr	r3, [r0, #4]
    68c4:	681b      	ldr	r3, [r3, #0]
    68c6:	b103      	cbz	r3, 68ca <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    68c8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    68ca:	9b01      	ldr	r3, [sp, #4]
    68cc:	f3bf 8f5b 	dmb	ish
    68d0:	3310      	adds	r3, #16
    68d2:	e853 2f00 	ldrex	r2, [r3]
    68d6:	f042 0201 	orr.w	r2, r2, #1
    68da:	e843 2100 	strex	r1, r2, [r3]
    68de:	2900      	cmp	r1, #0
    68e0:	d1f7      	bne.n	68d2 <bt_l2cap_connected+0x66>
    68e2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    68e6:	9801      	ldr	r0, [sp, #4]
    68e8:	6843      	ldr	r3, [r0, #4]
    68ea:	699b      	ldr	r3, [r3, #24]
    68ec:	b113      	cbz	r3, 68f4 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
    68ee:	f100 0110 	add.w	r1, r0, #16
    68f2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    68f4:	350c      	adds	r5, #12
    68f6:	e7be      	b.n	6876 <bt_l2cap_connected+0xa>
	parent->next = child;
    68f8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    68fa:	6562      	str	r2, [r4, #84]	; 0x54
}
    68fc:	e7de      	b.n	68bc <bt_l2cap_connected+0x50>
    68fe:	bf00      	nop
    6900:	0001a118 	.word	0x0001a118
    6904:	0001a13c 	.word	0x0001a13c

00006908 <bt_l2cap_update_conn_param>:
{
    6908:	b573      	push	{r0, r1, r4, r5, r6, lr}
    690a:	460d      	mov	r5, r1
	ident++;
    690c:	4916      	ldr	r1, [pc, #88]	; (6968 <bt_l2cap_update_conn_param+0x60>)
    690e:	780b      	ldrb	r3, [r1, #0]
    6910:	3301      	adds	r3, #1
	if (!ident) {
    6912:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    6916:	bf08      	it	eq
    6918:	2301      	moveq	r3, #1
    691a:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    691c:	7809      	ldrb	r1, [r1, #0]
{
    691e:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6920:	2208      	movs	r2, #8
    6922:	2012      	movs	r0, #18
    6924:	f010 fc32 	bl	1718c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    6928:	4604      	mov	r4, r0
    692a:	b1d0      	cbz	r0, 6962 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    692c:	2108      	movs	r1, #8
    692e:	4408      	add	r0, r1
    6930:	f012 f8ee 	bl	18b10 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    6934:	882b      	ldrh	r3, [r5, #0]
    6936:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6938:	886b      	ldrh	r3, [r5, #2]
    693a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    693c:	88ab      	ldrh	r3, [r5, #4]
    693e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    6940:	88eb      	ldrh	r3, [r5, #6]
    6942:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    6944:	2300      	movs	r3, #0
    6946:	9300      	str	r3, [sp, #0]
    6948:	4622      	mov	r2, r4
    694a:	2105      	movs	r1, #5
    694c:	4630      	mov	r0, r6
    694e:	f010 fc5d 	bl	1720c <bt_l2cap_send_cb>
	if (err) {
    6952:	4605      	mov	r5, r0
    6954:	b110      	cbz	r0, 695c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    6956:	4620      	mov	r0, r4
    6958:	f00b ff12 	bl	12780 <net_buf_unref>
}
    695c:	4628      	mov	r0, r5
    695e:	b002      	add	sp, #8
    6960:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6962:	f06f 050b 	mvn.w	r5, #11
    6966:	e7f9      	b.n	695c <bt_l2cap_update_conn_param+0x54>
    6968:	20002231 	.word	0x20002231

0000696c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    696c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    696e:	3804      	subs	r0, #4
    6970:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    6972:	a901      	add	r1, sp, #4
    6974:	4802      	ldr	r0, [pc, #8]	; (6980 <bt_att_released+0x14>)
    6976:	f012 fdb1 	bl	194dc <k_mem_slab_free>
}
    697a:	b003      	add	sp, #12
    697c:	f85d fb04 	ldr.w	pc, [sp], #4
    6980:	200007ac 	.word	0x200007ac

00006984 <tx_meta_data_free>:
{
    6984:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
    6986:	2100      	movs	r1, #0
{
    6988:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    698a:	220c      	movs	r2, #12
    698c:	f00f ff3c 	bl	16808 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    6990:	4621      	mov	r1, r4
    6992:	4802      	ldr	r0, [pc, #8]	; (699c <tx_meta_data_free+0x18>)
}
    6994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    6998:	f012 be57 	b.w	1964a <k_queue_append>
    699c:	200007e4 	.word	0x200007e4

000069a0 <read_group_cb>:
{
    69a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    69a4:	4605      	mov	r5, r0
    69a6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69a8:	f04f 0800 	mov.w	r8, #0
    69ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    69b0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    69b2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69b4:	f88d 8008 	strb.w	r8, [sp, #8]
    69b8:	a902      	add	r1, sp, #8
{
    69ba:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69bc:	f8ad 300a 	strh.w	r3, [sp, #10]
    69c0:	f00f ff40 	bl	16844 <bt_uuid_cmp>
    69c4:	b1a0      	cbz	r0, 69f0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    69c6:	f642 0301 	movw	r3, #10241	; 0x2801
    69ca:	6828      	ldr	r0, [r5, #0]
    69cc:	f88d 800c 	strb.w	r8, [sp, #12]
    69d0:	a903      	add	r1, sp, #12
    69d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    69d6:	f00f ff35 	bl	16844 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    69da:	b148      	cbz	r0, 69f0 <read_group_cb+0x50>
		if (data->group &&
    69dc:	6923      	ldr	r3, [r4, #16]
    69de:	b11b      	cbz	r3, 69e8 <read_group_cb+0x48>
    69e0:	885a      	ldrh	r2, [r3, #2]
    69e2:	42b2      	cmp	r2, r6
    69e4:	d200      	bcs.n	69e8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    69e6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    69e8:	2001      	movs	r0, #1
}
    69ea:	b004      	add	sp, #16
    69ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    69f0:	6861      	ldr	r1, [r4, #4]
    69f2:	6828      	ldr	r0, [r5, #0]
    69f4:	f00f ff26 	bl	16844 <bt_uuid_cmp>
    69f8:	b110      	cbz	r0, 6a00 <read_group_cb+0x60>
		data->group = NULL;
    69fa:	2300      	movs	r3, #0
    69fc:	6123      	str	r3, [r4, #16]
    69fe:	e7f3      	b.n	69e8 <read_group_cb+0x48>
	if (data->rsp->len &&
    6a00:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6a02:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    6a04:	781a      	ldrb	r2, [r3, #0]
    6a06:	b132      	cbz	r2, 6a16 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    6a08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    6a0a:	8981      	ldrh	r1, [r0, #12]
    6a0c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    6a0e:	4293      	cmp	r3, r2
    6a10:	da01      	bge.n	6a16 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
    6a12:	2000      	movs	r0, #0
    6a14:	e7e9      	b.n	69ea <read_group_cb+0x4a>
    6a16:	2104      	movs	r1, #4
    6a18:	3008      	adds	r0, #8
    6a1a:	f012 f879 	bl	18b10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6a1e:	4b09      	ldr	r3, [pc, #36]	; (6a44 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6a20:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6a22:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    6a24:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6a26:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    6a28:	4629      	mov	r1, r5
    6a2a:	9300      	str	r3, [sp, #0]
    6a2c:	9401      	str	r4, [sp, #4]
    6a2e:	2300      	movs	r3, #0
    6a30:	4638      	mov	r0, r7
    6a32:	f010 fe9a 	bl	1776a <att_chan_read>
	if (read < 0) {
    6a36:	2800      	cmp	r0, #0
    6a38:	dbeb      	blt.n	6a12 <read_group_cb+0x72>
	if (!data->group) {
    6a3a:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    6a3c:	3800      	subs	r0, #0
    6a3e:	bf18      	it	ne
    6a40:	2001      	movne	r0, #1
    6a42:	e7d2      	b.n	69ea <read_group_cb+0x4a>
    6a44:	000176cb 	.word	0x000176cb

00006a48 <chan_send>:
{
    6a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
    6a4c:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    6a4e:	f8d1 8014 	ldr.w	r8, [r1, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6a52:	f3bf 8f5b 	dmb	ish
    6a56:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    6a5a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    6a5e:	0752      	lsls	r2, r2, #29
{
    6a60:	4606      	mov	r6, r0
    6a62:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    6a64:	d538      	bpl.n	6ad8 <chan_send+0x90>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	2bd2      	cmp	r3, #210	; 0xd2
    6a6a:	d10f      	bne.n	6a8c <chan_send+0x44>
		err = bt_smp_sign(chan->att->conn, buf);
    6a6c:	6803      	ldr	r3, [r0, #0]
    6a6e:	6818      	ldr	r0, [r3, #0]
    6a70:	f011 ffe0 	bl	18a34 <bt_smp_sign>
		if (err) {
    6a74:	4605      	mov	r5, r0
    6a76:	b148      	cbz	r0, 6a8c <chan_send+0x44>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    6a78:	6960      	ldr	r0, [r4, #20]
    6a7a:	f7ff ff83 	bl	6984 <tx_meta_data_free>
			net_buf_unref(buf);
    6a7e:	4620      	mov	r0, r4
    6a80:	f00b fe7e 	bl	12780 <net_buf_unref>
}
    6a84:	4628      	mov	r0, r5
    6a86:	b003      	add	sp, #12
    6a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    6a8c:	f104 0008 	add.w	r0, r4, #8
    6a90:	f012 f87f 	bl	18b92 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6a94:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
    6a96:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    6a9a:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    6a9c:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
    6a9e:	f8c8 6000 	str.w	r6, [r8]
	state->offset = net_buf_simple_headroom(buf);
    6aa2:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    6aa4:	7818      	ldrb	r0, [r3, #0]
    6aa6:	f010 fc99 	bl	173dc <att_op_get_type>
	switch (op_type) {
    6aaa:	2805      	cmp	r0, #5
    6aac:	bf96      	itet	ls
    6aae:	4b0c      	ldrls	r3, [pc, #48]	; (6ae0 <chan_send+0x98>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    6ab0:	4b0c      	ldrhi	r3, [pc, #48]	; (6ae4 <chan_send+0x9c>)
    6ab2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    6ab6:	f8cd 8000 	str.w	r8, [sp]
    6aba:	4628      	mov	r0, r5
    6abc:	4622      	mov	r2, r4
    6abe:	2104      	movs	r1, #4
    6ac0:	f010 fba4 	bl	1720c <bt_l2cap_send_cb>
	if (err) {
    6ac4:	4605      	mov	r5, r0
    6ac6:	2800      	cmp	r0, #0
    6ac8:	d0dc      	beq.n	6a84 <chan_send+0x3c>
	buf->data = buf->__buf + state->offset;
    6aca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6acc:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6ad0:	fa10 f787 	uxtah	r7, r0, r7
    6ad4:	60a7      	str	r7, [r4, #8]
}
    6ad6:	e7d5      	b.n	6a84 <chan_send+0x3c>
		return -EINVAL;
    6ad8:	f06f 0515 	mvn.w	r5, #21
    6adc:	e7d2      	b.n	6a84 <chan_send+0x3c>
    6ade:	bf00      	nop
    6ae0:	0001a310 	.word	0x0001a310
    6ae4:	00017b2f 	.word	0x00017b2f

00006ae8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    6ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6aea:	2300      	movs	r3, #0
{
    6aec:	4607      	mov	r7, r0
    6aee:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    6af0:	4829      	ldr	r0, [pc, #164]	; (6b98 <bt_att_accept+0xb0>)
    6af2:	2200      	movs	r2, #0
    6af4:	4669      	mov	r1, sp
    6af6:	f00e f839 	bl	14b6c <k_mem_slab_alloc>
    6afa:	4605      	mov	r5, r0
    6afc:	b110      	cbz	r0, 6b04 <bt_att_accept+0x1c>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    6afe:	f06f 050b 	mvn.w	r5, #11
    6b02:	e045      	b.n	6b90 <bt_att_accept+0xa8>
	return z_impl_z_current_get();
    6b04:	f00e fe22 	bl	1574c <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
    6b08:	4b24      	ldr	r3, [pc, #144]	; (6b9c <bt_att_accept+0xb4>)
	(void)memset(att, 0, sizeof(*att));
    6b0a:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    6b0c:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
    6b0e:	222c      	movs	r2, #44	; 0x2c
    6b10:	9800      	ldr	r0, [sp, #0]
    6b12:	f00f fe79 	bl	16808 <memset>
	att->conn = conn;
    6b16:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6b18:	4821      	ldr	r0, [pc, #132]	; (6ba0 <bt_att_accept+0xb8>)
	list->tail = NULL;
    6b1a:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
    6b1c:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
    6b20:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
    6b24:	2200      	movs	r2, #0
    6b26:	2300      	movs	r3, #0
    6b28:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    6b2a:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    6b2c:	f00e f81e 	bl	14b6c <k_mem_slab_alloc>
    6b30:	4605      	mov	r5, r0
    6b32:	2800      	cmp	r0, #0
    6b34:	d1e3      	bne.n	6afe <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    6b36:	4601      	mov	r1, r0
    6b38:	22e8      	movs	r2, #232	; 0xe8
    6b3a:	9801      	ldr	r0, [sp, #4]
    6b3c:	f00f fe64 	bl	16808 <memset>
	chan->chan.chan.ops = &ops;
    6b40:	9801      	ldr	r0, [sp, #4]
    6b42:	4b18      	ldr	r3, [pc, #96]	; (6ba4 <bt_att_accept+0xbc>)
    6b44:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
    6b46:	3098      	adds	r0, #152	; 0x98
    6b48:	f012 fd73 	bl	19632 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b4c:	9b01      	ldr	r3, [sp, #4]
    6b4e:	f3bf 8f5b 	dmb	ish
    6b52:	3390      	adds	r3, #144	; 0x90
    6b54:	e853 2f00 	ldrex	r2, [r3]
    6b58:	e843 5100 	strex	r1, r5, [r3]
    6b5c:	2900      	cmp	r1, #0
    6b5e:	d1f9      	bne.n	6b54 <bt_att_accept+0x6c>
    6b60:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    6b64:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
    6b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
	chan->att = att;
    6b68:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
    6b6a:	b91b      	cbnz	r3, 6b74 <bt_att_accept+0x8c>
    6b6c:	f104 000c 	add.w	r0, r4, #12
    6b70:	f012 fd5f 	bl	19632 <z_impl_k_queue_init>
	parent->next = child;
    6b74:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6b76:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
    6b7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    6b7c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
	list->head = node;
    6b80:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    6b82:	b902      	cbnz	r2, 6b86 <bt_att_accept+0x9e>
	list->tail = node;
    6b84:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
    6b86:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
    6b88:	2b00      	cmp	r3, #0
    6b8a:	d0b8      	beq.n	6afe <bt_att_accept+0x16>
	}

	*ch = &chan->chan.chan;
    6b8c:	3304      	adds	r3, #4
    6b8e:	6033      	str	r3, [r6, #0]

	return 0;
}
    6b90:	4628      	mov	r0, r5
    6b92:	b003      	add	sp, #12
    6b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b96:	bf00      	nop
    6b98:	20000790 	.word	0x20000790
    6b9c:	20001208 	.word	0x20001208
    6ba0:	200007ac 	.word	0x200007ac
    6ba4:	200001b8 	.word	0x200001b8

00006ba8 <read_type_cb>:
{
    6ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    6bac:	f8d2 8000 	ldr.w	r8, [r2]
{
    6bb0:	4606      	mov	r6, r0
    6bb2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6bb4:	6800      	ldr	r0, [r0, #0]
    6bb6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    6bb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
    6bbc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6bbe:	f00f fe41 	bl	16844 <bt_uuid_cmp>
    6bc2:	4607      	mov	r7, r0
    6bc4:	2800      	cmp	r0, #0
    6bc6:	d13e      	bne.n	6c46 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6bc8:	4628      	mov	r0, r5
    6bca:	2215      	movs	r2, #21
    6bcc:	4631      	mov	r1, r6
    6bce:	f011 fd44 	bl	1865a <bt_gatt_check_perm>
    6bd2:	4605      	mov	r5, r0
    6bd4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6bd6:	b148      	cbz	r0, 6bec <read_type_cb+0x44>
		if (data->rsp->len) {
    6bd8:	68e3      	ldr	r3, [r4, #12]
    6bda:	781b      	ldrb	r3, [r3, #0]
    6bdc:	b923      	cbnz	r3, 6be8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    6bde:	2500      	movs	r5, #0
}
    6be0:	4628      	mov	r0, r5
    6be2:	b003      	add	sp, #12
    6be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    6be8:	7527      	strb	r7, [r4, #20]
    6bea:	e7f8      	b.n	6bde <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6bec:	68a0      	ldr	r0, [r4, #8]
    6bee:	f011 ff61 	bl	18ab4 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    6bf2:	2102      	movs	r1, #2
    6bf4:	3008      	adds	r0, #8
    6bf6:	f011 ff8b 	bl	18b10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6bfa:	4b14      	ldr	r3, [pc, #80]	; (6c4c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    6bfc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6bfe:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    6c00:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6c04:	4631      	mov	r1, r6
    6c06:	9300      	str	r3, [sp, #0]
    6c08:	9401      	str	r4, [sp, #4]
    6c0a:	462b      	mov	r3, r5
    6c0c:	4640      	mov	r0, r8
    6c0e:	f010 fdac 	bl	1776a <att_chan_read>
	if (read < 0) {
    6c12:	2800      	cmp	r0, #0
    6c14:	da07      	bge.n	6c26 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    6c16:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    6c1a:	bf26      	itte	cs
    6c1c:	4240      	negcs	r0, r0
    6c1e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    6c20:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    6c22:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    6c24:	e7dc      	b.n	6be0 <read_type_cb+0x38>
	if (!data->item) {
    6c26:	6923      	ldr	r3, [r4, #16]
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d0d8      	beq.n	6bde <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6c2c:	68a0      	ldr	r0, [r4, #8]
    6c2e:	f010 fbbb 	bl	173a8 <net_buf_frags_len>
    6c32:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6c36:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    6c38:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6c3a:	7818      	ldrb	r0, [r3, #0]
    6c3c:	4285      	cmp	r5, r0
    6c3e:	bf94      	ite	ls
    6c40:	2500      	movls	r5, #0
    6c42:	2501      	movhi	r5, #1
    6c44:	e7cc      	b.n	6be0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    6c46:	2501      	movs	r5, #1
    6c48:	e7ca      	b.n	6be0 <read_type_cb+0x38>
    6c4a:	bf00      	nop
    6c4c:	000173b9 	.word	0x000173b9

00006c50 <bt_att_connected>:
{
    6c50:	b510      	push	{r4, lr}
    6c52:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
    6c54:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    6c58:	3804      	subs	r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6c5a:	f3bf 8f5b 	dmb	ish
    6c5e:	e853 2f00 	ldrex	r2, [r3]
    6c62:	f042 0204 	orr.w	r2, r2, #4
    6c66:	e843 2100 	strex	r1, r2, [r3]
    6c6a:	2900      	cmp	r1, #0
    6c6c:	d1f7      	bne.n	6c5e <bt_att_connected+0xe>
    6c6e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c72:	f3bf 8f5b 	dmb	ish
    6c76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    6c7a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    6c7e:	071b      	lsls	r3, r3, #28
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6c80:	bf5e      	ittt	pl
    6c82:	2317      	movpl	r3, #23
    6c84:	84e3      	strhpl	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6c86:	82e3      	strhpl	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    6c88:	f010 fc06 	bl	17498 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    6c8c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    6c90:	4903      	ldr	r1, [pc, #12]	; (6ca0 <bt_att_connected+0x50>)
    6c92:	f012 fde9 	bl	19868 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    6c96:	6820      	ldr	r0, [r4, #0]
}
    6c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    6c9c:	f001 b892 	b.w	7dc4 <bt_gatt_connected>
    6ca0:	00017e13 	.word	0x00017e13

00006ca4 <bt_att_chan_create_pdu>:
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    6ca4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    6ca6:	3201      	adds	r2, #1
    6ca8:	429a      	cmp	r2, r3
{
    6caa:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    6cae:	460e      	mov	r6, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    6cb0:	d903      	bls.n	6cba <bt_att_chan_create_pdu+0x16>
		return NULL;
    6cb2:	2400      	movs	r4, #0
}
    6cb4:	4620      	mov	r0, r4
    6cb6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	switch (att_op_get_type(op)) {
    6cba:	4608      	mov	r0, r1
    6cbc:	f010 fb8e 	bl	173dc <att_op_get_type>
    6cc0:	2802      	cmp	r0, #2
    6cc2:	d001      	beq.n	6cc8 <bt_att_chan_create_pdu+0x24>
    6cc4:	2804      	cmp	r0, #4
    6cc6:	d116      	bne.n	6cf6 <bt_att_chan_create_pdu+0x52>
    6cc8:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
    6ccc:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    6cd0:	2100      	movs	r1, #0
    6cd2:	4642      	mov	r2, r8
    6cd4:	464b      	mov	r3, r9
    6cd6:	4608      	mov	r0, r1
    6cd8:	f010 fa95 	bl	17206 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    6cdc:	4604      	mov	r4, r0
    6cde:	2800      	cmp	r0, #0
    6ce0:	d0e7      	beq.n	6cb2 <bt_att_chan_create_pdu+0xe>
	return z_impl_k_queue_get(queue, timeout);
    6ce2:	480b      	ldr	r0, [pc, #44]	; (6d10 <bt_att_chan_create_pdu+0x6c>)
    6ce4:	4642      	mov	r2, r8
    6ce6:	464b      	mov	r3, r9
    6ce8:	f00e f844 	bl	14d74 <z_impl_k_queue_get>
	if (!data) {
    6cec:	b940      	cbnz	r0, 6d00 <bt_att_chan_create_pdu+0x5c>
		net_buf_unref(buf);
    6cee:	4620      	mov	r0, r4
    6cf0:	f00b fd46 	bl	12780 <net_buf_unref>
		return NULL;
    6cf4:	e7dd      	b.n	6cb2 <bt_att_chan_create_pdu+0xe>
		timeout = K_FOREVER;
    6cf6:	f04f 38ff 	mov.w	r8, #4294967295
    6cfa:	f04f 39ff 	mov.w	r9, #4294967295
    6cfe:	e7e7      	b.n	6cd0 <bt_att_chan_create_pdu+0x2c>
	bt_att_tx_meta_data(buf) = data;
    6d00:	6160      	str	r0, [r4, #20]
    6d02:	2101      	movs	r1, #1
    6d04:	f104 0008 	add.w	r0, r4, #8
    6d08:	f011 ff02 	bl	18b10 <net_buf_simple_add>
	hdr->code = op;
    6d0c:	7006      	strb	r6, [r0, #0]
	return buf;
    6d0e:	e7d1      	b.n	6cb4 <bt_att_chan_create_pdu+0x10>
    6d10:	200007e4 	.word	0x200007e4

00006d14 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    6d14:	898b      	ldrh	r3, [r1, #12]
{
    6d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d1a:	4606      	mov	r6, r0
    6d1c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d047      	beq.n	6db2 <bt_att_recv+0x9e>
	return net_buf_simple_pull_mem(&buf->b, len);
    6d22:	2101      	movs	r1, #1
    6d24:	f104 0008 	add.w	r0, r4, #8
    6d28:	f011 ff1b 	bl	18b62 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    6d2c:	f856 3c04 	ldr.w	r3, [r6, #-4]
    6d30:	4607      	mov	r7, r0
    6d32:	2b00      	cmp	r3, #0
    6d34:	d03d      	beq.n	6db2 <bt_att_recv+0x9e>
		if (hdr->code == handlers[i].op) {
    6d36:	7801      	ldrb	r1, [r0, #0]
    6d38:	4d22      	ldr	r5, [pc, #136]	; (6dc4 <bt_att_recv+0xb0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    6d3a:	f1a6 0804 	sub.w	r8, r6, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6d3e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    6d40:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    6d44:	428a      	cmp	r2, r1
    6d46:	d10d      	bne.n	6d64 <bt_att_recv+0x50>
		if (handler->type == ATT_REQUEST &&
    6d48:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    6d4c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6d50:	f893 a002 	ldrb.w	sl, [r3, #2]
    6d54:	f1ba 0f01 	cmp.w	sl, #1
    6d58:	d014      	beq.n	6d84 <bt_att_recv+0x70>
		} else if (handler->type == ATT_INDICATION &&
    6d5a:	f1ba 0f05 	cmp.w	sl, #5
    6d5e:	d117      	bne.n	6d90 <bt_att_recv+0x7c>
			   atomic_test_and_set_bit(att_chan->flags,
    6d60:	2101      	movs	r1, #1
    6d62:	e010      	b.n	6d86 <bt_att_recv+0x72>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6d64:	3301      	adds	r3, #1
    6d66:	2b1e      	cmp	r3, #30
    6d68:	d1ea      	bne.n	6d40 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    6d6a:	4608      	mov	r0, r1
    6d6c:	f010 fb36 	bl	173dc <att_op_get_type>
    6d70:	b1f8      	cbz	r0, 6db2 <bt_att_recv+0x9e>
    6d72:	2805      	cmp	r0, #5
    6d74:	d01d      	beq.n	6db2 <bt_att_recv+0x9e>
	if (!req) {
    6d76:	b1e1      	cbz	r1, 6db2 <bt_att_recv+0x9e>
    6d78:	2306      	movs	r3, #6
    6d7a:	2200      	movs	r2, #0
    6d7c:	4640      	mov	r0, r8
    6d7e:	f010 ff55 	bl	17c2c <send_err_rsp.part.0>
    6d82:	e016      	b.n	6db2 <bt_att_recv+0x9e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    6d84:	2100      	movs	r1, #0
    6d86:	f106 008c 	add.w	r0, r6, #140	; 0x8c
    6d8a:	f010 fdd4 	bl	17936 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
    6d8e:	b980      	cbnz	r0, 6db2 <bt_att_recv+0x9e>
	if (buf->len < handler->expect_len) {
    6d90:	444d      	add	r5, r9
    6d92:	89a2      	ldrh	r2, [r4, #12]
    6d94:	786b      	ldrb	r3, [r5, #1]
    6d96:	429a      	cmp	r2, r3
    6d98:	d30e      	bcc.n	6db8 <bt_att_recv+0xa4>
		err = handler->func(att_chan, buf);
    6d9a:	686b      	ldr	r3, [r5, #4]
    6d9c:	4621      	mov	r1, r4
    6d9e:	4640      	mov	r0, r8
    6da0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6da2:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
    6da6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6da8:	d103      	bne.n	6db2 <bt_att_recv+0x9e>
    6daa:	b110      	cbz	r0, 6db2 <bt_att_recv+0x9e>
		send_err_rsp(att_chan, hdr->code, 0, err);
    6dac:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    6dae:	2900      	cmp	r1, #0
    6db0:	d1e3      	bne.n	6d7a <bt_att_recv+0x66>
}
    6db2:	2000      	movs	r0, #0
    6db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (handler->type == ATT_REQUEST && err) {
    6db8:	f1ba 0f01 	cmp.w	sl, #1
    6dbc:	d1f9      	bne.n	6db2 <bt_att_recv+0x9e>
		err = BT_ATT_ERR_INVALID_PDU;
    6dbe:	2304      	movs	r3, #4
    6dc0:	e7f4      	b.n	6dac <bt_att_recv+0x98>
    6dc2:	bf00      	nop
    6dc4:	0001a328 	.word	0x0001a328

00006dc8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6dcc:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6dce:	6803      	ldr	r3, [r0, #0]
    6dd0:	460e      	mov	r6, r1
    6dd2:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6dd4:	b087      	sub	sp, #28
    6dd6:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6dd8:	bf18      	it	ne
    6dda:	2101      	movne	r1, #1
    6ddc:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    6dde:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    6de0:	f011 fdcb 	bl	1897a <bt_gatt_change_aware>
    6de4:	b958      	cbnz	r0, 6dfe <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6de6:	2105      	movs	r1, #5
    6de8:	f104 0090 	add.w	r0, r4, #144	; 0x90
    6dec:	f010 fda3 	bl	17936 <atomic_test_and_set_bit>
    6df0:	2800      	cmp	r0, #0
    6df2:	d04e      	beq.n	6e92 <att_write_rsp.constprop.0+0xca>
			return 0;
    6df4:	2500      	movs	r5, #0
}
    6df6:	4628      	mov	r0, r5
    6df8:	b007      	add	sp, #28
    6dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
    6dfe:	2f00      	cmp	r7, #0
    6e00:	d049      	beq.n	6e96 <att_write_rsp.constprop.0+0xce>
	(void)memset(&data, 0, sizeof(data));
    6e02:	2218      	movs	r2, #24
    6e04:	2100      	movs	r1, #0
    6e06:	4668      	mov	r0, sp
    6e08:	f00f fcfe 	bl	16808 <memset>
	if (rsp) {
    6e0c:	f1b8 0f00 	cmp.w	r8, #0
    6e10:	d12e      	bne.n	6e70 <att_write_rsp.constprop.0+0xa8>
	data.conn = chan->att->conn;
    6e12:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6e14:	4a21      	ldr	r2, [pc, #132]	; (6e9c <att_write_rsp.constprop.0+0xd4>)
	data.conn = chan->att->conn;
    6e16:	681b      	ldr	r3, [r3, #0]
    6e18:	9300      	str	r3, [sp, #0]
	data.value = value;
    6e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6e1c:	9303      	str	r3, [sp, #12]
	data.len = len;
    6e1e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    6e22:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6e26:	2301      	movs	r3, #1
    6e28:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    6e2c:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6e30:	466b      	mov	r3, sp
    6e32:	4639      	mov	r1, r7
    6e34:	4638      	mov	r0, r7
	data.req = req;
    6e36:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    6e3a:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6e3e:	f010 fb5b 	bl	174f8 <bt_gatt_foreach_attr>
	if (data.err) {
    6e42:	f89d 5014 	ldrb.w	r5, [sp, #20]
    6e46:	b1ed      	cbz	r5, 6e84 <att_write_rsp.constprop.0+0xbc>
		if (rsp) {
    6e48:	f1b8 0f00 	cmp.w	r8, #0
    6e4c:	d0d2      	beq.n	6df4 <att_write_rsp.constprop.0+0x2c>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6e4e:	9b01      	ldr	r3, [sp, #4]
    6e50:	6958      	ldr	r0, [r3, #20]
    6e52:	f7ff fd97 	bl	6984 <tx_meta_data_free>
			net_buf_unref(data.buf);
    6e56:	9801      	ldr	r0, [sp, #4]
    6e58:	f00b fc92 	bl	12780 <net_buf_unref>
	if (!req) {
    6e5c:	2e00      	cmp	r6, #0
    6e5e:	d0c9      	beq.n	6df4 <att_write_rsp.constprop.0+0x2c>
    6e60:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6e64:	463a      	mov	r2, r7
    6e66:	4631      	mov	r1, r6
    6e68:	4620      	mov	r0, r4
    6e6a:	f010 fedf 	bl	17c2c <send_err_rsp.part.0>
    6e6e:	e7c1      	b.n	6df4 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    6e70:	2200      	movs	r2, #0
    6e72:	4641      	mov	r1, r8
    6e74:	4620      	mov	r0, r4
    6e76:	f7ff ff15 	bl	6ca4 <bt_att_chan_create_pdu>
    6e7a:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6e7c:	2800      	cmp	r0, #0
    6e7e:	d1c8      	bne.n	6e12 <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
    6e80:	250e      	movs	r5, #14
    6e82:	e7b8      	b.n	6df6 <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
    6e84:	9901      	ldr	r1, [sp, #4]
    6e86:	2900      	cmp	r1, #0
    6e88:	d0b4      	beq.n	6df4 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
    6e8a:	4620      	mov	r0, r4
    6e8c:	f010 fd2b 	bl	178e6 <bt_att_chan_send_rsp>
    6e90:	e7b1      	b.n	6df6 <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6e92:	2512      	movs	r5, #18
    6e94:	e7af      	b.n	6df6 <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
    6e96:	2501      	movs	r5, #1
    6e98:	e7ad      	b.n	6df6 <att_write_rsp.constprop.0+0x2e>
    6e9a:	bf00      	nop
    6e9c:	00017707 	.word	0x00017707

00006ea0 <att_read_group_req>:
{
    6ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    6ea4:	898c      	ldrh	r4, [r1, #12]
    6ea6:	3c04      	subs	r4, #4
    6ea8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    6eaa:	2c02      	cmp	r4, #2
{
    6eac:	4605      	mov	r5, r0
    6eae:	b08c      	sub	sp, #48	; 0x30
    6eb0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    6eb2:	d001      	beq.n	6eb8 <att_read_group_req+0x18>
    6eb4:	2c10      	cmp	r4, #16
    6eb6:	d172      	bne.n	6f9e <att_read_group_req+0xfe>
    6eb8:	2104      	movs	r1, #4
    6eba:	3008      	adds	r0, #8
    6ebc:	f011 fe51 	bl	18b62 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6ec0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    6ec4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6ec6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6ec8:	1d01      	adds	r1, r0, #4
    6eca:	4622      	mov	r2, r4
    6ecc:	4640      	mov	r0, r8
    6ece:	f00f fce7 	bl	168a0 <bt_uuid_create>
    6ed2:	2800      	cmp	r0, #0
    6ed4:	d065      	beq.n	6fa2 <att_read_group_req+0x102>
	if (!start || !end) {
    6ed6:	2e00      	cmp	r6, #0
    6ed8:	d03e      	beq.n	6f58 <att_read_group_req+0xb8>
    6eda:	2400      	movs	r4, #0
    6edc:	2f00      	cmp	r7, #0
    6ede:	d03a      	beq.n	6f56 <att_read_group_req+0xb6>
	if (start > end) {
    6ee0:	42b7      	cmp	r7, r6
    6ee2:	d339      	bcc.n	6f58 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6ee4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6ee8:	a901      	add	r1, sp, #4
    6eea:	4640      	mov	r0, r8
    6eec:	f88d 4004 	strb.w	r4, [sp, #4]
    6ef0:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ef4:	f00f fca6 	bl	16844 <bt_uuid_cmp>
    6ef8:	2800      	cmp	r0, #0
    6efa:	d138      	bne.n	6f6e <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
    6efc:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
    6efe:	2214      	movs	r2, #20
    6f00:	2100      	movs	r1, #0
    6f02:	a807      	add	r0, sp, #28
    6f04:	f00f fc80 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6f08:	2201      	movs	r2, #1
    6f0a:	2111      	movs	r1, #17
    6f0c:	4620      	mov	r0, r4
    6f0e:	f010 fed0 	bl	17cb2 <bt_att_create_pdu>
    6f12:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6f14:	2800      	cmp	r0, #0
    6f16:	d044      	beq.n	6fa2 <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
    6f18:	2101      	movs	r1, #1
    6f1a:	3008      	adds	r0, #8
	data.uuid = uuid;
    6f1c:	e9cd 5807 	strd	r5, r8, [sp, #28]
    6f20:	f011 fdf6 	bl	18b10 <net_buf_simple_add>
	data.rsp->len = 0U;
    6f24:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6f28:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6f2a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    6f2c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6f30:	4a1d      	ldr	r2, [pc, #116]	; (6fa8 <att_read_group_req+0x108>)
	data.group = NULL;
    6f32:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6f36:	4639      	mov	r1, r7
    6f38:	4630      	mov	r0, r6
    6f3a:	f010 fadd 	bl	174f8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6f40:	781c      	ldrb	r4, [r3, #0]
    6f42:	bb3c      	cbnz	r4, 6f94 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f46:	6958      	ldr	r0, [r3, #20]
    6f48:	f7ff fd1c 	bl	6984 <tx_meta_data_free>
		net_buf_unref(data.buf);
    6f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f4e:	f00b fc17 	bl	12780 <net_buf_unref>
	if (!req) {
    6f52:	230a      	movs	r3, #10
    6f54:	e018      	b.n	6f88 <att_read_group_req+0xe8>
			*err = 0U;
    6f56:	463e      	mov	r6, r7
	if (!req) {
    6f58:	2301      	movs	r3, #1
    6f5a:	4632      	mov	r2, r6
    6f5c:	2110      	movs	r1, #16
    6f5e:	4628      	mov	r0, r5
    6f60:	f010 fe64 	bl	17c2c <send_err_rsp.part.0>
		return 0;
    6f64:	2400      	movs	r4, #0
}
    6f66:	4620      	mov	r0, r4
    6f68:	b00c      	add	sp, #48	; 0x30
    6f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6f6e:	f642 0301 	movw	r3, #10241	; 0x2801
    6f72:	a907      	add	r1, sp, #28
    6f74:	4640      	mov	r0, r8
    6f76:	f88d 401c 	strb.w	r4, [sp, #28]
    6f7a:	f8ad 301e 	strh.w	r3, [sp, #30]
    6f7e:	f00f fc61 	bl	16844 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6f82:	2800      	cmp	r0, #0
    6f84:	d0ba      	beq.n	6efc <att_read_group_req+0x5c>
	if (!req) {
    6f86:	2310      	movs	r3, #16
    6f88:	4632      	mov	r2, r6
    6f8a:	2110      	movs	r1, #16
    6f8c:	4628      	mov	r0, r5
    6f8e:	f010 fe4d 	bl	17c2c <send_err_rsp.part.0>
		return 0;
    6f92:	e7e8      	b.n	6f66 <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
    6f94:	9909      	ldr	r1, [sp, #36]	; 0x24
    6f96:	4628      	mov	r0, r5
    6f98:	f010 fca5 	bl	178e6 <bt_att_chan_send_rsp>
	return 0;
    6f9c:	e7e2      	b.n	6f64 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
    6f9e:	2404      	movs	r4, #4
    6fa0:	e7e1      	b.n	6f66 <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
    6fa2:	240e      	movs	r4, #14
    6fa4:	e7df      	b.n	6f66 <att_read_group_req+0xc6>
    6fa6:	bf00      	nop
    6fa8:	000069a1 	.word	0x000069a1

00006fac <att_read_mult_vl_req>:
{
    6fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6fb0:	6846      	ldr	r6, [r0, #4]
{
    6fb2:	b085      	sub	sp, #20
    6fb4:	4604      	mov	r4, r0
    6fb6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6fb8:	4630      	mov	r0, r6
    6fba:	2101      	movs	r1, #1
    6fbc:	f011 fcdd 	bl	1897a <bt_gatt_change_aware>
    6fc0:	b958      	cbnz	r0, 6fda <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6fc2:	2105      	movs	r1, #5
    6fc4:	f104 0090 	add.w	r0, r4, #144	; 0x90
    6fc8:	f010 fcb5 	bl	17936 <atomic_test_and_set_bit>
			return 0;
    6fcc:	2800      	cmp	r0, #0
    6fce:	bf0c      	ite	eq
    6fd0:	2012      	moveq	r0, #18
    6fd2:	2000      	movne	r0, #0
}
    6fd4:	b005      	add	sp, #20
    6fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    6fda:	2210      	movs	r2, #16
    6fdc:	2100      	movs	r1, #0
    6fde:	4668      	mov	r0, sp
    6fe0:	f00f fc12 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    6fe4:	2200      	movs	r2, #0
    6fe6:	2121      	movs	r1, #33	; 0x21
    6fe8:	4630      	mov	r0, r6
    6fea:	f010 fe62 	bl	17cb2 <bt_att_create_pdu>
    6fee:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6ff0:	b368      	cbz	r0, 704e <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6ff2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 7054 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
    6ff6:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    6ff8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6ffc:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    7000:	89ab      	ldrh	r3, [r5, #12]
    7002:	2b01      	cmp	r3, #1
    7004:	d804      	bhi.n	7010 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
    7006:	9902      	ldr	r1, [sp, #8]
    7008:	4620      	mov	r0, r4
    700a:	f010 fc6c 	bl	178e6 <bt_att_chan_send_rsp>
    700e:	e01c      	b.n	704a <att_read_mult_vl_req+0x9e>
    7010:	4638      	mov	r0, r7
    7012:	f011 fdb6 	bl	18b82 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    7016:	466b      	mov	r3, sp
    7018:	464a      	mov	r2, r9
    701a:	4601      	mov	r1, r0
    701c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    701e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    7022:	f010 fa69 	bl	174f8 <bt_gatt_foreach_attr>
		if (data.err) {
    7026:	f89d 300c 	ldrb.w	r3, [sp, #12]
    702a:	2b00      	cmp	r3, #0
    702c:	d0e8      	beq.n	7000 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    702e:	9b02      	ldr	r3, [sp, #8]
    7030:	6958      	ldr	r0, [r3, #20]
    7032:	f7ff fca7 	bl	6984 <tx_meta_data_free>
			net_buf_unref(data.buf);
    7036:	9802      	ldr	r0, [sp, #8]
    7038:	f00b fba2 	bl	12780 <net_buf_unref>
	if (!req) {
    703c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7040:	4632      	mov	r2, r6
    7042:	2120      	movs	r1, #32
    7044:	4620      	mov	r0, r4
    7046:	f010 fdf1 	bl	17c2c <send_err_rsp.part.0>
	return 0;
    704a:	2000      	movs	r0, #0
    704c:	e7c2      	b.n	6fd4 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
    704e:	200e      	movs	r0, #14
    7050:	e7c0      	b.n	6fd4 <att_read_mult_vl_req+0x28>
    7052:	bf00      	nop
    7054:	000179b5 	.word	0x000179b5

00007058 <att_read_mult_req>:
{
    7058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    705c:	6846      	ldr	r6, [r0, #4]
{
    705e:	b085      	sub	sp, #20
    7060:	4604      	mov	r4, r0
    7062:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7064:	4630      	mov	r0, r6
    7066:	2101      	movs	r1, #1
    7068:	f011 fc87 	bl	1897a <bt_gatt_change_aware>
    706c:	b958      	cbnz	r0, 7086 <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    706e:	2105      	movs	r1, #5
    7070:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7074:	f010 fc5f 	bl	17936 <atomic_test_and_set_bit>
			return 0;
    7078:	2800      	cmp	r0, #0
    707a:	bf0c      	ite	eq
    707c:	2012      	moveq	r0, #18
    707e:	2000      	movne	r0, #0
}
    7080:	b005      	add	sp, #20
    7082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    7086:	2210      	movs	r2, #16
    7088:	2100      	movs	r1, #0
    708a:	4668      	mov	r0, sp
    708c:	f00f fbbc 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    7090:	2200      	movs	r2, #0
    7092:	210f      	movs	r1, #15
    7094:	4630      	mov	r0, r6
    7096:	f010 fe0c 	bl	17cb2 <bt_att_create_pdu>
    709a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    709c:	b368      	cbz	r0, 70fa <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    709e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 7100 <att_read_mult_req+0xa8>
	data.chan = chan;
    70a2:	9400      	str	r4, [sp, #0]
    70a4:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    70a8:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    70ac:	89ab      	ldrh	r3, [r5, #12]
    70ae:	2b01      	cmp	r3, #1
    70b0:	d804      	bhi.n	70bc <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
    70b2:	9902      	ldr	r1, [sp, #8]
    70b4:	4620      	mov	r0, r4
    70b6:	f010 fc16 	bl	178e6 <bt_att_chan_send_rsp>
    70ba:	e01c      	b.n	70f6 <att_read_mult_req+0x9e>
    70bc:	4638      	mov	r0, r7
    70be:	f011 fd60 	bl	18b82 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    70c2:	466b      	mov	r3, sp
    70c4:	464a      	mov	r2, r9
    70c6:	4601      	mov	r1, r0
    70c8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    70ca:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    70ce:	f010 fa13 	bl	174f8 <bt_gatt_foreach_attr>
		if (data.err) {
    70d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    70d6:	2b00      	cmp	r3, #0
    70d8:	d0e8      	beq.n	70ac <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    70da:	9b02      	ldr	r3, [sp, #8]
    70dc:	6958      	ldr	r0, [r3, #20]
    70de:	f7ff fc51 	bl	6984 <tx_meta_data_free>
			net_buf_unref(data.buf);
    70e2:	9802      	ldr	r0, [sp, #8]
    70e4:	f00b fb4c 	bl	12780 <net_buf_unref>
	if (!req) {
    70e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    70ec:	4632      	mov	r2, r6
    70ee:	210e      	movs	r1, #14
    70f0:	4620      	mov	r0, r4
    70f2:	f010 fd9b 	bl	17c2c <send_err_rsp.part.0>
	return 0;
    70f6:	2000      	movs	r0, #0
    70f8:	e7c2      	b.n	7080 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
    70fa:	200e      	movs	r0, #14
    70fc:	e7c0      	b.n	7080 <att_read_mult_req+0x28>
    70fe:	bf00      	nop
    7100:	00017961 	.word	0x00017961

00007104 <att_read_rsp>:
{
    7104:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    7108:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    710c:	4604      	mov	r4, r0
    710e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7110:	4640      	mov	r0, r8
    7112:	2101      	movs	r1, #1
{
    7114:	4615      	mov	r5, r2
    7116:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    7118:	f011 fc2f 	bl	1897a <bt_gatt_change_aware>
    711c:	b960      	cbnz	r0, 7138 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    711e:	2105      	movs	r1, #5
    7120:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7124:	f010 fc07 	bl	17936 <atomic_test_and_set_bit>
			return 0;
    7128:	2800      	cmp	r0, #0
    712a:	bf0c      	ite	eq
    712c:	2512      	moveq	r5, #18
    712e:	2500      	movne	r5, #0
}
    7130:	4628      	mov	r0, r5
    7132:	b004      	add	sp, #16
    7134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
    7138:	b38e      	cbz	r6, 719e <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
    713a:	2210      	movs	r2, #16
    713c:	2100      	movs	r1, #0
    713e:	4668      	mov	r0, sp
    7140:	f00f fb62 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    7144:	2200      	movs	r2, #0
    7146:	4629      	mov	r1, r5
    7148:	4640      	mov	r0, r8
    714a:	f010 fdb2 	bl	17cb2 <bt_att_create_pdu>
    714e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7150:	b338      	cbz	r0, 71a2 <att_read_rsp+0x9e>
	data.offset = offset;
    7152:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7156:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    715a:	2301      	movs	r3, #1
    715c:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7160:	4a11      	ldr	r2, [pc, #68]	; (71a8 <att_read_rsp+0xa4>)
	data.chan = chan;
    7162:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7164:	466b      	mov	r3, sp
    7166:	4631      	mov	r1, r6
    7168:	4630      	mov	r0, r6
    716a:	f010 f9c5 	bl	174f8 <bt_gatt_foreach_attr>
	if (data.err) {
    716e:	f89d 500c 	ldrb.w	r5, [sp, #12]
    7172:	b17d      	cbz	r5, 7194 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    7174:	9b02      	ldr	r3, [sp, #8]
    7176:	6958      	ldr	r0, [r3, #20]
    7178:	f7ff fc04 	bl	6984 <tx_meta_data_free>
		net_buf_unref(data.buf);
    717c:	9802      	ldr	r0, [sp, #8]
    717e:	f00b faff 	bl	12780 <net_buf_unref>
	if (!req) {
    7182:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7186:	4632      	mov	r2, r6
    7188:	4639      	mov	r1, r7
    718a:	4620      	mov	r0, r4
    718c:	f010 fd4e 	bl	17c2c <send_err_rsp.part.0>
		return 0;
    7190:	2500      	movs	r5, #0
    7192:	e7cd      	b.n	7130 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
    7194:	9902      	ldr	r1, [sp, #8]
    7196:	4620      	mov	r0, r4
    7198:	f010 fba5 	bl	178e6 <bt_att_chan_send_rsp>
	return 0;
    719c:	e7c8      	b.n	7130 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
    719e:	2501      	movs	r5, #1
    71a0:	e7c6      	b.n	7130 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
    71a2:	250e      	movs	r5, #14
    71a4:	e7c4      	b.n	7130 <att_read_rsp+0x2c>
    71a6:	bf00      	nop
    71a8:	00017961 	.word	0x00017961

000071ac <att_read_type_req>:
{
    71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    71b0:	898c      	ldrh	r4, [r1, #12]
    71b2:	3c04      	subs	r4, #4
    71b4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    71b6:	2c02      	cmp	r4, #2
{
    71b8:	4605      	mov	r5, r0
    71ba:	b08c      	sub	sp, #48	; 0x30
    71bc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    71be:	d001      	beq.n	71c4 <att_read_type_req+0x18>
    71c0:	2c10      	cmp	r4, #16
    71c2:	d153      	bne.n	726c <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
    71c4:	2104      	movs	r1, #4
    71c6:	3008      	adds	r0, #8
    71c8:	f011 fccb 	bl	18b62 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    71cc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    71d0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    71d2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    71d4:	1d01      	adds	r1, r0, #4
    71d6:	4622      	mov	r2, r4
    71d8:	4640      	mov	r0, r8
    71da:	f00f fb61 	bl	168a0 <bt_uuid_create>
    71de:	b188      	cbz	r0, 7204 <att_read_type_req+0x58>
	if (!start || !end) {
    71e0:	b19e      	cbz	r6, 720a <att_read_type_req+0x5e>
    71e2:	b18f      	cbz	r7, 7208 <att_read_type_req+0x5c>
	if (start > end) {
    71e4:	42b7      	cmp	r7, r6
    71e6:	d310      	bcc.n	720a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    71e8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    71ea:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
    71ec:	2100      	movs	r1, #0
    71ee:	eb0d 0002 	add.w	r0, sp, r2
    71f2:	f00f fb09 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    71f6:	2201      	movs	r2, #1
    71f8:	2109      	movs	r1, #9
    71fa:	4620      	mov	r0, r4
    71fc:	f010 fd59 	bl	17cb2 <bt_att_create_pdu>
    7200:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    7202:	b968      	cbnz	r0, 7220 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    7204:	240e      	movs	r4, #14
    7206:	e007      	b.n	7218 <att_read_type_req+0x6c>
			*err = 0U;
    7208:	463e      	mov	r6, r7
	if (!req) {
    720a:	2301      	movs	r3, #1
    720c:	4632      	mov	r2, r6
    720e:	2108      	movs	r1, #8
    7210:	4628      	mov	r0, r5
    7212:	f010 fd0b 	bl	17c2c <send_err_rsp.part.0>
		return 0;
    7216:	2400      	movs	r4, #0
}
    7218:	4620      	mov	r0, r4
    721a:	b00c      	add	sp, #48	; 0x30
    721c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    7220:	2101      	movs	r1, #1
    7222:	3008      	adds	r0, #8
	data.uuid = uuid;
    7224:	e9cd 5806 	strd	r5, r8, [sp, #24]
    7228:	f011 fc72 	bl	18b10 <net_buf_simple_add>
	data.rsp->len = 0U;
    722c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7230:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7232:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7234:	4a0e      	ldr	r2, [pc, #56]	; (7270 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
    7236:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    723a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    723c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7240:	4630      	mov	r0, r6
    7242:	ab06      	add	r3, sp, #24
    7244:	f010 f958 	bl	174f8 <bt_gatt_foreach_attr>
	if (data.err) {
    7248:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    724c:	b14c      	cbz	r4, 7262 <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    724e:	9b08      	ldr	r3, [sp, #32]
    7250:	6958      	ldr	r0, [r3, #20]
    7252:	f7ff fb97 	bl	6984 <tx_meta_data_free>
		net_buf_unref(data.buf);
    7256:	9808      	ldr	r0, [sp, #32]
    7258:	f00b fa92 	bl	12780 <net_buf_unref>
	if (!req) {
    725c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    7260:	e7d4      	b.n	720c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    7262:	9908      	ldr	r1, [sp, #32]
    7264:	4628      	mov	r0, r5
    7266:	f010 fb3e 	bl	178e6 <bt_att_chan_send_rsp>
	return 0;
    726a:	e7d5      	b.n	7218 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    726c:	2404      	movs	r4, #4
    726e:	e7d3      	b.n	7218 <att_read_type_req+0x6c>
    7270:	00006ba9 	.word	0x00006ba9

00007274 <att_find_type_req>:
{
    7274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7278:	4688      	mov	r8, r1
    727a:	b086      	sub	sp, #24
    727c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    727e:	2106      	movs	r1, #6
    7280:	f108 0008 	add.w	r0, r8, #8
    7284:	f011 fc6d 	bl	18b62 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7288:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    728a:	b317      	cbz	r7, 72d2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    728c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    7290:	f1b9 0f00 	cmp.w	r9, #0
    7294:	d01c      	beq.n	72d0 <att_find_type_req+0x5c>
	if (start > end) {
    7296:	454f      	cmp	r7, r9
    7298:	d81b      	bhi.n	72d2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    729a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    729c:	f8ad 3002 	strh.w	r3, [sp, #2]
    72a0:	2400      	movs	r4, #0
    72a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    72a6:	a901      	add	r1, sp, #4
    72a8:	4668      	mov	r0, sp
	value = buf->data;
    72aa:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    72ae:	f88d 4000 	strb.w	r4, [sp]
    72b2:	f88d 4004 	strb.w	r4, [sp, #4]
    72b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    72ba:	f00f fac3 	bl	16844 <bt_uuid_cmp>
    72be:	4606      	mov	r6, r0
    72c0:	b190      	cbz	r0, 72e8 <att_find_type_req+0x74>
	if (!req) {
    72c2:	230a      	movs	r3, #10
    72c4:	463a      	mov	r2, r7
    72c6:	2106      	movs	r1, #6
    72c8:	4628      	mov	r0, r5
    72ca:	f010 fcaf 	bl	17c2c <send_err_rsp.part.0>
		return 0;
    72ce:	e007      	b.n	72e0 <att_find_type_req+0x6c>
			*err = 0U;
    72d0:	464f      	mov	r7, r9
	if (!req) {
    72d2:	2301      	movs	r3, #1
    72d4:	463a      	mov	r2, r7
    72d6:	2106      	movs	r1, #6
    72d8:	4628      	mov	r0, r5
    72da:	f010 fca7 	bl	17c2c <send_err_rsp.part.0>
		return 0;
    72de:	2400      	movs	r4, #0
}
    72e0:	4620      	mov	r0, r4
    72e2:	b006      	add	sp, #24
    72e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    72e8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    72ec:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
    72f0:	4601      	mov	r1, r0
    72f2:	2214      	movs	r2, #20
    72f4:	a801      	add	r0, sp, #4
    72f6:	f00f fa87 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    72fa:	4632      	mov	r2, r6
    72fc:	2107      	movs	r1, #7
    72fe:	4640      	mov	r0, r8
    7300:	f010 fcd7 	bl	17cb2 <bt_att_create_pdu>
    7304:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7306:	b1f8      	cbz	r0, 7348 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7308:	230a      	movs	r3, #10
    730a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    730e:	4a0f      	ldr	r2, [pc, #60]	; (734c <att_find_type_req+0xd8>)
	data.value_len = value_len;
    7310:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7314:	ab01      	add	r3, sp, #4
    7316:	4649      	mov	r1, r9
    7318:	4638      	mov	r0, r7
	data.value = value;
    731a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    731e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7320:	f010 f8ea 	bl	174f8 <bt_gatt_foreach_attr>
	if (data.err) {
    7324:	f89d 4015 	ldrb.w	r4, [sp, #21]
    7328:	b14c      	cbz	r4, 733e <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    732a:	9b02      	ldr	r3, [sp, #8]
    732c:	6958      	ldr	r0, [r3, #20]
    732e:	f7ff fb29 	bl	6984 <tx_meta_data_free>
		net_buf_unref(data.buf);
    7332:	9802      	ldr	r0, [sp, #8]
    7334:	f00b fa24 	bl	12780 <net_buf_unref>
	if (!req) {
    7338:	f89d 3015 	ldrb.w	r3, [sp, #21]
    733c:	e7ca      	b.n	72d4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    733e:	9902      	ldr	r1, [sp, #8]
    7340:	4628      	mov	r0, r5
    7342:	f010 fad0 	bl	178e6 <bt_att_chan_send_rsp>
	return 0;
    7346:	e7cb      	b.n	72e0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7348:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    734a:	e7c9      	b.n	72e0 <att_find_type_req+0x6c>
    734c:	0001750f 	.word	0x0001750f

00007350 <att_find_info_req>:
{
    7350:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7352:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7354:	881e      	ldrh	r6, [r3, #0]
{
    7356:	b085      	sub	sp, #20
    7358:	4605      	mov	r5, r0
	if (!start || !end) {
    735a:	b19e      	cbz	r6, 7384 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    735c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    735e:	b184      	cbz	r4, 7382 <att_find_info_req+0x32>
	if (start > end) {
    7360:	42a6      	cmp	r6, r4
    7362:	d80f      	bhi.n	7384 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    7364:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    7366:	2210      	movs	r2, #16
    7368:	2100      	movs	r1, #0
    736a:	4668      	mov	r0, sp
    736c:	f00f fa4c 	bl	16808 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7370:	2200      	movs	r2, #0
    7372:	2105      	movs	r1, #5
    7374:	4638      	mov	r0, r7
    7376:	f010 fc9c 	bl	17cb2 <bt_att_create_pdu>
    737a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    737c:	b958      	cbnz	r0, 7396 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    737e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    7380:	e007      	b.n	7392 <att_find_info_req+0x42>
			*err = 0U;
    7382:	4626      	mov	r6, r4
	if (!req) {
    7384:	2301      	movs	r3, #1
    7386:	4632      	mov	r2, r6
    7388:	2104      	movs	r1, #4
    738a:	4628      	mov	r0, r5
    738c:	f010 fc4e 	bl	17c2c <send_err_rsp.part.0>
	return 0;
    7390:	2000      	movs	r0, #0
}
    7392:	b005      	add	sp, #20
    7394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7396:	4621      	mov	r1, r4
    7398:	4a0a      	ldr	r2, [pc, #40]	; (73c4 <att_find_info_req+0x74>)
	data.chan = chan;
    739a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    739c:	466b      	mov	r3, sp
    739e:	4630      	mov	r0, r6
    73a0:	f010 f8aa 	bl	174f8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    73a4:	9c02      	ldr	r4, [sp, #8]
    73a6:	b944      	cbnz	r4, 73ba <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    73a8:	9b01      	ldr	r3, [sp, #4]
    73aa:	6958      	ldr	r0, [r3, #20]
    73ac:	f7ff faea 	bl	6984 <tx_meta_data_free>
		net_buf_unref(data.buf);
    73b0:	9801      	ldr	r0, [sp, #4]
    73b2:	f00b f9e5 	bl	12780 <net_buf_unref>
	if (!req) {
    73b6:	230a      	movs	r3, #10
    73b8:	e7e5      	b.n	7386 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
    73ba:	9901      	ldr	r1, [sp, #4]
    73bc:	4628      	mov	r0, r5
    73be:	f010 fa92 	bl	178e6 <bt_att_chan_send_rsp>
    73c2:	e7e5      	b.n	7390 <att_find_info_req+0x40>
    73c4:	00017637 	.word	0x00017637

000073c8 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    73c8:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    73ca:	4d0a      	ldr	r5, [pc, #40]	; (73f4 <bt_att_init+0x2c>)
    73cc:	4c0a      	ldr	r4, [pc, #40]	; (73f8 <bt_att_init+0x30>)
    73ce:	4629      	mov	r1, r5
    73d0:	4620      	mov	r0, r4
    73d2:	f012 f93a 	bl	1964a <k_queue_append>
    73d6:	f105 010c 	add.w	r1, r5, #12
    73da:	4620      	mov	r0, r4
    73dc:	f012 f935 	bl	1964a <k_queue_append>
    73e0:	f105 0118 	add.w	r1, r5, #24
    73e4:	4620      	mov	r0, r4
    73e6:	f012 f930 	bl	1964a <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    73ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
    73ee:	f000 b9e5 	b.w	77bc <bt_gatt_init>
    73f2:	bf00      	nop
    73f4:	2000121c 	.word	0x2000121c
    73f8:	200007e4 	.word	0x200007e4

000073fc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    73fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    73fe:	2300      	movs	r3, #0
{
    7400:	4605      	mov	r5, r0
    7402:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    7404:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    7406:	f00e f9a1 	bl	1574c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    740a:	4b0b      	ldr	r3, [pc, #44]	; (7438 <bt_att_req_alloc+0x3c>)
    740c:	681b      	ldr	r3, [r3, #0]
    740e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    7410:	bf04      	itt	eq
    7412:	2500      	moveq	r5, #0
    7414:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7416:	a901      	add	r1, sp, #4
    7418:	4808      	ldr	r0, [pc, #32]	; (743c <bt_att_req_alloc+0x40>)
    741a:	462a      	mov	r2, r5
    741c:	4623      	mov	r3, r4
    741e:	f00d fba5 	bl	14b6c <k_mem_slab_alloc>
    7422:	4601      	mov	r1, r0
    7424:	b930      	cbnz	r0, 7434 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    7426:	9801      	ldr	r0, [sp, #4]
    7428:	2210      	movs	r2, #16
    742a:	f00f f9ed 	bl	16808 <memset>

	return req;
    742e:	9801      	ldr	r0, [sp, #4]
}
    7430:	b003      	add	sp, #12
    7432:	bd30      	pop	{r4, r5, pc}
		return NULL;
    7434:	2000      	movs	r0, #0
    7436:	e7fb      	b.n	7430 <bt_att_req_alloc+0x34>
    7438:	20001208 	.word	0x20001208
    743c:	200007c8 	.word	0x200007c8

00007440 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7440:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
    7442:	6883      	ldr	r3, [r0, #8]
{
    7444:	9001      	str	r0, [sp, #4]
	if (req->buf) {
    7446:	b14b      	cbz	r3, 745c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    7448:	6958      	ldr	r0, [r3, #20]
    744a:	f7ff fa9b 	bl	6984 <tx_meta_data_free>
		net_buf_unref(req->buf);
    744e:	9b01      	ldr	r3, [sp, #4]
    7450:	6898      	ldr	r0, [r3, #8]
    7452:	f00b f995 	bl	12780 <net_buf_unref>
		req->buf = NULL;
    7456:	9b01      	ldr	r3, [sp, #4]
    7458:	2200      	movs	r2, #0
    745a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    745c:	4803      	ldr	r0, [pc, #12]	; (746c <bt_att_req_free+0x2c>)
    745e:	a901      	add	r1, sp, #4
    7460:	f012 f83c 	bl	194dc <k_mem_slab_free>
}
    7464:	b003      	add	sp, #12
    7466:	f85d fb04 	ldr.w	pc, [sp], #4
    746a:	bf00      	nop
    746c:	200007c8 	.word	0x200007c8

00007470 <att_handle_rsp>:
{
    7470:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7474:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    7476:	30b0      	adds	r0, #176	; 0xb0
{
    7478:	4688      	mov	r8, r1
    747a:	4691      	mov	r9, r2
    747c:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    747e:	f012 fa01 	bl	19884 <k_work_cancel_delayable>
	if (!chan->req) {
    7482:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7486:	2600      	movs	r6, #0
    7488:	b1f0      	cbz	r0, 74c8 <att_handle_rsp+0x58>
	if (chan->req == &cancel) {
    748a:	4b10      	ldr	r3, [pc, #64]	; (74cc <att_handle_rsp+0x5c>)
    748c:	4298      	cmp	r0, r3
    748e:	d112      	bne.n	74b6 <att_handle_rsp+0x46>
		chan->req = NULL;
    7490:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
    7494:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    7496:	6820      	ldr	r0, [r4, #0]
    7498:	f010 fafa 	bl	17a90 <att_req_send_process>
	if (func) {
    749c:	b13d      	cbz	r5, 74ae <att_handle_rsp+0x3e>
		func(chan->att->conn, err, pdu, len, params);
    749e:	6820      	ldr	r0, [r4, #0]
    74a0:	f8cd a000 	str.w	sl, [sp]
    74a4:	6800      	ldr	r0, [r0, #0]
    74a6:	464b      	mov	r3, r9
    74a8:	4642      	mov	r2, r8
    74aa:	4639      	mov	r1, r7
    74ac:	47a8      	blx	r5
}
    74ae:	2000      	movs	r0, #0
    74b0:	b002      	add	sp, #8
    74b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    74b6:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    74b8:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    74ba:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    74be:	f7ff ffbf 	bl	7440 <bt_att_req_free>
	chan->req = NULL;
    74c2:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
    74c6:	e7e6      	b.n	7496 <att_handle_rsp+0x26>
	bt_att_func_t func = NULL;
    74c8:	4605      	mov	r5, r0
    74ca:	e7e4      	b.n	7496 <att_handle_rsp+0x26>
    74cc:	2000120c 	.word	0x2000120c

000074d0 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel || !rsp->error) {
    74d0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    74d4:	b15b      	cbz	r3, 74ee <att_error_rsp+0x1e>
    74d6:	4a07      	ldr	r2, [pc, #28]	; (74f4 <att_error_rsp+0x24>)
    74d8:	4293      	cmp	r3, r2
    74da:	d008      	beq.n	74ee <att_error_rsp+0x1e>
    74dc:	688b      	ldr	r3, [r1, #8]
    74de:	78db      	ldrb	r3, [r3, #3]
		err = BT_ATT_ERR_UNLIKELY;
    74e0:	2b00      	cmp	r3, #0
    74e2:	bf08      	it	eq
    74e4:	230e      	moveq	r3, #14
	return att_handle_rsp(chan, NULL, 0, err);
    74e6:	2200      	movs	r2, #0
    74e8:	4611      	mov	r1, r2
    74ea:	f7ff bfc1 	b.w	7470 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    74ee:	230e      	movs	r3, #14
    74f0:	e7f9      	b.n	74e6 <att_error_rsp+0x16>
    74f2:	bf00      	nop
    74f4:	2000120c 	.word	0x2000120c

000074f8 <bt_att_disconnected>:
{
    74f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
    74fc:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
    7500:	4604      	mov	r4, r0
	if (!att_chan->att) {
    7502:	2e00      	cmp	r6, #0
    7504:	d056      	beq.n	75b4 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    7506:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
    750a:	f106 0024 	add.w	r0, r6, #36	; 0x24
    750e:	f010 f9f8 	bl	17902 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    7512:	1f27      	subs	r7, r4, #4
    7514:	f104 0894 	add.w	r8, r4, #148	; 0x94
    7518:	2200      	movs	r2, #0
    751a:	2300      	movs	r3, #0
    751c:	4640      	mov	r0, r8
    751e:	f011 fa94 	bl	18a4a <net_buf_get>
    7522:	4605      	mov	r5, r0
    7524:	bb28      	cbnz	r0, 7572 <bt_att_disconnected+0x7a>
	if (chan->req) {
    7526:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    752a:	b12b      	cbz	r3, 7538 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    752c:	4602      	mov	r2, r0
    752e:	4601      	mov	r1, r0
    7530:	230e      	movs	r3, #14
    7532:	4638      	mov	r0, r7
    7534:	f7ff ff9c 	bl	7470 <att_handle_rsp>
	chan->att = NULL;
    7538:	2300      	movs	r3, #0
    753a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
    753e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7540:	2b00      	cmp	r3, #0
    7542:	d137      	bne.n	75b4 <bt_att_disconnected+0xbc>
	att_reset(att);
    7544:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    7546:	9803      	ldr	r0, [sp, #12]
    7548:	2200      	movs	r2, #0
    754a:	2300      	movs	r3, #0
    754c:	300c      	adds	r0, #12
    754e:	f011 fa7c 	bl	18a4a <net_buf_get>
    7552:	4605      	mov	r5, r0
    7554:	b9a0      	cbnz	r0, 7580 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
    7556:	9803      	ldr	r0, [sp, #12]
	return list->head;
    7558:	6845      	ldr	r5, [r0, #4]
    755a:	b9c5      	cbnz	r5, 758e <bt_att_disconnected+0x96>
	att->conn = NULL;
    755c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    755e:	a903      	add	r1, sp, #12
    7560:	4816      	ldr	r0, [pc, #88]	; (75bc <bt_att_disconnected+0xc4>)
    7562:	f011 ffbb 	bl	194dc <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
    7566:	6820      	ldr	r0, [r4, #0]
}
    7568:	b004      	add	sp, #16
    756a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
    756e:	f000 bc69 	b.w	7e44 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    7572:	6968      	ldr	r0, [r5, #20]
    7574:	f7ff fa06 	bl	6984 <tx_meta_data_free>
		net_buf_unref(buf);
    7578:	4628      	mov	r0, r5
    757a:	f00b f901 	bl	12780 <net_buf_unref>
    757e:	e7cb      	b.n	7518 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    7580:	6968      	ldr	r0, [r5, #20]
    7582:	f7ff f9ff 	bl	6984 <tx_meta_data_free>
		net_buf_unref(buf);
    7586:	4628      	mov	r0, r5
    7588:	f00b f8fa 	bl	12780 <net_buf_unref>
    758c:	e7db      	b.n	7546 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    758e:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    7590:	686e      	ldr	r6, [r5, #4]
	return node->next;
    7592:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    7594:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7596:	4295      	cmp	r5, r2
	list->tail = node;
    7598:	bf08      	it	eq
    759a:	6083      	streq	r3, [r0, #8]
    759c:	b136      	cbz	r6, 75ac <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    759e:	68eb      	ldr	r3, [r5, #12]
    75a0:	9300      	str	r3, [sp, #0]
    75a2:	2300      	movs	r3, #0
    75a4:	6800      	ldr	r0, [r0, #0]
    75a6:	461a      	mov	r2, r3
    75a8:	210e      	movs	r1, #14
    75aa:	47b0      	blx	r6
		bt_att_req_free(req);
    75ac:	4628      	mov	r0, r5
    75ae:	f7ff ff47 	bl	7440 <bt_att_req_free>
    75b2:	e7d0      	b.n	7556 <bt_att_disconnected+0x5e>
}
    75b4:	b004      	add	sp, #16
    75b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ba:	bf00      	nop
    75bc:	20000790 	.word	0x20000790

000075c0 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    75c0:	b510      	push	{r4, lr}
    75c2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    75c4:	b318      	cbz	r0, 760e <bt_att_req_cancel+0x4e>
    75c6:	b311      	cbz	r1, 760e <bt_att_req_cancel+0x4e>
		return;
	}

	att = att_get(conn);
    75c8:	f010 f88f 	bl	176ea <att_get>
	if (!att) {
    75cc:	b1f8      	cbz	r0, 760e <bt_att_req_cancel+0x4e>
	return list->head;
    75ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    75d0:	b143      	cbz	r3, 75e4 <bt_att_req_cancel+0x24>
	return node->next;
    75d2:	f853 29e0 	ldr.w	r2, [r3], #-224
    75d6:	b102      	cbz	r2, 75da <bt_att_req_cancel+0x1a>
    75d8:	3ae0      	subs	r2, #224	; 0xe0
	if (chan->req != req) {
    75da:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    75de:	428c      	cmp	r4, r1
    75e0:	d006      	beq.n	75f0 <bt_att_req_cancel+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    75e2:	b96a      	cbnz	r2, 7600 <bt_att_req_cancel+0x40>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    75e4:	3004      	adds	r0, #4
    75e6:	4621      	mov	r1, r4
    75e8:	f010 f98b 	bl	17902 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
    75ec:	4620      	mov	r0, r4
    75ee:	e003      	b.n	75f8 <bt_att_req_cancel+0x38>
	chan->req = &cancel;
    75f0:	4a07      	ldr	r2, [pc, #28]	; (7610 <bt_att_req_cancel+0x50>)
    75f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	bt_att_req_free(req);
    75f6:	4620      	mov	r0, r4
}
    75f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    75fc:	f7ff bf20 	b.w	7440 <bt_att_req_free>
    7600:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    7604:	b101      	cbz	r1, 7608 <bt_att_req_cancel+0x48>
    7606:	39e0      	subs	r1, #224	; 0xe0
{
    7608:	4613      	mov	r3, r2
    760a:	460a      	mov	r2, r1
    760c:	e7e5      	b.n	75da <bt_att_req_cancel+0x1a>
}
    760e:	bd10      	pop	{r4, pc}
    7610:	2000120c 	.word	0x2000120c

00007614 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    7614:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7616:	4d0d      	ldr	r5, [pc, #52]	; (764c <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    7618:	4604      	mov	r4, r0
    761a:	b960      	cbnz	r0, 7636 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    761c:	9000      	str	r0, [sp, #0]
    761e:	4669      	mov	r1, sp
    7620:	f8cd 0003 	str.w	r0, [sp, #3]
    7624:	1c68      	adds	r0, r5, #1
    7626:	f010 fcff 	bl	18028 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    762a:	2800      	cmp	r0, #0
    762c:	bf08      	it	eq
    762e:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    7630:	4620      	mov	r0, r4
    7632:	b003      	add	sp, #12
    7634:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7636:	462a      	mov	r2, r5
    7638:	f812 1b01 	ldrb.w	r1, [r2], #1
    763c:	f00f fd19 	bl	17072 <bt_conn_is_peer_addr_le>
	return NULL;
    7640:	2800      	cmp	r0, #0
    7642:	bf14      	ite	ne
    7644:	462c      	movne	r4, r5
    7646:	2400      	moveq	r4, #0
    7648:	e7f2      	b.n	7630 <find_cf_cfg+0x1c>
    764a:	bf00      	nop
    764c:	20001248 	.word	0x20001248

00007650 <find_sc_cfg>:
{
    7650:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    7652:	4c06      	ldr	r4, [pc, #24]	; (766c <find_sc_cfg+0x1c>)
    7654:	7823      	ldrb	r3, [r4, #0]
    7656:	4283      	cmp	r3, r0
    7658:	d103      	bne.n	7662 <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    765a:	1c60      	adds	r0, r4, #1
    765c:	f010 fce4 	bl	18028 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    7660:	b108      	cbz	r0, 7666 <find_sc_cfg+0x16>
	return NULL;
    7662:	2000      	movs	r0, #0
}
    7664:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7666:	4620      	mov	r0, r4
    7668:	e7fc      	b.n	7664 <find_sc_cfg+0x14>
    766a:	bf00      	nop
    766c:	2000221c 	.word	0x2000221c

00007670 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    7670:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7672:	4d0d      	ldr	r5, [pc, #52]	; (76a8 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    7674:	4604      	mov	r4, r0
    7676:	b960      	cbnz	r0, 7692 <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    7678:	9000      	str	r0, [sp, #0]
    767a:	4669      	mov	r1, sp
    767c:	f8cd 0003 	str.w	r0, [sp, #3]
    7680:	1c68      	adds	r0, r5, #1
    7682:	f010 fcd1 	bl	18028 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
    7686:	2800      	cmp	r0, #0
    7688:	bf08      	it	eq
    768a:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
    768c:	4620      	mov	r0, r4
    768e:	b003      	add	sp, #12
    7690:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    7692:	462a      	mov	r2, r5
    7694:	f812 1b01 	ldrb.w	r1, [r2], #1
    7698:	f00f fceb 	bl	17072 <bt_conn_is_peer_addr_le>
	return NULL;
    769c:	2800      	cmp	r0, #0
    769e:	bf14      	ite	ne
    76a0:	462c      	movne	r4, r5
    76a2:	2400      	moveq	r4, #0
    76a4:	e7f2      	b.n	768c <gatt_sub_find+0x1c>
    76a6:	bf00      	nop
    76a8:	20001278 	.word	0x20001278

000076ac <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    76ac:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    76ae:	2312      	movs	r3, #18
{
    76b0:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    76b2:	2104      	movs	r1, #4
    76b4:	e9cd 3100 	strd	r3, r1, [sp]
    76b8:	4b03      	ldr	r3, [pc, #12]	; (76c8 <gatt_write_ccc+0x1c>)
    76ba:	4904      	ldr	r1, [pc, #16]	; (76cc <gatt_write_ccc+0x20>)
    76bc:	f010 fe60 	bl	18380 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
    76c0:	b003      	add	sp, #12
    76c2:	f85d fb04 	ldr.w	pc, [sp], #4
    76c6:	bf00      	nop
    76c8:	0001853b 	.word	0x0001853b
    76cc:	0001823b 	.word	0x0001823b

000076d0 <disconnected_cb>:
{
    76d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    76d4:	4b23      	ldr	r3, [pc, #140]	; (7764 <disconnected_cb+0x94>)
{
    76d6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    76d8:	6882      	ldr	r2, [r0, #8]
    76da:	429a      	cmp	r2, r3
{
    76dc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    76de:	d102      	bne.n	76e6 <disconnected_cb+0x16>
	ccc = attr->user_data;
    76e0:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    76e2:	8963      	ldrh	r3, [r4, #10]
    76e4:	bb03      	cbnz	r3, 7728 <disconnected_cb+0x58>
}
    76e6:	2001      	movs	r0, #1
    76e8:	b002      	add	sp, #8
    76ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    76ee:	f105 0888 	add.w	r8, r5, #136	; 0x88
    76f2:	7a28      	ldrb	r0, [r5, #8]
    76f4:	4641      	mov	r1, r8
    76f6:	f00f fb8b 	bl	16e10 <bt_addr_le_is_bonded>
    76fa:	b980      	cbnz	r0, 771e <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    76fc:	4b1a      	ldr	r3, [pc, #104]	; (7768 <disconnected_cb+0x98>)
    76fe:	429c      	cmp	r4, r3
    7700:	d102      	bne.n	7708 <disconnected_cb+0x38>
					sc_clear(conn);
    7702:	4628      	mov	r0, r5
    7704:	f010 fe19 	bl	1833a <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7708:	2500      	movs	r5, #0
    770a:	4669      	mov	r1, sp
    770c:	4630      	mov	r0, r6
    770e:	9500      	str	r5, [sp, #0]
    7710:	f8cd 5003 	str.w	r5, [sp, #3]
    7714:	f010 fcb8 	bl	18088 <bt_addr_le_copy>
	cfg->id = 0U;
    7718:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    771a:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    771c:	e019      	b.n	7752 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    771e:	4641      	mov	r1, r8
    7720:	4630      	mov	r0, r6
    7722:	f010 fcb1 	bl	18088 <bt_addr_le_copy>
	if (!value_used) {
    7726:	e014      	b.n	7752 <disconnected_cb+0x82>
		if (!cfg->value) {
    7728:	8923      	ldrh	r3, [r4, #8]
    772a:	b193      	cbz	r3, 7752 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    772c:	4626      	mov	r6, r4
    772e:	4628      	mov	r0, r5
    7730:	f816 1b01 	ldrb.w	r1, [r6], #1
    7734:	4632      	mov	r2, r6
    7736:	f00f fc9c 	bl	17072 <bt_conn_is_peer_addr_le>
    773a:	2800      	cmp	r0, #0
    773c:	d1d7      	bne.n	76ee <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    773e:	7820      	ldrb	r0, [r4, #0]
    7740:	4631      	mov	r1, r6
    7742:	f7fe fdc3 	bl	62cc <bt_conn_lookup_addr_le>
			if (tmp) {
    7746:	b120      	cbz	r0, 7752 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    7748:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    774a:	f00f fc84 	bl	17056 <bt_conn_unref>
	if (!value_used) {
    774e:	2d07      	cmp	r5, #7
    7750:	d0c9      	beq.n	76e6 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    7752:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    7754:	2100      	movs	r1, #0
    7756:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    7758:	2b00      	cmp	r3, #0
    775a:	d0c4      	beq.n	76e6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    775c:	4638      	mov	r0, r7
    775e:	4798      	blx	r3
    7760:	e7c1      	b.n	76e6 <disconnected_cb+0x16>
    7762:	bf00      	nop
    7764:	0001811b 	.word	0x0001811b
    7768:	20000204 	.word	0x20000204

0000776c <sc_indicate_rsp>:
{
    776c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    776e:	f06f 0102 	mvn.w	r1, #2
    7772:	4604      	mov	r4, r0
    7774:	480f      	ldr	r0, [pc, #60]	; (77b4 <sc_indicate_rsp+0x48>)
    7776:	f010 fd51 	bl	1821c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    777a:	480e      	ldr	r0, [pc, #56]	; (77b4 <sc_indicate_rsp+0x48>)
    777c:	f010 fc6f 	bl	1805e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    7780:	07c2      	lsls	r2, r0, #31
    7782:	d504      	bpl.n	778e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
    7784:	480c      	ldr	r0, [pc, #48]	; (77b8 <sc_indicate_rsp+0x4c>)
    7786:	2200      	movs	r2, #0
    7788:	2300      	movs	r3, #0
    778a:	f00d fd2f 	bl	151ec <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
    778e:	4620      	mov	r0, r4
    7790:	f010 fba7 	bl	17ee2 <bt_att_fixed_chan_only>
    7794:	b160      	cbz	r0, 77b0 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
    7796:	4620      	mov	r0, r4
    7798:	f7ff ff3c 	bl	7614 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    779c:	b140      	cbz	r0, 77b0 <sc_indicate_rsp+0x44>
    779e:	7a03      	ldrb	r3, [r0, #8]
    77a0:	07db      	lsls	r3, r3, #31
    77a2:	d505      	bpl.n	77b0 <sc_indicate_rsp+0x44>
}
    77a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    77a8:	2101      	movs	r1, #1
    77aa:	300c      	adds	r0, #12
    77ac:	f010 bc5d 	b.w	1806a <atomic_or>
    77b0:	bd10      	pop	{r4, pc}
    77b2:	bf00      	nop
    77b4:	20000b48 	.word	0x20000b48
    77b8:	20000b18 	.word	0x20000b18

000077bc <bt_gatt_init>:
{
    77bc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    77be:	4b20      	ldr	r3, [pc, #128]	; (7840 <bt_gatt_init+0x84>)
    77c0:	f3bf 8f5b 	dmb	ish
    77c4:	2201      	movs	r2, #1
    77c6:	e853 1f00 	ldrex	r1, [r3]
    77ca:	2900      	cmp	r1, #0
    77cc:	d103      	bne.n	77d6 <bt_gatt_init+0x1a>
    77ce:	e843 2000 	strex	r0, r2, [r3]
    77d2:	2800      	cmp	r0, #0
    77d4:	d1f7      	bne.n	77c6 <bt_gatt_init+0xa>
    77d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    77da:	d130      	bne.n	783e <bt_gatt_init+0x82>
    77dc:	f3bf 8f5b 	dmb	ish
    77e0:	4b18      	ldr	r3, [pc, #96]	; (7844 <bt_gatt_init+0x88>)
    77e2:	e853 1f00 	ldrex	r1, [r3]
    77e6:	2900      	cmp	r1, #0
    77e8:	d103      	bne.n	77f2 <bt_gatt_init+0x36>
    77ea:	e843 2000 	strex	r0, r2, [r3]
    77ee:	2800      	cmp	r0, #0
    77f0:	d1f7      	bne.n	77e2 <bt_gatt_init+0x26>
    77f2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    77f6:	d108      	bne.n	780a <bt_gatt_init+0x4e>
    77f8:	4913      	ldr	r1, [pc, #76]	; (7848 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    77fa:	4a14      	ldr	r2, [pc, #80]	; (784c <bt_gatt_init+0x90>)
    77fc:	880b      	ldrh	r3, [r1, #0]
    77fe:	4c14      	ldr	r4, [pc, #80]	; (7850 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    7800:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7802:	42a2      	cmp	r2, r4
    7804:	d315      	bcc.n	7832 <bt_gatt_init+0x76>
    7806:	b100      	cbz	r0, 780a <bt_gatt_init+0x4e>
    7808:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    780a:	4b12      	ldr	r3, [pc, #72]	; (7854 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    780c:	4912      	ldr	r1, [pc, #72]	; (7858 <bt_gatt_init+0x9c>)
    780e:	4813      	ldr	r0, [pc, #76]	; (785c <bt_gatt_init+0xa0>)
    7810:	2200      	movs	r2, #0
	list->tail = NULL;
    7812:	e9c3 2200 	strd	r2, r2, [r3]
    7816:	f012 f827 	bl	19868 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    781a:	4810      	ldr	r0, [pc, #64]	; (785c <bt_gatt_init+0xa0>)
    781c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7820:	2300      	movs	r3, #0
    7822:	f00d fcaf 	bl	15184 <k_work_schedule>
}
    7826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    782a:	490d      	ldr	r1, [pc, #52]	; (7860 <bt_gatt_init+0xa4>)
    782c:	480d      	ldr	r0, [pc, #52]	; (7864 <bt_gatt_init+0xa8>)
    782e:	f012 b81b 	b.w	19868 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    7832:	6850      	ldr	r0, [r2, #4]
    7834:	4403      	add	r3, r0
    7836:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7838:	3208      	adds	r2, #8
    783a:	2001      	movs	r0, #1
    783c:	e7e1      	b.n	7802 <bt_gatt_init+0x46>
}
    783e:	bd10      	pop	{r4, pc}
    7840:	20001258 	.word	0x20001258
    7844:	20001274 	.word	0x20001274
    7848:	2000221a 	.word	0x2000221a
    784c:	0001a150 	.word	0x0001a150
    7850:	0001a160 	.word	0x0001a160
    7854:	20001240 	.word	0x20001240
    7858:	00018657 	.word	0x00018657
    785c:	20000aa0 	.word	0x20000aa0
    7860:	00007be1 	.word	0x00007be1
    7864:	20000b18 	.word	0x20000b18

00007868 <bt_gatt_attr_get_handle>:
{
    7868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    786c:	4603      	mov	r3, r0
    786e:	b148      	cbz	r0, 7884 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    7870:	8a00      	ldrh	r0, [r0, #16]
    7872:	b938      	cbnz	r0, 7884 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7874:	4912      	ldr	r1, [pc, #72]	; (78c0 <bt_gatt_attr_get_handle+0x58>)
    7876:	f8df e04c 	ldr.w	lr, [pc, #76]	; 78c4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    787a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    787c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7880:	4571      	cmp	r1, lr
    7882:	d301      	bcc.n	7888 <bt_gatt_attr_get_handle+0x20>
}
    7884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    7888:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    788c:	42bb      	cmp	r3, r7
    788e:	d304      	bcc.n	789a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    7890:	fb0c 7206 	mla	r2, ip, r6, r7
    7894:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    7896:	4293      	cmp	r3, r2
    7898:	d90e      	bls.n	78b8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    789a:	19a2      	adds	r2, r4, r6
    789c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    789e:	3108      	adds	r1, #8
    78a0:	4614      	mov	r4, r2
    78a2:	e7ed      	b.n	7880 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    78a4:	fb0c 7805 	mla	r8, ip, r5, r7
    78a8:	4543      	cmp	r3, r8
    78aa:	d007      	beq.n	78bc <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    78ac:	3501      	adds	r5, #1
    78ae:	1962      	adds	r2, r4, r5
    78b0:	42b5      	cmp	r5, r6
    78b2:	b292      	uxth	r2, r2
    78b4:	d1f6      	bne.n	78a4 <bt_gatt_attr_get_handle+0x3c>
    78b6:	e7f2      	b.n	789e <bt_gatt_attr_get_handle+0x36>
    78b8:	2500      	movs	r5, #0
    78ba:	e7f8      	b.n	78ae <bt_gatt_attr_get_handle+0x46>
    78bc:	4610      	mov	r0, r2
    78be:	e7e1      	b.n	7884 <bt_gatt_attr_get_handle+0x1c>
    78c0:	0001a150 	.word	0x0001a150
    78c4:	0001a160 	.word	0x0001a160

000078c8 <bt_gatt_foreach_attr_type>:
{
    78c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78cc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    78d0:	9100      	str	r1, [sp, #0]
    78d2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    78d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    78d8:	2d00      	cmp	r5, #0
    78da:	bf08      	it	eq
    78dc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    78de:	4b24      	ldr	r3, [pc, #144]	; (7970 <bt_gatt_foreach_attr_type+0xa8>)
    78e0:	881b      	ldrh	r3, [r3, #0]
    78e2:	4283      	cmp	r3, r0
{
    78e4:	4607      	mov	r7, r0
    78e6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    78e8:	d23c      	bcs.n	7964 <bt_gatt_foreach_attr_type+0x9c>
}
    78ea:	b003      	add	sp, #12
    78ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    78f0:	6873      	ldr	r3, [r6, #4]
    78f2:	4423      	add	r3, r4
    78f4:	42bb      	cmp	r3, r7
    78f6:	d232      	bcs.n	795e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    78f8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    78fa:	3608      	adds	r6, #8
    78fc:	4b1d      	ldr	r3, [pc, #116]	; (7974 <bt_gatt_foreach_attr_type+0xac>)
    78fe:	429e      	cmp	r6, r3
    7900:	d3f6      	bcc.n	78f0 <bt_gatt_foreach_attr_type+0x28>
    7902:	e7f2      	b.n	78ea <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    7904:	5889      	ldr	r1, [r1, r2]
    7906:	9301      	str	r3, [sp, #4]
    7908:	4640      	mov	r0, r8
    790a:	f00e ff9b 	bl	16844 <bt_uuid_cmp>
    790e:	9b01      	ldr	r3, [sp, #4]
    7910:	b190      	cbz	r0, 7938 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    7912:	3401      	adds	r4, #1
    7914:	f10a 0a01 	add.w	sl, sl, #1
    7918:	b2a4      	uxth	r4, r4
    791a:	6873      	ldr	r3, [r6, #4]
    791c:	4553      	cmp	r3, sl
    791e:	d9ec      	bls.n	78fa <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    7920:	9b00      	ldr	r3, [sp, #0]
    7922:	429c      	cmp	r4, r3
    7924:	d8e1      	bhi.n	78ea <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    7926:	42bc      	cmp	r4, r7
    7928:	d3f3      	bcc.n	7912 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    792a:	6831      	ldr	r1, [r6, #0]
    792c:	fb0b f20a 	mul.w	r2, fp, sl
    7930:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    7932:	f1b8 0f00 	cmp.w	r8, #0
    7936:	d1e5      	bne.n	7904 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    7938:	f1b9 0f00 	cmp.w	r9, #0
    793c:	d10b      	bne.n	7956 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    793e:	3d01      	subs	r5, #1
    7940:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    7942:	4618      	mov	r0, r3
    7944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7948:	4621      	mov	r1, r4
    794a:	4798      	blx	r3
	if (!*num_matches) {
    794c:	2d00      	cmp	r5, #0
    794e:	d0cc      	beq.n	78ea <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    7950:	2800      	cmp	r0, #0
    7952:	d1de      	bne.n	7912 <bt_gatt_foreach_attr_type+0x4a>
    7954:	e7c9      	b.n	78ea <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    7956:	68da      	ldr	r2, [r3, #12]
    7958:	4591      	cmp	r9, r2
    795a:	d1da      	bne.n	7912 <bt_gatt_foreach_attr_type+0x4a>
    795c:	e7ef      	b.n	793e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    795e:	f04f 0a00 	mov.w	sl, #0
    7962:	e7da      	b.n	791a <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7964:	4e04      	ldr	r6, [pc, #16]	; (7978 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    7966:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    7968:	f04f 0b14 	mov.w	fp, #20
    796c:	e7c6      	b.n	78fc <bt_gatt_foreach_attr_type+0x34>
    796e:	bf00      	nop
    7970:	2000221a 	.word	0x2000221a
    7974:	0001a160 	.word	0x0001a160
    7978:	0001a150 	.word	0x0001a150

0000797c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    797c:	b510      	push	{r4, lr}
    797e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    7980:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    7982:	aa1c      	add	r2, sp, #112	; 0x70
    7984:	4669      	mov	r1, sp
    7986:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    7988:	e9cd 3300 	strd	r3, r3, [sp]
    798c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    7990:	f00e fe1c 	bl	165cc <tc_cmac_setup>
    7994:	b1d8      	cbz	r0, 79ce <db_hash_gen.constprop.0+0x52>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    7996:	f64f 71ff 	movw	r1, #65535	; 0xffff
    799a:	2001      	movs	r0, #1
    799c:	4a0d      	ldr	r2, [pc, #52]	; (79d4 <db_hash_gen.constprop.0+0x58>)
    799e:	ab04      	add	r3, sp, #16
    79a0:	f010 fe4e 	bl	18640 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    79a4:	480c      	ldr	r0, [pc, #48]	; (79d8 <db_hash_gen.constprop.0+0x5c>)
    79a6:	a904      	add	r1, sp, #16
    79a8:	f00e fea6 	bl	166f8 <tc_cmac_final>
    79ac:	b178      	cbz	r0, 79ce <db_hash_gen.constprop.0+0x52>
    79ae:	4b0a      	ldr	r3, [pc, #40]	; (79d8 <db_hash_gen.constprop.0+0x5c>)
    79b0:	2208      	movs	r2, #8
    79b2:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    79b6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    79b8:	780c      	ldrb	r4, [r1, #0]
    79ba:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    79be:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    79c0:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    79c4:	d1f7      	bne.n	79b6 <db_hash_gen.constprop.0+0x3a>
    79c6:	4805      	ldr	r0, [pc, #20]	; (79dc <db_hash_gen.constprop.0+0x60>)
    79c8:	2104      	movs	r1, #4
    79ca:	f010 fb4e 	bl	1806a <atomic_or>
}
    79ce:	b048      	add	sp, #288	; 0x120
    79d0:	bd10      	pop	{r4, pc}
    79d2:	bf00      	nop
    79d4:	00017f7f 	.word	0x00017f7f
    79d8:	20000a90 	.word	0x20000a90
    79dc:	20000b48 	.word	0x20000b48

000079e0 <db_hash_read>:
{
    79e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    79e4:	491a      	ldr	r1, [pc, #104]	; (7a50 <db_hash_read+0x70>)
{
    79e6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    79ea:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    79ec:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    79f0:	4615      	mov	r5, r2
    79f2:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    79f4:	f011 ff5a 	bl	198ac <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    79f8:	4816      	ldr	r0, [pc, #88]	; (7a54 <db_hash_read+0x74>)
    79fa:	f010 fb30 	bl	1805e <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    79fe:	0741      	lsls	r1, r0, #29
    7a00:	d401      	bmi.n	7a06 <db_hash_read+0x26>
		db_hash_gen(true);
    7a02:	f7ff ffbb 	bl	797c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
    7a06:	4640      	mov	r0, r8
    7a08:	f7ff fe04 	bl	7614 <find_cf_cfg>
	if (cfg &&
    7a0c:	b168      	cbz	r0, 7a2a <db_hash_read+0x4a>
    7a0e:	7a03      	ldrb	r3, [r0, #8]
    7a10:	07da      	lsls	r2, r3, #31
    7a12:	d50a      	bpl.n	7a2a <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    7a14:	f100 040c 	add.w	r4, r0, #12
    7a18:	4620      	mov	r0, r4
    7a1a:	f010 fb20 	bl	1805e <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
    7a1e:	07c3      	lsls	r3, r0, #31
    7a20:	d403      	bmi.n	7a2a <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7a22:	2102      	movs	r1, #2
    7a24:	4620      	mov	r0, r4
    7a26:	f010 fb20 	bl	1806a <atomic_or>
	if (offset > value_len) {
    7a2a:	2e10      	cmp	r6, #16
    7a2c:	d80d      	bhi.n	7a4a <db_hash_read+0x6a>
	len = MIN(buf_len, value_len - offset);
    7a2e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    7a32:	4909      	ldr	r1, [pc, #36]	; (7a58 <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
    7a34:	42bc      	cmp	r4, r7
    7a36:	bfa8      	it	ge
    7a38:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    7a3a:	4622      	mov	r2, r4
    7a3c:	4431      	add	r1, r6
    7a3e:	4628      	mov	r0, r5
    7a40:	f00e fed7 	bl	167f2 <memcpy>
}
    7a44:	4620      	mov	r0, r4
    7a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7a4a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    7a4e:	e7f9      	b.n	7a44 <db_hash_read+0x64>
    7a50:	20000ad0 	.word	0x20000ad0
    7a54:	20000b48 	.word	0x20000b48
    7a58:	20000a90 	.word	0x20000a90

00007a5c <gatt_indicate>:
{
    7a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a60:	4615      	mov	r5, r2
    7a62:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    7a64:	2214      	movs	r2, #20
    7a66:	6869      	ldr	r1, [r5, #4]
{
    7a68:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    7a6a:	f010 fdf6 	bl	1865a <bt_gatt_check_perm>
    7a6e:	2800      	cmp	r0, #0
    7a70:	d139      	bne.n	7ae6 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7a72:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    7a76:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    7a78:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7a7a:	f7ff fcbf 	bl	73fc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    7a7e:	3602      	adds	r6, #2
	if (!req) {
    7a80:	4604      	mov	r4, r0
    7a82:	b920      	cbnz	r0, 7a8e <gatt_indicate+0x32>
		return -ENOMEM;
    7a84:	f06f 050b 	mvn.w	r5, #11
}
    7a88:	4628      	mov	r0, r5
    7a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    7a8e:	4b17      	ldr	r3, [pc, #92]	; (7aec <gatt_indicate+0x90>)
    7a90:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    7a92:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    7a94:	4632      	mov	r2, r6
    7a96:	211d      	movs	r1, #29
    7a98:	4640      	mov	r0, r8
    7a9a:	f010 f90a 	bl	17cb2 <bt_att_create_pdu>
	if (!buf) {
    7a9e:	4606      	mov	r6, r0
    7aa0:	b918      	cbnz	r0, 7aaa <gatt_indicate+0x4e>
		bt_att_req_free(req);
    7aa2:	4620      	mov	r0, r4
    7aa4:	f7ff fccc 	bl	7440 <bt_att_req_free>
    7aa8:	e7ec      	b.n	7a84 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
    7aaa:	f100 0a08 	add.w	sl, r0, #8
    7aae:	2102      	movs	r1, #2
    7ab0:	4650      	mov	r0, sl
    7ab2:	f011 f82d 	bl	18b10 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    7ab6:	4607      	mov	r7, r0
    7ab8:	8aa9      	ldrh	r1, [r5, #20]
    7aba:	f827 9b02 	strh.w	r9, [r7], #2
    7abe:	4650      	mov	r0, sl
    7ac0:	f011 f826 	bl	18b10 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    7ac4:	8aaa      	ldrh	r2, [r5, #20]
    7ac6:	6929      	ldr	r1, [r5, #16]
    7ac8:	4638      	mov	r0, r7
    7aca:	f00e fe92 	bl	167f2 <memcpy>
	req->buf = buf;
    7ace:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    7ad0:	4621      	mov	r1, r4
    7ad2:	4640      	mov	r0, r8
    7ad4:	f010 f9d6 	bl	17e84 <bt_att_req_send>
	if (err) {
    7ad8:	4605      	mov	r5, r0
    7ada:	2800      	cmp	r0, #0
    7adc:	d0d4      	beq.n	7a88 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    7ade:	4620      	mov	r0, r4
    7ae0:	f7ff fcae 	bl	7440 <bt_att_req_free>
    7ae4:	e7d0      	b.n	7a88 <gatt_indicate+0x2c>
		return -EPERM;
    7ae6:	f04f 35ff 	mov.w	r5, #4294967295
    7aea:	e7cd      	b.n	7a88 <gatt_indicate+0x2c>
    7aec:	00017f51 	.word	0x00017f51

00007af0 <bt_gatt_indicate>:
{
    7af0:	b530      	push	{r4, r5, lr}
    7af2:	4604      	mov	r4, r0
    7af4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7af6:	4837      	ldr	r0, [pc, #220]	; (7bd4 <bt_gatt_indicate+0xe4>)
    7af8:	f010 fab1 	bl	1805e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7afc:	0742      	lsls	r2, r0, #29
{
    7afe:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7b00:	d561      	bpl.n	7bc6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    7b02:	b114      	cbz	r4, 7b0a <bt_gatt_indicate+0x1a>
    7b04:	7aa3      	ldrb	r3, [r4, #10]
    7b06:	2b07      	cmp	r3, #7
    7b08:	d160      	bne.n	7bcc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    7b0a:	6868      	ldr	r0, [r5, #4]
    7b0c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7b0e:	f7ff feab 	bl	7868 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    7b12:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7b14:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    7b18:	b33a      	cbz	r2, 7b6a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7b1a:	a905      	add	r1, sp, #20
    7b1c:	9102      	str	r1, [sp, #8]
    7b1e:	492e      	ldr	r1, [pc, #184]	; (7bd8 <bt_gatt_indicate+0xe8>)
    7b20:	9101      	str	r1, [sp, #4]
    7b22:	2101      	movs	r1, #1
	found->attr = NULL;
    7b24:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7b26:	9100      	str	r1, [sp, #0]
    7b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    7b2c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7b2e:	f7ff fecb 	bl	78c8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    7b32:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    7b34:	b91b      	cbnz	r3, 7b3e <bt_gatt_indicate+0x4e>
			return -ENOENT;
    7b36:	f06f 0001 	mvn.w	r0, #1
}
    7b3a:	b00b      	add	sp, #44	; 0x2c
    7b3c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    7b3e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    7b40:	9b05      	ldr	r3, [sp, #20]
    7b42:	6818      	ldr	r0, [r3, #0]
    7b44:	2300      	movs	r3, #0
    7b46:	f88d 3010 	strb.w	r3, [sp, #16]
    7b4a:	a904      	add	r1, sp, #16
    7b4c:	f642 0303 	movw	r3, #10243	; 0x2803
    7b50:	f8ad 3012 	strh.w	r3, [sp, #18]
    7b54:	f00e fe76 	bl	16844 <bt_uuid_cmp>
    7b58:	b970      	cbnz	r0, 7b78 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    7b5a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    7b5c:	68c3      	ldr	r3, [r0, #12]
    7b5e:	799b      	ldrb	r3, [r3, #6]
    7b60:	069b      	lsls	r3, r3, #26
    7b62:	d405      	bmi.n	7b70 <bt_gatt_indicate+0x80>
			return -EINVAL;
    7b64:	f06f 0015 	mvn.w	r0, #21
    7b68:	e7e7      	b.n	7b3a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d1e8      	bne.n	7b40 <bt_gatt_indicate+0x50>
    7b6e:	e7e2      	b.n	7b36 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    7b70:	f010 fd18 	bl	185a4 <bt_gatt_attr_value_handle>
    7b74:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    7b78:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    7b7c:	b13c      	cbz	r4, 7b8e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    7b7e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    7b80:	4601      	mov	r1, r0
		params->_ref = 1;
    7b82:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    7b84:	462a      	mov	r2, r5
    7b86:	4620      	mov	r0, r4
    7b88:	f7ff ff68 	bl	7a5c <gatt_indicate>
    7b8c:	e7d5      	b.n	7b3a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    7b8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    7b92:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    7b94:	2302      	movs	r3, #2
    7b96:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7b9a:	f642 1302 	movw	r3, #10498	; 0x2902
    7b9e:	f8ad 3012 	strh.w	r3, [sp, #18]
    7ba2:	ab05      	add	r3, sp, #20
    7ba4:	9302      	str	r3, [sp, #8]
    7ba6:	4b0d      	ldr	r3, [pc, #52]	; (7bdc <bt_gatt_indicate+0xec>)
    7ba8:	9301      	str	r3, [sp, #4]
    7baa:	2301      	movs	r3, #1
    7bac:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    7bae:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7bb0:	4623      	mov	r3, r4
    7bb2:	aa04      	add	r2, sp, #16
    7bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    7bb8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7bba:	f88d 4010 	strb.w	r4, [sp, #16]
    7bbe:	f7ff fe83 	bl	78c8 <bt_gatt_foreach_attr_type>
	return data.err;
    7bc2:	9807      	ldr	r0, [sp, #28]
    7bc4:	e7b9      	b.n	7b3a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    7bc6:	f06f 000a 	mvn.w	r0, #10
    7bca:	e7b6      	b.n	7b3a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    7bcc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7bd0:	e7b3      	b.n	7b3a <bt_gatt_indicate+0x4a>
    7bd2:	bf00      	nop
    7bd4:	200000cc 	.word	0x200000cc
    7bd8:	00017f77 	.word	0x00017f77
    7bdc:	00007c45 	.word	0x00007c45

00007be0 <sc_process>:
{
    7be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7be2:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    7be6:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7bea:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    7bee:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    7bf0:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    7bf4:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7bf8:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7bfc:	f06f 0101 	mvn.w	r1, #1
    7c00:	4628      	mov	r0, r5
    7c02:	f010 fb0b 	bl	1821c <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    7c06:	4b0d      	ldr	r3, [pc, #52]	; (7c3c <sc_process+0x5c>)
    7c08:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    7c0c:	4b0c      	ldr	r3, [pc, #48]	; (7c40 <sc_process+0x60>)
    7c0e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    7c12:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    7c14:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    7c16:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    7c1a:	2304      	movs	r3, #4
	sc->start = 0U;
    7c1c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    7c20:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    7c24:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    7c28:	4631      	mov	r1, r6
    7c2a:	f7ff ff61 	bl	7af0 <bt_gatt_indicate>
    7c2e:	b918      	cbnz	r0, 7c38 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7c30:	2102      	movs	r1, #2
    7c32:	4628      	mov	r0, r5
    7c34:	f010 fa19 	bl	1806a <atomic_or>
}
    7c38:	b002      	add	sp, #8
    7c3a:	bd70      	pop	{r4, r5, r6, pc}
    7c3c:	0001a440 	.word	0x0001a440
    7c40:	0000776d 	.word	0x0000776d

00007c44 <notify_cb>:
{
    7c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7c46:	4b32      	ldr	r3, [pc, #200]	; (7d10 <notify_cb+0xcc>)
{
    7c48:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7c4a:	6882      	ldr	r2, [r0, #8]
    7c4c:	429a      	cmp	r2, r3
{
    7c4e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7c50:	d12d      	bne.n	7cae <notify_cb+0x6a>
	ccc = attr->user_data;
    7c52:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    7c54:	4b2f      	ldr	r3, [pc, #188]	; (7d14 <notify_cb+0xd0>)
    7c56:	429f      	cmp	r7, r3
    7c58:	d119      	bne.n	7c8e <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7c5a:	4d2f      	ldr	r5, [pc, #188]	; (7d18 <notify_cb+0xd4>)
    7c5c:	2300      	movs	r3, #0
    7c5e:	4669      	mov	r1, sp
    7c60:	1c68      	adds	r0, r5, #1
    7c62:	9300      	str	r3, [sp, #0]
    7c64:	f8cd 3003 	str.w	r3, [sp, #3]
    7c68:	f010 f9de 	bl	18028 <bt_addr_le_cmp>
    7c6c:	b178      	cbz	r0, 7c8e <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    7c6e:	4629      	mov	r1, r5
    7c70:	2207      	movs	r2, #7
    7c72:	f811 0b01 	ldrb.w	r0, [r1], #1
    7c76:	f7fe fb49 	bl	630c <bt_conn_lookup_state_le>
			if (!conn) {
    7c7a:	b9e0      	cbnz	r0, 7cb6 <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    7c7c:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    7c7e:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    7c80:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    7c82:	f811 0b01 	ldrb.w	r0, [r1], #1
    7c86:	8853      	ldrh	r3, [r2, #2]
    7c88:	8812      	ldrh	r2, [r2, #0]
    7c8a:	f010 fb2f 	bl	182ec <sc_save>
		if (cfg->value != data->type) {
    7c8e:	893a      	ldrh	r2, [r7, #8]
    7c90:	89a3      	ldrh	r3, [r4, #12]
    7c92:	429a      	cmp	r2, r3
    7c94:	d10b      	bne.n	7cae <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7c96:	4639      	mov	r1, r7
    7c98:	f811 0b01 	ldrb.w	r0, [r1], #1
    7c9c:	f7fe fb16 	bl	62cc <bt_conn_lookup_addr_le>
		if (!conn) {
    7ca0:	4605      	mov	r5, r0
    7ca2:	b120      	cbz	r0, 7cae <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    7ca4:	7a83      	ldrb	r3, [r0, #10]
    7ca6:	2b07      	cmp	r3, #7
    7ca8:	d008      	beq.n	7cbc <notify_cb+0x78>
			bt_conn_unref(conn);
    7caa:	f00f f9d4 	bl	17056 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    7cae:	2701      	movs	r7, #1
}
    7cb0:	4638      	mov	r0, r7
    7cb2:	b003      	add	sp, #12
    7cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    7cb6:	f00f f9ce 	bl	17056 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    7cba:	e7e8      	b.n	7c8e <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    7cbc:	697b      	ldr	r3, [r7, #20]
    7cbe:	b123      	cbz	r3, 7cca <notify_cb+0x86>
    7cc0:	4631      	mov	r1, r6
    7cc2:	4798      	blx	r3
    7cc4:	b908      	cbnz	r0, 7cca <notify_cb+0x86>
			bt_conn_unref(conn);
    7cc6:	4628      	mov	r0, r5
    7cc8:	e7ef      	b.n	7caa <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
    7cca:	2214      	movs	r2, #20
    7ccc:	4631      	mov	r1, r6
    7cce:	4628      	mov	r0, r5
    7cd0:	f010 fcc3 	bl	1865a <bt_gatt_check_perm>
    7cd4:	4607      	mov	r7, r0
    7cd6:	2800      	cmp	r0, #0
    7cd8:	d1e9      	bne.n	7cae <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7cda:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    7cdc:	88a1      	ldrh	r1, [r4, #4]
    7cde:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    7ce0:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    7ce2:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    7ce4:	d10f      	bne.n	7d06 <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
    7ce6:	f7ff feb9 	bl	7a5c <gatt_indicate>
			if (err == 0) {
    7cea:	4606      	mov	r6, r0
    7cec:	b918      	cbnz	r0, 7cf6 <notify_cb+0xb2>
				data->ind_params->_ref++;
    7cee:	6922      	ldr	r2, [r4, #16]
    7cf0:	7d93      	ldrb	r3, [r2, #22]
    7cf2:	3301      	adds	r3, #1
    7cf4:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    7cf6:	4628      	mov	r0, r5
    7cf8:	f00f f9ad 	bl	17056 <bt_conn_unref>
		if (err < 0) {
    7cfc:	2e00      	cmp	r6, #0
    7cfe:	dbd7      	blt.n	7cb0 <notify_cb+0x6c>
		data->err = 0;
    7d00:	2300      	movs	r3, #0
    7d02:	60a3      	str	r3, [r4, #8]
    7d04:	e7d3      	b.n	7cae <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    7d06:	f010 fccb 	bl	186a0 <gatt_notify>
    7d0a:	4606      	mov	r6, r0
    7d0c:	e7f3      	b.n	7cf6 <notify_cb+0xb2>
    7d0e:	bf00      	nop
    7d10:	0001811b 	.word	0x0001811b
    7d14:	20000204 	.word	0x20000204
    7d18:	2000221c 	.word	0x2000221c

00007d1c <update_ccc>:
{
    7d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d1e:	4b24      	ldr	r3, [pc, #144]	; (7db0 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
    7d20:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d22:	6882      	ldr	r2, [r0, #8]
    7d24:	429a      	cmp	r2, r3
{
    7d26:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d28:	d13f      	bne.n	7daa <update_ccc+0x8e>
	ccc = attr->user_data;
    7d2a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    7d2c:	8933      	ldrh	r3, [r6, #8]
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d03b      	beq.n	7daa <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7d32:	4632      	mov	r2, r6
    7d34:	4620      	mov	r0, r4
    7d36:	f812 1b01 	ldrb.w	r1, [r2], #1
    7d3a:	f00f f99a 	bl	17072 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    7d3e:	2800      	cmp	r0, #0
    7d40:	d033      	beq.n	7daa <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    7d42:	222a      	movs	r2, #42	; 0x2a
    7d44:	4629      	mov	r1, r5
    7d46:	4620      	mov	r0, r4
    7d48:	f010 fc87 	bl	1865a <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    7d4c:	2803      	cmp	r0, #3
    7d4e:	d02c      	beq.n	7daa <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
    7d50:	4631      	mov	r1, r6
    7d52:	4628      	mov	r0, r5
    7d54:	f010 f8f2 	bl	17f3c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    7d58:	4b16      	ldr	r3, [pc, #88]	; (7db4 <update_ccc+0x98>)
    7d5a:	429e      	cmp	r6, r3
    7d5c:	d125      	bne.n	7daa <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    7d5e:	7a20      	ldrb	r0, [r4, #8]
    7d60:	f104 0188 	add.w	r1, r4, #136	; 0x88
    7d64:	f7ff fc74 	bl	7650 <find_sc_cfg>
	if (!cfg) {
    7d68:	b1f8      	cbz	r0, 7daa <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
    7d6a:	8902      	ldrh	r2, [r0, #8]
    7d6c:	8943      	ldrh	r3, [r0, #10]
    7d6e:	ea53 0102 	orrs.w	r1, r3, r2
    7d72:	d01a      	beq.n	7daa <update_ccc+0x8e>
	index = bt_conn_index(conn);
    7d74:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    7d76:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    7d7a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    7d7e:	f7fe f9eb 	bl	6158 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7d82:	490d      	ldr	r1, [pc, #52]	; (7db8 <update_ccc+0x9c>)
    7d84:	4a0d      	ldr	r2, [pc, #52]	; (7dbc <update_ccc+0xa0>)
    7d86:	2318      	movs	r3, #24
    7d88:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7d8c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7d8e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    7d90:	4a0b      	ldr	r2, [pc, #44]	; (7dc0 <update_ccc+0xa4>)
    7d92:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    7d94:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7d96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    7d9a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    7d9c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7d9e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    7da2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7da4:	4620      	mov	r0, r4
    7da6:	f7ff fea3 	bl	7af0 <bt_gatt_indicate>
}
    7daa:	2001      	movs	r0, #1
    7dac:	b002      	add	sp, #8
    7dae:	bd70      	pop	{r4, r5, r6, pc}
    7db0:	0001811b 	.word	0x0001811b
    7db4:	20000204 	.word	0x20000204
    7db8:	2000125c 	.word	0x2000125c
    7dbc:	0001a440 	.word	0x0001a440
    7dc0:	00018565 	.word	0x00018565

00007dc4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    7dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7dc6:	4a14      	ldr	r2, [pc, #80]	; (7e18 <bt_gatt_connected+0x54>)
	data.conn = conn;
    7dc8:	9000      	str	r0, [sp, #0]
{
    7dca:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7dcc:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    7dce:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    7dd4:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7dd8:	f010 fc32 	bl	18640 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    7ddc:	4628      	mov	r0, r5
    7dde:	f7ff fc47 	bl	7670 <gatt_sub_find>
	if (!sub) {
    7de2:	b1b8      	cbz	r0, 7e14 <bt_gatt_connected+0x50>
	return list->head;
    7de4:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    7de6:	b1ac      	cbz	r4, 7e14 <bt_gatt_connected+0x50>
    7de8:	3c18      	subs	r4, #24
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    7dea:	f105 0688 	add.w	r6, r5, #136	; 0x88
    7dee:	7a28      	ldrb	r0, [r5, #8]
    7df0:	4631      	mov	r1, r6
    7df2:	f00f f80d 	bl	16e10 <bt_addr_le_is_bonded>
    7df6:	b148      	cbz	r0, 7e0c <bt_gatt_connected+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7df8:	f104 0014 	add.w	r0, r4, #20
    7dfc:	f010 f92f 	bl	1805e <atomic_get>
    7e00:	0783      	lsls	r3, r0, #30
    7e02:	d403      	bmi.n	7e0c <bt_gatt_connected+0x48>
			gatt_write_ccc(conn, params);
    7e04:	4621      	mov	r1, r4
    7e06:	4628      	mov	r0, r5
    7e08:	f7ff fc50 	bl	76ac <gatt_write_ccc>
	return node->next;
    7e0c:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    7e0e:	b10c      	cbz	r4, 7e14 <bt_gatt_connected+0x50>
    7e10:	3c18      	subs	r4, #24
    7e12:	e7ec      	b.n	7dee <bt_gatt_connected+0x2a>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    7e14:	b002      	add	sp, #8
    7e16:	bd70      	pop	{r4, r5, r6, pc}
    7e18:	00007d1d 	.word	0x00007d1d

00007e1c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    7e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    7e1e:	4b08      	ldr	r3, [pc, #32]	; (7e40 <bt_gatt_att_max_mtu_changed+0x24>)
    7e20:	681c      	ldr	r4, [r3, #0]
    7e22:	4605      	mov	r5, r0
    7e24:	460e      	mov	r6, r1
    7e26:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7e28:	b14c      	cbz	r4, 7e3e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    7e2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7e2e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    7e30:	b11b      	cbz	r3, 7e3a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    7e32:	463a      	mov	r2, r7
    7e34:	4631      	mov	r1, r6
    7e36:	4628      	mov	r0, r5
    7e38:	4798      	blx	r3
	return node->next;
    7e3a:	6864      	ldr	r4, [r4, #4]
    7e3c:	e7f4      	b.n	7e28 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    7e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e40:	20001240 	.word	0x20001240

00007e44 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    7e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7e48:	4a2a      	ldr	r2, [pc, #168]	; (7ef4 <bt_gatt_disconnected+0xb0>)
    7e4a:	4603      	mov	r3, r0
{
    7e4c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7e4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7e52:	2001      	movs	r0, #1
    7e54:	f010 fbf4 	bl	18640 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    7e58:	4620      	mov	r0, r4
    7e5a:	f7ff fc09 	bl	7670 <gatt_sub_find>
	if (!sub) {
    7e5e:	4607      	mov	r7, r0
    7e60:	b378      	cbz	r0, 7ec2 <bt_gatt_disconnected+0x7e>
	return list->head;
    7e62:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    7e64:	b36d      	cbz	r5, 7ec2 <bt_gatt_disconnected+0x7e>
	return node->next;
    7e66:	f855 6918 	ldr.w	r6, [r5], #-24
    7e6a:	b106      	cbz	r6, 7e6e <bt_gatt_disconnected+0x2a>
    7e6c:	3e18      	subs	r6, #24
{
    7e6e:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    7e72:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    7e76:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
    7e7a:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    7e7c:	7a20      	ldrb	r0, [r4, #8]
    7e7e:	4649      	mov	r1, r9
    7e80:	f00e ffc6 	bl	16e10 <bt_addr_le_is_bonded>
    7e84:	b970      	cbnz	r0, 7ea4 <bt_gatt_disconnected+0x60>
			params->value = 0U;
    7e86:	f8a5 b010 	strh.w	fp, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
    7e8a:	462b      	mov	r3, r5
    7e8c:	4642      	mov	r2, r8
    7e8e:	4639      	mov	r1, r7
    7e90:	4620      	mov	r0, r4
    7e92:	f010 f9a4 	bl	181de <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    7e96:	b1a6      	cbz	r6, 7ec2 <bt_gatt_disconnected+0x7e>
    7e98:	69b3      	ldr	r3, [r6, #24]
    7e9a:	b103      	cbz	r3, 7e9e <bt_gatt_disconnected+0x5a>
    7e9c:	3b18      	subs	r3, #24
{
    7e9e:	4635      	mov	r5, r6
    7ea0:	461e      	mov	r6, r3
    7ea2:	e7eb      	b.n	7e7c <bt_gatt_disconnected+0x38>
    7ea4:	f105 0014 	add.w	r0, r5, #20
    7ea8:	f010 f8d9 	bl	1805e <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    7eac:	07c3      	lsls	r3, r0, #31
    7eae:	d4ea      	bmi.n	7e86 <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    7eb0:	787b      	ldrb	r3, [r7, #1]
    7eb2:	b11b      	cbz	r3, 7ebc <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    7eb4:	4649      	mov	r1, r9
    7eb6:	4650      	mov	r0, sl
    7eb8:	f010 f8e6 	bl	18088 <bt_addr_le_copy>
			prev = &params->node;
    7ebc:	f105 0818 	add.w	r8, r5, #24
    7ec0:	e7e9      	b.n	7e96 <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
    7ec2:	4620      	mov	r0, r4
    7ec4:	f7ff fba6 	bl	7614 <find_cf_cfg>
	if (!cfg) {
    7ec8:	4605      	mov	r5, r0
    7eca:	b188      	cbz	r0, 7ef0 <bt_gatt_disconnected+0xac>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7ecc:	f104 0688 	add.w	r6, r4, #136	; 0x88
    7ed0:	7a20      	ldrb	r0, [r4, #8]
    7ed2:	4631      	mov	r1, r6
    7ed4:	f00e ff9c 	bl	16e10 <bt_addr_le_is_bonded>
    7ed8:	b920      	cbnz	r0, 7ee4 <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
    7eda:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    7edc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    7ee0:	f010 b9e7 	b.w	182b2 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7ee4:	4631      	mov	r1, r6
    7ee6:	1c68      	adds	r0, r5, #1
}
    7ee8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7eec:	f010 b8cc 	b.w	18088 <bt_addr_le_copy>
}
    7ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ef4:	000076d1 	.word	0x000076d1

00007ef8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    7ef8:	4b04      	ldr	r3, [pc, #16]	; (7f0c <bt_smp_accept+0x14>)
    7efa:	6818      	ldr	r0, [r3, #0]
    7efc:	b918      	cbnz	r0, 7f06 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    7efe:	4a04      	ldr	r2, [pc, #16]	; (7f10 <bt_smp_accept+0x18>)
    7f00:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7f02:	600b      	str	r3, [r1, #0]

		return 0;
    7f04:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    7f06:	f06f 000b 	mvn.w	r0, #11
}
    7f0a:	4770      	bx	lr
    7f0c:	20001288 	.word	0x20001288
    7f10:	0001a51c 	.word	0x0001a51c

00007f14 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    7f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f18:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7f1a:	1dc2      	adds	r2, r0, #7
    7f1c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7f20:	1e75      	subs	r5, r6, #1
{
    7f22:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7f24:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    7f26:	6018      	str	r0, [r3, #0]
{
    7f28:	b082      	sub	sp, #8
    7f2a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7f2c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7f2e:	2100      	movs	r1, #0
    7f30:	2204      	movs	r2, #4
    7f32:	fb07 0005 	mla	r0, r7, r5, r0
    7f36:	f00e fc67 	bl	16808 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    7f3a:	b1bd      	cbz	r5, 7f6c <mem_init+0x58>
    7f3c:	3e02      	subs	r6, #2
    7f3e:	b2b6      	uxth	r6, r6
    7f40:	fb06 7307 	mla	r3, r6, r7, r7
    7f44:	fb06 f807 	mul.w	r8, r6, r7
    7f48:	441c      	add	r4, r3
    7f4a:	eba8 0803 	sub.w	r8, r8, r3
    7f4e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    7f50:	2204      	movs	r2, #4
    7f52:	eb04 0008 	add.w	r0, r4, r8
    7f56:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    7f5a:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    7f5c:	f00e fc49 	bl	167f2 <memcpy>
	while (mem_count--) {
    7f60:	42b5      	cmp	r5, r6
    7f62:	eba4 0407 	sub.w	r4, r4, r7
    7f66:	f105 0501 	add.w	r5, r5, #1
    7f6a:	d1f1      	bne.n	7f50 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    7f6c:	b002      	add	sp, #8
    7f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f72:	bf00      	nop

00007f74 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    7f74:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    7f76:	6805      	ldr	r5, [r0, #0]
{
    7f78:	b082      	sub	sp, #8
	if (*mem_head) {
    7f7a:	b195      	cbz	r5, 7fa2 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    7f7c:	1deb      	adds	r3, r5, #7
    7f7e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7f82:	2204      	movs	r2, #4
    7f84:	4604      	mov	r4, r0
    7f86:	4629      	mov	r1, r5
    7f88:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    7f8c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7f8e:	f00e fc30 	bl	167f2 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    7f92:	9b01      	ldr	r3, [sp, #4]
    7f94:	b123      	cbz	r3, 7fa0 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    7f96:	1dda      	adds	r2, r3, #7
    7f98:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    7f9c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    7f9e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    7fa0:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    7fa2:	4628      	mov	r0, r5
    7fa4:	b002      	add	sp, #8
    7fa6:	bd70      	pop	{r4, r5, r6, pc}

00007fa8 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    7fa8:	680b      	ldr	r3, [r1, #0]
{
    7faa:	b570      	push	{r4, r5, r6, lr}
    7fac:	460c      	mov	r4, r1
    7fae:	4605      	mov	r5, r0
	if (*mem_head) {
    7fb0:	b183      	cbz	r3, 7fd4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    7fb2:	3307      	adds	r3, #7
    7fb4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    7fb8:	881e      	ldrh	r6, [r3, #0]
    7fba:	3601      	adds	r6, #1
    7fbc:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    7fbe:	2204      	movs	r2, #4
    7fc0:	4621      	mov	r1, r4
    7fc2:	4628      	mov	r0, r5
    7fc4:	f00e fc15 	bl	167f2 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    7fc8:	1deb      	adds	r3, r5, #7
    7fca:	f023 0303 	bic.w	r3, r3, #3
    7fce:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    7fd0:	6025      	str	r5, [r4, #0]
}
    7fd2:	bd70      	pop	{r4, r5, r6, pc}
    7fd4:	2601      	movs	r6, #1
    7fd6:	e7f2      	b.n	7fbe <mem_release+0x16>

00007fd8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    7fd8:	fb02 0001 	mla	r0, r2, r1, r0
    7fdc:	4770      	bx	lr
    7fde:	bf00      	nop

00007fe0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
    7fe0:	1a40      	subs	r0, r0, r1
    7fe2:	fb90 f0f2 	sdiv	r0, r0, r2
}
    7fe6:	b280      	uxth	r0, r0
    7fe8:	4770      	bx	lr
    7fea:	bf00      	nop

00007fec <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    7fec:	1e53      	subs	r3, r2, #1
	src += len;
    7fee:	4411      	add	r1, r2
	while (len--) {
    7ff0:	b29b      	uxth	r3, r3
    7ff2:	b142      	cbz	r2, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ff4:	43db      	mvns	r3, r3
    7ff6:	3801      	subs	r0, #1
    7ff8:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    7ffa:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    7ffe:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    8002:	4291      	cmp	r1, r2
    8004:	d1f9      	bne.n	7ffa <mem_rcopy+0xe>
	}
}
    8006:	4770      	bx	lr

00008008 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    8008:	4401      	add	r1, r0
    800a:	e002      	b.n	8012 <mem_nz+0xa>
		if (*src++) {
    800c:	f810 3b01 	ldrb.w	r3, [r0], #1
    8010:	b91b      	cbnz	r3, 801a <mem_nz+0x12>
	while (len--) {
    8012:	4288      	cmp	r0, r1
    8014:	d1fa      	bne.n	800c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    8016:	2000      	movs	r0, #0
    8018:	4770      	bx	lr
			return 1;
    801a:	2001      	movs	r0, #1
}
    801c:	4770      	bx	lr
    801e:	bf00      	nop

00008020 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    8020:	6010      	str	r0, [r2, #0]
    8022:	6008      	str	r0, [r1, #0]

	return link;
}
    8024:	4770      	bx	lr
    8026:	bf00      	nop

00008028 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    8028:	680a      	ldr	r2, [r1, #0]
{
    802a:	4603      	mov	r3, r0
	if (*head != *tail) {
    802c:	6800      	ldr	r0, [r0, #0]
    802e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    8030:	bf05      	ittet	eq
    8032:	2200      	moveq	r2, #0
    8034:	600a      	streq	r2, [r1, #0]
		return NULL;
    8036:	2000      	movne	r0, #0
	*head = *tail = NULL;
    8038:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    803a:	4770      	bx	lr

0000803c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    803c:	f8d2 c000 	ldr.w	ip, [r2]
    8040:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    8044:	f8d2 c000 	ldr.w	ip, [r2]
    8048:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    804c:	6010      	str	r0, [r2, #0]

	return link;
}
    804e:	4770      	bx	lr

00008050 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    8050:	4288      	cmp	r0, r1
    8052:	d003      	beq.n	805c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    8054:	b11a      	cbz	r2, 805e <memq_peek+0xe>
		*mem = head->mem;
    8056:	6843      	ldr	r3, [r0, #4]
    8058:	6013      	str	r3, [r2, #0]
    805a:	4770      	bx	lr
		return NULL;
    805c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    805e:	4770      	bx	lr

00008060 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    8060:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    8062:	4283      	cmp	r3, r0
    8064:	d009      	beq.n	807a <memq_dequeue+0x1a>
	if (mem) {
    8066:	b12a      	cbz	r2, 8074 <memq_dequeue+0x14>
		*mem = head->mem;
    8068:	6858      	ldr	r0, [r3, #4]
    806a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    806c:	681a      	ldr	r2, [r3, #0]
    806e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    8070:	4618      	mov	r0, r3
    8072:	4770      	bx	lr
	if (old_head == NULL) {
    8074:	2b00      	cmp	r3, #0
    8076:	d1f9      	bne.n	806c <memq_dequeue+0xc>
    8078:	e7fa      	b.n	8070 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    807a:	2300      	movs	r3, #0
    807c:	e7f8      	b.n	8070 <memq_dequeue+0x10>
    807e:	bf00      	nop

00008080 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    8080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8084:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80b8 <mayfly_init+0x38>
    8088:	4e0c      	ldr	r6, [pc, #48]	; (80bc <mayfly_init+0x3c>)
    808a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    808c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    8090:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    8092:	1d22      	adds	r2, r4, #4
    8094:	4621      	mov	r1, r4
    8096:	4628      	mov	r0, r5
		while (caller_id--) {
    8098:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    809a:	f7ff ffc1 	bl	8020 <memq_init>
		while (caller_id--) {
    809e:	42b4      	cmp	r4, r6
    80a0:	f1a5 0508 	sub.w	r5, r5, #8
    80a4:	d1f5      	bne.n	8092 <mayfly_init+0x12>
	while (callee_id--) {
    80a6:	3f04      	subs	r7, #4
    80a8:	1d3b      	adds	r3, r7, #4
    80aa:	f1a8 0820 	sub.w	r8, r8, #32
    80ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    80b2:	d1eb      	bne.n	808c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    80b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80b8:	2000138c 	.word	0x2000138c
    80bc:	2000141c 	.word	0x2000141c

000080c0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    80c0:	b410      	push	{r4}
    80c2:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    80c4:	4c15      	ldr	r4, [pc, #84]	; (811c <mayfly_enable+0x5c>)
{
    80c6:	468c      	mov	ip, r1
	if (enable) {
    80c8:	b192      	cbz	r2, 80f0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    80ca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    80ce:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    80d2:	0100      	lsls	r0, r0, #4
    80d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    80d8:	4421      	add	r1, r4
    80da:	7a48      	ldrb	r0, [r1, #9]
    80dc:	7a0c      	ldrb	r4, [r1, #8]
    80de:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    80e0:	bf04      	itt	eq
    80e2:	3001      	addeq	r0, #1
    80e4:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    80e6:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    80e8:	4661      	mov	r1, ip
    80ea:	4618      	mov	r0, r3
    80ec:	f00a b86c 	b.w	121c8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    80f0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    80f4:	0112      	lsls	r2, r2, #4
    80f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    80fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    80fe:	4423      	add	r3, r4
    8100:	7a9c      	ldrb	r4, [r3, #10]
    8102:	7ada      	ldrb	r2, [r3, #11]
    8104:	42a2      	cmp	r2, r4
    8106:	d001      	beq.n	810c <mayfly_enable+0x4c>
}
    8108:	bc10      	pop	{r4}
    810a:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    810c:	3201      	adds	r2, #1
    810e:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    8110:	4b03      	ldr	r3, [pc, #12]	; (8120 <mayfly_enable+0x60>)
    8112:	2201      	movs	r2, #1
    8114:	545a      	strb	r2, [r3, r1]
}
    8116:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    8118:	f00a b8ac 	b.w	12274 <mayfly_pend>
    811c:	20001398 	.word	0x20001398
    8120:	20001394 	.word	0x20001394

00008124 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    8124:	b570      	push	{r4, r5, r6, lr}
    8126:	b082      	sub	sp, #8
    8128:	4606      	mov	r6, r0
    812a:	9101      	str	r1, [sp, #4]
    812c:	461c      	mov	r4, r3
    812e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    8130:	b32a      	cbz	r2, 817e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    8132:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    8134:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    8136:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    8138:	f012 0203 	ands.w	r2, r2, #3
    813c:	d005      	beq.n	814a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
    813e:	2a01      	cmp	r2, #1
    8140:	d042      	beq.n	81c8 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    8142:	3301      	adds	r3, #1
    8144:	b2db      	uxtb	r3, r3
    8146:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    8148:	e00f      	b.n	816a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    814a:	3301      	adds	r3, #1
    814c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    814e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    8150:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8152:	2304      	movs	r3, #4
    8154:	fb11 3105 	smlabb	r1, r1, r5, r3
    8158:	4a1c      	ldr	r2, [pc, #112]	; (81cc <mayfly_enqueue+0xa8>)
    815a:	6860      	ldr	r0, [r4, #4]
    815c:	230c      	movs	r3, #12
    815e:	fb13 1306 	smlabb	r3, r3, r6, r1
    8162:	441a      	add	r2, r3
    8164:	4621      	mov	r1, r4
    8166:	f7ff ff69 	bl	803c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    816a:	4b19      	ldr	r3, [pc, #100]	; (81d0 <mayfly_enqueue+0xac>)
    816c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    816e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    8170:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    8172:	4629      	mov	r1, r5
    8174:	f00a f87e 	bl	12274 <mayfly_pend>

	return 0;
    8178:	2000      	movs	r0, #0
}
    817a:	b002      	add	sp, #8
    817c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    817e:	f00a f863 	bl	12248 <mayfly_prio_is_equal>
    8182:	2800      	cmp	r0, #0
    8184:	d0d5      	beq.n	8132 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
    8186:	4629      	mov	r1, r5
    8188:	4630      	mov	r0, r6
    818a:	f00a f83d 	bl	12208 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    818e:	2800      	cmp	r0, #0
    8190:	d0cf      	beq.n	8132 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
    8192:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    8196:	0112      	lsls	r2, r2, #4
    8198:	490c      	ldr	r1, [pc, #48]	; (81cc <mayfly_enqueue+0xa8>)
    819a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    819e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    81a2:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    81a4:	7a9a      	ldrb	r2, [r3, #10]
    81a6:	7adb      	ldrb	r3, [r3, #11]
    81a8:	429a      	cmp	r2, r3
    81aa:	d1c2      	bne.n	8132 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
    81ac:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    81ae:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    81b0:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    81b2:	0792      	lsls	r2, r2, #30
    81b4:	d002      	beq.n	81bc <mayfly_enqueue+0x98>
		m->_req = ack + 2;
    81b6:	3302      	adds	r3, #2
    81b8:	b2db      	uxtb	r3, r3
    81ba:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    81bc:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    81c0:	4798      	blx	r3
		return 0;
    81c2:	2000      	movs	r0, #0
}
    81c4:	b002      	add	sp, #8
    81c6:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    81c8:	4610      	mov	r0, r2
    81ca:	e7d6      	b.n	817a <mayfly_enqueue+0x56>
    81cc:	20001398 	.word	0x20001398
    81d0:	20001394 	.word	0x20001394

000081d4 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    81d4:	4a50      	ldr	r2, [pc, #320]	; (8318 <mayfly_run+0x144>)
    81d6:	5c13      	ldrb	r3, [r2, r0]
    81d8:	2b00      	cmp	r3, #0
    81da:	f000 809b 	beq.w	8314 <mayfly_run+0x140>
{
    81de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    81e2:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    81e4:	4f4d      	ldr	r7, [pc, #308]	; (831c <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
    81e6:	5413      	strb	r3, [r2, r0]
{
    81e8:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    81ea:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    81ec:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    81f0:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    81f4:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    81f8:	9303      	str	r3, [sp, #12]
    81fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    81fe:	f10b 0804 	add.w	r8, fp, #4
    8202:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    8206:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    820a:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    820c:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    8210:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    8212:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    8214:	f7ff ff1c 	bl	8050 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    8218:	f107 0624 	add.w	r6, r7, #36	; 0x24
    821c:	4683      	mov	fp, r0
    821e:	2800      	cmp	r0, #0
    8220:	d034      	beq.n	828c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    8222:	9c05      	ldr	r4, [sp, #20]
    8224:	7863      	ldrb	r3, [r4, #1]
    8226:	7825      	ldrb	r5, [r4, #0]
    8228:	1aed      	subs	r5, r5, r3
    822a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    822e:	2d01      	cmp	r5, #1
    8230:	d106      	bne.n	8240 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    8232:	3b01      	subs	r3, #1
    8234:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    8236:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    823a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    823c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    823e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    8240:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    8242:	1ac3      	subs	r3, r0, r3
    8244:	f003 0303 	and.w	r3, r3, #3
    8248:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    824a:	f04f 0200 	mov.w	r2, #0
    824e:	4631      	mov	r1, r6
	req = m->_req;
    8250:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    8254:	d00f      	beq.n	8276 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
    8256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8258:	f7ff ff02 	bl	8060 <memq_dequeue>
		ack = m->_ack;
    825c:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    8260:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    8262:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    8266:	eba3 030c 	sub.w	r3, r3, ip
    826a:	f003 0303 	and.w	r3, r3, #3
    826e:	2b01      	cmp	r3, #1
		m->_ack = req;
    8270:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    8274:	d046      	beq.n	8304 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    8276:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    827a:	aa05      	add	r2, sp, #20
    827c:	f7ff fee8 	bl	8050 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    8280:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    8282:	9000      	str	r0, [sp, #0]
    8284:	4683      	mov	fp, r0
			if (state == 1U) {
    8286:	d02b      	beq.n	82e0 <mayfly_run+0x10c>
		while (link) {
    8288:	2800      	cmp	r0, #0
    828a:	d1ca      	bne.n	8222 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    828c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    8290:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    8294:	429a      	cmp	r2, r3
    8296:	d003      	beq.n	82a0 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    8298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    829c:	2301      	movs	r3, #1
    829e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    82a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    82a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    82a8:	429a      	cmp	r2, r3
    82aa:	d003      	beq.n	82b4 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    82ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    82b0:	2301      	movs	r3, #1
    82b2:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    82b4:	f109 39ff 	add.w	r9, r9, #4294967295
    82b8:	fa5f f989 	uxtb.w	r9, r9
    82bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    82c0:	f1a7 070c 	sub.w	r7, r7, #12
    82c4:	d1a1      	bne.n	820a <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    82c6:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    82ca:	b1c3      	cbz	r3, 82fe <mayfly_run+0x12a>
    82cc:	9b03      	ldr	r3, [sp, #12]
    82ce:	b9b3      	cbnz	r3, 82fe <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
    82d0:	461a      	mov	r2, r3
    82d2:	4651      	mov	r1, sl
    82d4:	4650      	mov	r0, sl
	}
}
    82d6:	b007      	add	sp, #28
    82d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    82dc:	f009 bf74 	b.w	121c8 <mayfly_enable_cb>
				if (caller_id || link) {
    82e0:	f1b9 0f00 	cmp.w	r9, #0
    82e4:	d101      	bne.n	82ea <mayfly_run+0x116>
    82e6:	2800      	cmp	r0, #0
    82e8:	d0d0      	beq.n	828c <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
    82ea:	f8dd a008 	ldr.w	sl, [sp, #8]
    82ee:	4a0a      	ldr	r2, [pc, #40]	; (8318 <mayfly_run+0x144>)
    82f0:	2301      	movs	r3, #1
    82f2:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    82f6:	4651      	mov	r1, sl
    82f8:	4650      	mov	r0, sl
    82fa:	f009 ffbb 	bl	12274 <mayfly_pend>
}
    82fe:	b007      	add	sp, #28
    8300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8304:	4642      	mov	r2, r8
    8306:	4621      	mov	r1, r4
    8308:	4658      	mov	r0, fp
			m->_ack = ack;
    830a:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    830e:	f7ff fe95 	bl	803c <memq_enqueue>
    8312:	e7b0      	b.n	8276 <mayfly_run+0xa2>
    8314:	4770      	bx	lr
    8316:	bf00      	nop
    8318:	20001394 	.word	0x20001394
    831c:	20001398 	.word	0x20001398

00008320 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    8320:	1e4b      	subs	r3, r1, #1
    8322:	b2db      	uxtb	r3, r3
    8324:	b171      	cbz	r1, 8344 <util_ones_count_get+0x24>
    8326:	1e41      	subs	r1, r0, #1
    8328:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    832c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    832e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    8332:	b123      	cbz	r3, 833e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    8334:	1e5a      	subs	r2, r3, #1
			one_count++;
    8336:	3001      	adds	r0, #1
		while (bite) {
    8338:	4013      	ands	r3, r2
			one_count++;
    833a:	b2c0      	uxtb	r0, r0
		while (bite) {
    833c:	d1fa      	bne.n	8334 <util_ones_count_get+0x14>
	while (octets_len--) {
    833e:	4561      	cmp	r1, ip
    8340:	d1f5      	bne.n	832e <util_ones_count_get+0xe>
    8342:	4770      	bx	lr
	uint8_t one_count = 0U;
    8344:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    8346:	4770      	bx	lr

00008348 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    8348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    834c:	4d48      	ldr	r5, [pc, #288]	; (8470 <util_aa_le32+0x128>)
{
    834e:	b083      	sub	sp, #12
    8350:	4607      	mov	r7, r0
    8352:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
    8354:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    8356:	2104      	movs	r1, #4
    8358:	4638      	mov	r0, r7
    835a:	f007 fefd 	bl	10158 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    835e:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
    8360:	231e      	movs	r3, #30
    8362:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
    8366:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
    836a:	f04f 0901 	mov.w	r9, #1
    836e:	e00c      	b.n	838a <util_aa_le32+0x42>
			transitions++;
    8370:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
    8374:	2b1b      	cmp	r3, #27
			transitions++;
    8376:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
    8378:	d967      	bls.n	844a <util_aa_le32+0x102>
				consecutive_cnt = 1U;
    837a:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
    837e:	2919      	cmp	r1, #25
    8380:	d04e      	beq.n	8420 <util_aa_le32+0xd8>
    8382:	468e      	mov	lr, r1
    8384:	4694      	mov	ip, r2
	while (bit_idx--) {
    8386:	3b01      	subs	r3, #1
    8388:	d31e      	bcc.n	83c8 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
    838a:	fa20 f203 	lsr.w	r2, r0, r3
    838e:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    8392:	4594      	cmp	ip, r2
    8394:	d1ec      	bne.n	8370 <util_aa_le32+0x28>
			consecutive_cnt++;
    8396:	f109 0801 	add.w	r8, r9, #1
    839a:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
    839e:	f1b8 0f06 	cmp.w	r8, #6
    83a2:	d90d      	bls.n	83c0 <util_aa_le32+0x78>
    83a4:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
    83a6:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
    83aa:	b3a2      	cbz	r2, 8416 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
    83ac:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
    83b0:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
    83b4:	4571      	cmp	r1, lr
    83b6:	d1e6      	bne.n	8386 <util_aa_le32+0x3e>
				transitions++;
    83b8:	3101      	adds	r1, #1
    83ba:	b2c9      	uxtb	r1, r1
    83bc:	4662      	mov	r2, ip
    83be:	e7dc      	b.n	837a <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
    83c0:	d149      	bne.n	8456 <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
    83c2:	46c1      	mov	r9, r8
	while (bit_idx--) {
    83c4:	3b01      	subs	r3, #1
    83c6:	d2e0      	bcs.n	838a <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    83c8:	ea80 0305 	eor.w	r3, r0, r5
    83cc:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    83ce:	f10d 0c04 	add.w	ip, sp, #4
    83d2:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    83d6:	2200      	movs	r2, #0
		bite = *octets;
    83d8:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    83dc:	b123      	cbz	r3, 83e8 <util_aa_le32+0xa0>
			bite &= (bite - 1);
    83de:	1e59      	subs	r1, r3, #1
			one_count++;
    83e0:	3201      	adds	r2, #1
		while (bite) {
    83e2:	400b      	ands	r3, r1
			one_count++;
    83e4:	b2d2      	uxtb	r2, r2
		while (bite) {
    83e6:	d1fa      	bne.n	83de <util_aa_le32+0x96>
	while (octets_len--) {
    83e8:	45e6      	cmp	lr, ip
    83ea:	d1f5      	bne.n	83d8 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    83ec:	2a01      	cmp	r2, #1
    83ee:	d909      	bls.n	8404 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    83f0:	b283      	uxth	r3, r0
    83f2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    83f6:	ea4f 4210 	mov.w	r2, r0, lsr #16
    83fa:	d11b      	bne.n	8434 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    83fc:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    83fe:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    8402:	d117      	bne.n	8434 <util_aa_le32+0xec>
	if (!retry) {
    8404:	3e01      	subs	r6, #1
    8406:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    840a:	d1a4      	bne.n	8356 <util_aa_le32+0xe>
		return -EFAULT;
    840c:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    8410:	b003      	add	sp, #12
    8412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
    8416:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
    841a:	f04f 0c01 	mov.w	ip, #1
    841e:	e7c9      	b.n	83b4 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
    8420:	3301      	adds	r3, #1
    8422:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
    8426:	b112      	cbz	r2, 842e <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
    8428:	425b      	negs	r3, r3
    842a:	4018      	ands	r0, r3
    842c:	e7cc      	b.n	83c8 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
    842e:	3b01      	subs	r3, #1
    8430:	4318      	orrs	r0, r3
    8432:	e7c9      	b.n	83c8 <util_aa_le32+0x80>
	dst[1] = val >> 8;
    8434:	f3c0 2107 	ubfx	r1, r0, #8, #8
    8438:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    843a:	7038      	strb	r0, [r7, #0]
	return 0;
    843c:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    843e:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
    8440:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
    8442:	70fb      	strb	r3, [r7, #3]
}
    8444:	b003      	add	sp, #12
    8446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
    844a:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
    844e:	2901      	cmp	r1, #1
    8450:	d9a9      	bls.n	83a6 <util_aa_le32+0x5e>
    8452:	46c1      	mov	r9, r8
    8454:	e793      	b.n	837e <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
    8456:	2b1c      	cmp	r3, #28
    8458:	d904      	bls.n	8464 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
    845a:	2b1b      	cmp	r3, #27
    845c:	d906      	bls.n	846c <util_aa_le32+0x124>
    845e:	4694      	mov	ip, r2
    8460:	46c1      	mov	r9, r8
    8462:	e7af      	b.n	83c4 <util_aa_le32+0x7c>
    8464:	f1be 0f00 	cmp.w	lr, #0
    8468:	d09c      	beq.n	83a4 <util_aa_le32+0x5c>
    846a:	e7f6      	b.n	845a <util_aa_le32+0x112>
    846c:	4671      	mov	r1, lr
    846e:	e7ee      	b.n	844e <util_aa_le32+0x106>
    8470:	8e89bed6 	.word	0x8e89bed6

00008474 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    8474:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    8476:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    8478:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    847a:	2bff      	cmp	r3, #255	; 0xff
    847c:	d014      	beq.n	84a8 <ticker_dequeue+0x34>
		ticker_current = &node[current];
    847e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    8482:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    8484:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    8488:	d028      	beq.n	84dc <ticker_dequeue+0x68>
	total = 0U;
    848a:	f04f 0c00 	mov.w	ip, #0
    848e:	e001      	b.n	8494 <ticker_dequeue+0x20>
		if (current == id) {
    8490:	4299      	cmp	r1, r3
    8492:	d00b      	beq.n	84ac <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    8494:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    8496:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    8498:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    849a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    849c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    84a0:	44a4      	add	ip, r4
		ticker_current = &node[current];
    84a2:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    84a6:	d1f3      	bne.n	8490 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    84a8:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    84aa:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    84ac:	4571      	cmp	r1, lr
    84ae:	d018      	beq.n	84e2 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    84b0:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    84b2:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    84b4:	fa0f fe8e 	sxth.w	lr, lr
    84b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    84bc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    84c0:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    84c4:	7813      	ldrb	r3, [r2, #0]
    84c6:	2bff      	cmp	r3, #255	; 0xff
    84c8:	d006      	beq.n	84d8 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    84ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    84ce:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    84d2:	68ab      	ldr	r3, [r5, #8]
    84d4:	4403      	add	r3, r0
    84d6:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    84d8:	4460      	add	r0, ip
}
    84da:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    84dc:	469e      	mov	lr, r3
	total = 0U;
    84de:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    84e2:	7813      	ldrb	r3, [r2, #0]
    84e4:	7743      	strb	r3, [r0, #29]
    84e6:	e7e4      	b.n	84b2 <ticker_dequeue+0x3e>

000084e8 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    84e8:	eba2 0c01 	sub.w	ip, r2, r1
    84ec:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    84f0:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    84f2:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    84f4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    84f6:	d10a      	bne.n	850e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    84f8:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    84fc:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    84fe:	42a3      	cmp	r3, r4
    8500:	d914      	bls.n	852c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    8502:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    8504:	2100      	movs	r1, #0
}
    8506:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    8508:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    850a:	6141      	str	r1, [r0, #20]
}
    850c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    850e:	1a89      	subs	r1, r1, r2
    8510:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    8514:	428b      	cmp	r3, r1
    8516:	d806      	bhi.n	8526 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    8518:	4421      	add	r1, r4
    851a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    851c:	2300      	movs	r3, #0
}
    851e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    8520:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    8522:	6141      	str	r1, [r0, #20]
}
    8524:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    8526:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    8528:	42a3      	cmp	r3, r4
    852a:	d8ea      	bhi.n	8502 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    852c:	1ae1      	subs	r1, r4, r3
    852e:	e7f5      	b.n	851c <ticks_to_expire_prep+0x34>

00008530 <ticker_job_list_insert>:
{
    8530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8534:	b087      	sub	sp, #28
    8536:	4603      	mov	r3, r0
	count_user = instance->count_user;
    8538:	7a42      	ldrb	r2, [r0, #9]
{
    853a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    853c:	6800      	ldr	r0, [r0, #0]
    853e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    8540:	6858      	ldr	r0, [r3, #4]
    8542:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    8544:	2a00      	cmp	r2, #0
    8546:	f000 80f4 	beq.w	8732 <ticker_job_list_insert+0x202>
    854a:	1e53      	subs	r3, r2, #1
    854c:	b2db      	uxtb	r3, r3
    854e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    8552:	460f      	mov	r7, r1
    8554:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    8556:	9b03      	ldr	r3, [sp, #12]
    8558:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    855a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    855c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    855e:	2fff      	cmp	r7, #255	; 0xff
    8560:	d05e      	beq.n	8620 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    8562:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    8566:	9b02      	ldr	r3, [sp, #8]
    8568:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    856c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    856e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    8572:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    8576:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    8578:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    857a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    857e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    8582:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    8586:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    8588:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    858c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    858e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    8592:	d10f      	bne.n	85b4 <ticker_job_list_insert+0x84>
    8594:	e0c8      	b.n	8728 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    8596:	1a09      	subs	r1, r1, r0
    8598:	d106      	bne.n	85a8 <ticker_job_list_insert+0x78>
    859a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    859e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    85a2:	45e2      	cmp	sl, ip
    85a4:	f200 8086 	bhi.w	86b4 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    85a8:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    85ac:	2bff      	cmp	r3, #255	; 0xff
    85ae:	4691      	mov	r9, r2
    85b0:	d072      	beq.n	8698 <ticker_job_list_insert+0x168>
    85b2:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    85b4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    85b8:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    85bc:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    85be:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    85c2:	4288      	cmp	r0, r1
    85c4:	d9e7      	bls.n	8596 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    85c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    85ca:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    85ce:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    85d2:	d166      	bne.n	86a2 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    85d4:	9b01      	ldr	r3, [sp, #4]
    85d6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    85da:	2aff      	cmp	r2, #255	; 0xff
    85dc:	d008      	beq.n	85f0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    85de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    85e2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    85e6:	f8de 3008 	ldr.w	r3, [lr, #8]
    85ea:	1a5b      	subs	r3, r3, r1
    85ec:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    85f0:	78a3      	ldrb	r3, [r4, #2]
    85f2:	3301      	adds	r3, #1
    85f4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    85f6:	2d00      	cmp	r5, #0
    85f8:	d0b1      	beq.n	855e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    85fa:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    85fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8600:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    8602:	2200      	movs	r2, #0
    8604:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    8606:	b113      	cbz	r3, 860e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8608:	6b29      	ldr	r1, [r5, #48]	; 0x30
    860a:	4610      	mov	r0, r2
    860c:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    860e:	6863      	ldr	r3, [r4, #4]
    8610:	2b00      	cmp	r3, #0
    8612:	d1a4      	bne.n	855e <ticker_job_list_insert+0x2e>
					ticker->op_context =
    8614:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    8618:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    861a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    861e:	d1a0      	bne.n	8562 <ticker_job_list_insert+0x32>
    8620:	9b03      	ldr	r3, [sp, #12]
    8622:	7898      	ldrb	r0, [r3, #2]
    8624:	42b0      	cmp	r0, r6
    8626:	d02f      	beq.n	8688 <ticker_job_list_insert+0x158>
    8628:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    862c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    8630:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
    8634:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8638:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
    863c:	3601      	adds	r6, #1
    863e:	b2f6      	uxtb	r6, r6
					first = 0U;
    8640:	42b1      	cmp	r1, r6
    8642:	bf08      	it	eq
    8644:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8646:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
    8648:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    864c:	d11a      	bne.n	8684 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    864e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    8652:	9902      	ldr	r1, [sp, #8]
    8654:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    8658:	eb01 1403 	add.w	r4, r1, r3, lsl #4
    865c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    8660:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    8662:	7863      	ldrb	r3, [r4, #1]
    8664:	1a5b      	subs	r3, r3, r1
    8666:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    866a:	d025      	beq.n	86b8 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    866c:	f04f 0300 	mov.w	r3, #0
    8670:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
    8674:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8676:	2001      	movs	r0, #1
	user_op->status = status;
    8678:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    867a:	b10b      	cbz	r3, 8680 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    867c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    867e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    8680:	f89b 0002 	ldrb.w	r0, [fp, #2]
    8684:	42b0      	cmp	r0, r6
    8686:	d1d1      	bne.n	862c <ticker_job_list_insert+0xfc>
	while (count_user--) {
    8688:	9a03      	ldr	r2, [sp, #12]
    868a:	9905      	ldr	r1, [sp, #20]
    868c:	4291      	cmp	r1, r2
    868e:	f1a2 0308 	sub.w	r3, r2, #8
    8692:	d04e      	beq.n	8732 <ticker_job_list_insert+0x202>
    8694:	9303      	str	r3, [sp, #12]
    8696:	e75e      	b.n	8556 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    8698:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    869c:	f88b 3000 	strb.w	r3, [fp]
    86a0:	461a      	mov	r2, r3
		node[previous].next = id;
    86a2:	fa0f f989 	sxth.w	r9, r9
    86a6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    86aa:	ea4f 1909 	mov.w	r9, r9, lsl #4
    86ae:	f80e 8009 	strb.w	r8, [lr, r9]
    86b2:	e792      	b.n	85da <ticker_job_list_insert+0xaa>
    86b4:	4601      	mov	r1, r0
    86b6:	e786      	b.n	85c6 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    86b8:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    86ba:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
    86bc:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
    86c0:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
    86c2:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    86c6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    86ca:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
    86cc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    86d0:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    86d4:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    86d8:	d024      	beq.n	8724 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
    86da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86de:	1ad3      	subs	r3, r2, r3
    86e0:	fab3 f383 	clz	r3, r3
    86e4:	095b      	lsrs	r3, r3, #5
    86e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    86ea:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    86ee:	429a      	cmp	r2, r3
    86f0:	bf88      	it	hi
    86f2:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
    86f4:	69ab      	ldr	r3, [r5, #24]
    86f6:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    86f8:	69eb      	ldr	r3, [r5, #28]
    86fa:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    86fc:	6a2b      	ldr	r3, [r5, #32]
    86fe:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    8700:	68ab      	ldr	r3, [r5, #8]
    8702:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    8704:	2300      	movs	r3, #0
	ticker->lazy_periodic =
    8706:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
    8708:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    870a:	686a      	ldr	r2, [r5, #4]
    870c:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    870e:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8710:	f7ff feea 	bl	84e8 <ticks_to_expire_prep>
	ticker->force = 1U;
    8714:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    8718:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    871c:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    8720:	70e3      	strb	r3, [r4, #3]
}
    8722:	e729      	b.n	8578 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    8724:	461a      	mov	r2, r3
    8726:	e7e5      	b.n	86f4 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
    8728:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    872c:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    8730:	e75e      	b.n	85f0 <ticker_job_list_insert+0xc0>
}
    8732:	b007      	add	sp, #28
    8734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008738 <ticker_worker>:
{
    8738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    873c:	7f82      	ldrb	r2, [r0, #30]
{
    873e:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    8740:	2301      	movs	r3, #1
	if (instance->job_guard) {
    8742:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    8744:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    8746:	2a00      	cmp	r2, #0
    8748:	d15b      	bne.n	8802 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    874a:	7f43      	ldrb	r3, [r0, #29]
    874c:	2bff      	cmp	r3, #255	; 0xff
    874e:	4681      	mov	r9, r0
    8750:	d056      	beq.n	8800 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    8752:	f009 f8cf 	bl	118f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8756:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    875a:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    875e:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8762:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8764:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8766:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    876a:	f000 813c 	beq.w	89e6 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    876e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    8772:	42bb      	cmp	r3, r7
    8774:	bf94      	ite	ls
    8776:	2300      	movls	r3, #0
    8778:	2301      	movhi	r3, #1
    877a:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    877c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
    8780:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
    8784:	f000 8145 	beq.w	8a12 <ticker_worker+0x2da>
	ticks_expired = 0U;
    8788:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
    878c:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    8790:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    8794:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
    8798:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    879c:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    879e:	42bb      	cmp	r3, r7
    87a0:	d837      	bhi.n	8812 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    87a2:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
    87a4:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
    87a8:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    87aa:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    87ac:	7863      	ldrb	r3, [r4, #1]
    87ae:	1a5b      	subs	r3, r3, r1
    87b0:	b2db      	uxtb	r3, r3
    87b2:	2b01      	cmp	r3, #1
    87b4:	d12a      	bne.n	880c <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    87b6:	69a6      	ldr	r6, [r4, #24]
    87b8:	2e00      	cmp	r6, #0
    87ba:	d054      	beq.n	8866 <ticker_worker+0x12e>
    87bc:	9b03      	ldr	r3, [sp, #12]
    87be:	2b00      	cmp	r3, #0
    87c0:	d04c      	beq.n	885c <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
    87c2:	8be3      	ldrh	r3, [r4, #30]
    87c4:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    87c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    87c8:	b13b      	cbz	r3, 87da <ticker_worker+0xa2>
    87ca:	681a      	ldr	r2, [r3, #0]
    87cc:	b11a      	cbz	r2, 87d6 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    87ce:	7a1a      	ldrb	r2, [r3, #8]
    87d0:	2a00      	cmp	r2, #0
    87d2:	f000 80ef 	beq.w	89b4 <ticker_worker+0x27c>
				ext_data->reschedule_state =
    87d6:	2200      	movs	r2, #0
    87d8:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    87da:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    87dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    87e0:	3201      	adds	r2, #1
    87e2:	b292      	uxth	r2, r2
    87e4:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    87e6:	b178      	cbz	r0, 8808 <ticker_worker+0xd0>
    87e8:	8ba0      	ldrh	r0, [r4, #28]
    87ea:	4290      	cmp	r0, r2
    87ec:	d20c      	bcs.n	8808 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    87ee:	2b00      	cmp	r3, #0
    87f0:	f000 80fc 	beq.w	89ec <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    87f4:	7a1a      	ldrb	r2, [r3, #8]
    87f6:	2a01      	cmp	r2, #1
    87f8:	d006      	beq.n	8808 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    87fa:	f04f 0c01 	mov.w	ip, #1
    87fe:	e036      	b.n	886e <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    8800:	77c2      	strb	r2, [r0, #31]
}
    8802:	b00f      	add	sp, #60	; 0x3c
    8804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    8808:	3901      	subs	r1, #1
    880a:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    880c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8810:	d1be      	bne.n	8790 <ticker_worker+0x58>
    8812:	f8dd 9010 	ldr.w	r9, [sp, #16]
    8816:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    8818:	f899 300b 	ldrb.w	r3, [r9, #11]
    881c:	f899 200a 	ldrb.w	r2, [r9, #10]
    8820:	429a      	cmp	r2, r3
    8822:	d10a      	bne.n	883a <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    8824:	3201      	adds	r2, #1
    8826:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    8828:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    882a:	bf1c      	itt	ne
    882c:	4613      	movne	r3, r2
    882e:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    8830:	9a06      	ldr	r2, [sp, #24]
    8832:	f889 200b 	strb.w	r2, [r9, #11]
    8836:	bf08      	it	eq
    8838:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    883a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    883e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    8842:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
    8844:	2200      	movs	r2, #0
    8846:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    884a:	464b      	mov	r3, r9
    884c:	2201      	movs	r2, #1
    884e:	2104      	movs	r1, #4
    8850:	2003      	movs	r0, #3
    8852:	46a4      	mov	ip, r4
}
    8854:	b00f      	add	sp, #60	; 0x3c
    8856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    885a:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    885c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    8860:	9307      	str	r3, [sp, #28]
    8862:	3380      	adds	r3, #128	; 0x80
    8864:	d141      	bne.n	88ea <ticker_worker+0x1b2>
		if (ticker->ext_data) {
    8866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8868:	b1f3      	cbz	r3, 88a8 <ticker_worker+0x170>
    886a:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    886e:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    8870:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    8872:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    8874:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
    8876:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
    8878:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    887a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    887c:	2d00      	cmp	r5, #0
    887e:	d0c5      	beq.n	880c <ticker_worker+0xd4>
					   ticks_expired -
    8880:	9b04      	ldr	r3, [sp, #16]
    8882:	6960      	ldr	r0, [r4, #20]
    8884:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    8886:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8888:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    888a:	ebaa 0000 	sub.w	r0, sl, r0
    888e:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    8890:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    8894:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
    8896:	f1bc 0f00 	cmp.w	ip, #0
    889a:	d016      	beq.n	88ca <ticker_worker+0x192>
    889c:	e9cd 3600 	strd	r3, r6, [sp]
    88a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    88a4:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    88a6:	e7b1      	b.n	880c <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    88a8:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    88aa:	3901      	subs	r1, #1
    88ac:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    88ae:	2d00      	cmp	r5, #0
    88b0:	d0ac      	beq.n	880c <ticker_worker+0xd4>
			ticks_drift = 0U;
    88b2:	4619      	mov	r1, r3
					   ticks_expired -
    88b4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    88b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    88b8:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    88ba:	ebaa 0003 	sub.w	r0, sl, r3
    88be:	9b04      	ldr	r3, [sp, #16]
    88c0:	695b      	ldr	r3, [r3, #20]
    88c2:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
    88c4:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
    88c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    88ca:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    88ce:	e9cd 3600 	strd	r3, r6, [sp]
    88d2:	4663      	mov	r3, ip
    88d4:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    88d6:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    88d8:	2b00      	cmp	r3, #0
    88da:	9b03      	ldr	r3, [sp, #12]
    88dc:	bf18      	it	ne
    88de:	2301      	movne	r3, #1
    88e0:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    88e2:	2300      	movs	r3, #0
    88e4:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    88e6:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    88e8:	e790      	b.n	880c <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    88ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    88ee:	d0ba      	beq.n	8866 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    88f0:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    88f2:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    88f4:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    88f6:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    88f8:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    88fa:	bf28      	it	cs
    88fc:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    88fe:	fb02 5005 	mla	r0, r2, r5, r5
    8902:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
    8904:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    8906:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
    890a:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
    890c:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
    8910:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
    8912:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    8914:	46a0      	mov	r8, r4
    8916:	f04f 0c00 	mov.w	ip, #0
    891a:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
    891c:	b21b      	sxth	r3, r3
    891e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8922:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    8926:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    8928:	f8d2 e008 	ldr.w	lr, [r2, #8]
    892c:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    892e:	4566      	cmp	r6, ip
    8930:	d339      	bcc.n	89a6 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
    8932:	6991      	ldr	r1, [r2, #24]
    8934:	b399      	cbz	r1, 899e <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
    8936:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    8938:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    893a:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    893e:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    8942:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    8944:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
    8946:	bf28      	it	cs
    8948:	1a0d      	subcs	r5, r1, r0
					  0U :
    894a:	f1b9 0f00 	cmp.w	r9, #0
    894e:	d03e      	beq.n	89ce <ticker_worker+0x296>
    8950:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    8954:	b3bc      	cbz	r4, 89c6 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    8956:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
    895a:	f8dd 9020 	ldr.w	r9, [sp, #32]
    895e:	45f1      	cmp	r9, lr
    8960:	bf8c      	ite	hi
    8962:	f04f 0e01 	movhi.w	lr, #1
    8966:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    896a:	bf34      	ite	cc
    896c:	f04f 0901 	movcc.w	r9, #1
    8970:	f04f 0900 	movcs.w	r9, #0
			if (curr_has_ticks_slot_window ||
    8974:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    8976:	f892 a003 	ldrb.w	sl, [r2, #3]
    897a:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (curr_has_ticks_slot_window ||
    897e:	d30e      	bcc.n	899e <ticker_worker+0x266>
			    (!lazy_next_periodic_skip &&
    8980:	4592      	cmp	sl, r2
    8982:	d829      	bhi.n	89d8 <ticker_worker+0x2a0>
			     (next_force ||
    8984:	f117 0f80 	cmn.w	r7, #128	; 0x80
    8988:	d026      	beq.n	89d8 <ticker_worker+0x2a0>
			      next_is_critical ||
    898a:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    898c:	1bed      	subs	r5, r5, r7
			      next_is_critical ||
    898e:	4295      	cmp	r5, r2
    8990:	dd02      	ble.n	8998 <ticker_worker+0x260>
			      (next_has_priority && !current_is_older) ||
    8992:	f1be 0f00 	cmp.w	lr, #0
    8996:	d01f      	beq.n	89d8 <ticker_worker+0x2a0>
    8998:	9a07      	ldr	r2, [sp, #28]
    899a:	42ba      	cmp	r2, r7
    899c:	d019      	beq.n	89d2 <ticker_worker+0x29a>
			id_head = ticker_next->next;
    899e:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    89a2:	2bff      	cmp	r3, #255	; 0xff
    89a4:	d1ba      	bne.n	891c <ticker_worker+0x1e4>
    89a6:	4644      	mov	r4, r8
    89a8:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    89ac:	990a      	ldr	r1, [sp, #40]	; 0x28
    89ae:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    89b2:	e758      	b.n	8866 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    89b4:	8ba2      	ldrh	r2, [r4, #28]
    89b6:	9805      	ldr	r0, [sp, #20]
    89b8:	4282      	cmp	r2, r0
    89ba:	f63f af0c 	bhi.w	87d6 <ticker_worker+0x9e>
				ext_data->reschedule_state =
    89be:	f04f 0201 	mov.w	r2, #1
    89c2:	721a      	strb	r2, [r3, #8]
    89c4:	e709      	b.n	87da <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
    89c6:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
    89ca:	46a1      	mov	r9, r4
    89cc:	e7d2      	b.n	8974 <ticker_worker+0x23c>
					  0U :
    89ce:	46ce      	mov	lr, r9
    89d0:	e7c0      	b.n	8954 <ticker_worker+0x21c>
			      (equal_priority && next_is_older &&
    89d2:	f1b9 0f00 	cmp.w	r9, #0
    89d6:	d0e2      	beq.n	899e <ticker_worker+0x266>
    89d8:	4644      	mov	r4, r8
    89da:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    89de:	990a      	ldr	r1, [sp, #40]	; 0x28
    89e0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    89e4:	e6ef      	b.n	87c6 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    89e6:	9b06      	ldr	r3, [sp, #24]
    89e8:	9303      	str	r3, [sp, #12]
    89ea:	e6c7      	b.n	877c <ticker_worker+0x44>
		if (ticker->timeout_func) {
    89ec:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    89ee:	3901      	subs	r1, #1
    89f0:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    89f2:	2d00      	cmp	r5, #0
    89f4:	f43f af0a 	beq.w	880c <ticker_worker+0xd4>
			ticks_drift = 0U;
    89f8:	4619      	mov	r1, r3
					   ticks_expired -
    89fa:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    89fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    89fe:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    8a00:	ebaa 0003 	sub.w	r0, sl, r3
    8a04:	9b04      	ldr	r3, [sp, #16]
    8a06:	695b      	ldr	r3, [r3, #20]
    8a08:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    8a0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    8a0e:	78e3      	ldrb	r3, [r4, #3]
    8a10:	e744      	b.n	889c <ticker_worker+0x164>
	ticks_expired = 0U;
    8a12:	2300      	movs	r3, #0
    8a14:	4619      	mov	r1, r3
    8a16:	e6ff      	b.n	8818 <ticker_worker+0xe0>

00008a18 <ticker_job>:
	if (instance->worker_trigger) {
    8a18:	7fc3      	ldrb	r3, [r0, #31]
    8a1a:	2b00      	cmp	r3, #0
    8a1c:	f040 8439 	bne.w	9292 <ticker_job+0x87a>
{
    8a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    8a24:	7f82      	ldrb	r2, [r0, #30]
{
    8a26:	b08d      	sub	sp, #52	; 0x34
    8a28:	4683      	mov	fp, r0
	if (instance->job_guard) {
    8a2a:	2a00      	cmp	r2, #0
    8a2c:	d17d      	bne.n	8b2a <ticker_job+0x112>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8a2e:	7a83      	ldrb	r3, [r0, #10]
    8a30:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    8a32:	2001      	movs	r0, #1
    8a34:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8a38:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    8a3a:	f8db 0014 	ldr.w	r0, [fp, #20]
    8a3e:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8a40:	f000 844d 	beq.w	92de <ticker_job+0x8c6>
	uint8_t idx = *ticks_elapsed_index + 1;
    8a44:	3301      	adds	r3, #1
    8a46:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    8a48:	2b02      	cmp	r3, #2
		idx = 0U;
    8a4a:	bf08      	it	eq
    8a4c:	4613      	moveq	r3, r2
		ticks_elapsed =
    8a4e:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    8a52:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    8a56:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    8a5a:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    8a5c:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    8a5e:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    8a60:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    8a62:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    8a64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    8a68:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    8a6c:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    8a70:	f8db 3000 	ldr.w	r3, [fp]
    8a74:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    8a76:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a7a:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    8a7c:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    8a7e:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    8a80:	b2db      	uxtb	r3, r3
    8a82:	2a00      	cmp	r2, #0
    8a84:	f000 81de 	beq.w	8e44 <ticker_job+0x42c>
		flag_elapsed = 1U;
    8a88:	2201      	movs	r2, #1
    8a8a:	920b      	str	r2, [sp, #44]	; 0x2c
    8a8c:	9a05      	ldr	r2, [sp, #20]
    8a8e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    8a92:	2300      	movs	r3, #0
    8a94:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    8a96:	23ff      	movs	r3, #255	; 0xff
    8a98:	9301      	str	r3, [sp, #4]
    8a9a:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    8a9c:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    8aa0:	f89a c003 	ldrb.w	ip, [sl, #3]
    8aa4:	f89a 7002 	ldrb.w	r7, [sl, #2]
    8aa8:	4567      	cmp	r7, ip
    8aaa:	d037      	beq.n	8b1c <ticker_job+0x104>
			if (middle == user->count_user_op) {
    8aac:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    8ab0:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    8ab2:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    8ab4:	b2db      	uxtb	r3, r3
				middle = 0U;
    8ab6:	429a      	cmp	r2, r3
    8ab8:	bf08      	it	eq
    8aba:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    8abc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    8ac0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    8ac4:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    8ac8:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    8acc:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    8ace:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    8ad2:	d934      	bls.n	8b3e <ticker_job+0x126>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    8ad4:	2808      	cmp	r0, #8
    8ad6:	d85c      	bhi.n	8b92 <ticker_job+0x17a>
			ticker = &node[user_op->id];
    8ad8:	7861      	ldrb	r1, [r4, #1]
    8ada:	9a00      	ldr	r2, [sp, #0]
    8adc:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    8ae0:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    8ae4:	786a      	ldrb	r2, [r5, #1]
    8ae6:	f895 e002 	ldrb.w	lr, [r5, #2]
    8aea:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    8aee:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8af2:	d126      	bne.n	8b42 <ticker_job+0x12a>
			    ((state == 0U) &&
    8af4:	2806      	cmp	r0, #6
    8af6:	d14c      	bne.n	8b92 <ticker_job+0x17a>
		if (instance->ticker_id_slot_previous == user_op->id) {
    8af8:	f89b 301c 	ldrb.w	r3, [fp, #28]
    8afc:	428b      	cmp	r3, r1
    8afe:	d02a      	beq.n	8b56 <ticker_job+0x13e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8b00:	2000      	movs	r0, #0
    8b02:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    8b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    8b08:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    8b0a:	b10b      	cbz	r3, 8b10 <ticker_job+0xf8>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8b0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8b0e:	4798      	blx	r3
		while (user->middle != user->last) {
    8b10:	f89a c003 	ldrb.w	ip, [sl, #3]
    8b14:	f89a 7002 	ldrb.w	r7, [sl, #2]
    8b18:	4567      	cmp	r7, ip
    8b1a:	d1c7      	bne.n	8aac <ticker_job+0x94>
	while (count_user--) {
    8b1c:	9a05      	ldr	r2, [sp, #20]
    8b1e:	4552      	cmp	r2, sl
    8b20:	f1aa 0308 	sub.w	r3, sl, #8
    8b24:	d06c      	beq.n	8c00 <ticker_job+0x1e8>
    8b26:	469a      	mov	sl, r3
    8b28:	e7b8      	b.n	8a9c <ticker_job+0x84>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    8b2a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    8b2c:	2104      	movs	r1, #4
    8b2e:	4603      	mov	r3, r0
    8b30:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8b32:	2004      	movs	r0, #4
    8b34:	46a4      	mov	ip, r4
}
    8b36:	b00d      	add	sp, #52	; 0x34
    8b38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8b3c:	4760      	bx	ip
    8b3e:	461f      	mov	r7, r3
    8b40:	e7b2      	b.n	8aa8 <ticker_job+0x90>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
    8b42:	2805      	cmp	r0, #5
    8b44:	d03e      	beq.n	8bc4 <ticker_job+0x1ac>
			if ((state == 1U) ||
    8b46:	2a01      	cmp	r2, #1
    8b48:	d032      	beq.n	8bb0 <ticker_job+0x198>
    8b4a:	2806      	cmp	r0, #6
    8b4c:	d148      	bne.n	8be0 <ticker_job+0x1c8>
		if (instance->ticker_id_slot_previous == user_op->id) {
    8b4e:	f89b 301c 	ldrb.w	r3, [fp, #28]
    8b52:	428b      	cmp	r3, r1
    8b54:	d1d4      	bne.n	8b00 <ticker_job+0xe8>
			instance->ticker_id_slot_previous = TICKER_NULL;
    8b56:	23ff      	movs	r3, #255	; 0xff
    8b58:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    8b5c:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    8b60:	2b06      	cmp	r3, #6
    8b62:	f000 814d 	beq.w	8e00 <ticker_job+0x3e8>
    8b66:	2b08      	cmp	r3, #8
    8b68:	f000 814a 	beq.w	8e00 <ticker_job+0x3e8>
				ticks_at_yield = cntr_cnt_get();
    8b6c:	f008 fec2 	bl	118f4 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    8b70:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    8b74:	1a83      	subs	r3, r0, r2
    8b76:	021d      	lsls	r5, r3, #8
    8b78:	f100 8149 	bmi.w	8e0e <ticker_job+0x3f6>
				ticks_used = ticks_elapsed +
    8b7c:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8b7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    8b82:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    8b84:	f8db 2018 	ldr.w	r2, [fp, #24]
    8b88:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    8b8a:	bf88      	it	hi
    8b8c:	f8cb 3018 	strhi.w	r3, [fp, #24]
    8b90:	e7b6      	b.n	8b00 <ticker_job+0xe8>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8b92:	2200      	movs	r2, #0
    8b94:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    8b98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    8b9a:	2001      	movs	r0, #1
    8b9c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    8b9e:	2a00      	cmp	r2, #0
    8ba0:	d0cd      	beq.n	8b3e <ticker_job+0x126>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8ba2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8ba4:	4790      	blx	r2
		while (user->middle != user->last) {
    8ba6:	f89a c003 	ldrb.w	ip, [sl, #3]
    8baa:	f89a 7002 	ldrb.w	r7, [sl, #2]
    8bae:	e77b      	b.n	8aa8 <ticker_job+0x90>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    8bb0:	2806      	cmp	r0, #6
    8bb2:	d0a1      	beq.n	8af8 <ticker_job+0xe0>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    8bb4:	4658      	mov	r0, fp
    8bb6:	f7ff fc5d 	bl	8474 <ticker_dequeue>
			ticker->req = ticker->ack;
    8bba:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    8bbc:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    8bbe:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    8bc0:	7861      	ldrb	r1, [r4, #1]
    8bc2:	e799      	b.n	8af8 <ticker_job+0xe0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    8bc4:	6860      	ldr	r0, [r4, #4]
    8bc6:	b948      	cbnz	r0, 8bdc <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    8bc8:	68a0      	ldr	r0, [r4, #8]
    8bca:	b938      	cbnz	r0, 8bdc <ticker_job+0x1c4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    8bcc:	68e0      	ldr	r0, [r4, #12]
    8bce:	b928      	cbnz	r0, 8bdc <ticker_job+0x1c4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    8bd0:	6920      	ldr	r0, [r4, #16]
    8bd2:	b918      	cbnz	r0, 8bdc <ticker_job+0x1c4>
			     (user_op->params.update.lazy == 0U) &&
    8bd4:	6960      	ldr	r0, [r4, #20]
    8bd6:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    8bda:	d0da      	beq.n	8b92 <ticker_job+0x17a>
			if ((state == 1U) ||
    8bdc:	2a01      	cmp	r2, #1
    8bde:	d076      	beq.n	8cce <ticker_job+0x2b6>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    8be0:	2104      	movs	r1, #4
    8be2:	465b      	mov	r3, fp
    8be4:	2201      	movs	r2, #1
    8be6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    8bea:	4608      	mov	r0, r1
    8bec:	47a0      	blx	r4
	while (count_user--) {
    8bee:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    8bf0:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    8bf4:	2301      	movs	r3, #1
	while (count_user--) {
    8bf6:	4552      	cmp	r2, sl
				pending = 1U;
    8bf8:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    8bfa:	f1aa 0308 	sub.w	r3, sl, #8
    8bfe:	d192      	bne.n	8b26 <ticker_job+0x10e>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8c00:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    8c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8c06:	1a9b      	subs	r3, r3, r2
    8c08:	bf18      	it	ne
    8c0a:	2301      	movne	r3, #1
    8c0c:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    8c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c10:	2b00      	cmp	r3, #0
    8c12:	f040 811b 	bne.w	8e4c <ticker_job+0x434>
		ticker_job_list_insert(instance, insert_head);
    8c16:	9901      	ldr	r1, [sp, #4]
    8c18:	4658      	mov	r0, fp
    8c1a:	f7ff fc89 	bl	8530 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8c1e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    8c22:	9300      	str	r3, [sp, #0]
    8c24:	9b00      	ldr	r3, [sp, #0]
    8c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8c28:	4293      	cmp	r3, r2
    8c2a:	f000 831c 	beq.w	9266 <ticker_job+0x84e>
	if (!pending) {
    8c2e:	9b08      	ldr	r3, [sp, #32]
    8c30:	2b00      	cmp	r3, #0
    8c32:	f000 8296 	beq.w	9162 <ticker_job+0x74a>
	if (instance->ticker_id_head == TICKER_NULL) {
    8c36:	f89b 301d 	ldrb.w	r3, [fp, #29]
    8c3a:	9300      	str	r3, [sp, #0]
    8c3c:	9b00      	ldr	r3, [sp, #0]
    8c3e:	2bff      	cmp	r3, #255	; 0xff
    8c40:	f000 8378 	beq.w	9334 <ticker_job+0x91c>
	if (ticker_id_old_head == TICKER_NULL) {
    8c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c46:	2bff      	cmp	r3, #255	; 0xff
    8c48:	f000 837f 	beq.w	934a <ticker_job+0x932>
	ticker = &instance->nodes[instance->ticker_id_head];
    8c4c:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    8c4e:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    8c52:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8e30 <ticker_job+0x418>
    8c56:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8e34 <ticker_job+0x41c>
    8c5a:	4f77      	ldr	r7, [pc, #476]	; (8e38 <ticker_job+0x420>)
	ticker = &instance->nodes[instance->ticker_id_head];
    8c5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    8c60:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    8c64:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    8c66:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    8c68:	f008 fe44 	bl	118f4 <cntr_cnt_get>
		cc = instance->ticks_current;
    8c6c:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8c70:	1b03      	subs	r3, r0, r4
    8c72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    8c76:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    8c78:	42b3      	cmp	r3, r6
    8c7a:	bf2c      	ite	cs
    8c7c:	18e4      	addcs	r4, r4, r3
    8c7e:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    8c80:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    8c84:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    8c88:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    8c8a:	4620      	mov	r0, r4
    8c8c:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    8c8e:	f008 fe31 	bl	118f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8c92:	eba0 030a 	sub.w	r3, r0, sl
    8c96:	eba4 040a 	sub.w	r4, r4, sl
    8c9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    8c9e:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8ca0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    8ca4:	42a3      	cmp	r3, r4
		i--;
    8ca6:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
    8caa:	f240 82e3 	bls.w	9274 <ticker_job+0x85c>
		LL_ASSERT(i);
    8cae:	2d00      	cmp	r5, #0
    8cb0:	d1da      	bne.n	8c68 <ticker_job+0x250>
    8cb2:	f640 135e 	movw	r3, #2398	; 0x95e
    8cb6:	464a      	mov	r2, r9
    8cb8:	4641      	mov	r1, r8
    8cba:	4638      	mov	r0, r7
    8cbc:	f00d fb19 	bl	162f2 <assert_print>
    8cc0:	4040      	eors	r0, r0
    8cc2:	f380 8811 	msr	BASEPRI, r0
    8cc6:	f04f 0003 	mov.w	r0, #3
    8cca:	df02      	svc	2
    8ccc:	e7cc      	b.n	8c68 <ticker_job+0x250>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8cce:	4658      	mov	r0, fp
    8cd0:	f7ff fbd0 	bl	8474 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    8cd4:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8cd8:	60a8      	str	r0, [r5, #8]
    8cda:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    8cdc:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    8cde:	f008 fe09 	bl	118f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8ce2:	9b02      	ldr	r3, [sp, #8]
    8ce4:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8ce6:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8ce8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8cec:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    8cee:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    8cf0:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    8cf2:	f240 8095 	bls.w	8e20 <ticker_job+0x408>
	ticker->ticks_to_expire_minus +=
    8cf6:	696b      	ldr	r3, [r5, #20]
    8cf8:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    8cfa:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    8cfc:	f8d5 c004 	ldr.w	ip, [r5, #4]
    8d00:	f1bc 0f00 	cmp.w	ip, #0
    8d04:	d051      	beq.n	8daa <ticker_job+0x392>
	    (user_op->params.update.lazy != 0U)) {
    8d06:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d04e      	beq.n	8daa <ticker_job+0x392>
		user_op->params.update.lazy--;
    8d0c:	3b01      	subs	r3, #1
    8d0e:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8d10:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d12:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    8d14:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8d16:	d223      	bcs.n	8d60 <ticker_job+0x348>
    8d18:	f10c 0e01 	add.w	lr, ip, #1
    8d1c:	f8cd 8018 	str.w	r8, [sp, #24]
    8d20:	940a      	str	r4, [sp, #40]	; 0x28
    8d22:	e018      	b.n	8d56 <ticker_job+0x33e>
	if ((ticker->remainder_current >= BIT(31)) ||
    8d24:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8d26:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8e3c <ticker_job+0x424>
    8d2a:	4c45      	ldr	r4, [pc, #276]	; (8e40 <ticker_job+0x428>)
    8d2c:	4488      	add	r8, r1
    8d2e:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    8d30:	bf84      	itt	hi
    8d32:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    8d36:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    8d3a:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    8d3c:	6a2c      	ldr	r4, [r5, #32]
    8d3e:	bf94      	ite	ls
    8d40:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    8d42:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    8d46:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    8d48:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    8d4a:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    8d4c:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8d4e:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    8d50:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    8d52:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8d54:	d201      	bcs.n	8d5a <ticker_job+0x342>
    8d56:	429f      	cmp	r7, r3
    8d58:	d3e4      	bcc.n	8d24 <ticker_job+0x30c>
    8d5a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    8d5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d60:	429f      	cmp	r7, r3
    8d62:	d921      	bls.n	8da8 <ticker_job+0x390>
			ticks_to_expire += ticker->ticks_periodic +
    8d64:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    8d68:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    8d6c:	9006      	str	r0, [sp, #24]
    8d6e:	940a      	str	r4, [sp, #40]	; 0x28
    8d70:	e005      	b.n	8d7e <ticker_job+0x366>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d72:	3301      	adds	r3, #1
    8d74:	b29b      	uxth	r3, r3
    8d76:	4660      	mov	r0, ip
    8d78:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    8d7a:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d7c:	d011      	beq.n	8da2 <ticker_job+0x38a>
	if ((ticker->remainder_current < BIT(31)) &&
    8d7e:	482f      	ldr	r0, [pc, #188]	; (8e3c <ticker_job+0x424>)
    8d80:	4c2f      	ldr	r4, [pc, #188]	; (8e40 <ticker_job+0x428>)
	ticker->remainder_current += ticker->remainder_periodic;
    8d82:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    8d84:	1808      	adds	r0, r1, r0
    8d86:	42a0      	cmp	r0, r4
    8d88:	d8f3      	bhi.n	8d72 <ticker_job+0x35a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d8a:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    8d8c:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    8d8e:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d92:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    8d94:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8d98:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    8d9a:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    8d9e:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8da0:	d1ed      	bne.n	8d7e <ticker_job+0x366>
    8da2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8da4:	6269      	str	r1, [r5, #36]	; 0x24
    8da6:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    8da8:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    8daa:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    8dac:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    8dae:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    8db0:	440a      	add	r2, r1
    8db2:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    8db4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    8db6:	4403      	add	r3, r0
    8db8:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    8dba:	b11a      	cbz	r2, 8dc4 <ticker_job+0x3ac>
    8dbc:	6813      	ldr	r3, [r2, #0]
    8dbe:	b10b      	cbz	r3, 8dc4 <ticker_job+0x3ac>
			user_op->params.update.ticks_drift_plus -
    8dc0:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    8dc2:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    8dc4:	464a      	mov	r2, r9
    8dc6:	9902      	ldr	r1, [sp, #8]
    8dc8:	4628      	mov	r0, r5
    8dca:	f7ff fb8d 	bl	84e8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    8dce:	68e2      	ldr	r2, [r4, #12]
    8dd0:	69ab      	ldr	r3, [r5, #24]
    8dd2:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    8dd4:	6922      	ldr	r2, [r4, #16]
    8dd6:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    8dd8:	bf8c      	ite	hi
    8dda:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    8ddc:	2300      	movls	r3, #0
    8dde:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    8de0:	7da3      	ldrb	r3, [r4, #22]
    8de2:	b103      	cbz	r3, 8de6 <ticker_job+0x3ce>
		ticker->force = user_op->params.update.force;
    8de4:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    8de6:	7de3      	ldrb	r3, [r4, #23]
    8de8:	b113      	cbz	r3, 8df0 <ticker_job+0x3d8>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    8dea:	3b01      	subs	r3, #1
    8dec:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    8df0:	9b01      	ldr	r3, [sp, #4]
    8df2:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    8df4:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    8df6:	7862      	ldrb	r2, [r4, #1]
    8df8:	9201      	str	r2, [sp, #4]
		ticker->req++;
    8dfa:	3301      	adds	r3, #1
    8dfc:	706b      	strb	r3, [r5, #1]
    8dfe:	e67f      	b.n	8b00 <ticker_job+0xe8>
				ticks_at_yield =
    8e00:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    8e02:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    8e06:	1a83      	subs	r3, r0, r2
    8e08:	021d      	lsls	r5, r3, #8
    8e0a:	f57f aeb7 	bpl.w	8b7c <ticker_job+0x164>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8e0e:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    8e10:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8e12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    8e16:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    8e18:	bf34      	ite	cc
    8e1a:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    8e1c:	2300      	movcs	r3, #0
    8e1e:	e6b1      	b.n	8b84 <ticker_job+0x16c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    8e20:	696b      	ldr	r3, [r5, #20]
    8e22:	1bda      	subs	r2, r3, r7
    8e24:	1853      	adds	r3, r2, r1
    8e26:	9304      	str	r3, [sp, #16]
    8e28:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    8e2a:	2200      	movs	r2, #0
    8e2c:	e766      	b.n	8cfc <ticker_job+0x2e4>
    8e2e:	bf00      	nop
    8e30:	0001a540 	.word	0x0001a540
    8e34:	0001a5ec 	.word	0x0001a5ec
    8e38:	0001a580 	.word	0x0001a580
    8e3c:	ff172b5a 	.word	0xff172b5a
    8e40:	7f172b59 	.word	0x7f172b59
	pending = 0U;
    8e44:	9b06      	ldr	r3, [sp, #24]
    8e46:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    8e48:	23ff      	movs	r3, #255	; 0xff
    8e4a:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    8e4c:	f008 fd52 	bl	118f4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8e50:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    8e52:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8e56:	1ac3      	subs	r3, r0, r3
    8e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8e5c:	9304      	str	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    8e5e:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    8e60:	f8db 3000 	ldr.w	r3, [fp]
    8e64:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    8e66:	d04f      	beq.n	8f08 <ticker_job+0x4f0>
	if ((ticker->remainder_current < BIT(31)) &&
    8e68:	f8df 8290 	ldr.w	r8, [pc, #656]	; 90fc <ticker_job+0x6e4>
    8e6c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 9100 <ticker_job+0x6e8>
	while (instance->ticker_id_head != TICKER_NULL) {
    8e70:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    8e72:	f04f 0a00 	mov.w	sl, #0
		ticker = &node[id_expired];
    8e76:	9a00      	ldr	r2, [sp, #0]
    8e78:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8e7c:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    8e80:	011b      	lsls	r3, r3, #4
    8e82:	9302      	str	r3, [sp, #8]
		ticks_to_expire = ticker->ticks_to_expire;
    8e84:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    8e86:	429f      	cmp	r7, r3
    8e88:	f0c0 8246 	bcc.w	9318 <ticker_job+0x900>
		ticks_latency -= ticks_to_expire;
    8e8c:	9a04      	ldr	r2, [sp, #16]
		skip_collision = (ticker->lazy_current != 0U);
    8e8e:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
    8e92:	f8dd c008 	ldr.w	ip, [sp, #8]
		ticks_latency -= ticks_to_expire;
    8e96:	1ad2      	subs	r2, r2, r3
    8e98:	9204      	str	r2, [sp, #16]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    8e9a:	f8db 2018 	ldr.w	r2, [fp, #24]
    8e9e:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    8ea0:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
    8ea4:	449a      	add	sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    8ea6:	bf25      	ittet	cs
    8ea8:	f04f 33ff 	movcs.w	r3, #4294967295
    8eac:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    8eb0:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    8eb2:	2300      	movcs	r3, #0
    8eb4:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    8eb8:	78a2      	ldrb	r2, [r4, #2]
    8eba:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    8ebc:	69a0      	ldr	r0, [r4, #24]
		if ((ticker->ticks_periodic != 0U) ||
    8ebe:	6865      	ldr	r5, [r4, #4]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    8ec0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
    8ec2:	1a9b      	subs	r3, r3, r2
    8ec4:	b2db      	uxtb	r3, r3
    8ec6:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
    8ec8:	9b00      	ldr	r3, [sp, #0]
    8eca:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    8ece:	b118      	cbz	r0, 8ed8 <ticker_job+0x4c0>
    8ed0:	9b05      	ldr	r3, [sp, #20]
    8ed2:	2b02      	cmp	r3, #2
    8ed4:	f000 8135 	beq.w	9142 <ticker_job+0x72a>
		ticker->ticks_to_expire = 0U;
    8ed8:	2300      	movs	r3, #0
    8eda:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    8edc:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    8ee0:	2d00      	cmp	r5, #0
    8ee2:	f040 80da 	bne.w	909a <ticker_job+0x682>
    8ee6:	b119      	cbz	r1, 8ef0 <ticker_job+0x4d8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    8ee8:	7a09      	ldrb	r1, [r1, #8]
    8eea:	2901      	cmp	r1, #1
    8eec:	f000 8111 	beq.w	9112 <ticker_job+0x6fa>
			if (state && ((state == 1U) || skip_collision) &&
    8ef0:	9b05      	ldr	r3, [sp, #20]
    8ef2:	b123      	cbz	r3, 8efe <ticker_job+0x4e6>
    8ef4:	2b01      	cmp	r3, #1
    8ef6:	d045      	beq.n	8f84 <ticker_job+0x56c>
    8ef8:	f1be 0f00 	cmp.w	lr, #0
    8efc:	d142      	bne.n	8f84 <ticker_job+0x56c>
			ticker->req = ticker->ack;
    8efe:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    8f00:	f89b 601d 	ldrb.w	r6, [fp, #29]
    8f04:	2eff      	cmp	r6, #255	; 0xff
    8f06:	d1b6      	bne.n	8e76 <ticker_job+0x45e>
			flag_compare_update = 1U;
    8f08:	9b06      	ldr	r3, [sp, #24]
    8f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    8f0c:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    8f0e:	4296      	cmp	r6, r2
    8f10:	bf18      	it	ne
    8f12:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    8f14:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    8f16:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    8f18:	f7ff fb0a 	bl	8530 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    8f1c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    8f20:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
    8f24:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    8f28:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    8f2a:	9b00      	ldr	r3, [sp, #0]
    8f2c:	2bff      	cmp	r3, #255	; 0xff
    8f2e:	d00f      	beq.n	8f50 <ticker_job+0x538>
    8f30:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
    8f32:	b233      	sxth	r3, r6
    8f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f38:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
    8f3c:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    8f3e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    8f40:	b117      	cbz	r7, 8f48 <ticker_job+0x530>
    8f42:	7a39      	ldrb	r1, [r7, #8]
    8f44:	2901      	cmp	r1, #1
    8f46:	d025      	beq.n	8f94 <ticker_job+0x57c>
			ticker_id_head = ticker->next;
    8f48:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
    8f4c:	2eff      	cmp	r6, #255	; 0xff
    8f4e:	d1f0      	bne.n	8f32 <ticker_job+0x51a>
	return rescheduled;
    8f50:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    8f54:	2a00      	cmp	r2, #0
    8f56:	f43f ae65 	beq.w	8c24 <ticker_job+0x20c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8f5a:	9b00      	ldr	r3, [sp, #0]
    8f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    8f5e:	428b      	cmp	r3, r1
    8f60:	f47f ae65 	bne.w	8c2e <ticker_job+0x216>
	if (!pending) {
    8f64:	9b08      	ldr	r3, [sp, #32]
    8f66:	2b00      	cmp	r3, #0
    8f68:	f47f ae68 	bne.w	8c3c <ticker_job+0x224>
	users = &instance->users[0];
    8f6c:	f8db 3004 	ldr.w	r3, [fp, #4]
    8f70:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
    8f72:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
    8f76:	1e5f      	subs	r7, r3, #1
    8f78:	b2ff      	uxtb	r7, r7
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	f43f ae5e 	beq.w	8c3c <ticker_job+0x224>
			flag_compare_update = 1U;
    8f80:	9206      	str	r2, [sp, #24]
    8f82:	e0fa      	b.n	917a <ticker_job+0x762>
			    ticker->fp_op_func) {
    8f84:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    8f86:	2b00      	cmp	r3, #0
    8f88:	d0b9      	beq.n	8efe <ticker_job+0x4e6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    8f8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8f8c:	2001      	movs	r0, #1
    8f8e:	4798      	blx	r3
			ticker->req = ticker->ack;
    8f90:	78a2      	ldrb	r2, [r4, #2]
    8f92:	e7b4      	b.n	8efe <ticker_job+0x4e6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    8f94:	9b01      	ldr	r3, [sp, #4]
    8f96:	7f1b      	ldrb	r3, [r3, #28]
    8f98:	2bff      	cmp	r3, #255	; 0xff
    8f9a:	d04b      	beq.n	9034 <ticker_job+0x61c>
			instance->ticks_slot_previous > ticks_elapsed) {
    8f9c:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    8f9e:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    8fa0:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    8fa2:	4293      	cmp	r3, r2
    8fa4:	d946      	bls.n	9034 <ticker_job+0x61c>
			window_start_ticks = instance->ticks_slot_previous -
    8fa6:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8faa:	687a      	ldr	r2, [r7, #4]
    8fac:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    8fae:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8fb2:	1ad3      	subs	r3, r2, r3
    8fb4:	9302      	str	r3, [sp, #8]
    8fb6:	683b      	ldr	r3, [r7, #0]
    8fb8:	429a      	cmp	r2, r3
    8fba:	f080 80bd 	bcs.w	9138 <ticker_job+0x720>
		while (ticker_id_iter != TICKER_NULL &&
    8fbe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    8fc2:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
    8fc6:	f000 80b7 	beq.w	9138 <ticker_job+0x720>
		       ticks_start_offset + ticker->ticks_slot <=
    8fca:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
    8fce:	45f0      	cmp	r8, lr
    8fd0:	f04f 0300 	mov.w	r3, #0
    8fd4:	d331      	bcc.n	903a <ticker_job+0x622>
    8fd6:	46f1      	mov	r9, lr
    8fd8:	465a      	mov	r2, fp
    8fda:	461c      	mov	r4, r3
    8fdc:	e01c      	b.n	9018 <ticker_job+0x600>
			if (node->ticks_to_expire >
    8fde:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
    8fe0:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    8fe2:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    8fe4:	4423      	add	r3, r4
			if (node->ticks_to_expire >
    8fe6:	d909      	bls.n	8ffc <ticker_job+0x5e4>
				window_end_ticks =
    8fe8:	4543      	cmp	r3, r8
    8fea:	bf28      	it	cs
    8fec:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
    8fee:	4599      	cmp	r9, r3
    8ff0:	d204      	bcs.n	8ffc <ticker_job+0x5e4>
			if (ticks_to_expire != 0U &&
    8ff2:	ebb3 030e 	subs.w	r3, r3, lr
    8ff6:	d001      	beq.n	8ffc <ticker_job+0x5e4>
    8ff8:	459c      	cmp	ip, r3
    8ffa:	d91e      	bls.n	903a <ticker_job+0x622>
			window_start_ticks  = node->ticks_to_expire +
    8ffc:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
    8ffe:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
    9002:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
    9006:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
    9008:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
    900c:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    900e:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
    9012:	d012      	beq.n	903a <ticker_job+0x622>
    9014:	45c8      	cmp	r8, r9
    9016:	d310      	bcc.n	903a <ticker_job+0x622>
			node = &nodes[ticker_id_iter];
    9018:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    901c:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
    9020:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    9022:	6a81      	ldr	r1, [r0, #40]	; 0x28
    9024:	2900      	cmp	r1, #0
    9026:	d0da      	beq.n	8fde <ticker_job+0x5c6>
    9028:	7a09      	ldrb	r1, [r1, #8]
    902a:	2901      	cmp	r1, #1
    902c:	d1d7      	bne.n	8fde <ticker_job+0x5c6>
				ticker_id_iter = node->next;
    902e:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
    9032:	e7eb      	b.n	900c <ticker_job+0x5f4>
		window_start_ticks = 0U;
    9034:	f04f 0c00 	mov.w	ip, #0
    9038:	e7b7      	b.n	8faa <ticker_job+0x592>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    903a:	9a02      	ldr	r2, [sp, #8]
    903c:	441a      	add	r2, r3
    903e:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    9040:	465c      	mov	r4, fp
    9042:	60ab      	str	r3, [r5, #8]
    9044:	f04f 0eff 	mov.w	lr, #255	; 0xff
    9048:	e000      	b.n	904c <ticker_job+0x634>
    904a:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
    904c:	b221      	sxth	r1, r4
    904e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    9052:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
    9056:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    9058:	f8dc 0008 	ldr.w	r0, [ip, #8]
    905c:	4298      	cmp	r0, r3
    905e:	f080 8151 	bcs.w	9304 <ticker_job+0x8ec>
				ticker->ticks_to_expire -=
    9062:	1a1b      	subs	r3, r3, r0
    9064:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
    9066:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
    906a:	2aff      	cmp	r2, #255	; 0xff
    906c:	46a6      	mov	lr, r4
    906e:	d1ec      	bne.n	904a <ticker_job+0x632>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    9070:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    9072:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    9076:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    907a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    907c:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    9080:	f81a 3001 	ldrb.w	r3, [sl, r1]
    9084:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    9086:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
    908a:	8beb      	ldrh	r3, [r5, #30]
    908c:	3b01      	subs	r3, #1
    908e:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    9090:	f04f 0302 	mov.w	r3, #2
    9094:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    9096:	2201      	movs	r2, #1
    9098:	e747      	b.n	8f2a <ticker_job+0x512>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    909a:	b111      	cbz	r1, 90a2 <ticker_job+0x68a>
    909c:	7a0b      	ldrb	r3, [r1, #8]
    909e:	2b01      	cmp	r3, #1
    90a0:	d037      	beq.n	9112 <ticker_job+0x6fa>
				if (!ticker->lazy_current) {
    90a2:	f1be 0f00 	cmp.w	lr, #0
    90a6:	d159      	bne.n	915c <ticker_job+0x744>
					lazy_periodic = ticker->lazy_periodic;
    90a8:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    90ac:	4672      	mov	r2, lr
				while (count--) {
    90ae:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    90b0:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    90b4:	2100      	movs	r1, #0
    90b6:	9005      	str	r0, [sp, #20]
    90b8:	e004      	b.n	90c4 <ticker_job+0x6ac>
    90ba:	4628      	mov	r0, r5
				while (count--) {
    90bc:	3a01      	subs	r2, #1
					ticks_to_expire +=
    90be:	4401      	add	r1, r0
				while (count--) {
    90c0:	1c50      	adds	r0, r2, #1
    90c2:	d00f      	beq.n	90e4 <ticker_job+0x6cc>
	ticker->remainder_current += ticker->remainder_periodic;
    90c4:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    90c6:	eb03 0008 	add.w	r0, r3, r8
    90ca:	4548      	cmp	r0, r9
    90cc:	d8f5      	bhi.n	90ba <ticker_job+0x6a2>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    90ce:	9805      	ldr	r0, [sp, #20]
    90d0:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    90d4:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    90d6:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    90da:	4401      	add	r1, r0
				while (count--) {
    90dc:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    90de:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    90e2:	d1ef      	bne.n	90c4 <ticker_job+0x6ac>
				} else if (!ticker->must_expire) {
    90e4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    90e8:	6263      	str	r3, [r4, #36]	; 0x24
    90ea:	2a00      	cmp	r2, #0
    90ec:	f000 80d2 	beq.w	9294 <ticker_job+0x87c>
				lazy = 0U;
    90f0:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    90f2:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
    90f4:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    90f6:	83e2      	strh	r2, [r4, #30]
    90f8:	e00d      	b.n	9116 <ticker_job+0x6fe>
    90fa:	bf00      	nop
    90fc:	ff172b5a 	.word	0xff172b5a
    9100:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
    9104:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9108:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    910c:	2d00      	cmp	r5, #0
    910e:	f43f aeeb 	beq.w	8ee8 <ticker_job+0x4d0>
				ticker->req = ticker->ack;
    9112:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    9114:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9116:	9b07      	ldr	r3, [sp, #28]
    9118:	f8db 1014 	ldr.w	r1, [fp, #20]
    911c:	eb03 020a 	add.w	r2, r3, sl
    9120:	4620      	mov	r0, r4
    9122:	f7ff f9e1 	bl	84e8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    9126:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
    912a:	9a00      	ldr	r2, [sp, #0]
			ticker->req++;
    912c:	9601      	str	r6, [sp, #4]
			ticker->next = *insert_head;
    912e:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    9130:	7863      	ldrb	r3, [r4, #1]
    9132:	3301      	adds	r3, #1
    9134:	7063      	strb	r3, [r4, #1]
    9136:	e6e3      	b.n	8f00 <ticker_job+0x4e8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    9138:	9b02      	ldr	r3, [sp, #8]
    913a:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    913c:	2300      	movs	r3, #0
    913e:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    9140:	e7a3      	b.n	908a <ticker_job+0x672>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    9142:	f1be 0f00 	cmp.w	lr, #0
    9146:	f47f aec7 	bne.w	8ed8 <ticker_job+0x4c0>
    914a:	b111      	cbz	r1, 9152 <ticker_job+0x73a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    914c:	7a0b      	ldrb	r3, [r1, #8]
    914e:	2b01      	cmp	r3, #1
    9150:	d0d8      	beq.n	9104 <ticker_job+0x6ec>
			instance->ticks_slot_previous = ticker->ticks_slot;
    9152:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    9156:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    915a:	e6bd      	b.n	8ed8 <ticker_job+0x4c0>
					ticker->req = ticker->ack;
    915c:	7062      	strb	r2, [r4, #1]
    915e:	2200      	movs	r2, #0
    9160:	e7a5      	b.n	90ae <ticker_job+0x696>
	count_user = instance->count_user;
    9162:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    9166:	f8db 2004 	ldr.w	r2, [fp, #4]
    916a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    916c:	1e5f      	subs	r7, r3, #1
    916e:	b2ff      	uxtb	r7, r7
    9170:	2b00      	cmp	r3, #0
    9172:	f43f ad60 	beq.w	8c36 <ticker_job+0x21e>
		flag_compare_update = 1U;
    9176:	2301      	movs	r3, #1
    9178:	9306      	str	r3, [sp, #24]
    917a:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
    917c:	2500      	movs	r5, #0
    917e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
    9182:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
    9186:	787b      	ldrb	r3, [r7, #1]
    9188:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    918a:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
    918c:	429a      	cmp	r2, r3
    918e:	d10c      	bne.n	91aa <ticker_job+0x792>
    9190:	e05b      	b.n	924a <ticker_job+0x832>
	switch (uop->op) {
    9192:	2b01      	cmp	r3, #1
    9194:	d053      	beq.n	923e <ticker_job+0x826>
			first = user->first + 1;
    9196:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    9198:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    919a:	3301      	adds	r3, #1
    919c:	b2db      	uxtb	r3, r3
				first = 0U;
    919e:	4299      	cmp	r1, r3
    91a0:	bf08      	it	eq
    91a2:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    91a4:	429a      	cmp	r2, r3
			user->first = first;
    91a6:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    91a8:	d04f      	beq.n	924a <ticker_job+0x832>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    91aa:	b21b      	sxth	r3, r3
    91ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    91b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    91b4:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
    91b8:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
    91bc:	2b02      	cmp	r3, #2
    91be:	d017      	beq.n	91f0 <ticker_job+0x7d8>
    91c0:	2b03      	cmp	r3, #3
    91c2:	d1e6      	bne.n	9192 <ticker_job+0x77a>
		if (uop->id < instance->count_node) {
    91c4:	7843      	ldrb	r3, [r0, #1]
    91c6:	f89b 2008 	ldrb.w	r2, [fp, #8]
    91ca:	429a      	cmp	r2, r3
    91cc:	d93a      	bls.n	9244 <ticker_job+0x82c>
			node[uop->id].priority =
    91ce:	f8db 2000 	ldr.w	r2, [fp]
    91d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91d6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    91da:	7902      	ldrb	r2, [r0, #4]
    91dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    91e0:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    91e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    91e4:	b113      	cbz	r3, 91ec <ticker_job+0x7d4>
		fp_op_func(uop->status, uop->op_context);
    91e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    91e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    91ea:	4798      	blx	r3
    91ec:	78fa      	ldrb	r2, [r7, #3]
    91ee:	e7d2      	b.n	9196 <ticker_job+0x77e>
		ticker_by_next_slot_get(instance,
    91f0:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    91f4:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
    91f8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
    91fc:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
    9200:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    9204:	2aff      	cmp	r2, #255	; 0xff
    9206:	d003      	beq.n	9210 <ticker_job+0x7f8>
    9208:	f8d1 8000 	ldr.w	r8, [r1]
    920c:	4598      	cmp	r8, r3
    920e:	d023      	beq.n	9258 <ticker_job+0x840>
		_ticker_id_head = instance->ticker_id_head;
    9210:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    9214:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
    9216:	f04f 0800 	mov.w	r8, #0
    921a:	e00a      	b.n	9232 <ticker_job+0x81a>
		ticker = &node[_ticker_id_head];
    921c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    9220:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    9224:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
    9226:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
    922a:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    922c:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
    922e:	b911      	cbnz	r1, 9236 <ticker_job+0x81e>
		_ticker_id_head = ticker->next;
    9230:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    9232:	2aff      	cmp	r2, #255	; 0xff
    9234:	d1f2      	bne.n	921c <ticker_job+0x804>
	*ticker_id_head = _ticker_id_head;
    9236:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
    923a:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
    923e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    9240:	6285      	str	r5, [r0, #40]	; 0x28
		break;
    9242:	e7cf      	b.n	91e4 <ticker_job+0x7cc>
			uop->status = TICKER_STATUS_FAILURE;
    9244:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    9248:	e7cb      	b.n	91e2 <ticker_job+0x7ca>
	while (count_user--) {
    924a:	9a01      	ldr	r2, [sp, #4]
    924c:	42ba      	cmp	r2, r7
    924e:	f1a7 0308 	sub.w	r3, r7, #8
    9252:	d00b      	beq.n	926c <ticker_job+0x854>
    9254:	461f      	mov	r7, r3
    9256:	e796      	b.n	9186 <ticker_job+0x76e>
		ticker = &node[_ticker_id_head];
    9258:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    925c:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    925e:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
    9262:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    9264:	e7e5      	b.n	9232 <ticker_job+0x81a>
	if (!pending) {
    9266:	9b08      	ldr	r3, [sp, #32]
    9268:	2b00      	cmp	r3, #0
    926a:	d058      	beq.n	931e <ticker_job+0x906>
	if (flag_compare_update) {
    926c:	9b06      	ldr	r3, [sp, #24]
    926e:	2b00      	cmp	r3, #0
    9270:	f47f ace1 	bne.w	8c36 <ticker_job+0x21e>
	if (instance->worker_trigger) {
    9274:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    9278:	2200      	movs	r2, #0
    927a:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    927e:	b12b      	cbz	r3, 928c <ticker_job+0x874>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    9280:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    9284:	465b      	mov	r3, fp
    9286:	2201      	movs	r2, #1
    9288:	2103      	movs	r1, #3
    928a:	e452      	b.n	8b32 <ticker_job+0x11a>
}
    928c:	b00d      	add	sp, #52	; 0x34
    928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9292:	4770      	bx	lr
					while (ticks_to_expire <
    9294:	9804      	ldr	r0, [sp, #16]
    9296:	4288      	cmp	r0, r1
    9298:	f67f af2b 	bls.w	90f2 <ticker_job+0x6da>
    929c:	1c68      	adds	r0, r5, #1
    929e:	9705      	str	r7, [sp, #20]
    92a0:	940a      	str	r4, [sp, #40]	; 0x28
    92a2:	9f04      	ldr	r7, [sp, #16]
    92a4:	4604      	mov	r4, r0
    92a6:	e005      	b.n	92b4 <ticker_job+0x89c>
    92a8:	4628      	mov	r0, r5
						ticks_to_expire +=
    92aa:	4401      	add	r1, r0
						lazy++;
    92ac:	3201      	adds	r2, #1
					while (ticks_to_expire <
    92ae:	428f      	cmp	r7, r1
						lazy++;
    92b0:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    92b2:	d910      	bls.n	92d6 <ticker_job+0x8be>
	ticker->remainder_current += ticker->remainder_periodic;
    92b4:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    92b6:	eb03 0008 	add.w	r0, r3, r8
    92ba:	4548      	cmp	r0, r9
    92bc:	d8f4      	bhi.n	92a8 <ticker_job+0x890>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    92be:	4620      	mov	r0, r4
    92c0:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    92c4:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    92c6:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    92ca:	3201      	adds	r2, #1
					while (ticks_to_expire <
    92cc:	428f      	cmp	r7, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    92ce:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    92d2:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    92d4:	d8ee      	bhi.n	92b4 <ticker_job+0x89c>
    92d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    92d8:	9f05      	ldr	r7, [sp, #20]
    92da:	6263      	str	r3, [r4, #36]	; 0x24
    92dc:	e709      	b.n	90f2 <ticker_job+0x6da>
	ticker_id_old_head = instance->ticker_id_head;
    92de:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    92e2:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    92e6:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    92e8:	f8db 3000 	ldr.w	r3, [fp]
    92ec:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    92ee:	f8db 3004 	ldr.w	r3, [fp, #4]
    92f2:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    92f4:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    92f6:	9106      	str	r1, [sp, #24]
	while (count_user--) {
    92f8:	b2db      	uxtb	r3, r3
    92fa:	b3a1      	cbz	r1, 9366 <ticker_job+0x94e>
		flag_elapsed = 0U;
    92fc:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    92fe:	9203      	str	r2, [sp, #12]
    9300:	f7ff bbc4 	b.w	8a8c <ticker_job+0x74>
				node->ticks_to_expire -=
    9304:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
    9306:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    930a:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    930e:	f43f aebc 	beq.w	908a <ticker_job+0x672>
    9312:	fa0f f18e 	sxth.w	r1, lr
    9316:	e6ab      	b.n	9070 <ticker_job+0x658>
			ticker->ticks_to_expire -= ticks_elapsed;
    9318:	1bdb      	subs	r3, r3, r7
    931a:	60a3      	str	r3, [r4, #8]
			break;
    931c:	e5f4      	b.n	8f08 <ticker_job+0x4f0>
	count_user = instance->count_user;
    931e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    9322:	f8db 2004 	ldr.w	r2, [fp, #4]
    9326:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    9328:	1e5f      	subs	r7, r3, #1
    932a:	b2ff      	uxtb	r7, r7
    932c:	2b00      	cmp	r3, #0
    932e:	f47f af24 	bne.w	917a <ticker_job+0x762>
    9332:	e79b      	b.n	926c <ticker_job+0x854>
		if (cntr_stop() == 0) {
    9334:	f008 fab8 	bl	118a8 <cntr_stop>
    9338:	2800      	cmp	r0, #0
    933a:	d19b      	bne.n	9274 <ticker_job+0x85c>
			instance->ticks_slot_previous = 0U;
    933c:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    9340:	f008 fad8 	bl	118f4 <cntr_cnt_get>
    9344:	f8cb 0014 	str.w	r0, [fp, #20]
    9348:	e794      	b.n	9274 <ticker_job+0x85c>
		ticks_current = cntr_cnt_get();
    934a:	f008 fad3 	bl	118f4 <cntr_cnt_get>
    934e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    9350:	f008 fa9a 	bl	11888 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    9354:	f89b 301d 	ldrb.w	r3, [fp, #29]
    9358:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    935a:	2800      	cmp	r0, #0
    935c:	f47f ac76 	bne.w	8c4c <ticker_job+0x234>
			instance->ticks_current = ticks_current;
    9360:	f8cb 4014 	str.w	r4, [fp, #20]
    9364:	e472      	b.n	8c4c <ticker_job+0x234>
	insert_head = TICKER_NULL;
    9366:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
    9368:	9108      	str	r1, [sp, #32]
	insert_head = TICKER_NULL;
    936a:	9301      	str	r3, [sp, #4]
    936c:	e453      	b.n	8c16 <ticker_job+0x1fe>
    936e:	bf00      	nop

00009370 <ticker_init>:
{
    9370:	b4f0      	push	{r4, r5, r6, r7}
    9372:	9d04      	ldr	r5, [sp, #16]
    9374:	f89d 7014 	ldrb.w	r7, [sp, #20]
    9378:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    937a:	2800      	cmp	r0, #0
    937c:	d137      	bne.n	93ee <ticker_init+0x7e>
	instance->count_node = count_node;
    937e:	4e1d      	ldr	r6, [pc, #116]	; (93f4 <ticker_init+0x84>)
	while (count_node--) {
    9380:	f101 3cff 	add.w	ip, r1, #4294967295
	instance->count_node = count_node;
    9384:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    9386:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    9388:	fa5f fc8c 	uxtb.w	ip, ip
    938c:	b149      	cbz	r1, 93a2 <ticker_init+0x32>
    938e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    9392:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    9396:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    9398:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    939c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    93a0:	d1f9      	bne.n	9396 <ticker_init+0x26>
	while (count_user--) {
    93a2:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    93a4:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    93a6:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    93a8:	b2d2      	uxtb	r2, r2
    93aa:	b183      	cbz	r3, 93ce <ticker_init+0x5e>
    93ac:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    93b0:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    93b2:	4610      	mov	r0, r2
    93b4:	f812 3908 	ldrb.w	r3, [r2], #-8
    93b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    93bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    93c0:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    93c2:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    93c6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    93ca:	b2df      	uxtb	r7, r3
	while (count_user--) {
    93cc:	d1f0      	bne.n	93b0 <ticker_init+0x40>
	if (count_op) {
    93ce:	b977      	cbnz	r7, 93ee <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    93d0:	9a07      	ldr	r2, [sp, #28]
    93d2:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    93d4:	9a08      	ldr	r2, [sp, #32]
    93d6:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    93d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    93dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    93de:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    93e0:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    93e2:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    93e6:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    93e8:	8177      	strh	r7, [r6, #10]
}
    93ea:	bcf0      	pop	{r4, r5, r6, r7}
    93ec:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    93ee:	2001      	movs	r0, #1
}
    93f0:	bcf0      	pop	{r4, r5, r6, r7}
    93f2:	4770      	bx	lr
    93f4:	20001458 	.word	0x20001458

000093f8 <ticker_trigger>:
	if (instance->sched_cb) {
    93f8:	4b0a      	ldr	r3, [pc, #40]	; (9424 <ticker_trigger+0x2c>)
    93fa:	222c      	movs	r2, #44	; 0x2c
    93fc:	fb02 3200 	mla	r2, r2, r0, r3
{
    9400:	b410      	push	{r4}
	if (instance->sched_cb) {
    9402:	6a54      	ldr	r4, [r2, #36]	; 0x24
    9404:	b15c      	cbz	r4, 941e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    9406:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    940a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    940e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9412:	46a4      	mov	ip, r4
    9414:	2201      	movs	r2, #1
}
    9416:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9418:	2103      	movs	r1, #3
    941a:	2002      	movs	r0, #2
    941c:	4760      	bx	ip
}
    941e:	bc10      	pop	{r4}
    9420:	4770      	bx	lr
    9422:	bf00      	nop
    9424:	20001458 	.word	0x20001458

00009428 <ticker_start_ext>:
{
    9428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    942c:	4e28      	ldr	r6, [pc, #160]	; (94d0 <ticker_start_ext+0xa8>)
{
    942e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    9432:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    9434:	252c      	movs	r5, #44	; 0x2c
    9436:	fb05 6504 	mla	r5, r5, r4, r6
{
    943a:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    943c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9440:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    9444:	6869      	ldr	r1, [r5, #4]
    9446:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    944a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    944e:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    9452:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    9456:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    9458:	f10e 0c01 	add.w	ip, lr, #1
    945c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    9460:	4564      	cmp	r4, ip
    9462:	bf98      	it	ls
    9464:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    9468:	4561      	cmp	r1, ip
    946a:	d02e      	beq.n	94ca <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    946c:	6879      	ldr	r1, [r7, #4]
    946e:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    9472:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    9476:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    947a:	f04f 0904 	mov.w	r9, #4
    947e:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    9482:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    9484:	9b08      	ldr	r3, [sp, #32]
    9486:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    9488:	9b09      	ldr	r3, [sp, #36]	; 0x24
    948a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    948e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    9490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9492:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    9494:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9496:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    9498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    949a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    949c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    949e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    94a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    94a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    94a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    94a6:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    94a8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    94aa:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    94ac:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    94ae:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    94b2:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    94b6:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    94ba:	4798      	blx	r3
    94bc:	4633      	mov	r3, r6
    94be:	4649      	mov	r1, r9
    94c0:	2200      	movs	r2, #0
    94c2:	47a8      	blx	r5
	return user_op->status;
    94c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    94c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    94ca:	2001      	movs	r0, #1
}
    94cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    94d0:	20001458 	.word	0x20001458

000094d4 <ticker_start>:
{
    94d4:	b510      	push	{r4, lr}
    94d6:	b08a      	sub	sp, #40	; 0x28
    94d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94da:	9400      	str	r4, [sp, #0]
{
    94dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94de:	9401      	str	r4, [sp, #4]
{
    94e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94e2:	9402      	str	r4, [sp, #8]
{
    94e4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94e8:	9403      	str	r4, [sp, #12]
{
    94ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94ec:	9404      	str	r4, [sp, #16]
{
    94ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94f0:	9405      	str	r4, [sp, #20]
{
    94f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94f4:	9406      	str	r4, [sp, #24]
{
    94f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94f8:	9407      	str	r4, [sp, #28]
{
    94fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    94fc:	9408      	str	r4, [sp, #32]
    94fe:	2400      	movs	r4, #0
    9500:	9409      	str	r4, [sp, #36]	; 0x24
    9502:	f7ff ff91 	bl	9428 <ticker_start_ext>
}
    9506:	b00a      	add	sp, #40	; 0x28
    9508:	bd10      	pop	{r4, pc}
    950a:	bf00      	nop

0000950c <ticker_update_ext>:
{
    950c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    9510:	4d28      	ldr	r5, [pc, #160]	; (95b4 <ticker_update_ext+0xa8>)
{
    9512:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    9516:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    951a:	4604      	mov	r4, r0
    951c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    951e:	212c      	movs	r1, #44	; 0x2c
    9520:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    9524:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    9528:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    952c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    9530:	684c      	ldr	r4, [r1, #4]
    9532:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    9536:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    953a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    953e:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    9540:	f10e 0c01 	add.w	ip, lr, #1
    9544:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    9548:	45e1      	cmp	r9, ip
    954a:	bf98      	it	ls
    954c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    9550:	4564      	cmp	r4, ip
{
    9552:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    9556:	d02a      	beq.n	95ae <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    9558:	f8d6 a004 	ldr.w	sl, [r6, #4]
    955c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    9560:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    9564:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    9568:	f04f 0b05 	mov.w	fp, #5
    956c:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    9570:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    9572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9574:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    9576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9578:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    957a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    957c:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    957e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9580:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    9582:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9584:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    9586:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    9588:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    958a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    958c:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    958e:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    9592:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    9596:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    959a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    959e:	4798      	blx	r3
    95a0:	462b      	mov	r3, r5
    95a2:	2200      	movs	r2, #0
    95a4:	2104      	movs	r1, #4
    95a6:	47b0      	blx	r6
	return user_op->status;
    95a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    95aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    95ae:	2001      	movs	r0, #1
}
    95b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95b4:	20001458 	.word	0x20001458

000095b8 <ticker_update>:
{
    95b8:	b510      	push	{r4, lr}
    95ba:	b088      	sub	sp, #32
    95bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95be:	9400      	str	r4, [sp, #0]
{
    95c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95c2:	9401      	str	r4, [sp, #4]
{
    95c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95c6:	9402      	str	r4, [sp, #8]
{
    95c8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95cc:	9403      	str	r4, [sp, #12]
{
    95ce:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95d2:	9404      	str	r4, [sp, #16]
{
    95d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95d6:	9405      	str	r4, [sp, #20]
{
    95d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    95da:	9406      	str	r4, [sp, #24]
    95dc:	2400      	movs	r4, #0
    95de:	9407      	str	r4, [sp, #28]
    95e0:	f7ff ff94 	bl	950c <ticker_update_ext>
}
    95e4:	b008      	add	sp, #32
    95e6:	bd10      	pop	{r4, pc}

000095e8 <ticker_stop>:
{
    95e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    95ec:	4c1e      	ldr	r4, [pc, #120]	; (9668 <ticker_stop+0x80>)
{
    95ee:	4684      	mov	ip, r0
    95f0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    95f2:	212c      	movs	r1, #44	; 0x2c
    95f4:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    95f8:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    95fc:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    9600:	684d      	ldr	r5, [r1, #4]
    9602:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    9606:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    960a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    960e:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    9610:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    9614:	f10e 0c01 	add.w	ip, lr, #1
    9618:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    961c:	4567      	cmp	r7, ip
    961e:	bf98      	it	ls
    9620:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    9624:	4565      	cmp	r5, ip
    9626:	d01c      	beq.n	9662 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    9628:	6877      	ldr	r7, [r6, #4]
    962a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    962e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    9632:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    9636:	f04f 0807 	mov.w	r8, #7
    963a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    963e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    9640:	9b06      	ldr	r3, [sp, #24]
    9642:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    9644:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    9646:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    9648:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    964a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    964e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    9652:	4798      	blx	r3
    9654:	4623      	mov	r3, r4
    9656:	2200      	movs	r2, #0
    9658:	2104      	movs	r1, #4
    965a:	47b0      	blx	r6
	return user_op->status;
    965c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    965e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    9662:	2001      	movs	r0, #1
}
    9664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9668:	20001458 	.word	0x20001458

0000966c <ticker_next_slot_get>:
{
    966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    9670:	4d20      	ldr	r5, [pc, #128]	; (96f4 <ticker_next_slot_get+0x88>)
{
    9672:	4684      	mov	ip, r0
    9674:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    9676:	212c      	movs	r1, #44	; 0x2c
    9678:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
    967c:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
    9680:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
    9684:	684c      	ldr	r4, [r1, #4]
    9686:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    968a:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
    968e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    9692:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    9694:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
    9698:	f10e 0c01 	add.w	ip, lr, #1
    969c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    96a0:	4567      	cmp	r7, ip
    96a2:	bf98      	it	ls
    96a4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    96a8:	4564      	cmp	r4, ip
    96aa:	d020      	beq.n	96ee <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
    96ac:	6877      	ldr	r7, [r6, #4]
    96ae:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    96b2:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    96b6:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    96ba:	f64f 7802 	movw	r8, #65282	; 0xff02
    96be:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
    96c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    96c6:	9b06      	ldr	r3, [sp, #24]
    96c8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    96ca:	9b07      	ldr	r3, [sp, #28]
    96cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    96ce:	9b08      	ldr	r3, [sp, #32]
    96d0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    96d2:	2302      	movs	r3, #2
    96d4:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
    96d6:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    96da:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    96de:	4798      	blx	r3
    96e0:	462b      	mov	r3, r5
    96e2:	2200      	movs	r2, #0
    96e4:	2104      	movs	r1, #4
    96e6:	47b0      	blx	r6
	return user_op->status;
    96e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    96ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    96ee:	2001      	movs	r0, #1
}
    96f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96f4:	20001458 	.word	0x20001458

000096f8 <ticker_job_sched>:
{
    96f8:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    96fa:	4d0a      	ldr	r5, [pc, #40]	; (9724 <ticker_job_sched+0x2c>)
    96fc:	222c      	movs	r2, #44	; 0x2c
    96fe:	fb02 5200 	mla	r2, r2, r0, r5
    9702:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
    9706:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9708:	4608      	mov	r0, r1
    970a:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
    970c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9710:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9714:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9718:	46b4      	mov	ip, r6
    971a:	2200      	movs	r2, #0
}
    971c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9720:	2104      	movs	r1, #4
    9722:	4760      	bx	ip
    9724:	20001458 	.word	0x20001458

00009728 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    9728:	f008 b8e4 	b.w	118f4 <cntr_cnt_get>

0000972c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    972c:	1a40      	subs	r0, r0, r1
}
    972e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9732:	4770      	bx	lr

00009734 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    9734:	b570      	push	{r4, r5, r6, lr}
    9736:	4604      	mov	r4, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    9738:	2000      	movs	r0, #0
{
    973a:	460d      	mov	r5, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    973c:	f002 fdde 	bl	c2fc <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    9740:	f010 0606 	ands.w	r6, r0, #6
    9744:	d114      	bne.n	9770 <ll_addr_set+0x3c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    9746:	b13c      	cbz	r4, 9758 <ll_addr_set+0x24>
		if (bdaddr) {
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    9748:	480a      	ldr	r0, [pc, #40]	; (9774 <ll_addr_set+0x40>)
    974a:	2206      	movs	r2, #6
    974c:	4629      	mov	r1, r5
		if (bdaddr) {
    974e:	b15d      	cbz	r5, 9768 <ll_addr_set+0x34>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    9750:	f00d f84f 	bl	167f2 <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
    9754:	4630      	mov	r0, r6
}
    9756:	bd70      	pop	{r4, r5, r6, pc}
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    9758:	4807      	ldr	r0, [pc, #28]	; (9778 <ll_addr_set+0x44>)
    975a:	2206      	movs	r2, #6
    975c:	4629      	mov	r1, r5
		if (bdaddr) {
    975e:	b11d      	cbz	r5, 9768 <ll_addr_set+0x34>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    9760:	f00d f847 	bl	167f2 <memcpy>
	return 0;
    9764:	4620      	mov	r0, r4
}
    9766:	bd70      	pop	{r4, r5, r6, pc}
			(void)memset(pub_addr, 0, BDADDR_SIZE);
    9768:	f00d f84e 	bl	16808 <memset>
	return 0;
    976c:	4628      	mov	r0, r5
}
    976e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    9770:	200c      	movs	r0, #12
}
    9772:	bd70      	pop	{r4, r5, r6, pc}
    9774:	2000148c 	.word	0x2000148c
    9778:	20001484 	.word	0x20001484

0000977c <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    977c:	2801      	cmp	r0, #1
{
    977e:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    9780:	d805      	bhi.n	978e <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    9782:	4a04      	ldr	r2, [pc, #16]	; (9794 <ll_addr_get+0x18>)
    9784:	4804      	ldr	r0, [pc, #16]	; (9798 <ll_addr_get+0x1c>)
    9786:	2b00      	cmp	r3, #0
    9788:	bf18      	it	ne
    978a:	4610      	movne	r0, r2
    978c:	4770      	bx	lr
		return NULL;
    978e:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    9790:	4770      	bx	lr
    9792:	bf00      	nop
    9794:	2000148c 	.word	0x2000148c
    9798:	20001484 	.word	0x20001484

0000979c <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    979c:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    979e:	b510      	push	{r4, lr}
    97a0:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    97a2:	d80b      	bhi.n	97bc <ll_addr_read+0x20>
	if (addr_type) {
    97a4:	4608      	mov	r0, r1
		return rnd_addr;
    97a6:	4c07      	ldr	r4, [pc, #28]	; (97c4 <ll_addr_read+0x28>)
    97a8:	4907      	ldr	r1, [pc, #28]	; (97c8 <ll_addr_read+0x2c>)
    97aa:	2b00      	cmp	r3, #0
    97ac:	bf18      	it	ne
    97ae:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    97b0:	2206      	movs	r2, #6
    97b2:	4621      	mov	r1, r4
    97b4:	f00d f81d 	bl	167f2 <memcpy>
	}

	return addr;
}
    97b8:	4620      	mov	r0, r4
    97ba:	bd10      	pop	{r4, pc}
		return NULL;
    97bc:	2400      	movs	r4, #0
}
    97be:	4620      	mov	r0, r4
    97c0:	bd10      	pop	{r4, pc}
    97c2:	bf00      	nop
    97c4:	20001484 	.word	0x20001484
    97c8:	2000148c 	.word	0x2000148c

000097cc <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    97cc:	2802      	cmp	r0, #2
    97ce:	d001      	beq.n	97d4 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    97d0:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    97d2:	4770      	bx	lr
{
    97d4:	b538      	push	{r3, r4, r5, lr}
    97d6:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    97d8:	4608      	mov	r0, r1
    97da:	461d      	mov	r5, r3
    97dc:	f003 f9ee 	bl	cbbc <ll_connected_get>
			if (!conn) {
    97e0:	b110      	cbz	r0, 97e8 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    97e2:	2000      	movs	r0, #0
    97e4:	7028      	strb	r0, [r5, #0]
}
    97e6:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    97e8:	4620      	mov	r0, r4
}
    97ea:	bd38      	pop	{r3, r4, r5, pc}

000097ec <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    97ec:	2300      	movs	r3, #0
    97ee:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    97f0:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    97f2:	4770      	bx	lr

000097f4 <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    97f4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    97f6:	4802      	ldr	r0, [pc, #8]	; (9800 <hci_driver_init+0xc>)
    97f8:	f7fb fbd2 	bl	4fa0 <bt_hci_driver_register>

	return 0;
}
    97fc:	2000      	movs	r0, #0
    97fe:	bd08      	pop	{r3, pc}
    9800:	0001a604 	.word	0x0001a604

00009804 <hci_driver_send>:
{
    9804:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    9806:	8983      	ldrh	r3, [r0, #12]
{
    9808:	b083      	sub	sp, #12
	if (!buf->len) {
    980a:	b123      	cbz	r3, 9816 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    980c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    980e:	4604      	mov	r4, r0
    9810:	b1c3      	cbz	r3, 9844 <hci_driver_send+0x40>
    9812:	2b02      	cmp	r3, #2
    9814:	d004      	beq.n	9820 <hci_driver_send+0x1c>
    9816:	f06f 0515 	mvn.w	r5, #21
}
    981a:	4628      	mov	r0, r5
    981c:	b003      	add	sp, #12
    981e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    9820:	a901      	add	r1, sp, #4
    9822:	f000 ff2d 	bl	a680 <hci_acl_handle>
	if (evt) {
    9826:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    9828:	4605      	mov	r5, r0
	if (evt) {
    982a:	b113      	cbz	r3, 9832 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    982c:	4618      	mov	r0, r3
    982e:	f7fb fb99 	bl	4f64 <bt_recv_prio>
	if (!err) {
    9832:	2d00      	cmp	r5, #0
    9834:	d1f1      	bne.n	981a <hci_driver_send+0x16>
		net_buf_unref(buf);
    9836:	4620      	mov	r0, r4
    9838:	f008 ffa2 	bl	12780 <net_buf_unref>
    983c:	2500      	movs	r5, #0
}
    983e:	4628      	mov	r0, r5
    9840:	b003      	add	sp, #12
    9842:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    9844:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    9846:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    9848:	f000 fabe 	bl	9dc8 <hci_cmd_handle>
	if (evt) {
    984c:	2800      	cmp	r0, #0
    984e:	d0f2      	beq.n	9836 <hci_driver_send+0x32>
		bt_recv_prio(evt);
    9850:	f7fb fb88 	bl	4f64 <bt_recv_prio>
		if (node_rx) {
    9854:	9d01      	ldr	r5, [sp, #4]
    9856:	2d00      	cmp	r5, #0
    9858:	d0ed      	beq.n	9836 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    985a:	4628      	mov	r0, r5
    985c:	f001 fb46 	bl	aeec <hci_get_class>
    9860:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    9862:	9901      	ldr	r1, [sp, #4]
    9864:	4801      	ldr	r0, [pc, #4]	; (986c <hci_driver_send+0x68>)
    9866:	f00f fef0 	bl	1964a <k_queue_append>
	if (!err) {
    986a:	e7e4      	b.n	9836 <hci_driver_send+0x32>
    986c:	20001494 	.word	0x20001494

00009870 <hci_driver_close>:
{
    9870:	b508      	push	{r3, lr}
	ll_deinit();
    9872:	f002 fc23 	bl	c0bc <ll_deinit>
	z_impl_k_thread_abort(thread);
    9876:	4804      	ldr	r0, [pc, #16]	; (9888 <hci_driver_close+0x18>)
    9878:	f7fa fd66 	bl	4348 <z_impl_k_thread_abort>
    987c:	4803      	ldr	r0, [pc, #12]	; (988c <hci_driver_close+0x1c>)
    987e:	f7fa fd63 	bl	4348 <z_impl_k_thread_abort>
}
    9882:	2000      	movs	r0, #0
    9884:	bd08      	pop	{r3, pc}
    9886:	bf00      	nop
    9888:	20000b50 	.word	0x20000b50
    988c:	20000bd0 	.word	0x20000bd0

00009890 <recv_thread>:
{
    9890:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    9892:	4e41      	ldr	r6, [pc, #260]	; (9998 <recv_thread+0x108>)
		LL_ASSERT(0);
    9894:	4f41      	ldr	r7, [pc, #260]	; (999c <recv_thread+0x10c>)
{
    9896:	b083      	sub	sp, #12
    9898:	f04f 32ff 	mov.w	r2, #4294967295
    989c:	f04f 33ff 	mov.w	r3, #4294967295
    98a0:	4630      	mov	r0, r6
    98a2:	f00b fa67 	bl	14d74 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    98a6:	2800      	cmp	r0, #0
    98a8:	d0f6      	beq.n	9898 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    98aa:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    98ac:	9001      	str	r0, [sp, #4]
	switch (class) {
    98ae:	2b04      	cmp	r3, #4
    98b0:	d821      	bhi.n	98f6 <recv_thread+0x66>
    98b2:	2b00      	cmp	r3, #0
    98b4:	d14b      	bne.n	994e <recv_thread+0xbe>
		LL_ASSERT(0);
    98b6:	493a      	ldr	r1, [pc, #232]	; (99a0 <recv_thread+0x110>)
    98b8:	483a      	ldr	r0, [pc, #232]	; (99a4 <recv_thread+0x114>)
    98ba:	f240 13ab 	movw	r3, #427	; 0x1ab
    98be:	463a      	mov	r2, r7
    98c0:	f00c fd17 	bl	162f2 <assert_print>
    98c4:	4040      	eors	r0, r0
    98c6:	f380 8811 	msr	BASEPRI, r0
    98ca:	f04f 0003 	mov.w	r0, #3
    98ce:	df02      	svc	2
	node_rx->hdr.next = NULL;
    98d0:	9b01      	ldr	r3, [sp, #4]
    98d2:	2200      	movs	r2, #0
    98d4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    98d6:	a801      	add	r0, sp, #4
    98d8:	f001 fecc 	bl	b674 <ll_rx_mem_release>
    98dc:	f04f 32ff 	mov.w	r2, #4294967295
    98e0:	f04f 33ff 	mov.w	r3, #4294967295
    98e4:	4630      	mov	r0, r6
    98e6:	f00b fa45 	bl	14d74 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    98ea:	2800      	cmp	r0, #0
    98ec:	d0d4      	beq.n	9898 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    98ee:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    98f0:	9001      	str	r0, [sp, #4]
	switch (class) {
    98f2:	2b04      	cmp	r3, #4
    98f4:	d9dd      	bls.n	98b2 <recv_thread+0x22>
    98f6:	2b05      	cmp	r3, #5
    98f8:	d1dd      	bne.n	98b6 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    98fa:	f04f 32ff 	mov.w	r2, #4294967295
    98fe:	f04f 33ff 	mov.w	r3, #4294967295
    9902:	2003      	movs	r0, #3
    9904:	f7fa fe72 	bl	45ec <bt_buf_get_rx>
    9908:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    990a:	4621      	mov	r1, r4
    990c:	9801      	ldr	r0, [sp, #4]
    990e:	f000 ff43 	bl	a798 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    9912:	9b01      	ldr	r3, [sp, #4]
    9914:	2200      	movs	r2, #0
    9916:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    9918:	a801      	add	r0, sp, #4
    991a:	f001 feab 	bl	b674 <ll_rx_mem_release>
		while (buf) {
    991e:	2c00      	cmp	r4, #0
    9920:	d0ba      	beq.n	9898 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    9922:	4620      	mov	r0, r4
    9924:	f00f f8c2 	bl	18aac <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    9928:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    992a:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    992c:	2000      	movs	r0, #0
    992e:	f00f f8e3 	bl	18af8 <net_buf_frag_del>
			if (frag->len) {
    9932:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    9934:	4604      	mov	r4, r0
				bt_recv(frag);
    9936:	4628      	mov	r0, r5
			if (frag->len) {
    9938:	b133      	cbz	r3, 9948 <recv_thread+0xb8>
				bt_recv(frag);
    993a:	f7fb fa99 	bl	4e70 <bt_recv>
	z_impl_k_yield();
    993e:	f00b fe63 	bl	15608 <z_impl_k_yield>
		while (buf) {
    9942:	2c00      	cmp	r4, #0
    9944:	d1ed      	bne.n	9922 <recv_thread+0x92>
    9946:	e7a7      	b.n	9898 <recv_thread+0x8>
				net_buf_unref(frag);
    9948:	f008 ff1a 	bl	12780 <net_buf_unref>
    994c:	e7f7      	b.n	993e <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    994e:	2b02      	cmp	r3, #2
    9950:	d013      	beq.n	997a <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9952:	f04f 32ff 	mov.w	r2, #4294967295
    9956:	f04f 33ff 	mov.w	r3, #4294967295
    995a:	2001      	movs	r0, #1
    995c:	f7fa fe46 	bl	45ec <bt_buf_get_rx>
    9960:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    9962:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    9964:	b19c      	cbz	r4, 998e <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
    9966:	4621      	mov	r1, r4
    9968:	f000 ff50 	bl	a80c <hci_evt_encode>
	node_rx->hdr.next = NULL;
    996c:	9b01      	ldr	r3, [sp, #4]
    996e:	2200      	movs	r2, #0
    9970:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    9972:	a801      	add	r0, sp, #4
    9974:	f001 fe7e 	bl	b674 <ll_rx_mem_release>
		while (buf) {
    9978:	e7d3      	b.n	9922 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    997a:	2200      	movs	r2, #0
    997c:	2300      	movs	r3, #0
    997e:	2101      	movs	r1, #1
    9980:	2000      	movs	r0, #0
    9982:	f7fa fe5d 	bl	4640 <bt_buf_get_evt>
    9986:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    9988:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    998a:	2c00      	cmp	r4, #0
    998c:	d1eb      	bne.n	9966 <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
    998e:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    9990:	a801      	add	r0, sp, #4
    9992:	f001 fe6f 	bl	b674 <ll_rx_mem_release>
		while (buf) {
    9996:	e77f      	b.n	9898 <recv_thread+0x8>
    9998:	20001494 	.word	0x20001494
    999c:	0001a5a0 	.word	0x0001a5a0
    99a0:	0001a5e0 	.word	0x0001a5e0
    99a4:	0001a580 	.word	0x0001a580

000099a8 <prio_recv_thread>:
{
    99a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    99ac:	4f2e      	ldr	r7, [pc, #184]	; (9a68 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    99ae:	4e2f      	ldr	r6, [pc, #188]	; (9a6c <prio_recv_thread+0xc4>)
{
    99b0:	b082      	sub	sp, #8
    99b2:	e00c      	b.n	99ce <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    99b4:	f7fa fe44 	bl	4640 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    99b8:	4622      	mov	r2, r4
    99ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    99be:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    99c0:	f001 fa7c 	bl	aebc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    99c4:	4620      	mov	r0, r4
    99c6:	f7fb facd 	bl	4f64 <bt_recv_prio>
	z_impl_k_yield();
    99ca:	f00b fe1d 	bl	15608 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    99ce:	f10d 0102 	add.w	r1, sp, #2
    99d2:	a801      	add	r0, sp, #4
    99d4:	f001 fd6a 	bl	b4ac <ll_rx_get>
    99d8:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    99da:	f04f 32ff 	mov.w	r2, #4294967295
    99de:	f04f 33ff 	mov.w	r3, #4294967295
    99e2:	2100      	movs	r1, #0
    99e4:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    99e6:	2c00      	cmp	r4, #0
    99e8:	d1e4      	bne.n	99b4 <prio_recv_thread+0xc>
		if (node_rx) {
    99ea:	9b01      	ldr	r3, [sp, #4]
    99ec:	b1b3      	cbz	r3, 9a1c <prio_recv_thread+0x74>
			ll_rx_dequeue();
    99ee:	f001 fdd3 	bl	b598 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    99f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    99f6:	4640      	mov	r0, r8
    99f8:	f001 fa78 	bl	aeec <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    99fc:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    99fe:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    9a02:	796b      	ldrb	r3, [r5, #5]
    9a04:	2b03      	cmp	r3, #3
    9a06:	d102      	bne.n	9a0e <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    9a08:	792b      	ldrb	r3, [r5, #4]
    9a0a:	2b18      	cmp	r3, #24
    9a0c:	d00e      	beq.n	9a2c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    9a0e:	4629      	mov	r1, r5
    9a10:	4630      	mov	r0, r6
    9a12:	f00f fe1a 	bl	1964a <k_queue_append>
		if (iso_received || node_rx) {
    9a16:	9b01      	ldr	r3, [sp, #4]
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d1d8      	bne.n	99ce <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    9a1c:	f04f 32ff 	mov.w	r2, #4294967295
    9a20:	f04f 33ff 	mov.w	r3, #4294967295
    9a24:	4638      	mov	r0, r7
    9a26:	f00b f9ff 	bl	14e28 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    9a2a:	e7d0      	b.n	99ce <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    9a2c:	f04f 33ff 	mov.w	r3, #4294967295
    9a30:	4621      	mov	r1, r4
    9a32:	f04f 32ff 	mov.w	r2, #4294967295
    9a36:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    9a38:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    9a3c:	f7fa fe00 	bl	4640 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    9a40:	4641      	mov	r1, r8
    9a42:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    9a44:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    9a46:	f105 001c 	add.w	r0, r5, #28
    9a4a:	f000 fe7d 	bl	a748 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    9a4e:	4640      	mov	r0, r8
    9a50:	f000 fe9a 	bl	a788 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    9a54:	4620      	mov	r0, r4
			if (buf) {
    9a56:	b124      	cbz	r4, 9a62 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    9a58:	f7fb fa84 	bl	4f64 <bt_recv_prio>
					net_buf_unref(buf);
    9a5c:	4620      	mov	r0, r4
    9a5e:	f008 fe8f 	bl	12780 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    9a62:	9d01      	ldr	r5, [sp, #4]
    9a64:	e7d3      	b.n	9a0e <prio_recv_thread+0x66>
    9a66:	bf00      	nop
    9a68:	200014ac 	.word	0x200014ac
    9a6c:	20001494 	.word	0x20001494

00009a70 <hci_driver_open>:
{
    9a70:	b5d0      	push	{r4, r6, r7, lr}
    9a72:	b088      	sub	sp, #32
	z_impl_k_queue_init(queue);
    9a74:	481e      	ldr	r0, [pc, #120]	; (9af0 <hci_driver_open+0x80>)
    9a76:	f00f fddc 	bl	19632 <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9a7a:	f04f 32ff 	mov.w	r2, #4294967295
    9a7e:	2100      	movs	r1, #0
    9a80:	481c      	ldr	r0, [pc, #112]	; (9af4 <hci_driver_open+0x84>)
    9a82:	f00f fe33 	bl	196ec <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
    9a86:	481b      	ldr	r0, [pc, #108]	; (9af4 <hci_driver_open+0x84>)
    9a88:	f002 fa32 	bl	bef0 <ll_init>
	if (err) {
    9a8c:	4604      	mov	r4, r0
    9a8e:	bb58      	cbnz	r0, 9ae8 <hci_driver_open+0x78>
	hci_init(NULL);
    9a90:	f001 fa42 	bl	af18 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    9a94:	2600      	movs	r6, #0
    9a96:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9a98:	f06f 0209 	mvn.w	r2, #9
    9a9c:	e9cd 2403 	strd	r2, r4, [sp, #12]
    9aa0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9aa4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9aa8:	4b13      	ldr	r3, [pc, #76]	; (9af8 <hci_driver_open+0x88>)
    9aaa:	4914      	ldr	r1, [pc, #80]	; (9afc <hci_driver_open+0x8c>)
    9aac:	9400      	str	r4, [sp, #0]
    9aae:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    9ab2:	4813      	ldr	r0, [pc, #76]	; (9b00 <hci_driver_open+0x90>)
    9ab4:	f00b f8ba 	bl	14c2c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    9ab8:	4912      	ldr	r1, [pc, #72]	; (9b04 <hci_driver_open+0x94>)
    9aba:	4811      	ldr	r0, [pc, #68]	; (9b00 <hci_driver_open+0x90>)
    9abc:	f00f fd3d 	bl	1953a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9ac0:	f06f 0207 	mvn.w	r2, #7
    9ac4:	e9cd 2403 	strd	r2, r4, [sp, #12]
    9ac8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9acc:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9ad0:	4b0d      	ldr	r3, [pc, #52]	; (9b08 <hci_driver_open+0x98>)
    9ad2:	490e      	ldr	r1, [pc, #56]	; (9b0c <hci_driver_open+0x9c>)
    9ad4:	9400      	str	r4, [sp, #0]
    9ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9ada:	480d      	ldr	r0, [pc, #52]	; (9b10 <hci_driver_open+0xa0>)
    9adc:	f00b f8a6 	bl	14c2c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    9ae0:	490c      	ldr	r1, [pc, #48]	; (9b14 <hci_driver_open+0xa4>)
    9ae2:	480b      	ldr	r0, [pc, #44]	; (9b10 <hci_driver_open+0xa0>)
    9ae4:	f00f fd29 	bl	1953a <z_impl_k_thread_name_set>
}
    9ae8:	4620      	mov	r0, r4
    9aea:	b008      	add	sp, #32
    9aec:	bdd0      	pop	{r4, r6, r7, pc}
    9aee:	bf00      	nop
    9af0:	20001494 	.word	0x20001494
    9af4:	200014ac 	.word	0x200014ac
    9af8:	000099a9 	.word	0x000099a9
    9afc:	20002b00 	.word	0x20002b00
    9b00:	20000b50 	.word	0x20000b50
    9b04:	0001a5e4 	.word	0x0001a5e4
    9b08:	00009891 	.word	0x00009891
    9b0c:	20002d00 	.word	0x20002d00
    9b10:	20000bd0 	.word	0x20000bd0
    9b14:	0001a5f0 	.word	0x0001a5f0

00009b18 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    9b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
    9b1c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9bc8 <dup_found.part.0+0xb0>
    9b20:	f8d9 3000 	ldr.w	r3, [r9]
    9b24:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    9b26:	4680      	mov	r8, r0
    9b28:	460f      	mov	r7, r1
    9b2a:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
    9b2c:	dd12      	ble.n	9b54 <dup_found.part.0+0x3c>
    9b2e:	4c27      	ldr	r4, [pc, #156]	; (9bcc <dup_found.part.0+0xb4>)
    9b30:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
    9b32:	4621      	mov	r1, r4
    9b34:	2206      	movs	r2, #6
    9b36:	4630      	mov	r0, r6
    9b38:	f00c fe4a 	bl	167d0 <memcmp>
    9b3c:	b918      	cbnz	r0, 9b46 <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
    9b3e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    9b42:	42bb      	cmp	r3, r7
    9b44:	d029      	beq.n	9b9a <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
    9b46:	f8d9 3000 	ldr.w	r3, [r9]
    9b4a:	3501      	adds	r5, #1
    9b4c:	429d      	cmp	r5, r3
    9b4e:	f104 0408 	add.w	r4, r4, #8
    9b52:	dbee      	blt.n	9b32 <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
    9b54:	4d1e      	ldr	r5, [pc, #120]	; (9bd0 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    9b56:	4c1f      	ldr	r4, [pc, #124]	; (9bd4 <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
    9b58:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    9b5c:	4631      	mov	r1, r6
    9b5e:	ea4f 06ca 	mov.w	r6, sl, lsl #3
    9b62:	1c70      	adds	r0, r6, #1
    9b64:	4420      	add	r0, r4
    9b66:	2206      	movs	r2, #6
    9b68:	f00c fe43 	bl	167f2 <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
    9b6c:	2301      	movs	r3, #1
    9b6e:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b72:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
    9b76:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
    9b7a:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b7c:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
    9b7e:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b82:	dc1c      	bgt.n	9bbe <dup_found.part.0+0xa6>
			dup_count++;
    9b84:	3301      	adds	r3, #1
			dup_curr = dup_count;
    9b86:	461a      	mov	r2, r3
			dup_count++;
    9b88:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
    9b8c:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
    9b8e:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9b90:	2a10      	cmp	r2, #16
			dup_curr = 0U;
    9b92:	bf08      	it	eq
    9b94:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
    9b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
    9b9a:	4b0e      	ldr	r3, [pc, #56]	; (9bd4 <dup_found.part.0+0xbc>)
    9b9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
    9ba0:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
    9ba2:	79ea      	ldrb	r2, [r5, #7]
    9ba4:	fa22 f308 	lsr.w	r3, r2, r8
    9ba8:	f013 0301 	ands.w	r3, r3, #1
    9bac:	d1f3      	bne.n	9b96 <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
    9bae:	fa00 f808 	lsl.w	r8, r0, r8
    9bb2:	ea42 0208 	orr.w	r2, r2, r8
    9bb6:	71ea      	strb	r2, [r5, #7]
		return false;
    9bb8:	4618      	mov	r0, r3
}
    9bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    9bbe:	682a      	ldr	r2, [r5, #0]
    9bc0:	3201      	adds	r2, #1
    9bc2:	602a      	str	r2, [r5, #0]
    9bc4:	e7e3      	b.n	9b8e <dup_found.part.0+0x76>
    9bc6:	bf00      	nop
    9bc8:	200014c8 	.word	0x200014c8
    9bcc:	200014d1 	.word	0x200014d1
    9bd0:	200014cc 	.word	0x200014cc
    9bd4:	200014d0 	.word	0x200014d0

00009bd8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    9bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9bda:	4c19      	ldr	r4, [pc, #100]	; (9c40 <le_remote_feat_complete+0x68>)
    9bdc:	6864      	ldr	r4, [r4, #4]
    9bde:	00a4      	lsls	r4, r4, #2
    9be0:	d504      	bpl.n	9bec <le_remote_feat_complete+0x14>
    9be2:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    9be4:	4a17      	ldr	r2, [pc, #92]	; (9c44 <le_remote_feat_complete+0x6c>)
    9be6:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9be8:	0712      	lsls	r2, r2, #28
    9bea:	d400      	bmi.n	9bee <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    9bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bee:	f103 0408 	add.w	r4, r3, #8
    9bf2:	4607      	mov	r7, r0
    9bf4:	460e      	mov	r6, r1
    9bf6:	4620      	mov	r0, r4
    9bf8:	2102      	movs	r1, #2
    9bfa:	f00e ff89 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    9bfe:	233e      	movs	r3, #62	; 0x3e
    9c00:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    9c02:	230c      	movs	r3, #12
    9c04:	7043      	strb	r3, [r0, #1]
    9c06:	2101      	movs	r1, #1
    9c08:	4620      	mov	r0, r4
    9c0a:	f00e ff81 	bl	18b10 <net_buf_simple_add>
    9c0e:	4603      	mov	r3, r0
	me->subevent = subevt;
    9c10:	2204      	movs	r2, #4
    9c12:	701a      	strb	r2, [r3, #0]
    9c14:	4620      	mov	r0, r4
    9c16:	210b      	movs	r1, #11
    9c18:	f00e ff7a 	bl	18b10 <net_buf_simple_add>
		memcpy(&sep->features[0],
    9c1c:	2208      	movs	r2, #8
	sep->status = status;
    9c1e:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9c20:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    9c24:	b92f      	cbnz	r7, 9c32 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    9c26:	1d31      	adds	r1, r6, #4
    9c28:	3003      	adds	r0, #3
}
    9c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    9c2e:	f00c bde0 	b.w	167f2 <memcpy>
}
    9c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    9c36:	2100      	movs	r1, #0
    9c38:	3003      	adds	r0, #3
    9c3a:	f00c bde5 	b.w	16808 <memset>
    9c3e:	bf00      	nop
    9c40:	20000150 	.word	0x20000150
    9c44:	20000158 	.word	0x20000158

00009c48 <hci_vendor_cmd_handle_common>:
{
    9c48:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    9c4a:	3801      	subs	r0, #1
{
    9c4c:	b087      	sub	sp, #28
    9c4e:	4615      	mov	r5, r2
	switch (ocf) {
    9c50:	2809      	cmp	r0, #9
    9c52:	d806      	bhi.n	9c62 <hci_vendor_cmd_handle_common+0x1a>
    9c54:	e8df f000 	tbb	[pc, r0]
    9c58:	05452809 	.word	0x05452809
    9c5c:	6d055905 	.word	0x6d055905
    9c60:	9f8a      	.short	0x9f8a
    9c62:	f06f 0015 	mvn.w	r0, #21
}
    9c66:	b007      	add	sp, #28
    9c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9c6a:	4b55      	ldr	r3, [pc, #340]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
    9c6c:	210d      	movs	r1, #13
    9c6e:	8818      	ldrh	r0, [r3, #0]
    9c70:	f00d f8e3 	bl	16e3a <bt_hci_cmd_complete_create>
    9c74:	210d      	movs	r1, #13
    9c76:	6028      	str	r0, [r5, #0]
    9c78:	3008      	adds	r0, #8
    9c7a:	f00e ff49 	bl	18b10 <net_buf_simple_add>
    9c7e:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    9c80:	2202      	movs	r2, #2
	rp->status = 0x00;
    9c82:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    9c84:	2403      	movs	r4, #3
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    9c86:	2101      	movs	r1, #1
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    9c88:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    9c8a:	70da      	strb	r2, [r3, #3]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    9c8c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    9c8e:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    9c90:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    9c92:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    9c94:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    9c96:	719c      	strb	r4, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    9c98:	71d9      	strb	r1, [r3, #7]
    9c9a:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    9c9c:	725a      	strb	r2, [r3, #9]
    9c9e:	7298      	strb	r0, [r3, #10]
    9ca0:	72d8      	strb	r0, [r3, #11]
    9ca2:	7318      	strb	r0, [r3, #12]
}
    9ca4:	b007      	add	sp, #28
    9ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9ca8:	4b45      	ldr	r3, [pc, #276]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
    9caa:	2141      	movs	r1, #65	; 0x41
    9cac:	8818      	ldrh	r0, [r3, #0]
    9cae:	f00d f8c4 	bl	16e3a <bt_hci_cmd_complete_create>
    9cb2:	2141      	movs	r1, #65	; 0x41
    9cb4:	6028      	str	r0, [r5, #0]
    9cb6:	3008      	adds	r0, #8
    9cb8:	f00e ff2a 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    9cbc:	2400      	movs	r4, #0
    9cbe:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    9cc0:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9cc2:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    9cc6:	4621      	mov	r1, r4
    9cc8:	f00c fd9e 	bl	16808 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    9ccc:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9cce:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    9cd0:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    9cd4:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    9cd8:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    9cda:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9cdc:	70ab      	strb	r3, [r5, #2]
}
    9cde:	b007      	add	sp, #28
    9ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9ce2:	4b37      	ldr	r3, [pc, #220]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
    9ce4:	2109      	movs	r1, #9
    9ce6:	8818      	ldrh	r0, [r3, #0]
    9ce8:	f00d f8a7 	bl	16e3a <bt_hci_cmd_complete_create>
    9cec:	2109      	movs	r1, #9
    9cee:	6028      	str	r0, [r5, #0]
    9cf0:	3008      	adds	r0, #8
    9cf2:	f00e ff0d 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    9cf6:	2400      	movs	r4, #0
    9cf8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    9cfc:	2208      	movs	r2, #8
    9cfe:	4621      	mov	r1, r4
    9d00:	f00c fd82 	bl	16808 <memset>
	return 0;
    9d04:	4620      	mov	r0, r4
}
    9d06:	b007      	add	sp, #28
    9d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9d0a:	6889      	ldr	r1, [r1, #8]
    9d0c:	2000      	movs	r0, #0
    9d0e:	f7ff fd11 	bl	9734 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    9d12:	4b2b      	ldr	r3, [pc, #172]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
    9d14:	2101      	movs	r1, #1
    9d16:	8818      	ldrh	r0, [r3, #0]
    9d18:	f00d f88f 	bl	16e3a <bt_hci_cmd_complete_create>
    9d1c:	2101      	movs	r1, #1
    9d1e:	4604      	mov	r4, r0
    9d20:	3008      	adds	r0, #8
    9d22:	f00e fef5 	bl	18b10 <net_buf_simple_add>
    9d26:	4603      	mov	r3, r0
	ccst->status = status;
    9d28:	2000      	movs	r0, #0
    9d2a:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    9d2c:	602c      	str	r4, [r5, #0]
}
    9d2e:	b007      	add	sp, #28
    9d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    9d32:	4e24      	ldr	r6, [pc, #144]	; (9dc4 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d34:	4f22      	ldr	r7, [pc, #136]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    9d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    9d38:	f10d 0c04 	add.w	ip, sp, #4
    9d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9d40:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d42:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    9d44:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d48:	2113      	movs	r1, #19
    9d4a:	f00d f876 	bl	16e3a <bt_hci_cmd_complete_create>
    9d4e:	2113      	movs	r1, #19
    9d50:	6028      	str	r0, [r5, #0]
    9d52:	3008      	adds	r0, #8
    9d54:	f00e fedc 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    9d58:	2400      	movs	r4, #0
    9d5a:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    9d5e:	2212      	movs	r2, #18
    9d60:	a901      	add	r1, sp, #4
    9d62:	f00c fd46 	bl	167f2 <memcpy>
	return 0;
    9d66:	4620      	mov	r0, r4
}
    9d68:	b007      	add	sp, #28
    9d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d6c:	4b14      	ldr	r3, [pc, #80]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
    9d6e:	2118      	movs	r1, #24
    9d70:	8818      	ldrh	r0, [r3, #0]
    9d72:	f00d f862 	bl	16e3a <bt_hci_cmd_complete_create>
    9d76:	2118      	movs	r1, #24
    9d78:	6028      	str	r0, [r5, #0]
    9d7a:	3008      	adds	r0, #8
    9d7c:	f00e fec8 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    9d80:	2400      	movs	r4, #0
    9d82:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    9d84:	2101      	movs	r1, #1
	rp->status = 0x00;
    9d86:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    9d8a:	f008 fb79 	bl	12480 <hci_vendor_read_static_addr>
    9d8e:	7068      	strb	r0, [r5, #1]
	return 0;
    9d90:	4620      	mov	r0, r4
}
    9d92:	b007      	add	sp, #28
    9d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9d96:	4b0a      	ldr	r3, [pc, #40]	; (9dc0 <hci_vendor_cmd_handle_common+0x178>)
    9d98:	2121      	movs	r1, #33	; 0x21
    9d9a:	8818      	ldrh	r0, [r3, #0]
    9d9c:	f00d f84d 	bl	16e3a <bt_hci_cmd_complete_create>
    9da0:	2121      	movs	r1, #33	; 0x21
    9da2:	6028      	str	r0, [r5, #0]
    9da4:	3008      	adds	r0, #8
    9da6:	f00e feb3 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    9daa:	4601      	mov	r1, r0
    9dac:	2400      	movs	r4, #0
    9dae:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    9db2:	3001      	adds	r0, #1
    9db4:	f008 fbd8 	bl	12568 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    9db8:	4620      	mov	r0, r4
}
    9dba:	b007      	add	sp, #28
    9dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dbe:	bf00      	nop
    9dc0:	20002228 	.word	0x20002228
    9dc4:	0001a61c 	.word	0x0001a61c

00009dc8 <hci_cmd_handle>:
{
    9dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    9dca:	8983      	ldrh	r3, [r0, #12]
{
    9dcc:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    9dce:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    9dd0:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    9dd2:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    9dd4:	d92f      	bls.n	9e36 <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
    9dd6:	4604      	mov	r4, r0
    9dd8:	460e      	mov	r6, r1
    9dda:	3008      	adds	r0, #8
    9ddc:	2103      	movs	r1, #3
    9dde:	f00e fec0 	bl	18b62 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    9de2:	89a2      	ldrh	r2, [r4, #12]
    9de4:	7883      	ldrb	r3, [r0, #2]
    9de6:	429a      	cmp	r2, r3
    9de8:	d325      	bcc.n	9e36 <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9dea:	8802      	ldrh	r2, [r0, #0]
    9dec:	4fb2      	ldr	r7, [pc, #712]	; (a0b8 <hci_cmd_handle+0x2f0>)
	switch (BT_OGF(_opcode)) {
    9dee:	f3c2 2385 	ubfx	r3, r2, #10, #6
    9df2:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    9df4:	b290      	uxth	r0, r2
    9df6:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
    9df8:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    9dfc:	d809      	bhi.n	9e12 <hci_cmd_handle+0x4a>
    9dfe:	b19b      	cbz	r3, 9e28 <hci_cmd_handle+0x60>
    9e00:	3b01      	subs	r3, #1
    9e02:	2b07      	cmp	r3, #7
    9e04:	d810      	bhi.n	9e28 <hci_cmd_handle+0x60>
    9e06:	e8df f003 	tbb	[pc, r3]
    9e0a:	0f1a      	.short	0x0f1a
    9e0c:	0f0f4c29 	.word	0x0f0f4c29
    9e10:	650f      	.short	0x650f
    9e12:	2b3f      	cmp	r3, #63	; 0x3f
    9e14:	d108      	bne.n	9e28 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    9e16:	aa09      	add	r2, sp, #36	; 0x24
    9e18:	4621      	mov	r1, r4
    9e1a:	4628      	mov	r0, r5
    9e1c:	f7ff ff14 	bl	9c48 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    9e20:	3016      	adds	r0, #22
    9e22:	f040 8414 	bne.w	a64e <hci_cmd_handle+0x886>
	return bt_hci_cmd_status_create(_opcode, status);
    9e26:	8838      	ldrh	r0, [r7, #0]
    9e28:	2101      	movs	r1, #1
    9e2a:	f00d f818 	bl	16e5e <bt_hci_cmd_status_create>
    9e2e:	4604      	mov	r4, r0
}
    9e30:	4620      	mov	r0, r4
    9e32:	b00f      	add	sp, #60	; 0x3c
    9e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    9e36:	2400      	movs	r4, #0
}
    9e38:	4620      	mov	r0, r4
    9e3a:	b00f      	add	sp, #60	; 0x3c
    9e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    9e3e:	2d06      	cmp	r5, #6
    9e40:	f000 83b2 	beq.w	a5a8 <hci_cmd_handle+0x7e0>
    9e44:	2d1d      	cmp	r5, #29
    9e46:	d1ef      	bne.n	9e28 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
    9e48:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    9e4a:	8818      	ldrh	r0, [r3, #0]
    9e4c:	f003 f81e 	bl	ce8c <ll_version_ind_send>
    9e50:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    9e52:	8838      	ldrh	r0, [r7, #0]
    9e54:	f00d f803 	bl	16e5e <bt_hci_cmd_status_create>
    9e58:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    9e5a:	e7e9      	b.n	9e30 <hci_cmd_handle+0x68>
	switch (ocf) {
    9e5c:	2d63      	cmp	r5, #99	; 0x63
    9e5e:	f000 83d3 	beq.w	a608 <hci_cmd_handle+0x840>
    9e62:	f200 80e7 	bhi.w	a034 <hci_cmd_handle+0x26c>
    9e66:	2d03      	cmp	r5, #3
    9e68:	f000 83a9 	beq.w	a5be <hci_cmd_handle+0x7f6>
    9e6c:	2d2d      	cmp	r5, #45	; 0x2d
    9e6e:	f040 80cd 	bne.w	a00c <hci_cmd_handle+0x244>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    9e72:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9e74:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    9e76:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    9e78:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    9e7a:	f00c ffde 	bl	16e3a <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    9e7e:	2104      	movs	r1, #4
    9e80:	9009      	str	r0, [sp, #36]	; 0x24
    9e82:	3008      	adds	r0, #8
    9e84:	f00e fe44 	bl	18b10 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    9e88:	b2b4      	uxth	r4, r6
    9e8a:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    9e8c:	1cc3      	adds	r3, r0, #3
    9e8e:	4621      	mov	r1, r4
    9e90:	463a      	mov	r2, r7
    9e92:	2002      	movs	r0, #2
    9e94:	f7ff fc9a 	bl	97cc <ll_tx_pwr_lvl_get>
	rp->status = status;
    9e98:	7028      	strb	r0, [r5, #0]
	return evt;
    9e9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    9e9c:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    9ea0:	e7c6      	b.n	9e30 <hci_cmd_handle+0x68>
	switch (ocf) {
    9ea2:	1e6a      	subs	r2, r5, #1
    9ea4:	2a08      	cmp	r2, #8
    9ea6:	d8bf      	bhi.n	9e28 <hci_cmd_handle+0x60>
    9ea8:	a301      	add	r3, pc, #4	; (adr r3, 9eb0 <hci_cmd_handle+0xe8>)
    9eaa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9eae:	bf00      	nop
    9eb0:	0000a171 	.word	0x0000a171
    9eb4:	0000a0c1 	.word	0x0000a0c1
    9eb8:	0000a08f 	.word	0x0000a08f
    9ebc:	00009e29 	.word	0x00009e29
    9ec0:	00009e29 	.word	0x00009e29
    9ec4:	00009e29 	.word	0x00009e29
    9ec8:	00009e29 	.word	0x00009e29
    9ecc:	00009e29 	.word	0x00009e29
    9ed0:	0000a06d 	.word	0x0000a06d
	switch (ocf) {
    9ed4:	1e6a      	subs	r2, r5, #1
    9ed6:	2a4a      	cmp	r2, #74	; 0x4a
    9ed8:	d8a6      	bhi.n	9e28 <hci_cmd_handle+0x60>
    9eda:	a301      	add	r3, pc, #4	; (adr r3, 9ee0 <hci_cmd_handle+0x118>)
    9edc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9ee0:	0000a1cb 	.word	0x0000a1cb
    9ee4:	0000a1a7 	.word	0x0000a1a7
    9ee8:	0000a2a9 	.word	0x0000a2a9
    9eec:	00009e29 	.word	0x00009e29
    9ef0:	0000a29f 	.word	0x0000a29f
    9ef4:	00009e29 	.word	0x00009e29
    9ef8:	00009e29 	.word	0x00009e29
    9efc:	00009e29 	.word	0x00009e29
    9f00:	00009e29 	.word	0x00009e29
    9f04:	00009e29 	.word	0x00009e29
    9f08:	0000a287 	.word	0x0000a287
    9f0c:	0000a257 	.word	0x0000a257
    9f10:	0000a223 	.word	0x0000a223
    9f14:	0000a21b 	.word	0x0000a21b
    9f18:	00009e29 	.word	0x00009e29
    9f1c:	00009e29 	.word	0x00009e29
    9f20:	00009e29 	.word	0x00009e29
    9f24:	00009e29 	.word	0x00009e29
    9f28:	0000a1f5 	.word	0x0000a1f5
    9f2c:	0000a1d7 	.word	0x0000a1d7
    9f30:	0000a4e1 	.word	0x0000a4e1
    9f34:	0000a4c1 	.word	0x0000a4c1
    9f38:	0000a48d 	.word	0x0000a48d
    9f3c:	0000a46b 	.word	0x0000a46b
    9f40:	0000a44d 	.word	0x0000a44d
    9f44:	00009e29 	.word	0x00009e29
    9f48:	00009e29 	.word	0x00009e29
    9f4c:	0000a417 	.word	0x0000a417
    9f50:	00009e29 	.word	0x00009e29
    9f54:	00009e29 	.word	0x00009e29
    9f58:	00009e29 	.word	0x00009e29
    9f5c:	0000a401 	.word	0x0000a401
    9f60:	0000a3e9 	.word	0x0000a3e9
    9f64:	0000a599 	.word	0x0000a599
    9f68:	0000a563 	.word	0x0000a563
    9f6c:	0000a557 	.word	0x0000a557
    9f70:	00009e29 	.word	0x00009e29
    9f74:	00009e29 	.word	0x00009e29
    9f78:	00009e29 	.word	0x00009e29
    9f7c:	00009e29 	.word	0x00009e29
    9f80:	00009e29 	.word	0x00009e29
    9f84:	00009e29 	.word	0x00009e29
    9f88:	00009e29 	.word	0x00009e29
    9f8c:	00009e29 	.word	0x00009e29
    9f90:	00009e29 	.word	0x00009e29
    9f94:	00009e29 	.word	0x00009e29
    9f98:	0000a50b 	.word	0x0000a50b
    9f9c:	0000a38f 	.word	0x0000a38f
    9fa0:	0000a371 	.word	0x0000a371
    9fa4:	0000a315 	.word	0x0000a315
    9fa8:	00009e29 	.word	0x00009e29
    9fac:	00009e29 	.word	0x00009e29
    9fb0:	00009e29 	.word	0x00009e29
    9fb4:	00009e29 	.word	0x00009e29
    9fb8:	00009e29 	.word	0x00009e29
    9fbc:	00009e29 	.word	0x00009e29
    9fc0:	00009e29 	.word	0x00009e29
    9fc4:	00009e29 	.word	0x00009e29
    9fc8:	00009e29 	.word	0x00009e29
    9fcc:	00009e29 	.word	0x00009e29
    9fd0:	00009e29 	.word	0x00009e29
    9fd4:	00009e29 	.word	0x00009e29
    9fd8:	00009e29 	.word	0x00009e29
    9fdc:	00009e29 	.word	0x00009e29
    9fe0:	00009e29 	.word	0x00009e29
    9fe4:	00009e29 	.word	0x00009e29
    9fe8:	00009e29 	.word	0x00009e29
    9fec:	00009e29 	.word	0x00009e29
    9ff0:	00009e29 	.word	0x00009e29
    9ff4:	00009e29 	.word	0x00009e29
    9ff8:	00009e29 	.word	0x00009e29
    9ffc:	00009e29 	.word	0x00009e29
    a000:	00009e29 	.word	0x00009e29
    a004:	00009e29 	.word	0x00009e29
    a008:	0000a2f1 	.word	0x0000a2f1
	switch (ocf) {
    a00c:	2d01      	cmp	r5, #1
    a00e:	f47f af0b 	bne.w	9e28 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    a012:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    a014:	4b29      	ldr	r3, [pc, #164]	; (a0bc <hci_cmd_handle+0x2f4>)
    a016:	6811      	ldr	r1, [r2, #0]
    a018:	6852      	ldr	r2, [r2, #4]
    a01a:	6019      	str	r1, [r3, #0]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    a01c:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a01e:	2101      	movs	r1, #1
    a020:	f00c ff0b 	bl	16e3a <bt_hci_cmd_complete_create>
    a024:	2101      	movs	r1, #1
    a026:	4604      	mov	r4, r0
    a028:	3008      	adds	r0, #8
    a02a:	f00e fd71 	bl	18b10 <net_buf_simple_add>
	ccst->status = status;
    a02e:	2300      	movs	r3, #0
    a030:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    a032:	e6fd      	b.n	9e30 <hci_cmd_handle+0x68>
	switch (ocf) {
    a034:	2d7b      	cmp	r5, #123	; 0x7b
    a036:	f000 82ea 	beq.w	a60e <hci_cmd_handle+0x846>
    a03a:	2d7c      	cmp	r5, #124	; 0x7c
    a03c:	f47f aef4 	bne.w	9e28 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    a040:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a042:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    a044:	8859      	ldrh	r1, [r3, #2]
    a046:	b2a8      	uxth	r0, r5
    a048:	f003 f842 	bl	d0d0 <ll_apto_set>
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a04c:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a04e:	2103      	movs	r1, #3
    a050:	8838      	ldrh	r0, [r7, #0]
    a052:	f00c fef2 	bl	16e3a <bt_hci_cmd_complete_create>
    a056:	2103      	movs	r1, #3
    a058:	4603      	mov	r3, r0
    a05a:	3008      	adds	r0, #8
    a05c:	9309      	str	r3, [sp, #36]	; 0x24
    a05e:	f00e fd57 	bl	18b10 <net_buf_simple_add>
	rp->status = status;
    a062:	7004      	strb	r4, [r0, #0]
	return evt;
    a064:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    a066:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    a06a:	e6e1      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a06c:	2107      	movs	r1, #7
    a06e:	f00c fee4 	bl	16e3a <bt_hci_cmd_complete_create>
    a072:	2107      	movs	r1, #7
    a074:	4603      	mov	r3, r0
    a076:	3008      	adds	r0, #8
    a078:	9309      	str	r3, [sp, #36]	; 0x24
    a07a:	f00e fd49 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a07e:	4601      	mov	r1, r0
    a080:	2000      	movs	r0, #0
    a082:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    a086:	f7ff fb89 	bl	979c <ll_addr_read>
	return evt;
    a08a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a08c:	e6d0      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a08e:	2109      	movs	r1, #9
    a090:	f00c fed3 	bl	16e3a <bt_hci_cmd_complete_create>
    a094:	2109      	movs	r1, #9
    a096:	4603      	mov	r3, r0
    a098:	3008      	adds	r0, #8
    a09a:	9309      	str	r3, [sp, #36]	; 0x24
    a09c:	f00e fd38 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a0a0:	2100      	movs	r1, #0
    a0a2:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a0a4:	2208      	movs	r2, #8
	rp->status = 0x00;
    a0a6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a0aa:	f00c fbad 	bl	16808 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    a0ae:	2360      	movs	r3, #96	; 0x60
	return evt;
    a0b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->features[4] = (1 << 5) | (1 << 6);
    a0b2:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    a0b4:	e6bc      	b.n	9e30 <hci_cmd_handle+0x68>
    a0b6:	bf00      	nop
    a0b8:	20002228 	.word	0x20002228
    a0bc:	20000150 	.word	0x20000150
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a0c0:	2141      	movs	r1, #65	; 0x41
    a0c2:	f00c feba 	bl	16e3a <bt_hci_cmd_complete_create>
    a0c6:	2141      	movs	r1, #65	; 0x41
    a0c8:	4603      	mov	r3, r0
    a0ca:	3008      	adds	r0, #8
    a0cc:	9309      	str	r3, [sp, #36]	; 0x24
    a0ce:	f00e fd1f 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a0d2:	2100      	movs	r1, #0
    a0d4:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a0d6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    a0d8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a0dc:	f00c fb94 	bl	16808 <memset>
	rp->commands[10] |= BIT(2);
    a0e0:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    a0e2:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[0] |= BIT(5);
    a0e4:	7868      	ldrb	r0, [r5, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    a0e6:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[10] |= BIT(2);
    a0e8:	f043 0304 	orr.w	r3, r3, #4
    a0ec:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
    a0ee:	7c2b      	ldrb	r3, [r5, #16]
    a0f0:	f043 0302 	orr.w	r3, r3, #2
    a0f4:	742b      	strb	r3, [r5, #16]
	rp->commands[27] |= BIT(6) | BIT(7);
    a0f6:	7f2b      	ldrb	r3, [r5, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    a0f8:	f063 0303 	orn	r3, r3, #3
    a0fc:	772b      	strb	r3, [r5, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    a0fe:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    a102:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    a106:	f063 030f 	orn	r3, r3, #15
	rp->commands[14] |= BIT(3) | BIT(5);
    a10a:	73ea      	strb	r2, [r5, #15]
	rp->commands[33] |= BIT(6) | BIT(7);
    a10c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	rp->commands[28] |= BIT(3);
    a110:	7f6a      	ldrb	r2, [r5, #29]
	rp->commands[34] |= BIT(0);
    a112:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	rp->commands[28] |= BIT(0);
    a116:	f042 0209 	orr.w	r2, r2, #9
	rp->commands[34] |= BIT(0);
    a11a:	f043 0301 	orr.w	r3, r3, #1
	rp->commands[28] |= BIT(0);
    a11e:	776a      	strb	r2, [r5, #29]
	rp->commands[34] |= BIT(0);
    a120:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	rp->commands[35] |= BIT(6);
    a124:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    a128:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[0] |= BIT(5);
    a12c:	f040 0020 	orr.w	r0, r0, #32
	rp->commands[5] |= BIT(6) | BIT(7);
    a130:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[35] |= BIT(6);
    a134:	f042 0278 	orr.w	r2, r2, #120	; 0x78
	rp->commands[38] |= BIT(7);
    a138:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[0] |= BIT(5);
    a13c:	7068      	strb	r0, [r5, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    a13e:	71a9      	strb	r1, [r5, #6]
	rp->commands[22] |= BIT(2);
    a140:	7de8      	ldrb	r0, [r5, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    a142:	7ea9      	ldrb	r1, [r5, #26]
	rp->commands[35] |= BIT(6);
    a144:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    a148:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	rp->commands[26] |= BIT(4) | BIT(5);
    a14c:	7eea      	ldrb	r2, [r5, #27]
	rp->commands[32] |= BIT(4) | BIT(5);
    a14e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	return evt;
    a152:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->commands[22] |= BIT(2);
    a154:	f040 0004 	orr.w	r0, r0, #4
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    a158:	f041 0117 	orr.w	r1, r1, #23
	rp->commands[26] |= BIT(4) | BIT(5);
    a15c:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
	rp->commands[32] |= BIT(4) | BIT(5);
    a160:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[22] |= BIT(2);
    a164:	75e8      	strb	r0, [r5, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    a166:	76a9      	strb	r1, [r5, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    a168:	76ea      	strb	r2, [r5, #27]
	rp->commands[32] |= BIT(4) | BIT(5);
    a16a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (err == -EINVAL) {
    a16e:	e65f      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a170:	2109      	movs	r1, #9
    a172:	f00c fe62 	bl	16e3a <bt_hci_cmd_complete_create>
    a176:	2109      	movs	r1, #9
    a178:	4603      	mov	r3, r0
    a17a:	3008      	adds	r0, #8
    a17c:	9309      	str	r3, [sp, #36]	; 0x24
    a17e:	f00e fcc7 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a182:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    a184:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    a186:	f04f 32ff 	mov.w	r2, #4294967295
	rp->status = 0x00;
    a18a:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    a18c:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
    a190:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    a192:	7083      	strb	r3, [r0, #2]
    a194:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    a196:	2305      	movs	r3, #5
    a198:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
    a19a:	7101      	strb	r1, [r0, #4]
	return evt;
    a19c:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    a19e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    a1a0:	71c2      	strb	r2, [r0, #7]
    a1a2:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    a1a4:	e644      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a1a6:	2104      	movs	r1, #4
    a1a8:	f00c fe47 	bl	16e3a <bt_hci_cmd_complete_create>
    a1ac:	2104      	movs	r1, #4
    a1ae:	4603      	mov	r3, r0
    a1b0:	3008      	adds	r0, #8
    a1b2:	9309      	str	r3, [sp, #36]	; 0x24
    a1b4:	f00e fcac 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a1b8:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    a1ba:	2103      	movs	r1, #3
	rp->status = 0x00;
    a1bc:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    a1be:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    a1c0:	70c1      	strb	r1, [r0, #3]
	return evt;
    a1c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    a1c4:	7042      	strb	r2, [r0, #1]
    a1c6:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    a1c8:	e632      	b.n	9e30 <hci_cmd_handle+0x68>
    a1ca:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    a1cc:	4bc1      	ldr	r3, [pc, #772]	; (a4d4 <hci_cmd_handle+0x70c>)
    a1ce:	6811      	ldr	r1, [r2, #0]
    a1d0:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    a1d2:	6019      	str	r1, [r3, #0]
    a1d4:	e722      	b.n	a01c <hci_cmd_handle+0x254>
	status = ll_chm_update(&cmd->ch_map[0]);
    a1d6:	68a0      	ldr	r0, [r4, #8]
    a1d8:	f005 fc48 	bl	fa6c <ll_chm_update>
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    a1dc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a1de:	8838      	ldrh	r0, [r7, #0]
    a1e0:	2101      	movs	r1, #1
    a1e2:	f00c fe2a 	bl	16e3a <bt_hci_cmd_complete_create>
    a1e6:	2101      	movs	r1, #1
    a1e8:	4604      	mov	r4, r0
    a1ea:	3008      	adds	r0, #8
    a1ec:	f00e fc90 	bl	18b10 <net_buf_simple_add>
	ccst->status = status;
    a1f0:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    a1f2:	e61d      	b.n	9e30 <hci_cmd_handle+0x68>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    a1f4:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    a1f6:	890a      	ldrh	r2, [r1, #8]
    a1f8:	884b      	ldrh	r3, [r1, #2]
    a1fa:	8808      	ldrh	r0, [r1, #0]
    a1fc:	9202      	str	r2, [sp, #8]
    a1fe:	88ca      	ldrh	r2, [r1, #6]
    a200:	9201      	str	r2, [sp, #4]
    a202:	8889      	ldrh	r1, [r1, #4]
    a204:	9100      	str	r1, [sp, #0]
    a206:	2200      	movs	r2, #0
    a208:	4611      	mov	r1, r2
    a20a:	f002 fd37 	bl	cc7c <ll_conn_update>
    a20e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a210:	8838      	ldrh	r0, [r7, #0]
    a212:	f00c fe24 	bl	16e5e <bt_hci_cmd_status_create>
    a216:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a218:	e60a      	b.n	9e30 <hci_cmd_handle+0x68>
	status = ll_connect_disable(node_rx);
    a21a:	4630      	mov	r0, r6
    a21c:	f005 f8ae 	bl	f37c <ll_connect_disable>
    a220:	e7dc      	b.n	a1dc <hci_cmd_handle+0x414>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    a222:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    a224:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    a228:	7963      	ldrb	r3, [r4, #5]
    a22a:	7922      	ldrb	r2, [r4, #4]
    a22c:	8861      	ldrh	r1, [r4, #2]
    a22e:	8820      	ldrh	r0, [r4, #0]
    a230:	9504      	str	r5, [sp, #16]
    a232:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    a236:	9503      	str	r5, [sp, #12]
    a238:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    a23c:	9502      	str	r5, [sp, #8]
    a23e:	7b25      	ldrb	r5, [r4, #12]
    a240:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
    a242:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
    a244:	9400      	str	r4, [sp, #0]
    a246:	f7f7 ff4b 	bl	20e0 <ll_create_connection>
    a24a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a24c:	8838      	ldrh	r0, [r7, #0]
    a24e:	f00c fe06 	bl	16e5e <bt_hci_cmd_status_create>
    a252:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a254:	e5ec      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    a256:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    a258:	7818      	ldrb	r0, [r3, #0]
    a25a:	2800      	cmp	r0, #0
    a25c:	f000 81f2 	beq.w	a644 <hci_cmd_handle+0x87c>
    a260:	785b      	ldrb	r3, [r3, #1]
    a262:	2b00      	cmp	r3, #0
    a264:	f000 81ee 	beq.w	a644 <hci_cmd_handle+0x87c>
			dup_count = 0;
    a268:	499b      	ldr	r1, [pc, #620]	; (a4d8 <hci_cmd_handle+0x710>)
			dup_curr = 0U;
    a26a:	4a9c      	ldr	r2, [pc, #624]	; (a4dc <hci_cmd_handle+0x714>)
			dup_count = 0;
    a26c:	2300      	movs	r3, #0
    a26e:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
    a270:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    a272:	f001 ffc9 	bl	c208 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    a276:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
    a278:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a27a:	f04f 0101 	mov.w	r1, #1
    a27e:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
    a280:	bf08      	it	eq
    a282:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a284:	e7ad      	b.n	a1e2 <hci_cmd_handle+0x41a>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    a286:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    a288:	7963      	ldrb	r3, [r4, #5]
    a28a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    a28e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a292:	7820      	ldrb	r0, [r4, #0]
    a294:	79a4      	ldrb	r4, [r4, #6]
    a296:	9400      	str	r4, [sp, #0]
    a298:	f7f6 f8a2 	bl	3e0 <ll_scan_params_set>
    a29c:	e79e      	b.n	a1dc <hci_cmd_handle+0x414>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    a29e:	68a1      	ldr	r1, [r4, #8]
    a2a0:	2001      	movs	r0, #1
    a2a2:	f7ff fa47 	bl	9734 <ll_addr_set>
    a2a6:	e799      	b.n	a1dc <hci_cmd_handle+0x414>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a2a8:	2109      	movs	r1, #9
    a2aa:	f00c fdc6 	bl	16e3a <bt_hci_cmd_complete_create>
    a2ae:	2109      	movs	r1, #9
    a2b0:	4603      	mov	r3, r0
    a2b2:	3008      	adds	r0, #8
    a2b4:	9309      	str	r3, [sp, #36]	; 0x24
    a2b6:	f00e fc2b 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a2ba:	2100      	movs	r1, #0
    a2bc:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a2be:	2208      	movs	r2, #8
	rp->status = 0x00;
    a2c0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a2c4:	f00c faa0 	bl	16808 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    a2c8:	f000 fe4e 	bl	af68 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    a2cc:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    a2ce:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    a2d2:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    a2d4:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    a2d6:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    a2d8:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
    a2da:	70ac      	strb	r4, [r5, #2]
    a2dc:	f3c1 2007 	ubfx	r0, r1, #8, #8
    a2e0:	712b      	strb	r3, [r5, #4]
    a2e2:	0a13      	lsrs	r3, r2, #8
	return evt;
    a2e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
	dst[0] = val;
    a2e6:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
    a2e8:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
    a2ea:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
    a2ec:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
    a2ee:	e59f      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a2f0:	2103      	movs	r1, #3
    a2f2:	f00c fda2 	bl	16e3a <bt_hci_cmd_complete_create>
    a2f6:	2103      	movs	r1, #3
    a2f8:	4603      	mov	r3, r0
    a2fa:	3008      	adds	r0, #8
    a2fc:	9309      	str	r3, [sp, #36]	; 0x24
    a2fe:	f00e fc07 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a302:	4601      	mov	r1, r0
    a304:	2300      	movs	r3, #0
    a306:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    a30a:	3001      	adds	r0, #1
    a30c:	f7ff fa6e 	bl	97ec <ll_tx_pwr_get>
	return evt;
    a310:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a312:	e58d      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    a314:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    a316:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    a318:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    a31a:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    a31c:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    a320:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    a322:	bf48      	it	mi
    a324:	f041 0103 	orrmi.w	r1, r1, #3
    a328:	7913      	ldrb	r3, [r2, #4]
    a32a:	bf48      	it	mi
    a32c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    a32e:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    a330:	bf44      	itt	mi
    a332:	f043 0303 	orrmi.w	r3, r3, #3
    a336:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    a338:	ea41 0203 	orr.w	r2, r1, r3
    a33c:	f032 0203 	bics.w	r2, r2, #3
    a340:	f040 818e 	bne.w	a660 <hci_cmd_handle+0x898>
	if (!(cmd->tx_phys & 0x07) ||
    a344:	074c      	lsls	r4, r1, #29
    a346:	f000 8185 	beq.w	a654 <hci_cmd_handle+0x88c>
    a34a:	075a      	lsls	r2, r3, #29
    a34c:	f000 8182 	beq.w	a654 <hci_cmd_handle+0x88c>
	if (phy_opts & 0x03) {
    a350:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
    a354:	bf1c      	itt	ne
    a356:	f105 35ff 	addne.w	r5, r5, #4294967295
		phy_opts &= 1;
    a35a:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    a35e:	4630      	mov	r0, r6
    a360:	f002 fe4a 	bl	cff8 <ll_phy_req_send>
    a364:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a366:	8838      	ldrh	r0, [r7, #0]
    a368:	f00c fd79 	bl	16e5e <bt_hci_cmd_status_create>
    a36c:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a36e:	e55f      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    a370:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    a372:	781a      	ldrb	r2, [r3, #0]
    a374:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    a376:	bf4a      	itet	mi
    a378:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    a37a:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    a37c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    a37e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    a380:	bf4a      	itet	mi
    a382:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    a384:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    a386:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    a388:	f002 fe2c 	bl	cfe4 <ll_phy_default_set>
    a38c:	e726      	b.n	a1dc <hci_cmd_handle+0x414>
	handle = sys_le16_to_cpu(cmd->handle);
    a38e:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a390:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    a392:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a394:	f00c fd51 	bl	16e3a <bt_hci_cmd_complete_create>
    a398:	2105      	movs	r1, #5
    a39a:	4603      	mov	r3, r0
    a39c:	3008      	adds	r0, #8
    a39e:	9309      	str	r3, [sp, #36]	; 0x24
    a3a0:	f00e fbb6 	bl	18b10 <net_buf_simple_add>
    a3a4:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    a3a6:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    a3a8:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    a3aa:	1ce9      	adds	r1, r5, #3
    a3ac:	f002 fdfc 	bl	cfa8 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    a3b0:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    a3b2:	7028      	strb	r0, [r5, #0]
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	fa93 f2a3 	rbit	r2, r3
    a3ba:	792b      	ldrb	r3, [r5, #4]
    a3bc:	fab2 f282 	clz	r2, r2
    a3c0:	bf08      	it	eq
    a3c2:	f04f 32ff 	moveq.w	r2, #4294967295
    a3c6:	2b00      	cmp	r3, #0
    a3c8:	fa93 f3a3 	rbit	r3, r3
    a3cc:	fab3 f383 	clz	r3, r3
    a3d0:	f102 0201 	add.w	r2, r2, #1
    a3d4:	bf08      	it	eq
    a3d6:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    a3da:	70ea      	strb	r2, [r5, #3]
    a3dc:	3301      	adds	r3, #1
	return evt;
    a3de:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    a3e0:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    a3e2:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    a3e6:	e523      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    a3e8:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    a3ea:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
    a3ec:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    a3ee:	7892      	ldrb	r2, [r2, #2]
    a3f0:	9300      	str	r3, [sp, #0]
    a3f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a3f6:	2102      	movs	r1, #2
    a3f8:	b2a8      	uxth	r0, r5
    a3fa:	f002 fc3f 	bl	cc7c <ll_conn_update>
    a3fe:	e625      	b.n	a04c <hci_cmd_handle+0x284>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    a400:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a402:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a404:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a406:	8853      	ldrh	r3, [r2, #2]
    a408:	9102      	str	r1, [sp, #8]
    a40a:	88d1      	ldrh	r1, [r2, #6]
    a40c:	9101      	str	r1, [sp, #4]
    a40e:	8891      	ldrh	r1, [r2, #4]
    a410:	9100      	str	r1, [sp, #0]
    a412:	2200      	movs	r2, #0
    a414:	e7ef      	b.n	a3f6 <hci_cmd_handle+0x62e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a416:	2109      	movs	r1, #9
    a418:	f00c fd0f 	bl	16e3a <bt_hci_cmd_complete_create>
    a41c:	2109      	movs	r1, #9
    a41e:	4603      	mov	r3, r0
    a420:	3008      	adds	r0, #8
    a422:	9309      	str	r3, [sp, #36]	; 0x24
    a424:	f00e fb74 	bl	18b10 <net_buf_simple_add>
	dst[0] = val;
    a428:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
    a42a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    a42c:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
    a42e:	220f      	movs	r2, #15
    a430:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    a432:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    a434:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    a436:	2413      	movs	r4, #19
    a438:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    a43a:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
    a43c:	2202      	movs	r2, #2
    a43e:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    a440:	7141      	strb	r1, [r0, #5]
	return evt;
    a442:	9c09      	ldr	r4, [sp, #36]	; 0x24
	dst[1] = val >> 8;
    a444:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    a446:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    a448:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    a44a:	e4f1      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    a44c:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
    a44e:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    a450:	f102 030c 	add.w	r3, r2, #12
    a454:	f831 0b02 	ldrh.w	r0, [r1], #2
    a458:	320a      	adds	r2, #10
    a45a:	f004 ffdd 	bl	f418 <ll_enc_req_send>
    a45e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a460:	8838      	ldrh	r0, [r7, #0]
    a462:	f00c fcfc 	bl	16e5e <bt_hci_cmd_status_create>
    a466:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a468:	e4e2      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a46a:	2109      	movs	r1, #9
    a46c:	f00c fce5 	bl	16e3a <bt_hci_cmd_complete_create>
    a470:	2109      	movs	r1, #9
    a472:	4603      	mov	r3, r0
    a474:	3008      	adds	r0, #8
    a476:	9309      	str	r3, [sp, #36]	; 0x24
    a478:	f00e fb4a 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a47c:	2300      	movs	r3, #0
    a47e:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    a482:	2108      	movs	r1, #8
    a484:	f005 fe68 	bl	10158 <lll_csrand_get>
	return evt;
    a488:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a48a:	e4d1      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    a48c:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    a48e:	aa0a      	add	r2, sp, #40	; 0x28
    a490:	2300      	movs	r3, #0
    a492:	f100 0110 	add.w	r1, r0, #16
    a496:	f007 fa63 	bl	11960 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a49a:	2111      	movs	r1, #17
    a49c:	8838      	ldrh	r0, [r7, #0]
    a49e:	f00c fccc 	bl	16e3a <bt_hci_cmd_complete_create>
    a4a2:	2111      	movs	r1, #17
    a4a4:	4603      	mov	r3, r0
    a4a6:	3008      	adds	r0, #8
    a4a8:	9309      	str	r3, [sp, #36]	; 0x24
    a4aa:	f00e fb31 	bl	18b10 <net_buf_simple_add>
	rp->status = 0x00;
    a4ae:	2300      	movs	r3, #0
    a4b0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    a4b4:	2210      	movs	r2, #16
    a4b6:	a90a      	add	r1, sp, #40	; 0x28
    a4b8:	f00c f99b 	bl	167f2 <memcpy>
	return evt;
    a4bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a4be:	e4b7      	b.n	9e30 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    a4c0:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    a4c2:	8818      	ldrh	r0, [r3, #0]
    a4c4:	f002 fcc6 	bl	ce54 <ll_feature_req_send>
    a4c8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a4ca:	8838      	ldrh	r0, [r7, #0]
    a4cc:	f00c fcc7 	bl	16e5e <bt_hci_cmd_status_create>
    a4d0:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a4d2:	e4ad      	b.n	9e30 <hci_cmd_handle+0x68>
    a4d4:	20000158 	.word	0x20000158
    a4d8:	200014c8 	.word	0x200014c8
    a4dc:	200014cc 	.word	0x200014cc
	handle = sys_le16_to_cpu(cmd->handle);
    a4e0:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a4e2:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    a4e4:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a4e6:	f00c fca8 	bl	16e3a <bt_hci_cmd_complete_create>
    a4ea:	2108      	movs	r1, #8
    a4ec:	4603      	mov	r3, r0
    a4ee:	4408      	add	r0, r1
    a4f0:	9309      	str	r3, [sp, #36]	; 0x24
    a4f2:	f00e fb0d 	bl	18b10 <net_buf_simple_add>
    a4f6:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    a4f8:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    a4fa:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    a4fc:	f002 fc48 	bl	cd90 <ll_chm_get>
	rp->status = status;
    a500:	7028      	strb	r0, [r5, #0]
	return evt;
    a502:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
    a504:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    a508:	e492      	b.n	9e30 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a50a:	2109      	movs	r1, #9
    a50c:	f00c fc95 	bl	16e3a <bt_hci_cmd_complete_create>
    a510:	2109      	movs	r1, #9
    a512:	4603      	mov	r3, r0
    a514:	3008      	adds	r0, #8
    a516:	9309      	str	r3, [sp, #36]	; 0x24
    a518:	f00e fafa 	bl	18b10 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    a51c:	ab0a      	add	r3, sp, #40	; 0x28
    a51e:	4605      	mov	r5, r0
    a520:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    a524:	a908      	add	r1, sp, #32
    a526:	f10d 001e 	add.w	r0, sp, #30
    a52a:	f002 fd31 	bl	cf90 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    a52e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    a532:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    a536:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    a53a:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    a53e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    a542:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
    a546:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    a548:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    a54c:	702a      	strb	r2, [r5, #0]
	return evt;
    a54e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    a550:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
    a554:	e46c      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    a556:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    a558:	8859      	ldrh	r1, [r3, #2]
    a55a:	8818      	ldrh	r0, [r3, #0]
    a55c:	f002 fd0e 	bl	cf7c <ll_length_default_set>
    a560:	e63c      	b.n	a1dc <hci_cmd_handle+0x414>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a562:	2105      	movs	r1, #5
    a564:	f00c fc69 	bl	16e3a <bt_hci_cmd_complete_create>
    a568:	2105      	movs	r1, #5
    a56a:	4603      	mov	r3, r0
    a56c:	3008      	adds	r0, #8
    a56e:	9309      	str	r3, [sp, #36]	; 0x24
    a570:	f00e face 	bl	18b10 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    a574:	a90a      	add	r1, sp, #40	; 0x28
    a576:	4605      	mov	r5, r0
    a578:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    a57c:	f002 fcf2 	bl	cf64 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    a580:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    a584:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
    a588:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    a58a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    a58e:	702a      	strb	r2, [r5, #0]
	return evt;
    a590:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    a592:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
    a596:	e44b      	b.n	9e30 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    a598:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a59a:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    a59c:	889a      	ldrh	r2, [r3, #4]
    a59e:	8859      	ldrh	r1, [r3, #2]
    a5a0:	b2a8      	uxth	r0, r5
    a5a2:	f002 fc8f 	bl	cec4 <ll_length_req_send>
    a5a6:	e551      	b.n	a04c <hci_cmd_handle+0x284>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    a5a8:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    a5aa:	7899      	ldrb	r1, [r3, #2]
    a5ac:	8818      	ldrh	r0, [r3, #0]
    a5ae:	f002 fc0f 	bl	cdd0 <ll_terminate_ind_send>
    a5b2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a5b4:	8838      	ldrh	r0, [r7, #0]
    a5b6:	f00c fc52 	bl	16e5e <bt_hci_cmd_status_create>
    a5ba:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a5bc:	e438      	b.n	9e30 <hci_cmd_handle+0x68>
	dup_count = DUP_FILTER_DISABLED;
    a5be:	482b      	ldr	r0, [pc, #172]	; (a66c <hci_cmd_handle+0x8a4>)
	event_mask = DEFAULT_EVENT_MASK;
    a5c0:	492b      	ldr	r1, [pc, #172]	; (a670 <hci_cmd_handle+0x8a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a5c2:	4a2c      	ldr	r2, [pc, #176]	; (a674 <hci_cmd_handle+0x8ac>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a5c4:	4b2c      	ldr	r3, [pc, #176]	; (a678 <hci_cmd_handle+0x8b0>)
	dup_count = DUP_FILTER_DISABLED;
    a5c6:	f04f 34ff 	mov.w	r4, #4294967295
    a5ca:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
    a5cc:	f641 75ff 	movw	r5, #8191	; 0x1fff
    a5d0:	f04f 34ff 	mov.w	r4, #4294967295
    a5d4:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a5d8:	2000      	movs	r0, #0
    a5da:	2100      	movs	r1, #0
    a5dc:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a5e0:	201f      	movs	r0, #31
    a5e2:	2100      	movs	r1, #0
    a5e4:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    a5e8:	f001 fce8 	bl	bfbc <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a5ec:	2101      	movs	r1, #1
    a5ee:	8838      	ldrh	r0, [r7, #0]
    a5f0:	f00c fc23 	bl	16e3a <bt_hci_cmd_complete_create>
    a5f4:	2101      	movs	r1, #1
    a5f6:	4604      	mov	r4, r0
    a5f8:	3008      	adds	r0, #8
    a5fa:	f00e fa89 	bl	18b10 <net_buf_simple_add>
	conn_count = 0U;
    a5fe:	4a1f      	ldr	r2, [pc, #124]	; (a67c <hci_cmd_handle+0x8b4>)
	ccst->status = status;
    a600:	2300      	movs	r3, #0
    a602:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    a604:	6013      	str	r3, [r2, #0]
	if (err == -EINVAL) {
    a606:	e413      	b.n	9e30 <hci_cmd_handle+0x68>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    a608:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    a60a:	4b1a      	ldr	r3, [pc, #104]	; (a674 <hci_cmd_handle+0x8ac>)
    a60c:	e5df      	b.n	a1ce <hci_cmd_handle+0x406>
	handle = sys_le16_to_cpu(cmd->handle);
    a60e:	68a3      	ldr	r3, [r4, #8]
    a610:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    a612:	a90a      	add	r1, sp, #40	; 0x28
    a614:	b2a8      	uxth	r0, r5
    a616:	f002 fd37 	bl	d088 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a61a:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    a61c:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a61e:	8838      	ldrh	r0, [r7, #0]
    a620:	f00c fc0b 	bl	16e3a <bt_hci_cmd_complete_create>
    a624:	2105      	movs	r1, #5
    a626:	4603      	mov	r3, r0
    a628:	3008      	adds	r0, #8
    a62a:	9309      	str	r3, [sp, #36]	; 0x24
    a62c:	f00e fa70 	bl	18b10 <net_buf_simple_add>
	rp->status = status;
    a630:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    a632:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    a636:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
    a63a:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    a63c:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
    a640:	f7ff bbf6 	b.w	9e30 <hci_cmd_handle+0x68>
		dup_count = DUP_FILTER_DISABLED;
    a644:	4b09      	ldr	r3, [pc, #36]	; (a66c <hci_cmd_handle+0x8a4>)
    a646:	f04f 32ff 	mov.w	r2, #4294967295
    a64a:	601a      	str	r2, [r3, #0]
    a64c:	e611      	b.n	a272 <hci_cmd_handle+0x4aa>
	return evt;
    a64e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a650:	f7ff bbee 	b.w	9e30 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
    a654:	2112      	movs	r1, #18
    a656:	f00c fc02 	bl	16e5e <bt_hci_cmd_status_create>
    a65a:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a65c:	f7ff bbe8 	b.w	9e30 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
    a660:	2111      	movs	r1, #17
    a662:	f00c fbfc 	bl	16e5e <bt_hci_cmd_status_create>
    a666:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    a668:	f7ff bbe2 	b.w	9e30 <hci_cmd_handle+0x68>
    a66c:	200014c8 	.word	0x200014c8
    a670:	20000150 	.word	0x20000150
    a674:	20000c50 	.word	0x20000c50
    a678:	20000158 	.word	0x20000158
    a67c:	200014c4 	.word	0x200014c4

0000a680 <hci_acl_handle>:
{
    a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    a684:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    a686:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    a688:	2b03      	cmp	r3, #3
	*evt = NULL;
    a68a:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    a68c:	d918      	bls.n	a6c0 <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
    a68e:	4605      	mov	r5, r0
    a690:	4688      	mov	r8, r1
    a692:	3008      	adds	r0, #8
    a694:	2104      	movs	r1, #4
    a696:	f00e fa64 	bl	18b62 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    a69a:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    a69c:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    a69e:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    a6a2:	42b3      	cmp	r3, r6
    a6a4:	d30c      	bcc.n	a6c0 <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    a6a6:	2e1b      	cmp	r6, #27
    a6a8:	d80a      	bhi.n	a6c0 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    a6aa:	f002 fa99 	bl	cbe0 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    a6ae:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    a6b2:	4604      	mov	r4, r0
    a6b4:	b318      	cbz	r0, a6fe <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    a6b6:	08bb      	lsrs	r3, r7, #2
    a6b8:	d102      	bne.n	a6c0 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    a6ba:	b1d7      	cbz	r7, a6f2 <hci_acl_handle+0x72>
    a6bc:	2f01      	cmp	r7, #1
    a6be:	d003      	beq.n	a6c8 <hci_acl_handle+0x48>
		return -EINVAL;
    a6c0:	f06f 0015 	mvn.w	r0, #21
}
    a6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    a6c8:	7903      	ldrb	r3, [r0, #4]
    a6ca:	f367 0301 	bfi	r3, r7, #0, #2
    a6ce:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    a6d0:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    a6d2:	68a9      	ldr	r1, [r5, #8]
    a6d4:	4632      	mov	r2, r6
    a6d6:	1de0      	adds	r0, r4, #7
    a6d8:	f00c f88b 	bl	167f2 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    a6dc:	4621      	mov	r1, r4
    a6de:	f3c9 000b 	ubfx	r0, r9, #0, #12
    a6e2:	f002 fa89 	bl	cbf8 <ll_tx_mem_enqueue>
    a6e6:	2800      	cmp	r0, #0
    a6e8:	d0ec      	beq.n	a6c4 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    a6ea:	4620      	mov	r0, r4
    a6ec:	f002 fa7e 	bl	cbec <ll_tx_mem_release>
    a6f0:	e7e6      	b.n	a6c0 <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    a6f2:	7903      	ldrb	r3, [r0, #4]
    a6f4:	2202      	movs	r2, #2
    a6f6:	f362 0301 	bfi	r3, r2, #0, #2
    a6fa:	7103      	strb	r3, [r0, #4]
		break;
    a6fc:	e7e8      	b.n	a6d0 <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    a6fe:	4b11      	ldr	r3, [pc, #68]	; (a744 <hci_acl_handle+0xc4>)
    a700:	681b      	ldr	r3, [r3, #0]
    a702:	019b      	lsls	r3, r3, #6
    a704:	d402      	bmi.n	a70c <hci_acl_handle+0x8c>
		return -ENOBUFS;
    a706:	f06f 0068 	mvn.w	r0, #104	; 0x68
    a70a:	e7db      	b.n	a6c4 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a70c:	f04f 33ff 	mov.w	r3, #4294967295
    a710:	f04f 32ff 	mov.w	r2, #4294967295
    a714:	2001      	movs	r0, #1
    a716:	f7f9 ff69 	bl	45ec <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    a71a:	2102      	movs	r1, #2
    a71c:	f8c8 0000 	str.w	r0, [r8]
    a720:	3008      	adds	r0, #8
    a722:	f00e f9f5 	bl	18b10 <net_buf_simple_add>
	hdr->len = len;
    a726:	2401      	movs	r4, #1
	hdr->evt = evt;
    a728:	221a      	movs	r2, #26
    a72a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    a72c:	7044      	strb	r4, [r0, #1]
    a72e:	f8d8 0000 	ldr.w	r0, [r8]
    a732:	4621      	mov	r1, r4
    a734:	3008      	adds	r0, #8
    a736:	f00e f9eb 	bl	18b10 <net_buf_simple_add>
    a73a:	4603      	mov	r3, r0
		return -ENOBUFS;
    a73c:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = link_type;
    a740:	701c      	strb	r4, [r3, #0]
    a742:	e7bf      	b.n	a6c4 <hci_acl_handle+0x44>
    a744:	20000150 	.word	0x20000150

0000a748 <hci_disconn_complete_encode>:
{
    a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    a74a:	4b0e      	ldr	r3, [pc, #56]	; (a784 <hci_disconn_complete_encode+0x3c>)
    a74c:	681b      	ldr	r3, [r3, #0]
    a74e:	06db      	lsls	r3, r3, #27
    a750:	d400      	bmi.n	a754 <hci_disconn_complete_encode+0xc>
}
    a752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a754:	f102 0408 	add.w	r4, r2, #8
    a758:	4605      	mov	r5, r0
    a75a:	460e      	mov	r6, r1
    a75c:	4620      	mov	r0, r4
    a75e:	2102      	movs	r1, #2
    a760:	f00e f9d6 	bl	18b10 <net_buf_simple_add>
    a764:	4603      	mov	r3, r0
	hdr->len = len;
    a766:	2104      	movs	r1, #4
	hdr->evt = evt;
    a768:	2205      	movs	r2, #5
	hdr->len = len;
    a76a:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    a76c:	701a      	strb	r2, [r3, #0]
    a76e:	4620      	mov	r0, r4
    a770:	f00e f9ce 	bl	18b10 <net_buf_simple_add>
    a774:	2700      	movs	r7, #0
	ep->status = 0x00;
    a776:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a778:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    a77c:	782b      	ldrb	r3, [r5, #0]
    a77e:	70c3      	strb	r3, [r0, #3]
}
    a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a782:	bf00      	nop
    a784:	20000150 	.word	0x20000150

0000a788 <hci_disconn_complete_process>:
	conn_count--;
    a788:	4a02      	ldr	r2, [pc, #8]	; (a794 <hci_disconn_complete_process+0xc>)
    a78a:	6813      	ldr	r3, [r2, #0]
    a78c:	3b01      	subs	r3, #1
    a78e:	6013      	str	r3, [r2, #0]
}
    a790:	4770      	bx	lr
    a792:	bf00      	nop
    a794:	200014c4 	.word	0x200014c4

0000a798 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    a798:	7f03      	ldrb	r3, [r0, #28]
    a79a:	f003 0303 	and.w	r3, r3, #3
    a79e:	3b01      	subs	r3, #1
    a7a0:	2b01      	cmp	r3, #1
{
    a7a2:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    a7a4:	d90d      	bls.n	a7c2 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    a7a6:	4a16      	ldr	r2, [pc, #88]	; (a800 <hci_acl_encode+0x68>)
    a7a8:	4916      	ldr	r1, [pc, #88]	; (a804 <hci_acl_encode+0x6c>)
    a7aa:	4817      	ldr	r0, [pc, #92]	; (a808 <hci_acl_encode+0x70>)
    a7ac:	f641 73bf 	movw	r3, #8127	; 0x1fbf
    a7b0:	f00b fd9f 	bl	162f2 <assert_print>
    a7b4:	4040      	eors	r0, r0
    a7b6:	f380 8811 	msr	BASEPRI, r0
    a7ba:	f04f 0003 	mov.w	r0, #3
    a7be:	df02      	svc	2
		break;
	}
}
    a7c0:	bd70      	pop	{r4, r5, r6, pc}
    a7c2:	4604      	mov	r4, r0
    a7c4:	f101 0508 	add.w	r5, r1, #8
    a7c8:	4628      	mov	r0, r5
    a7ca:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    a7cc:	88e6      	ldrh	r6, [r4, #6]
    a7ce:	f00e f99f 	bl	18b10 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a7d2:	7f23      	ldrb	r3, [r4, #28]
    a7d4:	f003 0303 	and.w	r3, r3, #3
    a7d8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    a7da:	bf0c      	ite	eq
    a7dc:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    a7e0:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    a7e4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    a7e6:	7f61      	ldrb	r1, [r4, #29]
    a7e8:	8041      	strh	r1, [r0, #2]
    a7ea:	4628      	mov	r0, r5
    a7ec:	f00e f990 	bl	18b10 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a7f0:	7f62      	ldrb	r2, [r4, #29]
    a7f2:	f104 011f 	add.w	r1, r4, #31
}
    a7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a7fa:	f00b bffa 	b.w	167f2 <memcpy>
    a7fe:	bf00      	nop
    a800:	0001a630 	.word	0x0001a630
    a804:	0001a5e0 	.word	0x0001a5e0
    a808:	0001a580 	.word	0x0001a580

0000a80c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a810:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
    a814:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a816:	f1bc 0f03 	cmp.w	ip, #3
{
    a81a:	b087      	sub	sp, #28
    a81c:	4604      	mov	r4, r0
    a81e:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    a820:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a824:	d01f      	beq.n	a866 <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
    a826:	f1ac 0c05 	sub.w	ip, ip, #5
    a82a:	f1bc 0f18 	cmp.w	ip, #24
    a82e:	d834      	bhi.n	a89a <hci_evt_encode+0x8e>
    a830:	e8df f01c 	tbh	[pc, ip, lsl #1]
    a834:	00330043 	.word	0x00330043
    a838:	00330033 	.word	0x00330033
    a83c:	00330033 	.word	0x00330033
    a840:	00330033 	.word	0x00330033
    a844:	00330033 	.word	0x00330033
    a848:	00330033 	.word	0x00330033
    a84c:	00330033 	.word	0x00330033
    a850:	00330033 	.word	0x00330033
    a854:	00330033 	.word	0x00330033
    a858:	00db00b2 	.word	0x00db00b2
    a85c:	011300e3 	.word	0x011300e3
    a860:	013d012a 	.word	0x013d012a
    a864:	015e      	.short	0x015e
	switch (pdu_data->llctrl.opcode) {
    a866:	7fc3      	ldrb	r3, [r0, #31]
    a868:	3b03      	subs	r3, #3
    a86a:	2b12      	cmp	r3, #18
    a86c:	f200 8178 	bhi.w	ab60 <hci_evt_encode+0x354>
    a870:	e8df f013 	tbh	[pc, r3, lsl #1]
    a874:	01760227 	.word	0x01760227
    a878:	01bb0176 	.word	0x01bb0176
    a87c:	017601d4 	.word	0x017601d4
    a880:	017601e2 	.word	0x017601e2
    a884:	01760176 	.word	0x01760176
    a888:	017601e7 	.word	0x017601e7
    a88c:	01760202 	.word	0x01760202
    a890:	01760020 	.word	0x01760020
    a894:	01940176 	.word	0x01940176
    a898:	0194      	.short	0x0194
		LL_ASSERT(0);
    a89a:	4ab8      	ldr	r2, [pc, #736]	; (ab7c <hci_evt_encode+0x370>)
    a89c:	49b8      	ldr	r1, [pc, #736]	; (ab80 <hci_evt_encode+0x374>)
    a89e:	48b9      	ldr	r0, [pc, #740]	; (ab84 <hci_evt_encode+0x378>)
    a8a0:	f641 63af 	movw	r3, #7855	; 0x1eaf
    a8a4:	f00b fd25 	bl	162f2 <assert_print>
    a8a8:	4040      	eors	r0, r0
    a8aa:	f380 8811 	msr	BASEPRI, r0
    a8ae:	f04f 0003 	mov.w	r0, #3
    a8b2:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    a8b4:	b007      	add	sp, #28
    a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a8ba:	4bb3      	ldr	r3, [pc, #716]	; (ab88 <hci_evt_encode+0x37c>)
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8bc:	4ab3      	ldr	r2, [pc, #716]	; (ab8c <hci_evt_encode+0x380>)
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a8be:	e893 0003 	ldmia.w	r3, {r0, r1}
    a8c2:	0c0b      	lsrs	r3, r1, #16
    a8c4:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    a8c8:	7e23      	ldrb	r3, [r4, #24]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8ca:	6852      	ldr	r2, [r2, #4]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a8cc:	f8ad 1014 	strh.w	r1, [sp, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    a8d0:	425b      	negs	r3, r3
    a8d2:	b25e      	sxtb	r6, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
    a8d4:	7e63      	ldrb	r3, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a8d6:	9004      	str	r0, [sp, #16]
	if (direct_report) {
    a8d8:	07d9      	lsls	r1, r3, #31
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8da:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
	if (direct_report) {
    a8de:	f100 826b 	bmi.w	adb8 <hci_evt_encode+0x5ac>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8e2:	2a00      	cmp	r2, #0
    a8e4:	d0e6      	beq.n	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    a8e6:	4baa      	ldr	r3, [pc, #680]	; (ab90 <hci_evt_encode+0x384>)
    a8e8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a8ea:	079b      	lsls	r3, r3, #30
    a8ec:	d5e2      	bpl.n	a8b4 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
    a8ee:	4ba9      	ldr	r3, [pc, #676]	; (ab94 <hci_evt_encode+0x388>)
    a8f0:	681b      	ldr	r3, [r3, #0]
    a8f2:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    a8f4:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
    a8f8:	db09      	blt.n	a90e <hci_evt_encode+0x102>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    a8fa:	7f20      	ldrb	r0, [r4, #28]
    a8fc:	465a      	mov	r2, fp
    a8fe:	f3c0 1180 	ubfx	r1, r0, #6, #1
    a902:	f000 000f 	and.w	r0, r0, #15
    a906:	f7ff f907 	bl	9b18 <dup_found.part.0>
	if (dup_scan &&
    a90a:	2800      	cmp	r0, #0
    a90c:	d1d2      	bne.n	a8b4 <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    a90e:	7f23      	ldrb	r3, [r4, #28]
    a910:	f003 030f 	and.w	r3, r3, #15
    a914:	2b01      	cmp	r3, #1
    a916:	f000 82b6 	beq.w	ae86 <hci_evt_encode+0x67a>
		data_len = (adv->len - BDADDR_SIZE);
    a91a:	7f63      	ldrb	r3, [r4, #29]
    a91c:	1f9f      	subs	r7, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    a91e:	f103 0a06 	add.w	sl, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
    a922:	b2ff      	uxtb	r7, r7
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a924:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    a926:	fa5f fa8a 	uxtb.w	sl, sl
	return net_buf_add(buf, melen);
    a92a:	fa5f f983 	uxtb.w	r9, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    a92e:	46b8      	mov	r8, r7
    a930:	3508      	adds	r5, #8
    a932:	2102      	movs	r1, #2
    a934:	4628      	mov	r0, r5
    a936:	f00e f8eb 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    a93a:	233e      	movs	r3, #62	; 0x3e
    a93c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    a93e:	f880 a001 	strb.w	sl, [r0, #1]
    a942:	2101      	movs	r1, #1
    a944:	4628      	mov	r0, r5
    a946:	f00e f8e3 	bl	18b10 <net_buf_simple_add>
    a94a:	4603      	mov	r3, r0
	me->subevent = subevt;
    a94c:	2202      	movs	r2, #2
    a94e:	4649      	mov	r1, r9
    a950:	701a      	strb	r2, [r3, #0]
    a952:	4628      	mov	r0, r5
    a954:	f00e f8dc 	bl	18b10 <net_buf_simple_add>
	sep->num_reports = 1U;
    a958:	2301      	movs	r3, #1
    a95a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    a95c:	7f23      	ldrb	r3, [r4, #28]
    a95e:	aa06      	add	r2, sp, #24
    a960:	f003 030f 	and.w	r3, r3, #15
    a964:	4413      	add	r3, r2
    a966:	4605      	mov	r5, r0
    a968:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    a96c:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    a96e:	7f23      	ldrb	r3, [r4, #28]
    a970:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a974:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    a976:	f100 090a 	add.w	r9, r0, #10
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    a97a:	4659      	mov	r1, fp
    a97c:	2206      	movs	r2, #6
    a97e:	3003      	adds	r0, #3
    a980:	f00b ff37 	bl	167f2 <memcpy>
	adv_info->length = data_len;
    a984:	726f      	strb	r7, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    a986:	4642      	mov	r2, r8
    a988:	f104 0124 	add.w	r1, r4, #36	; 0x24
    a98c:	4648      	mov	r0, r9
    a98e:	f00b ff30 	bl	167f2 <memcpy>
	*prssi = rssi;
    a992:	f809 6008 	strb.w	r6, [r9, r8]
    a996:	e78d      	b.n	a8b4 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    a998:	07ff      	lsls	r7, r7, #31
    a99a:	f100 81c1 	bmi.w	ad20 <hci_evt_encode+0x514>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a99e:	4b7b      	ldr	r3, [pc, #492]	; (ab8c <hci_evt_encode+0x380>)
    a9a0:	685b      	ldr	r3, [r3, #4]
    a9a2:	0098      	lsls	r0, r3, #2
    a9a4:	d586      	bpl.n	a8b4 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    a9a6:	4b7a      	ldr	r3, [pc, #488]	; (ab90 <hci_evt_encode+0x384>)
    a9a8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a9aa:	07d9      	lsls	r1, r3, #31
    a9ac:	d582      	bpl.n	a8b4 <hci_evt_encode+0xa8>
	status = cc->status;
    a9ae:	7f27      	ldrb	r7, [r4, #28]
    a9b0:	3508      	adds	r5, #8
	if (!status) {
    a9b2:	2f00      	cmp	r7, #0
    a9b4:	f000 81cc 	beq.w	ad50 <hci_evt_encode+0x544>
    a9b8:	2102      	movs	r1, #2
    a9ba:	4628      	mov	r0, r5
    a9bc:	f00e f8a8 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    a9c0:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    a9c2:	2313      	movs	r3, #19
	hdr->evt = evt;
    a9c4:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    a9c6:	7043      	strb	r3, [r0, #1]
    a9c8:	2101      	movs	r1, #1
    a9ca:	4628      	mov	r0, r5
    a9cc:	f00e f8a0 	bl	18b10 <net_buf_simple_add>
	me->subevent = subevt;
    a9d0:	2301      	movs	r3, #1
    a9d2:	7003      	strb	r3, [r0, #0]
    a9d4:	2112      	movs	r1, #18
    a9d6:	4628      	mov	r0, r5
    a9d8:	f00e f89a 	bl	18b10 <net_buf_simple_add>
    a9dc:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    a9de:	2212      	movs	r2, #18
    a9e0:	2100      	movs	r1, #0
    a9e2:	f00b ff11 	bl	16808 <memset>
		lecc->status = status;
    a9e6:	7027      	strb	r7, [r4, #0]
		return;
    a9e8:	e764      	b.n	a8b4 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    a9ea:	460a      	mov	r2, r1
    a9ec:	4638      	mov	r0, r7
    a9ee:	4631      	mov	r1, r6
}
    a9f0:	b007      	add	sp, #28
    a9f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    a9f6:	f7ff bea7 	b.w	a748 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a9fa:	4b64      	ldr	r3, [pc, #400]	; (ab8c <hci_evt_encode+0x380>)
    a9fc:	685b      	ldr	r3, [r3, #4]
    a9fe:	009a      	lsls	r2, r3, #2
    aa00:	f57f af58 	bpl.w	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    aa04:	4b62      	ldr	r3, [pc, #392]	; (ab90 <hci_evt_encode+0x384>)
    aa06:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aa08:	075b      	lsls	r3, r3, #29
    aa0a:	f57f af53 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    aa0e:	3508      	adds	r5, #8
    aa10:	2102      	movs	r1, #2
    aa12:	4628      	mov	r0, r5
    aa14:	f00e f87c 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    aa18:	233e      	movs	r3, #62	; 0x3e
    aa1a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    aa1c:	230a      	movs	r3, #10
    aa1e:	7043      	strb	r3, [r0, #1]
    aa20:	2101      	movs	r1, #1
    aa22:	4628      	mov	r0, r5
    aa24:	f00e f874 	bl	18b10 <net_buf_simple_add>
    aa28:	4603      	mov	r3, r0
	me->subevent = subevt;
    aa2a:	2203      	movs	r2, #3
    aa2c:	4628      	mov	r0, r5
    aa2e:	701a      	strb	r2, [r3, #0]
    aa30:	2109      	movs	r1, #9
    aa32:	f00e f86d 	bl	18b10 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    aa36:	07ff      	lsls	r7, r7, #31
    aa38:	4605      	mov	r5, r0
    aa3a:	f100 8216 	bmi.w	ae6a <hci_evt_encode+0x65e>
	sep->status = cu->status;
    aa3e:	7f23      	ldrb	r3, [r4, #28]
    aa40:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    aa42:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    aa44:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    aa46:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    aa48:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
    aa4c:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    aa50:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    aa54:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    aa58:	e72c      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    aa5a:	4b4c      	ldr	r3, [pc, #304]	; (ab8c <hci_evt_encode+0x380>)
    aa5c:	685b      	ldr	r3, [r3, #4]
    aa5e:	0418      	lsls	r0, r3, #16
    aa60:	f04f 0400 	mov.w	r4, #0
    aa64:	f57f af26 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    aa68:	3508      	adds	r5, #8
    aa6a:	2102      	movs	r1, #2
    aa6c:	4628      	mov	r0, r5
    aa6e:	f00e f84f 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    aa72:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    aa74:	2103      	movs	r1, #3
	hdr->evt = evt;
    aa76:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    aa78:	7041      	strb	r1, [r0, #1]
    aa7a:	4628      	mov	r0, r5
    aa7c:	f00e f848 	bl	18b10 <net_buf_simple_add>
	ep->status = 0x00;
    aa80:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    aa82:	f8a0 6001 	strh.w	r6, [r0, #1]
    aa86:	e715      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    aa88:	4b43      	ldr	r3, [pc, #268]	; (ab98 <hci_evt_encode+0x38c>)
    aa8a:	681b      	ldr	r3, [r3, #0]
    aa8c:	0219      	lsls	r1, r3, #8
    aa8e:	f57f af11 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    aa92:	3508      	adds	r5, #8
    aa94:	2102      	movs	r1, #2
    aa96:	4628      	mov	r0, r5
    aa98:	f00e f83a 	bl	18b10 <net_buf_simple_add>
	hdr->len = len;
    aa9c:	2102      	movs	r1, #2
	hdr->evt = evt;
    aa9e:	2357      	movs	r3, #87	; 0x57
    aaa0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    aaa2:	7041      	strb	r1, [r0, #1]
    aaa4:	4628      	mov	r0, r5
    aaa6:	f00e f833 	bl	18b10 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    aaaa:	8006      	strh	r6, [r0, #0]
    aaac:	e702      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aaae:	4b37      	ldr	r3, [pc, #220]	; (ab8c <hci_evt_encode+0x380>)
    aab0:	685b      	ldr	r3, [r3, #4]
    aab2:	009a      	lsls	r2, r3, #2
    aab4:	f57f aefe 	bpl.w	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    aab8:	4b35      	ldr	r3, [pc, #212]	; (ab90 <hci_evt_encode+0x384>)
    aaba:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aabc:	031b      	lsls	r3, r3, #12
    aabe:	f57f aef9 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    aac2:	3508      	adds	r5, #8
    aac4:	2102      	movs	r1, #2
    aac6:	4628      	mov	r0, r5
    aac8:	f00e f822 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    aacc:	233e      	movs	r3, #62	; 0x3e
    aace:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    aad0:	2304      	movs	r3, #4
    aad2:	7043      	strb	r3, [r0, #1]
    aad4:	2101      	movs	r1, #1
    aad6:	4628      	mov	r0, r5
    aad8:	f00e f81a 	bl	18b10 <net_buf_simple_add>
	me->subevent = subevt;
    aadc:	2314      	movs	r3, #20
    aade:	7003      	strb	r3, [r0, #0]
    aae0:	2103      	movs	r1, #3
    aae2:	4628      	mov	r0, r5
    aae4:	f00e f814 	bl	18b10 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    aae8:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    aaea:	7f23      	ldrb	r3, [r4, #28]
    aaec:	7083      	strb	r3, [r0, #2]
    aaee:	e6e1      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aaf0:	4b26      	ldr	r3, [pc, #152]	; (ab8c <hci_evt_encode+0x380>)
    aaf2:	685b      	ldr	r3, [r3, #4]
    aaf4:	009f      	lsls	r7, r3, #2
    aaf6:	f57f aedd 	bpl.w	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    aafa:	4b25      	ldr	r3, [pc, #148]	; (ab90 <hci_evt_encode+0x384>)
    aafc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    aafe:	0518      	lsls	r0, r3, #20
    ab00:	f57f aed8 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    ab04:	3508      	adds	r5, #8
    ab06:	2102      	movs	r1, #2
    ab08:	4628      	mov	r0, r5
    ab0a:	f00e f801 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ab0e:	233e      	movs	r3, #62	; 0x3e
    ab10:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ab12:	2306      	movs	r3, #6
    ab14:	7043      	strb	r3, [r0, #1]
    ab16:	2101      	movs	r1, #1
    ab18:	4628      	mov	r0, r5
    ab1a:	f00d fff9 	bl	18b10 <net_buf_simple_add>
	me->subevent = subevt;
    ab1e:	230c      	movs	r3, #12
    ab20:	7003      	strb	r3, [r0, #0]
    ab22:	2105      	movs	r1, #5
    ab24:	4628      	mov	r0, r5
    ab26:	f00d fff3 	bl	18b10 <net_buf_simple_add>
	sep->status = pu->status;
    ab2a:	7f23      	ldrb	r3, [r4, #28]
    ab2c:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    ab2e:	f8a0 6001 	strh.w	r6, [r0, #1]
    ab32:	7f62      	ldrb	r2, [r4, #29]
    ab34:	2a00      	cmp	r2, #0
    ab36:	fa92 f3a2 	rbit	r3, r2
    ab3a:	fab3 f383 	clz	r3, r3
    ab3e:	bf08      	it	eq
    ab40:	f04f 33ff 	moveq.w	r3, #4294967295
    ab44:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    ab46:	70c3      	strb	r3, [r0, #3]
    ab48:	7fa2      	ldrb	r2, [r4, #30]
    ab4a:	fa92 f3a2 	rbit	r3, r2
    ab4e:	2a00      	cmp	r2, #0
    ab50:	fab3 f383 	clz	r3, r3
    ab54:	bf08      	it	eq
    ab56:	f04f 33ff 	moveq.w	r3, #4294967295
    ab5a:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    ab5c:	7103      	strb	r3, [r0, #4]
    ab5e:	e6a9      	b.n	a8b4 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
    ab60:	4a06      	ldr	r2, [pc, #24]	; (ab7c <hci_evt_encode+0x370>)
    ab62:	4907      	ldr	r1, [pc, #28]	; (ab80 <hci_evt_encode+0x374>)
    ab64:	4807      	ldr	r0, [pc, #28]	; (ab84 <hci_evt_encode+0x378>)
    ab66:	f641 7393 	movw	r3, #8083	; 0x1f93
    ab6a:	f00b fbc2 	bl	162f2 <assert_print>
    ab6e:	4040      	eors	r0, r0
    ab70:	f380 8811 	msr	BASEPRI, r0
    ab74:	f04f 0003 	mov.w	r0, #3
    ab78:	df02      	svc	2
}
    ab7a:	e69b      	b.n	a8b4 <hci_evt_encode+0xa8>
    ab7c:	0001a630 	.word	0x0001a630
    ab80:	0001a5e0 	.word	0x0001a5e0
    ab84:	0001a580 	.word	0x0001a580
    ab88:	0001a1b8 	.word	0x0001a1b8
    ab8c:	20000150 	.word	0x20000150
    ab90:	20000158 	.word	0x20000158
    ab94:	200014c8 	.word	0x200014c8
    ab98:	20000c50 	.word	0x20000c50
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ab9c:	4bbe      	ldr	r3, [pc, #760]	; (ae98 <hci_evt_encode+0x68c>)
    ab9e:	685b      	ldr	r3, [r3, #4]
    aba0:	009a      	lsls	r2, r3, #2
    aba2:	f57f ae87 	bpl.w	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    aba6:	4bbd      	ldr	r3, [pc, #756]	; (ae9c <hci_evt_encode+0x690>)
    aba8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    abaa:	065b      	lsls	r3, r3, #25
    abac:	f57f ae82 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    abb0:	3508      	adds	r5, #8
    abb2:	2102      	movs	r1, #2
    abb4:	4628      	mov	r0, r5
    abb6:	f00d ffab 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    abba:	233e      	movs	r3, #62	; 0x3e
    abbc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    abbe:	230b      	movs	r3, #11
    abc0:	7043      	strb	r3, [r0, #1]
    abc2:	2101      	movs	r1, #1
    abc4:	4628      	mov	r0, r5
    abc6:	f00d ffa3 	bl	18b10 <net_buf_simple_add>
	me->subevent = subevt;
    abca:	2307      	movs	r3, #7
    abcc:	7003      	strb	r3, [r0, #0]
    abce:	210a      	movs	r1, #10
    abd0:	4628      	mov	r0, r5
    abd2:	f00d ff9d 	bl	18b10 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    abd6:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    abd8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    abda:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    abdc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    abde:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    abe0:	8c23      	ldrh	r3, [r4, #32]
    abe2:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    abe4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    abe6:	8103      	strh	r3, [r0, #8]
    abe8:	e664      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    abea:	4bab      	ldr	r3, [pc, #684]	; (ae98 <hci_evt_encode+0x68c>)
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	061b      	lsls	r3, r3, #24
    abf0:	f04f 0400 	mov.w	r4, #0
    abf4:	f57f ae5e 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    abf8:	3508      	adds	r5, #8
    abfa:	2102      	movs	r1, #2
    abfc:	4628      	mov	r0, r5
    abfe:	f00d ff87 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ac02:	2308      	movs	r3, #8
	hdr->len = len;
    ac04:	2104      	movs	r1, #4
	hdr->evt = evt;
    ac06:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ac08:	7041      	strb	r1, [r0, #1]
    ac0a:	4628      	mov	r0, r5
    ac0c:	f00d ff80 	bl	18b10 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    ac10:	2301      	movs	r3, #1
	ep->status = err;
    ac12:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ac14:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ac18:	70c3      	strb	r3, [r0, #3]
    ac1a:	e64b      	b.n	a8b4 <hci_evt_encode+0xa8>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    ac1c:	f890 3020 	ldrb.w	r3, [r0, #32]
    ac20:	2b0e      	cmp	r3, #14
    ac22:	f47f ae47 	bne.w	a8b4 <hci_evt_encode+0xa8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ac26:	460b      	mov	r3, r1
    ac28:	4632      	mov	r2, r6
    ac2a:	2100      	movs	r1, #0
    ac2c:	201a      	movs	r0, #26
}
    ac2e:	b007      	add	sp, #28
    ac30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ac34:	f7fe bfd0 	b.w	9bd8 <le_remote_feat_complete>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    ac38:	460b      	mov	r3, r1
    ac3a:	4632      	mov	r2, r6
    ac3c:	4639      	mov	r1, r7
    ac3e:	2000      	movs	r0, #0
    ac40:	e7f5      	b.n	ac2e <hci_evt_encode+0x422>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ac42:	4b95      	ldr	r3, [pc, #596]	; (ae98 <hci_evt_encode+0x68c>)
    ac44:	681b      	ldr	r3, [r3, #0]
    ac46:	061f      	lsls	r7, r3, #24
    ac48:	f57f ae34 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    ac4c:	3508      	adds	r5, #8
    ac4e:	2102      	movs	r1, #2
    ac50:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    ac52:	f894 4020 	ldrb.w	r4, [r4, #32]
    ac56:	f00d ff5b 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ac5a:	2308      	movs	r3, #8
	hdr->len = len;
    ac5c:	2104      	movs	r1, #4
	hdr->evt = evt;
    ac5e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ac60:	7041      	strb	r1, [r0, #1]
    ac62:	4628      	mov	r0, r5
    ac64:	f00d ff54 	bl	18b10 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    ac68:	fab4 f384 	clz	r3, r4
    ac6c:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    ac6e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ac70:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ac74:	70c3      	strb	r3, [r0, #3]
    ac76:	e61d      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ac78:	4b87      	ldr	r3, [pc, #540]	; (ae98 <hci_evt_encode+0x68c>)
    ac7a:	685b      	ldr	r3, [r3, #4]
    ac7c:	0098      	lsls	r0, r3, #2
    ac7e:	d55d      	bpl.n	ad3c <hci_evt_encode+0x530>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    ac80:	4b86      	ldr	r3, [pc, #536]	; (ae9c <hci_evt_encode+0x690>)
    ac82:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ac84:	0699      	lsls	r1, r3, #26
    ac86:	d559      	bpl.n	ad3c <hci_evt_encode+0x530>
    ac88:	3508      	adds	r5, #8
    ac8a:	2102      	movs	r1, #2
    ac8c:	4628      	mov	r0, r5
    ac8e:	f00d ff3f 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ac92:	233e      	movs	r3, #62	; 0x3e
    ac94:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ac96:	230b      	movs	r3, #11
    ac98:	7043      	strb	r3, [r0, #1]
    ac9a:	2101      	movs	r1, #1
    ac9c:	4628      	mov	r0, r5
    ac9e:	f00d ff37 	bl	18b10 <net_buf_simple_add>
	me->subevent = subevt;
    aca2:	2306      	movs	r3, #6
    aca4:	7003      	strb	r3, [r0, #0]
    aca6:	210a      	movs	r1, #10
    aca8:	4628      	mov	r0, r5
    acaa:	f00d ff31 	bl	18b10 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    acae:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    acb0:	8c23      	ldrh	r3, [r4, #32]
    acb2:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    acb4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    acb6:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    acb8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    acba:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    acbc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    acbe:	8103      	strh	r3, [r0, #8]
    acc0:	e5f8      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    acc2:	4b75      	ldr	r3, [pc, #468]	; (ae98 <hci_evt_encode+0x68c>)
    acc4:	685b      	ldr	r3, [r3, #4]
    acc6:	0099      	lsls	r1, r3, #2
    acc8:	f57f adf4 	bpl.w	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    accc:	4b73      	ldr	r3, [pc, #460]	; (ae9c <hci_evt_encode+0x690>)
    acce:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    acd0:	06da      	lsls	r2, r3, #27
    acd2:	f57f adef 	bpl.w	a8b4 <hci_evt_encode+0xa8>
    acd6:	3508      	adds	r5, #8
    acd8:	2102      	movs	r1, #2
    acda:	4628      	mov	r0, r5
    acdc:	f00d ff18 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ace0:	233e      	movs	r3, #62	; 0x3e
    ace2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ace4:	230d      	movs	r3, #13
    ace6:	7043      	strb	r3, [r0, #1]
    ace8:	2101      	movs	r1, #1
    acea:	4628      	mov	r0, r5
    acec:	f00d ff10 	bl	18b10 <net_buf_simple_add>
	me->subevent = subevt;
    acf0:	2305      	movs	r3, #5
    acf2:	7003      	strb	r3, [r0, #0]
    acf4:	210c      	movs	r1, #12
    acf6:	4628      	mov	r0, r5
    acf8:	f00d ff0a 	bl	18b10 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    acfc:	f104 0120 	add.w	r1, r4, #32
    ad00:	4605      	mov	r5, r0
    ad02:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    ad04:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    ad08:	f00b fd73 	bl	167f2 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    ad0c:	2202      	movs	r2, #2
    ad0e:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ad12:	f105 000a 	add.w	r0, r5, #10
}
    ad16:	b007      	add	sp, #28
    ad18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    ad1c:	f00b bd69 	b.w	167f2 <memcpy>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    ad20:	4a5f      	ldr	r2, [pc, #380]	; (aea0 <hci_evt_encode+0x694>)
    ad22:	4960      	ldr	r1, [pc, #384]	; (aea4 <hci_evt_encode+0x698>)
    ad24:	4860      	ldr	r0, [pc, #384]	; (aea8 <hci_evt_encode+0x69c>)
    ad26:	f641 43ef 	movw	r3, #7407	; 0x1cef
    ad2a:	f00b fae2 	bl	162f2 <assert_print>
    ad2e:	4040      	eors	r0, r0
    ad30:	f380 8811 	msr	BASEPRI, r0
    ad34:	f04f 0003 	mov.w	r0, #3
    ad38:	df02      	svc	2
    ad3a:	e630      	b.n	a99e <hci_evt_encode+0x192>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    ad3c:	2300      	movs	r3, #0
    ad3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ad42:	9300      	str	r3, [sp, #0]
    ad44:	221a      	movs	r2, #26
    ad46:	2102      	movs	r1, #2
    ad48:	4630      	mov	r0, r6
    ad4a:	f001 ff97 	bl	cc7c <ll_conn_update>
		return;
    ad4e:	e5b1      	b.n	a8b4 <hci_evt_encode+0xa8>
		conn_count++;
    ad50:	4a56      	ldr	r2, [pc, #344]	; (aeac <hci_evt_encode+0x6a0>)
    ad52:	6813      	ldr	r3, [r2, #0]
    ad54:	2102      	movs	r1, #2
    ad56:	3301      	adds	r3, #1
    ad58:	4628      	mov	r0, r5
    ad5a:	6013      	str	r3, [r2, #0]
    ad5c:	f00d fed8 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ad60:	233e      	movs	r3, #62	; 0x3e
    ad62:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ad64:	2313      	movs	r3, #19
    ad66:	7043      	strb	r3, [r0, #1]
    ad68:	2101      	movs	r1, #1
    ad6a:	4628      	mov	r0, r5
    ad6c:	f00d fed0 	bl	18b10 <net_buf_simple_add>
    ad70:	4603      	mov	r3, r0
	me->subevent = subevt;
    ad72:	2201      	movs	r2, #1
    ad74:	701a      	strb	r2, [r3, #0]
    ad76:	4628      	mov	r0, r5
    ad78:	2112      	movs	r1, #18
    ad7a:	f00d fec9 	bl	18b10 <net_buf_simple_add>
	lecc->status = 0x00;
    ad7e:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    ad80:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    ad84:	7f63      	ldrb	r3, [r4, #29]
    ad86:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    ad88:	7fa3      	ldrb	r3, [r4, #30]
    ad8a:	f003 0301 	and.w	r3, r3, #1
    ad8e:	4605      	mov	r5, r0
    ad90:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    ad92:	2206      	movs	r2, #6
    ad94:	f104 011f 	add.w	r1, r4, #31
    ad98:	3005      	adds	r0, #5
    ad9a:	f00b fd2a 	bl	167f2 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    ad9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	lecc->interval = sys_cpu_to_le16(cc->interval);
    ada0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
	lecc->latency = sys_cpu_to_le16(cc->latency);
    ada2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    ada4:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    ada8:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    adac:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    adb0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    adb4:	746b      	strb	r3, [r5, #17]
    adb6:	e57d      	b.n	a8b4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    adb8:	2a00      	cmp	r2, #0
    adba:	f43f ad7b 	beq.w	a8b4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    adbe:	4b37      	ldr	r3, [pc, #220]	; (ae9c <hci_evt_encode+0x690>)
    adc0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    adc2:	055a      	lsls	r2, r3, #21
    adc4:	f57f ad76 	bpl.w	a8b4 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    adc8:	7f23      	ldrb	r3, [r4, #28]
    adca:	f003 030f 	and.w	r3, r3, #15
    adce:	2b01      	cmp	r3, #1
    add0:	d00c      	beq.n	adec <hci_evt_encode+0x5e0>
    add2:	4a33      	ldr	r2, [pc, #204]	; (aea0 <hci_evt_encode+0x694>)
    add4:	4936      	ldr	r1, [pc, #216]	; (aeb0 <hci_evt_encode+0x6a4>)
    add6:	4834      	ldr	r0, [pc, #208]	; (aea8 <hci_evt_encode+0x69c>)
    add8:	f241 630a 	movw	r3, #5642	; 0x160a
    addc:	f00b fa89 	bl	162f2 <assert_print>
    ade0:	4040      	eors	r0, r0
    ade2:	f380 8811 	msr	BASEPRI, r0
    ade6:	f04f 0003 	mov.w	r0, #3
    adea:	df02      	svc	2
	if (dup_count >= 0) {
    adec:	4b31      	ldr	r3, [pc, #196]	; (aeb4 <hci_evt_encode+0x6a8>)
    adee:	681b      	ldr	r3, [r3, #0]
    adf0:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    adf2:	f104 071e 	add.w	r7, r4, #30
	if (dup_count >= 0) {
    adf6:	db0a      	blt.n	ae0e <hci_evt_encode+0x602>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    adf8:	7f20      	ldrb	r0, [r4, #28]
    adfa:	463a      	mov	r2, r7
    adfc:	f3c0 1180 	ubfx	r1, r0, #6, #1
    ae00:	f000 000f 	and.w	r0, r0, #15
    ae04:	f7fe fe88 	bl	9b18 <dup_found.part.0>
	if (dup_scan &&
    ae08:	2800      	cmp	r0, #0
    ae0a:	f47f ad53 	bne.w	a8b4 <hci_evt_encode+0xa8>
    ae0e:	3508      	adds	r5, #8
    ae10:	2102      	movs	r1, #2
    ae12:	4628      	mov	r0, r5
    ae14:	f00d fe7c 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    ae18:	233e      	movs	r3, #62	; 0x3e
    ae1a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ae1c:	2312      	movs	r3, #18
    ae1e:	7043      	strb	r3, [r0, #1]
    ae20:	2101      	movs	r1, #1
    ae22:	4628      	mov	r0, r5
    ae24:	f00d fe74 	bl	18b10 <net_buf_simple_add>
    ae28:	4603      	mov	r3, r0
	me->subevent = subevt;
    ae2a:	220b      	movs	r2, #11
    ae2c:	701a      	strb	r2, [r3, #0]
    ae2e:	4628      	mov	r0, r5
    ae30:	2111      	movs	r1, #17
    ae32:	f00d fe6d 	bl	18b10 <net_buf_simple_add>
	drp->num_reports = 1U;
    ae36:	2301      	movs	r3, #1
    ae38:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    ae3a:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
    ae3c:	7f23      	ldrb	r3, [r4, #28]
    ae3e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ae42:	4605      	mov	r5, r0
    ae44:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    ae46:	4639      	mov	r1, r7
    ae48:	2206      	movs	r2, #6
    ae4a:	3003      	adds	r0, #3
    ae4c:	f00b fcd1 	bl	167f2 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
    ae50:	7f23      	ldrb	r3, [r4, #28]
    ae52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
    ae56:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
    ae58:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    ae5a:	f104 0124 	add.w	r1, r4, #36	; 0x24
    ae5e:	f105 000a 	add.w	r0, r5, #10
    ae62:	f00b fcc6 	bl	167f2 <memcpy>
	dir_info->rssi = rssi;
    ae66:	742e      	strb	r6, [r5, #16]
    ae68:	e524      	b.n	a8b4 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    ae6a:	4a0d      	ldr	r2, [pc, #52]	; (aea0 <hci_evt_encode+0x694>)
    ae6c:	4912      	ldr	r1, [pc, #72]	; (aeb8 <hci_evt_encode+0x6ac>)
    ae6e:	480e      	ldr	r0, [pc, #56]	; (aea8 <hci_evt_encode+0x69c>)
    ae70:	f641 5374 	movw	r3, #7540	; 0x1d74
    ae74:	f00b fa3d 	bl	162f2 <assert_print>
    ae78:	4040      	eors	r0, r0
    ae7a:	f380 8811 	msr	BASEPRI, r0
    ae7e:	f04f 0003 	mov.w	r0, #3
    ae82:	df02      	svc	2
    ae84:	e5db      	b.n	aa3e <hci_evt_encode+0x232>
    ae86:	f04f 0800 	mov.w	r8, #0
    ae8a:	f04f 090b 	mov.w	r9, #11
    ae8e:	f04f 0a0c 	mov.w	sl, #12
		data_len = 0U;
    ae92:	4647      	mov	r7, r8
    ae94:	e54c      	b.n	a930 <hci_evt_encode+0x124>
    ae96:	bf00      	nop
    ae98:	20000150 	.word	0x20000150
    ae9c:	20000158 	.word	0x20000158
    aea0:	0001a630 	.word	0x0001a630
    aea4:	0001a694 	.word	0x0001a694
    aea8:	0001a580 	.word	0x0001a580
    aeac:	200014c4 	.word	0x200014c4
    aeb0:	0001a66c 	.word	0x0001a66c
    aeb4:	200014c8 	.word	0x200014c8
    aeb8:	0001a6d0 	.word	0x0001a6d0

0000aebc <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    aebc:	b570      	push	{r4, r5, r6, lr}
    aebe:	f100 0408 	add.w	r4, r0, #8
    aec2:	460e      	mov	r6, r1
    aec4:	4620      	mov	r0, r4
    aec6:	2102      	movs	r1, #2
    aec8:	4615      	mov	r5, r2
    aeca:	f00d fe21 	bl	18b10 <net_buf_simple_add>
	hdr->evt = evt;
    aece:	2313      	movs	r3, #19
	hdr->len = len;
    aed0:	2105      	movs	r1, #5
	hdr->evt = evt;
    aed2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    aed4:	7041      	strb	r1, [r0, #1]
    aed6:	4620      	mov	r0, r4
    aed8:	f00d fe1a 	bl	18b10 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    aedc:	2301      	movs	r3, #1
    aede:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    aee0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    aee4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    aee8:	bd70      	pop	{r4, r5, r6, pc}
    aeea:	bf00      	nop

0000aeec <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    aeec:	7903      	ldrb	r3, [r0, #4]
    aeee:	2b03      	cmp	r3, #3
    aef0:	d008      	beq.n	af04 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    aef2:	3b05      	subs	r3, #5
    aef4:	b2db      	uxtb	r3, r3
    aef6:	2b18      	cmp	r3, #24
    aef8:	d901      	bls.n	aefe <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    aefa:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    aefc:	4770      	bx	lr
    aefe:	4a05      	ldr	r2, [pc, #20]	; (af14 <hci_get_class+0x28>)
    af00:	5cd0      	ldrb	r0, [r2, r3]
    af02:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    af04:	7f03      	ldrb	r3, [r0, #28]
    af06:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    af0a:	2b03      	cmp	r3, #3
    af0c:	bf0c      	ite	eq
    af0e:	2004      	moveq	r0, #4
    af10:	2005      	movne	r0, #5
    af12:	4770      	bx	lr
    af14:	0001a70c 	.word	0x0001a70c

0000af18 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    af18:	480d      	ldr	r0, [pc, #52]	; (af50 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    af1a:	4a0e      	ldr	r2, [pc, #56]	; (af54 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    af1c:	490e      	ldr	r1, [pc, #56]	; (af58 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
    af1e:	4b0f      	ldr	r3, [pc, #60]	; (af5c <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    af20:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    af22:	f04f 34ff 	mov.w	r4, #4294967295
    af26:	f641 75ff 	movw	r5, #8191	; 0x1fff
    af2a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    af2e:	2400      	movs	r4, #0
    af30:	2500      	movs	r5, #0
    af32:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
    af36:	4a0a      	ldr	r2, [pc, #40]	; (af60 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    af38:	241f      	movs	r4, #31
    af3a:	2500      	movs	r5, #0
    af3c:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    af40:	2100      	movs	r1, #0
    af42:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
    af44:	f04f 32ff 	mov.w	r2, #4294967295
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    af48:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
    af4a:	601a      	str	r2, [r3, #0]
}
    af4c:	4770      	bx	lr
    af4e:	bf00      	nop
    af50:	20000150 	.word	0x20000150
    af54:	20000c50 	.word	0x20000c50
    af58:	20000158 	.word	0x20000158
    af5c:	200014c8 	.word	0x200014c8
    af60:	200014c4 	.word	0x200014c4

0000af64 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    af64:	f005 b8f8 	b.w	10158 <lll_csrand_get>

0000af68 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    af68:	4801      	ldr	r0, [pc, #4]	; (af70 <ll_feat_get+0x8>)
    af6a:	2100      	movs	r1, #0
    af6c:	4770      	bx	lr
    af6e:	bf00      	nop
    af70:	000141bf 	.word	0x000141bf

0000af74 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    af74:	b510      	push	{r4, lr}
    af76:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    af78:	f005 f910 	bl	1019c <lll_reset>
	LL_ASSERT(!err);
    af7c:	b950      	cbnz	r0, af94 <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    af7e:	f005 fec9 	bl	10d14 <lll_scan_reset>
	LL_ASSERT(!err);
    af82:	b9c0      	cbnz	r0, afb6 <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    af84:	f005 ffc6 	bl	10f14 <lll_conn_reset>
	LL_ASSERT(!err);
    af88:	bb30      	cbnz	r0, afd8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    af8a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    af8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af90:	f009 bf24 	b.w	14ddc <z_impl_k_sem_give>
	LL_ASSERT(!err);
    af94:	4a19      	ldr	r2, [pc, #100]	; (affc <perform_lll_reset+0x88>)
    af96:	491a      	ldr	r1, [pc, #104]	; (b000 <perform_lll_reset+0x8c>)
    af98:	481a      	ldr	r0, [pc, #104]	; (b004 <perform_lll_reset+0x90>)
    af9a:	f640 038f 	movw	r3, #2191	; 0x88f
    af9e:	f00b f9a8 	bl	162f2 <assert_print>
    afa2:	4040      	eors	r0, r0
    afa4:	f380 8811 	msr	BASEPRI, r0
    afa8:	f04f 0003 	mov.w	r0, #3
    afac:	df02      	svc	2
	err = lll_scan_reset();
    afae:	f005 feb1 	bl	10d14 <lll_scan_reset>
	LL_ASSERT(!err);
    afb2:	2800      	cmp	r0, #0
    afb4:	d0e6      	beq.n	af84 <perform_lll_reset+0x10>
    afb6:	4a11      	ldr	r2, [pc, #68]	; (affc <perform_lll_reset+0x88>)
    afb8:	4911      	ldr	r1, [pc, #68]	; (b000 <perform_lll_reset+0x8c>)
    afba:	4812      	ldr	r0, [pc, #72]	; (b004 <perform_lll_reset+0x90>)
    afbc:	f640 039a 	movw	r3, #2202	; 0x89a
    afc0:	f00b f997 	bl	162f2 <assert_print>
    afc4:	4040      	eors	r0, r0
    afc6:	f380 8811 	msr	BASEPRI, r0
    afca:	f04f 0003 	mov.w	r0, #3
    afce:	df02      	svc	2
	err = lll_conn_reset();
    afd0:	f005 ffa0 	bl	10f14 <lll_conn_reset>
	LL_ASSERT(!err);
    afd4:	2800      	cmp	r0, #0
    afd6:	d0d8      	beq.n	af8a <perform_lll_reset+0x16>
    afd8:	4a08      	ldr	r2, [pc, #32]	; (affc <perform_lll_reset+0x88>)
    afda:	4909      	ldr	r1, [pc, #36]	; (b000 <perform_lll_reset+0x8c>)
    afdc:	4809      	ldr	r0, [pc, #36]	; (b004 <perform_lll_reset+0x90>)
    afde:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
    afe2:	f00b f986 	bl	162f2 <assert_print>
    afe6:	4040      	eors	r0, r0
    afe8:	f380 8811 	msr	BASEPRI, r0
    afec:	f04f 0003 	mov.w	r0, #3
    aff0:	df02      	svc	2
    aff2:	4620      	mov	r0, r4
}
    aff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aff8:	f009 bef0 	b.w	14ddc <z_impl_k_sem_give>
    affc:	0001a728 	.word	0x0001a728
    b000:	0001a764 	.word	0x0001a764
    b004:	0001a580 	.word	0x0001a580

0000b008 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    b008:	6008      	str	r0, [r1, #0]
    b00a:	4801      	ldr	r0, [pc, #4]	; (b010 <ull_ticker_status_give+0x8>)
    b00c:	f009 bee6 	b.w	14ddc <z_impl_k_sem_give>
    b010:	200017f8 	.word	0x200017f8

0000b014 <disabled_cb>:
    b014:	f009 bee2 	b.w	14ddc <z_impl_k_sem_give>

0000b018 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    b018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    b01c:	4d2c      	ldr	r5, [pc, #176]	; (b0d0 <tx_cmplt_get+0xb8>)
{
    b01e:	460c      	mov	r4, r1
    b020:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    b022:	78a9      	ldrb	r1, [r5, #2]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    b024:	7822      	ldrb	r2, [r4, #0]
    b026:	782b      	ldrb	r3, [r5, #0]
    b028:	4291      	cmp	r1, r2
    b02a:	bf9c      	itt	ls
    b02c:	792a      	ldrbls	r2, [r5, #4]
		*idx = first;
    b02e:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
    b030:	454a      	cmp	r2, r9
{
    b032:	4682      	mov	sl, r0
    b034:	d042      	beq.n	b0bc <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    b036:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
    b03a:	3201      	adds	r2, #1
    b03c:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    b03e:	4f25      	ldr	r7, [pc, #148]	; (b0d4 <tx_cmplt_get+0xbc>)
		i = 0U;
    b040:	4291      	cmp	r1, r2
    b042:	bf08      	it	eq
    b044:	2200      	moveq	r2, #0

	*idx = i;
    b046:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    b048:	5afa      	ldrh	r2, [r7, r3]
    b04a:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
    b04c:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
    b04e:	443b      	add	r3, r7
    b050:	f04f 0b01 	mov.w	fp, #1
    b054:	f04f 0802 	mov.w	r8, #2
    b058:	e021      	b.n	b09e <tx_cmplt_get+0x86>
			struct node_tx *tx_node;
			struct pdu_data *p;

			tx_node = tx->node;
			p = (void *)tx_node->pdu;
			if (!tx_node || (tx_node == (void *)1) ||
    b05a:	b362      	cbz	r2, b0b6 <tx_cmplt_get+0x9e>
			    (((uint32_t)tx_node & ~3) &&
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    b05c:	7902      	ldrb	r2, [r0, #4]
    b05e:	f002 0203 	and.w	r2, r2, #3
			    (((uint32_t)tx_node & ~3) &&
    b062:	3a01      	subs	r2, #1
    b064:	2a01      	cmp	r2, #1
    b066:	d92d      	bls.n	b0c4 <tx_cmplt_get+0xac>
    b068:	f8c3 8004 	str.w	r8, [r3, #4]
				/* ctrl packet or flushed, hence dont count num cmplt */
				tx->node = (void *)2;
			}

			if (((uint32_t)tx_node & ~3)) {
				ll_tx_mem_release(tx_node);
    b06c:	f001 fdbe 	bl	cbec <ll_tx_mem_release>
	if (*idx >= count) {
    b070:	7823      	ldrb	r3, [r4, #0]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    b072:	78a9      	ldrb	r1, [r5, #2]
    b074:	7828      	ldrb	r0, [r5, #0]
    b076:	4299      	cmp	r1, r3
    b078:	bf9c      	itt	ls
    b07a:	792b      	ldrbls	r3, [r5, #4]
		*idx = first;
    b07c:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    b07e:	4599      	cmp	r9, r3
    b080:	d01d      	beq.n	b0be <tx_cmplt_get+0xa6>
	i = *idx + 1;
    b082:	1c5a      	adds	r2, r3, #1
    b084:	b2d2      	uxtb	r2, r2
		i = 0U;
    b086:	4291      	cmp	r1, r2
    b088:	bf08      	it	eq
    b08a:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    b08c:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    b090:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    b092:	5af9      	ldrh	r1, [r7, r3]
    b094:	f8ba 2000 	ldrh.w	r2, [sl]
    b098:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
    b09a:	443b      	add	r3, r7
    b09c:	d10f      	bne.n	b0be <tx_cmplt_get+0xa6>
			tx_node = tx->node;
    b09e:	6858      	ldr	r0, [r3, #4]
			if (!tx_node || (tx_node == (void *)1) ||
    b0a0:	2801      	cmp	r0, #1
			    (((uint32_t)tx_node & ~3) &&
    b0a2:	f020 0203 	bic.w	r2, r0, #3
			if (!tx_node || (tx_node == (void *)1) ||
    b0a6:	d8d8      	bhi.n	b05a <tx_cmplt_get+0x42>
				cmplt++;
    b0a8:	3601      	adds	r6, #1
    b0aa:	b2f6      	uxtb	r6, r6
    b0ac:	f8c3 b004 	str.w	fp, [r3, #4]
			if (((uint32_t)tx_node & ~3)) {
    b0b0:	2a00      	cmp	r2, #0
    b0b2:	d0dd      	beq.n	b070 <tx_cmplt_get+0x58>
    b0b4:	e7da      	b.n	b06c <tx_cmplt_get+0x54>
    b0b6:	f8c3 8004 	str.w	r8, [r3, #4]
    b0ba:	e7d9      	b.n	b070 <tx_cmplt_get+0x58>
		return 0;
    b0bc:	2600      	movs	r6, #0

	return cmplt;
}
    b0be:	4630      	mov	r0, r6
    b0c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
    b0c4:	3601      	adds	r6, #1
    b0c6:	f8c3 b004 	str.w	fp, [r3, #4]
    b0ca:	b2f6      	uxtb	r6, r6
			if (((uint32_t)tx_node & ~3)) {
    b0cc:	e7ce      	b.n	b06c <tx_cmplt_get+0x54>
    b0ce:	bf00      	nop
    b0d0:	20000418 	.word	0x20000418
    b0d4:	20000420 	.word	0x20000420

0000b0d8 <rx_replenish>:
{
    b0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    b0dc:	4f34      	ldr	r7, [pc, #208]	; (b1b0 <rx_replenish+0xd8>)
    b0de:	883b      	ldrh	r3, [r7, #0]
    b0e0:	4298      	cmp	r0, r3
    b0e2:	d95c      	bls.n	b19e <rx_replenish+0xc6>
		max = mem_link_rx.quota_pdu;
    b0e4:	b2de      	uxtb	r6, r3
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    b0e6:	b34b      	cbz	r3, b13c <rx_replenish+0x64>
    b0e8:	4d32      	ldr	r5, [pc, #200]	; (b1b4 <rx_replenish+0xdc>)
		link = mem_acquire(&mem_link_rx.free);
    b0ea:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b1b8 <rx_replenish+0xe0>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    b0ee:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    b0f0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b1bc <rx_replenish+0xe4>
	if (last == count) {
    b0f4:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    b0f6:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
    b0f8:	3401      	adds	r4, #1
    b0fa:	b2e4      	uxtb	r4, r4
		last = 0U;
    b0fc:	42a2      	cmp	r2, r4
    b0fe:	bf08      	it	eq
    b100:	2400      	moveq	r4, #0
	if (last == first) {
    b102:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    b104:	4640      	mov	r0, r8
    b106:	d01b      	beq.n	b140 <rx_replenish+0x68>
    b108:	f7fc ff34 	bl	7f74 <mem_acquire>
    b10c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    b10e:	4648      	mov	r0, r9
		if (!link) {
    b110:	f1ba 0f00 	cmp.w	sl, #0
    b114:	d012      	beq.n	b13c <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    b116:	f7fc ff2d 	bl	7f74 <mem_acquire>
		if (!rx) {
    b11a:	2800      	cmp	r0, #0
    b11c:	d041      	beq.n	b1a2 <rx_replenish+0xca>
		rx->link = link;
    b11e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    b122:	796a      	ldrb	r2, [r5, #5]
    b124:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    b126:	fb02 5303 	mla	r3, r2, r3, r5
    b12a:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
    b12c:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    b12e:	716c      	strb	r4, [r5, #5]
		max--;
    b130:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    b132:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    b134:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    b138:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    b13a:	d1db      	bne.n	b0f4 <rx_replenish+0x1c>
}
    b13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    b140:	883b      	ldrh	r3, [r7, #0]
    b142:	2b00      	cmp	r3, #0
    b144:	d0fa      	beq.n	b13c <rx_replenish+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    b146:	4d1e      	ldr	r5, [pc, #120]	; (b1c0 <rx_replenish+0xe8>)
		link = mem_acquire(&mem_link_rx.free);
    b148:	4e1b      	ldr	r6, [pc, #108]	; (b1b8 <rx_replenish+0xe0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    b14a:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    b14c:	f8df 806c 	ldr.w	r8, [pc, #108]	; b1bc <rx_replenish+0xe4>
		link->mem = NULL;
    b150:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    b154:	78aa      	ldrb	r2, [r5, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    b156:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
    b158:	3401      	adds	r4, #1
    b15a:	b2e4      	uxtb	r4, r4
		last = 0U;
    b15c:	42a2      	cmp	r2, r4
    b15e:	bf08      	it	eq
    b160:	2400      	moveq	r4, #0
	if (last == first) {
    b162:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    b164:	4630      	mov	r0, r6
    b166:	d0e9      	beq.n	b13c <rx_replenish+0x64>
    b168:	f7fc ff04 	bl	7f74 <mem_acquire>
    b16c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    b16e:	4640      	mov	r0, r8
		if (!link) {
    b170:	f1ba 0f00 	cmp.w	sl, #0
    b174:	d0e2      	beq.n	b13c <rx_replenish+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    b176:	f7fc fefd 	bl	7f74 <mem_acquire>
		if (!rx) {
    b17a:	b190      	cbz	r0, b1a2 <rx_replenish+0xca>
		link->mem = NULL;
    b17c:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    b180:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    b184:	796a      	ldrb	r2, [r5, #5]
    b186:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    b188:	fb02 5303 	mla	r3, r2, r3, r5
    b18c:	6098      	str	r0, [r3, #8]
	mem_link_rx.quota_pdu += delta;
    b18e:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    b190:	716c      	strb	r4, [r5, #5]
    b192:	3b01      	subs	r3, #1
    b194:	b29b      	uxth	r3, r3
    b196:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    b198:	2b00      	cmp	r3, #0
    b19a:	d1db      	bne.n	b154 <rx_replenish+0x7c>
    b19c:	e7ce      	b.n	b13c <rx_replenish+0x64>
    b19e:	4606      	mov	r6, r0
    b1a0:	e7a2      	b.n	b0e8 <rx_replenish+0x10>
	mem_release(link, &mem_link_rx.free);
    b1a2:	4650      	mov	r0, sl
    b1a4:	4904      	ldr	r1, [pc, #16]	; (b1b8 <rx_replenish+0xe0>)
}
    b1a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mem_release(link, &mem_link_rx.free);
    b1aa:	f7fc befd 	b.w	7fa8 <mem_release>
    b1ae:	bf00      	nop
    b1b0:	200015ac 	.word	0x200015ac
    b1b4:	200002f4 	.word	0x200002f4
    b1b8:	200015b0 	.word	0x200015b0
    b1bc:	200015fc 	.word	0x200015fc
    b1c0:	200002e0 	.word	0x200002e0

0000b1c4 <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    b1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b1c8:	4e3c      	ldr	r6, [pc, #240]	; (b2bc <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    b1ca:	f8df 80f4 	ldr.w	r8, [pc, #244]	; b2c0 <ull_done+0xfc>
    b1ce:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b2c4 <ull_done+0x100>
{
    b1d2:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    b1d4:	e9d6 0100 	ldrd	r0, r1, [r6]
    b1d8:	aa01      	add	r2, sp, #4
    b1da:	f7fc ff39 	bl	8050 <memq_peek>
		if (link) {
    b1de:	4604      	mov	r4, r0
    b1e0:	2800      	cmp	r0, #0
    b1e2:	d03e      	beq.n	b262 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    b1e4:	6870      	ldr	r0, [r6, #4]
    b1e6:	2200      	movs	r2, #0
    b1e8:	4631      	mov	r1, r6
    b1ea:	f7fc ff39 	bl	8060 <memq_dequeue>
			rx_demux_event_done(link, done);
    b1ee:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    b1f0:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    b1f2:	b135      	cbz	r5, b202 <ull_done+0x3e>
	return hdr->ref;
    b1f4:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d052      	beq.n	b2a0 <ull_done+0xdc>
	return hdr->ref--;
    b1fa:	782b      	ldrb	r3, [r5, #0]
    b1fc:	3b01      	subs	r3, #1
    b1fe:	b2db      	uxtb	r3, r3
    b200:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    b202:	f897 3020 	ldrb.w	r3, [r7, #32]
    b206:	b123      	cbz	r3, b212 <ull_done+0x4e>
    b208:	2b01      	cmp	r3, #1
    b20a:	d13b      	bne.n	b284 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    b20c:	4638      	mov	r0, r7
    b20e:	f003 fb6b 	bl	e8e8 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    b212:	4a2d      	ldr	r2, [pc, #180]	; (b2c8 <ull_done+0x104>)
	last = last + 1;
    b214:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
    b216:	f892 c002 	ldrb.w	ip, [r2, #2]
    b21a:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
    b21c:	3301      	adds	r3, #1
	done->extra.type = 0U;
    b21e:	2100      	movs	r1, #0
    b220:	b2db      	uxtb	r3, r3
		last = 0U;
    b222:	459c      	cmp	ip, r3
    b224:	bf08      	it	eq
    b226:	460b      	moveq	r3, r1
	if (last == first) {
    b228:	4298      	cmp	r0, r3
    b22a:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
    b22e:	7811      	ldrb	r1, [r2, #0]
    b230:	d01a      	beq.n	b268 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    b232:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    b234:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    b236:	fb00 2101 	mla	r1, r0, r1, r2
    b23a:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
    b23c:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    b23e:	2d00      	cmp	r5, #0
    b240:	d0c8      	beq.n	b1d4 <ull_done+0x10>
	return hdr->ref;
    b242:	782b      	ldrb	r3, [r5, #0]
    b244:	2b00      	cmp	r3, #0
    b246:	d1c5      	bne.n	b1d4 <ull_done+0x10>
    b248:	696b      	ldr	r3, [r5, #20]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d0c2      	beq.n	b1d4 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    b24e:	69a8      	ldr	r0, [r5, #24]
    b250:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    b252:	e9d6 0100 	ldrd	r0, r1, [r6]
    b256:	aa01      	add	r2, sp, #4
    b258:	f7fc fefa 	bl	8050 <memq_peek>
		if (link) {
    b25c:	4604      	mov	r4, r0
    b25e:	2800      	cmp	r0, #0
    b260:	d1c0      	bne.n	b1e4 <ull_done+0x20>
}
    b262:	b003      	add	sp, #12
    b264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    b268:	4918      	ldr	r1, [pc, #96]	; (b2cc <ull_done+0x108>)
    b26a:	4819      	ldr	r0, [pc, #100]	; (b2d0 <ull_done+0x10c>)
    b26c:	f640 3324 	movw	r3, #2852	; 0xb24
    b270:	4642      	mov	r2, r8
    b272:	f00b f83e 	bl	162f2 <assert_print>
    b276:	4040      	eors	r0, r0
    b278:	f380 8811 	msr	BASEPRI, r0
    b27c:	f04f 0003 	mov.w	r0, #3
    b280:	df02      	svc	2
    b282:	e7dc      	b.n	b23e <ull_done+0x7a>
		LL_ASSERT(0);
    b284:	4913      	ldr	r1, [pc, #76]	; (b2d4 <ull_done+0x110>)
    b286:	4812      	ldr	r0, [pc, #72]	; (b2d0 <ull_done+0x10c>)
    b288:	f640 331d 	movw	r3, #2845	; 0xb1d
    b28c:	4642      	mov	r2, r8
    b28e:	f00b f830 	bl	162f2 <assert_print>
    b292:	4040      	eors	r0, r0
    b294:	f380 8811 	msr	BASEPRI, r0
    b298:	f04f 0003 	mov.w	r0, #3
    b29c:	df02      	svc	2
		break;
    b29e:	e7b8      	b.n	b212 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    b2a0:	480b      	ldr	r0, [pc, #44]	; (b2d0 <ull_done+0x10c>)
    b2a2:	f640 23c6 	movw	r3, #2758	; 0xac6
    b2a6:	4642      	mov	r2, r8
    b2a8:	4649      	mov	r1, r9
    b2aa:	f00b f822 	bl	162f2 <assert_print>
    b2ae:	4040      	eors	r0, r0
    b2b0:	f380 8811 	msr	BASEPRI, r0
    b2b4:	f04f 0003 	mov.w	r0, #3
    b2b8:	df02      	svc	2
    b2ba:	e79e      	b.n	b1fa <ull_done+0x36>
    b2bc:	200017e4 	.word	0x200017e4
    b2c0:	0001a728 	.word	0x0001a728
    b2c4:	0001a76c 	.word	0x0001a76c
    b2c8:	200002c4 	.word	0x200002c4
    b2cc:	0001a784 	.word	0x0001a784
    b2d0:	0001a580 	.word	0x0001a580
    b2d4:	0001a5e0 	.word	0x0001a5e0

0000b2d8 <rx_demux>:
{
    b2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; b48c <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    b2e0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; b490 <rx_demux+0x1b8>
		LL_ASSERT(0);
    b2e4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b494 <rx_demux+0x1bc>
    b2e8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; b498 <rx_demux+0x1c0>
{
    b2ec:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    b2ee:	e9d8 0100 	ldrd	r0, r1, [r8]
    b2f2:	aa03      	add	r2, sp, #12
    b2f4:	f7fc feac 	bl	8050 <memq_peek>
		if (link) {
    b2f8:	4605      	mov	r5, r0
    b2fa:	2800      	cmp	r0, #0
    b2fc:	d035      	beq.n	b36a <rx_demux+0x92>
			LL_ASSERT(rx);
    b2fe:	9b03      	ldr	r3, [sp, #12]
    b300:	2b00      	cmp	r3, #0
    b302:	f000 80a6 	beq.w	b452 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    b306:	7818      	ldrb	r0, [r3, #0]
    b308:	aa04      	add	r2, sp, #16
    b30a:	a902      	add	r1, sp, #8
    b30c:	f003 fd7e 	bl	ee0c <ull_conn_ack_by_last_peek>
			if (link_tx) {
    b310:	4604      	mov	r4, r0
    b312:	2800      	cmp	r0, #0
    b314:	d055      	beq.n	b3c2 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    b316:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    b31a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    b31e:	780f      	ldrb	r7, [r1, #0]
    b320:	f8ad 200a 	strh.w	r2, [sp, #10]
    b324:	ae05      	add	r6, sp, #20
    b326:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    b328:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    b32c:	f003 fd88 	bl	ee40 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    b330:	4621      	mov	r1, r4
    b332:	9a05      	ldr	r2, [sp, #20]
    b334:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b338:	f003 fdcc 	bl	eed4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    b33c:	4620      	mov	r0, r4
    b33e:	f003 fd3d 	bl	edbc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    b342:	4632      	mov	r2, r6
    b344:	4629      	mov	r1, r5
    b346:	4638      	mov	r0, r7
    b348:	f003 fd60 	bl	ee0c <ull_conn_ack_by_last_peek>
	} while (link);
    b34c:	4604      	mov	r4, r0
    b34e:	2800      	cmp	r0, #0
    b350:	d1ec      	bne.n	b32c <rx_demux+0x54>
	k_sem_give(sem_recv);
    b352:	f8d9 0000 	ldr.w	r0, [r9]
    b356:	f009 fd41 	bl	14ddc <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    b35a:	e9d8 0100 	ldrd	r0, r1, [r8]
    b35e:	aa03      	add	r2, sp, #12
    b360:	f7fc fe76 	bl	8050 <memq_peek>
		if (link) {
    b364:	4605      	mov	r5, r0
    b366:	2800      	cmp	r0, #0
    b368:	d1c9      	bne.n	b2fe <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    b36a:	aa04      	add	r2, sp, #16
    b36c:	a902      	add	r1, sp, #8
    b36e:	f10d 0007 	add.w	r0, sp, #7
    b372:	f003 fd2f 	bl	edd4 <ull_conn_ack_peek>
			if (link) {
    b376:	4604      	mov	r4, r0
    b378:	2800      	cmp	r0, #0
    b37a:	d067      	beq.n	b44c <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    b37c:	9b04      	ldr	r3, [sp, #16]
    b37e:	9305      	str	r3, [sp, #20]
    b380:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    b384:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b388:	f8ad 300a 	strh.w	r3, [sp, #10]
    b38c:	ae05      	add	r6, sp, #20
    b38e:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    b392:	f003 fd55 	bl	ee40 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    b396:	4621      	mov	r1, r4
    b398:	9a05      	ldr	r2, [sp, #20]
    b39a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b39e:	f003 fd99 	bl	eed4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    b3a2:	4620      	mov	r0, r4
    b3a4:	f003 fd0a 	bl	edbc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    b3a8:	4632      	mov	r2, r6
    b3aa:	4629      	mov	r1, r5
    b3ac:	4638      	mov	r0, r7
    b3ae:	f003 fd2d 	bl	ee0c <ull_conn_ack_by_last_peek>
	} while (link);
    b3b2:	4604      	mov	r4, r0
    b3b4:	2800      	cmp	r0, #0
    b3b6:	d1ec      	bne.n	b392 <rx_demux+0xba>
	k_sem_give(sem_recv);
    b3b8:	f8d9 0000 	ldr.w	r0, [r9]
    b3bc:	f009 fd0e 	bl	14ddc <z_impl_k_sem_give>
			if (nack) {
    b3c0:	e7cb      	b.n	b35a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    b3c2:	9b03      	ldr	r3, [sp, #12]
    b3c4:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    b3c6:	791b      	ldrb	r3, [r3, #4]
    b3c8:	3b01      	subs	r3, #1
    b3ca:	2b17      	cmp	r3, #23
    b3cc:	d80d      	bhi.n	b3ea <rx_demux+0x112>
    b3ce:	e8df f003 	tbb	[pc, r3]
    b3d2:	0c1a      	.short	0x0c1a
    b3d4:	0c1a0c38 	.word	0x0c1a0c38
    b3d8:	0c0c0c0c 	.word	0x0c0c0c0c
    b3dc:	0c0c0c0c 	.word	0x0c0c0c0c
    b3e0:	0c0c0c0c 	.word	0x0c0c0c0c
    b3e4:	0c0c0c0c 	.word	0x0c0c0c0c
    b3e8:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
    b3ea:	482c      	ldr	r0, [pc, #176]	; (b49c <rx_demux+0x1c4>)
    b3ec:	f640 23b3 	movw	r3, #2739	; 0xab3
    b3f0:	4652      	mov	r2, sl
    b3f2:	4659      	mov	r1, fp
    b3f4:	f00a ff7d 	bl	162f2 <assert_print>
    b3f8:	4040      	eors	r0, r0
    b3fa:	f380 8811 	msr	BASEPRI, r0
    b3fe:	f04f 0003 	mov.w	r0, #3
    b402:	df02      	svc	2
			if (nack) {
    b404:	e773      	b.n	b2ee <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    b406:	4921      	ldr	r1, [pc, #132]	; (b48c <rx_demux+0x1b4>)
    b408:	f8d8 0004 	ldr.w	r0, [r8, #4]
    b40c:	2200      	movs	r2, #0
    b40e:	f7fc fe27 	bl	8060 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b412:	4b23      	ldr	r3, [pc, #140]	; (b4a0 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    b414:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b416:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    b418:	4628      	mov	r0, r5
    b41a:	4a22      	ldr	r2, [pc, #136]	; (b4a4 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b41c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    b41e:	f7fc fe0d 	bl	803c <memq_enqueue>
	k_sem_give(sem_recv);
    b422:	f8d9 0000 	ldr.w	r0, [r9]
    b426:	f009 fcd9 	bl	14ddc <z_impl_k_sem_give>
			if (nack) {
    b42a:	e796      	b.n	b35a <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    b42c:	4917      	ldr	r1, [pc, #92]	; (b48c <rx_demux+0x1b4>)
    b42e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    b432:	2200      	movs	r2, #0
    b434:	f7fc fe14 	bl	8060 <memq_dequeue>
		ull_conn_setup(link, rx);
    b438:	9905      	ldr	r1, [sp, #20]
    b43a:	4628      	mov	r0, r5
    b43c:	f001 febe 	bl	d1bc <ull_conn_setup>
			if (nack) {
    b440:	e755      	b.n	b2ee <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    b442:	a905      	add	r1, sp, #20
    b444:	4628      	mov	r0, r5
    b446:	f001 fee1 	bl	d20c <ull_conn_rx>
		if (nack) {
    b44a:	b188      	cbz	r0, b470 <rx_demux+0x198>
}
    b44c:	b007      	add	sp, #28
    b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    b452:	4915      	ldr	r1, [pc, #84]	; (b4a8 <rx_demux+0x1d0>)
    b454:	4811      	ldr	r0, [pc, #68]	; (b49c <rx_demux+0x1c4>)
    b456:	f640 133d 	movw	r3, #2365	; 0x93d
    b45a:	4652      	mov	r2, sl
    b45c:	f00a ff49 	bl	162f2 <assert_print>
    b460:	4040      	eors	r0, r0
    b462:	f380 8811 	msr	BASEPRI, r0
    b466:	f04f 0003 	mov.w	r0, #3
    b46a:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    b46c:	9b03      	ldr	r3, [sp, #12]
    b46e:	e74a      	b.n	b306 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    b470:	4906      	ldr	r1, [pc, #24]	; (b48c <rx_demux+0x1b4>)
    b472:	4602      	mov	r2, r0
    b474:	f8d8 0004 	ldr.w	r0, [r8, #4]
    b478:	f7fc fdf2 	bl	8060 <memq_dequeue>
		if (rx) {
    b47c:	9905      	ldr	r1, [sp, #20]
    b47e:	2900      	cmp	r1, #0
    b480:	f43f af35 	beq.w	b2ee <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b484:	4b06      	ldr	r3, [pc, #24]	; (b4a0 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    b486:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b488:	795b      	ldrb	r3, [r3, #5]
    b48a:	e7c6      	b.n	b41a <rx_demux+0x142>
    b48c:	200017ec 	.word	0x200017ec
    b490:	200017f4 	.word	0x200017f4
    b494:	0001a728 	.word	0x0001a728
    b498:	0001a5e0 	.word	0x0001a5e0
    b49c:	0001a580 	.word	0x0001a580
    b4a0:	20000418 	.word	0x20000418
    b4a4:	200017e0 	.word	0x200017e0
    b4a8:	0001a794 	.word	0x0001a794

0000b4ac <ll_rx_get>:
{
    b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4b0:	4c31      	ldr	r4, [pc, #196]	; (b578 <ll_rx_get+0xcc>)
	mem_release(link, &mem_link_rx.free);
    b4b2:	4f32      	ldr	r7, [pc, #200]	; (b57c <ll_rx_get+0xd0>)
    b4b4:	4e32      	ldr	r6, [pc, #200]	; (b580 <ll_rx_get+0xd4>)
{
    b4b6:	b085      	sub	sp, #20
    b4b8:	4689      	mov	r9, r1
    b4ba:	9001      	str	r0, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    b4bc:	f104 0a04 	add.w	sl, r4, #4
	mem_release(link, &mem_link_rx.free);
    b4c0:	f107 0b04 	add.w	fp, r7, #4
	*node_rx = NULL;
    b4c4:	9a01      	ldr	r2, [sp, #4]
    b4c6:	2300      	movs	r3, #0
    b4c8:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    b4ca:	e9d6 0100 	ldrd	r0, r1, [r6]
    b4ce:	aa03      	add	r2, sp, #12
    b4d0:	f7fc fdbe 	bl	8050 <memq_peek>
	if (link) {
    b4d4:	4605      	mov	r5, r0
    b4d6:	2800      	cmp	r0, #0
    b4d8:	d03f      	beq.n	b55a <ll_rx_get+0xae>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    b4da:	9b03      	ldr	r3, [sp, #12]
    b4dc:	4651      	mov	r1, sl
    b4de:	781a      	ldrb	r2, [r3, #0]
    b4e0:	4648      	mov	r0, r9
    b4e2:	f7ff fd99 	bl	b018 <tx_cmplt_get>
		if (!cmplt) {
    b4e6:	2800      	cmp	r0, #0
    b4e8:	d13c      	bne.n	b564 <ll_rx_get+0xb8>
			f = mfifo_tx_ack.f;
    b4ea:	7923      	ldrb	r3, [r4, #4]
    b4ec:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    b4f0:	7962      	ldrb	r2, [r4, #5]
    b4f2:	4680      	mov	r8, r0
    b4f4:	f10d 0109 	add.w	r1, sp, #9
    b4f8:	f10d 000a 	add.w	r0, sp, #10
    b4fc:	f7ff fd8c 	bl	b018 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    b500:	ea48 0200 	orr.w	r2, r8, r0
    b504:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    b508:	d1f2      	bne.n	b4f0 <ll_rx_get+0x44>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    b50a:	9b03      	ldr	r3, [sp, #12]
    b50c:	7919      	ldrb	r1, [r3, #4]
    b50e:	2901      	cmp	r1, #1
    b510:	d12b      	bne.n	b56a <ll_rx_get+0xbe>
	(void)memq_dequeue(memq_ll_rx.tail,
    b512:	491b      	ldr	r1, [pc, #108]	; (b580 <ll_rx_get+0xd4>)
    b514:	6870      	ldr	r0, [r6, #4]
    b516:	f7fc fda3 	bl	8060 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
    b51a:	4659      	mov	r1, fp
    b51c:	4628      	mov	r0, r5
    b51e:	f7fc fd43 	bl	7fa8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    b522:	883b      	ldrh	r3, [r7, #0]
    b524:	2b05      	cmp	r3, #5
    b526:	d809      	bhi.n	b53c <ll_rx_get+0x90>
	mem_release(node_rx, &mem_pdu_rx.free);
    b528:	9803      	ldr	r0, [sp, #12]
    b52a:	4916      	ldr	r1, [pc, #88]	; (b584 <ll_rx_get+0xd8>)
	mem_link_rx.quota_pdu += delta;
    b52c:	3301      	adds	r3, #1
    b52e:	803b      	strh	r3, [r7, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
    b530:	f7fc fd3a 	bl	7fa8 <mem_release>
	rx_replenish(1U);
    b534:	2001      	movs	r0, #1
    b536:	f7ff fdcf 	bl	b0d8 <rx_replenish>
				goto ll_rx_get_again;
    b53a:	e7c3      	b.n	b4c4 <ll_rx_get+0x18>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    b53c:	4a12      	ldr	r2, [pc, #72]	; (b588 <ll_rx_get+0xdc>)
    b53e:	4913      	ldr	r1, [pc, #76]	; (b58c <ll_rx_get+0xe0>)
    b540:	4813      	ldr	r0, [pc, #76]	; (b590 <ll_rx_get+0xe4>)
    b542:	f240 633b 	movw	r3, #1595	; 0x63b
    b546:	f00a fed4 	bl	162f2 <assert_print>
    b54a:	4040      	eors	r0, r0
    b54c:	f380 8811 	msr	BASEPRI, r0
    b550:	f04f 0003 	mov.w	r0, #3
    b554:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    b556:	883b      	ldrh	r3, [r7, #0]
    b558:	e7e6      	b.n	b528 <ll_rx_get+0x7c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    b55a:	7962      	ldrb	r2, [r4, #5]
    b55c:	490d      	ldr	r1, [pc, #52]	; (b594 <ll_rx_get+0xe8>)
    b55e:	4648      	mov	r0, r9
    b560:	f7ff fd5a 	bl	b018 <tx_cmplt_get>
}
    b564:	b005      	add	sp, #20
    b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*node_rx = rx;
    b56a:	9901      	ldr	r1, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    b56c:	4610      	mov	r0, r2
			*node_rx = rx;
    b56e:	600b      	str	r3, [r1, #0]
}
    b570:	b005      	add	sp, #20
    b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b576:	bf00      	nop
    b578:	20000418 	.word	0x20000418
    b57c:	200015ac 	.word	0x200015ac
    b580:	200017dc 	.word	0x200017dc
    b584:	200015fc 	.word	0x200015fc
    b588:	0001a728 	.word	0x0001a728
    b58c:	0001a798 	.word	0x0001a798
    b590:	0001a580 	.word	0x0001a580
    b594:	2000041c 	.word	0x2000041c

0000b598 <ll_rx_dequeue>:
{
    b598:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    b59a:	492f      	ldr	r1, [pc, #188]	; (b658 <ll_rx_dequeue+0xc0>)
{
    b59c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    b59e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    b5a0:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    b5a2:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    b5a4:	aa01      	add	r2, sp, #4
    b5a6:	f7fc fd5b 	bl	8060 <memq_dequeue>
	LL_ASSERT(link);
    b5aa:	4604      	mov	r4, r0
    b5ac:	2800      	cmp	r0, #0
    b5ae:	d044      	beq.n	b63a <ll_rx_dequeue+0xa2>
	mem_release(link, &mem_link_rx.free);
    b5b0:	492a      	ldr	r1, [pc, #168]	; (b65c <ll_rx_dequeue+0xc4>)
    b5b2:	4620      	mov	r0, r4
    b5b4:	f7fc fcf8 	bl	7fa8 <mem_release>
	switch (rx->type) {
    b5b8:	9a01      	ldr	r2, [sp, #4]
    b5ba:	7913      	ldrb	r3, [r2, #4]
    b5bc:	2b1d      	cmp	r3, #29
    b5be:	d810      	bhi.n	b5e2 <ll_rx_dequeue+0x4a>
    b5c0:	e8df f003 	tbb	[pc, r3]
    b5c4:	1e0f0f1e 	.word	0x1e0f0f1e
    b5c8:	0f0f1e0f 	.word	0x0f0f1e0f
    b5cc:	0f0f0f0f 	.word	0x0f0f0f0f
    b5d0:	0f0f0f0f 	.word	0x0f0f0f0f
    b5d4:	0f0f0f0f 	.word	0x0f0f0f0f
    b5d8:	2f0f0f0f 	.word	0x2f0f0f0f
    b5dc:	1e1e1e1e 	.word	0x1e1e1e1e
    b5e0:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
    b5e2:	4a1f      	ldr	r2, [pc, #124]	; (b660 <ll_rx_dequeue+0xc8>)
    b5e4:	491f      	ldr	r1, [pc, #124]	; (b664 <ll_rx_dequeue+0xcc>)
    b5e6:	4820      	ldr	r0, [pc, #128]	; (b668 <ll_rx_dequeue+0xd0>)
    b5e8:	f240 43fa 	movw	r3, #1274	; 0x4fa
    b5ec:	f00a fe81 	bl	162f2 <assert_print>
    b5f0:	4040      	eors	r0, r0
    b5f2:	f380 8811 	msr	BASEPRI, r0
    b5f6:	f04f 0003 	mov.w	r0, #3
    b5fa:	df02      	svc	2
}
    b5fc:	b002      	add	sp, #8
    b5fe:	bd10      	pop	{r4, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    b600:	2b00      	cmp	r3, #0
    b602:	d1fb      	bne.n	b5fc <ll_rx_dequeue+0x64>
    b604:	4a16      	ldr	r2, [pc, #88]	; (b660 <ll_rx_dequeue+0xc8>)
    b606:	4919      	ldr	r1, [pc, #100]	; (b66c <ll_rx_dequeue+0xd4>)
    b608:	4817      	ldr	r0, [pc, #92]	; (b668 <ll_rx_dequeue+0xd0>)
    b60a:	f240 43f6 	movw	r3, #1270	; 0x4f6
    b60e:	f00a fe70 	bl	162f2 <assert_print>
    b612:	4040      	eors	r0, r0
    b614:	f380 8811 	msr	BASEPRI, r0
    b618:	f04f 0003 	mov.w	r0, #3
    b61c:	df02      	svc	2
}
    b61e:	b002      	add	sp, #8
    b620:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
    b622:	6893      	ldr	r3, [r2, #8]
    b624:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
    b626:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
			scan->lll.conn = NULL;
    b62a:	2100      	movs	r1, #0
			scan->is_enabled = 0U;
    b62c:	f361 0200 	bfi	r2, r1, #0, #1
			scan->lll.conn = NULL;
    b630:	6219      	str	r1, [r3, #32]
			scan->is_enabled = 0U;
    b632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
    b636:	b002      	add	sp, #8
    b638:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
    b63a:	4a09      	ldr	r2, [pc, #36]	; (b660 <ll_rx_dequeue+0xc8>)
    b63c:	490c      	ldr	r1, [pc, #48]	; (b670 <ll_rx_dequeue+0xd8>)
    b63e:	480a      	ldr	r0, [pc, #40]	; (b668 <ll_rx_dequeue+0xd0>)
    b640:	f44f 7374 	mov.w	r3, #976	; 0x3d0
    b644:	f00a fe55 	bl	162f2 <assert_print>
    b648:	4040      	eors	r0, r0
    b64a:	f380 8811 	msr	BASEPRI, r0
    b64e:	f04f 0003 	mov.w	r0, #3
    b652:	df02      	svc	2
    b654:	e7ac      	b.n	b5b0 <ll_rx_dequeue+0x18>
    b656:	bf00      	nop
    b658:	200017dc 	.word	0x200017dc
    b65c:	200015b0 	.word	0x200015b0
    b660:	0001a728 	.word	0x0001a728
    b664:	0001a5e0 	.word	0x0001a5e0
    b668:	0001a580 	.word	0x0001a580
    b66c:	0001a7d8 	.word	0x0001a7d8
    b670:	0001a97c 	.word	0x0001a97c

0000b674 <ll_rx_mem_release>:
{
    b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    b678:	6804      	ldr	r4, [r0, #0]
{
    b67a:	4680      	mov	r8, r0
	while (rx) {
    b67c:	b344      	cbz	r4, b6d0 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    b67e:	4f56      	ldr	r7, [pc, #344]	; (b7d8 <ll_rx_mem_release+0x164>)
    b680:	f8df 9158 	ldr.w	r9, [pc, #344]	; b7dc <ll_rx_mem_release+0x168>
    b684:	4e56      	ldr	r6, [pc, #344]	; (b7e0 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
    b686:	4625      	mov	r5, r4
    b688:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    b68a:	792b      	ldrb	r3, [r5, #4]
    b68c:	2b1d      	cmp	r3, #29
    b68e:	d810      	bhi.n	b6b2 <ll_rx_mem_release+0x3e>
    b690:	e8df f003 	tbb	[pc, r3]
    b694:	380f0f38 	.word	0x380f0f38
    b698:	0f0f380f 	.word	0x0f0f380f
    b69c:	0f0f0f0f 	.word	0x0f0f0f0f
    b6a0:	0f0f0f0f 	.word	0x0f0f0f0f
    b6a4:	0f0f0f0f 	.word	0x0f0f0f0f
    b6a8:	260f0f0f 	.word	0x260f0f0f
    b6ac:	38383856 	.word	0x38383856
    b6b0:	3838      	.short	0x3838
			LL_ASSERT(0);
    b6b2:	f240 632f 	movw	r3, #1583	; 0x62f
    b6b6:	463a      	mov	r2, r7
    b6b8:	4649      	mov	r1, r9
    b6ba:	4630      	mov	r0, r6
    b6bc:	f00a fe19 	bl	162f2 <assert_print>
    b6c0:	4040      	eors	r0, r0
    b6c2:	f380 8811 	msr	BASEPRI, r0
    b6c6:	f04f 0003 	mov.w	r0, #3
    b6ca:	df02      	svc	2
	while (rx) {
    b6cc:	2c00      	cmp	r4, #0
    b6ce:	d1da      	bne.n	b686 <ll_rx_mem_release+0x12>
	*node_rx = rx;
    b6d0:	2300      	movs	r3, #0
    b6d2:	f8c8 3000 	str.w	r3, [r8]
	rx_replenish(UINT8_MAX);
    b6d6:	20ff      	movs	r0, #255	; 0xff
}
    b6d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
    b6dc:	f7ff bcfc 	b.w	b0d8 <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    b6e0:	7f2b      	ldrb	r3, [r5, #28]
    b6e2:	2b02      	cmp	r3, #2
    b6e4:	d062      	beq.n	b7ac <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
    b6e6:	b1db      	cbz	r3, b720 <ll_rx_mem_release+0xac>
    b6e8:	493e      	ldr	r1, [pc, #248]	; (b7e4 <ll_rx_mem_release+0x170>)
    b6ea:	f240 535e 	movw	r3, #1374	; 0x55e
    b6ee:	463a      	mov	r2, r7
    b6f0:	4630      	mov	r0, r6
    b6f2:	f00a fdfe 	bl	162f2 <assert_print>
    b6f6:	4040      	eors	r0, r0
    b6f8:	f380 8811 	msr	BASEPRI, r0
    b6fc:	f04f 0003 	mov.w	r0, #3
    b700:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    b702:	792b      	ldrb	r3, [r5, #4]
    b704:	b963      	cbnz	r3, b720 <ll_rx_mem_release+0xac>
    b706:	4938      	ldr	r1, [pc, #224]	; (b7e8 <ll_rx_mem_release+0x174>)
    b708:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
    b70c:	463a      	mov	r2, r7
    b70e:	4630      	mov	r0, r6
    b710:	f00a fdef 	bl	162f2 <assert_print>
    b714:	4040      	eors	r0, r0
    b716:	f380 8811 	msr	BASEPRI, r0
    b71a:	f04f 0003 	mov.w	r0, #3
    b71e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    b720:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b7ec <ll_rx_mem_release+0x178>
    b724:	f8ba 3000 	ldrh.w	r3, [sl]
    b728:	2b05      	cmp	r3, #5
    b72a:	d82f      	bhi.n	b78c <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
    b72c:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
    b72e:	4930      	ldr	r1, [pc, #192]	; (b7f0 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
    b730:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
    b734:	4628      	mov	r0, r5
    b736:	f7fc fc37 	bl	7fa8 <mem_release>
	while (rx) {
    b73a:	2c00      	cmp	r4, #0
    b73c:	d1a3      	bne.n	b686 <ll_rx_mem_release+0x12>
    b73e:	e7c7      	b.n	b6d0 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    b740:	88e8      	ldrh	r0, [r5, #6]
    b742:	2800      	cmp	r0, #0
    b744:	d1c2      	bne.n	b6cc <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    b746:	f001 fa31 	bl	cbac <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    b74a:	6d83      	ldr	r3, [r0, #88]	; 0x58
				conn = ll_conn_get(rx_free->handle);
    b74c:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    b74e:	b163      	cbz	r3, b76a <ll_rx_mem_release+0xf6>
    b750:	4928      	ldr	r1, [pc, #160]	; (b7f4 <ll_rx_mem_release+0x180>)
    b752:	f240 6321 	movw	r3, #1569	; 0x621
    b756:	463a      	mov	r2, r7
    b758:	4630      	mov	r0, r6
    b75a:	f00a fdca 	bl	162f2 <assert_print>
    b75e:	4040      	eors	r0, r0
    b760:	f380 8811 	msr	BASEPRI, r0
    b764:	f04f 0003 	mov.w	r0, #3
    b768:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    b76a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    b76e:	f105 0048 	add.w	r0, r5, #72	; 0x48
    b772:	f7fc fc59 	bl	8028 <memq_deinit>
				LL_ASSERT(link);
    b776:	4682      	mov	sl, r0
    b778:	b1f8      	cbz	r0, b7ba <ll_rx_mem_release+0x146>
				conn->lll.link_tx_free = link;
    b77a:	f8c5 a058 	str.w	sl, [r5, #88]	; 0x58
				ll_conn_release(conn);
    b77e:	4628      	mov	r0, r5
    b780:	f001 fa06 	bl	cb90 <ll_conn_release>
	while (rx) {
    b784:	2c00      	cmp	r4, #0
    b786:	f47f af7e 	bne.w	b686 <ll_rx_mem_release+0x12>
    b78a:	e7a1      	b.n	b6d0 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    b78c:	491a      	ldr	r1, [pc, #104]	; (b7f8 <ll_rx_mem_release+0x184>)
    b78e:	f240 633b 	movw	r3, #1595	; 0x63b
    b792:	463a      	mov	r2, r7
    b794:	4630      	mov	r0, r6
    b796:	f00a fdac 	bl	162f2 <assert_print>
    b79a:	4040      	eors	r0, r0
    b79c:	f380 8811 	msr	BASEPRI, r0
    b7a0:	f04f 0003 	mov.w	r0, #3
    b7a4:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    b7a6:	f8ba 3000 	ldrh.w	r3, [sl]
    b7aa:	e7bf      	b.n	b72c <ll_rx_mem_release+0xb8>
				ull_central_cleanup(rx_free);
    b7ac:	4628      	mov	r0, r5
    b7ae:	f003 fed9 	bl	f564 <ull_central_cleanup>
	while (rx) {
    b7b2:	2c00      	cmp	r4, #0
    b7b4:	f47f af67 	bne.w	b686 <ll_rx_mem_release+0x12>
    b7b8:	e78a      	b.n	b6d0 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    b7ba:	4910      	ldr	r1, [pc, #64]	; (b7fc <ll_rx_mem_release+0x188>)
    b7bc:	f240 6324 	movw	r3, #1572	; 0x624
    b7c0:	463a      	mov	r2, r7
    b7c2:	4630      	mov	r0, r6
    b7c4:	f00a fd95 	bl	162f2 <assert_print>
    b7c8:	4040      	eors	r0, r0
    b7ca:	f380 8811 	msr	BASEPRI, r0
    b7ce:	f04f 0003 	mov.w	r0, #3
    b7d2:	df02      	svc	2
    b7d4:	e7d1      	b.n	b77a <ll_rx_mem_release+0x106>
    b7d6:	bf00      	nop
    b7d8:	0001a728 	.word	0x0001a728
    b7dc:	0001a5e0 	.word	0x0001a5e0
    b7e0:	0001a580 	.word	0x0001a580
    b7e4:	0001a7f8 	.word	0x0001a7f8
    b7e8:	0001a804 	.word	0x0001a804
    b7ec:	200015ac 	.word	0x200015ac
    b7f0:	200015fc 	.word	0x200015fc
    b7f4:	0001a828 	.word	0x0001a828
    b7f8:	0001a798 	.word	0x0001a798
    b7fc:	0001a97c 	.word	0x0001a97c

0000b800 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    b800:	4801      	ldr	r0, [pc, #4]	; (b808 <ll_rx_link_alloc+0x8>)
    b802:	f7fc bbb7 	b.w	7f74 <mem_acquire>
    b806:	bf00      	nop
    b808:	200015b0 	.word	0x200015b0

0000b80c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    b80c:	4901      	ldr	r1, [pc, #4]	; (b814 <ll_rx_link_release+0x8>)
    b80e:	f7fc bbcb 	b.w	7fa8 <mem_release>
    b812:	bf00      	nop
    b814:	200015b0 	.word	0x200015b0

0000b818 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b818:	4b02      	ldr	r3, [pc, #8]	; (b824 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    b81a:	4a03      	ldr	r2, [pc, #12]	; (b828 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    b81c:	795b      	ldrb	r3, [r3, #5]
    b81e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    b820:	f7fc bc0c 	b.w	803c <memq_enqueue>
    b824:	20000418 	.word	0x20000418
    b828:	200017e0 	.word	0x200017e0

0000b82c <ll_rx_sched>:
	k_sem_give(sem_recv);
    b82c:	4b01      	ldr	r3, [pc, #4]	; (b834 <ll_rx_sched+0x8>)
    b82e:	6818      	ldr	r0, [r3, #0]
    b830:	f009 bad4 	b.w	14ddc <z_impl_k_sem_give>
    b834:	200017f4 	.word	0x200017f4

0000b838 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    b838:	4b0e      	ldr	r3, [pc, #56]	; (b874 <ll_pdu_rx_alloc_peek+0x3c>)
    b83a:	7919      	ldrb	r1, [r3, #4]
    b83c:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
    b83e:	4291      	cmp	r1, r2
    b840:	d80a      	bhi.n	b858 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    b842:	eba2 0c01 	sub.w	ip, r2, r1
    b846:	fa5f fc8c 	uxtb.w	ip, ip
    b84a:	4560      	cmp	r0, ip
    b84c:	d802      	bhi.n	b854 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    b84e:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    b850:	7818      	ldrb	r0, [r3, #0]
    b852:	d10a      	bne.n	b86a <ll_pdu_rx_alloc_peek+0x32>
		return NULL;
    b854:	2000      	movs	r0, #0
}
    b856:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    b858:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
    b85c:	ebac 0c01 	sub.w	ip, ip, r1
    b860:	4462      	add	r2, ip
    b862:	b2d2      	uxtb	r2, r2
    b864:	4290      	cmp	r0, r2
    b866:	d8f5      	bhi.n	b854 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    b868:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    b86a:	fb01 3300 	mla	r3, r1, r0, r3
    b86e:	6898      	ldr	r0, [r3, #8]
    b870:	4770      	bx	lr
    b872:	bf00      	nop
    b874:	200002e0 	.word	0x200002e0

0000b878 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    b878:	4b09      	ldr	r3, [pc, #36]	; (b8a0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    b87a:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    b87c:	795a      	ldrb	r2, [r3, #5]
    b87e:	7818      	ldrb	r0, [r3, #0]
    b880:	f893 c002 	ldrb.w	ip, [r3, #2]
    b884:	428a      	cmp	r2, r1
    b886:	d009      	beq.n	b89c <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    b888:	1c4a      	adds	r2, r1, #1
    b88a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    b88c:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    b890:	4594      	cmp	ip, r2
    b892:	bf08      	it	eq
    b894:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    b896:	6888      	ldr	r0, [r1, #8]
	}

	*first = _first; /* Write back read-index */
    b898:	711a      	strb	r2, [r3, #4]

	return mem;
    b89a:	4770      	bx	lr
		return NULL;
    b89c:	2000      	movs	r0, #0
}
    b89e:	4770      	bx	lr
    b8a0:	200002e0 	.word	0x200002e0

0000b8a4 <ll_tx_ack_put>:
{
    b8a4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    b8a6:	4a15      	ldr	r2, [pc, #84]	; (b8fc <ll_tx_ack_put+0x58>)
    b8a8:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
    b8ac:	7894      	ldrb	r4, [r2, #2]
    b8ae:	f892 e004 	ldrb.w	lr, [r2, #4]
    b8b2:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    b8b4:	f10c 0301 	add.w	r3, ip, #1
    b8b8:	b2db      	uxtb	r3, r3
		last = 0U;
    b8ba:	429c      	cmp	r4, r3
    b8bc:	bf08      	it	eq
    b8be:	2300      	moveq	r3, #0
	if (last == first) {
    b8c0:	459e      	cmp	lr, r3
    b8c2:	d00a      	beq.n	b8da <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    b8c4:	fb1c fc05 	smulbb	ip, ip, r5
    b8c8:	f102 0e08 	add.w	lr, r2, #8
	tx->handle = handle;
    b8cc:	f82e 000c 	strh.w	r0, [lr, ip]
    b8d0:	44f4      	add	ip, lr
	tx->node = node_tx;
    b8d2:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    b8d6:	7153      	strb	r3, [r2, #5]
}
    b8d8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    b8da:	4a09      	ldr	r2, [pc, #36]	; (b900 <ll_tx_ack_put+0x5c>)
    b8dc:	4909      	ldr	r1, [pc, #36]	; (b904 <ll_tx_ack_put+0x60>)
    b8de:	480a      	ldr	r0, [pc, #40]	; (b908 <ll_tx_ack_put+0x64>)
    b8e0:	f240 638f 	movw	r3, #1679	; 0x68f
    b8e4:	f00a fd05 	bl	162f2 <assert_print>
    b8e8:	4040      	eors	r0, r0
    b8ea:	f380 8811 	msr	BASEPRI, r0
    b8ee:	f04f 0003 	mov.w	r0, #3
    b8f2:	df02      	svc	2
	tx->handle = handle;
    b8f4:	2300      	movs	r3, #0
    b8f6:	801b      	strh	r3, [r3, #0]
    b8f8:	deff      	udf	#255	; 0xff
    b8fa:	bf00      	nop
    b8fc:	20000418 	.word	0x20000418
    b900:	0001a728 	.word	0x0001a728
    b904:	0001a970 	.word	0x0001a970
    b908:	0001a580 	.word	0x0001a580

0000b90c <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b90c:	f030 0302 	bics.w	r3, r0, #2
{
    b910:	b510      	push	{r4, lr}
    b912:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b914:	d002      	beq.n	b91c <ull_ticker_status_take+0x10>
    b916:	680b      	ldr	r3, [r1, #0]
    b918:	2b02      	cmp	r3, #2
    b91a:	d008      	beq.n	b92e <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    b91c:	f04f 32ff 	mov.w	r2, #4294967295
    b920:	f04f 33ff 	mov.w	r3, #4294967295
    b924:	4809      	ldr	r0, [pc, #36]	; (b94c <ull_ticker_status_take+0x40>)
    b926:	f009 fa7f 	bl	14e28 <z_impl_k_sem_take>
	return *ret_cb;
    b92a:	6820      	ldr	r0, [r4, #0]
}
    b92c:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b92e:	4a08      	ldr	r2, [pc, #32]	; (b950 <ull_ticker_status_take+0x44>)
    b930:	4908      	ldr	r1, [pc, #32]	; (b954 <ull_ticker_status_take+0x48>)
    b932:	4809      	ldr	r0, [pc, #36]	; (b958 <ull_ticker_status_take+0x4c>)
    b934:	f240 63c3 	movw	r3, #1731	; 0x6c3
    b938:	f00a fcdb 	bl	162f2 <assert_print>
    b93c:	4040      	eors	r0, r0
    b93e:	f380 8811 	msr	BASEPRI, r0
    b942:	f04f 0003 	mov.w	r0, #3
    b946:	df02      	svc	2
    b948:	e7e8      	b.n	b91c <ull_ticker_status_take+0x10>
    b94a:	bf00      	nop
    b94c:	200017f8 	.word	0x200017f8
    b950:	0001a728 	.word	0x0001a728
    b954:	0001a848 	.word	0x0001a848
    b958:	0001a580 	.word	0x0001a580

0000b95c <ull_disable_mark_get>:
	return mark_get(mark_disable);
    b95c:	4b01      	ldr	r3, [pc, #4]	; (b964 <ull_disable_mark_get+0x8>)
}
    b95e:	6818      	ldr	r0, [r3, #0]
    b960:	4770      	bx	lr
    b962:	bf00      	nop
    b964:	20001578 	.word	0x20001578

0000b968 <ull_update_mark>:
	if (!*m) {
    b968:	4a03      	ldr	r2, [pc, #12]	; (b978 <ull_update_mark+0x10>)
{
    b96a:	4603      	mov	r3, r0
	if (!*m) {
    b96c:	6810      	ldr	r0, [r2, #0]
    b96e:	b100      	cbz	r0, b972 <ull_update_mark+0xa>
}
    b970:	4770      	bx	lr
		*m = param;
    b972:	6013      	str	r3, [r2, #0]
    b974:	4618      	mov	r0, r3
}
    b976:	4770      	bx	lr
    b978:	2000157c 	.word	0x2000157c

0000b97c <ull_update_unmark>:
	if (*m && *m == param) {
    b97c:	4a04      	ldr	r2, [pc, #16]	; (b990 <ull_update_unmark+0x14>)
    b97e:	6813      	ldr	r3, [r2, #0]
    b980:	b123      	cbz	r3, b98c <ull_update_unmark+0x10>
    b982:	4298      	cmp	r0, r3
		*m = NULL;
    b984:	bf06      	itte	eq
    b986:	2100      	moveq	r1, #0
    b988:	6011      	streq	r1, [r2, #0]
	return NULL;
    b98a:	2300      	movne	r3, #0
}
    b98c:	4618      	mov	r0, r3
    b98e:	4770      	bx	lr
    b990:	2000157c 	.word	0x2000157c

0000b994 <ull_update_mark_get>:
	return mark_get(mark_update);
    b994:	4b01      	ldr	r3, [pc, #4]	; (b99c <ull_update_mark_get+0x8>)
}
    b996:	6818      	ldr	r0, [r3, #0]
    b998:	4770      	bx	lr
    b99a:	bf00      	nop
    b99c:	2000157c 	.word	0x2000157c

0000b9a0 <ull_disable>:
{
    b9a0:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    b9a2:	6805      	ldr	r5, [r0, #0]
    b9a4:	782b      	ldrb	r3, [r5, #0]
{
    b9a6:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
    b9a8:	b353      	cbz	r3, ba00 <ull_disable+0x60>
	compiler_barrier();
    b9aa:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    b9ac:	2201      	movs	r2, #1
    b9ae:	2100      	movs	r1, #0
    b9b0:	4668      	mov	r0, sp
    b9b2:	f00d fe9b 	bl	196ec <z_impl_k_sem_init>
    b9b6:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    b9b8:	4a13      	ldr	r2, [pc, #76]	; (ba08 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    b9ba:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    b9be:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    b9c0:	b1f3      	cbz	r3, ba00 <ull_disable+0x60>
	mfy.param = lll;
    b9c2:	4b12      	ldr	r3, [pc, #72]	; (ba0c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    b9c4:	2200      	movs	r2, #0
    b9c6:	4611      	mov	r1, r2
    b9c8:	2003      	movs	r0, #3
	mfy.param = lll;
    b9ca:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    b9cc:	f7fc fbaa 	bl	8124 <mayfly_enqueue>
	LL_ASSERT(!ret);
    b9d0:	b940      	cbnz	r0, b9e4 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    b9d2:	f04f 32ff 	mov.w	r2, #4294967295
    b9d6:	f04f 33ff 	mov.w	r3, #4294967295
    b9da:	4668      	mov	r0, sp
    b9dc:	f009 fa24 	bl	14e28 <z_impl_k_sem_take>
}
    b9e0:	b007      	add	sp, #28
    b9e2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    b9e4:	4a0a      	ldr	r2, [pc, #40]	; (ba10 <ull_disable+0x70>)
    b9e6:	490b      	ldr	r1, [pc, #44]	; (ba14 <ull_disable+0x74>)
    b9e8:	480b      	ldr	r0, [pc, #44]	; (ba18 <ull_disable+0x78>)
    b9ea:	f44f 63e8 	mov.w	r3, #1856	; 0x740
    b9ee:	f00a fc80 	bl	162f2 <assert_print>
    b9f2:	4040      	eors	r0, r0
    b9f4:	f380 8811 	msr	BASEPRI, r0
    b9f8:	f04f 0003 	mov.w	r0, #3
    b9fc:	df02      	svc	2
    b9fe:	e7e8      	b.n	b9d2 <ull_disable+0x32>
		return -EALREADY;
    ba00:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ba04:	e7ec      	b.n	b9e0 <ull_disable+0x40>
    ba06:	bf00      	nop
    ba08:	0000b015 	.word	0x0000b015
    ba0c:	20000480 	.word	0x20000480
    ba10:	0001a728 	.word	0x0001a728
    ba14:	0001a840 	.word	0x0001a840
    ba18:	0001a580 	.word	0x0001a580

0000ba1c <ull_ticker_stop_with_mark>:
{
    ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    ba1e:	4e20      	ldr	r6, [pc, #128]	; (baa0 <ull_ticker_stop_with_mark+0x84>)
    ba20:	6833      	ldr	r3, [r6, #0]
{
    ba22:	b085      	sub	sp, #20
    ba24:	460c      	mov	r4, r1
    ba26:	4617      	mov	r7, r2
	if (!*m) {
    ba28:	b353      	cbz	r3, ba80 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
    ba2a:	4299      	cmp	r1, r3
    ba2c:	d113      	bne.n	ba56 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ba2e:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    ba30:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ba32:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    ba34:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    ba36:	9500      	str	r5, [sp, #0]
    ba38:	4b1a      	ldr	r3, [pc, #104]	; (baa4 <ull_ticker_stop_with_mark+0x88>)
    ba3a:	2103      	movs	r1, #3
    ba3c:	2000      	movs	r0, #0
    ba3e:	f7fd fdd3 	bl	95e8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    ba42:	4629      	mov	r1, r5
    ba44:	f7ff ff62 	bl	b90c <ull_ticker_status_take>
	if (ret) {
    ba48:	4605      	mov	r5, r0
    ba4a:	b140      	cbz	r0, ba5e <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
    ba4c:	6833      	ldr	r3, [r6, #0]
    ba4e:	b10b      	cbz	r3, ba54 <ull_ticker_stop_with_mark+0x38>
    ba50:	429c      	cmp	r4, r3
    ba52:	d017      	beq.n	ba84 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
    ba54:	b304      	cbz	r4, ba98 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
    ba56:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    ba5a:	b005      	add	sp, #20
    ba5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    ba5e:	4638      	mov	r0, r7
    ba60:	f7ff ff9e 	bl	b9a0 <ull_disable>
	if (*m && *m == param) {
    ba64:	6833      	ldr	r3, [r6, #0]
    ba66:	b10b      	cbz	r3, ba6c <ull_ticker_stop_with_mark+0x50>
    ba68:	429c      	cmp	r4, r3
    ba6a:	d011      	beq.n	ba90 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
    ba6c:	2c00      	cmp	r4, #0
    ba6e:	d1f2      	bne.n	ba56 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
    ba70:	2800      	cmp	r0, #0
    ba72:	d0f2      	beq.n	ba5a <ull_ticker_stop_with_mark+0x3e>
	return 0;
    ba74:	f110 0f78 	cmn.w	r0, #120	; 0x78
    ba78:	bf08      	it	eq
    ba7a:	2000      	moveq	r0, #0
}
    ba7c:	b005      	add	sp, #20
    ba7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    ba80:	6031      	str	r1, [r6, #0]
	if (mark != param) {
    ba82:	e7d4      	b.n	ba2e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    ba84:	2300      	movs	r3, #0
		return -EALREADY;
    ba86:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    ba8a:	6033      	str	r3, [r6, #0]
}
    ba8c:	b005      	add	sp, #20
    ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    ba90:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
    ba92:	2800      	cmp	r0, #0
    ba94:	d0e1      	beq.n	ba5a <ull_ticker_stop_with_mark+0x3e>
    ba96:	e7ed      	b.n	ba74 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
    ba98:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ba9c:	e7dd      	b.n	ba5a <ull_ticker_stop_with_mark+0x3e>
    ba9e:	bf00      	nop
    baa0:	20001578 	.word	0x20001578
    baa4:	0000b009 	.word	0x0000b009

0000baa8 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    baa8:	4b0e      	ldr	r3, [pc, #56]	; (bae4 <ull_pdu_rx_alloc_peek+0x3c>)
    baaa:	7919      	ldrb	r1, [r3, #4]
    baac:	795a      	ldrb	r2, [r3, #5]
	if (last >= first) {
    baae:	4291      	cmp	r1, r2
    bab0:	d80a      	bhi.n	bac8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    bab2:	eba2 0c01 	sub.w	ip, r2, r1
    bab6:	fa5f fc8c 	uxtb.w	ip, ip
    baba:	4560      	cmp	r0, ip
    babc:	d802      	bhi.n	bac4 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    babe:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    bac0:	7818      	ldrb	r0, [r3, #0]
    bac2:	d10a      	bne.n	bada <ull_pdu_rx_alloc_peek+0x32>
		return NULL;
    bac4:	2000      	movs	r0, #0
}
    bac6:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    bac8:	f8b3 c002 	ldrh.w	ip, [r3, #2]
		return count - first + last;
    bacc:	ebac 0c01 	sub.w	ip, ip, r1
    bad0:	4462      	add	r2, ip
    bad2:	b2d2      	uxtb	r2, r2
    bad4:	4290      	cmp	r0, r2
    bad6:	d8f5      	bhi.n	bac4 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    bad8:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    bada:	fb01 3300 	mla	r3, r1, r0, r3
    bade:	6898      	ldr	r0, [r3, #8]
    bae0:	4770      	bx	lr
    bae2:	bf00      	nop
    bae4:	200002f4 	.word	0x200002f4

0000bae8 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    bae8:	4b09      	ldr	r3, [pc, #36]	; (bb10 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    baea:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    baec:	795a      	ldrb	r2, [r3, #5]
    baee:	7818      	ldrb	r0, [r3, #0]
    baf0:	f893 c002 	ldrb.w	ip, [r3, #2]
    baf4:	428a      	cmp	r2, r1
    baf6:	d009      	beq.n	bb0c <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    baf8:	1c4a      	adds	r2, r1, #1
    bafa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    bafc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    bb00:	4594      	cmp	ip, r2
    bb02:	bf08      	it	eq
    bb04:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    bb06:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
    bb08:	711a      	strb	r2, [r3, #4]
	return mem;
    bb0a:	4770      	bx	lr
		return NULL;
    bb0c:	2000      	movs	r0, #0
}
    bb0e:	4770      	bx	lr
    bb10:	200002f4 	.word	0x200002f4

0000bb14 <ull_rx_put>:
{
    bb14:	b538      	push	{r3, r4, r5, lr}
    bb16:	460c      	mov	r4, r1
    bb18:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    bb1a:	f003 f955 	bl	edc8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    bb1e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    bb20:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    bb22:	4a03      	ldr	r2, [pc, #12]	; (bb30 <ull_rx_put+0x1c>)
    bb24:	4628      	mov	r0, r5
}
    bb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    bb2a:	f7fc ba87 	b.w	803c <memq_enqueue>
    bb2e:	bf00      	nop
    bb30:	200017f0 	.word	0x200017f0

0000bb34 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    bb34:	2201      	movs	r2, #1
    bb36:	4b02      	ldr	r3, [pc, #8]	; (bb40 <ull_rx_sched+0xc>)
    bb38:	4611      	mov	r1, r2
    bb3a:	2000      	movs	r0, #0
    bb3c:	f7fc baf2 	b.w	8124 <mayfly_enqueue>
    bb40:	20000470 	.word	0x20000470

0000bb44 <ull_prepare_enqueue>:
{
    bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    bb48:	4e16      	ldr	r6, [pc, #88]	; (bba4 <ull_prepare_enqueue+0x60>)
{
    bb4a:	f89d a020 	ldrb.w	sl, [sp, #32]
    bb4e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    bb50:	7973      	ldrb	r3, [r6, #5]
{
    bb52:	460f      	mov	r7, r1
	last = last + 1;
    bb54:	1c5d      	adds	r5, r3, #1
    bb56:	4611      	mov	r1, r2
	if (last == count) {
    bb58:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
    bb5a:	b2ed      	uxtb	r5, r5
		last = 0U;
    bb5c:	42aa      	cmp	r2, r5
    bb5e:	bf08      	it	eq
    bb60:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    bb62:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
    bb64:	42aa      	cmp	r2, r5
{
    bb66:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    bb68:	7830      	ldrb	r0, [r6, #0]
    bb6a:	d016      	beq.n	bb9a <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    bb6c:	f106 0408 	add.w	r4, r6, #8
    bb70:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    bb74:	2210      	movs	r2, #16
    bb76:	4620      	mov	r0, r4
    bb78:	f00a fe3b 	bl	167f2 <memcpy>
	e->is_resume = is_resume;
    bb7c:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    bb7e:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    bb80:	f00a 0a01 	and.w	sl, sl, #1
    bb84:	f023 0303 	bic.w	r3, r3, #3
    bb88:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    bb8c:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    bb90:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    bb92:	7175      	strb	r5, [r6, #5]
}
    bb94:	4620      	mov	r0, r4
    bb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    bb9a:	2400      	movs	r4, #0
}
    bb9c:	4620      	mov	r0, r4
    bb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bba2:	bf00      	nop
    bba4:	20000310 	.word	0x20000310

0000bba8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    bba8:	4b05      	ldr	r3, [pc, #20]	; (bbc0 <ull_prepare_dequeue_get+0x18>)
    bbaa:	7918      	ldrb	r0, [r3, #4]
	if (first == last) {
    bbac:	795a      	ldrb	r2, [r3, #5]
    bbae:	7819      	ldrb	r1, [r3, #0]
    bbb0:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    bbb2:	bf1a      	itte	ne
    bbb4:	3308      	addne	r3, #8
    bbb6:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    bbba:	2000      	moveq	r0, #0
}
    bbbc:	4770      	bx	lr
    bbbe:	bf00      	nop
    bbc0:	20000310 	.word	0x20000310

0000bbc4 <ull_prepare_dequeue_iter>:
{
    bbc4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    bbc6:	4b0d      	ldr	r3, [pc, #52]	; (bbfc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    bbc8:	7802      	ldrb	r2, [r0, #0]
    bbca:	7899      	ldrb	r1, [r3, #2]
    bbcc:	f893 c005 	ldrb.w	ip, [r3, #5]
    bbd0:	f893 e000 	ldrb.w	lr, [r3]
    bbd4:	4291      	cmp	r1, r2
    bbd6:	bf9c      	itt	ls
    bbd8:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
    bbda:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    bbdc:	4594      	cmp	ip, r2
    bbde:	d00a      	beq.n	bbf6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    bbe0:	1c53      	adds	r3, r2, #1
    bbe2:	b2db      	uxtb	r3, r3
		i = 0U;
    bbe4:	4299      	cmp	r1, r3
    bbe6:	bf08      	it	eq
    bbe8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    bbea:	4905      	ldr	r1, [pc, #20]	; (bc00 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    bbec:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    bbee:	fb02 100e 	mla	r0, r2, lr, r1
}
    bbf2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    bbf6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    bbf8:	e7fb      	b.n	bbf2 <ull_prepare_dequeue_iter+0x2e>
    bbfa:	bf00      	nop
    bbfc:	20000310 	.word	0x20000310
    bc00:	20000318 	.word	0x20000318

0000bc04 <ull_prepare_dequeue>:
{
    bc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    bc08:	4c2a      	ldr	r4, [pc, #168]	; (bcb4 <ull_prepare_dequeue+0xb0>)
    bc0a:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
    bc0c:	7961      	ldrb	r1, [r4, #5]
    bc0e:	7823      	ldrb	r3, [r4, #0]
    bc10:	4291      	cmp	r1, r2
    bc12:	d032      	beq.n	bc7a <ull_prepare_dequeue+0x76>
	return (void *)(fifo + first * size);
    bc14:	f104 0908 	add.w	r9, r4, #8
    bc18:	fb02 9303 	mla	r3, r2, r3, r9
		void *param = next->prepare_param.param;
    bc1c:	f04f 0800 	mov.w	r8, #0
    bc20:	68de      	ldr	r6, [r3, #12]
    bc22:	4683      	mov	fp, r0
    bc24:	46c2      	mov	sl, r8
		uint8_t is_aborted = next->is_aborted;
    bc26:	7f1a      	ldrb	r2, [r3, #28]
		if (!is_aborted) {
    bc28:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
    bc2a:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
    bc2e:	f002 0701 	and.w	r7, r2, #1
		if (!is_aborted) {
    bc32:	d524      	bpl.n	bc7e <ull_prepare_dequeue+0x7a>
		MFIFO_DEQUEUE(prep);
    bc34:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
    bc36:	7923      	ldrb	r3, [r4, #4]
    bc38:	7822      	ldrb	r2, [r4, #0]
    bc3a:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
    bc3c:	4299      	cmp	r1, r3
    bc3e:	d01c      	beq.n	bc7a <ull_prepare_dequeue+0x76>
	_first += 1U;
    bc40:	3301      	adds	r3, #1
    bc42:	b2db      	uxtb	r3, r3
		_first = 0U;
    bc44:	4298      	cmp	r0, r3
    bc46:	bf08      	it	eq
    bc48:	2300      	moveq	r3, #0
	if (first == last) {
    bc4a:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    bc4c:	7123      	strb	r3, [r4, #4]
	if (first == last) {
    bc4e:	d014      	beq.n	bc7a <ull_prepare_dequeue+0x76>
	return (void *)(fifo + first * size);
    bc50:	fb03 9302 	mla	r3, r3, r2, r9
		if (!is_aborted) {
    bc54:	b10d      	cbz	r5, bc5a <ull_prepare_dequeue+0x56>
			    ((next->prepare_param.param ==
    bc56:	68de      	ldr	r6, [r3, #12]
    bc58:	e7e5      	b.n	bc26 <ull_prepare_dequeue+0x22>
			if (!is_resume) {
    bc5a:	b177      	cbz	r7, bc7a <ull_prepare_dequeue+0x76>
			if (!param_resume_head) {
    bc5c:	f1ba 0f00 	cmp.w	sl, #0
    bc60:	d025      	beq.n	bcae <ull_prepare_dequeue+0xaa>
				param_resume_next = param;
    bc62:	f1b8 0f00 	cmp.w	r8, #0
    bc66:	bf08      	it	eq
    bc68:	46b0      	moveq	r8, r6
			if (next->is_resume &&
    bc6a:	7f1a      	ldrb	r2, [r3, #28]
			    ((next->prepare_param.param ==
    bc6c:	68de      	ldr	r6, [r3, #12]
			if (next->is_resume &&
    bc6e:	07d2      	lsls	r2, r2, #31
    bc70:	d5d9      	bpl.n	bc26 <ull_prepare_dequeue+0x22>
    bc72:	45b2      	cmp	sl, r6
    bc74:	d001      	beq.n	bc7a <ull_prepare_dequeue+0x76>
			      param_resume_head) ||
    bc76:	45b0      	cmp	r8, r6
    bc78:	d1d5      	bne.n	bc26 <ull_prepare_dequeue+0x22>
}
    bc7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    bc7e:	4a0e      	ldr	r2, [pc, #56]	; (bcb8 <ull_prepare_dequeue+0xb4>)
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    bc80:	4629      	mov	r1, r5
			mfy.param = next;
    bc82:	6093      	str	r3, [r2, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    bc84:	4658      	mov	r0, fp
    bc86:	4613      	mov	r3, r2
    bc88:	462a      	mov	r2, r5
    bc8a:	f7fc fa4b 	bl	8124 <mayfly_enqueue>
			LL_ASSERT(!ret);
    bc8e:	2800      	cmp	r0, #0
    bc90:	d0d0      	beq.n	bc34 <ull_prepare_dequeue+0x30>
    bc92:	480a      	ldr	r0, [pc, #40]	; (bcbc <ull_prepare_dequeue+0xb8>)
    bc94:	4a0a      	ldr	r2, [pc, #40]	; (bcc0 <ull_prepare_dequeue+0xbc>)
    bc96:	490b      	ldr	r1, [pc, #44]	; (bcc4 <ull_prepare_dequeue+0xc0>)
    bc98:	f240 73bd 	movw	r3, #1981	; 0x7bd
    bc9c:	f00a fb29 	bl	162f2 <assert_print>
    bca0:	4040      	eors	r0, r0
    bca2:	f380 8811 	msr	BASEPRI, r0
    bca6:	f04f 0003 	mov.w	r0, #3
    bcaa:	df02      	svc	2
    bcac:	e7c2      	b.n	bc34 <ull_prepare_dequeue+0x30>
				param_resume_head = param;
    bcae:	46b2      	mov	sl, r6
    bcb0:	e7db      	b.n	bc6a <ull_prepare_dequeue+0x66>
    bcb2:	bf00      	nop
    bcb4:	20000310 	.word	0x20000310
    bcb8:	20000440 	.word	0x20000440
    bcbc:	0001a580 	.word	0x0001a580
    bcc0:	0001a728 	.word	0x0001a728
    bcc4:	0001a840 	.word	0x0001a840

0000bcc8 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    bcc8:	4b06      	ldr	r3, [pc, #24]	; (bce4 <ull_event_done_extra_get+0x1c>)
    bcca:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
    bccc:	7959      	ldrb	r1, [r3, #5]
    bcce:	7818      	ldrb	r0, [r3, #0]
    bcd0:	4291      	cmp	r1, r2
    bcd2:	d005      	beq.n	bce0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    bcd4:	fb02 3300 	mla	r3, r2, r0, r3
    bcd8:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
    bcda:	b110      	cbz	r0, bce2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    bcdc:	3020      	adds	r0, #32
    bcde:	4770      	bx	lr
		return NULL;
    bce0:	2000      	movs	r0, #0
}
    bce2:	4770      	bx	lr
    bce4:	200002c4 	.word	0x200002c4

0000bce8 <ull_event_done>:
{
    bce8:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    bcea:	4a13      	ldr	r2, [pc, #76]	; (bd38 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    bcec:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
    bcee:	7954      	ldrb	r4, [r2, #5]
    bcf0:	7811      	ldrb	r1, [r2, #0]
    bcf2:	429c      	cmp	r4, r3
{
    bcf4:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    bcf6:	7890      	ldrb	r0, [r2, #2]
    bcf8:	d01b      	beq.n	bd32 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    bcfa:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    bcfe:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    bd00:	688c      	ldr	r4, [r1, #8]
	_first += 1U;
    bd02:	b2db      	uxtb	r3, r3
		_first = 0U;
    bd04:	4298      	cmp	r0, r3
    bd06:	bf08      	it	eq
    bd08:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    bd0a:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
    bd0c:	b17c      	cbz	r4, bd2e <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    bd0e:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    bd10:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    bd12:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    bd14:	4a09      	ldr	r2, [pc, #36]	; (bd3c <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    bd16:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    bd18:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    bd1a:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    bd1c:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    bd1e:	f7fc f98d 	bl	803c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    bd22:	2201      	movs	r2, #1
    bd24:	4b06      	ldr	r3, [pc, #24]	; (bd40 <ull_event_done+0x58>)
    bd26:	4611      	mov	r1, r2
    bd28:	4628      	mov	r0, r5
    bd2a:	f7fc f9fb 	bl	8124 <mayfly_enqueue>
}
    bd2e:	4620      	mov	r0, r4
    bd30:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    bd32:	2400      	movs	r4, #0
    bd34:	e7fb      	b.n	bd2e <ull_event_done+0x46>
    bd36:	bf00      	nop
    bd38:	200002c4 	.word	0x200002c4
    bd3c:	200017e8 	.word	0x200017e8
    bd40:	20000460 	.word	0x20000460

0000bd44 <ull_rxfifo_alloc>:
{
    bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd48:	b083      	sub	sp, #12
    bd4a:	461d      	mov	r5, r3
    bd4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    bd4e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    bd52:	e9cd 0400 	strd	r0, r4, [sp]
    bd56:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    bd5a:	b33b      	cbz	r3, bdac <ull_rxfifo_alloc+0x68>
    bd5c:	1e5c      	subs	r4, r3, #1
    bd5e:	f895 b000 	ldrb.w	fp, [r5]
    bd62:	4688      	mov	r8, r1
    bd64:	4617      	mov	r7, r2
    bd66:	b2e4      	uxtb	r4, r4
	last = last + 1;
    bd68:	f10b 0301 	add.w	r3, fp, #1
    bd6c:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
    bd70:	45d8      	cmp	r8, fp
    bd72:	bf08      	it	eq
    bd74:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
    bd78:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
    bd7a:	4648      	mov	r0, r9
    bd7c:	d016      	beq.n	bdac <ull_rxfifo_alloc+0x68>
    bd7e:	f7fc f8f9 	bl	7f74 <mem_acquire>
    bd82:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
    bd84:	4650      	mov	r0, sl
		if (!link) {
    bd86:	b18e      	cbz	r6, bdac <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
    bd88:	f7fc f8f4 	bl	7f74 <mem_acquire>
		if (!rx) {
    bd8c:	b188      	cbz	r0, bdb2 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
    bd8e:	2300      	movs	r3, #0
    bd90:	6073      	str	r3, [r6, #4]
		rx->link = link;
    bd92:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bd94:	782a      	ldrb	r2, [r5, #0]
    bd96:	9b00      	ldr	r3, [sp, #0]
    bd98:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bd9c:	9b01      	ldr	r3, [sp, #4]
    bd9e:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    bda0:	3c01      	subs	r4, #1
    bda2:	b2e4      	uxtb	r4, r4
    bda4:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    bda6:	f885 b000 	strb.w	fp, [r5]
    bdaa:	d1dd      	bne.n	bd68 <ull_rxfifo_alloc+0x24>
}
    bdac:	b003      	add	sp, #12
    bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    bdb2:	4649      	mov	r1, r9
    bdb4:	4630      	mov	r0, r6
}
    bdb6:	b003      	add	sp, #12
    bdb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    bdbc:	f7fc b8f4 	b.w	7fa8 <mem_release>

0000bdc0 <init_reset>:
{
    bdc0:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    bdc2:	4c3f      	ldr	r4, [pc, #252]	; (bec0 <init_reset+0x100>)
    bdc4:	4d3f      	ldr	r5, [pc, #252]	; (bec4 <init_reset+0x104>)
    bdc6:	79a2      	ldrb	r2, [r4, #6]
    bdc8:	88a1      	ldrh	r1, [r4, #4]
    bdca:	4e3f      	ldr	r6, [pc, #252]	; (bec8 <init_reset+0x108>)
    bdcc:	2000      	movs	r0, #0
{
    bdce:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    bdd0:	4623      	mov	r3, r4
    bdd2:	80a8      	strh	r0, [r5, #4]
    bdd4:	f104 0008 	add.w	r0, r4, #8
    bdd8:	f7fc f89c 	bl	7f14 <mem_init>
    bddc:	79e3      	ldrb	r3, [r4, #7]
    bdde:	79a2      	ldrb	r2, [r4, #6]
    bde0:	1d30      	adds	r0, r6, #4
    bde2:	441a      	add	r2, r3
    bde4:	2108      	movs	r1, #8
    bde6:	4633      	mov	r3, r6
    bde8:	f7fc f894 	bl	7f14 <mem_init>
    bdec:	9602      	str	r6, [sp, #8]
    bdee:	462e      	mov	r6, r5
    bdf0:	79a3      	ldrb	r3, [r4, #6]
    bdf2:	f816 0b08 	ldrb.w	r0, [r6], #8
    bdf6:	792a      	ldrb	r2, [r5, #4]
    bdf8:	78a9      	ldrb	r1, [r5, #2]
    bdfa:	9303      	str	r3, [sp, #12]
    bdfc:	e9cd 6400 	strd	r6, r4, [sp]
    be00:	1d6b      	adds	r3, r5, #5
    be02:	f7ff ff9f 	bl	bd44 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    be06:	4b31      	ldr	r3, [pc, #196]	; (becc <init_reset+0x10c>)
    be08:	2207      	movs	r2, #7
    be0a:	1d18      	adds	r0, r3, #4
    be0c:	2144      	movs	r1, #68	; 0x44
    be0e:	f7fc f881 	bl	7f14 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    be12:	4b2f      	ldr	r3, [pc, #188]	; (bed0 <init_reset+0x110>)
    be14:	2209      	movs	r2, #9
    be16:	1d18      	adds	r0, r3, #4
    be18:	2108      	movs	r1, #8
    be1a:	f7fc f87b 	bl	7f14 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    be1e:	482c      	ldr	r0, [pc, #176]	; (bed0 <init_reset+0x110>)
    be20:	f7fc f8a8 	bl	7f74 <mem_acquire>
	LL_ASSERT(link);
    be24:	4604      	mov	r4, r0
    be26:	b308      	cbz	r0, be6c <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    be28:	4a2a      	ldr	r2, [pc, #168]	; (bed4 <init_reset+0x114>)
    be2a:	4620      	mov	r0, r4
    be2c:	1f11      	subs	r1, r2, #4
    be2e:	f7fc f8f7 	bl	8020 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    be32:	4825      	ldr	r0, [pc, #148]	; (bec8 <init_reset+0x108>)
    be34:	f7fc f89e 	bl	7f74 <mem_acquire>
	LL_ASSERT(link);
    be38:	4604      	mov	r4, r0
    be3a:	b328      	cbz	r0, be88 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    be3c:	4a26      	ldr	r2, [pc, #152]	; (bed8 <init_reset+0x118>)
    be3e:	4620      	mov	r0, r4
    be40:	1f11      	subs	r1, r2, #4
    be42:	f7fc f8ed 	bl	8020 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    be46:	4822      	ldr	r0, [pc, #136]	; (bed0 <init_reset+0x110>)
    be48:	f7fc f894 	bl	7f74 <mem_acquire>
	LL_ASSERT(link);
    be4c:	4604      	mov	r4, r0
    be4e:	b348      	cbz	r0, bea4 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    be50:	4a22      	ldr	r2, [pc, #136]	; (bedc <init_reset+0x11c>)
    be52:	4620      	mov	r0, r4
    be54:	1f11      	subs	r1, r2, #4
    be56:	f7fc f8e3 	bl	8020 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    be5a:	4b21      	ldr	r3, [pc, #132]	; (bee0 <init_reset+0x120>)
    be5c:	2206      	movs	r2, #6
	rx_replenish(UINT8_MAX);
    be5e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    be60:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
    be62:	f7ff f939 	bl	b0d8 <rx_replenish>
}
    be66:	2000      	movs	r0, #0
    be68:	b004      	add	sp, #16
    be6a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    be6c:	4a1d      	ldr	r2, [pc, #116]	; (bee4 <init_reset+0x124>)
    be6e:	491e      	ldr	r1, [pc, #120]	; (bee8 <init_reset+0x128>)
    be70:	481e      	ldr	r0, [pc, #120]	; (beec <init_reset+0x12c>)
    be72:	f640 036d 	movw	r3, #2157	; 0x86d
    be76:	f00a fa3c 	bl	162f2 <assert_print>
    be7a:	4040      	eors	r0, r0
    be7c:	f380 8811 	msr	BASEPRI, r0
    be80:	f04f 0003 	mov.w	r0, #3
    be84:	df02      	svc	2
    be86:	e7cf      	b.n	be28 <init_reset+0x68>
	LL_ASSERT(link);
    be88:	4a16      	ldr	r2, [pc, #88]	; (bee4 <init_reset+0x124>)
    be8a:	4917      	ldr	r1, [pc, #92]	; (bee8 <init_reset+0x128>)
    be8c:	4817      	ldr	r0, [pc, #92]	; (beec <init_reset+0x12c>)
    be8e:	f640 0375 	movw	r3, #2165	; 0x875
    be92:	f00a fa2e 	bl	162f2 <assert_print>
    be96:	4040      	eors	r0, r0
    be98:	f380 8811 	msr	BASEPRI, r0
    be9c:	f04f 0003 	mov.w	r0, #3
    bea0:	df02      	svc	2
    bea2:	e7cb      	b.n	be3c <init_reset+0x7c>
	LL_ASSERT(link);
    bea4:	4a0f      	ldr	r2, [pc, #60]	; (bee4 <init_reset+0x124>)
    bea6:	4910      	ldr	r1, [pc, #64]	; (bee8 <init_reset+0x128>)
    bea8:	4810      	ldr	r0, [pc, #64]	; (beec <init_reset+0x12c>)
    beaa:	f640 037d 	movw	r3, #2173	; 0x87d
    beae:	f00a fa20 	bl	162f2 <assert_print>
    beb2:	4040      	eors	r0, r0
    beb4:	f380 8811 	msr	BASEPRI, r0
    beb8:	f04f 0003 	mov.w	r0, #3
    bebc:	df02      	svc	2
    bebe:	e7c7      	b.n	be50 <init_reset+0x90>
    bec0:	2000021c 	.word	0x2000021c
    bec4:	200002c4 	.word	0x200002c4
    bec8:	20001580 	.word	0x20001580
    becc:	200015fc 	.word	0x200015fc
    bed0:	200015b0 	.word	0x200015b0
    bed4:	200017f0 	.word	0x200017f0
    bed8:	200017e8 	.word	0x200017e8
    bedc:	200017e0 	.word	0x200017e0
    bee0:	200015ac 	.word	0x200015ac
    bee4:	0001a728 	.word	0x0001a728
    bee8:	0001a97c 	.word	0x0001a97c
    beec:	0001a580 	.word	0x0001a580

0000bef0 <ll_init>:
{
    bef0:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    bef2:	4b27      	ldr	r3, [pc, #156]	; (bf90 <ll_init+0xa0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bef4:	4c27      	ldr	r4, [pc, #156]	; (bf94 <ll_init+0xa4>)
	sem_recv = sem_rx;
    bef6:	6018      	str	r0, [r3, #0]
{
    bef8:	b086      	sub	sp, #24
	cntr_init();
    befa:	f005 fcb7 	bl	1186c <cntr_init>
	mayfly_init();
    befe:	f7fc f8bf 	bl	8080 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bf02:	4a25      	ldr	r2, [pc, #148]	; (bf98 <ll_init+0xa8>)
    bf04:	4925      	ldr	r1, [pc, #148]	; (bf9c <ll_init+0xac>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bf06:	4826      	ldr	r0, [pc, #152]	; (bfa0 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bf08:	e9cd 2404 	strd	r2, r4, [sp, #16]
    bf0c:	4a25      	ldr	r2, [pc, #148]	; (bfa4 <ll_init+0xb4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bf0e:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bf10:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    bf14:	f04f 0c02 	mov.w	ip, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bf18:	210c      	movs	r1, #12
    bf1a:	e9cd 0100 	strd	r0, r1, [sp]
    bf1e:	4a22      	ldr	r2, [pc, #136]	; (bfa8 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bf20:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    bf22:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    bf24:	f880 c010 	strb.w	ip, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    bf28:	f880 c018 	strb.w	ip, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bf2c:	4619      	mov	r1, r3
    bf2e:	2000      	movs	r0, #0
    bf30:	f7fd fa1e 	bl	9370 <ticker_init>
	LL_ASSERT(!err);
    bf34:	b9f0      	cbnz	r0, bf74 <ll_init+0x84>
	return z_impl_k_sem_init(sem, initial_count, limit);
    bf36:	2201      	movs	r2, #1
    bf38:	2100      	movs	r1, #0
    bf3a:	481c      	ldr	r0, [pc, #112]	; (bfac <ll_init+0xbc>)
    bf3c:	f00d fbd6 	bl	196ec <z_impl_k_sem_init>
	err = lll_init();
    bf40:	f004 f8c6 	bl	100d0 <lll_init>
	if (err) {
    bf44:	b108      	cbz	r0, bf4a <ll_init+0x5a>
}
    bf46:	b006      	add	sp, #24
    bf48:	bd10      	pop	{r4, pc}
	err = init_reset();
    bf4a:	f7ff ff39 	bl	bdc0 <init_reset>
	if (err) {
    bf4e:	2800      	cmp	r0, #0
    bf50:	d1f9      	bne.n	bf46 <ll_init+0x56>
	err = lll_scan_init();
    bf52:	f004 fedd 	bl	10d10 <lll_scan_init>
	if (err) {
    bf56:	2800      	cmp	r0, #0
    bf58:	d1f5      	bne.n	bf46 <ll_init+0x56>
	err = ull_scan_init();
    bf5a:	f000 f931 	bl	c1c0 <ull_scan_init>
	if (err) {
    bf5e:	2800      	cmp	r0, #0
    bf60:	d1f1      	bne.n	bf46 <ll_init+0x56>
	err = lll_conn_init();
    bf62:	f004 ffcb 	bl	10efc <lll_conn_init>
	if (err) {
    bf66:	2800      	cmp	r0, #0
    bf68:	d1ed      	bne.n	bf46 <ll_init+0x56>
}
    bf6a:	b006      	add	sp, #24
    bf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = ull_conn_init();
    bf70:	f001 b8d0 	b.w	d114 <ull_conn_init>
	LL_ASSERT(!err);
    bf74:	4a0e      	ldr	r2, [pc, #56]	; (bfb0 <ll_init+0xc0>)
    bf76:	490f      	ldr	r1, [pc, #60]	; (bfb4 <ll_init+0xc4>)
    bf78:	480f      	ldr	r0, [pc, #60]	; (bfb8 <ll_init+0xc8>)
    bf7a:	f240 232f 	movw	r3, #559	; 0x22f
    bf7e:	f00a f9b8 	bl	162f2 <assert_print>
    bf82:	4040      	eors	r0, r0
    bf84:	f380 8811 	msr	BASEPRI, r0
    bf88:	f04f 0003 	mov.w	r0, #3
    bf8c:	df02      	svc	2
    bf8e:	e7d2      	b.n	bf36 <ll_init+0x46>
    bf90:	200017f4 	.word	0x200017f4
    bf94:	00012479 	.word	0x00012479
    bf98:	00012329 	.word	0x00012329
    bf9c:	000122c5 	.word	0x000122c5
    bfa0:	20001b40 	.word	0x20001b40
    bfa4:	200018d0 	.word	0x200018d0
    bfa8:	20001810 	.word	0x20001810
    bfac:	200017f8 	.word	0x200017f8
    bfb0:	0001a728 	.word	0x0001a728
    bfb4:	0001a764 	.word	0x0001a764
    bfb8:	0001a580 	.word	0x0001a580

0000bfbc <ll_reset>:
{
    bfbc:	b510      	push	{r4, lr}
    bfbe:	b086      	sub	sp, #24
	err = ull_scan_reset();
    bfc0:	f000 f94e 	bl	c260 <ull_scan_reset>
	LL_ASSERT(!err);
    bfc4:	bb60      	cbnz	r0, c020 <ll_reset+0x64>
	err = ull_conn_reset();
    bfc6:	f001 f8a7 	bl	d118 <ull_conn_reset>
	LL_ASSERT(!err);
    bfca:	2800      	cmp	r0, #0
    bfcc:	d139      	bne.n	c042 <ll_reset+0x86>
	MFIFO_INIT(tx_ack);
    bfce:	4832      	ldr	r0, [pc, #200]	; (c098 <ll_reset+0xdc>)
	MFIFO_INIT(prep);
    bfd0:	4932      	ldr	r1, [pc, #200]	; (c09c <ll_reset+0xe0>)
	MFIFO_INIT(pdu_rx_free);
    bfd2:	4a33      	ldr	r2, [pc, #204]	; (c0a0 <ll_reset+0xe4>)
	MFIFO_INIT(ll_pdu_rx_free);
    bfd4:	4b33      	ldr	r3, [pc, #204]	; (c0a4 <ll_reset+0xe8>)
	MFIFO_INIT(tx_ack);
    bfd6:	2400      	movs	r4, #0
    bfd8:	8084      	strh	r4, [r0, #4]
	MFIFO_INIT(prep);
    bfda:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
    bfdc:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
    bfde:	809c      	strh	r4, [r3, #4]
    bfe0:	2201      	movs	r2, #1
    bfe2:	4621      	mov	r1, r4
    bfe4:	4668      	mov	r0, sp
    bfe6:	f00d fb81 	bl	196ec <z_impl_k_sem_init>
		mfy.param = &sem;
    bfea:	4b2f      	ldr	r3, [pc, #188]	; (c0a8 <ll_reset+0xec>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    bfec:	4622      	mov	r2, r4
    bfee:	4621      	mov	r1, r4
    bff0:	2003      	movs	r0, #3
		mfy.param = &sem;
    bff2:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    bff6:	f7fc f895 	bl	8124 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bffa:	2800      	cmp	r0, #0
    bffc:	d13d      	bne.n	c07a <ll_reset+0xbe>
	return z_impl_k_sem_take(sem, timeout);
    bffe:	f04f 32ff 	mov.w	r2, #4294967295
    c002:	f04f 33ff 	mov.w	r3, #4294967295
    c006:	4668      	mov	r0, sp
    c008:	f008 ff0e 	bl	14e28 <z_impl_k_sem_take>
	err = init_reset();
    c00c:	f7ff fed8 	bl	bdc0 <init_reset>
	LL_ASSERT(!err);
    c010:	bb28      	cbnz	r0, c05e <ll_reset+0xa2>
	(void)ll_addr_set(1U, NULL);
    c012:	2100      	movs	r1, #0
    c014:	2001      	movs	r0, #1
}
    c016:	b006      	add	sp, #24
    c018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
    c01c:	f7fd bb8a 	b.w	9734 <ll_addr_set>
	LL_ASSERT(!err);
    c020:	4a22      	ldr	r2, [pc, #136]	; (c0ac <ll_reset+0xf0>)
    c022:	4923      	ldr	r1, [pc, #140]	; (c0b0 <ll_reset+0xf4>)
    c024:	4823      	ldr	r0, [pc, #140]	; (c0b4 <ll_reset+0xf8>)
    c026:	f240 23e7 	movw	r3, #743	; 0x2e7
    c02a:	f00a f962 	bl	162f2 <assert_print>
    c02e:	4040      	eors	r0, r0
    c030:	f380 8811 	msr	BASEPRI, r0
    c034:	f04f 0003 	mov.w	r0, #3
    c038:	df02      	svc	2
	err = ull_conn_reset();
    c03a:	f001 f86d 	bl	d118 <ull_conn_reset>
	LL_ASSERT(!err);
    c03e:	2800      	cmp	r0, #0
    c040:	d0c5      	beq.n	bfce <ll_reset+0x12>
    c042:	4a1a      	ldr	r2, [pc, #104]	; (c0ac <ll_reset+0xf0>)
    c044:	491a      	ldr	r1, [pc, #104]	; (c0b0 <ll_reset+0xf4>)
    c046:	481b      	ldr	r0, [pc, #108]	; (c0b4 <ll_reset+0xf8>)
    c048:	f240 3307 	movw	r3, #775	; 0x307
    c04c:	f00a f951 	bl	162f2 <assert_print>
    c050:	4040      	eors	r0, r0
    c052:	f380 8811 	msr	BASEPRI, r0
    c056:	f04f 0003 	mov.w	r0, #3
    c05a:	df02      	svc	2
    c05c:	e7b7      	b.n	bfce <ll_reset+0x12>
	LL_ASSERT(!err);
    c05e:	4a13      	ldr	r2, [pc, #76]	; (c0ac <ll_reset+0xf0>)
    c060:	4913      	ldr	r1, [pc, #76]	; (c0b0 <ll_reset+0xf4>)
    c062:	4814      	ldr	r0, [pc, #80]	; (c0b4 <ll_reset+0xf8>)
    c064:	f44f 7354 	mov.w	r3, #848	; 0x350
    c068:	f00a f943 	bl	162f2 <assert_print>
    c06c:	4040      	eors	r0, r0
    c06e:	f380 8811 	msr	BASEPRI, r0
    c072:	f04f 0003 	mov.w	r0, #3
    c076:	df02      	svc	2
    c078:	e7cb      	b.n	c012 <ll_reset+0x56>
		LL_ASSERT(!retval);
    c07a:	4a0c      	ldr	r2, [pc, #48]	; (c0ac <ll_reset+0xf0>)
    c07c:	490e      	ldr	r1, [pc, #56]	; (c0b8 <ll_reset+0xfc>)
    c07e:	480d      	ldr	r0, [pc, #52]	; (c0b4 <ll_reset+0xf8>)
    c080:	f240 3336 	movw	r3, #822	; 0x336
    c084:	f00a f935 	bl	162f2 <assert_print>
    c088:	4040      	eors	r0, r0
    c08a:	f380 8811 	msr	BASEPRI, r0
    c08e:	f04f 0003 	mov.w	r0, #3
    c092:	df02      	svc	2
    c094:	e7b3      	b.n	bffe <ll_reset+0x42>
    c096:	bf00      	nop
    c098:	20000418 	.word	0x20000418
    c09c:	20000310 	.word	0x20000310
    c0a0:	200002f4 	.word	0x200002f4
    c0a4:	200002e0 	.word	0x200002e0
    c0a8:	20000450 	.word	0x20000450
    c0ac:	0001a728 	.word	0x0001a728
    c0b0:	0001a764 	.word	0x0001a764
    c0b4:	0001a580 	.word	0x0001a580
    c0b8:	0001a868 	.word	0x0001a868

0000c0bc <ll_deinit>:
{
    c0bc:	b508      	push	{r3, lr}
	ll_reset();
    c0be:	f7ff ff7d 	bl	bfbc <ll_reset>
}
    c0c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
    c0c6:	f004 b837 	b.w	10138 <lll_deinit>
    c0ca:	bf00      	nop

0000c0cc <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    c0cc:	b510      	push	{r4, lr}
    c0ce:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    c0d0:	2400      	movs	r4, #0
    c0d2:	e9cd 4400 	strd	r4, r4, [sp]
    c0d6:	9b04      	ldr	r3, [sp, #16]
    c0d8:	f004 fa18 	bl	1050c <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    c0dc:	b002      	add	sp, #8
    c0de:	bd10      	pop	{r4, pc}

0000c0e0 <lll_resume>:

void lll_resume(void *param)
{
    c0e0:	b510      	push	{r4, lr}
    c0e2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    c0e4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    c0e6:	691a      	ldr	r2, [r3, #16]
    c0e8:	6999      	ldr	r1, [r3, #24]
    c0ea:	2401      	movs	r4, #1
{
    c0ec:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    c0ee:	4020      	ands	r0, r4
    c0f0:	e9cd 0400 	strd	r0, r4, [sp]
    c0f4:	6958      	ldr	r0, [r3, #20]
    c0f6:	f004 fa09 	bl	1050c <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    c0fa:	b108      	cbz	r0, c100 <lll_resume+0x20>
    c0fc:	3077      	adds	r0, #119	; 0x77
    c0fe:	d101      	bne.n	c104 <lll_resume+0x24>
}
    c100:	b002      	add	sp, #8
    c102:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    c104:	4a06      	ldr	r2, [pc, #24]	; (c120 <lll_resume+0x40>)
    c106:	4907      	ldr	r1, [pc, #28]	; (c124 <lll_resume+0x44>)
    c108:	4807      	ldr	r0, [pc, #28]	; (c128 <lll_resume+0x48>)
    c10a:	234f      	movs	r3, #79	; 0x4f
    c10c:	f00a f8f1 	bl	162f2 <assert_print>
    c110:	4040      	eors	r0, r0
    c112:	f380 8811 	msr	BASEPRI, r0
    c116:	f04f 0003 	mov.w	r0, #3
    c11a:	df02      	svc	2
}
    c11c:	b002      	add	sp, #8
    c11e:	bd10      	pop	{r4, pc}
    c120:	0001a870 	.word	0x0001a870
    c124:	0001a8b4 	.word	0x0001a8b4
    c128:	0001a580 	.word	0x0001a580

0000c12c <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
    c12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c130:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c132:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    c136:	4625      	mov	r5, r4
{
    c138:	4680      	mov	r8, r0
	return ++hdr->ref;
    c13a:	f815 1b1c 	ldrb.w	r1, [r5], #28
    c13e:	3101      	adds	r1, #1
    c140:	b2c9      	uxtb	r1, r1
    c142:	4617      	mov	r7, r2
    c144:	461e      	mov	r6, r3
    c146:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    c148:	b181      	cbz	r1, c16c <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    c14a:	4c17      	ldr	r4, [pc, #92]	; (c1a8 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
    c14c:	4b17      	ldr	r3, [pc, #92]	; (c1ac <ticker_cb+0x80>)
	p.lazy = lazy;
    c14e:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    c150:	2200      	movs	r2, #0
    c152:	4611      	mov	r1, r2
    c154:	2001      	movs	r0, #1
	p.remainder = remainder;
    c156:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
    c15a:	60e5      	str	r5, [r4, #12]
	p.force = force;
    c15c:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
    c160:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    c162:	f7fb ffdf 	bl	8124 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    c166:	b978      	cbnz	r0, c188 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
    c168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
    c16c:	4a10      	ldr	r2, [pc, #64]	; (c1b0 <ticker_cb+0x84>)
    c16e:	4911      	ldr	r1, [pc, #68]	; (c1b4 <ticker_cb+0x88>)
    c170:	4811      	ldr	r0, [pc, #68]	; (c1b8 <ticker_cb+0x8c>)
    c172:	f240 23fe 	movw	r3, #766	; 0x2fe
    c176:	f00a f8bc 	bl	162f2 <assert_print>
    c17a:	4040      	eors	r0, r0
    c17c:	f380 8811 	msr	BASEPRI, r0
    c180:	f04f 0003 	mov.w	r0, #3
    c184:	df02      	svc	2
    c186:	e7e0      	b.n	c14a <ticker_cb+0x1e>
	LL_ASSERT(!ret);
    c188:	4a09      	ldr	r2, [pc, #36]	; (c1b0 <ticker_cb+0x84>)
    c18a:	490c      	ldr	r1, [pc, #48]	; (c1bc <ticker_cb+0x90>)
    c18c:	480a      	ldr	r0, [pc, #40]	; (c1b8 <ticker_cb+0x8c>)
    c18e:	f240 330b 	movw	r3, #779	; 0x30b
    c192:	f00a f8ae 	bl	162f2 <assert_print>
    c196:	4040      	eors	r0, r0
    c198:	f380 8811 	msr	BASEPRI, r0
    c19c:	f04f 0003 	mov.w	r0, #3
    c1a0:	df02      	svc	2
}
    c1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c1a6:	bf00      	nop
    c1a8:	20001bac 	.word	0x20001bac
    c1ac:	20000490 	.word	0x20000490
    c1b0:	0001a8c8 	.word	0x0001a8c8
    c1b4:	0001a908 	.word	0x0001a908
    c1b8:	0001a580 	.word	0x0001a580
    c1bc:	0001a840 	.word	0x0001a840

0000c1c0 <ull_scan_init>:
}
    c1c0:	2000      	movs	r0, #0
    c1c2:	4770      	bx	lr

0000c1c4 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    c1c4:	3002      	adds	r0, #2
{
    c1c6:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    c1c8:	f101 021c 	add.w	r2, r1, #28
    c1cc:	b2c0      	uxtb	r0, r0
    c1ce:	f7ff fc25 	bl	ba1c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    c1d2:	b110      	cbz	r0, c1da <ull_scan_disable+0x16>
    c1d4:	3078      	adds	r0, #120	; 0x78
    c1d6:	d101      	bne.n	c1dc <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c1d8:	200c      	movs	r0, #12
}
    c1da:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    c1dc:	4a07      	ldr	r2, [pc, #28]	; (c1fc <ull_scan_disable+0x38>)
    c1de:	4908      	ldr	r1, [pc, #32]	; (c200 <ull_scan_disable+0x3c>)
    c1e0:	4808      	ldr	r0, [pc, #32]	; (c204 <ull_scan_disable+0x40>)
    c1e2:	f240 2301 	movw	r3, #513	; 0x201
    c1e6:	f00a f884 	bl	162f2 <assert_print>
    c1ea:	4040      	eors	r0, r0
    c1ec:	f380 8811 	msr	BASEPRI, r0
    c1f0:	f04f 0003 	mov.w	r0, #3
    c1f4:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    c1f6:	200c      	movs	r0, #12
}
    c1f8:	bd08      	pop	{r3, pc}
    c1fa:	bf00      	nop
    c1fc:	0001a8c8 	.word	0x0001a8c8
    c200:	0001a90c 	.word	0x0001a90c
    c204:	0001a580 	.word	0x0001a580

0000c208 <ll_scan_enable>:
{
    c208:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    c20a:	4c14      	ldr	r4, [pc, #80]	; (c25c <ll_scan_enable+0x54>)
    c20c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    c210:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
    c214:	b170      	cbz	r0, c234 <ll_scan_enable+0x2c>
	if (!scan || scan->is_enabled) {
    c216:	b972      	cbnz	r2, c236 <ll_scan_enable+0x2e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
    c218:	079b      	lsls	r3, r3, #30
    c21a:	d506      	bpl.n	c22a <ll_scan_enable+0x22>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
    c21c:	2001      	movs	r0, #1
    c21e:	f7fd faad 	bl	977c <ll_addr_get>
    c222:	2106      	movs	r1, #6
    c224:	f7fb fef0 	bl	8008 <mem_nz>
    c228:	b1b0      	cbz	r0, c258 <ll_scan_enable+0x50>
}
    c22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
    c22e:	480b      	ldr	r0, [pc, #44]	; (c25c <ll_scan_enable+0x54>)
    c230:	f7f4 b93a 	b.w	4a8 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
    c234:	b90a      	cbnz	r2, c23a <ll_scan_enable+0x32>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    c236:	200c      	movs	r0, #12
}
    c238:	bd10      	pop	{r4, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
    c23a:	6a23      	ldr	r3, [r4, #32]
    c23c:	2b00      	cmp	r3, #0
    c23e:	d1fa      	bne.n	c236 <ll_scan_enable+0x2e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
    c240:	4621      	mov	r1, r4
    c242:	f7ff ffbf 	bl	c1c4 <ull_scan_disable>
	if (ret) {
    c246:	2800      	cmp	r0, #0
    c248:	d1f6      	bne.n	c238 <ll_scan_enable+0x30>
		return ret;
	}

	scan->is_enabled = 0U;
    c24a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    c24e:	f360 0300 	bfi	r3, r0, #0, #1
    c252:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
    c256:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_INVALID_PARAM;
    c258:	2012      	movs	r0, #18
}
    c25a:	bd10      	pop	{r4, pc}
    c25c:	20001b68 	.word	0x20001b68

0000c260 <ull_scan_reset>:
{
    c260:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    c262:	4c0b      	ldr	r4, [pc, #44]	; (c290 <ull_scan_reset+0x30>)
    c264:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    c268:	07db      	lsls	r3, r3, #31
    c26a:	d501      	bpl.n	c270 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
    c26c:	6a20      	ldr	r0, [r4, #32]
    c26e:	b108      	cbz	r0, c274 <ull_scan_reset+0x14>
}
    c270:	2000      	movs	r0, #0
    c272:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
    c274:	4621      	mov	r1, r4
    c276:	f7ff ffa5 	bl	c1c4 <ull_scan_disable>
	if (ret) {
    c27a:	2800      	cmp	r0, #0
    c27c:	d1f8      	bne.n	c270 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
    c27e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    c282:	f360 0300 	bfi	r3, r0, #0, #1
    c286:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
    c28a:	2000      	movs	r0, #0
    c28c:	bd10      	pop	{r4, pc}
    c28e:	bf00      	nop
    c290:	20001b68 	.word	0x20001b68

0000c294 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    c294:	4a03      	ldr	r2, [pc, #12]	; (c2a4 <ull_scan_handle_get+0x10>)
    c296:	4b04      	ldr	r3, [pc, #16]	; (c2a8 <ull_scan_handle_get+0x14>)
    c298:	1a80      	subs	r0, r0, r2
    c29a:	fba3 3000 	umull	r3, r0, r3, r0
}
    c29e:	f3c0 1087 	ubfx	r0, r0, #6, #8
    c2a2:	4770      	bx	lr
    c2a4:	20001b68 	.word	0x20001b68
    c2a8:	f0f0f0f1 	.word	0xf0f0f0f1

0000c2ac <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    c2ac:	4a04      	ldr	r2, [pc, #16]	; (c2c0 <ull_scan_lll_handle_get+0x14>)
    c2ae:	6800      	ldr	r0, [r0, #0]
    c2b0:	4b04      	ldr	r3, [pc, #16]	; (c2c4 <ull_scan_lll_handle_get+0x18>)
    c2b2:	1a80      	subs	r0, r0, r2
    c2b4:	fba3 3000 	umull	r3, r0, r3, r0
}
    c2b8:	f3c0 1087 	ubfx	r0, r0, #6, #8
    c2bc:	4770      	bx	lr
    c2be:	bf00      	nop
    c2c0:	20001b68 	.word	0x20001b68
    c2c4:	f0f0f0f1 	.word	0xf0f0f0f1

0000c2c8 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    c2c8:	b938      	cbnz	r0, c2da <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    c2ca:	4805      	ldr	r0, [pc, #20]	; (c2e0 <ull_scan_is_enabled_get+0x18>)
    c2cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
	return &ll_scan[handle];
    c2d0:	f013 0f01 	tst.w	r3, #1
    c2d4:	bf08      	it	eq
    c2d6:	2000      	moveq	r0, #0
    c2d8:	4770      	bx	lr
		return NULL;
    c2da:	2000      	movs	r0, #0
}
    c2dc:	4770      	bx	lr
    c2de:	bf00      	nop
    c2e0:	20001b68 	.word	0x20001b68

0000c2e4 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
    c2e4:	4a04      	ldr	r2, [pc, #16]	; (c2f8 <ull_scan_is_disabled_get+0x14>)
    c2e6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
    c2ea:	f003 0301 	and.w	r3, r3, #1
		return NULL;
    c2ee:	4303      	orrs	r3, r0
}
    c2f0:	bf0c      	ite	eq
    c2f2:	4610      	moveq	r0, r2
    c2f4:	2000      	movne	r0, #0
    c2f6:	4770      	bx	lr
    c2f8:	20001b68 	.word	0x20001b68

0000c2fc <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
    c2fc:	b990      	cbnz	r0, c324 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
    c2fe:	4a0a      	ldr	r2, [pc, #40]	; (c328 <ull_scan_is_enabled+0x2c>)
    c300:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
    c304:	f013 0001 	ands.w	r0, r3, #1
    c308:	d00d      	beq.n	c326 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    c30a:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
    c30e:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    c310:	f003 0301 	and.w	r3, r3, #1
    c314:	f3c0 1040 	ubfx	r0, r0, #5, #1
    c318:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
    c31c:	b11a      	cbz	r2, c326 <ull_scan_is_enabled+0x2a>
    c31e:	f040 0004 	orr.w	r0, r0, #4
    c322:	4770      	bx	lr
		return 0U;
    c324:	2000      	movs	r0, #0
}
    c326:	4770      	bx	lr
    c328:	20001b68 	.word	0x20001b68

0000c32c <init_reset>:
{
    c32c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    c32e:	4b15      	ldr	r3, [pc, #84]	; (c384 <init_reset+0x58>)
    c330:	4815      	ldr	r0, [pc, #84]	; (c388 <init_reset+0x5c>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    c332:	4c16      	ldr	r4, [pc, #88]	; (c38c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    c334:	2201      	movs	r2, #1
    c336:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    c33a:	f7fb fdeb 	bl	7f14 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
    c33e:	4b14      	ldr	r3, [pc, #80]	; (c390 <init_reset+0x64>)
    c340:	2204      	movs	r2, #4
    c342:	1898      	adds	r0, r3, r2
    c344:	2124      	movs	r1, #36	; 0x24
    c346:	f7fb fde5 	bl	7f14 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    c34a:	4b12      	ldr	r3, [pc, #72]	; (c394 <init_reset+0x68>)
    c34c:	2204      	movs	r2, #4
    c34e:	1898      	adds	r0, r3, r2
    c350:	212c      	movs	r1, #44	; 0x2c
    c352:	f7fb fddf 	bl	7f14 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    c356:	4b10      	ldr	r3, [pc, #64]	; (c398 <init_reset+0x6c>)
    c358:	2208      	movs	r2, #8
    c35a:	1d18      	adds	r0, r3, #4
    c35c:	4611      	mov	r1, r2
    c35e:	f7fb fdd9 	bl	7f14 <mem_init>
    c362:	4a0e      	ldr	r2, [pc, #56]	; (c39c <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    c364:	4b0e      	ldr	r3, [pc, #56]	; (c3a0 <init_reset+0x74>)
	default_phy_tx |= PHY_2M;
    c366:	490f      	ldr	r1, [pc, #60]	; (c3a4 <init_reset+0x78>)
    c368:	2000      	movs	r0, #0
    c36a:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    c36c:	221b      	movs	r2, #27
    c36e:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
    c370:	4a0d      	ldr	r2, [pc, #52]	; (c3a8 <init_reset+0x7c>)
	default_phy_tx |= PHY_2M;
    c372:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    c374:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_tx |= PHY_2M;
    c378:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
    c37a:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    c37c:	f8a4 c000 	strh.w	ip, [r4]
}
    c380:	bd10      	pop	{r4, pc}
    c382:	bf00      	nop
    c384:	20001bbc 	.word	0x20001bbc
    c388:	20000c58 	.word	0x20000c58
    c38c:	2000222c 	.word	0x2000222c
    c390:	20001be4 	.word	0x20001be4
    c394:	20001c78 	.word	0x20001c78
    c398:	20001d2c 	.word	0x20001d2c
    c39c:	20001bc0 	.word	0x20001bc0
    c3a0:	2000222a 	.word	0x2000222a
    c3a4:	20002233 	.word	0x20002233
    c3a8:	20002232 	.word	0x20002232

0000c3ac <ctrl_tx_pause_enqueue>:
{
    c3ac:	b538      	push	{r3, r4, r5, lr}
    c3ae:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
    c3b0:	e9d0 3067 	ldrd	r3, r0, [r0, #412]	; 0x19c
{
    c3b4:	460d      	mov	r5, r1
	if (
    c3b6:	b11b      	cbz	r3, c3c0 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    c3b8:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    c3bc:	0789      	lsls	r1, r1, #30
    c3be:	d50c      	bpl.n	c3da <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
    c3c0:	b340      	cbz	r0, c414 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
    c3c2:	2a00      	cmp	r2, #0
    c3c4:	d130      	bne.n	c428 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
    c3c6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    c3ca:	681a      	ldr	r2, [r3, #0]
    c3cc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    c3ce:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    c3d0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    c3d2:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
    c3d6:	b1d3      	cbz	r3, c40e <ctrl_tx_pause_enqueue+0x62>
}
    c3d8:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    c3da:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    c3de:	07c9      	lsls	r1, r1, #31
    c3e0:	d4ee      	bmi.n	c3c0 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    c3e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    c3e6:	428b      	cmp	r3, r1
    c3e8:	d02c      	beq.n	c444 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
    c3ea:	2800      	cmp	r0, #0
    c3ec:	d036      	beq.n	c45c <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
    c3ee:	2a00      	cmp	r2, #0
    c3f0:	d0e9      	beq.n	c3c6 <ctrl_tx_pause_enqueue+0x1a>
    c3f2:	4a22      	ldr	r2, [pc, #136]	; (c47c <ctrl_tx_pause_enqueue+0xd0>)
    c3f4:	4922      	ldr	r1, [pc, #136]	; (c480 <ctrl_tx_pause_enqueue+0xd4>)
    c3f6:	4823      	ldr	r0, [pc, #140]	; (c484 <ctrl_tx_pause_enqueue+0xd8>)
    c3f8:	f640 3313 	movw	r3, #2835	; 0xb13
    c3fc:	f009 ff79 	bl	162f2 <assert_print>
    c400:	4040      	eors	r0, r0
    c402:	f380 8811 	msr	BASEPRI, r0
    c406:	f04f 0003 	mov.w	r0, #3
    c40a:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    c40c:	e7db      	b.n	c3c6 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
    c40e:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
    c412:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    c414:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    c416:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
    c41a:	2a00      	cmp	r2, #0
    c41c:	d1db      	bne.n	c3d6 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
    c41e:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
    c422:	2b00      	cmp	r3, #0
    c424:	d1d8      	bne.n	c3d8 <ctrl_tx_pause_enqueue+0x2c>
    c426:	e7f2      	b.n	c40e <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
    c428:	4a14      	ldr	r2, [pc, #80]	; (c47c <ctrl_tx_pause_enqueue+0xd0>)
    c42a:	4915      	ldr	r1, [pc, #84]	; (c480 <ctrl_tx_pause_enqueue+0xd4>)
    c42c:	4815      	ldr	r0, [pc, #84]	; (c484 <ctrl_tx_pause_enqueue+0xd8>)
    c42e:	f640 3325 	movw	r3, #2853	; 0xb25
    c432:	f009 ff5e 	bl	162f2 <assert_print>
    c436:	4040      	eors	r0, r0
    c438:	f380 8811 	msr	BASEPRI, r0
    c43c:	f04f 0003 	mov.w	r0, #3
    c440:	df02      	svc	2
    c442:	e7c0      	b.n	c3c6 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
    c444:	6819      	ldr	r1, [r3, #0]
    c446:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    c44a:	2800      	cmp	r0, #0
    c44c:	d1cf      	bne.n	c3ee <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
    c44e:	6819      	ldr	r1, [r3, #0]
    c450:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    c452:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    c454:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    c456:	2a00      	cmp	r2, #0
    c458:	d0e1      	beq.n	c41e <ctrl_tx_pause_enqueue+0x72>
    c45a:	e7bc      	b.n	c3d6 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c45c:	7919      	ldrb	r1, [r3, #4]
    c45e:	f001 0103 	and.w	r1, r1, #3
    c462:	2903      	cmp	r1, #3
    c464:	d004      	beq.n	c470 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    c466:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
    c46a:	2a00      	cmp	r2, #0
    c46c:	d0ab      	beq.n	c3c6 <ctrl_tx_pause_enqueue+0x1a>
    c46e:	e7c0      	b.n	c3f2 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
    c470:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c472:	2903      	cmp	r1, #3
    c474:	d0eb      	beq.n	c44e <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    c476:	290a      	cmp	r1, #10
    c478:	d1f5      	bne.n	c466 <ctrl_tx_pause_enqueue+0xba>
    c47a:	e7e8      	b.n	c44e <ctrl_tx_pause_enqueue+0xa2>
    c47c:	0001a924 	.word	0x0001a924
    c480:	0001a964 	.word	0x0001a964
    c484:	0001a580 	.word	0x0001a580

0000c488 <tx_lll_flush>:
{
    c488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    c48c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    c490:	4934      	ldr	r1, [pc, #208]	; (c564 <tx_lll_flush+0xdc>)
{
    c492:	b083      	sub	sp, #12
    c494:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    c496:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    c49a:	4640      	mov	r0, r8
    c49c:	f7fb fda0 	bl	7fe0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    c4a0:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
    c4a4:	4629      	mov	r1, r5
    c4a6:	f004 fd37 	bl	10f18 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    c4aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
    c4ac:	aa01      	add	r2, sp, #4
    c4ae:	4631      	mov	r1, r6
    c4b0:	f7fb fdd6 	bl	8060 <memq_dequeue>
	while (link) {
    c4b4:	b328      	cbz	r0, c502 <tx_lll_flush+0x7a>
    c4b6:	4c2c      	ldr	r4, [pc, #176]	; (c568 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
    c4b8:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c4bc:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    c4c0:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    c4c2:	f894 c002 	ldrb.w	ip, [r4, #2]
    c4c6:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
    c4c8:	1c53      	adds	r3, r2, #1
    c4ca:	b2db      	uxtb	r3, r3
		last = 0U;
    c4cc:	459c      	cmp	ip, r3
    c4ce:	bf08      	it	eq
    c4d0:	2300      	moveq	r3, #0
	if (last == first) {
    c4d2:	4299      	cmp	r1, r3
    c4d4:	f894 c000 	ldrb.w	ip, [r4]
    c4d8:	d033      	beq.n	c542 <tx_lll_flush+0xba>
		lll_tx->node = tx;
    c4da:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c4dc:	fb12 f20c 	smulbb	r2, r2, ip
    c4e0:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
    c4e4:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    c4e8:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    c4ea:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    c4ee:	6002      	str	r2, [r0, #0]
		tx->next = link;
    c4f0:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    c4f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
    c4f4:	7163      	strb	r3, [r4, #5]
    c4f6:	aa01      	add	r2, sp, #4
    c4f8:	4631      	mov	r1, r6
    c4fa:	f7fb fdb1 	bl	8060 <memq_dequeue>
	while (link) {
    c4fe:	2800      	cmp	r0, #0
    c500:	d1de      	bne.n	c4c0 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    c502:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
    c506:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
    c50a:	b150      	cbz	r0, c522 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    c50c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    c50e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    c510:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
    c514:	f7ff fafe 	bl	bb14 <ull_rx_put>
	ull_rx_sched();
    c518:	f7ff fb0c 	bl	bb34 <ull_rx_sched>
}
    c51c:	b003      	add	sp, #12
    c51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    c522:	4a12      	ldr	r2, [pc, #72]	; (c56c <tx_lll_flush+0xe4>)
    c524:	4912      	ldr	r1, [pc, #72]	; (c570 <tx_lll_flush+0xe8>)
    c526:	4813      	ldr	r0, [pc, #76]	; (c574 <tx_lll_flush+0xec>)
    c528:	f640 237f 	movw	r3, #2687	; 0xa7f
    c52c:	f009 fee1 	bl	162f2 <assert_print>
    c530:	4040      	eors	r0, r0
    c532:	f380 8811 	msr	BASEPRI, r0
    c536:	f04f 0003 	mov.w	r0, #3
    c53a:	df02      	svc	2
	link = rx->hdr.link;
    c53c:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
    c540:	e7e4      	b.n	c50c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    c542:	4a0a      	ldr	r2, [pc, #40]	; (c56c <tx_lll_flush+0xe4>)
    c544:	490c      	ldr	r1, [pc, #48]	; (c578 <tx_lll_flush+0xf0>)
    c546:	480b      	ldr	r0, [pc, #44]	; (c574 <tx_lll_flush+0xec>)
    c548:	f640 236b 	movw	r3, #2667	; 0xa6b
    c54c:	f009 fed1 	bl	162f2 <assert_print>
    c550:	4040      	eors	r0, r0
    c552:	f380 8811 	msr	BASEPRI, r0
    c556:	f04f 0003 	mov.w	r0, #3
    c55a:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    c55c:	2300      	movs	r3, #0
    c55e:	801b      	strh	r3, [r3, #0]
    c560:	deff      	udf	#255	; 0xff
    c562:	bf00      	nop
    c564:	20000c58 	.word	0x20000c58
    c568:	200004a0 	.word	0x200004a0
    c56c:	0001a924 	.word	0x0001a924
    c570:	0001a974 	.word	0x0001a974
    c574:	0001a580 	.word	0x0001a580
    c578:	0001a96c 	.word	0x0001a96c

0000c57c <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    c57c:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
    c580:	f012 0202 	ands.w	r2, r2, #2
    c584:	d00a      	beq.n	c59c <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    c586:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    c58a:	b1d3      	cbz	r3, c5c2 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    c58c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    c590:	681a      	ldr	r2, [r3, #0]
    c592:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    c594:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    c596:	680b      	ldr	r3, [r1, #0]
    c598:	b1d3      	cbz	r3, c5d0 <ctrl_tx_sec_enqueue+0x54>
    c59a:	4770      	bx	lr
		if (conn->tx_head) {
    c59c:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    c5a0:	b1cb      	cbz	r3, c5d6 <ctrl_tx_sec_enqueue+0x5a>
{
    c5a2:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    c5a4:	f890 c0bc 	ldrb.w	ip, [r0, #188]	; 0xbc
    c5a8:	f890 e0bb 	ldrb.w	lr, [r0, #187]	; 0xbb
    c5ac:	45e6      	cmp	lr, ip
    c5ae:	d004      	beq.n	c5ba <ctrl_tx_sec_enqueue+0x3e>
    c5b0:	f890 c0bd 	ldrb.w	ip, [r0, #189]	; 0xbd
    c5b4:	f1bc 0f03 	cmp.w	ip, #3
    c5b8:	d010      	beq.n	c5dc <ctrl_tx_sec_enqueue+0x60>
}
    c5ba:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    c5be:	f7ff bef5 	b.w	c3ac <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    c5c2:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    c5c6:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    c5c8:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
		if (!tx->next) {
    c5cc:	2b00      	cmp	r3, #0
    c5ce:	d1e4      	bne.n	c59a <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    c5d0:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
    c5d4:	4770      	bx	lr
	bool pause = false;
    c5d6:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    c5d8:	f7ff bee8 	b.w	c3ac <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    c5dc:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    c5e0:	f00c 0c03 	and.w	ip, ip, #3
    c5e4:	f1bc 0f03 	cmp.w	ip, #3
    c5e8:	d1e7      	bne.n	c5ba <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    c5ea:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    c5ec:	2a03      	cmp	r2, #3
    c5ee:	d005      	beq.n	c5fc <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    c5f0:	f1a2 020a 	sub.w	r2, r2, #10
    c5f4:	fab2 f282 	clz	r2, r2
    c5f8:	0952      	lsrs	r2, r2, #5
    c5fa:	e7de      	b.n	c5ba <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    c5fc:	2201      	movs	r2, #1
    c5fe:	e7dc      	b.n	c5ba <ctrl_tx_sec_enqueue+0x3e>

0000c600 <ticker_stop_op_cb>:
{
    c600:	b510      	push	{r4, lr}
    c602:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c604:	b9b0      	cbnz	r0, c634 <ticker_stop_op_cb+0x34>
	mfy.param = param;
    c606:	4b12      	ldr	r3, [pc, #72]	; (c650 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    c608:	2200      	movs	r2, #0
    c60a:	2101      	movs	r1, #1
    c60c:	2002      	movs	r0, #2
	mfy.param = param;
    c60e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    c610:	f7fb fd88 	bl	8124 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c614:	b900      	cbnz	r0, c618 <ticker_stop_op_cb+0x18>
}
    c616:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    c618:	4a0e      	ldr	r2, [pc, #56]	; (c654 <ticker_stop_op_cb+0x54>)
    c61a:	490f      	ldr	r1, [pc, #60]	; (c658 <ticker_stop_op_cb+0x58>)
    c61c:	480f      	ldr	r0, [pc, #60]	; (c65c <ticker_stop_op_cb+0x5c>)
    c61e:	f640 2325 	movw	r3, #2597	; 0xa25
    c622:	f009 fe66 	bl	162f2 <assert_print>
    c626:	4040      	eors	r0, r0
    c628:	f380 8811 	msr	BASEPRI, r0
    c62c:	f04f 0003 	mov.w	r0, #3
    c630:	df02      	svc	2
}
    c632:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c634:	4a07      	ldr	r2, [pc, #28]	; (c654 <ticker_stop_op_cb+0x54>)
    c636:	490a      	ldr	r1, [pc, #40]	; (c660 <ticker_stop_op_cb+0x60>)
    c638:	4808      	ldr	r0, [pc, #32]	; (c65c <ticker_stop_op_cb+0x5c>)
    c63a:	f640 231f 	movw	r3, #2591	; 0xa1f
    c63e:	f009 fe58 	bl	162f2 <assert_print>
    c642:	4040      	eors	r0, r0
    c644:	f380 8811 	msr	BASEPRI, r0
    c648:	f04f 0003 	mov.w	r0, #3
    c64c:	df02      	svc	2
    c64e:	e7da      	b.n	c606 <ticker_stop_op_cb+0x6>
    c650:	20000550 	.word	0x20000550
    c654:	0001a924 	.word	0x0001a924
    c658:	0001a840 	.word	0x0001a840
    c65c:	0001a580 	.word	0x0001a580
    c660:	0001a984 	.word	0x0001a984

0000c664 <disabled_cb>:
{
    c664:	b508      	push	{r3, lr}
	mfy.param = param;
    c666:	4b0b      	ldr	r3, [pc, #44]	; (c694 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c668:	2200      	movs	r2, #0
	mfy.param = param;
    c66a:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c66c:	4611      	mov	r1, r2
    c66e:	2001      	movs	r0, #1
    c670:	f7fb fd58 	bl	8124 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c674:	b900      	cbnz	r0, c678 <disabled_cb+0x14>
}
    c676:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    c678:	4a07      	ldr	r2, [pc, #28]	; (c698 <disabled_cb+0x34>)
    c67a:	4908      	ldr	r1, [pc, #32]	; (c69c <disabled_cb+0x38>)
    c67c:	4808      	ldr	r0, [pc, #32]	; (c6a0 <disabled_cb+0x3c>)
    c67e:	f640 2351 	movw	r3, #2641	; 0xa51
    c682:	f009 fe36 	bl	162f2 <assert_print>
    c686:	4040      	eors	r0, r0
    c688:	f380 8811 	msr	BASEPRI, r0
    c68c:	f04f 0003 	mov.w	r0, #3
    c690:	df02      	svc	2
}
    c692:	bd08      	pop	{r3, pc}
    c694:	20000520 	.word	0x20000520
    c698:	0001a924 	.word	0x0001a924
    c69c:	0001a840 	.word	0x0001a840
    c6a0:	0001a580 	.word	0x0001a580

0000c6a4 <conn_disable>:
{
    c6a4:	b538      	push	{r3, r4, r5, lr}
    c6a6:	4604      	mov	r4, r0
	return hdr->ref;
    c6a8:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    c6ac:	b353      	cbz	r3, c704 <conn_disable+0x60>
		mfy.param = &conn->lll;
    c6ae:	4d17      	ldr	r5, [pc, #92]	; (c70c <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    c6b0:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    c6b2:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    c6b4:	b16b      	cbz	r3, c6d2 <conn_disable+0x2e>
    c6b6:	4a16      	ldr	r2, [pc, #88]	; (c710 <conn_disable+0x6c>)
    c6b8:	4916      	ldr	r1, [pc, #88]	; (c714 <conn_disable+0x70>)
    c6ba:	4817      	ldr	r0, [pc, #92]	; (c718 <conn_disable+0x74>)
    c6bc:	f640 233a 	movw	r3, #2618	; 0xa3a
    c6c0:	f009 fe17 	bl	162f2 <assert_print>
    c6c4:	4040      	eors	r0, r0
    c6c6:	f380 8811 	msr	BASEPRI, r0
    c6ca:	f04f 0003 	mov.w	r0, #3
    c6ce:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    c6d0:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    c6d2:	4912      	ldr	r1, [pc, #72]	; (c71c <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c6d4:	4b0d      	ldr	r3, [pc, #52]	; (c70c <conn_disable+0x68>)
    c6d6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    c6d8:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c6dc:	4611      	mov	r1, r2
    c6de:	2001      	movs	r0, #1
    c6e0:	f7fb fd20 	bl	8124 <mayfly_enqueue>
		LL_ASSERT(!ret);
    c6e4:	b900      	cbnz	r0, c6e8 <conn_disable+0x44>
}
    c6e6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    c6e8:	4a09      	ldr	r2, [pc, #36]	; (c710 <conn_disable+0x6c>)
    c6ea:	490d      	ldr	r1, [pc, #52]	; (c720 <conn_disable+0x7c>)
    c6ec:	480a      	ldr	r0, [pc, #40]	; (c718 <conn_disable+0x74>)
    c6ee:	f640 2341 	movw	r3, #2625	; 0xa41
    c6f2:	f009 fdfe 	bl	162f2 <assert_print>
    c6f6:	4040      	eors	r0, r0
    c6f8:	f380 8811 	msr	BASEPRI, r0
    c6fc:	f04f 0003 	mov.w	r0, #3
    c700:	df02      	svc	2
}
    c702:	bd38      	pop	{r3, r4, r5, pc}
    c704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    c708:	f7ff bfac 	b.w	c664 <disabled_cb>
    c70c:	20000540 	.word	0x20000540
    c710:	0001a924 	.word	0x0001a924
    c714:	0001a990 	.word	0x0001a990
    c718:	0001a580 	.word	0x0001a580
    c71c:	0000c665 	.word	0x0000c665
    c720:	0001a840 	.word	0x0001a840

0000c724 <conn_setup_adv_scan_disabled_cb>:
{
    c724:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    c726:	6883      	ldr	r3, [r0, #8]
    c728:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    c72a:	7f53      	ldrb	r3, [r2, #29]
    c72c:	09db      	lsrs	r3, r3, #7
    c72e:	d105      	bne.n	c73c <conn_setup_adv_scan_disabled_cb+0x18>
		ull_central_setup(rx, ftr, lll);
    c730:	4601      	mov	r1, r0
}
    c732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
    c736:	3108      	adds	r1, #8
    c738:	f7f5 bee6 	b.w	2508 <ull_central_setup>
		LL_ASSERT(0);
    c73c:	4a06      	ldr	r2, [pc, #24]	; (c758 <conn_setup_adv_scan_disabled_cb+0x34>)
    c73e:	4907      	ldr	r1, [pc, #28]	; (c75c <conn_setup_adv_scan_disabled_cb+0x38>)
    c740:	4807      	ldr	r0, [pc, #28]	; (c760 <conn_setup_adv_scan_disabled_cb+0x3c>)
    c742:	f640 137a 	movw	r3, #2426	; 0x97a
    c746:	f009 fdd4 	bl	162f2 <assert_print>
    c74a:	4040      	eors	r0, r0
    c74c:	f380 8811 	msr	BASEPRI, r0
    c750:	f04f 0003 	mov.w	r0, #3
    c754:	df02      	svc	2
}
    c756:	bd08      	pop	{r3, pc}
    c758:	0001a924 	.word	0x0001a924
    c75c:	0001a5e0 	.word	0x0001a5e0
    c760:	0001a580 	.word	0x0001a580

0000c764 <ticker_start_conn_op_cb>:
{
    c764:	b510      	push	{r4, lr}
    c766:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c768:	b990      	cbnz	r0, c790 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    c76a:	4620      	mov	r0, r4
    c76c:	f7ff f906 	bl	b97c <ull_update_unmark>
	LL_ASSERT(p == param);
    c770:	4284      	cmp	r4, r0
    c772:	d00c      	beq.n	c78e <ticker_start_conn_op_cb+0x2a>
    c774:	4a0d      	ldr	r2, [pc, #52]	; (c7ac <ticker_start_conn_op_cb+0x48>)
    c776:	490e      	ldr	r1, [pc, #56]	; (c7b0 <ticker_start_conn_op_cb+0x4c>)
    c778:	480e      	ldr	r0, [pc, #56]	; (c7b4 <ticker_start_conn_op_cb+0x50>)
    c77a:	f640 1353 	movw	r3, #2387	; 0x953
    c77e:	f009 fdb8 	bl	162f2 <assert_print>
    c782:	4040      	eors	r0, r0
    c784:	f380 8811 	msr	BASEPRI, r0
    c788:	f04f 0003 	mov.w	r0, #3
    c78c:	df02      	svc	2
}
    c78e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c790:	4a06      	ldr	r2, [pc, #24]	; (c7ac <ticker_start_conn_op_cb+0x48>)
    c792:	4909      	ldr	r1, [pc, #36]	; (c7b8 <ticker_start_conn_op_cb+0x54>)
    c794:	4807      	ldr	r0, [pc, #28]	; (c7b4 <ticker_start_conn_op_cb+0x50>)
    c796:	f44f 6315 	mov.w	r3, #2384	; 0x950
    c79a:	f009 fdaa 	bl	162f2 <assert_print>
    c79e:	4040      	eors	r0, r0
    c7a0:	f380 8811 	msr	BASEPRI, r0
    c7a4:	f04f 0003 	mov.w	r0, #3
    c7a8:	df02      	svc	2
    c7aa:	e7de      	b.n	c76a <ticker_start_conn_op_cb+0x6>
    c7ac:	0001a924 	.word	0x0001a924
    c7b0:	0001a9a4 	.word	0x0001a9a4
    c7b4:	0001a580 	.word	0x0001a580
    c7b8:	0001a984 	.word	0x0001a984

0000c7bc <ticker_stop_conn_op_cb>:
{
    c7bc:	b510      	push	{r4, lr}
    c7be:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c7c0:	b990      	cbnz	r0, c7e8 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    c7c2:	4620      	mov	r0, r4
    c7c4:	f7ff f8d0 	bl	b968 <ull_update_mark>
	LL_ASSERT(p == param);
    c7c8:	4284      	cmp	r4, r0
    c7ca:	d00c      	beq.n	c7e6 <ticker_stop_conn_op_cb+0x2a>
    c7cc:	4a0d      	ldr	r2, [pc, #52]	; (c804 <ticker_stop_conn_op_cb+0x48>)
    c7ce:	490e      	ldr	r1, [pc, #56]	; (c808 <ticker_stop_conn_op_cb+0x4c>)
    c7d0:	480e      	ldr	r0, [pc, #56]	; (c80c <ticker_stop_conn_op_cb+0x50>)
    c7d2:	f640 1349 	movw	r3, #2377	; 0x949
    c7d6:	f009 fd8c 	bl	162f2 <assert_print>
    c7da:	4040      	eors	r0, r0
    c7dc:	f380 8811 	msr	BASEPRI, r0
    c7e0:	f04f 0003 	mov.w	r0, #3
    c7e4:	df02      	svc	2
}
    c7e6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c7e8:	4a06      	ldr	r2, [pc, #24]	; (c804 <ticker_stop_conn_op_cb+0x48>)
    c7ea:	4909      	ldr	r1, [pc, #36]	; (c810 <ticker_stop_conn_op_cb+0x54>)
    c7ec:	4807      	ldr	r0, [pc, #28]	; (c80c <ticker_stop_conn_op_cb+0x50>)
    c7ee:	f640 1346 	movw	r3, #2374	; 0x946
    c7f2:	f009 fd7e 	bl	162f2 <assert_print>
    c7f6:	4040      	eors	r0, r0
    c7f8:	f380 8811 	msr	BASEPRI, r0
    c7fc:	f04f 0003 	mov.w	r0, #3
    c800:	df02      	svc	2
    c802:	e7de      	b.n	c7c2 <ticker_stop_conn_op_cb+0x6>
    c804:	0001a924 	.word	0x0001a924
    c808:	0001a9a4 	.word	0x0001a9a4
    c80c:	0001a580 	.word	0x0001a580
    c810:	0001a984 	.word	0x0001a984

0000c814 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    c814:	b900      	cbnz	r0, c818 <ticker_update_conn_op_cb+0x4>
    c816:	4770      	bx	lr
{
    c818:	b510      	push	{r4, lr}
    c81a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    c81c:	f7ff f8ba 	bl	b994 <ull_update_mark_get>
    c820:	4284      	cmp	r4, r0
    c822:	d010      	beq.n	c846 <ticker_update_conn_op_cb+0x32>
    c824:	f7ff f89a 	bl	b95c <ull_disable_mark_get>
    c828:	4284      	cmp	r4, r0
    c82a:	d00c      	beq.n	c846 <ticker_update_conn_op_cb+0x32>
    c82c:	4a06      	ldr	r2, [pc, #24]	; (c848 <ticker_update_conn_op_cb+0x34>)
    c82e:	4907      	ldr	r1, [pc, #28]	; (c84c <ticker_update_conn_op_cb+0x38>)
    c830:	4807      	ldr	r0, [pc, #28]	; (c850 <ticker_update_conn_op_cb+0x3c>)
    c832:	f640 133d 	movw	r3, #2365	; 0x93d
    c836:	f009 fd5c 	bl	162f2 <assert_print>
    c83a:	4040      	eors	r0, r0
    c83c:	f380 8811 	msr	BASEPRI, r0
    c840:	f04f 0003 	mov.w	r0, #3
    c844:	df02      	svc	2
}
    c846:	bd10      	pop	{r4, pc}
    c848:	0001a924 	.word	0x0001a924
    c84c:	0001a9b0 	.word	0x0001a9b0
    c850:	0001a580 	.word	0x0001a580

0000c854 <tx_ull_dequeue>:
{
    c854:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    c856:	e9d0 2467 	ldrd	r2, r4, [r0, #412]	; 0x19c
{
    c85a:	4603      	mov	r3, r0
    c85c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    c85e:	b164      	cbz	r4, c87a <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    c860:	4294      	cmp	r4, r2
    c862:	d021      	beq.n	c8a8 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    c864:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		if (conn->tx_head == conn->tx_data) {
    c868:	428a      	cmp	r2, r1
    c86a:	d00b      	beq.n	c884 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
    c86c:	6811      	ldr	r1, [r2, #0]
    c86e:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
		tx->next = NULL;
    c872:	2200      	movs	r2, #0
}
    c874:	bc10      	pop	{r4}
		tx->next = NULL;
    c876:	6002      	str	r2, [r0, #0]
}
    c878:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    c87a:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
    c87e:	4291      	cmp	r1, r2
    c880:	d104      	bne.n	c88c <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
    c882:	b18a      	cbz	r2, c8a8 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
    c884:	6809      	ldr	r1, [r1, #0]
    c886:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    c88a:	e7ef      	b.n	c86c <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c88c:	7911      	ldrb	r1, [r2, #4]
    c88e:	f001 0103 	and.w	r1, r1, #3
    c892:	2903      	cmp	r1, #3
    c894:	d013      	beq.n	c8be <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
    c896:	6812      	ldr	r2, [r2, #0]
    c898:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
    c89c:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    c89e:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
    c8a2:	bc10      	pop	{r4}
		tx->next = tx;
    c8a4:	6000      	str	r0, [r0, #0]
}
    c8a6:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    c8a8:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
    c8ac:	6812      	ldr	r2, [r2, #0]
    c8ae:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    c8b2:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    c8b4:	bf18      	it	ne
    c8b6:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    c8ba:	d1f2      	bne.n	c8a2 <tx_ull_dequeue+0x4e>
    c8bc:	e7ee      	b.n	c89c <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
    c8be:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c8c0:	2903      	cmp	r1, #3
    c8c2:	d0d3      	beq.n	c86c <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    c8c4:	290a      	cmp	r1, #10
    c8c6:	d1e6      	bne.n	c896 <tx_ull_dequeue+0x42>
    c8c8:	e7d0      	b.n	c86c <tx_ull_dequeue+0x18>
    c8ca:	bf00      	nop

0000c8cc <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8ce:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    c8d0:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
    c8d4:	0787      	lsls	r7, r0, #30
{
    c8d6:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    c8d8:	d433      	bmi.n	c942 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c8da:	482e      	ldr	r0, [pc, #184]	; (c994 <reject_ext_ind_send+0xc8>)
    c8dc:	4617      	mov	r7, r2
    c8de:	461e      	mov	r6, r3
    c8e0:	f7fb fb48 	bl	7f74 <mem_acquire>
	if (!tx) {
    c8e4:	2800      	cmp	r0, #0
    c8e6:	d038      	beq.n	c95a <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
    c8e8:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    c8ec:	f043 0302 	orr.w	r3, r3, #2
    c8f0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c8f4:	2303      	movs	r3, #3
    c8f6:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c8f8:	2211      	movs	r2, #17
	    conn->tx_head &&
    c8fa:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c8fe:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c900:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
    c902:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c906:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c908:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c90c:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c90e:	7102      	strb	r2, [r0, #4]
	if (
    c910:	b1db      	cbz	r3, c94a <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
    c912:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    c916:	0796      	lsls	r6, r2, #30
    c918:	d417      	bmi.n	c94a <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
    c91a:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    c91e:	07d2      	lsls	r2, r2, #31
    c920:	d413      	bmi.n	c94a <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
    c922:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    c926:	4293      	cmp	r3, r2
    c928:	d022      	beq.n	c970 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
    c92a:	b1c9      	cbz	r1, c960 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
    c92c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    c930:	681a      	ldr	r2, [r3, #0]
    c932:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    c934:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    c936:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    c938:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    c93c:	b90b      	cbnz	r3, c942 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
    c93e:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c942:	2301      	movs	r3, #1
    c944:	712b      	strb	r3, [r5, #4]
		*err = 0U;
    c946:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
    c948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
    c94a:	2900      	cmp	r1, #0
    c94c:	d1ee      	bne.n	c92c <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
    c94e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    c950:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    c954:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    c958:	e7f0      	b.n	c93c <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
    c95a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    c95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c960:	791a      	ldrb	r2, [r3, #4]
    c962:	f002 0203 	and.w	r2, r2, #3
    c966:	2a03      	cmp	r2, #3
    c968:	d00e      	beq.n	c988 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    c96a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    c96e:	e7df      	b.n	c930 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
    c970:	681a      	ldr	r2, [r3, #0]
    c972:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    c976:	2900      	cmp	r1, #0
    c978:	d1d8      	bne.n	c92c <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
    c97a:	681a      	ldr	r2, [r3, #0]
    c97c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    c97e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    c980:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    c982:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    c986:	e7d9      	b.n	c93c <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
    c988:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c98a:	2a03      	cmp	r2, #3
    c98c:	d0f5      	beq.n	c97a <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    c98e:	2a0a      	cmp	r2, #10
    c990:	d1eb      	bne.n	c96a <reject_ext_ind_send+0x9e>
    c992:	e7f2      	b.n	c97a <reject_ext_ind_send+0xae>
    c994:	20001c78 	.word	0x20001c78

0000c998 <event_len_prep>:
{
    c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
    c99a:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    c99e:	f003 0207 	and.w	r2, r3, #7
{
    c9a2:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
    c9a4:	2a06      	cmp	r2, #6
    c9a6:	f200 80d4 	bhi.w	cb52 <event_len_prep+0x1ba>
    c9aa:	e8df f002 	tbb	[pc, r2]
    c9ae:	4704      	.short	0x4704
    c9b0:	48484747 	.word	0x48484747
    c9b4:	47          	.byte	0x47
    c9b5:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c9b6:	486e      	ldr	r0, [pc, #440]	; (cb70 <event_len_prep+0x1d8>)
    c9b8:	f7fb fadc 	bl	7f74 <mem_acquire>
		if (!tx) {
    c9bc:	2800      	cmp	r0, #0
    c9be:	d03d      	beq.n	ca3c <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    c9c0:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c9c4:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
    c9c8:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c9cc:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    c9d0:	2301      	movs	r3, #1
    c9d2:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
    c9d6:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    c9da:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    c9de:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    c9e0:	72c3      	strb	r3, [r0, #11]
    c9e2:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    c9e4:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
    c9e6:	2309      	movs	r3, #9
    c9e8:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    c9ea:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    c9ec:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    c9ee:	2214      	movs	r2, #20
	    conn->tx_head &&
    c9f0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    c9f4:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    c9f6:	2100      	movs	r1, #0
    c9f8:	221b      	movs	r2, #27
    c9fa:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
    c9fc:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    ca00:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca02:	7902      	ldrb	r2, [r0, #4]
    ca04:	f042 0203 	orr.w	r2, r2, #3
    ca08:	7102      	strb	r2, [r0, #4]
	if (
    ca0a:	b13b      	cbz	r3, ca1c <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
    ca0c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    ca10:	0795      	lsls	r5, r2, #30
    ca12:	d403      	bmi.n	ca1c <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
    ca14:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    ca18:	07d2      	lsls	r2, r2, #31
    ca1a:	d573      	bpl.n	cb04 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
    ca1c:	2900      	cmp	r1, #0
    ca1e:	d07f      	beq.n	cb20 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
    ca20:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    ca24:	681a      	ldr	r2, [r3, #0]
    ca26:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    ca28:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ca2a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    ca2c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    ca30:	2b00      	cmp	r3, #0
    ca32:	d056      	beq.n	cae2 <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
    ca34:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ca38:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
    ca3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    ca3e:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    ca42:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
    ca46:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
    ca4a:	f8b0 718a 	ldrh.w	r7, [r0, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
    ca4e:	f8b0 618e 	ldrh.w	r6, [r0, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    ca52:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    ca56:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    ca58:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    ca5c:	d024      	beq.n	caa8 <event_len_prep+0x110>
			conn->llcp_length.state =
    ca5e:	2206      	movs	r2, #6
    ca60:	f362 0302 	bfi	r3, r2, #0, #3
    ca64:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		rx = conn->llcp_rx;
    ca68:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    ca6c:	b335      	cbz	r5, cabc <event_len_prep+0x124>
    ca6e:	6828      	ldr	r0, [r5, #0]
    ca70:	b320      	cbz	r0, cabc <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ca72:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    ca74:	6842      	ldr	r2, [r0, #4]
    ca76:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ca7a:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
    ca7e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ca80:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
    ca82:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
    ca84:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
    ca86:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ca88:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ca8a:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    ca8c:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    ca8e:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    ca92:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    ca94:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    ca96:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ca98:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ca9a:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    ca9c:	f7fe febc 	bl	b818 <ll_rx_put>
}
    caa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
    caa4:	f7fe bec2 	b.w	b82c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
    caa8:	f8b0 2190 	ldrh.w	r2, [r0, #400]	; 0x190
    caac:	b9e2      	cbnz	r2, cae8 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
    caae:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
				conn->procedure_expire = 0U;
    cab2:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
				conn->llcp_length.ack = conn->llcp_length.req;
    cab6:	f880 3185 	strb.w	r3, [r0, #389]	; 0x185
				conn->procedure_expire = 0U;
    caba:	e7d5      	b.n	ca68 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
    cabc:	4a2d      	ldr	r2, [pc, #180]	; (cb74 <event_len_prep+0x1dc>)
    cabe:	492e      	ldr	r1, [pc, #184]	; (cb78 <event_len_prep+0x1e0>)
    cac0:	482e      	ldr	r0, [pc, #184]	; (cb7c <event_len_prep+0x1e4>)
    cac2:	f241 134b 	movw	r3, #4427	; 0x114b
    cac6:	f009 fc14 	bl	162f2 <assert_print>
    caca:	4040      	eors	r0, r0
    cacc:	f380 8811 	msr	BASEPRI, r0
    cad0:	f04f 0003 	mov.w	r0, #3
    cad4:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    cad6:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    cad8:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    cadc:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
    cae0:	e7c7      	b.n	ca72 <event_len_prep+0xda>
		conn->tx_data_last = tx;
    cae2:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    cae6:	e7a5      	b.n	ca34 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
    cae8:	f8a0 218a 	strh.w	r2, [r0, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
    caec:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    caee:	f362 0302 	bfi	r3, r2, #0, #3
    caf2:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
				conn->llcp_length.tx_time =
    caf6:	f8b0 3192 	ldrh.w	r3, [r0, #402]	; 0x192
				conn->llcp_length.cache.tx_octets = 0;
    cafa:	f8a0 2190 	strh.w	r2, [r0, #400]	; 0x190
				conn->llcp_length.tx_time =
    cafe:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    cb02:	e7b1      	b.n	ca68 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
    cb04:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    cb08:	4293      	cmp	r3, r2
    cb0a:	d00f      	beq.n	cb2c <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
    cb0c:	2900      	cmp	r1, #0
    cb0e:	d187      	bne.n	ca20 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    cb10:	791a      	ldrb	r2, [r3, #4]
    cb12:	f002 0203 	and.w	r2, r2, #3
    cb16:	2a03      	cmp	r2, #3
    cb18:	d015      	beq.n	cb46 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    cb1a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    cb1e:	e781      	b.n	ca24 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
    cb20:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    cb22:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    cb26:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    cb2a:	e781      	b.n	ca30 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
    cb2c:	681a      	ldr	r2, [r3, #0]
    cb2e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    cb32:	2900      	cmp	r1, #0
    cb34:	f47f af74 	bne.w	ca20 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
    cb38:	681a      	ldr	r2, [r3, #0]
    cb3a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    cb3c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    cb3e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    cb40:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    cb44:	e774      	b.n	ca30 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
    cb46:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    cb48:	2a03      	cmp	r2, #3
    cb4a:	d0f5      	beq.n	cb38 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    cb4c:	2a0a      	cmp	r2, #10
    cb4e:	d1e4      	bne.n	cb1a <event_len_prep+0x182>
    cb50:	e7f2      	b.n	cb38 <event_len_prep+0x1a0>
		LL_ASSERT(0);
    cb52:	4a08      	ldr	r2, [pc, #32]	; (cb74 <event_len_prep+0x1dc>)
    cb54:	490a      	ldr	r1, [pc, #40]	; (cb80 <event_len_prep+0x1e8>)
    cb56:	4809      	ldr	r0, [pc, #36]	; (cb7c <event_len_prep+0x1e4>)
    cb58:	f241 1375 	movw	r3, #4469	; 0x1175
    cb5c:	f009 fbc9 	bl	162f2 <assert_print>
    cb60:	4040      	eors	r0, r0
    cb62:	f380 8811 	msr	BASEPRI, r0
    cb66:	f04f 0003 	mov.w	r0, #3
    cb6a:	df02      	svc	2
}
    cb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb6e:	bf00      	nop
    cb70:	20001c78 	.word	0x20001c78
    cb74:	0001a924 	.word	0x0001a924
    cb78:	0001aa04 	.word	0x0001aa04
    cb7c:	0001a580 	.word	0x0001a580
    cb80:	0001a5e0 	.word	0x0001a5e0

0000cb84 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    cb84:	4801      	ldr	r0, [pc, #4]	; (cb8c <ll_conn_acquire+0x8>)
    cb86:	f7fb b9f5 	b.w	7f74 <mem_acquire>
    cb8a:	bf00      	nop
    cb8c:	20001bbc 	.word	0x20001bbc

0000cb90 <ll_conn_release>:
	mem_release(conn, &conn_free);
    cb90:	4901      	ldr	r1, [pc, #4]	; (cb98 <ll_conn_release+0x8>)
    cb92:	f7fb ba09 	b.w	7fa8 <mem_release>
    cb96:	bf00      	nop
    cb98:	20001bbc 	.word	0x20001bbc

0000cb9c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    cb9c:	4902      	ldr	r1, [pc, #8]	; (cba8 <ll_conn_handle_get+0xc>)
    cb9e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    cba2:	f7fb ba1d 	b.w	7fe0 <mem_index_get>
    cba6:	bf00      	nop
    cba8:	20000c58 	.word	0x20000c58

0000cbac <ll_conn_get>:
{
    cbac:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cbae:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cbb2:	4801      	ldr	r0, [pc, #4]	; (cbb8 <ll_conn_get+0xc>)
    cbb4:	f7fb ba10 	b.w	7fd8 <mem_get>
    cbb8:	20000c58 	.word	0x20000c58

0000cbbc <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cbbc:	b958      	cbnz	r0, cbd6 <ll_connected_get+0x1a>
{
    cbbe:	b508      	push	{r3, lr}
    cbc0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cbc2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cbc6:	4805      	ldr	r0, [pc, #20]	; (cbdc <ll_connected_get+0x20>)
    cbc8:	f7fb fa06 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    cbcc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    cbce:	b903      	cbnz	r3, cbd2 <ll_connected_get+0x16>
}
    cbd0:	bd08      	pop	{r3, pc}
		return NULL;
    cbd2:	2000      	movs	r0, #0
}
    cbd4:	bd08      	pop	{r3, pc}
		return NULL;
    cbd6:	2000      	movs	r0, #0
}
    cbd8:	4770      	bx	lr
    cbda:	bf00      	nop
    cbdc:	20000c58 	.word	0x20000c58

0000cbe0 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    cbe0:	4801      	ldr	r0, [pc, #4]	; (cbe8 <ll_tx_mem_acquire+0x8>)
    cbe2:	f7fb b9c7 	b.w	7f74 <mem_acquire>
    cbe6:	bf00      	nop
    cbe8:	20001be4 	.word	0x20001be4

0000cbec <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    cbec:	4901      	ldr	r1, [pc, #4]	; (cbf4 <ll_tx_mem_release+0x8>)
    cbee:	f7fb b9db 	b.w	7fa8 <mem_release>
    cbf2:	bf00      	nop
    cbf4:	20001be4 	.word	0x20001be4

0000cbf8 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cbf8:	2800      	cmp	r0, #0
    cbfa:	d136      	bne.n	cc6a <ll_tx_mem_enqueue+0x72>
{
    cbfc:	b570      	push	{r4, r5, r6, lr}
    cbfe:	4602      	mov	r2, r0
    cc00:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc02:	481b      	ldr	r0, [pc, #108]	; (cc70 <ll_tx_mem_enqueue+0x78>)
    cc04:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cc08:	f7fb f9e6 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    cc0c:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc0e:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
    cc10:	bb2e      	cbnz	r6, cc5e <ll_tx_mem_enqueue+0x66>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    cc12:	4c18      	ldr	r4, [pc, #96]	; (cc74 <ll_tx_mem_enqueue+0x7c>)
    cc14:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
    cc18:	78a2      	ldrb	r2, [r4, #2]
    cc1a:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    cc1c:	f10c 0301 	add.w	r3, ip, #1
    cc20:	b2db      	uxtb	r3, r3
		last = 0U;
    cc22:	429a      	cmp	r2, r3
    cc24:	bf08      	it	eq
    cc26:	2300      	moveq	r3, #0
    cc28:	7922      	ldrb	r2, [r4, #4]
	if (last == first) {
    cc2a:	429a      	cmp	r2, r3
    cc2c:	d01a      	beq.n	cc64 <ll_tx_mem_enqueue+0x6c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    cc2e:	fb1c fc00 	smulbb	ip, ip, r0
    cc32:	f104 0e08 	add.w	lr, r4, #8
	lll_tx->handle = handle;
    cc36:	f82e 600c 	strh.w	r6, [lr, ip]
    cc3a:	44f4      	add	ip, lr
	lll_tx->node = tx;
    cc3c:	f8cc 5004 	str.w	r5, [ip, #4]
	*last = idx; /* Commit: Update write index */
    cc40:	7163      	strb	r3, [r4, #5]
    cc42:	780b      	ldrb	r3, [r1, #0]
	if (ull_ref_get(&conn->ull)) {
    cc44:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cc48:	b903      	cbnz	r3, cc4c <ll_tx_mem_enqueue+0x54>
}
    cc4a:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
    cc4c:	4b0a      	ldr	r3, [pc, #40]	; (cc78 <ll_tx_mem_enqueue+0x80>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    cc4e:	4632      	mov	r2, r6
	mfy.param = conn;
    cc50:	6099      	str	r1, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    cc52:	2003      	movs	r0, #3
    cc54:	2101      	movs	r1, #1
    cc56:	f7fb fa65 	bl	8124 <mayfly_enqueue>
	return 0;
    cc5a:	4630      	mov	r0, r6
}
    cc5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cc5e:	f06f 0015 	mvn.w	r0, #21
}
    cc62:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    cc64:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    cc68:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cc6a:	f06f 0015 	mvn.w	r0, #21
}
    cc6e:	4770      	bx	lr
    cc70:	20000c58 	.word	0x20000c58
    cc74:	200004f0 	.word	0x200004f0
    cc78:	20000530 	.word	0x20000530

0000cc7c <ll_conn_update>:
{
    cc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc80:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    cc84:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    cc88:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    cc8c:	2800      	cmp	r0, #0
    cc8e:	d151      	bne.n	cd34 <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc90:	460c      	mov	r4, r1
    cc92:	4615      	mov	r5, r2
    cc94:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cc98:	4602      	mov	r2, r0
    cc9a:	483c      	ldr	r0, [pc, #240]	; (cd8c <ll_conn_update+0x110>)
    cc9c:	461e      	mov	r6, r3
    cc9e:	f7fb f99b 	bl	7fd8 <mem_get>
    cca2:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
    cca4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    cca6:	2800      	cmp	r0, #0
    cca8:	d144      	bne.n	cd34 <ll_conn_update+0xb8>
	if (!cmd) {
    ccaa:	bb1c      	cbnz	r4, ccf4 <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
    ccac:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
    ccb0:	0699      	lsls	r1, r3, #26
    ccb2:	d446      	bmi.n	cd42 <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
    ccb4:	f89c 30ba 	ldrb.w	r3, [ip, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
    ccb8:	07da      	lsls	r2, r3, #31
    ccba:	d43e      	bmi.n	cd3a <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
    ccbc:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
    ccc0:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
    ccc4:	4293      	cmp	r3, r2
    ccc6:	d132      	bne.n	cd2e <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
    ccc8:	f8bc 215e 	ldrh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
    cccc:	f8ac 6160 	strh.w	r6, [ip, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
    ccd0:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
    ccd4:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
    ccd6:	f042 0210 	orr.w	r2, r2, #16
    ccda:	f8ac 215e 	strh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.req++;
    ccde:	f88c 315c 	strb.w	r3, [ip, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
    cce2:	f8ac 9162 	strh.w	r9, [ip, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
    cce6:	f8ac 8164 	strh.w	r8, [ip, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
    ccea:	f8ac 7166 	strh.w	r7, [ip, #358]	; 0x166
	return 0;
    ccee:	2000      	movs	r0, #0
}
    ccf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
    ccf4:	3c01      	subs	r4, #1
		if (cmd) {
    ccf6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ccfa:	d0df      	beq.n	ccbc <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
    ccfc:	f89c 215d 	ldrb.w	r2, [ip, #349]	; 0x15d
    cd00:	f89c 315c 	ldrb.w	r3, [ip, #348]	; 0x15c
    cd04:	429a      	cmp	r2, r3
    cd06:	d012      	beq.n	cd2e <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
    cd08:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
    cd0c:	f003 020f 	and.w	r2, r3, #15
    cd10:	2a03      	cmp	r2, #3
    cd12:	d10c      	bne.n	cd2e <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
    cd14:	f004 040f 	and.w	r4, r4, #15
    cd18:	f023 031f 	bic.w	r3, r3, #31
    cd1c:	f044 0410 	orr.w	r4, r4, #16
    cd20:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
    cd22:	f88c 515f 	strb.w	r5, [ip, #351]	; 0x15f
			conn->llcp_conn_param.state = cmd;
    cd26:	f88c 415e 	strb.w	r4, [ip, #350]	; 0x15e
}
    cd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    cd2e:	200c      	movs	r0, #12
}
    cd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd34:	2002      	movs	r0, #2
}
    cd36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
    cd3a:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
		    (!conn->common.fex_valid ||
    cd3e:	079b      	lsls	r3, r3, #30
    cd40:	d4bc      	bmi.n	ccbc <ll_conn_update+0x40>
		} else if (conn->lll.role) {
    cd42:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
    cd46:	2b00      	cmp	r3, #0
    cd48:	db1e      	blt.n	cd88 <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    cd4a:	f89c 20e4 	ldrb.w	r2, [ip, #228]	; 0xe4
    cd4e:	f89c 30e5 	ldrb.w	r3, [ip, #229]	; 0xe5
    cd52:	4293      	cmp	r3, r2
    cd54:	d1eb      	bne.n	cd2e <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    cd56:	f89c 20e6 	ldrb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
    cd5a:	f8ac 90e8 	strh.w	r9, [ip, #232]	; 0xe8
		conn->llcp_cu.req++;
    cd5e:	3301      	adds	r3, #1
    cd60:	f88c 30e4 	strb.w	r3, [ip, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    cd64:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
    cd68:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    cd6a:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
    cd6e:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
    cd70:	f88c 30f4 	strb.w	r3, [ip, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
    cd74:	f8ac 80ea 	strh.w	r8, [ip, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
    cd78:	f8ac 70ec 	strh.w	r7, [ip, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    cd7c:	f88c 20e6 	strb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
    cd80:	f8cc 00f0 	str.w	r0, [ip, #240]	; 0xf0
}
    cd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    cd88:	201a      	movs	r0, #26
    cd8a:	e7d1      	b.n	cd30 <ll_conn_update+0xb4>
    cd8c:	20000c58 	.word	0x20000c58

0000cd90 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cd90:	b9d0      	cbnz	r0, cdc8 <ll_chm_get+0x38>
{
    cd92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd94:	4602      	mov	r2, r0
    cd96:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cd98:	480c      	ldr	r0, [pc, #48]	; (cdcc <ll_chm_get+0x3c>)
    cd9a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cd9e:	f7fb f91b 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    cda2:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cda4:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    cda6:	b96e      	cbnz	r6, cdc4 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
    cda8:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
    cdac:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
    cdb0:	2205      	movs	r2, #5
    cdb2:	4639      	mov	r1, r7
    cdb4:	4628      	mov	r0, r5
    cdb6:	f009 fd1c 	bl	167f2 <memcpy>
	} while (conn->chm_updated);
    cdba:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    cdbe:	2800      	cmp	r0, #0
    cdc0:	d1f4      	bne.n	cdac <ll_chm_get+0x1c>
}
    cdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cdc4:	2002      	movs	r0, #2
}
    cdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cdc8:	2002      	movs	r0, #2
}
    cdca:	4770      	bx	lr
    cdcc:	20000c58 	.word	0x20000c58

0000cdd0 <ll_terminate_ind_send>:
	if (!IS_ACL_HANDLE(handle)) {
    cdd0:	2800      	cmp	r0, #0
    cdd2:	d13a      	bne.n	ce4a <ll_terminate_ind_send+0x7a>
{
    cdd4:	b510      	push	{r4, lr}
    cdd6:	4602      	mov	r2, r0
    cdd8:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cdda:	481d      	ldr	r0, [pc, #116]	; (ce50 <ll_terminate_ind_send+0x80>)
    cddc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cde0:	f7fb f8fa 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    cde4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    cde6:	bb73      	cbnz	r3, ce46 <ll_terminate_ind_send+0x76>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
    cde8:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    cdec:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    cdf0:	429a      	cmp	r2, r3
    cdf2:	d11b      	bne.n	ce2c <ll_terminate_ind_send+0x5c>
	switch (reason) {
    cdf4:	2c29      	cmp	r4, #41	; 0x29
    cdf6:	d81b      	bhi.n	ce30 <ll_terminate_ind_send+0x60>
    cdf8:	2c04      	cmp	r4, #4
    cdfa:	d91b      	bls.n	ce34 <ll_terminate_ind_send+0x64>
    cdfc:	1f62      	subs	r2, r4, #5
    cdfe:	2a24      	cmp	r2, #36	; 0x24
    ce00:	d818      	bhi.n	ce34 <ll_terminate_ind_send+0x64>
    ce02:	e8df f002 	tbb	[pc, r2]
    ce06:	1719      	.short	0x1719
    ce08:	17171717 	.word	0x17171717
    ce0c:	17171717 	.word	0x17171717
    ce10:	17171717 	.word	0x17171717
    ce14:	17191919 	.word	0x17191919
    ce18:	19171717 	.word	0x19171717
    ce1c:	17171717 	.word	0x17171717
    ce20:	17171717 	.word	0x17171717
    ce24:	17171717 	.word	0x17171717
    ce28:	1717      	.short	0x1717
    ce2a:	19          	.byte	0x19
    ce2b:	00          	.byte	0x00
		return BT_HCI_ERR_CMD_DISALLOWED;
    ce2c:	200c      	movs	r0, #12
}
    ce2e:	bd10      	pop	{r4, pc}
	switch (reason) {
    ce30:	2c3b      	cmp	r4, #59	; 0x3b
    ce32:	d001      	beq.n	ce38 <ll_terminate_ind_send+0x68>
    ce34:	2012      	movs	r0, #18
}
    ce36:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    ce38:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    ce3a:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    ce3e:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
    ce42:	2000      	movs	r0, #0
}
    ce44:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce46:	2002      	movs	r0, #2
}
    ce48:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce4a:	2002      	movs	r0, #2
}
    ce4c:	4770      	bx	lr
    ce4e:	bf00      	nop
    ce50:	20000c58 	.word	0x20000c58

0000ce54 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ce54:	b9b0      	cbnz	r0, ce84 <ll_feature_req_send+0x30>
{
    ce56:	b508      	push	{r3, lr}
    ce58:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce5a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    ce5e:	480a      	ldr	r0, [pc, #40]	; (ce88 <ll_feature_req_send+0x34>)
    ce60:	f7fb f8ba 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    ce64:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    ce66:	b95b      	cbnz	r3, ce80 <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    ce68:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    ce6c:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
    ce70:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
    ce72:	bf05      	ittet	eq
    ce74:	3201      	addeq	r2, #1
    ce76:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
    ce7a:	200c      	movne	r0, #12
	return 0;
    ce7c:	4618      	moveq	r0, r3
}
    ce7e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce80:	2002      	movs	r0, #2
}
    ce82:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce84:	2002      	movs	r0, #2
}
    ce86:	4770      	bx	lr
    ce88:	20000c58 	.word	0x20000c58

0000ce8c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ce8c:	b9b0      	cbnz	r0, cebc <ll_version_ind_send+0x30>
{
    ce8e:	b508      	push	{r3, lr}
    ce90:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce92:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    ce96:	480a      	ldr	r0, [pc, #40]	; (cec0 <ll_version_ind_send+0x34>)
    ce98:	f7fb f89e 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    ce9c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    ce9e:	b95b      	cbnz	r3, ceb8 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    cea0:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    cea4:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    cea8:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
    ceaa:	bf05      	ittet	eq
    ceac:	3201      	addeq	r2, #1
    ceae:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
    ceb2:	200c      	movne	r0, #12
	return 0;
    ceb4:	4618      	moveq	r0, r3
}
    ceb6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ceb8:	2002      	movs	r0, #2
}
    ceba:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cebc:	2002      	movs	r0, #2
}
    cebe:	4770      	bx	lr
    cec0:	20000c58 	.word	0x20000c58

0000cec4 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cec4:	2800      	cmp	r0, #0
    cec6:	d149      	bne.n	cf5c <ll_length_req_send+0x98>
{
    cec8:	b538      	push	{r3, r4, r5, lr}
    ceca:	460c      	mov	r4, r1
    cecc:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cece:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    ced2:	4602      	mov	r2, r0
    ced4:	4822      	ldr	r0, [pc, #136]	; (cf60 <ll_length_req_send+0x9c>)
    ced6:	f7fb f87f 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    ceda:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    cedc:	bbd3      	cbnz	r3, cf54 <ll_length_req_send+0x90>
	if (conn->llcp_length.disabled ||
    cede:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    cee2:	071a      	lsls	r2, r3, #28
    cee4:	d434      	bmi.n	cf50 <ll_length_req_send+0x8c>
	    (conn->common.fex_valid &&
    cee6:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
    ceea:	07d1      	lsls	r1, r2, #31
    ceec:	d503      	bpl.n	cef6 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
    ceee:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
	    (conn->common.fex_valid &&
    cef2:	0692      	lsls	r2, r2, #26
    cef4:	d52c      	bpl.n	cf50 <ll_length_req_send+0x8c>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    cef6:	f890 c184 	ldrb.w	ip, [r0, #388]	; 0x184
    cefa:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
    cefe:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
    cf02:	462a      	mov	r2, r5
    cf04:	bf28      	it	cs
    cf06:	f44f 72a4 	movcs.w	r2, #328	; 0x148
    cf0a:	4561      	cmp	r1, ip
    cf0c:	d011      	beq.n	cf32 <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
    cf0e:	f003 0307 	and.w	r3, r3, #7
    cf12:	2b03      	cmp	r3, #3
    cf14:	d004      	beq.n	cf20 <ll_length_req_send+0x5c>
    cf16:	3303      	adds	r3, #3
    cf18:	f003 0307 	and.w	r3, r3, #7
    cf1c:	2b01      	cmp	r3, #1
    cf1e:	d81b      	bhi.n	cf58 <ll_length_req_send+0x94>
			if (!conn->llcp_length.cache.tx_octets) {
    cf20:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
    cf24:	b9c3      	cbnz	r3, cf58 <ll_length_req_send+0x94>
				conn->llcp_length.cache.tx_octets = tx_octets;
    cf26:	f8a0 4190 	strh.w	r4, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
    cf2a:	f8a0 2192 	strh.w	r2, [r0, #402]	; 0x192
				return 0;
    cf2e:	4618      	mov	r0, r3
}
    cf30:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    cf32:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
    cf36:	f8a0 418a 	strh.w	r4, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
    cf3a:	3101      	adds	r1, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    cf3c:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
    cf40:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    cf44:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_time = tx_time;
    cf48:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
	return 0;
    cf4c:	2000      	movs	r0, #0
}
    cf4e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    cf50:	201a      	movs	r0, #26
}
    cf52:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cf54:	2002      	movs	r0, #2
}
    cf56:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    cf58:	200c      	movs	r0, #12
}
    cf5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cf5c:	2002      	movs	r0, #2
}
    cf5e:	4770      	bx	lr
    cf60:	20000c58 	.word	0x20000c58

0000cf64 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    cf64:	4a03      	ldr	r2, [pc, #12]	; (cf74 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    cf66:	4b04      	ldr	r3, [pc, #16]	; (cf78 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    cf68:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    cf6a:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    cf6c:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    cf6e:	800b      	strh	r3, [r1, #0]
}
    cf70:	4770      	bx	lr
    cf72:	bf00      	nop
    cf74:	2000222a 	.word	0x2000222a
    cf78:	2000222c 	.word	0x2000222c

0000cf7c <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    cf7c:	4a02      	ldr	r2, [pc, #8]	; (cf88 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    cf7e:	4b03      	ldr	r3, [pc, #12]	; (cf8c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    cf80:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    cf82:	8019      	strh	r1, [r3, #0]
}
    cf84:	2000      	movs	r0, #0
    cf86:	4770      	bx	lr
    cf88:	2000222a 	.word	0x2000222a
    cf8c:	2000222c 	.word	0x2000222c

0000cf90 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    cf90:	f04f 0c1b 	mov.w	ip, #27
    cf94:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    cf98:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    cf9c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    cfa0:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    cfa2:	8018      	strh	r0, [r3, #0]
}
    cfa4:	4770      	bx	lr
    cfa6:	bf00      	nop

0000cfa8 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cfa8:	b9c0      	cbnz	r0, cfdc <ll_phy_get+0x34>
{
    cfaa:	b538      	push	{r3, r4, r5, lr}
    cfac:	460d      	mov	r5, r1
    cfae:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cfb0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cfb4:	4602      	mov	r2, r0
    cfb6:	480a      	ldr	r0, [pc, #40]	; (cfe0 <ll_phy_get+0x38>)
    cfb8:	f7fb f80e 	bl	7fd8 <mem_get>
    cfbc:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    cfbe:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    cfc0:	b950      	cbnz	r0, cfd8 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    cfc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    cfc6:	f3c2 0202 	ubfx	r2, r2, #0, #3
    cfca:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    cfcc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    cfd0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cfd4:	7023      	strb	r3, [r4, #0]
}
    cfd6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cfd8:	2002      	movs	r0, #2
}
    cfda:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cfdc:	2002      	movs	r0, #2
}
    cfde:	4770      	bx	lr
    cfe0:	20000c58 	.word	0x20000c58

0000cfe4 <ll_phy_default_set>:
	default_phy_tx = tx;
    cfe4:	4a02      	ldr	r2, [pc, #8]	; (cff0 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    cfe6:	4b03      	ldr	r3, [pc, #12]	; (cff4 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    cfe8:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    cfea:	7019      	strb	r1, [r3, #0]
}
    cfec:	2000      	movs	r0, #0
    cfee:	4770      	bx	lr
    cff0:	20002233 	.word	0x20002233
    cff4:	20002232 	.word	0x20002232

0000cff8 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cff8:	2800      	cmp	r0, #0
    cffa:	d141      	bne.n	d080 <ll_phy_req_send+0x88>
{
    cffc:	b570      	push	{r4, r5, r6, lr}
    cffe:	460c      	mov	r4, r1
    d000:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d002:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d006:	4602      	mov	r2, r0
    d008:	481e      	ldr	r0, [pc, #120]	; (d084 <ll_phy_req_send+0x8c>)
    d00a:	461e      	mov	r6, r3
    d00c:	f7fa ffe4 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    d010:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d012:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
    d014:	bb93      	cbnz	r3, d07c <ll_phy_req_send+0x84>
	if (conn->llcp_phy.disabled ||
    d016:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
    d01a:	f010 0008 	ands.w	r0, r0, #8
    d01e:	d12b      	bne.n	d078 <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
    d020:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
    d024:	07db      	lsls	r3, r3, #31
    d026:	d504      	bpl.n	d032 <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
    d028:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    d02c:	f413 6f10 	tst.w	r3, #2304	; 0x900
    d030:	d022      	beq.n	d078 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
    d032:	f891 3194 	ldrb.w	r3, [r1, #404]	; 0x194
    d036:	f891 c195 	ldrb.w	ip, [r1, #405]	; 0x195
    d03a:	459c      	cmp	ip, r3
    d03c:	d11a      	bne.n	d074 <ll_phy_req_send+0x7c>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    d03e:	f004 0407 	and.w	r4, r4, #7
    d042:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
    d046:	00a4      	lsls	r4, r4, #2
    d048:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    d04c:	f006 0307 	and.w	r3, r6, #7
    d050:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    d054:	f005 0501 	and.w	r5, r5, #1
    d058:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
    d05c:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
    d060:	f10c 0c01 	add.w	ip, ip, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    d064:	f022 0207 	bic.w	r2, r2, #7
    d068:	4313      	orrs	r3, r2
	conn->llcp_phy.req++;
    d06a:	f881 c194 	strb.w	ip, [r1, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    d06e:	f8a1 3196 	strh.w	r3, [r1, #406]	; 0x196
}
    d072:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d074:	200c      	movs	r0, #12
}
    d076:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    d078:	201a      	movs	r0, #26
}
    d07a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d07c:	2002      	movs	r0, #2
}
    d07e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d080:	2002      	movs	r0, #2
}
    d082:	4770      	bx	lr
    d084:	20000c58 	.word	0x20000c58

0000d088 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d088:	b9d8      	cbnz	r0, d0c2 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d08a:	4602      	mov	r2, r0
{
    d08c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d08e:	480e      	ldr	r0, [pc, #56]	; (d0c8 <ll_apto_get+0x40>)
    d090:	460c      	mov	r4, r1
    d092:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d096:	f7fa ff9f 	bl	7fd8 <mem_get>
    d09a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    d09c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    d09e:	b970      	cbnz	r0, d0be <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    d0a0:	f8b2 30b2 	ldrh.w	r3, [r2, #178]	; 0xb2
    d0a4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    d0a6:	fb02 f303 	mul.w	r3, r2, r3
    d0aa:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    d0ae:	4a07      	ldr	r2, [pc, #28]	; (d0cc <ll_apto_get+0x44>)
    d0b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d0b4:	fba2 2303 	umull	r2, r3, r2, r3
    d0b8:	099b      	lsrs	r3, r3, #6
    d0ba:	8023      	strh	r3, [r4, #0]
}
    d0bc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d0be:	2002      	movs	r0, #2
}
    d0c0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d0c2:	2002      	movs	r0, #2
}
    d0c4:	4770      	bx	lr
    d0c6:	bf00      	nop
    d0c8:	20000c58 	.word	0x20000c58
    d0cc:	10624dd3 	.word	0x10624dd3

0000d0d0 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d0d0:	b9e0      	cbnz	r0, d10c <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d0d2:	4602      	mov	r2, r0
{
    d0d4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d0d6:	480e      	ldr	r0, [pc, #56]	; (d110 <ll_apto_set+0x40>)
    d0d8:	460c      	mov	r4, r1
    d0da:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d0de:	f7fa ff7b 	bl	7fd8 <mem_get>
    d0e2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    d0e4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    d0e6:	b978      	cbnz	r0, d108 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    d0e8:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
    d0ec:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d0f0:	fb03 fc0c 	mul.w	ip, r3, ip
    d0f4:	f242 7310 	movw	r3, #10000	; 0x2710
    d0f8:	fb03 c304 	mla	r3, r3, r4, ip
    d0fc:	3b01      	subs	r3, #1
    d0fe:	fbb3 f3fc 	udiv	r3, r3, ip
    d102:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
    d106:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d108:	2002      	movs	r0, #2
}
    d10a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d10c:	2002      	movs	r0, #2
}
    d10e:	4770      	bx	lr
    d110:	20000c58 	.word	0x20000c58

0000d114 <ull_conn_init>:
	err = init_reset();
    d114:	f7ff b90a 	b.w	c32c <init_reset>

0000d118 <ull_conn_reset>:
{
    d118:	b510      	push	{r4, lr}
	(void)ull_central_reset();
    d11a:	f002 f9f5 	bl	f508 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d11e:	2200      	movs	r2, #0
    d120:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d124:	4813      	ldr	r0, [pc, #76]	; (d174 <ull_conn_reset+0x5c>)
    d126:	f7fa ff57 	bl	7fd8 <mem_get>
    d12a:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    d12c:	f100 021c 	add.w	r2, r0, #28
    d130:	4601      	mov	r1, r0
    d132:	2003      	movs	r0, #3
    d134:	f7fe fc72 	bl	ba1c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    d138:	b108      	cbz	r0, d13e <ull_conn_reset+0x26>
    d13a:	3078      	adds	r0, #120	; 0x78
    d13c:	d10c      	bne.n	d158 <ull_conn_reset+0x40>
	MFIFO_INIT(conn_tx);
    d13e:	490e      	ldr	r1, [pc, #56]	; (d178 <ull_conn_reset+0x60>)
	MFIFO_INIT(conn_ack);
    d140:	4a0e      	ldr	r2, [pc, #56]	; (d17c <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
    d142:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    d144:	f64f 70ff 	movw	r0, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
    d148:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
    d14a:	8093      	strh	r3, [r2, #4]
	conn->lll.handle = LLL_HANDLE_INVALID;
    d14c:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    d14e:	65a3      	str	r3, [r4, #88]	; 0x58
}
    d150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
    d154:	f7ff b8ea 	b.w	c32c <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    d158:	4a09      	ldr	r2, [pc, #36]	; (d180 <ull_conn_reset+0x68>)
    d15a:	490a      	ldr	r1, [pc, #40]	; (d184 <ull_conn_reset+0x6c>)
    d15c:	480a      	ldr	r0, [pc, #40]	; (d188 <ull_conn_reset+0x70>)
    d15e:	f640 1388 	movw	r3, #2440	; 0x988
    d162:	f009 f8c6 	bl	162f2 <assert_print>
    d166:	4040      	eors	r0, r0
    d168:	f380 8811 	msr	BASEPRI, r0
    d16c:	f04f 0003 	mov.w	r0, #3
    d170:	df02      	svc	2
    d172:	e7e4      	b.n	d13e <ull_conn_reset+0x26>
    d174:	20000c58 	.word	0x20000c58
    d178:	200004f0 	.word	0x200004f0
    d17c:	200004a0 	.word	0x200004a0
    d180:	0001a924 	.word	0x0001a924
    d184:	0001a90c 	.word	0x0001a90c
    d188:	0001a580 	.word	0x0001a580

0000d18c <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    d18c:	4b01      	ldr	r3, [pc, #4]	; (d194 <ull_conn_default_tx_octets_get+0x8>)
}
    d18e:	8818      	ldrh	r0, [r3, #0]
    d190:	4770      	bx	lr
    d192:	bf00      	nop
    d194:	2000222a 	.word	0x2000222a

0000d198 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    d198:	4b01      	ldr	r3, [pc, #4]	; (d1a0 <ull_conn_default_tx_time_get+0x8>)
}
    d19a:	8818      	ldrh	r0, [r3, #0]
    d19c:	4770      	bx	lr
    d19e:	bf00      	nop
    d1a0:	2000222c 	.word	0x2000222c

0000d1a4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    d1a4:	4b01      	ldr	r3, [pc, #4]	; (d1ac <ull_conn_default_phy_tx_get+0x8>)
}
    d1a6:	7818      	ldrb	r0, [r3, #0]
    d1a8:	4770      	bx	lr
    d1aa:	bf00      	nop
    d1ac:	20002233 	.word	0x20002233

0000d1b0 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    d1b0:	4b01      	ldr	r3, [pc, #4]	; (d1b8 <ull_conn_default_phy_rx_get+0x8>)
}
    d1b2:	7818      	ldrb	r0, [r3, #0]
    d1b4:	4770      	bx	lr
    d1b6:	bf00      	nop
    d1b8:	20002232 	.word	0x20002232

0000d1bc <ull_conn_setup>:
{
    d1bc:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    d1be:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    d1c0:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    d1c2:	681d      	ldr	r5, [r3, #0]
    d1c4:	782b      	ldrb	r3, [r5, #0]
{
    d1c6:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    d1c8:	b193      	cbz	r3, d1f0 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    d1ca:	696b      	ldr	r3, [r5, #20]
    d1cc:	b163      	cbz	r3, d1e8 <ull_conn_setup+0x2c>
    d1ce:	4a0b      	ldr	r2, [pc, #44]	; (d1fc <ull_conn_setup+0x40>)
    d1d0:	490b      	ldr	r1, [pc, #44]	; (d200 <ull_conn_setup+0x44>)
    d1d2:	480c      	ldr	r0, [pc, #48]	; (d204 <ull_conn_setup+0x48>)
    d1d4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d1d8:	f009 f88b 	bl	162f2 <assert_print>
    d1dc:	4040      	eors	r0, r0
    d1de:	f380 8811 	msr	BASEPRI, r0
    d1e2:	f04f 0003 	mov.w	r0, #3
    d1e6:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    d1e8:	4b07      	ldr	r3, [pc, #28]	; (d208 <ull_conn_setup+0x4c>)
    d1ea:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    d1ee:	bd38      	pop	{r3, r4, r5, pc}
    d1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    d1f4:	4608      	mov	r0, r1
    d1f6:	f7ff ba95 	b.w	c724 <conn_setup_adv_scan_disabled_cb>
    d1fa:	bf00      	nop
    d1fc:	0001a924 	.word	0x0001a924
    d200:	0001a990 	.word	0x0001a990
    d204:	0001a580 	.word	0x0001a580
    d208:	0000c725 	.word	0x0000c725

0000d20c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    d20c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    d20e:	88da      	ldrh	r2, [r3, #6]
    d210:	2a00      	cmp	r2, #0
    d212:	f040 80ce 	bne.w	d3b2 <ull_conn_rx+0x1a6>
{
    d216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d21a:	460e      	mov	r6, r1
    d21c:	b083      	sub	sp, #12
    d21e:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d220:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d224:	48a4      	ldr	r0, [pc, #656]	; (d4b8 <ull_conn_rx+0x2ac>)
    d226:	f7fa fed7 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    d22a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d22c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    d22e:	2b00      	cmp	r3, #0
    d230:	f040 80b8 	bne.w	d3a4 <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
    d234:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    d236:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
	switch (pdu_rx->ll_id) {
    d23a:	7f29      	ldrb	r1, [r5, #28]
    d23c:	f001 0103 	and.w	r1, r1, #3
    d240:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    d242:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
    d246:	d129      	bne.n	d29c <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
    d248:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
    d24c:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    d250:	b3d0      	cbz	r0, d2c8 <ull_conn_rx+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    d252:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d256:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
    d258:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    d25c:	f2c0 80ad 	blt.w	d3ba <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
    d260:	2900      	cmp	r1, #0
    d262:	f040 80be 	bne.w	d3e2 <ull_conn_rx+0x1d6>
		((!conn->llcp_enc.refresh &&
    d266:	f1b8 0f02 	cmp.w	r8, #2
    d26a:	f000 80af 	beq.w	d3cc <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d26e:	f1b8 0f05 	cmp.w	r8, #5
    d272:	f000 8462 	beq.w	db3a <ull_conn_rx+0x92e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d276:	f1b8 0f06 	cmp.w	r8, #6
    d27a:	f000 83cd 	beq.w	da18 <ull_conn_rx+0x80c>
    d27e:	f1b8 0f0d 	cmp.w	r8, #13
    d282:	f000 8190 	beq.w	d5a6 <ull_conn_rx+0x39a>
    d286:	f1b8 0f11 	cmp.w	r8, #17
    d28a:	f000 823b 	beq.w	d704 <ull_conn_rx+0x4f8>
		conn->llcp_terminate.reason_final =
    d28e:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d290:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
    d292:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b

		return 0;
    d296:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d298:	712b      	strb	r3, [r5, #4]
		return 0;
    d29a:	e007      	b.n	d2ac <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
    d29c:	b949      	cbnz	r1, d2b2 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
    d29e:	b110      	cbz	r0, d2a6 <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
    d2a0:	233d      	movs	r3, #61	; 0x3d
    d2a2:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d2a6:	2301      	movs	r3, #1
    d2a8:	712b      	strb	r3, [r5, #4]
	return 0;
    d2aa:	2000      	movs	r0, #0
}
    d2ac:	b003      	add	sp, #12
    d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    d2b2:	2800      	cmp	r0, #0
    d2b4:	d0f9      	beq.n	d2aa <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
    d2b6:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d2b8:	2201      	movs	r2, #1
	return 0;
    d2ba:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
    d2bc:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d2c0:	712a      	strb	r2, [r5, #4]
}
    d2c2:	b003      	add	sp, #12
    d2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    d2c8:	f1a8 0302 	sub.w	r3, r8, #2
    d2cc:	2b17      	cmp	r3, #23
    d2ce:	d81d      	bhi.n	d30c <ull_conn_rx+0x100>
    d2d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    d2d4:	001c007c 	.word	0x001c007c
    d2d8:	042e0427 	.word	0x042e0427
    d2dc:	037203a2 	.word	0x037203a2
    d2e0:	01db001c 	.word	0x01db001c
    d2e4:	044d001c 	.word	0x044d001c
    d2e8:	016901ac 	.word	0x016901ac
    d2ec:	02e002f5 	.word	0x02e002f5
    d2f0:	0218024e 	.word	0x0218024e
    d2f4:	03cd0402 	.word	0x03cd0402
    d2f8:	00b900b9 	.word	0x00b900b9
    d2fc:	012c03d7 	.word	0x012c03d7
    d300:	00f6001c 	.word	0x00f6001c
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    d304:	7f6b      	ldrb	r3, [r5, #29]
    d306:	2b01      	cmp	r3, #1
    d308:	f000 843a 	beq.w	db80 <ull_conn_rx+0x974>
	if (conn->common.txn_lock) {
    d30c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    d310:	0798      	lsls	r0, r3, #30
    d312:	d4c8      	bmi.n	d2a6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d314:	4869      	ldr	r0, [pc, #420]	; (d4bc <ull_conn_rx+0x2b0>)
    d316:	f7fa fe2d 	bl	7f74 <mem_acquire>
	if (!tx) {
    d31a:	2800      	cmp	r0, #0
    d31c:	f000 851b 	beq.w	dd56 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
    d320:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    d324:	f043 0302 	orr.w	r3, r3, #2
    d328:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d32c:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    d32e:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d332:	f043 0303 	orr.w	r3, r3, #3
    d336:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    d338:	2302      	movs	r3, #2
    d33a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    d33c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    d340:	2307      	movs	r3, #7
    d342:	71c3      	strb	r3, [r0, #7]
	if (
    d344:	b1f2      	cbz	r2, d384 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
    d346:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
    d34a:	0799      	lsls	r1, r3, #30
    d34c:	d41a      	bmi.n	d384 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
    d34e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    d352:	07db      	lsls	r3, r3, #31
    d354:	d416      	bmi.n	d384 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
    d356:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    d35a:	429a      	cmp	r2, r3
    d35c:	f000 84ff 	beq.w	dd5e <ull_conn_rx+0xb52>
		} else if (!conn->tx_ctrl) {
    d360:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    d364:	2b00      	cmp	r3, #0
    d366:	f000 8542 	beq.w	ddee <ull_conn_rx+0xbe2>
	tx->next = conn->tx_ctrl_last->next;
    d36a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    d36e:	6813      	ldr	r3, [r2, #0]
    d370:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d372:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    d374:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    d376:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d37a:	2a00      	cmp	r2, #0
    d37c:	d193      	bne.n	d2a6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
    d37e:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d382:	e790      	b.n	d2a6 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
    d384:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    d388:	2b00      	cmp	r3, #0
    d38a:	f000 84da 	beq.w	dd42 <ull_conn_rx+0xb36>
	tx->next = conn->tx_ctrl_last->next;
    d38e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    d392:	681a      	ldr	r2, [r3, #0]
    d394:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d396:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    d398:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    d39a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d39e:	2a00      	cmp	r2, #0
    d3a0:	d181      	bne.n	d2a6 <ull_conn_rx+0x9a>
    d3a2:	e7ec      	b.n	d37e <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d3a4:	6833      	ldr	r3, [r6, #0]
    d3a6:	2201      	movs	r2, #1
		return 0;
    d3a8:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d3aa:	711a      	strb	r2, [r3, #4]
}
    d3ac:	b003      	add	sp, #12
    d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d3b2:	2201      	movs	r2, #1
    d3b4:	711a      	strb	r2, [r3, #4]
		return 0;
    d3b6:	2000      	movs	r0, #0
}
    d3b8:	4770      	bx	lr
	       (conn->lll.role &&
    d3ba:	bbc1      	cbnz	r1, d42e <ull_conn_rx+0x222>
		((!conn->llcp_enc.refresh &&
    d3bc:	f1b8 0f07 	cmp.w	r8, #7
    d3c0:	f000 82fa 	beq.w	d9b8 <ull_conn_rx+0x7ac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    d3c4:	f1b8 0f02 	cmp.w	r8, #2
    d3c8:	f47f af55 	bne.w	d276 <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    d3cc:	7f6b      	ldrb	r3, [r5, #29]
    d3ce:	2b02      	cmp	r3, #2
    d3d0:	d19c      	bne.n	d30c <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
    d3d2:	f895 2020 	ldrb.w	r2, [r5, #32]
    d3d6:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d3da:	2301      	movs	r3, #1
	int nack = 0;
    d3dc:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d3de:	712b      	strb	r3, [r5, #4]
}
    d3e0:	e764      	b.n	d2ac <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
    d3e2:	f1b8 0f02 	cmp.w	r8, #2
    d3e6:	d0f1      	beq.n	d3cc <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    d3e8:	f1b8 0f0b 	cmp.w	r8, #11
    d3ec:	d08a      	beq.n	d304 <ull_conn_rx+0xf8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    d3ee:	f1b8 0f04 	cmp.w	r8, #4
    d3f2:	f47f af3c 	bne.w	d26e <ull_conn_rx+0x62>
		if (conn->lll.role ||
    d3f6:	7f6b      	ldrb	r3, [r5, #29]
    d3f8:	2b0d      	cmp	r3, #13
    d3fa:	d187      	bne.n	d30c <ull_conn_rx+0x100>
		memcpy(&conn->llcp.encryption.skd[8],
    d3fc:	2208      	movs	r2, #8
    d3fe:	f105 0120 	add.w	r1, r5, #32
    d402:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
    d406:	f009 f9f4 	bl	167f2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
    d40a:	2204      	movs	r2, #4
    d40c:	f105 0128 	add.w	r1, r5, #40	; 0x28
    d410:	f104 007c 	add.w	r0, r4, #124	; 0x7c
    d414:	f009 f9ed 	bl	167f2 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
    d418:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d41c:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
    d41e:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d422:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
    d424:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	int nack = 0;
    d428:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d42a:	7111      	strb	r1, [r2, #4]
		break;
    d42c:	e73e      	b.n	d2ac <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
    d42e:	f1b8 0f02 	cmp.w	r8, #2
    d432:	d0cb      	beq.n	d3cc <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    d434:	f1b8 0f0b 	cmp.w	r8, #11
    d438:	f000 84a4 	beq.w	dd84 <ull_conn_rx+0xb78>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    d43c:	f1b8 0f03 	cmp.w	r8, #3
    d440:	f47f af19 	bne.w	d276 <ull_conn_rx+0x6a>
    d444:	e762      	b.n	d30c <ull_conn_rx+0x100>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
    d446:	7f6b      	ldrb	r3, [r5, #29]
    d448:	2b09      	cmp	r3, #9
    d44a:	f47f af5f 	bne.w	d30c <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    d44e:	f1b8 0f14 	cmp.w	r8, #20
    d452:	f000 84db 	beq.w	de0c <ull_conn_rx+0xc00>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    d456:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
    d45a:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    d45e:	4293      	cmp	r3, r2
    d460:	f000 87e2 	beq.w	e428 <ull_conn_rx+0x121c>
	eff_rx_octets = conn->lll.max_rx_octets;
    d464:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
    d468:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
    d46c:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
    d470:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    d474:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	struct node_tx *tx = NULL;
    d478:	2300      	movs	r3, #0
	       tx) ||
    d47a:	f001 0107 	and.w	r1, r1, #7
    d47e:	2902      	cmp	r1, #2
    d480:	f000 84e4 	beq.w	de4c <ull_conn_rx+0xc40>
    d484:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    d488:	f1b8 0f15 	cmp.w	r8, #21
    d48c:	f43f af0d 	beq.w	d2aa <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    d490:	4618      	mov	r0, r3
    d492:	490a      	ldr	r1, [pc, #40]	; (d4bc <ull_conn_rx+0x2b0>)
    d494:	f7fa fd88 	bl	7fa8 <mem_release>
			if (conn->llcp_length.state ==
    d498:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->common.txn_lock = 0U;
    d49c:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
    d4a0:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
    d4a4:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
    d4a8:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
    d4aa:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
    d4ae:	f47f aefc 	bne.w	d2aa <ull_conn_rx+0x9e>
				return -EBUSY;
    d4b2:	f06f 000f 	mvn.w	r0, #15
    d4b6:	e6f9      	b.n	d2ac <ull_conn_rx+0xa0>
    d4b8:	20000c58 	.word	0x20000c58
    d4bc:	20001c78 	.word	0x20001c78
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
    d4c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	f6ff af21 	blt.w	d30c <ull_conn_rx+0x100>
    d4ca:	7f6b      	ldrb	r3, [r5, #29]
    d4cc:	2b03      	cmp	r3, #3
    d4ce:	f47f af1d 	bne.w	d30c <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
    d4d2:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					 conn->lll.phy_rx))) {
    d4d6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
    d4da:	f895 2020 	ldrb.w	r2, [r5, #32]
    d4de:	430b      	orrs	r3, r1
    d4e0:	f003 0307 	and.w	r3, r3, #7
    d4e4:	4213      	tst	r3, r2
    d4e6:	f43f aee0 	beq.w	d2aa <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    d4ea:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    d4ee:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
    d4f2:	1a9b      	subs	r3, r3, r2
    d4f4:	f003 0303 	and.w	r3, r3, #3
    d4f8:	2b02      	cmp	r3, #2
    d4fa:	f43f aed6 	beq.w	d2aa <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
    d4fe:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
    d502:	f002 fac9 	bl	fa98 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
    d506:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
    d50a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			conn->llcp_type = LLCP_CHAN_MAP;
    d50e:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
    d510:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
    d512:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
    d516:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d51a:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
    d51c:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d520:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
    d522:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	int nack = 0;
    d526:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d528:	7111      	strb	r1, [r2, #4]

		break;
    d52a:	e6bf      	b.n	d2ac <ull_conn_rx+0xa0>
		if (conn->lll.role ||
    d52c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d530:	2b00      	cmp	r3, #0
    d532:	f6ff aeeb 	blt.w	d30c <ull_conn_rx+0x100>
    d536:	7f6b      	ldrb	r3, [r5, #29]
    d538:	2b03      	cmp	r3, #3
    d53a:	f47f aee7 	bne.w	d30c <ull_conn_rx+0x100>
		if (!conn->lll.role &&
    d53e:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
    d542:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    d546:	429a      	cmp	r2, r3
    d548:	f43f aead 	beq.w	d2a6 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    d54c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
    d550:	f002 0303 	and.w	r3, r2, #3
    d554:	2b02      	cmp	r3, #2
    d556:	f47f aea6 	bne.w	d2a6 <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
    d55a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    d55e:	f3c2 0182 	ubfx	r1, r2, #2, #3
    d562:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
    d564:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    d568:	009b      	lsls	r3, r3, #2
    d56a:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
    d56e:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    d572:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    d576:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    d57a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    d57e:	d002      	beq.n	d586 <ull_conn_rx+0x37a>
    d580:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    d584:	d105      	bne.n	d592 <ull_conn_rx+0x386>
				conn->llcp_phy.tx = 0;
    d586:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    d58a:	f003 0303 	and.w	r3, r3, #3
    d58e:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
    d592:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
    d596:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
    d598:	f043 0301 	orr.w	r3, r3, #1
    d59c:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
    d5a0:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d5a4:	e67f      	b.n	d2a6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
    d5a6:	7f6b      	ldrb	r3, [r5, #29]
    d5a8:	2b02      	cmp	r3, #2
    d5aa:	f47f aeaf 	bne.w	d30c <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
    d5ae:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
    d5b2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    d5b6:	4293      	cmp	r3, r2
    d5b8:	d004      	beq.n	d5c4 <ull_conn_rx+0x3b8>
    d5ba:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    d5be:	2b03      	cmp	r3, #3
    d5c0:	f000 86de 	beq.w	e380 <ull_conn_rx+0x1174>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    d5c4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    d5c8:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
    d5cc:	4293      	cmp	r3, r2
    d5ce:	f000 852f 	beq.w	e030 <ull_conn_rx+0xe24>
		rej_ext_ind->error_code = rej_ind->error_code;
    d5d2:	f895 1020 	ldrb.w	r1, [r5, #32]
    d5d6:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    d5da:	2923      	cmp	r1, #35	; 0x23
    d5dc:	d012      	beq.n	d604 <ull_conn_rx+0x3f8>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d5de:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
    d5e2:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d5e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    d5ea:	f36f 0200 	bfc	r2, #0, #1
    d5ee:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
    d5f2:	2200      	movs	r2, #0
    d5f4:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d5f8:	f3c3 0202 	ubfx	r2, r3, #0, #3
    d5fc:	f362 1306 	bfi	r3, r2, #4, #3
    d600:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
    d604:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    d608:	0758      	lsls	r0, r3, #29
    d60a:	f57f ae4c 	bpl.w	d2a6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d60e:	231d      	movs	r3, #29
    d610:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    d612:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
    d614:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    d618:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d61c:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
    d61e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    d622:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
    d626:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
    d628:	77ab      	strb	r3, [r5, #30]
	if (err) {
    d62a:	e63f      	b.n	d2ac <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
    d62c:	7f6e      	ldrb	r6, [r5, #29]
    d62e:	2e06      	cmp	r6, #6
    d630:	f47f ae6c 	bne.w	d30c <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
    d634:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    d638:	07df      	lsls	r7, r3, #31
    d63a:	f140 85dc 	bpl.w	e1f6 <ull_conn_rx+0xfea>
	} else if (!conn->llcp_version.rx) {
    d63e:	f013 0302 	ands.w	r3, r3, #2
    d642:	f47f ae30 	bne.w	d2a6 <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
    d646:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    d64a:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
		conn->procedure_expire = 0U;
    d64e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_version.version_number = v->version_number;
    d652:	f895 3020 	ldrb.w	r3, [r5, #32]
    d656:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    d65a:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    d65e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
    d662:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    d666:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d66a:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
    d66e:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    d672:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
    d676:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    d67a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    d67e:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
	conn->llcp_version.rx = 1U;
    d682:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	return 0;
    d686:	2000      	movs	r0, #0
    d688:	e610      	b.n	d2ac <ull_conn_rx+0xa0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
    d68a:	7f6b      	ldrb	r3, [r5, #29]
    d68c:	2b09      	cmp	r3, #9
    d68e:	f47f ae3d 	bne.w	d30c <ull_conn_rx+0x100>
    d692:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
    d694:	49dd      	ldr	r1, [pc, #884]	; (da0c <ull_conn_rx+0x800>)
    d696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d698:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    d69a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    d69e:	400a      	ands	r2, r1
    d6a0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
    d6a4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    d6a8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
    d6ac:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    d6b0:	4013      	ands	r3, r2
    d6b2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    d6b6:	6a2e      	ldr	r6, [r5, #32]
    d6b8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
    d6ba:	f7fd fc55 	bl	af68 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    d6be:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d6c2:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
    d6c6:	4ad1      	ldr	r2, [pc, #836]	; (da0c <ull_conn_rx+0x800>)
	conn->llcp_feature.features_peer =
    d6c8:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
    d6cc:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
    d6d0:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
    d6d2:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
    d6d6:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
    d6d8:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_feature.ack = conn->llcp_feature.req;
    d6dc:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d6e0:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	feat_result &= 0xFF;
    d6e4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    d6e8:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
    d6ec:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d6ee:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
    d6f2:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d6f4:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    d6f8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	conn->procedure_expire = 0U;
    d6fc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
    d700:	4618      	mov	r0, r3
}
    d702:	e5d3      	b.n	d2ac <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
    d704:	7f6b      	ldrb	r3, [r5, #29]
    d706:	2b03      	cmp	r3, #3
    d708:	f47f ae00 	bne.w	d30c <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
    d70c:	f895 3020 	ldrb.w	r3, [r5, #32]
    d710:	3b03      	subs	r3, #3
    d712:	2b13      	cmp	r3, #19
    d714:	f63f adc7 	bhi.w	d2a6 <ull_conn_rx+0x9a>
    d718:	a201      	add	r2, pc, #4	; (adr r2, d720 <ull_conn_rx+0x514>)
    d71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d71e:	bf00      	nop
    d720:	0000dd03 	.word	0x0000dd03
    d724:	0000d2a7 	.word	0x0000d2a7
    d728:	0000d2a7 	.word	0x0000d2a7
    d72c:	0000d2a7 	.word	0x0000d2a7
    d730:	0000d2a7 	.word	0x0000d2a7
    d734:	0000d2a7 	.word	0x0000d2a7
    d738:	0000d2a7 	.word	0x0000d2a7
    d73c:	0000d2a7 	.word	0x0000d2a7
    d740:	0000d2a7 	.word	0x0000d2a7
    d744:	0000d2a7 	.word	0x0000d2a7
    d748:	0000d2a7 	.word	0x0000d2a7
    d74c:	0000d2a7 	.word	0x0000d2a7
    d750:	0000dc8b 	.word	0x0000dc8b
    d754:	0000d2a7 	.word	0x0000d2a7
    d758:	0000d2a7 	.word	0x0000d2a7
    d75c:	0000d2a7 	.word	0x0000d2a7
    d760:	0000d2a7 	.word	0x0000d2a7
    d764:	0000dc01 	.word	0x0000dc01
    d768:	0000d2a7 	.word	0x0000d2a7
    d76c:	0000dc3d 	.word	0x0000dc3d
		if (conn->lll.role ||
    d770:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d774:	2b00      	cmp	r3, #0
    d776:	f6ff adc9 	blt.w	d30c <ull_conn_rx+0x100>
    d77a:	7f6b      	ldrb	r3, [r5, #29]
    d77c:	2b18      	cmp	r3, #24
    d77e:	f47f adc5 	bne.w	d30c <ull_conn_rx+0x100>
		if (!conn->lll.role &&
    d782:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    d786:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
    d78a:	429a      	cmp	r2, r3
    d78c:	f43f ad8b 	beq.w	d2a6 <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
    d790:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
    d794:	f003 030f 	and.w	r3, r3, #15
    d798:	2b04      	cmp	r3, #4
    d79a:	f47f ad84 	bne.w	d2a6 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    d79e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d7a2:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    d7a6:	2b05      	cmp	r3, #5
    d7a8:	f240 85ad 	bls.w	e306 <ull_conn_rx+0x10fa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    d7ac:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
    d7ae:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    d7b0:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    d7b4:	f200 85a7 	bhi.w	e306 <ull_conn_rx+0x10fa>
			    (interval_max > 3200) ||
    d7b8:	428b      	cmp	r3, r1
    d7ba:	f200 85a4 	bhi.w	e306 <ull_conn_rx+0x10fa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    d7be:	8cae      	ldrh	r6, [r5, #36]	; 0x24
    d7c0:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
    d7c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    d7c6:	f080 859e 	bcs.w	e306 <ull_conn_rx+0x10fa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    d7ca:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
    d7cc:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
    d7d0:	f1ae 020a 	sub.w	r2, lr, #10
    d7d4:	f640 4876 	movw	r8, #3190	; 0xc76
    d7d8:	b292      	uxth	r2, r2
    d7da:	4542      	cmp	r2, r8
    d7dc:	f200 8593 	bhi.w	e306 <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
    d7e0:	3301      	adds	r3, #1
    d7e2:	b29b      	uxth	r3, r3
    d7e4:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
    d7e8:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
    d7ec:	f080 858b 	bcs.w	e306 <ull_conn_rx+0x10fa>
			     ((latency + 1) * interval_max)) ||
    d7f0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    d7f4:	4291      	cmp	r1, r2
    d7f6:	f0c0 8586 	bcc.w	e306 <ull_conn_rx+0x10fa>
			conn->llcp_conn_param.preferred_periodicity =
    d7fa:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d7fe:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
    d802:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d806:	2301      	movs	r3, #1
    d808:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
    d80c:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
    d80e:	f8a4 7162 	strh.w	r7, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
    d812:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
    d816:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
    d81a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    d81e:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    d822:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    d826:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d82a:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
    d82e:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
    d832:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    d836:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
    d83a:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
    d83e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    d842:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    d846:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
    d84a:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
    d84e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    d852:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    d856:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
    d85a:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
    d85e:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
    d862:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d866:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
    d86a:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
    d86e:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
    d872:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    d876:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
    d87a:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
    d87e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    d882:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d886:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				sys_le16_to_cpu(cpr->offset5);
    d88a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
    d88e:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d892:	e508      	b.n	d2a6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
    d894:	7f6b      	ldrb	r3, [r5, #29]
    d896:	2b18      	cmp	r3, #24
    d898:	f47f ad38 	bne.w	d30c <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
    d89c:	485c      	ldr	r0, [pc, #368]	; (da10 <ull_conn_rx+0x804>)
    d89e:	6803      	ldr	r3, [r0, #0]
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	f000 827b 	beq.w	dd9c <ull_conn_rx+0xb90>
    d8a6:	429c      	cmp	r4, r3
    d8a8:	f000 8278 	beq.w	dd9c <ull_conn_rx+0xb90>
			nack = reject_ext_ind_send(conn, *rx,
    d8ac:	2320      	movs	r3, #32
    d8ae:	220f      	movs	r2, #15
    d8b0:	4629      	mov	r1, r5
    d8b2:	4620      	mov	r0, r4
}
    d8b4:	b003      	add	sp, #12
    d8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
    d8ba:	f7ff b807 	b.w	c8cc <reject_ext_ind_send>
		if (conn->lll.role ||
    d8be:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	f6ff ad22 	blt.w	d30c <ull_conn_rx+0x100>
    d8c8:	f895 901d 	ldrb.w	r9, [r5, #29]
    d8cc:	f1b9 0f09 	cmp.w	r9, #9
    d8d0:	f47f ad1c 	bne.w	d30c <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
    d8d4:	f894 00ba 	ldrb.w	r0, [r4, #186]	; 0xba
    d8d8:	f010 0602 	ands.w	r6, r0, #2
    d8dc:	f47f ace3 	bne.w	d2a6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d8e0:	484c      	ldr	r0, [pc, #304]	; (da14 <ull_conn_rx+0x808>)
    d8e2:	f7fa fb47 	bl	7f74 <mem_acquire>
	if (!tx) {
    d8e6:	4607      	mov	r7, r0
    d8e8:	2800      	cmp	r0, #0
    d8ea:	f000 8234 	beq.w	dd56 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
    d8ee:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
    d8f2:	4946      	ldr	r1, [pc, #280]	; (da0c <ull_conn_rx+0x800>)
	conn->common.txn_lock = 1U;
    d8f4:	f043 0302 	orr.w	r3, r3, #2
    d8f8:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    d8fc:	6a2a      	ldr	r2, [r5, #32]
    d8fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
    d900:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    d902:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    d906:	400a      	ands	r2, r1
    d908:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
    d90c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    d910:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
    d914:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    d918:	4013      	ands	r3, r2
    d91a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    d91e:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
    d922:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    d926:	f7fd fb1f 	bl	af68 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    d92a:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d92e:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
    d932:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	feat &= LL_FEAT_BIT_MASK;
    d936:	4b35      	ldr	r3, [pc, #212]	; (da0c <ull_conn_rx+0x800>)
    d938:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
    d93c:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    d93e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    d942:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
    d946:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d94a:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
    d94e:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    d952:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	conn->common.fex_valid = 1U;
    d956:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    d95a:	f043 0301 	orr.w	r3, r3, #1
    d95e:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d962:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    d964:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d968:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    d96c:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d96e:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    d970:	18b8      	adds	r0, r7, r2
    d972:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    d974:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    d978:	f008 ff46 	bl	16808 <memset>
	feat = feat_land_octet0(ll_feat_get(),
    d97c:	f7fd faf4 	bl	af68 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    d980:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	dst[0] = val;
    d984:	7339      	strb	r1, [r7, #12]
    d986:	4002      	ands	r2, r0
	feat_result &= 0xFF;
    d988:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d98c:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
    d990:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
    d992:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    d994:	723b      	strb	r3, [r7, #8]
    d996:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
    d998:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d99c:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
    d99e:	4620      	mov	r0, r4
    d9a0:	727b      	strb	r3, [r7, #9]
    d9a2:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
    d9a4:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
    d9a6:	73fe      	strb	r6, [r7, #15]
    d9a8:	72fa      	strb	r2, [r7, #11]
    d9aa:	4639      	mov	r1, r7
    d9ac:	f7fe fde6 	bl	c57c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d9b0:	2301      	movs	r3, #1
    d9b2:	712b      	strb	r3, [r5, #4]
	return 0;
    d9b4:	4630      	mov	r0, r6
    d9b6:	e479      	b.n	d2ac <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
    d9b8:	7f6b      	ldrb	r3, [r5, #29]
    d9ba:	2b02      	cmp	r3, #2
    d9bc:	f47f aca6 	bne.w	d30c <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
    d9c0:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
		} else if ((conn->llcp_conn_param.ack !=
    d9c4:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
	return ((uint16_t)src[1] << 8) | src[0];
    d9c8:	f895 3020 	ldrb.w	r3, [r5, #32]
    d9cc:	4291      	cmp	r1, r2
    d9ce:	d002      	beq.n	d9d6 <ull_conn_rx+0x7ca>
			    conn->llcp_conn_param.req) &&
    d9d0:	2b0f      	cmp	r3, #15
    d9d2:	f000 83c5 	beq.w	e160 <ull_conn_rx+0xf54>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
    d9d6:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    d9da:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
    d9de:	4291      	cmp	r1, r2
    d9e0:	d002      	beq.n	d9e8 <ull_conn_rx+0x7dc>
    d9e2:	2b14      	cmp	r3, #20
    d9e4:	f000 8439 	beq.w	e25a <ull_conn_rx+0x104e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
    d9e8:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    d9ec:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
    d9f0:	4291      	cmp	r1, r2
    d9f2:	d002      	beq.n	d9fa <ull_conn_rx+0x7ee>
    d9f4:	2b16      	cmp	r3, #22
    d9f6:	f000 8498 	beq.w	e32a <ull_conn_rx+0x111e>
			switch (llctrl->unknown_rsp.type) {
    d9fa:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d9fc:	bf04      	itt	eq
    d9fe:	2301      	moveq	r3, #1
    da00:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
    da02:	2300      	movs	r3, #0
    da04:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
    da08:	4618      	mov	r0, r3
		break;
    da0a:	e44f      	b.n	d2ac <ull_conn_rx+0xa0>
    da0c:	087830d0 	.word	0x087830d0
    da10:	20001bc0 	.word	0x20001bc0
    da14:	20001c78 	.word	0x20001c78
		if ((conn->llcp_req == conn->llcp_ack) ||
    da18:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    da1c:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    da20:	4299      	cmp	r1, r3
    da22:	f43f ac73 	beq.w	d30c <ull_conn_rx+0x100>
    da26:	f894 10bd 	ldrb.w	r1, [r4, #189]	; 0xbd
    da2a:	2903      	cmp	r1, #3
    da2c:	f47f ac6e 	bne.w	d30c <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    da30:	7f69      	ldrb	r1, [r5, #29]
    da32:	2901      	cmp	r1, #1
    da34:	f47f ac6a 	bne.w	d30c <ull_conn_rx+0x100>
		if (conn->lll.role) {
    da38:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    da3c:	2900      	cmp	r1, #0
    da3e:	f2c0 846a 	blt.w	e316 <ull_conn_rx+0x110a>
			conn->llcp_enc.pause_rx = 0U;
    da42:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
			conn->llcp_ack = conn->llcp_req;
    da46:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			conn->procedure_expire = 0U;
    da4a:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
    da4c:	f022 0203 	bic.w	r2, r2, #3
    da50:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			conn->procedure_expire = 0U;
    da54:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		if (conn->llcp_enc.refresh) {
    da58:	0750      	lsls	r0, r2, #29
    da5a:	f57f ac26 	bpl.w	d2aa <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
    da5e:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    da62:	231a      	movs	r3, #26
			conn->llcp_enc.refresh = 0U;
    da64:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	int nack = 0;
    da68:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    da6a:	712b      	strb	r3, [r5, #4]
    da6c:	e41e      	b.n	d2ac <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
    da6e:	7f6a      	ldrb	r2, [r5, #29]
    da70:	2a01      	cmp	r2, #1
    da72:	f47f ac4b 	bne.w	d30c <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
    da76:	2300      	movs	r3, #0
    da78:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
    da7c:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    da7e:	712a      	strb	r2, [r5, #4]
		break;
    da80:	e414      	b.n	d2ac <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
    da82:	7f6b      	ldrb	r3, [r5, #29]
    da84:	2b03      	cmp	r3, #3
    da86:	f47f ac41 	bne.w	d30c <ull_conn_rx+0x100>
		if (!conn->lll.role) {
    da8a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    da8e:	2b00      	cmp	r3, #0
    da90:	f2c0 82e1 	blt.w	e056 <ull_conn_rx+0xe4a>
			if ((conn->llcp_phy.ack !=
    da94:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
    da98:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
    da9c:	4281      	cmp	r1, r0
    da9e:	d007      	beq.n	dab0 <ull_conn_rx+0x8a4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    daa0:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    daa4:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
    daa8:	3a01      	subs	r2, #1
    daaa:	2a02      	cmp	r2, #2
    daac:	f240 842f 	bls.w	e30e <ull_conn_rx+0x1102>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    dab0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    dab4:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
    dab8:	1a9b      	subs	r3, r3, r2
    daba:	f003 0303 	and.w	r3, r3, #3
    dabe:	2b02      	cmp	r3, #2
    dac0:	f000 83c2 	beq.w	e248 <ull_conn_rx+0x103c>
				     LLCP_ENCRYPTION)) ||
    dac4:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    dac8:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
    dacc:	429a      	cmp	r2, r3
    dace:	f000 83d7 	beq.w	e280 <ull_conn_rx+0x1074>
				nack = reject_ext_ind_send(conn, *rx,
    dad2:	232a      	movs	r3, #42	; 0x2a
    dad4:	2216      	movs	r2, #22
    dad6:	e6eb      	b.n	d8b0 <ull_conn_rx+0x6a4>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
    dad8:	7f6f      	ldrb	r7, [r5, #29]
    dada:	2f01      	cmp	r7, #1
    dadc:	f47f ac16 	bne.w	d30c <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
    dae0:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    dae4:	f013 0602 	ands.w	r6, r3, #2
    dae8:	f040 83aa 	bne.w	e240 <ull_conn_rx+0x1034>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    daec:	48c5      	ldr	r0, [pc, #788]	; (de04 <ull_conn_rx+0xbf8>)
    daee:	f7fa fa41 	bl	7f74 <mem_acquire>
	if (!tx) {
    daf2:	4601      	mov	r1, r0
    daf4:	2800      	cmp	r0, #0
    daf6:	f000 812e 	beq.w	dd56 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
    dafa:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    dafe:	f043 0302 	orr.w	r3, r3, #2
    db02:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    db06:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    db08:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    db0a:	f043 0303 	orr.w	r3, r3, #3
    db0e:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    db10:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
    db12:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    db14:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    db16:	f7fe fd31 	bl	c57c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    db1a:	712f      	strb	r7, [r5, #4]
	return 0;
    db1c:	4630      	mov	r0, r6
    db1e:	f7ff bbc5 	b.w	d2ac <ull_conn_rx+0xa0>
		if (conn->lll.role ||
    db22:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    db26:	2b00      	cmp	r3, #0
    db28:	f6bf ac65 	bge.w	d3f6 <ull_conn_rx+0x1ea>
    db2c:	f7ff bbee 	b.w	d30c <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
    db30:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    db34:	2b00      	cmp	r3, #0
    db36:	f6ff abe9 	blt.w	d30c <ull_conn_rx+0x100>
    db3a:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
    db3e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    db42:	429a      	cmp	r2, r3
    db44:	f43f abe2 	beq.w	d30c <ull_conn_rx+0x100>
    db48:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    db4c:	2b03      	cmp	r3, #3
    db4e:	f47f abdd 	bne.w	d30c <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    db52:	7f6b      	ldrb	r3, [r5, #29]
    db54:	2b01      	cmp	r3, #1
    db56:	f47f abd9 	bne.w	d30c <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    db5a:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    db5e:	f36f 0201 	bfc	r2, #0, #2
    db62:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
    db66:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    db68:	712b      	strb	r3, [r5, #4]
		break;
    db6a:	f7ff bb9f 	b.w	d2ac <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    db6e:	7f6b      	ldrb	r3, [r5, #29]
    db70:	2b01      	cmp	r3, #1
    db72:	f47f abcb 	bne.w	d30c <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
    db76:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    db7a:	2b00      	cmp	r3, #0
    db7c:	f2c0 8106 	blt.w	dd8c <ull_conn_rx+0xb80>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    db80:	48a0      	ldr	r0, [pc, #640]	; (de04 <ull_conn_rx+0xbf8>)
    db82:	f7fa f9f7 	bl	7f74 <mem_acquire>
		if (!tx) {
    db86:	2800      	cmp	r0, #0
    db88:	f000 80e5 	beq.w	dd56 <ull_conn_rx+0xb4a>
	conn->lll.enc_rx = 0;
    db8c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
    db90:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->lll.enc_rx = 0;
    db94:	f023 0318 	bic.w	r3, r3, #24
    db98:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
    db9c:	f042 0201 	orr.w	r2, r2, #1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dba0:	7903      	ldrb	r3, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
    dba2:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dba6:	2201      	movs	r2, #1
    dba8:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbaa:	f043 0303 	orr.w	r3, r3, #3
    dbae:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    dbb0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    dbb4:	220b      	movs	r2, #11
    dbb6:	71c2      	strb	r2, [r0, #7]
	if (
    dbb8:	2b00      	cmp	r3, #0
    dbba:	f000 819f 	beq.w	defc <ull_conn_rx+0xcf0>
	    !conn->llcp_enc.pause_tx &&
    dbbe:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    dbc2:	0791      	lsls	r1, r2, #30
    dbc4:	f100 819a 	bmi.w	defc <ull_conn_rx+0xcf0>
	    !conn->llcp_phy.pause_tx &&
    dbc8:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    dbcc:	07d2      	lsls	r2, r2, #31
    dbce:	f100 8195 	bmi.w	defc <ull_conn_rx+0xcf0>
		if (conn->tx_head == conn->tx_data) {
    dbd2:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    dbd6:	4293      	cmp	r3, r2
    dbd8:	f000 8506 	beq.w	e5e8 <ull_conn_rx+0x13dc>
		} else if (!conn->tx_ctrl) {
    dbdc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    dbe0:	2a00      	cmp	r2, #0
    dbe2:	f000 8545 	beq.w	e670 <ull_conn_rx+0x1464>
	tx->next = conn->tx_ctrl_last->next;
    dbe6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    dbea:	681a      	ldr	r2, [r3, #0]
    dbec:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    dbee:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    dbf0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    dbf4:	6803      	ldr	r3, [r0, #0]
    dbf6:	2b00      	cmp	r3, #0
    dbf8:	f47f ab55 	bne.w	d2a6 <ull_conn_rx+0x9a>
    dbfc:	f7ff bbbf 	b.w	d37e <ull_conn_rx+0x172>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    dc00:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    dc04:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    dc08:	4293      	cmp	r3, r2
    dc0a:	f43f ab4c 	beq.w	d2a6 <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
    dc0e:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    dc10:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
    dc12:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn->procedure_expire = 0U;
    dc16:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    dc1a:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    dc1c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    dc20:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    dc22:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dc24:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    dc26:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dc2a:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    dc2c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
    dc30:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    dc32:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    dc34:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
    dc36:	4618      	mov	r0, r3
    dc38:	f7ff bb38 	b.w	d2ac <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    dc3c:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
    dc40:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
    dc44:	428b      	cmp	r3, r1
    dc46:	f43f ab2e 	beq.w	d2a6 <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    dc4a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    dc4e:	2a23      	cmp	r2, #35	; 0x23
    dc50:	d012      	beq.n	dc78 <ull_conn_rx+0xa6c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    dc52:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
    dc56:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    dc5a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    dc5e:	f36f 0100 	bfc	r1, #0, #1
    dc62:	f884 1197 	strb.w	r1, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
    dc66:	2100      	movs	r1, #0
    dc68:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    dc6c:	f3c3 0102 	ubfx	r1, r3, #0, #3
    dc70:	f361 1306 	bfi	r3, r1, #4, #3
    dc74:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
    dc78:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    dc7c:	0759      	lsls	r1, r3, #29
    dc7e:	f57f ab12 	bpl.w	d2a6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dc82:	231d      	movs	r3, #29
    dc84:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    dc86:	772a      	strb	r2, [r5, #28]
    dc88:	e4c4      	b.n	d614 <ull_conn_rx+0x408>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    dc8a:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    dc8e:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
    dc92:	4293      	cmp	r3, r2
    dc94:	f43f ab07 	beq.w	d2a6 <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
    dc98:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	db04      	blt.n	dcaa <ull_conn_rx+0xa9e>
    dca0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    dca4:	2b1a      	cmp	r3, #26
    dca6:	f000 8510 	beq.w	e6ca <ull_conn_rx+0x14be>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    dcaa:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    dcae:	f003 010f 	and.w	r1, r3, #15
    dcb2:	2904      	cmp	r1, #4
    dcb4:	d106      	bne.n	dcc4 <ull_conn_rx+0xab8>
	conn_upd_curr = NULL;
    dcb6:	4954      	ldr	r1, [pc, #336]	; (de08 <ull_conn_rx+0xbfc>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dcb8:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
    dcbc:	2200      	movs	r2, #0
    dcbe:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
    dcc0:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	if (!conn->llcp_conn_param.cmd) {
    dcc4:	06da      	lsls	r2, r3, #27
    dcc6:	f57f aaee 	bpl.w	d2a6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dcca:	2319      	movs	r3, #25
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    dccc:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dcd0:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    dcd2:	f040 83ac 	bne.w	e42e <ull_conn_rx+0x1222>
	cu->status = rej_ext_ind->error_code;
    dcd6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    dcda:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
    dcdc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
    dcde:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	cu->latency = lll->latency;
    dce2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    dce4:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
    dce6:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
    dce8:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
    dcec:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
    dcf0:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
    dcf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    dcf6:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
    dcfa:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
    dcfc:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
    dcfe:	f7ff bad5 	b.w	d2ac <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
    dd02:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    dd06:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    dd0a:	428b      	cmp	r3, r1
    dd0c:	f43f aacb 	beq.w	d2a6 <ull_conn_rx+0x9a>
    dd10:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    dd14:	2b03      	cmp	r3, #3
    dd16:	f47f aac6 	bne.w	d2a6 <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
    dd1a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
    dd1e:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
    dd22:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    dd24:	f022 0203 	bic.w	r2, r2, #3
    dd28:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
    dd2c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    dd30:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    dd34:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    dd38:	210d      	movs	r1, #13
    dd3a:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
    dd3c:	4618      	mov	r0, r3
    dd3e:	f7ff bab5 	b.w	d2ac <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
    dd42:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    dd44:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    dd48:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    dd4c:	2a00      	cmp	r2, #0
    dd4e:	f47f aaaa 	bne.w	d2a6 <ull_conn_rx+0x9a>
    dd52:	f7ff bb14 	b.w	d37e <ull_conn_rx+0x172>
		*err = -ENOBUFS;
    dd56:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dd5a:	f7ff baa7 	b.w	d2ac <ull_conn_rx+0xa0>
			conn->tx_data = conn->tx_data->next;
    dd5e:	6813      	ldr	r3, [r2, #0]
    dd60:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    dd64:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    dd68:	2b00      	cmp	r3, #0
    dd6a:	f47f aafe 	bne.w	d36a <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
    dd6e:	6813      	ldr	r3, [r2, #0]
    dd70:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    dd72:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    dd74:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    dd76:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    dd7a:	2a00      	cmp	r2, #0
    dd7c:	f47f aa93 	bne.w	d2a6 <ull_conn_rx+0x9a>
    dd80:	f7ff bafd 	b.w	d37e <ull_conn_rx+0x172>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    dd84:	7f6b      	ldrb	r3, [r5, #29]
    dd86:	2b01      	cmp	r3, #1
    dd88:	f47f aac0 	bne.w	d30c <ull_conn_rx+0x100>
		conn->lll.enc_tx = 0;
    dd8c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    dd90:	f36f 1304 	bfc	r3, #4, #1
    dd94:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
    dd98:	f7ff ba85 	b.w	d2a6 <ull_conn_rx+0x9a>
		if (!conn->lll.role) {
    dd9c:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
    dda0:	f894 615c 	ldrb.w	r6, [r4, #348]	; 0x15c
					conn->llcp_conn_param.ack) &&
    dda4:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
		if (!conn->lll.role) {
    dda8:	2f00      	cmp	r7, #0
    ddaa:	f2c0 80b2 	blt.w	df12 <ull_conn_rx+0xd06>
			if ((conn->llcp_conn_param.req !=
    ddae:	42b1      	cmp	r1, r6
    ddb0:	d00a      	beq.n	ddc8 <ull_conn_rx+0xbbc>
			    ((conn->llcp_conn_param.state ==
    ddb2:	f894 615e 	ldrb.w	r6, [r4, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
    ddb6:	f016 0f0b 	tst.w	r6, #11
    ddba:	f000 824b 	beq.w	e254 <ull_conn_rx+0x1048>
			      LLCP_CPR_STATE_RSP_WAIT) ||
    ddbe:	f006 060f 	and.w	r6, r6, #15
    ddc2:	2e06      	cmp	r6, #6
    ddc4:	f000 8246 	beq.w	e254 <ull_conn_rx+0x1048>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    ddc8:	f894 60bb 	ldrb.w	r6, [r4, #187]	; 0xbb
    ddcc:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
    ddd0:	1bf6      	subs	r6, r6, r7
    ddd2:	f006 0603 	and.w	r6, r6, #3
    ddd6:	2e02      	cmp	r6, #2
    ddd8:	f000 8320 	beq.w	e41c <ull_conn_rx+0x1210>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    dddc:	f894 7194 	ldrb.w	r7, [r4, #404]	; 0x194
    dde0:	f894 6195 	ldrb.w	r6, [r4, #405]	; 0x195
    dde4:	42b7      	cmp	r7, r6
    dde6:	f000 835b 	beq.w	e4a0 <ull_conn_rx+0x1294>
				nack = reject_ext_ind_send(conn, *rx,
    ddea:	232a      	movs	r3, #42	; 0x2a
    ddec:	e55f      	b.n	d8ae <ull_conn_rx+0x6a2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ddee:	7913      	ldrb	r3, [r2, #4]
    ddf0:	f003 0303 	and.w	r3, r3, #3
    ddf4:	2b03      	cmp	r3, #3
    ddf6:	f000 82bb 	beq.w	e370 <ull_conn_rx+0x1164>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    ddfa:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
    ddfe:	f7ff bab6 	b.w	d36e <ull_conn_rx+0x162>
    de02:	bf00      	nop
    de04:	20001c78 	.word	0x20001c78
    de08:	20001bc0 	.word	0x20001bc0
	if (conn->common.txn_lock) {
    de0c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    de10:	079b      	lsls	r3, r3, #30
    de12:	f53f aa48 	bmi.w	d2a6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    de16:	48d1      	ldr	r0, [pc, #836]	; (e15c <ull_conn_rx+0xf50>)
    de18:	f7fa f8ac 	bl	7f74 <mem_acquire>
	if (!tx) {
    de1c:	4603      	mov	r3, r0
    de1e:	2800      	cmp	r0, #0
    de20:	d099      	beq.n	dd56 <ull_conn_rx+0xb4a>
	conn->common.txn_lock = 1U;
    de22:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    de26:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	eff_rx_octets = conn->lll.max_rx_octets;
    de2a:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
    de2e:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
    de32:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
    de36:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	conn->common.txn_lock = 1U;
    de3a:	f042 0202 	orr.w	r2, r2, #2
    de3e:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    de42:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
    de46:	428a      	cmp	r2, r1
    de48:	f040 8431 	bne.w	e6ae <ull_conn_rx+0x14a2>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    de4c:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    de4e:	291a      	cmp	r1, #26
    de50:	f240 8269 	bls.w	e326 <ull_conn_rx+0x111a>
			eff_tx_octets = MIN(max_rx_octets,
    de54:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    de58:	4281      	cmp	r1, r0
    de5a:	bf28      	it	cs
    de5c:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    de5e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    de60:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    de64:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
    de66:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
    de68:	bf34      	ite	cc
    de6a:	46c6      	movcc	lr, r8
    de6c:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    de70:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
    de74:	bf34      	ite	cc
    de76:	4658      	movcc	r0, fp
    de78:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    de7c:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    de80:	bf34      	ite	cc
    de82:	46d4      	movcc	ip, sl
    de84:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    de88:	45c6      	cmp	lr, r8
    de8a:	f000 8287 	beq.w	e39c <ull_conn_rx+0x1190>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    de8e:	3a01      	subs	r2, #1
    de90:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
    de94:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
			conn->llcp_length.tx_octets = eff_tx_octets;
    de98:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
    de9c:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
    dea0:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			if (tx) {
    dea4:	2b00      	cmp	r3, #0
    dea6:	f000 82ae 	beq.w	e406 <ull_conn_rx+0x11fa>
				conn->llcp_length.state =
    deaa:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    deae:	2505      	movs	r5, #5
    deb0:	f365 0202 	bfi	r2, r5, #0, #3
    deb4:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			link->mem = conn->llcp_rx;
    deb8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    debc:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
    debe:	6832      	ldr	r2, [r6, #0]
    dec0:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
    dec2:	6832      	ldr	r2, [r6, #0]
    dec4:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
			*rx = NULL;
    dec8:	2200      	movs	r2, #0
    deca:	6032      	str	r2, [r6, #0]
	if (tx) {
    decc:	2b00      	cmp	r3, #0
    dece:	f43f a9ec 	beq.w	d2aa <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ded2:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    ded4:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ded6:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
    deda:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    dedc:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    dede:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dee0:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    dee2:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    dee4:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    dee8:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
    deec:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    deee:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    def0:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    def2:	f7fe fb43 	bl	c57c <ctrl_tx_sec_enqueue>
	return 0;
    def6:	2000      	movs	r0, #0
}
    def8:	f7ff b9d8 	b.w	d2ac <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
    defc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    df00:	2a00      	cmp	r2, #0
    df02:	f47f ae70 	bne.w	dbe6 <ull_conn_rx+0x9da>
			tx->next = conn->tx_head;
    df06:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    df08:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    df0c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    df10:	e670      	b.n	dbf4 <ull_conn_rx+0x9e8>
		} else if ((conn->llcp_conn_param.req ==
    df12:	42b1      	cmp	r1, r6
    df14:	d005      	beq.n	df22 <ull_conn_rx+0xd16>
			    conn->llcp_conn_param.ack) ||
    df16:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
    df1a:	f012 0f0b 	tst.w	r2, #11
    df1e:	f47f a9c2 	bne.w	d2a6 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    df22:	f8b5 a020 	ldrh.w	sl, [r5, #32]
    df26:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    df2a:	2a05      	cmp	r2, #5
    df2c:	f240 8091 	bls.w	e052 <ull_conn_rx+0xe46>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    df30:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
    df34:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    df38:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
    df3c:	f200 8089 	bhi.w	e052 <ull_conn_rx+0xe46>
			    (interval_max > 3200) ||
    df40:	42b2      	cmp	r2, r6
    df42:	f200 8086 	bhi.w	e052 <ull_conn_rx+0xe46>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    df46:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
    df4a:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
    df4e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    df52:	d27e      	bcs.n	e052 <ull_conn_rx+0xe46>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    df54:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
    df58:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
    df5c:	f1a2 070a 	sub.w	r7, r2, #10
    df60:	f640 4b76 	movw	fp, #3190	; 0xc76
    df64:	b2bf      	uxth	r7, r7
    df66:	455f      	cmp	r7, fp
    df68:	d873      	bhi.n	e052 <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
    df6a:	f10c 0701 	add.w	r7, ip, #1
    df6e:	b2bf      	uxth	r7, r7
    df70:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
    df74:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
    df78:	d26b      	bcs.n	e052 <ull_conn_rx+0xe46>
			     ((latency + 1) * interval_max)) ||
    df7a:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    df7e:	455e      	cmp	r6, fp
    df80:	d367      	bcc.n	e052 <ull_conn_rx+0xe46>
			conn->llcp_conn_param.interval_min = interval_min;
    df82:	f8a4 a160 	strh.w	sl, [r4, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
    df86:	f8a4 9162 	strh.w	r9, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
    df8a:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
    df8e:	f8a4 e166 	strh.w	lr, [r4, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
    df92:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    df96:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
    df9a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    df9e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dfa2:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
    dfa6:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
    dfaa:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    dfae:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    dfb2:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
    dfb6:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
    dfba:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    dfbe:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    dfc2:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
    dfc6:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
    dfca:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    dfce:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    dfd2:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
    dfd6:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
    dfda:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    dfde:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    dfe2:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
    dfe6:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
    dfea:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    dfee:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    dff2:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
    dff6:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    dffa:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
    dffe:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
    e002:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
			     lll->interval) ||
    e006:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
    e008:	42be      	cmp	r6, r7
    e00a:	f000 833a 	beq.w	e682 <ull_conn_rx+0x1476>
				conn->llcp_conn_param.state =
    e00e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
    e012:	2503      	movs	r5, #3
    e014:	f365 0203 	bfi	r2, r5, #0, #4
    e018:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
    e01c:	3901      	subs	r1, #1
    e01e:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
    e022:	2b00      	cmp	r3, #0
    e024:	f47f a941 	bne.w	d2aa <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
    e028:	6004      	str	r4, [r0, #0]
	int nack = 0;
    e02a:	4618      	mov	r0, r3
    e02c:	f7ff b93e 	b.w	d2ac <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    e030:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    e034:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
    e038:	4293      	cmp	r3, r2
    e03a:	f43f ade1 	beq.w	dc00 <ull_conn_rx+0x9f4>
		rej_ext_ind->error_code = rej_ind->error_code;
    e03e:	f895 3020 	ldrb.w	r3, [r5, #32]
    e042:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
    e046:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    e04a:	2900      	cmp	r1, #0
    e04c:	f6bf ae2a 	bge.w	dca4 <ull_conn_rx+0xa98>
    e050:	e62b      	b.n	dcaa <ull_conn_rx+0xa9e>
				nack = reject_ext_ind_send(conn, *rx,
    e052:	231e      	movs	r3, #30
    e054:	e42b      	b.n	d8ae <ull_conn_rx+0x6a2>
	if (conn->common.txn_lock) {
    e056:	f894 70ba 	ldrb.w	r7, [r4, #186]	; 0xba
    e05a:	f017 0702 	ands.w	r7, r7, #2
    e05e:	f47f a922 	bne.w	d2a6 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e062:	483e      	ldr	r0, [pc, #248]	; (e15c <ull_conn_rx+0xf50>)
    e064:	f7f9 ff86 	bl	7f74 <mem_acquire>
	if (!tx) {
    e068:	4602      	mov	r2, r0
    e06a:	2800      	cmp	r0, #0
    e06c:	f43f ae73 	beq.w	dd56 <ull_conn_rx+0xb4a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e070:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->common.txn_lock = 1U;
    e074:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	if (conn->llcp_phy.ack ==
    e078:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e07c:	2002      	movs	r0, #2
    e07e:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
    e082:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e086:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
    e08a:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
	conn->common.txn_lock = 1U;
    e08e:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
			conn->phy_pref_tx;
    e092:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	if (conn->llcp_phy.ack ==
    e096:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
    e098:	f3c3 0602 	ubfx	r6, r3, #0, #3
    e09c:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
    e0a0:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
    e0a4:	d114      	bne.n	e0d0 <ull_conn_rx+0xec4>
		conn->llcp_phy.ack--;
    e0a6:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
    e0a8:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		conn->llcp_phy.ack--;
    e0ac:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.tx =
    e0b0:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
		conn->llcp_phy.cmd = 0U;
    e0b4:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
    e0b8:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
    e0bc:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
    e0c0:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->procedure_expire =
    e0c4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
		conn->llcp_phy.rx =
    e0c8:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		conn->procedure_expire =
    e0cc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_phy.rx &= p->tx_phys;
    e0d0:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->llcp_phy.tx &= p->rx_phys;
    e0d4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
    e0d8:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
    e0dc:	f3c1 0c82 	ubfx	ip, r1, #2, #3
    e0e0:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
    e0e4:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    e0e8:	009b      	lsls	r3, r3, #2
    e0ea:	f001 0103 	and.w	r1, r1, #3
    e0ee:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    e0f2:	430b      	orrs	r3, r1
    e0f4:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e0f8:	2303      	movs	r3, #3
    e0fa:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e0fc:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e0fe:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
    e100:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e104:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e106:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e108:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e10c:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
    e10e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e112:	7110      	strb	r0, [r2, #4]
	if (
    e114:	2b00      	cmp	r3, #0
    e116:	f000 80aa 	beq.w	e26e <ull_conn_rx+0x1062>
	    !conn->llcp_enc.pause_tx &&
    e11a:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    e11e:	0787      	lsls	r7, r0, #30
    e120:	f100 80a5 	bmi.w	e26e <ull_conn_rx+0x1062>
	    !conn->llcp_phy.pause_tx &&
    e124:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    e128:	07c6      	lsls	r6, r0, #31
    e12a:	f100 80a0 	bmi.w	e26e <ull_conn_rx+0x1062>
		if (conn->tx_head == conn->tx_data) {
    e12e:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    e132:	4283      	cmp	r3, r0
    e134:	f000 824c 	beq.w	e5d0 <ull_conn_rx+0x13c4>
		} else if (!conn->tx_ctrl) {
    e138:	2900      	cmp	r1, #0
    e13a:	f000 8291 	beq.w	e660 <ull_conn_rx+0x1454>
	tx->next = conn->tx_ctrl_last->next;
    e13e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    e142:	6819      	ldr	r1, [r3, #0]
    e144:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    e146:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    e148:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    e14c:	6813      	ldr	r3, [r2, #0]
    e14e:	2b00      	cmp	r3, #0
    e150:	f47f a8a9 	bne.w	d2a6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
    e154:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e158:	f7ff b8a5 	b.w	d2a6 <ull_conn_rx+0x9a>
    e15c:	20001c78 	.word	0x20001c78
			conn->llcp_conn_param.disabled = 1U;
    e160:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    e164:	f043 0320 	orr.w	r3, r3, #32
    e168:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			if (!conn->lll.role) {
    e16c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    e170:	2b00      	cmp	r3, #0
    e172:	f2c0 8139 	blt.w	e3e8 <ull_conn_rx+0x11dc>
				LL_ASSERT(conn->llcp_cu.req ==
    e176:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    e17a:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    e17e:	429a      	cmp	r2, r3
    e180:	d00e      	beq.n	e1a0 <ull_conn_rx+0xf94>
    e182:	4ac1      	ldr	r2, [pc, #772]	; (e488 <ull_conn_rx+0x127c>)
    e184:	49c1      	ldr	r1, [pc, #772]	; (e48c <ull_conn_rx+0x1280>)
    e186:	48c2      	ldr	r0, [pc, #776]	; (e490 <ull_conn_rx+0x1284>)
    e188:	f641 43cb 	movw	r3, #7371	; 0x1ccb
    e18c:	f008 f8b1 	bl	162f2 <assert_print>
    e190:	4040      	eors	r0, r0
    e192:	f380 8811 	msr	BASEPRI, r0
    e196:	f04f 0003 	mov.w	r0, #3
    e19a:	df02      	svc	2
    e19c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_conn_param.state =
    e1a0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
    e1a4:	2106      	movs	r1, #6
    e1a6:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
    e1aa:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
    e1ac:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
    e1ae:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
    e1b2:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e1b6:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
    e1b8:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    e1bc:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e1c0:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
    e1c4:	00db      	lsls	r3, r3, #3
    e1c6:	f022 020f 	bic.w	r2, r2, #15
    e1ca:	430b      	orrs	r3, r1
    e1cc:	4313      	orrs	r3, r2
    e1ce:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_cu.latency =
    e1d2:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
				conn->llcp_cu.interval =
    e1d6:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
				conn->llcp_cu.latency =
    e1da:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
				conn->llcp_cu.win_offset_us = 0U;
    e1de:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
    e1e0:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
				conn->llcp_cu.interval =
    e1e4:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
				conn->llcp_cu.timeout =
    e1e8:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				conn->llcp_cu.win_offset_us = 0U;
    e1ec:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e1f0:	7129      	strb	r1, [r5, #4]
				break;
    e1f2:	f7ff b85b 	b.w	d2ac <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e1f6:	48a7      	ldr	r0, [pc, #668]	; (e494 <ull_conn_rx+0x1288>)
    e1f8:	f7f9 febc 	bl	7f74 <mem_acquire>
		if (!tx) {
    e1fc:	4601      	mov	r1, r0
    e1fe:	2800      	cmp	r0, #0
    e200:	f43f ada9 	beq.w	dd56 <ull_conn_rx+0xb4a>
		conn->llcp_version.tx = 1U;
    e204:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    e208:	f043 0301 	orr.w	r3, r3, #1
    e20c:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e210:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
    e212:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e214:	220c      	movs	r2, #12
    e216:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    e218:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e21a:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    e21e:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e222:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    e224:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
    e226:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    e22a:	2205      	movs	r2, #5
		v->sub_version_number =
    e22c:	72c3      	strb	r3, [r0, #11]
    e22e:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    e230:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    e232:	4620      	mov	r0, r4
    e234:	f7fe f9a2 	bl	c57c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e238:	2301      	movs	r3, #1
    e23a:	712b      	strb	r3, [r5, #4]
    e23c:	f7ff ba09 	b.w	d652 <ull_conn_rx+0x446>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e240:	712f      	strb	r7, [r5, #4]
		*err = 0U;
    e242:	2000      	movs	r0, #0
    e244:	f7ff b832 	b.w	d2ac <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
    e248:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    e24c:	2b03      	cmp	r3, #3
    e24e:	f47f ac40 	bne.w	dad2 <ull_conn_rx+0x8c6>
    e252:	e437      	b.n	dac4 <ull_conn_rx+0x8b8>
				nack = reject_ext_ind_send(conn, *rx,
    e254:	2323      	movs	r3, #35	; 0x23
    e256:	f7ff bb2a 	b.w	d8ae <ull_conn_rx+0x6a2>
			conn->llcp_length.disabled = 1U;
    e25a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
    e25e:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
    e262:	f043 0308 	orr.w	r3, r3, #8
    e266:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
    e26a:	f7ff bbca 	b.w	da02 <ull_conn_rx+0x7f6>
		if (!conn->tx_ctrl) {
    e26e:	2900      	cmp	r1, #0
    e270:	f47f af65 	bne.w	e13e <ull_conn_rx+0xf32>
			tx->next = conn->tx_head;
    e274:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    e276:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    e27a:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    e27e:	e765      	b.n	e14c <ull_conn_rx+0xf40>
				conn->llcp_phy.state =
    e280:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
    e284:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
    e286:	f043 0303 	orr.w	r3, r3, #3
    e28a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
    e28e:	d111      	bne.n	e2b4 <ull_conn_rx+0x10a8>
					conn->llcp_phy.tx =
    e290:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
						conn->phy_pref_rx;
    e294:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
					conn->llcp_phy.ack--;
    e298:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
    e29a:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
    e29e:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.tx =
    e2a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    e2a6:	f022 0204 	bic.w	r2, r2, #4
    e2aa:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    e2ae:	4313      	orrs	r3, r2
    e2b0:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
    e2b4:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    e2b8:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
    e2bc:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
    e2c0:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    e2c4:	f003 0203 	and.w	r2, r3, #3
    e2c8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    e2cc:	4003      	ands	r3, r0
    e2ce:	009b      	lsls	r3, r3, #2
    e2d0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    e2d4:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    e2d6:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    e2da:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    e2de:	d002      	beq.n	e2e6 <ull_conn_rx+0x10da>
    e2e0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    e2e4:	d105      	bne.n	e2f2 <ull_conn_rx+0x10e6>
					conn->llcp_phy.tx = 0;
    e2e6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    e2ea:	f003 0303 	and.w	r3, r3, #3
    e2ee:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
    e2f2:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e2f6:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
    e2f8:	4313      	orrs	r3, r2
    e2fa:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	int nack = 0;
    e2fe:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e300:	712a      	strb	r2, [r5, #4]
    e302:	f7fe bfd3 	b.w	d2ac <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
    e306:	231e      	movs	r3, #30
    e308:	2210      	movs	r2, #16
    e30a:	f7ff bad1 	b.w	d8b0 <ull_conn_rx+0x6a4>
				nack = reject_ext_ind_send(conn, *rx,
    e30e:	2323      	movs	r3, #35	; 0x23
    e310:	2216      	movs	r2, #22
    e312:	f7ff bacd 	b.w	d8b0 <ull_conn_rx+0x6a4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    e316:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    e31a:	f36f 0301 	bfc	r3, #0, #2
    e31e:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    e322:	f7ff bb99 	b.w	da58 <ull_conn_rx+0x84c>
    e326:	4649      	mov	r1, r9
    e328:	e599      	b.n	de5e <ull_conn_rx+0xc52>
			lll->phy_tx_time = lll->phy_tx;
    e32a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
    e32e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
    e332:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
    e336:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    e33a:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
    e33c:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    e340:	f361 1206 	bfi	r2, r1, #4, #3
    e344:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
    e348:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
    e34c:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
    e350:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e354:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
    e356:	d078      	beq.n	e44a <ull_conn_rx+0x123e>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e358:	221d      	movs	r2, #29
    e35a:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
    e35c:	2300      	movs	r3, #0
    e35e:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
    e360:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
    e362:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    e366:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e36a:	77ab      	strb	r3, [r5, #30]
    e36c:	f7ff bb49 	b.w	da02 <ull_conn_rx+0x7f6>
	    ((pdu_data_tx->llctrl.opcode !=
    e370:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e372:	2b03      	cmp	r3, #3
    e374:	f43f acfb 	beq.w	dd6e <ull_conn_rx+0xb62>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e378:	2b0a      	cmp	r3, #10
    e37a:	f47f ad3e 	bne.w	ddfa <ull_conn_rx+0xbee>
    e37e:	e4f6      	b.n	dd6e <ull_conn_rx+0xb62>
	conn->llcp_enc.pause_rx = 0U;
    e380:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
    e384:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
    e388:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    e38a:	f021 0103 	bic.w	r1, r1, #3
    e38e:	f884 113e 	strb.w	r1, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
    e392:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
    e396:	4618      	mov	r0, r3
    e398:	f7fe bf88 	b.w	d2ac <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
    e39c:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    e39e:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
    e3a0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    e3a4:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    e3a8:	f000 8108 	beq.w	e5bc <ull_conn_rx+0x13b0>
			conn->lll.max_rx_time = eff_rx_time;
    e3ac:	f8a4 c044 	strh.w	ip, [r4, #68]	; 0x44
			if (tx) {
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	f000 80ff 	beq.w	e5b4 <ull_conn_rx+0x13a8>
					(conn->llcp_length.req - 1);
    e3b6:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
    e3b8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				conn->llcp_length.state =
    e3bc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
    e3c0:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
				conn->llcp_length.state =
    e3c4:	2603      	movs	r6, #3
    e3c6:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
    e3ca:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
    e3ce:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
    e3d2:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_length.state =
    e3d6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    e3da:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    e3de:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    e3e0:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    e3e4:	84e8      	strh	r0, [r5, #38]	; 0x26
    e3e6:	e571      	b.n	decc <ull_conn_rx+0xcc0>
	conn_upd_curr = NULL;
    e3e8:	4b2b      	ldr	r3, [pc, #172]	; (e498 <ull_conn_rx+0x128c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e3ea:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
    e3ee:	2200      	movs	r2, #0
    e3f0:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
    e3f2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    e3f6:	f013 0310 	ands.w	r3, r3, #16
    e3fa:	d12a      	bne.n	e452 <ull_conn_rx+0x1246>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e3fc:	2201      	movs	r2, #1
    e3fe:	712a      	strb	r2, [r5, #4]
	int nack = 0;
    e400:	4618      	mov	r0, r3
				break;
    e402:	f7fe bf53 	b.w	d2ac <ull_conn_rx+0xa0>
				conn->llcp_length.state =
    e406:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->lll.max_tx_octets = eff_tx_octets;
    e40a:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->llcp_length.state =
    e40c:	2504      	movs	r5, #4
    e40e:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
    e412:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
				conn->llcp_length.state =
    e416:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
    e41a:	e54d      	b.n	deb8 <ull_conn_rx+0xcac>
				      0x03) == 0x02) &&
    e41c:	f894 60bd 	ldrb.w	r6, [r4, #189]	; 0xbd
    e420:	2e03      	cmp	r6, #3
    e422:	f47f ace2 	bne.w	ddea <ull_conn_rx+0xbde>
    e426:	e4d9      	b.n	dddc <ull_conn_rx+0xbd0>
	struct node_tx *tx = NULL;
    e428:	2300      	movs	r3, #0
    e42a:	f7ff b82d 	b.w	d488 <ull_conn_rx+0x27c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    e42e:	4a16      	ldr	r2, [pc, #88]	; (e488 <ull_conn_rx+0x127c>)
    e430:	491a      	ldr	r1, [pc, #104]	; (e49c <ull_conn_rx+0x1290>)
    e432:	4817      	ldr	r0, [pc, #92]	; (e490 <ull_conn_rx+0x1284>)
    e434:	f241 538a 	movw	r3, #5514	; 0x158a
    e438:	f007 ff5b 	bl	162f2 <assert_print>
    e43c:	4040      	eors	r0, r0
    e43e:	f380 8811 	msr	BASEPRI, r0
    e442:	f04f 0003 	mov.w	r0, #3
    e446:	df02      	svc	2
    e448:	e445      	b.n	dcd6 <ull_conn_rx+0xaca>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e44a:	2201      	movs	r2, #1
    e44c:	711a      	strb	r2, [r3, #4]
    e44e:	f7ff bad8 	b.w	da02 <ull_conn_rx+0x7f6>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e452:	2319      	movs	r3, #25
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    e454:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e458:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    e45a:	f040 80d4 	bne.w	e606 <ull_conn_rx+0x13fa>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e45e:	231a      	movs	r3, #26
    e460:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
    e462:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
    e464:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			cu->latency = lll->latency;
    e468:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
    e46a:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
    e46c:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
    e470:	227d      	movs	r2, #125	; 0x7d
    e472:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
    e476:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
    e478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e47c:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    e480:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
    e482:	f7ff babe 	b.w	da02 <ull_conn_rx+0x7f6>
    e486:	bf00      	nop
    e488:	0001a924 	.word	0x0001a924
    e48c:	0001aa18 	.word	0x0001aa18
    e490:	0001a580 	.word	0x0001a580
    e494:	20001c78 	.word	0x20001c78
    e498:	20001bc0 	.word	0x20001bc0
    e49c:	0001a6d0 	.word	0x0001a6d0
				uint16_t interval_min =
    e4a0:	f8b5 9020 	ldrh.w	r9, [r5, #32]
    e4a4:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    e4a8:	2e05      	cmp	r6, #5
    e4aa:	f67f add2 	bls.w	e052 <ull_conn_rx+0xe46>
				uint16_t interval_max =
    e4ae:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
    e4b2:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    e4b6:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
    e4ba:	f63f adca 	bhi.w	e052 <ull_conn_rx+0xe46>
				    (interval_max > 3200) ||
    e4be:	4576      	cmp	r6, lr
    e4c0:	f63f adc7 	bhi.w	e052 <ull_conn_rx+0xe46>
				uint16_t latency =
    e4c4:	8cae      	ldrh	r6, [r5, #36]	; 0x24
    e4c6:	f8ad 6006 	strh.w	r6, [sp, #6]
    e4ca:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
    e4cc:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    e4d0:	f4bf adbf 	bcs.w	e052 <ull_conn_rx+0xe46>
				uint16_t timeout =
    e4d4:	8cef      	ldrh	r7, [r5, #38]	; 0x26
    e4d6:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
    e4da:	f1ac 0a0a 	sub.w	sl, ip, #10
    e4de:	f640 4b76 	movw	fp, #3190	; 0xc76
    e4e2:	fa1f fa8a 	uxth.w	sl, sl
    e4e6:	45da      	cmp	sl, fp
    e4e8:	f63f adb3 	bhi.w	e052 <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
    e4ec:	f106 0a01 	add.w	sl, r6, #1
    e4f0:	fa1f fa8a 	uxth.w	sl, sl
    e4f4:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
    e4f8:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
    e4fc:	f4bf ada9 	bcs.w	e052 <ull_conn_rx+0xe46>
				     ((latency + 1) * interval_max)) ||
    e500:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    e504:	45de      	cmp	lr, fp
    e506:	f4ff ada4 	bcc.w	e052 <ull_conn_rx+0xe46>
				conn->llcp_conn_param.interval_max =
    e50a:	f8a4 8162 	strh.w	r8, [r4, #354]	; 0x162
				conn->llcp_conn_param.latency =	latency;
    e50e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
    e512:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
				conn->llcp_conn_param.latency =	latency;
    e516:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
				conn->llcp_conn_param.timeout =	timeout;
    e51a:	f8a4 7166 	strh.w	r7, [r4, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
    e51e:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    e522:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
    e526:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    e52a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    e52e:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
    e532:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
    e536:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    e53a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
    e53e:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
    e542:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
    e546:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    e54a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
    e54e:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
    e552:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
    e556:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    e55a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
    e55e:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
    e562:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
    e566:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    e56a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
    e56e:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
    e572:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
    e576:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    e57a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
    e57e:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
    e582:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    e586:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
    e58a:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
    e58e:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
				     lll->interval) ||
    e592:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
    e594:	45be      	cmp	lr, r7
    e596:	d044      	beq.n	e622 <ull_conn_rx+0x1416>
					if (conn->llcp_enc.pause_tx) {
    e598:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
    e59c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
    e5a0:	f43f ad37 	beq.w	e012 <ull_conn_rx+0xe06>
						conn->llcp_conn_param.state =
    e5a4:	2602      	movs	r6, #2
    e5a6:	f366 0203 	bfi	r2, r6, #0, #4
    e5aa:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
						(*rx)->hdr.type =
    e5ae:	2201      	movs	r2, #1
    e5b0:	712a      	strb	r2, [r5, #4]
    e5b2:	e533      	b.n	e01c <ull_conn_rx+0xe10>
				conn->lll.max_tx_octets = eff_tx_octets;
    e5b4:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
    e5b6:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
    e5ba:	e70e      	b.n	e3da <ull_conn_rx+0x11ce>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    e5bc:	4558      	cmp	r0, fp
    e5be:	f47f aef5 	bne.w	e3ac <ull_conn_rx+0x11a0>
			    eff_rx_time == conn->lll.max_rx_time &&
    e5c2:	45d4      	cmp	ip, sl
    e5c4:	f47f aef2 	bne.w	e3ac <ull_conn_rx+0x11a0>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e5c8:	6832      	ldr	r2, [r6, #0]
    e5ca:	2501      	movs	r5, #1
    e5cc:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
    e5ce:	e47d      	b.n	decc <ull_conn_rx+0xcc0>
			conn->tx_data = conn->tx_data->next;
    e5d0:	6818      	ldr	r0, [r3, #0]
    e5d2:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    e5d6:	2900      	cmp	r1, #0
    e5d8:	f47f adb1 	bne.w	e13e <ull_conn_rx+0xf32>
			tx->next = conn->tx_head->next;
    e5dc:	6819      	ldr	r1, [r3, #0]
    e5de:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    e5e0:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    e5e2:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    e5e6:	e5b1      	b.n	e14c <ull_conn_rx+0xf40>
			conn->tx_data = conn->tx_data->next;
    e5e8:	681a      	ldr	r2, [r3, #0]
    e5ea:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    e5ee:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    e5f2:	2a00      	cmp	r2, #0
    e5f4:	f47f aaf7 	bne.w	dbe6 <ull_conn_rx+0x9da>
			tx->next = conn->tx_head->next;
    e5f8:	681a      	ldr	r2, [r3, #0]
    e5fa:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    e5fc:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    e5fe:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    e602:	f7ff baf7 	b.w	dbf4 <ull_conn_rx+0x9e8>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    e606:	4a53      	ldr	r2, [pc, #332]	; (e754 <ull_conn_rx+0x1548>)
    e608:	4953      	ldr	r1, [pc, #332]	; (e758 <ull_conn_rx+0x154c>)
    e60a:	4854      	ldr	r0, [pc, #336]	; (e75c <ull_conn_rx+0x1550>)
    e60c:	f641 43f8 	movw	r3, #7416	; 0x1cf8
    e610:	f007 fe6f 	bl	162f2 <assert_print>
    e614:	4040      	eors	r0, r0
    e616:	f380 8811 	msr	BASEPRI, r0
    e61a:	f04f 0003 	mov.w	r0, #3
    e61e:	df02      	svc	2
    e620:	e71d      	b.n	e45e <ull_conn_rx+0x1252>
				     lll->interval) ||
    e622:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
    e626:	45b6      	cmp	lr, r6
    e628:	d1b6      	bne.n	e598 <ull_conn_rx+0x138c>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e62a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    e62e:	fb06 f707 	mul.w	r7, r6, r7
    e632:	f242 7610 	movw	r6, #10000	; 0x2710
    e636:	fb06 760c 	mla	r6, r6, ip, r7
    e63a:	3e01      	subs	r6, #1
    e63c:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
    e640:	f8b4 70a6 	ldrh.w	r7, [r4, #166]	; 0xa6
    e644:	b2b6      	uxth	r6, r6
    e646:	42b7      	cmp	r7, r6
    e648:	d1a6      	bne.n	e598 <ull_conn_rx+0x138c>
				conn->llcp_conn_param.state =
    e64a:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
    e64e:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    e652:	f042 0201 	orr.w	r2, r2, #1
    e656:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e65a:	2201      	movs	r2, #1
    e65c:	712a      	strb	r2, [r5, #4]
    e65e:	e4dd      	b.n	e01c <ull_conn_rx+0xe10>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e660:	7919      	ldrb	r1, [r3, #4]
    e662:	f001 0103 	and.w	r1, r1, #3
    e666:	2903      	cmp	r1, #3
    e668:	d029      	beq.n	e6be <ull_conn_rx+0x14b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e66a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    e66e:	e566      	b.n	e13e <ull_conn_rx+0xf32>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e670:	791a      	ldrb	r2, [r3, #4]
    e672:	f002 0203 	and.w	r2, r2, #3
    e676:	2a03      	cmp	r2, #3
    e678:	d065      	beq.n	e746 <ull_conn_rx+0x153a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e67a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    e67e:	f7ff bab2 	b.w	dbe6 <ull_conn_rx+0x9da>
			     lll->interval) ||
    e682:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    e684:	4567      	cmp	r7, ip
    e686:	f47f acc2 	bne.w	e00e <ull_conn_rx+0xe02>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e68a:	f240 47e2 	movw	r7, #1250	; 0x4e2
    e68e:	fb07 f606 	mul.w	r6, r7, r6
    e692:	f242 7710 	movw	r7, #10000	; 0x2710
    e696:	fb07 6202 	mla	r2, r7, r2, r6
    e69a:	3a01      	subs	r2, #1
    e69c:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
    e6a0:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
    e6a4:	b292      	uxth	r2, r2
    e6a6:	4296      	cmp	r6, r2
    e6a8:	f47f acb1 	bne.w	e00e <ull_conn_rx+0xe02>
    e6ac:	e7cd      	b.n	e64a <ull_conn_rx+0x143e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    e6ae:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    e6b2:	f011 0f06 	tst.w	r1, #6
    e6b6:	f43f abc9 	beq.w	de4c <ull_conn_rx+0xc40>
    e6ba:	f7fe bede 	b.w	d47a <ull_conn_rx+0x26e>
	    ((pdu_data_tx->llctrl.opcode !=
    e6be:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e6c0:	2903      	cmp	r1, #3
    e6c2:	d08b      	beq.n	e5dc <ull_conn_rx+0x13d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e6c4:	290a      	cmp	r1, #10
    e6c6:	d1d0      	bne.n	e66a <ull_conn_rx+0x145e>
    e6c8:	e788      	b.n	e5dc <ull_conn_rx+0x13d0>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    e6ca:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    e6ce:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    e6d2:	429a      	cmp	r2, r3
    e6d4:	d00e      	beq.n	e6f4 <ull_conn_rx+0x14e8>
    e6d6:	4a1f      	ldr	r2, [pc, #124]	; (e754 <ull_conn_rx+0x1548>)
    e6d8:	4921      	ldr	r1, [pc, #132]	; (e760 <ull_conn_rx+0x1554>)
    e6da:	4820      	ldr	r0, [pc, #128]	; (e75c <ull_conn_rx+0x1550>)
    e6dc:	f241 5359 	movw	r3, #5465	; 0x1559
    e6e0:	f007 fe07 	bl	162f2 <assert_print>
    e6e4:	4040      	eors	r0, r0
    e6e6:	f380 8811 	msr	BASEPRI, r0
    e6ea:	f04f 0003 	mov.w	r0, #3
    e6ee:	df02      	svc	2
    e6f0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e6f4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
    e6f8:	2106      	movs	r1, #6
    e6fa:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
    e6fe:	3b01      	subs	r3, #1
    e700:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e704:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    e708:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e70c:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.win_size = 1U;
    e710:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e712:	00db      	lsls	r3, r3, #3
    e714:	430b      	orrs	r3, r1
    e716:	f022 020f 	bic.w	r2, r2, #15
    e71a:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
    e71c:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    e720:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    e724:	f8b4 1162 	ldrh.w	r1, [r4, #354]	; 0x162
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e728:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
    e72c:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    e72e:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
		conn->llcp_cu.win_offset_us = 0U;
    e732:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    e736:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    e73a:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    e73e:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	if (err) {
    e742:	f7fe bdb0 	b.w	d2a6 <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
    e746:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e748:	2a03      	cmp	r2, #3
    e74a:	f43f af55 	beq.w	e5f8 <ull_conn_rx+0x13ec>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e74e:	2a0a      	cmp	r2, #10
    e750:	d193      	bne.n	e67a <ull_conn_rx+0x146e>
    e752:	e751      	b.n	e5f8 <ull_conn_rx+0x13ec>
    e754:	0001a924 	.word	0x0001a924
    e758:	0001a6d0 	.word	0x0001a6d0
    e75c:	0001a580 	.word	0x0001a580
    e760:	0001aa18 	.word	0x0001aa18

0000e764 <ull_conn_tx_demux>:
{
    e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    e768:	4c24      	ldr	r4, [pc, #144]	; (e7fc <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e76a:	4f25      	ldr	r7, [pc, #148]	; (e800 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    e76c:	7962      	ldrb	r2, [r4, #5]
{
    e76e:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
    e770:	f104 0608 	add.w	r6, r4, #8
    e774:	e021      	b.n	e7ba <ull_conn_tx_demux+0x56>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e776:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    e77a:	4638      	mov	r0, r7
    e77c:	f7f9 fc2c 	bl	7fd8 <mem_get>
	if (conn->lll.handle != handle) {
    e780:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    e782:	bb2a      	cbnz	r2, e7d0 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
    e784:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
    e788:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
    e78c:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
    e78e:	b351      	cbz	r1, e7e6 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
    e790:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
    e794:	b102      	cbz	r2, e798 <ull_conn_tx_demux+0x34>
				conn->tx_data_last->next = tx;
    e796:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
    e798:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
    e79c:	7962      	ldrb	r2, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
    e79e:	7923      	ldrb	r3, [r4, #4]
    e7a0:	78a1      	ldrb	r1, [r4, #2]
	if (_first == last) {
    e7a2:	429a      	cmp	r2, r3
    e7a4:	d005      	beq.n	e7b2 <ull_conn_tx_demux+0x4e>
	_first += 1U;
    e7a6:	3301      	adds	r3, #1
    e7a8:	b2db      	uxtb	r3, r3
		_first = 0U;
    e7aa:	4299      	cmp	r1, r3
    e7ac:	bf08      	it	eq
    e7ae:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    e7b0:	7123      	strb	r3, [r4, #4]
	} while (--count);
    e7b2:	3d01      	subs	r5, #1
    e7b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    e7b8:	d01e      	beq.n	e7f8 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    e7ba:	7923      	ldrb	r3, [r4, #4]
    e7bc:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
    e7be:	4293      	cmp	r3, r2
    e7c0:	d01a      	beq.n	e7f8 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
    e7c2:	fb13 f301 	smulbb	r3, r3, r1
    e7c6:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
    e7ca:	5af2      	ldrh	r2, [r6, r3]
    e7cc:	2a00      	cmp	r2, #0
    e7ce:	d0d2      	beq.n	e776 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
    e7d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    e7d4:	790b      	ldrb	r3, [r1, #4]
    e7d6:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    e7da:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
    e7de:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    e7e0:	f7fd f860 	bl	b8a4 <ll_tx_ack_put>
    e7e4:	e7da      	b.n	e79c <ull_conn_tx_demux+0x38>
				if (!conn->tx_head) {
    e7e6:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
    e7ea:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
    e7ee:	2a00      	cmp	r2, #0
    e7f0:	d1ce      	bne.n	e790 <ull_conn_tx_demux+0x2c>
					conn->tx_head = tx;
    e7f2:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
    e7f6:	e7cf      	b.n	e798 <ull_conn_tx_demux+0x34>
}
    e7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7fc:	200004f0 	.word	0x200004f0
    e800:	20000c58 	.word	0x20000c58

0000e804 <conn_cleanup_finalize>:
{
    e804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
    e808:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
{
    e80c:	b082      	sub	sp, #8
    e80e:	4606      	mov	r6, r0
	while (rx) {
    e810:	b144      	cbz	r4, e824 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
    e812:	2501      	movs	r5, #1
		rx = hdr->link->mem;
    e814:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    e816:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    e818:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
    e81a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    e81c:	f7fc fffc 	bl	b818 <ll_rx_put>
	while (rx) {
    e820:	2c00      	cmp	r4, #0
    e822:	d1f7      	bne.n	e814 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
    e824:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
    e828:	b381      	cbz	r1, e88c <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
    e82a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; e8d0 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
    e82e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; e8d4 <conn_cleanup_finalize+0xd0>
    e832:	f8df 90a4 	ldr.w	r9, [pc, #164]	; e8d8 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    e836:	f106 074c 	add.w	r7, r6, #76	; 0x4c
    e83a:	e007      	b.n	e84c <conn_cleanup_finalize+0x48>
    e83c:	4629      	mov	r1, r5
    e83e:	463a      	mov	r2, r7
    e840:	4620      	mov	r0, r4
    e842:	f7f9 fbfb 	bl	803c <memq_enqueue>
	while (conn->tx_head) {
    e846:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
    e84a:	b1f9      	cbz	r1, e88c <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    e84c:	4630      	mov	r0, r6
    e84e:	f7fe f801 	bl	c854 <tx_ull_dequeue>
    e852:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
    e854:	4640      	mov	r0, r8
    e856:	f7f9 fb8d 	bl	7f74 <mem_acquire>
		LL_ASSERT(link);
    e85a:	4604      	mov	r4, r0
    e85c:	2800      	cmp	r0, #0
    e85e:	d1ed      	bne.n	e83c <conn_cleanup_finalize+0x38>
    e860:	481e      	ldr	r0, [pc, #120]	; (e8dc <conn_cleanup_finalize+0xd8>)
    e862:	f640 2303 	movw	r3, #2563	; 0xa03
    e866:	4652      	mov	r2, sl
    e868:	4649      	mov	r1, r9
    e86a:	f007 fd42 	bl	162f2 <assert_print>
    e86e:	4040      	eors	r0, r0
    e870:	f380 8811 	msr	BASEPRI, r0
    e874:	f04f 0003 	mov.w	r0, #3
    e878:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    e87a:	4629      	mov	r1, r5
    e87c:	463a      	mov	r2, r7
    e87e:	4620      	mov	r0, r4
    e880:	f7f9 fbdc 	bl	803c <memq_enqueue>
	while (conn->tx_head) {
    e884:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
    e888:	2900      	cmp	r1, #0
    e88a:	d1df      	bne.n	e84c <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    e88c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    e88e:	4b14      	ldr	r3, [pc, #80]	; (e8e0 <conn_cleanup_finalize+0xdc>)
    e890:	9600      	str	r6, [sp, #0]
    e892:	3203      	adds	r2, #3
    e894:	b2d2      	uxtb	r2, r2
    e896:	2101      	movs	r1, #1
    e898:	2000      	movs	r0, #0
    e89a:	f7fa fea5 	bl	95e8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e89e:	f030 0302 	bics.w	r3, r0, #2
    e8a2:	d00c      	beq.n	e8be <conn_cleanup_finalize+0xba>
    e8a4:	4a0b      	ldr	r2, [pc, #44]	; (e8d4 <conn_cleanup_finalize+0xd0>)
    e8a6:	490f      	ldr	r1, [pc, #60]	; (e8e4 <conn_cleanup_finalize+0xe0>)
    e8a8:	480c      	ldr	r0, [pc, #48]	; (e8dc <conn_cleanup_finalize+0xd8>)
    e8aa:	f640 13c8 	movw	r3, #2504	; 0x9c8
    e8ae:	f007 fd20 	bl	162f2 <assert_print>
    e8b2:	4040      	eors	r0, r0
    e8b4:	f380 8811 	msr	BASEPRI, r0
    e8b8:	f04f 0003 	mov.w	r0, #3
    e8bc:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
    e8be:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    e8c2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
    e8c4:	8533      	strh	r3, [r6, #40]	; 0x28
}
    e8c6:	b002      	add	sp, #8
    e8c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
    e8cc:	f7ff bf4a 	b.w	e764 <ull_conn_tx_demux>
    e8d0:	20001d2c 	.word	0x20001d2c
    e8d4:	0001a924 	.word	0x0001a924
    e8d8:	0001a97c 	.word	0x0001a97c
    e8dc:	0001a580 	.word	0x0001a580
    e8e0:	0000c601 	.word	0x0000c601
    e8e4:	0001aa40 	.word	0x0001aa40

0000e8e8 <ull_conn_done>:
{
    e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
    e8ea:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    e8ec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    e8ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e8f2:	4299      	cmp	r1, r3
{
    e8f4:	b089      	sub	sp, #36	; 0x24
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    e8f6:	d054      	beq.n	e9a2 <ull_conn_done+0xba>
	switch (done->extra.mic_state) {
    e8f8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    e8fc:	2b01      	cmp	r3, #1
    e8fe:	f000 80e0 	beq.w	eac2 <ull_conn_done+0x1da>
    e902:	2b02      	cmp	r3, #2
    e904:	d04f      	beq.n	e9a6 <ull_conn_done+0xbe>
    e906:	2b00      	cmp	r3, #0
    e908:	f000 80c1 	beq.w	ea8e <ull_conn_done+0x1a6>
	reason_final = conn->llcp_terminate.reason_final;
    e90c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
	if (reason_final && (
    e910:	2b00      	cmp	r3, #0
    e912:	d14b      	bne.n	e9ac <ull_conn_done+0xc4>
	latency_event = lll->latency_event;
    e914:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
    e916:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
    e918:	1c77      	adds	r7, r6, #1
    e91a:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
    e91c:	2b00      	cmp	r3, #0
    e91e:	d15d      	bne.n	e9dc <ull_conn_done+0xf4>
	if (done->extra.crc_valid) {
    e920:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    e924:	f013 0301 	ands.w	r3, r3, #1
    e928:	f000 80d1 	beq.w	eace <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
    e92c:	2500      	movs	r5, #0
    e92e:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
    e932:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    e936:	b12b      	cbz	r3, e944 <ull_conn_done+0x5c>
		if (conn->procedure_expire > elapsed_event) {
    e938:	429f      	cmp	r7, r3
    e93a:	f080 810f 	bcs.w	eb5c <ull_conn_done+0x274>
			conn->procedure_expire -= elapsed_event;
    e93e:	1bdb      	subs	r3, r3, r7
    e940:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
    e944:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
    e948:	b12b      	cbz	r3, e956 <ull_conn_done+0x6e>
		if (conn->apto_expire > elapsed_event) {
    e94a:	429f      	cmp	r7, r3
    e94c:	f080 80e1 	bcs.w	eb12 <ull_conn_done+0x22a>
			conn->apto_expire -= elapsed_event;
    e950:	1bdb      	subs	r3, r3, r7
    e952:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
    e956:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
			    (conn->llcp_req == conn->llcp_ack)) {
    e95a:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    e95e:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
	if (conn->appto_expire != 0U) {
    e962:	b15a      	cbz	r2, e97c <ull_conn_done+0x94>
		if (conn->appto_expire > elapsed_event) {
    e964:	4297      	cmp	r7, r2
    e966:	f0c0 80be 	bcc.w	eae6 <ull_conn_done+0x1fe>
			if ((conn->procedure_expire == 0U) &&
    e96a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
    e96e:	2000      	movs	r0, #0
    e970:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
    e974:	b912      	cbnz	r2, e97c <ull_conn_done+0x94>
    e976:	428b      	cmp	r3, r1
    e978:	f000 80fd 	beq.w	eb76 <ull_conn_done+0x28e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    e97c:	1a5b      	subs	r3, r3, r1
    e97e:	f003 0303 	and.w	r3, r3, #3
    e982:	2b02      	cmp	r3, #2
    e984:	f000 80b8 	beq.w	eaf8 <ull_conn_done+0x210>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    e988:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    e98c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    e990:	429a      	cmp	r2, r3
    e992:	f000 80cf 	beq.w	eb34 <ull_conn_done+0x24c>
		lll->latency_event = 0U;
    e996:	2300      	movs	r3, #0
    e998:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
    e99a:	2d00      	cmp	r5, #0
    e99c:	d13d      	bne.n	ea1a <ull_conn_done+0x132>
    e99e:	2e00      	cmp	r6, #0
    e9a0:	d13b      	bne.n	ea1a <ull_conn_done+0x132>
}
    e9a2:	b009      	add	sp, #36	; 0x24
    e9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
    e9a6:	233d      	movs	r3, #61	; 0x3d
    e9a8:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
			       conn->llcp_terminate.ack) & 0xFF) ==
    e9ac:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    e9b0:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
    e9b4:	1b52      	subs	r2, r2, r5
	if (reason_final && (
    e9b6:	b2d2      	uxtb	r2, r2
    e9b8:	2a03      	cmp	r2, #3
    e9ba:	d055      	beq.n	ea68 <ull_conn_done+0x180>
			     TERM_ACKED) ||
    e9bc:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
    e9c0:	0755      	lsls	r5, r2, #29
    e9c2:	d451      	bmi.n	ea68 <ull_conn_done+0x180>
			    conn->central.terminate_ack ||
    e9c4:	2b3d      	cmp	r3, #61	; 0x3d
    e9c6:	d04f      	beq.n	ea68 <ull_conn_done+0x180>
	latency_event = lll->latency_event;
    e9c8:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
    e9ca:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
    e9cc:	1c77      	adds	r7, r6, #1
    e9ce:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
    e9d0:	2b00      	cmp	r3, #0
    e9d2:	d0a5      	beq.n	e920 <ull_conn_done+0x38>
			conn->central.terminate_ack = 1;
    e9d4:	f042 0204 	orr.w	r2, r2, #4
    e9d8:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
    e9dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
    e9e0:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
    e9e2:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
    e9e4:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
    e9e8:	d4a0      	bmi.n	e92c <ull_conn_done+0x44>
		if (!conn->supervision_expire) {
    e9ea:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
    e9ee:	b92d      	cbnz	r5, e9fc <ull_conn_done+0x114>
			conn->supervision_expire = conn->supervision_reload;
    e9f0:	f8b4 50a6 	ldrh.w	r5, [r4, #166]	; 0xa6
    e9f4:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
    e9f8:	2d00      	cmp	r5, #0
    e9fa:	d09a      	beq.n	e932 <ull_conn_done+0x4a>
		if (conn->supervision_expire > elapsed_event) {
    e9fc:	42bd      	cmp	r5, r7
    e9fe:	f240 80a4 	bls.w	eb4a <ull_conn_done+0x262>
			conn->supervision_expire -= elapsed_event;
    ea02:	1bed      	subs	r5, r5, r7
    ea04:	b2ad      	uxth	r5, r5
	force = 0U;
    ea06:	2d06      	cmp	r5, #6
			lll->latency_event = 0U;
    ea08:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
    ea0c:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
			lll->latency_event = 0U;
    ea10:	8623      	strh	r3, [r4, #48]	; 0x30
	force = 0U;
    ea12:	bf8c      	ite	hi
    ea14:	2500      	movhi	r5, #0
    ea16:	2501      	movls	r5, #1
    ea18:	e78b      	b.n	e932 <ull_conn_done+0x4a>
		lazy = lll->latency_event + 1U;
    ea1a:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    ea1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ea1e:	4b62      	ldr	r3, [pc, #392]	; (eba8 <ull_conn_done+0x2c0>)
		struct ll_conn *conn = lll->hdr.parent;
    ea20:	69e4      	ldr	r4, [r4, #28]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    ea22:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    ea24:	e9cd 3405 	strd	r3, r4, [sp, #20]
    ea28:	2300      	movs	r3, #0
    ea2a:	e9cd 1503 	strd	r1, r5, [sp, #12]
    ea2e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ea32:	9300      	str	r3, [sp, #0]
    ea34:	4618      	mov	r0, r3
    ea36:	b2d2      	uxtb	r2, r2
    ea38:	2101      	movs	r1, #1
    ea3a:	f7fa fdbd 	bl	95b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea3e:	f030 0302 	bics.w	r3, r0, #2
    ea42:	d0ae      	beq.n	e9a2 <ull_conn_done+0xba>
    ea44:	f7fc ff8a 	bl	b95c <ull_disable_mark_get>
    ea48:	4284      	cmp	r4, r0
    ea4a:	d0aa      	beq.n	e9a2 <ull_conn_done+0xba>
    ea4c:	4a57      	ldr	r2, [pc, #348]	; (ebac <ull_conn_done+0x2c4>)
    ea4e:	4958      	ldr	r1, [pc, #352]	; (ebb0 <ull_conn_done+0x2c8>)
    ea50:	4858      	ldr	r0, [pc, #352]	; (ebb4 <ull_conn_done+0x2cc>)
    ea52:	f240 7304 	movw	r3, #1796	; 0x704
    ea56:	f007 fc4c 	bl	162f2 <assert_print>
    ea5a:	4040      	eors	r0, r0
    ea5c:	f380 8811 	msr	BASEPRI, r0
    ea60:	f04f 0003 	mov.w	r0, #3
    ea64:	df02      	svc	2
    ea66:	e79c      	b.n	e9a2 <ull_conn_done+0xba>
	if (conn == conn_upd_curr) {
    ea68:	4a53      	ldr	r2, [pc, #332]	; (ebb8 <ull_conn_done+0x2d0>)
    ea6a:	6810      	ldr	r0, [r2, #0]
    ea6c:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
    ea6e:	bf04      	itt	eq
    ea70:	2000      	moveq	r0, #0
    ea72:	6010      	streq	r0, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ea74:	2218      	movs	r2, #24
	conn_cleanup_finalize(conn);
    ea76:	4620      	mov	r0, r4
	rx->hdr.handle = conn->lll.handle;
    ea78:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ea7c:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	*((uint8_t *)rx->pdu) = reason;
    ea80:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
}
    ea84:	b009      	add	sp, #36	; 0x24
    ea86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
    ea8a:	f7ff bebb 	b.w	e804 <conn_cleanup_finalize>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    ea8e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    ea92:	071f      	lsls	r7, r3, #28
    ea94:	d537      	bpl.n	eb06 <ull_conn_done+0x21e>
					    (lll->latency + 6)) ?
    ea96:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
    ea98:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
    ea9c:	1dab      	adds	r3, r5, #6
			appto_reload_new = (conn->apto_reload >
    ea9e:	429a      	cmp	r2, r3
    eaa0:	bfc4      	itt	gt
    eaa2:	1f93      	subgt	r3, r2, #6
    eaa4:	1b5b      	subgt	r3, r3, r5
			if (conn->appto_reload != appto_reload_new) {
    eaa6:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
    eaaa:	bfcc      	ite	gt
    eaac:	b29b      	uxthgt	r3, r3
    eaae:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
    eab0:	429d      	cmp	r5, r3
    eab2:	d044      	beq.n	eb3e <ull_conn_done+0x256>
				conn->appto_reload = appto_reload_new;
    eab4:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
    eab8:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
    eabc:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
    eac0:	e724      	b.n	e90c <ull_conn_done+0x24>
		conn->appto_expire = conn->apto_expire = 0U;
    eac2:	2300      	movs	r3, #0
    eac4:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
    eac8:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
    eacc:	e71e      	b.n	e90c <ull_conn_done+0x24>
	else if (conn->connect_expire) {
    eace:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    ead2:	2a00      	cmp	r2, #0
    ead4:	d089      	beq.n	e9ea <ull_conn_done+0x102>
		if (conn->connect_expire > elapsed_event) {
    ead6:	42ba      	cmp	r2, r7
    ead8:	d954      	bls.n	eb84 <ull_conn_done+0x29c>
			conn->connect_expire -= elapsed_event;
    eada:	1bd2      	subs	r2, r2, r7
	if (conn->supervision_expire) {
    eadc:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
			conn->connect_expire -= elapsed_event;
    eae0:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
    eae4:	e788      	b.n	e9f8 <ull_conn_done+0x110>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eae6:	1a5b      	subs	r3, r3, r1
    eae8:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
    eaec:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eaee:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
    eaf0:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eaf4:	f47f af48 	bne.w	e988 <ull_conn_done+0xa0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
    eaf8:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eafc:	3b01      	subs	r3, #1
    eafe:	2b01      	cmp	r3, #1
    eb00:	f63f af42 	bhi.w	e988 <ull_conn_done+0xa0>
    eb04:	e747      	b.n	e996 <ull_conn_done+0xae>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    eb06:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
    eb0a:	07de      	lsls	r6, r3, #31
    eb0c:	f57f aefe 	bpl.w	e90c <ull_conn_done+0x24>
    eb10:	e7c1      	b.n	ea96 <ull_conn_done+0x1ae>
			rx = ll_pdu_rx_alloc();
    eb12:	f7fc feb1 	bl	b878 <ll_pdu_rx_alloc>
			if (rx) {
    eb16:	4601      	mov	r1, r0
    eb18:	b348      	cbz	r0, eb6e <ull_conn_done+0x286>
				rx->handle = lll->handle;
    eb1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
    eb1c:	2200      	movs	r2, #0
    eb1e:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
				rx->handle = lll->handle;
    eb22:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    eb24:	231b      	movs	r3, #27
    eb26:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
    eb28:	6800      	ldr	r0, [r0, #0]
    eb2a:	f7fc fe75 	bl	b818 <ll_rx_put>
				ll_rx_sched();
    eb2e:	f7fc fe7d 	bl	b82c <ll_rx_sched>
    eb32:	e710      	b.n	e956 <ull_conn_done+0x6e>
	if ((force) || (latency_event != lll->latency_event)) {
    eb34:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    eb36:	b36d      	cbz	r5, eb94 <ull_conn_done+0x2ac>
		lazy = lll->latency_event + 1U;
    eb38:	3101      	adds	r1, #1
    eb3a:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    eb3c:	e76e      	b.n	ea1c <ull_conn_done+0x134>
			if (conn->apto_expire == 0U) {
    eb3e:	f8b4 50b4 	ldrh.w	r5, [r4, #180]	; 0xb4
    eb42:	2d00      	cmp	r5, #0
    eb44:	f47f aee2 	bne.w	e90c <ull_conn_done+0x24>
    eb48:	e7b6      	b.n	eab8 <ull_conn_done+0x1d0>
	if (conn == conn_upd_curr) {
    eb4a:	4b1b      	ldr	r3, [pc, #108]	; (ebb8 <ull_conn_done+0x2d0>)
    eb4c:	681a      	ldr	r2, [r3, #0]
    eb4e:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    eb50:	bf04      	itt	eq
    eb52:	2200      	moveq	r2, #0
    eb54:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eb56:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
    eb58:	2308      	movs	r3, #8
    eb5a:	e78c      	b.n	ea76 <ull_conn_done+0x18e>
	if (conn == conn_upd_curr) {
    eb5c:	4b16      	ldr	r3, [pc, #88]	; (ebb8 <ull_conn_done+0x2d0>)
    eb5e:	681a      	ldr	r2, [r3, #0]
    eb60:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    eb62:	bf04      	itt	eq
    eb64:	2200      	moveq	r2, #0
    eb66:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eb68:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
    eb6a:	2322      	movs	r3, #34	; 0x22
    eb6c:	e783      	b.n	ea76 <ull_conn_done+0x18e>
				conn->apto_expire = 1U;
    eb6e:	2301      	movs	r3, #1
    eb70:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
    eb74:	e6ef      	b.n	e956 <ull_conn_done+0x6e>
				conn->llcp_type = LLCP_PING;
    eb76:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    eb78:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
    eb7a:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
				conn->llcp_ack -= 2U;
    eb7e:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eb82:	e701      	b.n	e988 <ull_conn_done+0xa0>
	if (conn == conn_upd_curr) {
    eb84:	4a0c      	ldr	r2, [pc, #48]	; (ebb8 <ull_conn_done+0x2d0>)
    eb86:	6810      	ldr	r0, [r2, #0]
    eb88:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
    eb8a:	bf08      	it	eq
    eb8c:	6013      	streq	r3, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eb8e:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
    eb90:	233e      	movs	r3, #62	; 0x3e
    eb92:	e770      	b.n	ea76 <ull_conn_done+0x18e>
	if ((force) || (latency_event != lll->latency_event)) {
    eb94:	42b1      	cmp	r1, r6
    eb96:	f43f af04 	beq.w	e9a2 <ull_conn_done+0xba>
		lazy = lll->latency_event + 1U;
    eb9a:	3101      	adds	r1, #1
    eb9c:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    eb9e:	2900      	cmp	r1, #0
    eba0:	f43f aeff 	beq.w	e9a2 <ull_conn_done+0xba>
    eba4:	e73a      	b.n	ea1c <ull_conn_done+0x134>
    eba6:	bf00      	nop
    eba8:	0000c815 	.word	0x0000c815
    ebac:	0001a924 	.word	0x0001a924
    ebb0:	0001aa70 	.word	0x0001aa70
    ebb4:	0001a580 	.word	0x0001a580
    ebb8:	20001bc0 	.word	0x20001bc0

0000ebbc <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
    ebbc:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    ebc0:	2b00      	cmp	r3, #0
    ebc2:	f000 80e5 	beq.w	ed90 <ull_conn_tx_lll_enqueue+0x1d4>
    ebc6:	3901      	subs	r1, #1
{
    ebc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    ebcc:	f8df 81c4 	ldr.w	r8, [pc, #452]	; ed94 <ull_conn_tx_lll_enqueue+0x1d8>
		LL_ASSERT(link);
    ebd0:	f8df a1c4 	ldr.w	sl, [pc, #452]	; ed98 <ull_conn_tx_lll_enqueue+0x1dc>
    ebd4:	f8df 91c4 	ldr.w	r9, [pc, #452]	; ed9c <ull_conn_tx_lll_enqueue+0x1e0>
    ebd8:	4604      	mov	r4, r0
    ebda:	b2cd      	uxtb	r5, r1
    ebdc:	e012      	b.n	ec04 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
    ebde:	4640      	mov	r0, r8
    ebe0:	f7f9 f9c8 	bl	7f74 <mem_acquire>
		LL_ASSERT(link);
    ebe4:	4607      	mov	r7, r0
    ebe6:	2800      	cmp	r0, #0
    ebe8:	d064      	beq.n	ecb4 <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    ebea:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    ebee:	4631      	mov	r1, r6
    ebf0:	4638      	mov	r0, r7
    ebf2:	f7f9 fa23 	bl	803c <memq_enqueue>
	while (conn->tx_head &&
    ebf6:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
    ebfa:	3d01      	subs	r5, #1
    ebfc:	b2ed      	uxtb	r5, r5
    ebfe:	2b00      	cmp	r3, #0
    ec00:	f000 8080 	beq.w	ed04 <ull_conn_tx_lll_enqueue+0x148>
		 !conn->llcp_phy.pause_tx &&
    ec04:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
    ec08:	07d1      	lsls	r1, r2, #31
    ec0a:	d403      	bmi.n	ec14 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
    ec0c:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
    ec10:	0792      	lsls	r2, r2, #30
    ec12:	d55d      	bpl.n	ecd0 <ull_conn_tx_lll_enqueue+0x114>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    ec14:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    ec18:	4293      	cmp	r3, r2
    ec1a:	d173      	bne.n	ed04 <ull_conn_tx_lll_enqueue+0x148>
    ec1c:	2dff      	cmp	r5, #255	; 0xff
    ec1e:	d071      	beq.n	ed04 <ull_conn_tx_lll_enqueue+0x148>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    ec20:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    ec24:	4620      	mov	r0, r4
    ec26:	f7fd fe15 	bl	c854 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ec2a:	7903      	ldrb	r3, [r0, #4]
    ec2c:	f003 0303 	and.w	r3, r3, #3
    ec30:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
    ec32:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ec34:	d1d3      	bne.n	ebde <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
    ec36:	79c3      	ldrb	r3, [r0, #7]
    ec38:	3b03      	subs	r3, #3
    ec3a:	2b13      	cmp	r3, #19
    ec3c:	d8cf      	bhi.n	ebde <ull_conn_tx_lll_enqueue+0x22>
    ec3e:	a201      	add	r2, pc, #4	; (adr r2, ec44 <ull_conn_tx_lll_enqueue+0x88>)
    ec40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ec44:	0000ec9d 	.word	0x0000ec9d
    ec48:	0000ebdf 	.word	0x0000ebdf
    ec4c:	0000ebdf 	.word	0x0000ebdf
    ec50:	0000ebdf 	.word	0x0000ebdf
    ec54:	0000ebdf 	.word	0x0000ebdf
    ec58:	0000ebdf 	.word	0x0000ebdf
    ec5c:	0000ebdf 	.word	0x0000ebdf
    ec60:	0000ec9d 	.word	0x0000ec9d
    ec64:	0000ec95 	.word	0x0000ec95
    ec68:	0000ebdf 	.word	0x0000ebdf
    ec6c:	0000ebdf 	.word	0x0000ebdf
    ec70:	0000ebdf 	.word	0x0000ebdf
    ec74:	0000ebdf 	.word	0x0000ebdf
    ec78:	0000ebdf 	.word	0x0000ebdf
    ec7c:	0000ebdf 	.word	0x0000ebdf
    ec80:	0000ebdf 	.word	0x0000ebdf
    ec84:	0000ebdf 	.word	0x0000ebdf
    ec88:	0000ebdf 	.word	0x0000ebdf
    ec8c:	0000ebdf 	.word	0x0000ebdf
    ec90:	0000ed09 	.word	0x0000ed09
		if (!conn->lll.role) {
    ec94:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ec98:	2b00      	cmp	r3, #0
    ec9a:	daa0      	bge.n	ebde <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
    ec9c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
    eca0:	f043 0302 	orr.w	r3, r3, #2
    eca4:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
    eca8:	4640      	mov	r0, r8
    ecaa:	f7f9 f963 	bl	7f74 <mem_acquire>
		LL_ASSERT(link);
    ecae:	4607      	mov	r7, r0
    ecb0:	2800      	cmp	r0, #0
    ecb2:	d19a      	bne.n	ebea <ull_conn_tx_lll_enqueue+0x2e>
    ecb4:	483a      	ldr	r0, [pc, #232]	; (eda0 <ull_conn_tx_lll_enqueue+0x1e4>)
    ecb6:	f240 7369 	movw	r3, #1897	; 0x769
    ecba:	4652      	mov	r2, sl
    ecbc:	4649      	mov	r1, r9
    ecbe:	f007 fb18 	bl	162f2 <assert_print>
    ecc2:	4040      	eors	r0, r0
    ecc4:	f380 8811 	msr	BASEPRI, r0
    ecc8:	f04f 0003 	mov.w	r0, #3
    eccc:	df02      	svc	2
    ecce:	e78c      	b.n	ebea <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    ecd0:	791a      	ldrb	r2, [r3, #4]
    ecd2:	f002 0203 	and.w	r2, r2, #3
    ecd6:	2a03      	cmp	r2, #3
    ecd8:	d1a0      	bne.n	ec1c <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
    ecda:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    ecdc:	2a03      	cmp	r2, #3
    ecde:	d001      	beq.n	ece4 <ull_conn_tx_lll_enqueue+0x128>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    ece0:	2a0a      	cmp	r2, #10
    ece2:	d19b      	bne.n	ec1c <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
    ece4:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    ece8:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
    ecec:	428a      	cmp	r2, r1
    ecee:	d012      	beq.n	ed16 <ull_conn_tx_lll_enqueue+0x15a>
    ecf0:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
    ecf4:	2a03      	cmp	r2, #3
    ecf6:	d091      	beq.n	ec1c <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
    ecf8:	681a      	ldr	r2, [r3, #0]
    ecfa:	b11a      	cbz	r2, ed04 <ull_conn_tx_lll_enqueue+0x148>
    ecfc:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    ed00:	428a      	cmp	r2, r1
    ed02:	d034      	beq.n	ed6e <ull_conn_tx_lll_enqueue+0x1b2>
}
    ed04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
    ed08:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    ed0c:	f043 0301 	orr.w	r3, r3, #1
    ed10:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
    ed14:	e763      	b.n	ebde <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
    ed16:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
    ed1a:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
    ed1e:	4288      	cmp	r0, r1
    ed20:	d1ea      	bne.n	ecf8 <ull_conn_tx_lll_enqueue+0x13c>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
    ed22:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
    ed26:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
    ed2a:	4288      	cmp	r0, r1
    ed2c:	d1e4      	bne.n	ecf8 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
    ed2e:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
    ed32:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    ed36:	4288      	cmp	r0, r1
    ed38:	d1de      	bne.n	ecf8 <ull_conn_tx_lll_enqueue+0x13c>
		       conn->llcp_conn_param.req) ||
    ed3a:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    ed3e:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    ed42:	4288      	cmp	r0, r1
    ed44:	d1d8      	bne.n	ecf8 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    ed46:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
    ed4a:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
    ed4e:	4288      	cmp	r0, r1
    ed50:	d1d2      	bne.n	ecf8 <ull_conn_tx_lll_enqueue+0x13c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ed52:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_ack -= 2U;
    ed56:	3a02      	subs	r2, #2
    ed58:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ed5c:	2201      	movs	r2, #1
    ed5e:	f362 0301 	bfi	r3, r2, #0, #2
    ed62:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
    ed66:	2303      	movs	r3, #3
    ed68:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
    ed6c:	e756      	b.n	ec1c <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
    ed6e:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
    ed72:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
    ed76:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				tx->next = conn->tx_ctrl_last->next;
    ed7a:	6810      	ldr	r0, [r2, #0]
    ed7c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
    ed7e:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
    ed80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
    ed84:	2900      	cmp	r1, #0
    ed86:	f47f af49 	bne.w	ec1c <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
    ed8a:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    ed8e:	e745      	b.n	ec1c <ull_conn_tx_lll_enqueue+0x60>
    ed90:	4770      	bx	lr
    ed92:	bf00      	nop
    ed94:	20001d2c 	.word	0x20001d2c
    ed98:	0001a924 	.word	0x0001a924
    ed9c:	0001a97c 	.word	0x0001a97c
    eda0:	0001a580 	.word	0x0001a580

0000eda4 <tx_demux>:
{
    eda4:	b510      	push	{r4, lr}
    eda6:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
    eda8:	2001      	movs	r0, #1
    edaa:	f7ff fcdb 	bl	e764 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
    edae:	4620      	mov	r0, r4
    edb0:	2101      	movs	r1, #1
}
    edb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
    edb6:	f7ff bf01 	b.w	ebbc <ull_conn_tx_lll_enqueue>
    edba:	bf00      	nop

0000edbc <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    edbc:	4901      	ldr	r1, [pc, #4]	; (edc4 <ull_conn_link_tx_release+0x8>)
    edbe:	f7f9 b8f3 	b.w	7fa8 <mem_release>
    edc2:	bf00      	nop
    edc4:	20001d2c 	.word	0x20001d2c

0000edc8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    edc8:	4b01      	ldr	r3, [pc, #4]	; (edd0 <ull_conn_ack_last_idx_get+0x8>)
}
    edca:	7958      	ldrb	r0, [r3, #5]
    edcc:	4770      	bx	lr
    edce:	bf00      	nop
    edd0:	200004a0 	.word	0x200004a0

0000edd4 <ull_conn_ack_peek>:
{
    edd4:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    edd6:	4b0c      	ldr	r3, [pc, #48]	; (ee08 <ull_conn_ack_peek+0x34>)
    edd8:	f893 c004 	ldrb.w	ip, [r3, #4]
    eddc:	f893 e005 	ldrb.w	lr, [r3, #5]
    ede0:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
    ede2:	45f4      	cmp	ip, lr
    ede4:	d00d      	beq.n	ee02 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
    ede6:	fb1c fc04 	smulbb	ip, ip, r4
    edea:	3308      	adds	r3, #8
    edec:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
    edf0:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
    edf4:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
    edf8:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
    edfa:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
    edfc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    edfe:	6818      	ldr	r0, [r3, #0]
}
    ee00:	bd10      	pop	{r4, pc}
		return NULL;
    ee02:	2000      	movs	r0, #0
}
    ee04:	bd10      	pop	{r4, pc}
    ee06:	bf00      	nop
    ee08:	200004a0 	.word	0x200004a0

0000ee0c <ull_conn_ack_by_last_peek>:
{
    ee0c:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    ee0e:	4b0b      	ldr	r3, [pc, #44]	; (ee3c <ull_conn_ack_by_last_peek+0x30>)
    ee10:	f893 c004 	ldrb.w	ip, [r3, #4]
    ee14:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
    ee18:	4584      	cmp	ip, r0
    ee1a:	d00d      	beq.n	ee38 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
    ee1c:	3308      	adds	r3, #8
    ee1e:	fb1c fc0e 	smulbb	ip, ip, lr
    ee22:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
    ee26:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
    ee2a:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
    ee2e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
    ee30:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ee32:	6818      	ldr	r0, [r3, #0]
}
    ee34:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    ee38:	2000      	movs	r0, #0
    ee3a:	e7fb      	b.n	ee34 <ull_conn_ack_by_last_peek+0x28>
    ee3c:	200004a0 	.word	0x200004a0

0000ee40 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
    ee40:	4b09      	ldr	r3, [pc, #36]	; (ee68 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    ee42:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    ee44:	795a      	ldrb	r2, [r3, #5]
    ee46:	7818      	ldrb	r0, [r3, #0]
    ee48:	f893 c002 	ldrb.w	ip, [r3, #2]
    ee4c:	428a      	cmp	r2, r1
    ee4e:	d009      	beq.n	ee64 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
    ee50:	1c4a      	adds	r2, r1, #1
    ee52:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    ee54:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    ee58:	4594      	cmp	ip, r2
    ee5a:	bf08      	it	eq
    ee5c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    ee5e:	6888      	ldr	r0, [r1, #8]
	*first = _first; /* Write back read-index */
    ee60:	711a      	strb	r2, [r3, #4]
	return mem;
    ee62:	4770      	bx	lr
		return NULL;
    ee64:	2000      	movs	r0, #0
}
    ee66:	4770      	bx	lr
    ee68:	200004a0 	.word	0x200004a0

0000ee6c <ull_conn_lll_ack_enqueue>:
{
    ee6c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    ee6e:	4a15      	ldr	r2, [pc, #84]	; (eec4 <ull_conn_lll_ack_enqueue+0x58>)
    ee70:	f892 c005 	ldrb.w	ip, [r2, #5]
	if (last == count) {
    ee74:	7894      	ldrb	r4, [r2, #2]
    ee76:	f892 e004 	ldrb.w	lr, [r2, #4]
    ee7a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    ee7c:	f10c 0301 	add.w	r3, ip, #1
    ee80:	b2db      	uxtb	r3, r3
		last = 0U;
    ee82:	429c      	cmp	r4, r3
    ee84:	bf08      	it	eq
    ee86:	2300      	moveq	r3, #0
	if (last == first) {
    ee88:	459e      	cmp	lr, r3
    ee8a:	d00a      	beq.n	eea2 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    ee8c:	fb1c fc05 	smulbb	ip, ip, r5
    ee90:	f102 0e08 	add.w	lr, r2, #8
	lll_tx->handle = handle;
    ee94:	f82e 000c 	strh.w	r0, [lr, ip]
    ee98:	44f4      	add	ip, lr
	lll_tx->node = tx;
    ee9a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    ee9e:	7153      	strb	r3, [r2, #5]
}
    eea0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
    eea2:	4a09      	ldr	r2, [pc, #36]	; (eec8 <ull_conn_lll_ack_enqueue+0x5c>)
    eea4:	4909      	ldr	r1, [pc, #36]	; (eecc <ull_conn_lll_ack_enqueue+0x60>)
    eea6:	480a      	ldr	r0, [pc, #40]	; (eed0 <ull_conn_lll_ack_enqueue+0x64>)
    eea8:	f240 73b9 	movw	r3, #1977	; 0x7b9
    eeac:	f007 fa21 	bl	162f2 <assert_print>
    eeb0:	4040      	eors	r0, r0
    eeb2:	f380 8811 	msr	BASEPRI, r0
    eeb6:	f04f 0003 	mov.w	r0, #3
    eeba:	df02      	svc	2
	lll_tx->handle = handle;
    eebc:	2300      	movs	r3, #0
    eebe:	801b      	strh	r3, [r3, #0]
    eec0:	deff      	udf	#255	; 0xff
    eec2:	bf00      	nop
    eec4:	200004a0 	.word	0x200004a0
    eec8:	0001a924 	.word	0x0001a924
    eecc:	0001a96c 	.word	0x0001a96c
    eed0:	0001a580 	.word	0x0001a580

0000eed4 <ull_conn_tx_ack>:
{
    eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
    eed6:	7953      	ldrb	r3, [r2, #5]
{
    eed8:	4614      	mov	r4, r2
    eeda:	4605      	mov	r5, r0
    eedc:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
    eede:	b36b      	cbz	r3, ef3c <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    eee0:	7923      	ldrb	r3, [r4, #4]
    eee2:	f003 0203 	and.w	r2, r3, #3
    eee6:	2a03      	cmp	r2, #3
    eee8:	d00c      	beq.n	ef04 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
    eeea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eeee:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    eef0:	bf04      	itt	eq
    eef2:	f36f 0301 	bfceq	r3, #0, #2
    eef6:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
    eef8:	4621      	mov	r1, r4
    eefa:	4628      	mov	r0, r5
}
    eefc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
    ef00:	f7fc bcd0 	b.w	b8a4 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
    ef04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ef08:	429d      	cmp	r5, r3
    ef0a:	d125      	bne.n	ef58 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
    ef0c:	6830      	ldr	r0, [r6, #0]
    ef0e:	4284      	cmp	r4, r0
    ef10:	d049      	beq.n	efa6 <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
    ef12:	2800      	cmp	r0, #0
    ef14:	d0f0      	beq.n	eef8 <ull_conn_tx_ack+0x24>
    ef16:	4ab3      	ldr	r2, [pc, #716]	; (f1e4 <ull_conn_tx_ack+0x310>)
    ef18:	49b3      	ldr	r1, [pc, #716]	; (f1e8 <ull_conn_tx_ack+0x314>)
    ef1a:	48b4      	ldr	r0, [pc, #720]	; (f1ec <ull_conn_tx_ack+0x318>)
    ef1c:	f240 73e9 	movw	r3, #2025	; 0x7e9
    ef20:	f007 f9e7 	bl	162f2 <assert_print>
    ef24:	4040      	eors	r0, r0
    ef26:	f380 8811 	msr	BASEPRI, r0
    ef2a:	f04f 0003 	mov.w	r0, #3
    ef2e:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    ef30:	4621      	mov	r1, r4
    ef32:	4628      	mov	r0, r5
}
    ef34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
    ef38:	f7fc bcb4 	b.w	b8a4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
    ef3c:	4aa9      	ldr	r2, [pc, #676]	; (f1e4 <ull_conn_tx_ack+0x310>)
    ef3e:	49ac      	ldr	r1, [pc, #688]	; (f1f0 <ull_conn_tx_ack+0x31c>)
    ef40:	48aa      	ldr	r0, [pc, #680]	; (f1ec <ull_conn_tx_ack+0x318>)
    ef42:	f240 73c6 	movw	r3, #1990	; 0x7c6
    ef46:	f007 f9d4 	bl	162f2 <assert_print>
    ef4a:	4040      	eors	r0, r0
    ef4c:	f380 8811 	msr	BASEPRI, r0
    ef50:	f04f 0003 	mov.w	r0, #3
    ef54:	df02      	svc	2
    ef56:	e7c3      	b.n	eee0 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ef58:	48a6      	ldr	r0, [pc, #664]	; (f1f4 <ull_conn_tx_ack+0x320>)
    ef5a:	462a      	mov	r2, r5
    ef5c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    ef60:	f7f9 f83a 	bl	7fd8 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
    ef64:	79e3      	ldrb	r3, [r4, #7]
    ef66:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ef68:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
    ef6a:	2b16      	cmp	r3, #22
    ef6c:	d820      	bhi.n	efb0 <ull_conn_tx_ack+0xdc>
    ef6e:	e8df f003 	tbb	[pc, r3]
    ef72:	516d      	.short	0x516d
    ef74:	288b1f1f 	.word	0x288b1f1f
    ef78:	7984281f 	.word	0x7984281f
    ef7c:	1f1f471f 	.word	0x1f1f471f
    ef80:	281f251f 	.word	0x281f251f
    ef84:	1f2f96c3 	.word	0x1f2f96c3
    ef88:	36          	.byte	0x36
    ef89:	00          	.byte	0x00
			LL_ASSERT(link->next);
    ef8a:	4a96      	ldr	r2, [pc, #600]	; (f1e4 <ull_conn_tx_ack+0x310>)
    ef8c:	499a      	ldr	r1, [pc, #616]	; (f1f8 <ull_conn_tx_ack+0x324>)
    ef8e:	4897      	ldr	r0, [pc, #604]	; (f1ec <ull_conn_tx_ack+0x318>)
    ef90:	f240 73db 	movw	r3, #2011	; 0x7db
    ef94:	f007 f9ad 	bl	162f2 <assert_print>
    ef98:	4040      	eors	r0, r0
    ef9a:	f380 8811 	msr	BASEPRI, r0
    ef9e:	f04f 0003 	mov.w	r0, #3
    efa2:	df02      	svc	2
    efa4:	2000      	movs	r0, #0
}
    efa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
    efaa:	4994      	ldr	r1, [pc, #592]	; (f1fc <ull_conn_tx_ack+0x328>)
    efac:	f7f8 bffc 	b.w	7fa8 <mem_release>
		if (link->next == (void *)tx) {
    efb0:	6830      	ldr	r0, [r6, #0]
    efb2:	42a0      	cmp	r0, r4
    efb4:	d0f7      	beq.n	efa6 <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
    efb6:	2800      	cmp	r0, #0
    efb8:	d1ad      	bne.n	ef16 <ull_conn_tx_ack+0x42>
    efba:	e79d      	b.n	eef8 <ull_conn_tx_ack+0x24>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
    efbc:	7a23      	ldrb	r3, [r4, #8]
    efbe:	2b03      	cmp	r3, #3
    efc0:	d01e      	beq.n	f000 <ull_conn_tx_ack+0x12c>
			conn->common.txn_lock = 0U;
    efc2:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
    efc6:	f36f 0341 	bfc	r3, #1, #1
    efca:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
    efce:	e79d      	b.n	ef0c <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    efd0:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    efd4:	2202      	movs	r2, #2
    efd6:	f362 0301 	bfi	r3, r2, #0, #2
    efda:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    efde:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
    efe2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    efe6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    efea:	f363 1206 	bfi	r2, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    efee:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    eff2:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    eff6:	f36f 0300 	bfc	r3, #0, #1
    effa:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		break;
    effe:	e785      	b.n	ef0c <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
    f000:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
    f004:	f023 0303 	bic.w	r3, r3, #3
    f008:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
    f00c:	2300      	movs	r3, #0
    f00e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		break;
    f012:	e77b      	b.n	ef0c <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
    f014:	2208      	movs	r2, #8
    f016:	f104 0112 	add.w	r1, r4, #18
    f01a:	30ce      	adds	r0, #206	; 0xce
    f01c:	f007 fbe9 	bl	167f2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
    f020:	2204      	movs	r2, #4
    f022:	f104 011a 	add.w	r1, r4, #26
    f026:	f107 0078 	add.w	r0, r7, #120	; 0x78
    f02a:	f007 fbe2 	bl	167f2 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
    f02e:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
    f032:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
    f036:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
    f03a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
    f03e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		conn->llcp_enc.ack = conn->llcp_enc.req;
    f042:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
    f046:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		break;
    f04a:	e75f      	b.n	ef0c <ull_conn_tx_ack+0x38>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
    f04c:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
    f04e:	2b13      	cmp	r3, #19
    f050:	bf08      	it	eq
    f052:	2316      	moveq	r3, #22
    f054:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
		conn->llcp_terminate.ack--;
    f058:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
    f05c:	3b01      	subs	r3, #1
    f05e:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	break;
    f062:	e753      	b.n	ef0c <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
    f064:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    f068:	2b00      	cmp	r3, #0
    f06a:	da52      	bge.n	f112 <ull_conn_tx_ack+0x23e>
			conn->llcp_enc.pause_tx = 1U;
    f06c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f070:	f043 0302 	orr.w	r3, r3, #2
    f074:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    f078:	e748      	b.n	ef0c <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
    f07a:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f07e:	f023 0306 	bic.w	r3, r3, #6
    f082:	f043 0306 	orr.w	r3, r3, #6
    f086:	e7d6      	b.n	f036 <ull_conn_tx_ack+0x162>
		if (conn->lll.role) {
    f088:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    f08c:	2b00      	cmp	r3, #0
    f08e:	db7d      	blt.n	f18c <ull_conn_tx_ack+0x2b8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    f090:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
    f094:	f043 0303 	orr.w	r3, r3, #3
    f098:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
    f09c:	e736      	b.n	ef0c <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
    f09e:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    f0a2:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
		conn->common.txn_lock = 0U;
    f0a6:	f36f 0341 	bfc	r3, #1, #1
    f0aa:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    f0ae:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
    f0b2:	428b      	cmp	r3, r1
    f0b4:	f43f af2a 	beq.w	ef0c <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
    f0b8:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
    f0bc:	f002 0307 	and.w	r3, r2, #7
    f0c0:	2b03      	cmp	r3, #3
    f0c2:	d005      	beq.n	f0d0 <ull_conn_tx_ack+0x1fc>
    f0c4:	3303      	adds	r3, #3
    f0c6:	f003 0307 	and.w	r3, r3, #7
    f0ca:	2b01      	cmp	r3, #1
    f0cc:	f63f af70 	bhi.w	efb0 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
    f0d0:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
    f0d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
				conn->lll.max_tx_time =
    f0d6:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
    f0da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
    f0de:	f002 0307 	and.w	r3, r2, #7
    f0e2:	2b05      	cmp	r3, #5
    f0e4:	d078      	beq.n	f1d8 <ull_conn_tx_ack+0x304>
				if (!conn->llcp_length.cache.tx_octets) {
    f0e6:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
    f0ea:	2b00      	cmp	r3, #0
    f0ec:	d166      	bne.n	f1bc <ull_conn_tx_ack+0x2e8>
					conn->llcp_length.ack =
    f0ee:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
    f0f2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
    f0f6:	e709      	b.n	ef0c <ull_conn_tx_ack+0x38>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
    f0f8:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    f0fc:	f003 0207 	and.w	r2, r3, #7
    f100:	2a01      	cmp	r2, #1
    f102:	f47f af03 	bne.w	ef0c <ull_conn_tx_ack+0x38>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
    f106:	2202      	movs	r2, #2
    f108:	f362 0302 	bfi	r3, r2, #0, #3
    f10c:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
    f110:	e6fc      	b.n	ef0c <ull_conn_tx_ack+0x38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f112:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f114:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f116:	f043 0303 	orr.w	r3, r3, #3
    f11a:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f11c:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f11e:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
    f120:	2208      	movs	r2, #8
    f122:	f200 1141 	addw	r1, r0, #321	; 0x141
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f126:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
    f128:	18a0      	adds	r0, r4, r2
    f12a:	f007 fb62 	bl	167f2 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    f12e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
    f132:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    f134:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
    f138:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
    f13a:	210c      	movs	r1, #12
    f13c:	f104 0012 	add.w	r0, r4, #18
    f140:	f001 f818 	bl	10174 <lll_csrand_isr_get>
	    conn->tx_head &&
    f144:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
    f148:	b373      	cbz	r3, f1a8 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_enc.pause_tx &&
    f14a:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
	    conn->tx_head &&
    f14e:	0791      	lsls	r1, r2, #30
    f150:	d42a      	bmi.n	f1a8 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_phy.pause_tx &&
    f152:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
    f156:	07d2      	lsls	r2, r2, #31
    f158:	d426      	bmi.n	f1a8 <ull_conn_tx_ack+0x2d4>
		if (conn->tx_head == conn->tx_data) {
    f15a:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    f15e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    f162:	428b      	cmp	r3, r1
    f164:	d04c      	beq.n	f200 <ull_conn_tx_ack+0x32c>
		} else if (!conn->tx_ctrl) {
    f166:	2a00      	cmp	r2, #0
    f168:	d056      	beq.n	f218 <ull_conn_tx_ack+0x344>
	tx->next = conn->tx_ctrl_last->next;
    f16a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    f16e:	681a      	ldr	r2, [r3, #0]
    f170:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
    f172:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
    f174:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
    f176:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
		if (link->next == (void *)tx) {
    f17a:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
    f17c:	b11b      	cbz	r3, f186 <ull_conn_tx_ack+0x2b2>
		if (link->next == (void *)tx) {
    f17e:	2a00      	cmp	r2, #0
    f180:	f43f af03 	beq.w	ef8a <ull_conn_tx_ack+0xb6>
}
    f184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conn->tx_data_last = tx;
    f186:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
    f18a:	e7f8      	b.n	f17e <ull_conn_tx_ack+0x2aa>
			conn->llcp_enc.pause_rx = 0U;
    f18c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f190:	f023 0303 	bic.w	r3, r3, #3
    f194:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
			conn->procedure_expire = 0U;
    f198:	2300      	movs	r3, #0
    f19a:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			conn->llcp_ack = conn->llcp_req;
    f19e:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
    f1a2:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
    f1a6:	e6b1      	b.n	ef0c <ull_conn_tx_ack+0x38>
		if (!conn->tx_ctrl) {
    f1a8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
    f1ac:	2a00      	cmp	r2, #0
    f1ae:	d1dc      	bne.n	f16a <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head;
    f1b0:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
    f1b2:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    f1b6:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
    f1ba:	e7de      	b.n	f17a <ull_conn_tx_ack+0x2a6>
				conn->llcp_length.tx_octets =
    f1bc:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
    f1c0:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    f1c2:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
    f1c6:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
    f1ca:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    f1ce:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.tx_time =
    f1d2:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
    f1d6:	e699      	b.n	ef0c <ull_conn_tx_ack+0x38>
					conn->llcp_length.state =
    f1d8:	2304      	movs	r3, #4
    f1da:	f363 0202 	bfi	r2, r3, #0, #3
    f1de:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
    f1e2:	e693      	b.n	ef0c <ull_conn_tx_ack+0x38>
    f1e4:	0001a924 	.word	0x0001a924
    f1e8:	0001aad8 	.word	0x0001aad8
    f1ec:	0001a580 	.word	0x0001a580
    f1f0:	0001aacc 	.word	0x0001aacc
    f1f4:	20000c58 	.word	0x20000c58
    f1f8:	0001aae4 	.word	0x0001aae4
    f1fc:	20001c78 	.word	0x20001c78
			conn->tx_data = conn->tx_data->next;
    f200:	6819      	ldr	r1, [r3, #0]
    f202:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    f206:	2a00      	cmp	r2, #0
    f208:	d1af      	bne.n	f16a <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head->next;
    f20a:	681a      	ldr	r2, [r3, #0]
    f20c:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
    f20e:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
    f210:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
    f212:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
    f216:	e7b0      	b.n	f17a <ull_conn_tx_ack+0x2a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f218:	791a      	ldrb	r2, [r3, #4]
    f21a:	f002 0203 	and.w	r2, r2, #3
    f21e:	2a03      	cmp	r2, #3
    f220:	d002      	beq.n	f228 <ull_conn_tx_ack+0x354>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f222:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
    f226:	e7a0      	b.n	f16a <ull_conn_tx_ack+0x296>
	    ((pdu_data_tx->llctrl.opcode !=
    f228:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f22a:	2a03      	cmp	r2, #3
    f22c:	d0ed      	beq.n	f20a <ull_conn_tx_ack+0x336>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f22e:	2a0a      	cmp	r2, #10
    f230:	d1f7      	bne.n	f222 <ull_conn_tx_ack+0x34e>
    f232:	e7ea      	b.n	f20a <ull_conn_tx_ack+0x336>

0000f234 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
    f234:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
    f238:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
    f23c:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
    f23e:	bf03      	ittte	eq
    f240:	3301      	addeq	r3, #1
    f242:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
    f246:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
    f248:	200c      	movne	r0, #12
}
    f24a:	4770      	bx	lr

0000f24c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
    f24c:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    f250:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
	switch (lll->phy_tx_time) {
    f252:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f256:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    f258:	bf14      	ite	ne
    f25a:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    f25c:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
    f25e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	return max_tx_octets;
    f262:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    f264:	bf14      	ite	ne
    f266:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    f268:	3b0b      	subeq	r3, #11
    f26a:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
    f26c:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
    f26e:	bf44      	itt	mi
    f270:	3b04      	submi	r3, #4
    f272:	b29b      	uxthmi	r3, r3
}
    f274:	4298      	cmp	r0, r3
    f276:	bf28      	it	cs
    f278:	4618      	movcs	r0, r3
    f27a:	4770      	bx	lr

0000f27c <ull_pdu_data_init>:
}
    f27c:	4770      	bx	lr
    f27e:	bf00      	nop

0000f280 <ticker_op_stop_scan_cb>:
}
    f280:	4770      	bx	lr
    f282:	bf00      	nop

0000f284 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f284:	b900      	cbnz	r0, f288 <ticker_op_cb+0x4>
    f286:	4770      	bx	lr
{
    f288:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f28a:	4a07      	ldr	r2, [pc, #28]	; (f2a8 <ticker_op_cb+0x24>)
    f28c:	4907      	ldr	r1, [pc, #28]	; (f2ac <ticker_op_cb+0x28>)
    f28e:	4808      	ldr	r0, [pc, #32]	; (f2b0 <ticker_op_cb+0x2c>)
    f290:	f240 43bc 	movw	r3, #1212	; 0x4bc
    f294:	f007 f82d 	bl	162f2 <assert_print>
    f298:	4040      	eors	r0, r0
    f29a:	f380 8811 	msr	BASEPRI, r0
    f29e:	f04f 0003 	mov.w	r0, #3
    f2a2:	df02      	svc	2
}
    f2a4:	bd08      	pop	{r3, pc}
    f2a6:	bf00      	nop
    f2a8:	0001aaf0 	.word	0x0001aaf0
    f2ac:	0001a984 	.word	0x0001a984
    f2b0:	0001a580 	.word	0x0001a580

0000f2b4 <ull_central_ticker_cb>:
{
    f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2b8:	9c07      	ldr	r4, [sp, #28]
    f2ba:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f2be:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
    f2c0:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f2c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f2c6:	4299      	cmp	r1, r3
    f2c8:	d02d      	beq.n	f326 <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    f2ca:	4606      	mov	r6, r0
    f2cc:	4617      	mov	r7, r2
    f2ce:	4601      	mov	r1, r0
    f2d0:	462a      	mov	r2, r5
    f2d2:	4620      	mov	r0, r4
    f2d4:	f7f1 f994 	bl	600 <ull_conn_llcp>
		if (ret) {
    f2d8:	bb28      	cbnz	r0, f326 <ull_central_ticker_cb+0x72>
	return ++hdr->ref;
    f2da:	7823      	ldrb	r3, [r4, #0]
    f2dc:	3301      	adds	r3, #1
    f2de:	b2db      	uxtb	r3, r3
    f2e0:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
    f2e2:	b383      	cbz	r3, f346 <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
    f2e4:	2002      	movs	r0, #2
    f2e6:	f7ff fa3d 	bl	e764 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
    f2ea:	2102      	movs	r1, #2
    f2ec:	4620      	mov	r0, r4
    f2ee:	f7ff fc65 	bl	ebbc <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
    f2f2:	491c      	ldr	r1, [pc, #112]	; (f364 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
    f2f4:	4b1c      	ldr	r3, [pc, #112]	; (f368 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
    f2f6:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
    f2f8:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f2fc:	2200      	movs	r2, #0
	p.param = &conn->lll;
    f2fe:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
    f300:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
    f304:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
    f308:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f30a:	2001      	movs	r0, #1
    f30c:	4611      	mov	r1, r2
    f30e:	f7f8 ff09 	bl	8124 <mayfly_enqueue>
	LL_ASSERT(!err);
    f312:	b950      	cbnz	r0, f32a <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
    f314:	20ff      	movs	r0, #255	; 0xff
    f316:	f7ff fa25 	bl	e764 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    f31a:	4620      	mov	r0, r4
    f31c:	21ff      	movs	r1, #255	; 0xff
}
    f31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    f322:	f7ff bc4b 	b.w	ebbc <ull_conn_tx_lll_enqueue>
}
    f326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
    f32a:	4a10      	ldr	r2, [pc, #64]	; (f36c <ull_central_ticker_cb+0xb8>)
    f32c:	4910      	ldr	r1, [pc, #64]	; (f370 <ull_central_ticker_cb+0xbc>)
    f32e:	4811      	ldr	r0, [pc, #68]	; (f374 <ull_central_ticker_cb+0xc0>)
    f330:	f240 435c 	movw	r3, #1116	; 0x45c
    f334:	f006 ffdd 	bl	162f2 <assert_print>
    f338:	4040      	eors	r0, r0
    f33a:	f380 8811 	msr	BASEPRI, r0
    f33e:	f04f 0003 	mov.w	r0, #3
    f342:	df02      	svc	2
    f344:	e7e6      	b.n	f314 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
    f346:	4a09      	ldr	r2, [pc, #36]	; (f36c <ull_central_ticker_cb+0xb8>)
    f348:	490b      	ldr	r1, [pc, #44]	; (f378 <ull_central_ticker_cb+0xc4>)
    f34a:	480a      	ldr	r0, [pc, #40]	; (f374 <ull_central_ticker_cb+0xc0>)
    f34c:	f240 4349 	movw	r3, #1097	; 0x449
    f350:	f006 ffcf 	bl	162f2 <assert_print>
    f354:	4040      	eors	r0, r0
    f356:	f380 8811 	msr	BASEPRI, r0
    f35a:	f04f 0003 	mov.w	r0, #3
    f35e:	df02      	svc	2
    f360:	e7c0      	b.n	f2e4 <ull_central_ticker_cb+0x30>
    f362:	bf00      	nop
    f364:	20001d88 	.word	0x20001d88
    f368:	20000580 	.word	0x20000580
    f36c:	0001aaf0 	.word	0x0001aaf0
    f370:	0001a764 	.word	0x0001a764
    f374:	0001a580 	.word	0x0001a580
    f378:	0001a908 	.word	0x0001a908

0000f37c <ll_connect_disable>:
{
    f37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f380:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
    f382:	2000      	movs	r0, #0
    f384:	f7fc ffa0 	bl	c2c8 <ull_scan_is_enabled_get>
	if (!scan) {
    f388:	b368      	cbz	r0, f3e6 <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
    f38a:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
    f38c:	4604      	mov	r4, r0
    f38e:	b353      	cbz	r3, f3e6 <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
    f390:	f893 2020 	ldrb.w	r2, [r3, #32]
    f394:	f042 0202 	orr.w	r2, r2, #2
    f398:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
    f39c:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
    f39e:	b317      	cbz	r7, f3e6 <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
    f3a0:	4601      	mov	r1, r0
    f3a2:	2000      	movs	r0, #0
    f3a4:	f7fc ff0e 	bl	c1c4 <ull_scan_disable>
	if (!err) {
    f3a8:	4605      	mov	r5, r0
    f3aa:	b9c8      	cbnz	r0, f3e0 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
    f3ac:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
    f3ae:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
    f3b2:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
    f3b6:	f1b8 0f00 	cmp.w	r8, #0
    f3ba:	d018      	beq.n	f3ee <ll_connect_disable+0x72>
		ll_rx_link_release(link);
    f3bc:	4640      	mov	r0, r8
    f3be:	f7fc fa25 	bl	b80c <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f3c2:	2317      	movs	r3, #23
    f3c4:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
    f3c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f3cc:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		scan_lll = &scan->lll;
    f3d0:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
    f3d2:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
    f3d4:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
    f3d8:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
    f3dc:	f8c6 9000 	str.w	r9, [r6]
}
    f3e0:	4628      	mov	r0, r5
    f3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    f3e6:	250c      	movs	r5, #12
}
    f3e8:	4628      	mov	r0, r5
    f3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
    f3ee:	4a07      	ldr	r2, [pc, #28]	; (f40c <ll_connect_disable+0x90>)
    f3f0:	4907      	ldr	r1, [pc, #28]	; (f410 <ll_connect_disable+0x94>)
    f3f2:	4808      	ldr	r0, [pc, #32]	; (f414 <ll_connect_disable+0x98>)
    f3f4:	f240 236a 	movw	r3, #618	; 0x26a
    f3f8:	f006 ff7b 	bl	162f2 <assert_print>
    f3fc:	4040      	eors	r0, r0
    f3fe:	f380 8811 	msr	BASEPRI, r0
    f402:	f04f 0003 	mov.w	r0, #3
    f406:	df02      	svc	2
    f408:	e7d8      	b.n	f3bc <ll_connect_disable+0x40>
    f40a:	bf00      	nop
    f40c:	0001aaf0 	.word	0x0001aaf0
    f410:	0001a97c 	.word	0x0001a97c
    f414:	0001a580 	.word	0x0001a580

0000f418 <ll_enc_req_send>:
{
    f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f41c:	4607      	mov	r7, r0
    f41e:	4688      	mov	r8, r1
    f420:	4691      	mov	r9, r2
    f422:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
    f424:	f7fd fbca 	bl	cbbc <ll_connected_get>
	if (!conn) {
    f428:	2800      	cmp	r0, #0
    f42a:	d06a      	beq.n	f502 <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
    f42c:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    f430:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
    f434:	429a      	cmp	r2, r3
    f436:	4604      	mov	r4, r0
    f438:	d142      	bne.n	f4c0 <ll_enc_req_send+0xa8>
    f43a:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
    f43e:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
    f442:	429a      	cmp	r2, r3
    f444:	d003      	beq.n	f44e <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
    f446:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
    f44a:	2b03      	cmp	r3, #3
    f44c:	d038      	beq.n	f4c0 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
    f44e:	f7fd fbc7 	bl	cbe0 <ll_tx_mem_acquire>
	if (tx) {
    f452:	4605      	mov	r5, r0
    f454:	b3a0      	cbz	r0, f4c0 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
    f456:	3004      	adds	r0, #4
    f458:	f7ff ff10 	bl	f27c <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
    f45c:	4631      	mov	r1, r6
    f45e:	2210      	movs	r2, #16
    f460:	f204 1049 	addw	r0, r4, #329	; 0x149
    f464:	f007 f9c5 	bl	167f2 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
    f468:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    f46c:	f013 0318 	ands.w	r3, r3, #24
    f470:	d029      	beq.n	f4c6 <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
    f472:	2b18      	cmp	r3, #24
    f474:	d121      	bne.n	f4ba <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
    f476:	2208      	movs	r2, #8
    f478:	4641      	mov	r1, r8
    f47a:	f204 1041 	addw	r0, r4, #321	; 0x141
    f47e:	f007 f9b8 	bl	167f2 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
    f482:	f899 3000 	ldrb.w	r3, [r9]
    f486:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
    f48a:	f899 3001 	ldrb.w	r3, [r9, #1]
    f48e:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    f492:	792b      	ldrb	r3, [r5, #4]
    f494:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    f498:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    f49a:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
    f49c:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    f49e:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
    f4a0:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
    f4a2:	4629      	mov	r1, r5
    f4a4:	4638      	mov	r0, r7
    f4a6:	f7fd fba7 	bl	cbf8 <ll_tx_mem_enqueue>
    f4aa:	b930      	cbnz	r0, f4ba <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
    f4ac:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
    f4b0:	3301      	adds	r3, #1
    f4b2:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
    f4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
    f4ba:	4628      	mov	r0, r5
    f4bc:	f7fd fb96 	bl	cbec <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
    f4c0:	200c      	movs	r0, #12
}
    f4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    f4c6:	792b      	ldrb	r3, [r5, #4]
    f4c8:	f043 0303 	orr.w	r3, r3, #3
    f4cc:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
    f4ce:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
    f4d0:	2208      	movs	r2, #8
			pdu_data_tx->len =
    f4d2:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
    f4d4:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
    f4d6:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
    f4d8:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
    f4da:	18a8      	adds	r0, r5, r2
    f4dc:	f007 f989 	bl	167f2 <memcpy>
			enc_req->ediv[0] = ediv[0];
    f4e0:	f899 3000 	ldrb.w	r3, [r9]
    f4e4:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
    f4e6:	f899 3001 	ldrb.w	r3, [r9, #1]
    f4ea:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
    f4ec:	2108      	movs	r1, #8
    f4ee:	f105 0012 	add.w	r0, r5, #18
    f4f2:	f000 fe31 	bl	10158 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
    f4f6:	2104      	movs	r1, #4
    f4f8:	f105 001a 	add.w	r0, r5, #26
    f4fc:	f000 fe2c 	bl	10158 <lll_csrand_get>
    f500:	e7cf      	b.n	f4a2 <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f502:	2002      	movs	r0, #2
}
    f504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f508 <ull_central_reset>:
{
    f508:	b530      	push	{r4, r5, lr}
    f50a:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
    f50c:	a801      	add	r0, sp, #4
    f50e:	f7ff ff35 	bl	f37c <ll_connect_disable>
	if (!err) {
    f512:	4604      	mov	r4, r0
    f514:	b110      	cbz	r0, f51c <ull_central_reset+0x14>
}
    f516:	4620      	mov	r0, r4
    f518:	b003      	add	sp, #12
    f51a:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
    f51c:	f7fc fed4 	bl	c2c8 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
    f520:	4605      	mov	r5, r0
    f522:	b150      	cbz	r0, f53a <ull_central_reset+0x32>
		scan->is_enabled = 0U;
    f524:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
		scan->lll.conn = NULL;
    f528:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
    f52a:	f36f 0300 	bfc	r3, #0, #1
}
    f52e:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
    f530:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		scan->lll.conn = NULL;
    f534:	622a      	str	r2, [r5, #32]
}
    f536:	b003      	add	sp, #12
    f538:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
    f53a:	4a07      	ldr	r2, [pc, #28]	; (f558 <ull_central_reset+0x50>)
    f53c:	4907      	ldr	r1, [pc, #28]	; (f55c <ull_central_reset+0x54>)
    f53e:	4808      	ldr	r0, [pc, #32]	; (f560 <ull_central_reset+0x58>)
    f540:	f44f 733e 	mov.w	r3, #760	; 0x2f8
    f544:	f006 fed5 	bl	162f2 <assert_print>
    f548:	4040      	eors	r0, r0
    f54a:	f380 8811 	msr	BASEPRI, r0
    f54e:	f04f 0003 	mov.w	r0, #3
    f552:	df02      	svc	2
    f554:	e7e6      	b.n	f524 <ull_central_reset+0x1c>
    f556:	bf00      	nop
    f558:	0001aaf0 	.word	0x0001aaf0
    f55c:	0001ab48 	.word	0x0001ab48
    f560:	0001a580 	.word	0x0001a580

0000f564 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
    f564:	6883      	ldr	r3, [r0, #8]
{
    f566:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
    f568:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
    f56a:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
    f56c:	b31c      	cbz	r4, f5b6 <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
    f56e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
    f570:	2200      	movs	r2, #0
    f572:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
    f574:	b163      	cbz	r3, f590 <ull_central_cleanup+0x2c>
    f576:	4a1e      	ldr	r2, [pc, #120]	; (f5f0 <ull_central_cleanup+0x8c>)
    f578:	491e      	ldr	r1, [pc, #120]	; (f5f4 <ull_central_cleanup+0x90>)
    f57a:	481f      	ldr	r0, [pc, #124]	; (f5f8 <ull_central_cleanup+0x94>)
    f57c:	f44f 7345 	mov.w	r3, #788	; 0x314
    f580:	f006 feb7 	bl	162f2 <assert_print>
    f584:	4040      	eors	r0, r0
    f586:	f380 8811 	msr	BASEPRI, r0
    f58a:	f04f 0003 	mov.w	r0, #3
    f58e:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
    f590:	f104 0130 	add.w	r1, r4, #48	; 0x30
    f594:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f598:	f7f8 fd46 	bl	8028 <memq_deinit>
	LL_ASSERT(link);
    f59c:	4606      	mov	r6, r0
    f59e:	b1c0      	cbz	r0, f5d2 <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
    f5a0:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
    f5a2:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
    f5a4:	f7fd faf4 	bl	cb90 <ll_conn_release>
	scan->is_enabled = 0U;
    f5a8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f5ac:	f36f 0300 	bfc	r3, #0, #1
    f5b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
    f5b4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
    f5b6:	4a0e      	ldr	r2, [pc, #56]	; (f5f0 <ull_central_cleanup+0x8c>)
    f5b8:	4910      	ldr	r1, [pc, #64]	; (f5fc <ull_central_cleanup+0x98>)
    f5ba:	480f      	ldr	r0, [pc, #60]	; (f5f8 <ull_central_cleanup+0x94>)
    f5bc:	f240 3311 	movw	r3, #785	; 0x311
    f5c0:	f006 fe97 	bl	162f2 <assert_print>
    f5c4:	4040      	eors	r0, r0
    f5c6:	f380 8811 	msr	BASEPRI, r0
    f5ca:	f04f 0003 	mov.w	r0, #3
    f5ce:	df02      	svc	2
    f5d0:	e7cd      	b.n	f56e <ull_central_cleanup+0xa>
	LL_ASSERT(link);
    f5d2:	4a07      	ldr	r2, [pc, #28]	; (f5f0 <ull_central_cleanup+0x8c>)
    f5d4:	490a      	ldr	r1, [pc, #40]	; (f600 <ull_central_cleanup+0x9c>)
    f5d6:	4808      	ldr	r0, [pc, #32]	; (f5f8 <ull_central_cleanup+0x94>)
    f5d8:	f240 3317 	movw	r3, #791	; 0x317
    f5dc:	f006 fe89 	bl	162f2 <assert_print>
    f5e0:	4040      	eors	r0, r0
    f5e2:	f380 8811 	msr	BASEPRI, r0
    f5e6:	f04f 0003 	mov.w	r0, #3
    f5ea:	df02      	svc	2
    f5ec:	e7d8      	b.n	f5a0 <ull_central_cleanup+0x3c>
    f5ee:	bf00      	nop
    f5f0:	0001aaf0 	.word	0x0001aaf0
    f5f4:	0001ab5c 	.word	0x0001ab5c
    f5f8:	0001a580 	.word	0x0001a580
    f5fc:	0001ab50 	.word	0x0001ab50
    f600:	0001a97c 	.word	0x0001a97c

0000f604 <ull_central_chm_update>:
{
    f604:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
    f606:	2000      	movs	r0, #0
    f608:	f7fd fad8 	bl	cbbc <ll_connected_get>
		if (!conn || conn->lll.role) {
    f60c:	4604      	mov	r4, r0
    f60e:	b1d8      	cbz	r0, f648 <ull_central_chm_update+0x44>
    f610:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    f614:	2b00      	cmp	r3, #0
    f616:	db17      	blt.n	f648 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
    f618:	f7ff fe0c 	bl	f234 <ull_conn_llcp_req>
		if (ret) {
    f61c:	4605      	mov	r5, r0
    f61e:	b988      	cbnz	r0, f644 <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
    f620:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
    f624:	f000 fa38 	bl	fa98 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
    f628:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
    f62c:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
    f630:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    f634:	2102      	movs	r1, #2
		conn->llcp_req++;
    f636:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
    f638:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_CHAN_MAP;
    f63c:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		conn->llcp_req++;
    f640:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
}
    f644:	4628      	mov	r0, r5
    f646:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    f648:	2500      	movs	r5, #0
}
    f64a:	4628      	mov	r0, r5
    f64c:	bd38      	pop	{r3, r4, r5, pc}
    f64e:	bf00      	nop

0000f650 <ticker_op_cb>:
	*((uint32_t volatile *)param) = status;
    f650:	6008      	str	r0, [r1, #0]
}
    f652:	4770      	bx	lr

0000f654 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    f654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f658:	b091      	sub	sp, #68	; 0x44
    f65a:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    f65e:	9305      	str	r3, [sp, #20]
	if (conn_curr->lll.role) {
    f660:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
    f664:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    f666:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    f668:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    f66c:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
    f66e:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
    f670:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
    f672:	da02      	bge.n	f67a <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    f674:	4613      	mov	r3, r2
    f676:	3314      	adds	r3, #20
    f678:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f67a:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = TICKER_NULL;
    f67c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f680:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
    f684:	f8df a24c 	ldr.w	sl, [pc, #588]	; f8d4 <win_offset_calc.constprop.0+0x280>
	ticker_id = ticker_id_prev = ticker_id_other = TICKER_NULL;
    f688:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
    f68c:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = TICKER_NULL;
    f68e:	f8cd 9018 	str.w	r9, [sp, #24]
		ticks_anchor_prev = offset_index = offset = 0U;
    f692:	46b3      	mov	fp, r6
	ticks_slot_abs_prev = 0U;
    f694:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f696:	4635      	mov	r5, r6
    f698:	e044      	b.n	f724 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == TICKER_NULL) {
    f69a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    f69e:	2bff      	cmp	r3, #255	; 0xff
    f6a0:	d064      	beq.n	f76c <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != TICKER_NULL) &&
    f6a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    f6a6:	d011      	beq.n	f6cc <win_offset_calc.constprop.0+0x78>
    f6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f6aa:	455a      	cmp	r2, fp
    f6ac:	d00e      	beq.n	f6cc <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
    f6ae:	498a      	ldr	r1, [pc, #552]	; (f8d8 <win_offset_calc.constprop.0+0x284>)
    f6b0:	488a      	ldr	r0, [pc, #552]	; (f8dc <win_offset_calc.constprop.0+0x288>)
    f6b2:	f44f 73cf 	mov.w	r3, #414	; 0x19e
    f6b6:	4652      	mov	r2, sl
    f6b8:	f006 fe1b 	bl	162f2 <assert_print>
    f6bc:	4040      	eors	r0, r0
    f6be:	f380 8811 	msr	BASEPRI, r0
    f6c2:	f04f 0003 	mov.w	r0, #3
    f6c6:	df02      	svc	2
		if ((ticker_id < TICKER_ID_SCAN_BASE) ||
    f6c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    f6cc:	1e9a      	subs	r2, r3, #2
    f6ce:	2a01      	cmp	r2, #1
    f6d0:	d824      	bhi.n	f71c <win_offset_calc.constprop.0+0xc8>
		if (ticker_id < TICKER_ID_CONN_BASE) {
    f6d2:	2b02      	cmp	r3, #2
    f6d4:	f000 80da 	beq.w	f88c <win_offset_calc.constprop.0+0x238>
		if (ticker_id_other != TICKER_NULL) {
    f6d8:	9b06      	ldr	r3, [sp, #24]
    f6da:	2bff      	cmp	r3, #255	; 0xff
    f6dc:	d176      	bne.n	f7cc <win_offset_calc.constprop.0+0x178>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    f6de:	2000      	movs	r0, #0
    f6e0:	f7fd fa64 	bl	cbac <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
    f6e4:	9b07      	ldr	r3, [sp, #28]
    f6e6:	4283      	cmp	r3, r0
    f6e8:	d018      	beq.n	f71c <win_offset_calc.constprop.0+0xc8>
    f6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f6ec:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    f6f0:	2a00      	cmp	r2, #0
    f6f2:	d17a      	bne.n	f7ea <win_offset_calc.constprop.0+0x196>
    f6f4:	2b00      	cmp	r3, #0
    f6f6:	db11      	blt.n	f71c <win_offset_calc.constprop.0+0xc8>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
    f6f8:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
    f6fa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
    f6fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
    f702:	3328      	adds	r3, #40	; 0x28
    f704:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    f706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f708:	681b      	ldr	r3, [r3, #0]
    f70a:	454b      	cmp	r3, r9
    f70c:	d37b      	bcc.n	f806 <win_offset_calc.constprop.0+0x1b2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    f70e:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
    f710:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    f714:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
    f716:	464d      	mov	r5, r9
    f718:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
    f71c:	783b      	ldrb	r3, [r7, #0]
    f71e:	42a3      	cmp	r3, r4
    f720:	f240 80b9 	bls.w	f896 <win_offset_calc.constprop.0+0x242>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    f724:	ab0f      	add	r3, sp, #60	; 0x3c
    f726:	9302      	str	r3, [sp, #8]
    f728:	4b6d      	ldr	r3, [pc, #436]	; (f8e0 <win_offset_calc.constprop.0+0x28c>)
    f72a:	9301      	str	r3, [sp, #4]
    f72c:	ab0d      	add	r3, sp, #52	; 0x34
    f72e:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
    f730:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    f732:	ab0e      	add	r3, sp, #56	; 0x38
    f734:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    f738:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    f73a:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    f73c:	f7f9 ff96 	bl	966c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f740:	2802      	cmp	r0, #2
    f742:	d047      	beq.n	f7d4 <win_offset_calc.constprop.0+0x180>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    f744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
    f746:	2b00      	cmp	r3, #0
    f748:	d0a7      	beq.n	f69a <win_offset_calc.constprop.0+0x46>
    f74a:	4966      	ldr	r1, [pc, #408]	; (f8e4 <win_offset_calc.constprop.0+0x290>)
    f74c:	4863      	ldr	r0, [pc, #396]	; (f8dc <win_offset_calc.constprop.0+0x288>)
    f74e:	f240 1395 	movw	r3, #405	; 0x195
    f752:	4652      	mov	r2, sl
    f754:	f006 fdcd 	bl	162f2 <assert_print>
    f758:	4040      	eors	r0, r0
    f75a:	f380 8811 	msr	BASEPRI, r0
    f75e:	f04f 0003 	mov.w	r0, #3
    f762:	df02      	svc	2
		if (ticker_id == TICKER_NULL) {
    f764:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    f768:	2bff      	cmp	r3, #255	; 0xff
    f76a:	d19a      	bne.n	f6a2 <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    f76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f76e:	681b      	ldr	r3, [r3, #0]
    f770:	429d      	cmp	r5, r3
    f772:	bf38      	it	cc
    f774:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
    f776:	783b      	ldrb	r3, [r7, #0]
    f778:	42a3      	cmp	r3, r4
    f77a:	d925      	bls.n	f7c8 <win_offset_calc.constprop.0+0x174>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
    f77c:	9b04      	ldr	r3, [sp, #16]
    f77e:	495a      	ldr	r1, [pc, #360]	; (f8e8 <win_offset_calc.constprop.0+0x294>)
			if (offset >= conn_interval) {
    f780:	9805      	ldr	r0, [sp, #20]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
    f782:	442b      	add	r3, r5
    f784:	fba1 2303 	umull	r2, r3, r1, r3
    f788:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
    f78c:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
    f78e:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
    f792:	f240 8096 	bls.w	f8c2 <win_offset_calc.constprop.0+0x26e>
    f796:	e9dd 6c04 	ldrd	r6, ip, [sp, #16]
    f79a:	e002      	b.n	f7a2 <win_offset_calc.constprop.0+0x14e>
    f79c:	4594      	cmp	ip, r2
    f79e:	f240 8090 	bls.w	f8c2 <win_offset_calc.constprop.0+0x26e>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
    f7a2:	eb08 0044 	add.w	r0, r8, r4, lsl #1
	dst[0] = val;
    f7a6:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
    f7aa:	0a12      	lsrs	r2, r2, #8
    f7ac:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
    f7ae:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
    f7b0:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
    f7b2:	3528      	adds	r5, #40	; 0x28
			offset_index++;
    f7b4:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
    f7b6:	1973      	adds	r3, r6, r5
    f7b8:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
    f7bc:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
    f7be:	f3c3 124f 	ubfx	r2, r3, #5, #16
    f7c2:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
    f7c6:	d8e9      	bhi.n	f79c <win_offset_calc.constprop.0+0x148>
		*ticks_to_offset_next = ticks_to_expire_prev;
    f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7ca:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
    f7cc:	703c      	strb	r4, [r7, #0]
}
    f7ce:	b011      	add	sp, #68	; 0x44
    f7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
    f7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f7d6:	2b02      	cmp	r3, #2
    f7d8:	d1b4      	bne.n	f744 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    f7da:	2102      	movs	r1, #2
    f7dc:	2000      	movs	r0, #0
    f7de:	f7f9 ff8b 	bl	96f8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f7e4:	2b02      	cmp	r3, #2
    f7e6:	d0f8      	beq.n	f7da <win_offset_calc.constprop.0+0x186>
    f7e8:	e7ac      	b.n	f744 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
    f7ea:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
    f7ec:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
    f7ee:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
    f7f2:	da5a      	bge.n	f8aa <win_offset_calc.constprop.0+0x256>
				ticks_slot_abs_curr += ticks_slot_margin;
    f7f4:	f101 033c 	add.w	r3, r1, #60	; 0x3c
    f7f8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    f7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7fc:	681b      	ldr	r3, [r3, #0]
    f7fe:	454b      	cmp	r3, r9
				ticks_slot_margin =
    f800:	f04f 0b14 	mov.w	fp, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    f804:	d283      	bcs.n	f70e <win_offset_calc.constprop.0+0xba>
				if (ticks_to_expire_prev <
    f806:	429d      	cmp	r5, r3
    f808:	bf38      	it	cc
    f80a:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
    f80c:	783b      	ldrb	r3, [r7, #0]
    f80e:	42a3      	cmp	r3, r4
    f810:	d931      	bls.n	f876 <win_offset_calc.constprop.0+0x222>
					(ticks_slot_abs_prev + ticks_slot_abs +
    f812:	9b04      	ldr	r3, [sp, #16]
    f814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f816:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
    f81a:	4413      	add	r3, r2
    f81c:	449b      	add	fp, r3
    f81e:	46b0      	mov	r8, r6
    f820:	462e      	mov	r6, r5
    f822:	465d      	mov	r5, fp
    f824:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
    f828:	e013      	b.n	f852 <win_offset_calc.constprop.0+0x1fe>
					if (offset >= conn_interval) {
    f82a:	9a05      	ldr	r2, [sp, #20]
					offset = (ticks_to_expire_prev +
    f82c:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
    f830:	4590      	cmp	r8, r2
					ticks_to_expire_prev +=
    f832:	f106 0628 	add.w	r6, r6, #40	; 0x28
    f836:	ea4f 2018 	mov.w	r0, r8, lsr #8
						  ticks_slot_abs_prev) /
    f83a:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
    f83e:	d244      	bcs.n	f8ca <win_offset_calc.constprop.0+0x276>
	dst[0] = val;
    f840:	f80b 3014 	strb.w	r3, [fp, r4, lsl #1]
	dst[1] = val >> 8;
    f844:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
    f848:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
    f84a:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
    f84e:	42a3      	cmp	r3, r4
    f850:	d931      	bls.n	f8b6 <win_offset_calc.constprop.0+0x262>
				       (ticker_ticks_diff_get(
    f852:	4631      	mov	r1, r6
    f854:	4648      	mov	r0, r9
    f856:	f7f9 ff69 	bl	972c <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
    f85a:	9b04      	ldr	r3, [sp, #16]
    f85c:	4a22      	ldr	r2, [pc, #136]	; (f8e8 <win_offset_calc.constprop.0+0x294>)
    f85e:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
    f860:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
    f862:	eb0b 0c44 	add.w	ip, fp, r4, lsl #1
						  ticks_slot_abs_prev) /
    f866:	fba2 2303 	umull	r2, r3, r2, r3
					offset_index++;
    f86a:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
    f86e:	d2dc      	bcs.n	f82a <win_offset_calc.constprop.0+0x1d6>
    f870:	4635      	mov	r5, r6
    f872:	4646      	mov	r6, r8
    f874:	46d8      	mov	r8, fp
				*ticks_to_offset_next = ticks_to_expire_prev;
    f876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f878:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    f87a:	9b05      	ldr	r3, [sp, #20]
    f87c:	42b3      	cmp	r3, r6
    f87e:	f63f af46 	bhi.w	f70e <win_offset_calc.constprop.0+0xba>
	if (ticker_id == TICKER_NULL) {
    f882:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    f886:	2bff      	cmp	r3, #255	; 0xff
    f888:	d1a0      	bne.n	f7cc <win_offset_calc.constprop.0+0x178>
    f88a:	e76f      	b.n	f76c <win_offset_calc.constprop.0+0x118>
			ticker_id_other = ticker_id;
    f88c:	9306      	str	r3, [sp, #24]
	} while (offset_index < *offset_max);
    f88e:	783b      	ldrb	r3, [r7, #0]
    f890:	42a3      	cmp	r3, r4
    f892:	f63f af47 	bhi.w	f724 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == TICKER_NULL) {
    f896:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    f89a:	2bff      	cmp	r3, #255	; 0xff
    f89c:	d196      	bne.n	f7cc <win_offset_calc.constprop.0+0x178>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    f89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8a0:	681b      	ldr	r3, [r3, #0]
    f8a2:	429d      	cmp	r5, r3
    f8a4:	bf38      	it	cc
    f8a6:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
    f8a8:	e78e      	b.n	f7c8 <win_offset_calc.constprop.0+0x174>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
    f8aa:	f101 0328 	add.w	r3, r1, #40	; 0x28
    f8ae:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
    f8b0:	f04f 0b00 	mov.w	fp, #0
    f8b4:	e727      	b.n	f706 <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
    f8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8b8:	4635      	mov	r5, r6
    f8ba:	601d      	str	r5, [r3, #0]
    f8bc:	4646      	mov	r6, r8
    f8be:	46d8      	mov	r8, fp
				if (offset >= conn_interval) {
    f8c0:	e725      	b.n	f70e <win_offset_calc.constprop.0+0xba>
		*ticks_to_offset_next = ticks_to_expire_prev;
    f8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
    f8c4:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
    f8c6:	601d      	str	r5, [r3, #0]
    f8c8:	e780      	b.n	f7cc <win_offset_calc.constprop.0+0x178>
				*ticks_to_offset_next = ticks_to_expire_prev;
    f8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f8cc:	2500      	movs	r5, #0
    f8ce:	46d8      	mov	r8, fp
    f8d0:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    f8d2:	e7d6      	b.n	f882 <win_offset_calc.constprop.0+0x22e>
    f8d4:	0001ab74 	.word	0x0001ab74
    f8d8:	0001a5e0 	.word	0x0001a5e0
    f8dc:	0001a580 	.word	0x0001a580
    f8e0:	0000f651 	.word	0x0000f651
    f8e4:	0001abb8 	.word	0x0001abb8
    f8e8:	cccccccd 	.word	0xcccccccd

0000f8ec <after_match_slot_get.constprop.0>:
static uint8_t after_match_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
    f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8f0:	b08d      	sub	sp, #52	; 0x34
	ticks_to_expire = ticks_to_expire_prev = 0U;
    f8f2:	2700      	movs	r7, #0
	ticker_id = ticker_id_prev = TICKER_NULL;
    f8f4:	25ff      	movs	r5, #255	; 0xff
static uint8_t after_match_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
    f8f6:	9307      	str	r3, [sp, #28]
    f8f8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; f9cc <after_match_slot_get.constprop.0+0xe0>
	ticker_id = ticker_id_prev = TICKER_NULL;
    f8fc:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    f900:	1d0b      	adds	r3, r1, #4
static uint8_t after_match_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
    f902:	4604      	mov	r4, r0
    f904:	4616      	mov	r6, r2
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    f906:	9306      	str	r3, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = 0U;
    f908:	970a      	str	r7, [sp, #40]	; 0x28
    f90a:	46bb      	mov	fp, r7
    f90c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    f910:	f10d 0828 	add.w	r8, sp, #40	; 0x28
		ret_cb = TICKER_STATUS_BUSY;
    f914:	2302      	movs	r3, #2
    f916:	930b      	str	r3, [sp, #44]	; 0x2c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    f918:	e9cd a901 	strd	sl, r9, [sp, #4]
    f91c:	f8cd 8000 	str.w	r8, [sp]
    f920:	4633      	mov	r3, r6
    f922:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    f926:	4621      	mov	r1, r4
    f928:	2000      	movs	r0, #0
    f92a:	f7f9 fe9f 	bl	966c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f92e:	2802      	cmp	r0, #2
    f930:	d041      	beq.n	f9b6 <after_match_slot_get.constprop.0+0xca>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    f932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
    f934:	bb1b      	cbnz	r3, f97e <after_match_slot_get.constprop.0+0x92>
		if (ticker_id == TICKER_NULL) {
    f936:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f93a:	2bff      	cmp	r3, #255	; 0xff
    f93c:	d030      	beq.n	f9a0 <after_match_slot_get.constprop.0+0xb4>
		if (!ticker_match_op_cb(ticker_id, 0, 0, NULL)) {
    f93e:	2b03      	cmp	r3, #3
    f940:	d1e8      	bne.n	f914 <after_match_slot_get.constprop.0+0x28>
	conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    f942:	2000      	movs	r0, #0
    f944:	f7fd f932 	bl	cbac <ll_conn_get>
	if (!conn || conn->lll.role) {
    f948:	2800      	cmp	r0, #0
    f94a:	d0e3      	beq.n	f914 <after_match_slot_get.constprop.0+0x28>
    f94c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    f950:	2b00      	cmp	r3, #0
    f952:	dbdf      	blt.n	f914 <after_match_slot_get.constprop.0+0x28>
		if ((ticker_id_prev != TICKER_NULL) &&
    f954:	2dff      	cmp	r5, #255	; 0xff
		ticks_slot_abs_curr += hdr->ticks_slot;
    f956:	6902      	ldr	r2, [r0, #16]
		ticks_to_expire_normal = ticks_to_expire;
    f958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		if ((ticker_id_prev != TICKER_NULL) &&
    f95a:	d00b      	beq.n	f974 <after_match_slot_get.constprop.0+0x88>
		    (ticker_ticks_diff_get(ticks_to_expire_normal,
    f95c:	4659      	mov	r1, fp
    f95e:	4618      	mov	r0, r3
    f960:	9205      	str	r2, [sp, #20]
    f962:	9304      	str	r3, [sp, #16]
    f964:	f7f9 fee2 	bl	972c <ticker_ticks_diff_get>
		     (ticks_slot_abs_prev + ticks_slot_abs))) {
    f968:	9b06      	ldr	r3, [sp, #24]
    f96a:	19d9      	adds	r1, r3, r7
		if ((ticker_id_prev != TICKER_NULL) &&
    f96c:	4288      	cmp	r0, r1
    f96e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    f972:	d817      	bhi.n	f9a4 <after_match_slot_get.constprop.0+0xb8>
		ticker_id_prev = ticker_id;
    f974:	f89d 5027 	ldrb.w	r5, [sp, #39]	; 0x27
		ticks_slot_abs_prev = ticks_slot_abs_curr;
    f978:	4617      	mov	r7, r2
		ticks_to_expire_prev = ticks_to_expire_normal;
    f97a:	469b      	mov	fp, r3
    f97c:	e7ca      	b.n	f914 <after_match_slot_get.constprop.0+0x28>
		LL_ASSERT(success);
    f97e:	4a14      	ldr	r2, [pc, #80]	; (f9d0 <after_match_slot_get.constprop.0+0xe4>)
    f980:	4914      	ldr	r1, [pc, #80]	; (f9d4 <after_match_slot_get.constprop.0+0xe8>)
    f982:	4815      	ldr	r0, [pc, #84]	; (f9d8 <after_match_slot_get.constprop.0+0xec>)
    f984:	f44f 731b 	mov.w	r3, #620	; 0x26c
    f988:	f006 fcb3 	bl	162f2 <assert_print>
    f98c:	4040      	eors	r0, r0
    f98e:	f380 8811 	msr	BASEPRI, r0
    f992:	f04f 0003 	mov.w	r0, #3
    f996:	df02      	svc	2
		if (ticker_id == TICKER_NULL) {
    f998:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f99c:	2bff      	cmp	r3, #255	; 0xff
    f99e:	d1ce      	bne.n	f93e <after_match_slot_get.constprop.0+0x52>
	if (ticker_id_prev != TICKER_NULL) {
    f9a0:	2dff      	cmp	r5, #255	; 0xff
    f9a2:	d004      	beq.n	f9ae <after_match_slot_get.constprop.0+0xc2>
		*ticks_to_expire_match = ticks_to_expire_prev;
    f9a4:	9b07      	ldr	r3, [sp, #28]
    f9a6:	f8c3 b000 	str.w	fp, [r3]
		*ticks_slot_match = ticks_slot_abs_prev;
    f9aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f9ac:	601f      	str	r7, [r3, #0]
}
    f9ae:	4628      	mov	r0, r5
    f9b0:	b00d      	add	sp, #52	; 0x34
    f9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
    f9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9b8:	2b02      	cmp	r3, #2
    f9ba:	d1ba      	bne.n	f932 <after_match_slot_get.constprop.0+0x46>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    f9bc:	4621      	mov	r1, r4
    f9be:	2000      	movs	r0, #0
    f9c0:	f7f9 fe9a 	bl	96f8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9c6:	2b02      	cmp	r3, #2
    f9c8:	d0f8      	beq.n	f9bc <after_match_slot_get.constprop.0+0xd0>
    f9ca:	e7b2      	b.n	f932 <after_match_slot_get.constprop.0+0x46>
    f9cc:	0000f651 	.word	0x0000f651
    f9d0:	0001ab74 	.word	0x0001ab74
    f9d4:	0001abb8 	.word	0x0001abb8
    f9d8:	0001a580 	.word	0x0001a580

0000f9dc <ull_sched_mfy_after_cen_offset_get>:
	struct lll_scan *lll = p->param;
    f9dc:	68c3      	ldr	r3, [r0, #12]
	after_cen_offset_get(lll->conn->interval,
    f9de:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
    f9e0:	6859      	ldr	r1, [r3, #4]
	after_cen_offset_get(lll->conn->interval,
    f9e2:	6858      	ldr	r0, [r3, #4]
			     (ticks_slot_overhead + conn->ull.ticks_slot),
    f9e4:	6809      	ldr	r1, [r1, #0]
	after_cen_offset_get(lll->conn->interval,
    f9e6:	89c0      	ldrh	r0, [r0, #14]
    f9e8:	6909      	ldr	r1, [r1, #16]
    f9ea:	3310      	adds	r3, #16
    f9ec:	f7f2 bea4 	b.w	2738 <after_cen_offset_get>

0000f9f0 <ull_sched_mfy_win_offset_use>:
{
    f9f0:	b510      	push	{r4, lr}
    f9f2:	4604      	mov	r4, r0
	after_cen_offset_get(conn->lll.interval,
    f9f4:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
    f9f8:	6901      	ldr	r1, [r0, #16]
    f9fa:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    f9fe:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    fa00:	f7f2 fe9a 	bl	2738 <after_cen_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
    fa04:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    fa08:	4908      	ldr	r1, [pc, #32]	; (fa2c <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
    fa0a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
    fa0e:	fba1 1303 	umull	r1, r3, r1, r3
    fa12:	0a9b      	lsrs	r3, r3, #10
    fa14:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
    fa18:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
    fa1a:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    fa1c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    fa20:	2204      	movs	r2, #4
    fa22:	f362 0302 	bfi	r3, r2, #0, #3
    fa26:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    fa2a:	bd10      	pop	{r4, pc}
    fa2c:	d1b71759 	.word	0xd1b71759

0000fa30 <ull_sched_mfy_free_win_offset_calc>:
{
    fa30:	b510      	push	{r4, lr}
    fa32:	b084      	sub	sp, #16
    fa34:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
    fa36:	f8d0 c178 	ldr.w	ip, [r0, #376]	; 0x178
    fa3a:	f8cd c004 	str.w	ip, [sp, #4]
    fa3e:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
    fa42:	2206      	movs	r2, #6
	uint32_t ticks_to_offset_default = 0U;
    fa44:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
    fa46:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
    fa4a:	9300      	str	r3, [sp, #0]
    fa4c:	aa03      	add	r2, sp, #12
    fa4e:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
	uint32_t ticks_to_offset_default = 0U;
    fa52:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
    fa54:	f7ff fdfe 	bl	f654 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
    fa58:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    fa5c:	2208      	movs	r2, #8
    fa5e:	f362 0303 	bfi	r3, r2, #0, #4
    fa62:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
    fa66:	b004      	add	sp, #16
    fa68:	bd10      	pop	{r4, pc}
    fa6a:	bf00      	nop

0000fa6c <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
    fa6c:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
    fa6e:	4c08      	ldr	r4, [pc, #32]	; (fa90 <ll_chm_update+0x24>)
    fa70:	2205      	movs	r2, #5
{
    fa72:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
    fa74:	4620      	mov	r0, r4
    fa76:	f006 febc 	bl	167f2 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
    fa7a:	2105      	movs	r1, #5
    fa7c:	4620      	mov	r0, r4
    fa7e:	f7f8 fc4f 	bl	8320 <util_ones_count_get>
    fa82:	4b04      	ldr	r3, [pc, #16]	; (fa94 <ll_chm_update+0x28>)
    fa84:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
    fa86:	f7ff fdbd 	bl	f604 <ull_central_chm_update>
}
    fa8a:	2000      	movs	r0, #0
    fa8c:	bd10      	pop	{r4, pc}
    fa8e:	bf00      	nop
    fa90:	20000590 	.word	0x20000590
    fa94:	20000774 	.word	0x20000774

0000fa98 <ull_chan_map_get>:
{
    fa98:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
    fa9a:	4903      	ldr	r1, [pc, #12]	; (faa8 <ull_chan_map_get+0x10>)
    fa9c:	2205      	movs	r2, #5
    fa9e:	f006 fea8 	bl	167f2 <memcpy>
	return count;
    faa2:	4b02      	ldr	r3, [pc, #8]	; (faac <ull_chan_map_get+0x14>)
}
    faa4:	7818      	ldrb	r0, [r3, #0]
    faa6:	bd08      	pop	{r3, pc}
    faa8:	20000590 	.word	0x20000590
    faac:	20000774 	.word	0x20000774

0000fab0 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
    fab0:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    fab2:	fb02 1c01 	mla	ip, r2, r1, r1
    fab6:	7802      	ldrb	r2, [r0, #0]
    fab8:	491c      	ldr	r1, [pc, #112]	; (fb2c <lll_chan_sel_1+0x7c>)
{
    faba:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    fabe:	4494      	add	ip, r2
    fac0:	fb81 210c 	smull	r2, r1, r1, ip
    fac4:	4461      	add	r1, ip
    fac6:	1149      	asrs	r1, r1, #5
    fac8:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    facc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
    fad0:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    fad2:	ebac 0101 	sub.w	r1, ip, r1
    fad6:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    fad8:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    fada:	08c4      	lsrs	r4, r0, #3
    fadc:	f001 0107 	and.w	r1, r1, #7
    fae0:	f813 c004 	ldrb.w	ip, [r3, r4]
    fae4:	fa4c f101 	asr.w	r1, ip, r1
    fae8:	f011 0101 	ands.w	r1, r1, #1
    faec:	d11d      	bne.n	fb2a <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
    faee:	fbb0 f2f5 	udiv	r2, r0, r5
    faf2:	fb05 0212 	mls	r2, r5, r2, r0
    faf6:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
    faf8:	f103 3eff 	add.w	lr, r3, #4294967295
    fafc:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
    fafe:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
    fb00:	f100 0c08 	add.w	ip, r0, #8
    fb04:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
    fb08:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
    fb0c:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
    fb10:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
    fb14:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
    fb18:	d002      	beq.n	fb20 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
    fb1a:	b132      	cbz	r2, fb2a <lll_chan_sel_1+0x7a>
				chan_index--;
    fb1c:	3a01      	subs	r2, #1
    fb1e:	b2d2      	uxtb	r2, r2
			chan_next++;
    fb20:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
    fb22:	4584      	cmp	ip, r0
    fb24:	d1f2      	bne.n	fb0c <lll_chan_sel_1+0x5c>
	while (byte_count--) {
    fb26:	45a6      	cmp	lr, r4
    fb28:	d1ea      	bne.n	fb00 <lll_chan_sel_1+0x50>
}
    fb2a:	bd30      	pop	{r4, r5, pc}
    fb2c:	dd67c8a7 	.word	0xdd67c8a7

0000fb30 <lll_chan_id>:
	return aa_ms ^ aa_ls;
    fb30:	8842      	ldrh	r2, [r0, #2]
    fb32:	8800      	ldrh	r0, [r0, #0]
}
    fb34:	4050      	eors	r0, r2
    fb36:	4770      	bx	lr

0000fb38 <lll_chan_sel_2>:
{
    fb38:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    fb3a:	4d2f      	ldr	r5, [pc, #188]	; (fbf8 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    fb3c:	4c2f      	ldr	r4, [pc, #188]	; (fbfc <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
    fb3e:	4048      	eors	r0, r1
    fb40:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    fb44:	0a07      	lsrs	r7, r0, #8
    fb46:	b2c0      	uxtb	r0, r0
    fb48:	eb07 2787 	add.w	r7, r7, r7, lsl #10
    fb4c:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
    fb50:	ea05 0647 	and.w	r6, r5, r7, lsl #1
    fb54:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    fb58:	ea04 1747 	and.w	r7, r4, r7, lsl #5
    fb5c:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    fb60:	433e      	orrs	r6, r7
    fb62:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    fb66:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    fb6a:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
    fb6e:	eb06 260e 	add.w	r6, r6, lr, lsl #8
    fb72:	eb00 2007 	add.w	r0, r0, r7, lsl #8
    fb76:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    fb78:	f3c0 4007 	ubfx	r0, r0, #16, #8
    fb7c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
    fb80:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
    fb84:	f10c 3cff 	add.w	ip, ip, #4294967295
	return ((uint32_t)a * 17U + b) & 0xFFFF;
    fb88:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
    fb8a:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
    fb8e:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
    fb90:	d1d8      	bne.n	fb44 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
    fb92:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    fb94:	481a      	ldr	r0, [pc, #104]	; (fc00 <lll_chan_sel_2+0xc8>)
    fb96:	fba0 4001 	umull	r4, r0, r0, r1
    fb9a:	1a0c      	subs	r4, r1, r0
    fb9c:	eb00 0054 	add.w	r0, r0, r4, lsr #1
    fba0:	0940      	lsrs	r0, r0, #5
    fba2:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    fba6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    fbaa:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    fbac:	f3c0 04c4 	ubfx	r4, r0, #3, #5
    fbb0:	f000 0507 	and.w	r5, r0, #7
    fbb4:	5d14      	ldrb	r4, [r2, r4]
    fbb6:	412c      	asrs	r4, r5
    fbb8:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
    fbba:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    fbbc:	d41a      	bmi.n	fbf4 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
    fbbe:	fb01 f303 	mul.w	r3, r1, r3
    fbc2:	1e56      	subs	r6, r2, #1
    fbc4:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
    fbc8:	3204      	adds	r2, #4
	chan_next = 0U;
    fbca:	4660      	mov	r0, ip
		bite = *chan_map;
    fbcc:	f100 0508 	add.w	r5, r0, #8
    fbd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
    fbd4:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
    fbd6:	f011 0f01 	tst.w	r1, #1
			chan_next++;
    fbda:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
    fbde:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
    fbe2:	d002      	beq.n	fbea <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
    fbe4:	b133      	cbz	r3, fbf4 <lll_chan_sel_2+0xbc>
				chan_index--;
    fbe6:	3b01      	subs	r3, #1
    fbe8:	b2db      	uxtb	r3, r3
			chan_next++;
    fbea:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
    fbec:	42a8      	cmp	r0, r5
    fbee:	d1f2      	bne.n	fbd6 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
    fbf0:	42b2      	cmp	r2, r6
    fbf2:	d1eb      	bne.n	fbcc <lll_chan_sel_2+0x94>
}
    fbf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbf6:	bf00      	nop
    fbf8:	00022110 	.word	0x00022110
    fbfc:	00088440 	.word	0x00088440
    fc00:	bacf914d 	.word	0xbacf914d

0000fc04 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    fc04:	4668      	mov	r0, sp
    fc06:	f020 0107 	bic.w	r1, r0, #7
    fc0a:	468d      	mov	sp, r1
    fc0c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
    fc0e:	f001 fec9 	bl	119a4 <isr_radio>

	ISR_DIRECT_PM();
    fc12:	f7f4 f975 	bl	3f00 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    fc16:	f7f4 fa65 	bl	40e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    fc1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    fc1e:	4685      	mov	sp, r0
    fc20:	4770      	bx	lr
    fc22:	bf00      	nop

0000fc24 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
    fc24:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    fc26:	4b09      	ldr	r3, [pc, #36]	; (fc4c <rtc0_nrf5_isr+0x28>)
    fc28:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    fc2c:	b93a      	cbnz	r2, fc3e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    fc2e:	2001      	movs	r0, #1
    fc30:	f7f8 fad0 	bl	81d4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
    fc34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
    fc38:	2002      	movs	r0, #2
    fc3a:	f7f8 bacb 	b.w	81d4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    fc3e:	2000      	movs	r0, #0
    fc40:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
    fc44:	f7f9 fbd8 	bl	93f8 <ticker_trigger>
    fc48:	e7f1      	b.n	fc2e <rtc0_nrf5_isr+0xa>
    fc4a:	bf00      	nop
    fc4c:	4000b000 	.word	0x4000b000

0000fc50 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
    fc50:	2000      	movs	r0, #0
    fc52:	f7f8 babf 	b.w	81d4 <mayfly_run>
    fc56:	bf00      	nop

0000fc58 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
    fc58:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
    fc5a:	4b0e      	ldr	r3, [pc, #56]	; (fc94 <ticker_stop_op_cb+0x3c>)
    fc5c:	4c0e      	ldr	r4, [pc, #56]	; (fc98 <ticker_stop_op_cb+0x40>)
    fc5e:	781a      	ldrb	r2, [r3, #0]
    fc60:	7823      	ldrb	r3, [r4, #0]
    fc62:	429a      	cmp	r2, r3
    fc64:	d006      	beq.n	fc74 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
    fc66:	490d      	ldr	r1, [pc, #52]	; (fc9c <ticker_stop_op_cb+0x44>)
    fc68:	4a0d      	ldr	r2, [pc, #52]	; (fca0 <ticker_stop_op_cb+0x48>)
    fc6a:	7809      	ldrb	r1, [r1, #0]
    fc6c:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
    fc6e:	3301      	adds	r3, #1
    fc70:	7023      	strb	r3, [r4, #0]
}
    fc72:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
    fc74:	4a0b      	ldr	r2, [pc, #44]	; (fca4 <ticker_stop_op_cb+0x4c>)
    fc76:	490c      	ldr	r1, [pc, #48]	; (fca8 <ticker_stop_op_cb+0x50>)
    fc78:	480c      	ldr	r0, [pc, #48]	; (fcac <ticker_stop_op_cb+0x54>)
    fc7a:	f240 331d 	movw	r3, #797	; 0x31d
    fc7e:	f006 fb38 	bl	162f2 <assert_print>
    fc82:	4040      	eors	r0, r0
    fc84:	f380 8811 	msr	BASEPRI, r0
    fc88:	f04f 0003 	mov.w	r0, #3
    fc8c:	df02      	svc	2
	preempt_stop_ack++;
    fc8e:	7823      	ldrb	r3, [r4, #0]
    fc90:	e7e9      	b.n	fc66 <ticker_stop_op_cb+0xe>
    fc92:	bf00      	nop
    fc94:	20002239 	.word	0x20002239
    fc98:	20002238 	.word	0x20002238
    fc9c:	20002234 	.word	0x20002234
    fca0:	20002235 	.word	0x20002235
    fca4:	0001abc0 	.word	0x0001abc0
    fca8:	0001ac08 	.word	0x0001ac08
    fcac:	0001a580 	.word	0x0001a580

0000fcb0 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
    fcb0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fcb2:	b9f8      	cbnz	r0, fcf4 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
    fcb4:	4b1e      	ldr	r3, [pc, #120]	; (fd30 <ticker_start_op_cb+0x80>)
    fcb6:	4d1f      	ldr	r5, [pc, #124]	; (fd34 <ticker_start_op_cb+0x84>)
    fcb8:	781a      	ldrb	r2, [r3, #0]
    fcba:	782b      	ldrb	r3, [r5, #0]
    fcbc:	429a      	cmp	r2, r3
    fcbe:	d027      	beq.n	fd10 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
    fcc0:	4a1d      	ldr	r2, [pc, #116]	; (fd38 <ticker_start_op_cb+0x88>)
    fcc2:	4c1e      	ldr	r4, [pc, #120]	; (fd3c <ticker_start_op_cb+0x8c>)
    fcc4:	7812      	ldrb	r2, [r2, #0]
    fcc6:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
    fcc8:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
    fcca:	4291      	cmp	r1, r2
	preempt_start_ack++;
    fccc:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
    fcce:	b2d3      	uxtb	r3, r2
    fcd0:	d00d      	beq.n	fcee <ticker_start_op_cb+0x3e>
    fcd2:	4a1b      	ldr	r2, [pc, #108]	; (fd40 <ticker_start_op_cb+0x90>)
    fcd4:	491b      	ldr	r1, [pc, #108]	; (fd44 <ticker_start_op_cb+0x94>)
    fcd6:	481c      	ldr	r0, [pc, #112]	; (fd48 <ticker_start_op_cb+0x98>)
    fcd8:	f240 332b 	movw	r3, #811	; 0x32b
    fcdc:	f006 fb09 	bl	162f2 <assert_print>
    fce0:	4040      	eors	r0, r0
    fce2:	f380 8811 	msr	BASEPRI, r0
    fce6:	f04f 0003 	mov.w	r0, #3
    fcea:	df02      	svc	2
	preempt_req++;
    fcec:	7823      	ldrb	r3, [r4, #0]
    fcee:	3301      	adds	r3, #1
    fcf0:	7023      	strb	r3, [r4, #0]
}
    fcf2:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fcf4:	4a12      	ldr	r2, [pc, #72]	; (fd40 <ticker_start_op_cb+0x90>)
    fcf6:	4915      	ldr	r1, [pc, #84]	; (fd4c <ticker_start_op_cb+0x9c>)
    fcf8:	4813      	ldr	r0, [pc, #76]	; (fd48 <ticker_start_op_cb+0x98>)
    fcfa:	f240 3326 	movw	r3, #806	; 0x326
    fcfe:	f006 faf8 	bl	162f2 <assert_print>
    fd02:	4040      	eors	r0, r0
    fd04:	f380 8811 	msr	BASEPRI, r0
    fd08:	f04f 0003 	mov.w	r0, #3
    fd0c:	df02      	svc	2
    fd0e:	e7d1      	b.n	fcb4 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
    fd10:	4a0b      	ldr	r2, [pc, #44]	; (fd40 <ticker_start_op_cb+0x90>)
    fd12:	490f      	ldr	r1, [pc, #60]	; (fd50 <ticker_start_op_cb+0xa0>)
    fd14:	480c      	ldr	r0, [pc, #48]	; (fd48 <ticker_start_op_cb+0x98>)
    fd16:	f44f 734a 	mov.w	r3, #808	; 0x328
    fd1a:	f006 faea 	bl	162f2 <assert_print>
    fd1e:	4040      	eors	r0, r0
    fd20:	f380 8811 	msr	BASEPRI, r0
    fd24:	f04f 0003 	mov.w	r0, #3
    fd28:	df02      	svc	2
	preempt_start_ack++;
    fd2a:	782b      	ldrb	r3, [r5, #0]
    fd2c:	e7c8      	b.n	fcc0 <ticker_start_op_cb+0x10>
    fd2e:	bf00      	nop
    fd30:	20002237 	.word	0x20002237
    fd34:	20002236 	.word	0x20002236
    fd38:	20002234 	.word	0x20002234
    fd3c:	20002235 	.word	0x20002235
    fd40:	0001abc0 	.word	0x0001abc0
    fd44:	0001ac58 	.word	0x0001ac58
    fd48:	0001a580 	.word	0x0001a580
    fd4c:	0001a984 	.word	0x0001a984
    fd50:	0001ac30 	.word	0x0001ac30

0000fd54 <isr_race>:
	radio_status_reset();
    fd54:	f001 bf40 	b.w	11bd8 <radio_status_reset>

0000fd58 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
    fd58:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
    fd5a:	4a18      	ldr	r2, [pc, #96]	; (fdbc <preempt_ticker_cb+0x64>)
    fd5c:	4c18      	ldr	r4, [pc, #96]	; (fdc0 <preempt_ticker_cb+0x68>)
    fd5e:	7812      	ldrb	r2, [r2, #0]
    fd60:	7823      	ldrb	r3, [r4, #0]
    fd62:	429a      	cmp	r2, r3
    fd64:	d01b      	beq.n	fd9e <preempt_ticker_cb+0x46>
	preempt_ack++;
    fd66:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
    fd68:	4b16      	ldr	r3, [pc, #88]	; (fdc4 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
    fd6a:	3101      	adds	r1, #1
    fd6c:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fd6e:	2200      	movs	r2, #0
	preempt_ack++;
    fd70:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
    fd72:	9903      	ldr	r1, [sp, #12]
    fd74:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fd76:	2001      	movs	r0, #1
    fd78:	4611      	mov	r1, r2
    fd7a:	f7f8 f9d3 	bl	8124 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    fd7e:	b900      	cbnz	r0, fd82 <preempt_ticker_cb+0x2a>
}
    fd80:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    fd82:	4a11      	ldr	r2, [pc, #68]	; (fdc8 <preempt_ticker_cb+0x70>)
    fd84:	4911      	ldr	r1, [pc, #68]	; (fdcc <preempt_ticker_cb+0x74>)
    fd86:	4812      	ldr	r0, [pc, #72]	; (fdd0 <preempt_ticker_cb+0x78>)
    fd88:	f240 33a9 	movw	r3, #937	; 0x3a9
    fd8c:	f006 fab1 	bl	162f2 <assert_print>
    fd90:	4040      	eors	r0, r0
    fd92:	f380 8811 	msr	BASEPRI, r0
    fd96:	f04f 0003 	mov.w	r0, #3
    fd9a:	df02      	svc	2
}
    fd9c:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
    fd9e:	4a0a      	ldr	r2, [pc, #40]	; (fdc8 <preempt_ticker_cb+0x70>)
    fda0:	490c      	ldr	r1, [pc, #48]	; (fdd4 <preempt_ticker_cb+0x7c>)
    fda2:	480b      	ldr	r0, [pc, #44]	; (fdd0 <preempt_ticker_cb+0x78>)
    fda4:	f240 33a3 	movw	r3, #931	; 0x3a3
    fda8:	f006 faa3 	bl	162f2 <assert_print>
    fdac:	4040      	eors	r0, r0
    fdae:	f380 8811 	msr	BASEPRI, r0
    fdb2:	f04f 0003 	mov.w	r0, #3
    fdb6:	df02      	svc	2
    fdb8:	e7d5      	b.n	fd66 <preempt_ticker_cb+0xe>
    fdba:	bf00      	nop
    fdbc:	20002235 	.word	0x20002235
    fdc0:	20002234 	.word	0x20002234
    fdc4:	20000598 	.word	0x20000598
    fdc8:	0001abc0 	.word	0x0001abc0
    fdcc:	0001a840 	.word	0x0001a840
    fdd0:	0001a580 	.word	0x0001a580
    fdd4:	0001ac74 	.word	0x0001ac74

0000fdd8 <preempt_ticker_stop>:
{
    fdd8:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
    fdda:	4917      	ldr	r1, [pc, #92]	; (fe38 <preempt_ticker_stop+0x60>)
    fddc:	4a17      	ldr	r2, [pc, #92]	; (fe3c <preempt_ticker_stop+0x64>)
    fdde:	780b      	ldrb	r3, [r1, #0]
    fde0:	7812      	ldrb	r2, [r2, #0]
    fde2:	429a      	cmp	r2, r3
{
    fde4:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
    fde6:	d122      	bne.n	fe2e <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
    fde8:	4b15      	ldr	r3, [pc, #84]	; (fe40 <preempt_ticker_stop+0x68>)
    fdea:	4a16      	ldr	r2, [pc, #88]	; (fe44 <preempt_ticker_stop+0x6c>)
    fdec:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
    fdee:	7812      	ldrb	r2, [r2, #0]
    fdf0:	429a      	cmp	r2, r3
    fdf2:	d01c      	beq.n	fe2e <preempt_ticker_stop+0x56>
	preempt_stop_req++;
    fdf4:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fdf6:	4b14      	ldr	r3, [pc, #80]	; (fe48 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
    fdf8:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fdfa:	2200      	movs	r2, #0
	preempt_stop_req++;
    fdfc:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fdfe:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
    fe00:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fe02:	4611      	mov	r1, r2
    fe04:	4610      	mov	r0, r2
    fe06:	f7f9 fbef 	bl	95e8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fe0a:	4604      	mov	r4, r0
    fe0c:	b178      	cbz	r0, fe2e <preempt_ticker_stop+0x56>
    fe0e:	2802      	cmp	r0, #2
    fe10:	d00e      	beq.n	fe30 <preempt_ticker_stop+0x58>
    fe12:	4a0e      	ldr	r2, [pc, #56]	; (fe4c <preempt_ticker_stop+0x74>)
    fe14:	490e      	ldr	r1, [pc, #56]	; (fe50 <preempt_ticker_stop+0x78>)
    fe16:	480f      	ldr	r0, [pc, #60]	; (fe54 <preempt_ticker_stop+0x7c>)
    fe18:	f240 3395 	movw	r3, #917	; 0x395
    fe1c:	f006 fa69 	bl	162f2 <assert_print>
    fe20:	4040      	eors	r0, r0
    fe22:	f380 8811 	msr	BASEPRI, r0
    fe26:	f04f 0003 	mov.w	r0, #3
    fe2a:	df02      	svc	2
    fe2c:	e000      	b.n	fe30 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
    fe2e:	2400      	movs	r4, #0
}
    fe30:	4620      	mov	r0, r4
    fe32:	b002      	add	sp, #8
    fe34:	bd10      	pop	{r4, pc}
    fe36:	bf00      	nop
    fe38:	20002239 	.word	0x20002239
    fe3c:	20002238 	.word	0x20002238
    fe40:	20002234 	.word	0x20002234
    fe44:	20002235 	.word	0x20002235
    fe48:	0000fc59 	.word	0x0000fc59
    fe4c:	0001abc0 	.word	0x0001abc0
    fe50:	0001ac90 	.word	0x0001ac90
    fe54:	0001a580 	.word	0x0001a580

0000fe58 <preempt_ticker_start>:
{
    fe58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
    fe5c:	f8df 8100 	ldr.w	r8, [pc, #256]	; ff60 <preempt_ticker_start+0x108>
{
    fe60:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
    fe62:	4a40      	ldr	r2, [pc, #256]	; (ff64 <preempt_ticker_start+0x10c>)
    fe64:	f898 3000 	ldrb.w	r3, [r8]
    fe68:	7812      	ldrb	r2, [r2, #0]
    fe6a:	429a      	cmp	r2, r3
{
    fe6c:	b08a      	sub	sp, #40	; 0x28
    fe6e:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
    fe70:	d048      	beq.n	ff04 <preempt_ticker_start+0xac>
		if (!prev || prev->is_aborted ||
    fe72:	2c00      	cmp	r4, #0
    fe74:	d061      	beq.n	ff3a <preempt_ticker_start+0xe2>
    fe76:	7f23      	ldrb	r3, [r4, #28]
    fe78:	079b      	lsls	r3, r3, #30
    fe7a:	d45e      	bmi.n	ff3a <preempt_ticker_start+0xe2>
		ull = HDR_LLL2ULL(p->param);
    fe7c:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
    fe7e:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
    fe82:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
    fe84:	f8df 90e0 	ldr.w	r9, [pc, #224]	; ff68 <preempt_ticker_start+0x110>
		preempt_to = MAX(ull->ticks_active_to_start,
    fe88:	68df      	ldr	r7, [r3, #12]
		diff = ticks_at_preempt_new - ticks_at_preempt;
    fe8a:	f8d9 0000 	ldr.w	r0, [r9]
		preempt_to = MAX(ull->ticks_active_to_start,
    fe8e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    fe92:	4291      	cmp	r1, r2
    fe94:	bf2c      	ite	cs
    fe96:	ebc7 0701 	rsbcs	r7, r7, r1
    fe9a:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
    fe9e:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
    fea2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
    fea6:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
    fea8:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
    feac:	d046      	beq.n	ff3c <preempt_ticker_start+0xe4>
		ret = preempt_ticker_stop();
    feae:	f7ff ff93 	bl	fdd8 <preempt_ticker_stop>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    feb2:	f030 0302 	bics.w	r3, r0, #2
    feb6:	d144      	bne.n	ff42 <preempt_ticker_start+0xea>
		prev->is_aborted = 1U;
    feb8:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
    feba:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
    febc:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
    fec0:	f043 0302 	orr.w	r3, r3, #2
    fec4:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
    fec6:	4620      	mov	r0, r4
    fec8:	69a3      	ldr	r3, [r4, #24]
    feca:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fecc:	4b27      	ldr	r3, [pc, #156]	; (ff6c <preempt_ticker_start+0x114>)
	preempt_start_req++;
    fece:	f898 4000 	ldrb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fed2:	9700      	str	r7, [sp, #0]
    fed4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    fed8:	4b25      	ldr	r3, [pc, #148]	; (ff70 <preempt_ticker_start+0x118>)
	ticks_at_preempt = ticks_at_preempt_new;
    feda:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fede:	2200      	movs	r2, #0
	preempt_start_req++;
    fee0:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fee2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    fee6:	e9cd 2203 	strd	r2, r2, [sp, #12]
    feea:	e9cd 2201 	strd	r2, r2, [sp, #4]
    feee:	4653      	mov	r3, sl
    fef0:	4611      	mov	r1, r2
    fef2:	4610      	mov	r0, r2
	preempt_start_req++;
    fef4:	b2e4      	uxtb	r4, r4
    fef6:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fefa:	f7f9 faeb 	bl	94d4 <ticker_start>
}
    fefe:	b00a      	add	sp, #40	; 0x28
    ff00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
    ff04:	4b1b      	ldr	r3, [pc, #108]	; (ff74 <preempt_ticker_start+0x11c>)
    ff06:	4a1c      	ldr	r2, [pc, #112]	; (ff78 <preempt_ticker_start+0x120>)
    ff08:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
    ff0a:	7812      	ldrb	r2, [r2, #0]
    ff0c:	429a      	cmp	r2, r3
    ff0e:	d1b0      	bne.n	fe72 <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
    ff10:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
    ff12:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
    ff16:	681b      	ldr	r3, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
    ff18:	f8df 904c 	ldr.w	r9, [pc, #76]	; ff68 <preempt_ticker_start+0x110>
    ff1c:	68df      	ldr	r7, [r3, #12]
    ff1e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    ff22:	4291      	cmp	r1, r2
    ff24:	bf2c      	ite	cs
    ff26:	ebc7 0701 	rsbcs	r7, r7, r1
    ff2a:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
    ff2e:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
    ff32:	4605      	mov	r5, r0
    ff34:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    ff38:	e7c8      	b.n	fecc <preempt_ticker_start+0x74>
			return TICKER_STATUS_SUCCESS;
    ff3a:	2000      	movs	r0, #0
}
    ff3c:	b00a      	add	sp, #40	; 0x28
    ff3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ff42:	4a0e      	ldr	r2, [pc, #56]	; (ff7c <preempt_ticker_start+0x124>)
    ff44:	490e      	ldr	r1, [pc, #56]	; (ff80 <preempt_ticker_start+0x128>)
    ff46:	480f      	ldr	r0, [pc, #60]	; (ff84 <preempt_ticker_start+0x12c>)
    ff48:	f44f 7355 	mov.w	r3, #852	; 0x354
    ff4c:	f006 f9d1 	bl	162f2 <assert_print>
    ff50:	4040      	eors	r0, r0
    ff52:	f380 8811 	msr	BASEPRI, r0
    ff56:	f04f 0003 	mov.w	r0, #3
    ff5a:	df02      	svc	2
    ff5c:	e7ac      	b.n	feb8 <preempt_ticker_start+0x60>
    ff5e:	bf00      	nop
    ff60:	20002237 	.word	0x20002237
    ff64:	20002236 	.word	0x20002236
    ff68:	20001db0 	.word	0x20001db0
    ff6c:	0000fcb1 	.word	0x0000fcb1
    ff70:	0000fd59 	.word	0x0000fd59
    ff74:	20002234 	.word	0x20002234
    ff78:	20002235 	.word	0x20002235
    ff7c:	0001abc0 	.word	0x0001abc0
    ff80:	0001ac90 	.word	0x0001ac90
    ff84:	0001a580 	.word	0x0001a580

0000ff88 <preempt>:

static void preempt(void *param)
{
    ff88:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
    ff8a:	4e4b      	ldr	r6, [pc, #300]	; (100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>)
    ff8c:	68b3      	ldr	r3, [r6, #8]
{
    ff8e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
    ff90:	b1b3      	cbz	r3, ffc0 <preempt+0x38>
    ff92:	6833      	ldr	r3, [r6, #0]
    ff94:	b1a3      	cbz	r3, ffc0 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
    ff96:	23ff      	movs	r3, #255	; 0xff
    ff98:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
    ff9a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
    ff9e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
    ffa2:	f7fb fe0f 	bl	bbc4 <ull_prepare_dequeue_iter>
	if (!next) {
    ffa6:	4602      	mov	r2, r0
    ffa8:	b150      	cbz	r0, ffc0 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
    ffaa:	7f11      	ldrb	r1, [r2, #28]
    ffac:	f011 0403 	ands.w	r4, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
    ffb0:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
    ffb4:	d006      	beq.n	ffc4 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
    ffb6:	f7fb fe05 	bl	bbc4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
    ffba:	4602      	mov	r2, r0
    ffbc:	2800      	cmp	r0, #0
    ffbe:	d1f4      	bne.n	ffaa <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
    ffc0:	b009      	add	sp, #36	; 0x24
    ffc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
    ffc4:	4295      	cmp	r5, r2
    ffc6:	d126      	bne.n	10016 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x17>
	err = event.curr.is_abort_cb(next->prepare_param.param,
    ffc8:	6873      	ldr	r3, [r6, #4]
    ffca:	6831      	ldr	r1, [r6, #0]
    ffcc:	68e8      	ldr	r0, [r5, #12]
    ffce:	aa03      	add	r2, sp, #12
    ffd0:	4798      	blx	r3
	if (!err) {
    ffd2:	4607      	mov	r7, r0
    ffd4:	b1b0      	cbz	r0, 10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>
	event.curr.abort_cb(NULL, event.curr.param);
    ffd6:	68b3      	ldr	r3, [r6, #8]
    ffd8:	6831      	ldr	r1, [r6, #0]
    ffda:	4620      	mov	r0, r4
    ffdc:	4798      	blx	r3
	if (err == -EAGAIN) {
    ffde:	f117 0f0b 	cmn.w	r7, #11
    ffe2:	d02d      	beq.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
		LL_ASSERT(err == -ECANCELED);
    ffe4:	378c      	adds	r7, #140	; 0x8c
    ffe6:	d0eb      	beq.n	ffc0 <preempt+0x38>
    ffe8:	4a34      	ldr	r2, [pc, #208]	; (100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>)
    ffea:	4935      	ldr	r1, [pc, #212]	; (100c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1>)
    ffec:	4835      	ldr	r0, [pc, #212]	; (100c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5>)
    ffee:	f240 4303 	movw	r3, #1027	; 0x403
    fff2:	f006 f97e 	bl	162f2 <assert_print>
    fff6:	4040      	eors	r0, r0
    fff8:	f380 8811 	msr	BASEPRI, r0
    fffc:	f04f 0003 	mov.w	r0, #3
   10000:	df02      	svc	2
   10002:	e7dd      	b.n	ffc0 <preempt+0x38>
		next->is_aborted = 1;
   10004:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   10006:	69aa      	ldr	r2, [r5, #24]
   10008:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1000a:	f043 0302 	orr.w	r3, r3, #2
   1000e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   10010:	4628      	mov	r0, r5
   10012:	4790      	blx	r2
		return;
   10014:	e7d4      	b.n	ffc0 <preempt+0x38>
		ret = preempt_ticker_start(next, NULL, next);
   10016:	4621      	mov	r1, r4
   10018:	4610      	mov	r0, r2
   1001a:	f7ff ff1d 	bl	fe58 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1001e:	f030 0302 	bics.w	r3, r0, #2
   10022:	d0cd      	beq.n	ffc0 <preempt+0x38>
   10024:	4a25      	ldr	r2, [pc, #148]	; (100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>)
   10026:	4928      	ldr	r1, [pc, #160]	; (100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>)
   10028:	4826      	ldr	r0, [pc, #152]	; (100c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5>)
   1002a:	f240 33cf 	movw	r3, #975	; 0x3cf
   1002e:	f006 f960 	bl	162f2 <assert_print>
   10032:	4040      	eors	r0, r0
   10034:	f380 8811 	msr	BASEPRI, r0
   10038:	f04f 0003 	mov.w	r0, #3
   1003c:	df02      	svc	2
   1003e:	e7bf      	b.n	ffc0 <preempt+0x38>
		iter_idx = UINT8_MAX;
   10040:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   10042:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   10046:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1004a:	f7fb fdbb 	bl	bbc4 <ull_prepare_dequeue_iter>
		while (iter) {
   1004e:	b928      	cbnz	r0, 1005c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d>
   10050:	e013      	b.n	1007a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7b>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   10052:	f10d 000b 	add.w	r0, sp, #11
   10056:	f7fb fdb5 	bl	bbc4 <ull_prepare_dequeue_iter>
		while (iter) {
   1005a:	b170      	cbz	r0, 1007a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7b>
			if (!iter->is_aborted &&
   1005c:	7f03      	ldrb	r3, [r0, #28]
   1005e:	079a      	lsls	r2, r3, #30
   10060:	d4f7      	bmi.n	10052 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53>
			    event.curr.param == iter->prepare_param.param) {
   10062:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   10064:	6831      	ldr	r1, [r6, #0]
   10066:	4291      	cmp	r1, r2
   10068:	d1f3      	bne.n	10052 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53>
				iter->is_aborted = 1;
   1006a:	f043 0302 	orr.w	r3, r3, #2
   1006e:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   10070:	6983      	ldr	r3, [r0, #24]
   10072:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   10074:	f88d 400b 	strb.w	r4, [sp, #11]
   10078:	e7eb      	b.n	10052 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53>
	struct lll_prepare_param prepare_param = {0};
   1007a:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1007c:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1007e:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   10080:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   10082:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   10086:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   10088:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1008a:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1008c:	9b03      	ldr	r3, [sp, #12]
   1008e:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   10092:	aa04      	add	r2, sp, #16
   10094:	f7fb fd56 	bl	bb44 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   10098:	2800      	cmp	r0, #0
   1009a:	d191      	bne.n	ffc0 <preempt+0x38>
   1009c:	4a07      	ldr	r2, [pc, #28]	; (100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>)
   1009e:	490b      	ldr	r1, [pc, #44]	; (100cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd>)
   100a0:	4808      	ldr	r0, [pc, #32]	; (100c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5>)
   100a2:	f240 4301 	movw	r3, #1025	; 0x401
   100a6:	f006 f924 	bl	162f2 <assert_print>
   100aa:	4040      	eors	r0, r0
   100ac:	f380 8811 	msr	BASEPRI, r0
   100b0:	f04f 0003 	mov.w	r0, #3
   100b4:	df02      	svc	2
   100b6:	e783      	b.n	ffc0 <preempt+0x38>
   100b8:	20001d9c 	.word	0x20001d9c
   100bc:	0001abc0 	.word	0x0001abc0
   100c0:	0001acb4 	.word	0x0001acb4
   100c4:	0001a580 	.word	0x0001a580
   100c8:	0001ac90 	.word	0x0001ac90
   100cc:	0001acac 	.word	0x0001acac

000100d0 <lll_init>:
{
   100d0:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   100d2:	4816      	ldr	r0, [pc, #88]	; (1012c <lll_init+0x5c>)
   100d4:	f004 fc24 	bl	14920 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   100d8:	4b15      	ldr	r3, [pc, #84]	; (10130 <lll_init+0x60>)
   100da:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   100dc:	b310      	cbz	r0, 10124 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   100de:	4b15      	ldr	r3, [pc, #84]	; (10134 <lll_init+0x64>)
   100e0:	2400      	movs	r4, #0
   100e2:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   100e4:	f000 fb06 	bl	106f4 <lll_clock_init>
	if (err < 0) {
   100e8:	2800      	cmp	r0, #0
   100ea:	db1a      	blt.n	10122 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   100ec:	4621      	mov	r1, r4
   100ee:	2001      	movs	r0, #1
   100f0:	4622      	mov	r2, r4
   100f2:	f7f3 feed 	bl	3ed0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   100f6:	4622      	mov	r2, r4
   100f8:	200b      	movs	r0, #11
   100fa:	2101      	movs	r1, #1
   100fc:	f7f3 fee8 	bl	3ed0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   10100:	4622      	mov	r2, r4
   10102:	4621      	mov	r1, r4
   10104:	2018      	movs	r0, #24
   10106:	f7f3 fee3 	bl	3ed0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1010a:	2001      	movs	r0, #1
   1010c:	f7f3 feae 	bl	3e6c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   10110:	200b      	movs	r0, #11
   10112:	f7f3 feab 	bl	3e6c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   10116:	2018      	movs	r0, #24
   10118:	f7f3 fea8 	bl	3e6c <arch_irq_enable>
	radio_setup();
   1011c:	f001 fc72 	bl	11a04 <radio_setup>
	return 0;
   10120:	4620      	mov	r0, r4
}
   10122:	bd10      	pop	{r4, pc}
		return -ENODEV;
   10124:	f06f 0012 	mvn.w	r0, #18
}
   10128:	bd10      	pop	{r4, pc}
   1012a:	bf00      	nop
   1012c:	0001acc0 	.word	0x0001acc0
   10130:	20001d98 	.word	0x20001d98
   10134:	20001d9c 	.word	0x20001d9c

00010138 <lll_deinit>:
{
   10138:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   1013a:	f000 faeb 	bl	10714 <lll_clock_deinit>
	if (err < 0) {
   1013e:	2800      	cmp	r0, #0
   10140:	db09      	blt.n	10156 <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   10142:	2001      	movs	r0, #1
   10144:	f7f3 fea2 	bl	3e8c <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   10148:	200b      	movs	r0, #11
   1014a:	f7f3 fe9f 	bl	3e8c <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   1014e:	2018      	movs	r0, #24
   10150:	f7f3 fe9c 	bl	3e8c <arch_irq_disable>
	return 0;
   10154:	2000      	movs	r0, #0
}
   10156:	bd08      	pop	{r3, pc}

00010158 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   10158:	4a05      	ldr	r2, [pc, #20]	; (10170 <lll_csrand_get+0x18>)
{
   1015a:	b410      	push	{r4}
   1015c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1015e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   10160:	6884      	ldr	r4, [r0, #8]
   10162:	6824      	ldr	r4, [r4, #0]
   10164:	b28a      	uxth	r2, r1
   10166:	4619      	mov	r1, r3
   10168:	4623      	mov	r3, r4
}
   1016a:	bc10      	pop	{r4}
   1016c:	4718      	bx	r3
   1016e:	bf00      	nop
   10170:	20001d98 	.word	0x20001d98

00010174 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   10174:	4b08      	ldr	r3, [pc, #32]	; (10198 <lll_csrand_isr_get+0x24>)
{
   10176:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   10178:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1017a:	68ab      	ldr	r3, [r5, #8]
   1017c:	685c      	ldr	r4, [r3, #4]
   1017e:	b13c      	cbz	r4, 10190 <lll_csrand_isr_get+0x1c>
   10180:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   10182:	46a4      	mov	ip, r4
   10184:	4601      	mov	r1, r0
   10186:	b292      	uxth	r2, r2
   10188:	4628      	mov	r0, r5
   1018a:	2300      	movs	r3, #0
}
   1018c:	bc30      	pop	{r4, r5}
   1018e:	4760      	bx	ip
   10190:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10194:	bc30      	pop	{r4, r5}
   10196:	4770      	bx	lr
   10198:	20001d98 	.word	0x20001d98

0001019c <lll_reset>:
}
   1019c:	2000      	movs	r0, #0
   1019e:	4770      	bx	lr

000101a0 <lll_disable>:
{
   101a0:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   101a2:	4604      	mov	r4, r0
{
   101a4:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   101a6:	b378      	cbz	r0, 10208 <lll_disable+0x68>
   101a8:	4b23      	ldr	r3, [pc, #140]	; (10238 <lll_disable+0x98>)
   101aa:	681a      	ldr	r2, [r3, #0]
   101ac:	4282      	cmp	r2, r0
   101ae:	d025      	beq.n	101fc <lll_disable+0x5c>
		idx = UINT8_MAX;
   101b0:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   101b2:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   101b6:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   101ba:	f7fb fd03 	bl	bbc4 <ull_prepare_dequeue_iter>
		while (next) {
   101be:	b938      	cbnz	r0, 101d0 <lll_disable+0x30>
   101c0:	e01a      	b.n	101f8 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   101c2:	428c      	cmp	r4, r1
   101c4:	d00a      	beq.n	101dc <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   101c6:	f10d 0007 	add.w	r0, sp, #7
   101ca:	f7fb fcfb 	bl	bbc4 <ull_prepare_dequeue_iter>
		while (next) {
   101ce:	b198      	cbz	r0, 101f8 <lll_disable+0x58>
			if (!next->is_aborted &&
   101d0:	7f03      	ldrb	r3, [r0, #28]
   101d2:	079b      	lsls	r3, r3, #30
   101d4:	d4f7      	bmi.n	101c6 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   101d6:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   101d8:	2c00      	cmp	r4, #0
   101da:	d1f2      	bne.n	101c2 <lll_disable+0x22>
				next->is_aborted = 1;
   101dc:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   101de:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   101e0:	f043 0302 	orr.w	r3, r3, #2
   101e4:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   101e6:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   101e8:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   101ec:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   101f0:	f7fb fce8 	bl	bbc4 <ull_prepare_dequeue_iter>
		while (next) {
   101f4:	2800      	cmp	r0, #0
   101f6:	d1eb      	bne.n	101d0 <lll_disable+0x30>
}
   101f8:	b003      	add	sp, #12
   101fa:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   101fc:	689b      	ldr	r3, [r3, #8]
   101fe:	b16b      	cbz	r3, 1021c <lll_disable+0x7c>
   10200:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   10202:	2000      	movs	r0, #0
   10204:	4798      	blx	r3
   10206:	e7d3      	b.n	101b0 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   10208:	4a0b      	ldr	r2, [pc, #44]	; (10238 <lll_disable+0x98>)
   1020a:	6893      	ldr	r3, [r2, #8]
   1020c:	2b00      	cmp	r3, #0
   1020e:	d0cf      	beq.n	101b0 <lll_disable+0x10>
   10210:	6811      	ldr	r1, [r2, #0]
   10212:	2900      	cmp	r1, #0
   10214:	d0cc      	beq.n	101b0 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   10216:	2000      	movs	r0, #0
   10218:	4798      	blx	r3
   1021a:	e7c9      	b.n	101b0 <lll_disable+0x10>
			LL_ASSERT(!param);
   1021c:	4a07      	ldr	r2, [pc, #28]	; (1023c <lll_disable+0x9c>)
   1021e:	4908      	ldr	r1, [pc, #32]	; (10240 <lll_disable+0xa0>)
   10220:	4808      	ldr	r0, [pc, #32]	; (10244 <lll_disable+0xa4>)
   10222:	f44f 738a 	mov.w	r3, #276	; 0x114
   10226:	f006 f864 	bl	162f2 <assert_print>
   1022a:	4040      	eors	r0, r0
   1022c:	f380 8811 	msr	BASEPRI, r0
   10230:	f04f 0003 	mov.w	r0, #3
   10234:	df02      	svc	2
   10236:	e7bb      	b.n	101b0 <lll_disable+0x10>
   10238:	20001d9c 	.word	0x20001d9c
   1023c:	0001abc0 	.word	0x0001abc0
   10240:	0001acc4 	.word	0x0001acc4
   10244:	0001a580 	.word	0x0001a580

00010248 <lll_prepare_done>:
}
   10248:	2000      	movs	r0, #0
   1024a:	4770      	bx	lr

0001024c <lll_done>:
{
   1024c:	b538      	push	{r3, r4, r5, lr}
   1024e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   10250:	f7fb fcaa 	bl	bba8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   10254:	b154      	cbz	r4, 1026c <lll_done+0x20>
   10256:	b310      	cbz	r0, 1029e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   10258:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1025a:	2000      	movs	r0, #0
   1025c:	f7fb fcd2 	bl	bc04 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   10260:	4620      	mov	r0, r4
   10262:	f7fb fd41 	bl	bce8 <ull_event_done>
	LL_ASSERT(evdone);
   10266:	b158      	cbz	r0, 10280 <lll_done+0x34>
}
   10268:	2000      	movs	r0, #0
   1026a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1026c:	4d1a      	ldr	r5, [pc, #104]	; (102d8 <lll_done+0x8c>)
   1026e:	68ab      	ldr	r3, [r5, #8]
   10270:	b31b      	cbz	r3, 102ba <lll_done+0x6e>
		param = event.curr.param;
   10272:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   10274:	2300      	movs	r3, #0
   10276:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   10278:	602b      	str	r3, [r5, #0]
		if (param) {
   1027a:	2c00      	cmp	r4, #0
   1027c:	d1ec      	bne.n	10258 <lll_done+0xc>
   1027e:	e7ec      	b.n	1025a <lll_done+0xe>
	LL_ASSERT(evdone);
   10280:	4a16      	ldr	r2, [pc, #88]	; (102dc <lll_done+0x90>)
   10282:	4917      	ldr	r1, [pc, #92]	; (102e0 <lll_done+0x94>)
   10284:	4817      	ldr	r0, [pc, #92]	; (102e4 <lll_done+0x98>)
   10286:	f44f 73c2 	mov.w	r3, #388	; 0x184
   1028a:	f006 f832 	bl	162f2 <assert_print>
   1028e:	4040      	eors	r0, r0
   10290:	f380 8811 	msr	BASEPRI, r0
   10294:	f04f 0003 	mov.w	r0, #3
   10298:	df02      	svc	2
}
   1029a:	2000      	movs	r0, #0
   1029c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1029e:	4a0f      	ldr	r2, [pc, #60]	; (102dc <lll_done+0x90>)
   102a0:	4911      	ldr	r1, [pc, #68]	; (102e8 <lll_done+0x9c>)
   102a2:	4810      	ldr	r0, [pc, #64]	; (102e4 <lll_done+0x98>)
   102a4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   102a8:	f006 f823 	bl	162f2 <assert_print>
   102ac:	4040      	eors	r0, r0
   102ae:	f380 8811 	msr	BASEPRI, r0
   102b2:	f04f 0003 	mov.w	r0, #3
   102b6:	df02      	svc	2
   102b8:	e7ce      	b.n	10258 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   102ba:	4a08      	ldr	r2, [pc, #32]	; (102dc <lll_done+0x90>)
   102bc:	490b      	ldr	r1, [pc, #44]	; (102ec <lll_done+0xa0>)
   102be:	4809      	ldr	r0, [pc, #36]	; (102e4 <lll_done+0x98>)
   102c0:	f44f 73aa 	mov.w	r3, #340	; 0x154
   102c4:	f006 f815 	bl	162f2 <assert_print>
   102c8:	4040      	eors	r0, r0
   102ca:	f380 8811 	msr	BASEPRI, r0
   102ce:	f04f 0003 	mov.w	r0, #3
   102d2:	df02      	svc	2
   102d4:	e7cd      	b.n	10272 <lll_done+0x26>
   102d6:	bf00      	nop
   102d8:	20001d9c 	.word	0x20001d9c
   102dc:	0001abc0 	.word	0x0001abc0
   102e0:	0001acf0 	.word	0x0001acf0
   102e4:	0001a580 	.word	0x0001a580
   102e8:	0001accc 	.word	0x0001accc
   102ec:	0001acdc 	.word	0x0001acdc

000102f0 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   102f0:	4a05      	ldr	r2, [pc, #20]	; (10308 <lll_is_done+0x18>)
   102f2:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   102f4:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   102f6:	1a1b      	subs	r3, r3, r0
   102f8:	bf18      	it	ne
   102fa:	2301      	movne	r3, #1
}
   102fc:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   10300:	700b      	strb	r3, [r1, #0]
}
   10302:	0940      	lsrs	r0, r0, #5
   10304:	4770      	bx	lr
   10306:	bf00      	nop
   10308:	20001d9c 	.word	0x20001d9c

0001030c <lll_is_abort_cb>:
}
   1030c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   10310:	4770      	bx	lr
   10312:	bf00      	nop

00010314 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   10314:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   10318:	2a00      	cmp	r2, #0
   1031a:	db04      	blt.n	10326 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   1031c:	429a      	cmp	r2, r3
   1031e:	bf38      	it	cc
   10320:	461a      	movcc	r2, r3
   10322:	4610      	mov	r0, r2
}
   10324:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   10326:	68c0      	ldr	r0, [r0, #12]
   10328:	4298      	cmp	r0, r3
   1032a:	bf38      	it	cc
   1032c:	4618      	movcc	r0, r3
   1032e:	4770      	bx	lr

00010330 <lll_preempt_calc>:
{
   10330:	b510      	push	{r4, lr}
   10332:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   10334:	f7f9 f9f8 	bl	9728 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   10338:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1033a:	0203      	lsls	r3, r0, #8
   1033c:	d405      	bmi.n	1034a <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1033e:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   10340:	2809      	cmp	r0, #9
   10342:	bf94      	ite	ls
   10344:	2000      	movls	r0, #0
   10346:	2001      	movhi	r0, #1
}
   10348:	bd10      	pop	{r4, pc}
		return 0;
   1034a:	2000      	movs	r0, #0
}
   1034c:	bd10      	pop	{r4, pc}
   1034e:	bf00      	nop

00010350 <lll_chan_set>:
	switch (chan) {
   10350:	2826      	cmp	r0, #38	; 0x26
{
   10352:	b510      	push	{r4, lr}
   10354:	4604      	mov	r4, r0
	switch (chan) {
   10356:	d01c      	beq.n	10392 <lll_chan_set+0x42>
   10358:	2827      	cmp	r0, #39	; 0x27
   1035a:	d012      	beq.n	10382 <lll_chan_set+0x32>
   1035c:	2825      	cmp	r0, #37	; 0x25
   1035e:	d008      	beq.n	10372 <lll_chan_set+0x22>
		if (chan < 11) {
   10360:	280a      	cmp	r0, #10
   10362:	d91e      	bls.n	103a2 <lll_chan_set+0x52>
		} else if (chan < 40) {
   10364:	2827      	cmp	r0, #39	; 0x27
   10366:	d821      	bhi.n	103ac <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   10368:	3003      	adds	r0, #3
   1036a:	0040      	lsls	r0, r0, #1
   1036c:	f001 fba8 	bl	11ac0 <radio_freq_chan_set>
   10370:	e002      	b.n	10378 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   10372:	2002      	movs	r0, #2
   10374:	f001 fba4 	bl	11ac0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10378:	4620      	mov	r0, r4
}
   1037a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1037e:	f001 bba5 	b.w	11acc <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   10382:	2050      	movs	r0, #80	; 0x50
   10384:	f001 fb9c 	bl	11ac0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10388:	4620      	mov	r0, r4
}
   1038a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1038e:	f001 bb9d 	b.w	11acc <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   10392:	201a      	movs	r0, #26
   10394:	f001 fb94 	bl	11ac0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10398:	4620      	mov	r0, r4
}
   1039a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1039e:	f001 bb95 	b.w	11acc <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   103a2:	3002      	adds	r0, #2
   103a4:	0040      	lsls	r0, r0, #1
   103a6:	f001 fb8b 	bl	11ac0 <radio_freq_chan_set>
   103aa:	e7e5      	b.n	10378 <lll_chan_set+0x28>
			LL_ASSERT(0);
   103ac:	4a06      	ldr	r2, [pc, #24]	; (103c8 <lll_chan_set+0x78>)
   103ae:	4907      	ldr	r1, [pc, #28]	; (103cc <lll_chan_set+0x7c>)
   103b0:	4807      	ldr	r0, [pc, #28]	; (103d0 <lll_chan_set+0x80>)
   103b2:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   103b6:	f005 ff9c 	bl	162f2 <assert_print>
   103ba:	4040      	eors	r0, r0
   103bc:	f380 8811 	msr	BASEPRI, r0
   103c0:	f04f 0003 	mov.w	r0, #3
   103c4:	df02      	svc	2
   103c6:	e7d7      	b.n	10378 <lll_chan_set+0x28>
   103c8:	0001abc0 	.word	0x0001abc0
   103cc:	0001a5e0 	.word	0x0001a5e0
   103d0:	0001a580 	.word	0x0001a580

000103d4 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   103d4:	f001 bbd8 	b.w	11b88 <radio_tx_ready_delay_get>

000103d8 <lll_isr_tx_status_reset>:
{
   103d8:	b508      	push	{r3, lr}
	radio_status_reset();
   103da:	f001 fbfd 	bl	11bd8 <radio_status_reset>
}
   103de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   103e2:	f001 bd3d 	b.w	11e60 <radio_tmr_status_reset>
   103e6:	bf00      	nop

000103e8 <lll_isr_rx_status_reset>:
{
   103e8:	b508      	push	{r3, lr}
	radio_status_reset();
   103ea:	f001 fbf5 	bl	11bd8 <radio_status_reset>
	radio_tmr_status_reset();
   103ee:	f001 fd37 	bl	11e60 <radio_tmr_status_reset>
}
   103f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   103f6:	f001 bcff 	b.w	11df8 <radio_rssi_status_reset>
   103fa:	bf00      	nop

000103fc <lll_isr_status_reset>:
{
   103fc:	b508      	push	{r3, lr}
	radio_status_reset();
   103fe:	f001 fbeb 	bl	11bd8 <radio_status_reset>
	radio_tmr_status_reset();
   10402:	f001 fd2d 	bl	11e60 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10406:	f001 fd13 	bl	11e30 <radio_filter_status_reset>
}
   1040a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1040e:	f001 bcf3 	b.w	11df8 <radio_rssi_status_reset>
   10412:	bf00      	nop

00010414 <lll_isr_cleanup>:
{
   10414:	b508      	push	{r3, lr}
   10416:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   10418:	4817      	ldr	r0, [pc, #92]	; (10478 <lll_isr_cleanup+0x64>)
   1041a:	f001 fad3 	bl	119c4 <radio_isr_set>
	if (!radio_is_idle()) {
   1041e:	f001 fbfb 	bl	11c18 <radio_is_idle>
   10422:	b160      	cbz	r0, 1043e <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   10424:	f001 fdf2 	bl	1200c <radio_tmr_stop>
	radio_stop();
   10428:	f001 fb32 	bl	11a90 <radio_stop>
	err = lll_hfclock_off();
   1042c:	f000 f9ae 	bl	1078c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10430:	2800      	cmp	r0, #0
   10432:	db0e      	blt.n	10452 <lll_isr_cleanup+0x3e>
}
   10434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10438:	2000      	movs	r0, #0
   1043a:	f7ff bf07 	b.w	1024c <lll_done>
		radio_disable();
   1043e:	f001 fbb7 	bl	11bb0 <radio_disable>
	radio_tmr_stop();
   10442:	f001 fde3 	bl	1200c <radio_tmr_stop>
	radio_stop();
   10446:	f001 fb23 	bl	11a90 <radio_stop>
	err = lll_hfclock_off();
   1044a:	f000 f99f 	bl	1078c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1044e:	2800      	cmp	r0, #0
   10450:	daf0      	bge.n	10434 <lll_isr_cleanup+0x20>
   10452:	4a0a      	ldr	r2, [pc, #40]	; (1047c <lll_isr_cleanup+0x68>)
   10454:	490a      	ldr	r1, [pc, #40]	; (10480 <lll_isr_cleanup+0x6c>)
   10456:	480b      	ldr	r0, [pc, #44]	; (10484 <lll_isr_cleanup+0x70>)
   10458:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1045c:	f005 ff49 	bl	162f2 <assert_print>
   10460:	4040      	eors	r0, r0
   10462:	f380 8811 	msr	BASEPRI, r0
   10466:	f04f 0003 	mov.w	r0, #3
   1046a:	df02      	svc	2
	lll_done(NULL);
   1046c:	2000      	movs	r0, #0
}
   1046e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10472:	f7ff beeb 	b.w	1024c <lll_done>
   10476:	bf00      	nop
   10478:	0000fd55 	.word	0x0000fd55
   1047c:	0001abc0 	.word	0x0001abc0
   10480:	0001acf8 	.word	0x0001acf8
   10484:	0001a580 	.word	0x0001a580

00010488 <lll_isr_abort>:
{
   10488:	b510      	push	{r4, lr}
   1048a:	4604      	mov	r4, r0
	radio_status_reset();
   1048c:	f001 fba4 	bl	11bd8 <radio_status_reset>
	radio_tmr_status_reset();
   10490:	f001 fce6 	bl	11e60 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10494:	f001 fccc 	bl	11e30 <radio_filter_status_reset>
	radio_rssi_status_reset();
   10498:	f001 fcae 	bl	11df8 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1049c:	4620      	mov	r0, r4
}
   1049e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   104a2:	f7ff bfb7 	b.w	10414 <lll_isr_cleanup>
   104a6:	bf00      	nop

000104a8 <lll_isr_early_abort>:
{
   104a8:	b508      	push	{r3, lr}
   104aa:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   104ac:	4813      	ldr	r0, [pc, #76]	; (104fc <lll_isr_early_abort+0x54>)
   104ae:	f001 fa89 	bl	119c4 <radio_isr_set>
	if (!radio_is_idle()) {
   104b2:	f001 fbb1 	bl	11c18 <radio_is_idle>
   104b6:	b140      	cbz	r0, 104ca <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   104b8:	f000 f968 	bl	1078c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   104bc:	2800      	cmp	r0, #0
   104be:	db0a      	blt.n	104d6 <lll_isr_early_abort+0x2e>
}
   104c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   104c4:	2000      	movs	r0, #0
   104c6:	f7ff bec1 	b.w	1024c <lll_done>
		radio_disable();
   104ca:	f001 fb71 	bl	11bb0 <radio_disable>
	err = lll_hfclock_off();
   104ce:	f000 f95d 	bl	1078c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   104d2:	2800      	cmp	r0, #0
   104d4:	daf4      	bge.n	104c0 <lll_isr_early_abort+0x18>
   104d6:	4a0a      	ldr	r2, [pc, #40]	; (10500 <lll_isr_early_abort+0x58>)
   104d8:	490a      	ldr	r1, [pc, #40]	; (10504 <lll_isr_early_abort+0x5c>)
   104da:	480b      	ldr	r0, [pc, #44]	; (10508 <lll_isr_early_abort+0x60>)
   104dc:	f240 236b 	movw	r3, #619	; 0x26b
   104e0:	f005 ff07 	bl	162f2 <assert_print>
   104e4:	4040      	eors	r0, r0
   104e6:	f380 8811 	msr	BASEPRI, r0
   104ea:	f04f 0003 	mov.w	r0, #3
   104ee:	df02      	svc	2
	lll_done(NULL);
   104f0:	2000      	movs	r0, #0
}
   104f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   104f6:	f7ff bea9 	b.w	1024c <lll_done>
   104fa:	bf00      	nop
   104fc:	0000fd55 	.word	0x0000fd55
   10500:	0001abc0 	.word	0x0001abc0
   10504:	0001acf8 	.word	0x0001acf8
   10508:	0001a580 	.word	0x0001a580

0001050c <lll_prepare_resolve>:
{
   1050c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10510:	b084      	sub	sp, #16
   10512:	4606      	mov	r6, r0
   10514:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   10516:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1051a:	23ff      	movs	r3, #255	; 0xff
{
   1051c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   10520:	f88d 300f 	strb.w	r3, [sp, #15]
{
   10524:	460f      	mov	r7, r1
   10526:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   10528:	f7fb fb4c 	bl	bbc4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1052c:	4604      	mov	r4, r0
   1052e:	b920      	cbnz	r0, 1053a <lll_prepare_resolve+0x2e>
   10530:	e022      	b.n	10578 <lll_prepare_resolve+0x6c>
		p = ull_prepare_dequeue_iter(&idx);
   10532:	f7fb fb47 	bl	bbc4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   10536:	4604      	mov	r4, r0
   10538:	b1f0      	cbz	r0, 10578 <lll_prepare_resolve+0x6c>
   1053a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1053e:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   10542:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   10546:	d1f4      	bne.n	10532 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   10548:	f8df a134 	ldr.w	sl, [pc, #308]	; 10680 <lll_prepare_resolve+0x174>
	if ((!is_dequeue && !is_done_sync()) ||
   1054c:	f8da 3008 	ldr.w	r3, [sl, #8]
   10550:	b9cb      	cbnz	r3, 10586 <lll_prepare_resolve+0x7a>
	    (p && is_resume)) {
   10552:	f1b9 0f00 	cmp.w	r9, #0
   10556:	d03c      	beq.n	105d2 <lll_prepare_resolve+0xc6>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10558:	f8cd 9000 	str.w	r9, [sp]
   1055c:	4643      	mov	r3, r8
   1055e:	462a      	mov	r2, r5
   10560:	4639      	mov	r1, r7
   10562:	4630      	mov	r0, r6
   10564:	f7fb faee 	bl	bb44 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10568:	2800      	cmp	r0, #0
   1056a:	d07a      	beq.n	10662 <lll_prepare_resolve+0x156>
		return -EINPROGRESS;
   1056c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   10570:	4620      	mov	r0, r4
   10572:	b004      	add	sp, #16
   10574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   10578:	f8df a104 	ldr.w	sl, [pc, #260]	; 10680 <lll_prepare_resolve+0x174>
	if ((!is_dequeue && !is_done_sync()) ||
   1057c:	f8da 3008 	ldr.w	r3, [sl, #8]
   10580:	2b00      	cmp	r3, #0
   10582:	d035      	beq.n	105f0 <lll_prepare_resolve+0xe4>
   10584:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10586:	462a      	mov	r2, r5
   10588:	f8cd 9000 	str.w	r9, [sp]
   1058c:	4643      	mov	r3, r8
   1058e:	4639      	mov	r1, r7
   10590:	4630      	mov	r0, r6
   10592:	f7fb fad7 	bl	bb44 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10596:	4602      	mov	r2, r0
   10598:	2800      	cmp	r0, #0
   1059a:	d062      	beq.n	10662 <lll_prepare_resolve+0x156>
		if (is_resume) {
   1059c:	f1b9 0f00 	cmp.w	r9, #0
   105a0:	d1e4      	bne.n	1056c <lll_prepare_resolve+0x60>
		ret  = preempt_ticker_start(first, p, next);
   105a2:	2c00      	cmp	r4, #0
   105a4:	bf14      	ite	ne
   105a6:	4620      	movne	r0, r4
   105a8:	4610      	moveq	r0, r2
   105aa:	4621      	mov	r1, r4
   105ac:	f7ff fc54 	bl	fe58 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   105b0:	f030 0302 	bics.w	r3, r0, #2
   105b4:	d0da      	beq.n	1056c <lll_prepare_resolve+0x60>
   105b6:	4a33      	ldr	r2, [pc, #204]	; (10684 <lll_prepare_resolve+0x178>)
   105b8:	4933      	ldr	r1, [pc, #204]	; (10688 <lll_prepare_resolve+0x17c>)
   105ba:	4834      	ldr	r0, [pc, #208]	; (1068c <lll_prepare_resolve+0x180>)
   105bc:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   105c0:	f005 fe97 	bl	162f2 <assert_print>
   105c4:	4040      	eors	r0, r0
   105c6:	f380 8811 	msr	BASEPRI, r0
   105ca:	f04f 0003 	mov.w	r0, #3
   105ce:	df02      	svc	2
   105d0:	e7cc      	b.n	1056c <lll_prepare_resolve+0x60>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   105d2:	42ac      	cmp	r4, r5
   105d4:	d00c      	beq.n	105f0 <lll_prepare_resolve+0xe4>
   105d6:	4a2b      	ldr	r2, [pc, #172]	; (10684 <lll_prepare_resolve+0x178>)
   105d8:	492d      	ldr	r1, [pc, #180]	; (10690 <lll_prepare_resolve+0x184>)
   105da:	482c      	ldr	r0, [pc, #176]	; (1068c <lll_prepare_resolve+0x180>)
   105dc:	f240 23da 	movw	r3, #730	; 0x2da
   105e0:	f005 fe87 	bl	162f2 <assert_print>
   105e4:	4040      	eors	r0, r0
   105e6:	f380 8811 	msr	BASEPRI, r0
   105ea:	f04f 0003 	mov.w	r0, #3
   105ee:	df02      	svc	2
	event.curr.param = prepare_param->param;
   105f0:	68eb      	ldr	r3, [r5, #12]
   105f2:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   105f6:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   105fa:	4628      	mov	r0, r5
   105fc:	47c0      	blx	r8
   105fe:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   10600:	f7ff fbea 	bl	fdd8 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10604:	f030 0302 	bics.w	r3, r0, #2
   10608:	d11d      	bne.n	10646 <lll_prepare_resolve+0x13a>
		p = ull_prepare_dequeue_iter(&idx);
   1060a:	f10d 000f 	add.w	r0, sp, #15
   1060e:	f7fb fad9 	bl	bbc4 <ull_prepare_dequeue_iter>
   10612:	4602      	mov	r2, r0
		if (!p) {
   10614:	2800      	cmp	r0, #0
   10616:	d0ab      	beq.n	10570 <lll_prepare_resolve+0x64>
	} while (p->is_aborted || p->is_resume);
   10618:	7f01      	ldrb	r1, [r0, #28]
   1061a:	f011 0103 	ands.w	r1, r1, #3
   1061e:	d1f4      	bne.n	1060a <lll_prepare_resolve+0xfe>
	ret = preempt_ticker_start(p, NULL, p);
   10620:	f7ff fc1a 	bl	fe58 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10624:	f030 0302 	bics.w	r3, r0, #2
   10628:	d0a2      	beq.n	10570 <lll_prepare_resolve+0x64>
   1062a:	4a16      	ldr	r2, [pc, #88]	; (10684 <lll_prepare_resolve+0x178>)
   1062c:	4916      	ldr	r1, [pc, #88]	; (10688 <lll_prepare_resolve+0x17c>)
   1062e:	4817      	ldr	r0, [pc, #92]	; (1068c <lll_prepare_resolve+0x180>)
   10630:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   10634:	f005 fe5d 	bl	162f2 <assert_print>
   10638:	4040      	eors	r0, r0
   1063a:	f380 8811 	msr	BASEPRI, r0
   1063e:	f04f 0003 	mov.w	r0, #3
   10642:	df02      	svc	2
   10644:	e794      	b.n	10570 <lll_prepare_resolve+0x64>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10646:	4a0f      	ldr	r2, [pc, #60]	; (10684 <lll_prepare_resolve+0x178>)
   10648:	490f      	ldr	r1, [pc, #60]	; (10688 <lll_prepare_resolve+0x17c>)
   1064a:	4810      	ldr	r0, [pc, #64]	; (1068c <lll_prepare_resolve+0x180>)
   1064c:	f240 23e7 	movw	r3, #743	; 0x2e7
   10650:	f005 fe4f 	bl	162f2 <assert_print>
   10654:	4040      	eors	r0, r0
   10656:	f380 8811 	msr	BASEPRI, r0
   1065a:	f04f 0003 	mov.w	r0, #3
   1065e:	df02      	svc	2
   10660:	e7d3      	b.n	1060a <lll_prepare_resolve+0xfe>
		LL_ASSERT(next);
   10662:	4a08      	ldr	r2, [pc, #32]	; (10684 <lll_prepare_resolve+0x178>)
   10664:	490b      	ldr	r1, [pc, #44]	; (10694 <lll_prepare_resolve+0x188>)
   10666:	4809      	ldr	r0, [pc, #36]	; (1068c <lll_prepare_resolve+0x180>)
   10668:	f240 23a7 	movw	r3, #679	; 0x2a7
   1066c:	f005 fe41 	bl	162f2 <assert_print>
   10670:	4040      	eors	r0, r0
   10672:	f380 8811 	msr	BASEPRI, r0
   10676:	f04f 0003 	mov.w	r0, #3
   1067a:	df02      	svc	2
   1067c:	2200      	movs	r2, #0
   1067e:	e78d      	b.n	1059c <lll_prepare_resolve+0x90>
   10680:	20001d9c 	.word	0x20001d9c
   10684:	0001abc0 	.word	0x0001abc0
   10688:	0001ac90 	.word	0x0001ac90
   1068c:	0001a580 	.word	0x0001a580
   10690:	0001ad0c 	.word	0x0001ad0c
   10694:	0001ad04 	.word	0x0001ad04

00010698 <clock_ready>:
	z_impl_k_sem_give(sem);
   10698:	f101 0010 	add.w	r0, r1, #16
   1069c:	f004 bb9e 	b.w	14ddc <z_impl_k_sem_give>

000106a0 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   106a0:	b570      	push	{r4, r5, r6, lr}
   106a2:	4605      	mov	r5, r0
   106a4:	b08a      	sub	sp, #40	; 0x28
   106a6:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   106a8:	2201      	movs	r2, #1
   106aa:	2100      	movs	r1, #0
   106ac:	a804      	add	r0, sp, #16
   106ae:	f009 f81d 	bl	196ec <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   106b2:	4b0f      	ldr	r3, [pc, #60]	; (106f0 <blocking_on+0x50>)
   106b4:	9301      	str	r3, [sp, #4]
   106b6:	2600      	movs	r6, #0
   106b8:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   106ba:	4669      	mov	r1, sp
   106bc:	4628      	mov	r0, r5
   106be:	9603      	str	r6, [sp, #12]
   106c0:	9302      	str	r3, [sp, #8]
   106c2:	f005 fb7c 	bl	15dbe <onoff_request>
	if (err < 0) {
   106c6:	2800      	cmp	r0, #0
   106c8:	db10      	blt.n	106ec <blocking_on+0x4c>
   106ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   106ce:	4631      	mov	r1, r6
   106d0:	f240 30e7 	movw	r0, #999	; 0x3e7
   106d4:	fbe4 0103 	umlal	r0, r1, r4, r3
   106d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106dc:	2300      	movs	r3, #0
   106de:	f7ef fd0f 	bl	100 <__aeabi_uldivmod>
   106e2:	4602      	mov	r2, r0
   106e4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   106e6:	a804      	add	r0, sp, #16
   106e8:	f004 fb9e 	bl	14e28 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   106ec:	b00a      	add	sp, #40	; 0x28
   106ee:	bd70      	pop	{r4, r5, r6, pc}
   106f0:	00010699 	.word	0x00010699

000106f4 <lll_clock_init>:

int lll_clock_init(void)
{
   106f4:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   106f6:	2001      	movs	r0, #1
   106f8:	f002 f9a6 	bl	12a48 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   106fc:	4904      	ldr	r1, [pc, #16]	; (10710 <lll_clock_init+0x1c>)
   106fe:	2300      	movs	r3, #0
   10700:	2401      	movs	r4, #1
   10702:	608c      	str	r4, [r1, #8]
   10704:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   10706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1070a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1070c:	f005 bb57 	b.w	15dbe <onoff_request>
   10710:	20001db8 	.word	0x20001db8

00010714 <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   10714:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10716:	2001      	movs	r0, #1
   10718:	f002 f996 	bl	12a48 <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   1071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   10720:	f005 bb96 	b.w	15e50 <onoff_release>

00010724 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   10724:	4b0c      	ldr	r3, [pc, #48]	; (10758 <lll_clock_wait+0x34>)
   10726:	781a      	ldrb	r2, [r3, #0]
   10728:	b10a      	cbz	r2, 1072e <lll_clock_wait+0xa>
		return 0;
   1072a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1072c:	4770      	bx	lr
{
   1072e:	b510      	push	{r4, lr}
	done = true;
   10730:	2001      	movs	r0, #1
   10732:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10734:	f002 f988 	bl	12a48 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   10738:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1073c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1073e:	f7ff ffaf 	bl	106a0 <blocking_on>
	if (err) {
   10742:	b938      	cbnz	r0, 10754 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   10744:	4620      	mov	r0, r4
   10746:	f005 fb83 	bl	15e50 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1074a:	2802      	cmp	r0, #2
		return 0;
   1074c:	bf0c      	ite	eq
   1074e:	2000      	moveq	r0, #0
		return -EIO;
   10750:	f06f 0004 	mvnne.w	r0, #4
}
   10754:	bd10      	pop	{r4, pc}
   10756:	bf00      	nop
   10758:	2000223a 	.word	0x2000223a

0001075c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1075c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1075e:	4b0a      	ldr	r3, [pc, #40]	; (10788 <lll_hfclock_on+0x2c>)
   10760:	f3bf 8f5b 	dmb	ish
   10764:	e853 2f00 	ldrex	r2, [r3]
   10768:	1c51      	adds	r1, r2, #1
   1076a:	e843 1000 	strex	r0, r1, [r3]
   1076e:	2800      	cmp	r0, #0
   10770:	d1f8      	bne.n	10764 <lll_hfclock_on+0x8>
   10772:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   10776:	2a00      	cmp	r2, #0
   10778:	dd01      	ble.n	1077e <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1077a:	2000      	movs	r0, #0
   1077c:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1077e:	f002 f96b 	bl	12a58 <z_nrf_clock_bt_ctlr_hf_request>
}
   10782:	2000      	movs	r0, #0
   10784:	bd08      	pop	{r3, pc}
   10786:	bf00      	nop
   10788:	20001db4 	.word	0x20001db4

0001078c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1078c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1078e:	4b0d      	ldr	r3, [pc, #52]	; (107c4 <lll_hfclock_off+0x38>)
   10790:	681a      	ldr	r2, [r3, #0]
   10792:	2a00      	cmp	r2, #0
   10794:	dd12      	ble.n	107bc <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10796:	f3bf 8f5b 	dmb	ish
   1079a:	e853 2f00 	ldrex	r2, [r3]
   1079e:	1e51      	subs	r1, r2, #1
   107a0:	e843 1000 	strex	r0, r1, [r3]
   107a4:	2800      	cmp	r0, #0
   107a6:	d1f8      	bne.n	1079a <lll_hfclock_off+0xe>
   107a8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   107ac:	2a01      	cmp	r2, #1
   107ae:	dd01      	ble.n	107b4 <lll_hfclock_off+0x28>
		return 0;
   107b0:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   107b2:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   107b4:	f002 f966 	bl	12a84 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   107b8:	2000      	movs	r0, #0
}
   107ba:	bd08      	pop	{r3, pc}
		return -EALREADY;
   107bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   107c0:	bd08      	pop	{r3, pc}
   107c2:	bf00      	nop
   107c4:	20001db4 	.word	0x20001db4

000107c8 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   107c8:	2005      	movs	r0, #5
   107ca:	4770      	bx	lr

000107cc <common_prepare_cb>:
{
   107cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   107d0:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   107d2:	f994 3016 	ldrsb.w	r3, [r4, #22]
   107d6:	2b00      	cmp	r3, #0
{
   107d8:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   107da:	f2c0 80e4 	blt.w	109a6 <common_prepare_cb+0x1da>
   107de:	6863      	ldr	r3, [r4, #4]
   107e0:	4605      	mov	r5, r0
   107e2:	460f      	mov	r7, r1
   107e4:	2b00      	cmp	r3, #0
   107e6:	f040 80d3 	bne.w	10990 <common_prepare_cb+0x1c4>
	lll->state = 0U;
   107ea:	7da3      	ldrb	r3, [r4, #22]
   107ec:	f36f 0300 	bfc	r3, #0, #1
   107f0:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   107f2:	f001 f929 	bl	11a48 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   107f6:	2000      	movs	r0, #0
   107f8:	f001 f95c 	bl	11ab4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   107fc:	2100      	movs	r1, #0
   107fe:	4608      	mov	r0, r1
   10800:	f001 f948 	bl	11a94 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   10804:	2200      	movs	r2, #0
   10806:	2125      	movs	r1, #37	; 0x25
   10808:	2008      	movs	r0, #8
   1080a:	f001 f989 	bl	11b20 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1080e:	2001      	movs	r0, #1
   10810:	f7fb f94a 	bl	baa8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10814:	4606      	mov	r6, r0
   10816:	2800      	cmp	r0, #0
   10818:	f000 80ac 	beq.w	10974 <common_prepare_cb+0x1a8>
	radio_pkt_rx_set(node_rx->pdu);
   1081c:	f106 001c 	add.w	r0, r6, #28
   10820:	f001 f9a6 	bl	11b70 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   10824:	4b65      	ldr	r3, [pc, #404]	; (109bc <common_prepare_cb+0x1f0>)
   10826:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   10828:	a80b      	add	r0, sp, #44	; 0x2c
   1082a:	f001 f961 	bl	11af0 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1082e:	4964      	ldr	r1, [pc, #400]	; (109c0 <common_prepare_cb+0x1f4>)
   10830:	f240 605b 	movw	r0, #1627	; 0x65b
   10834:	f001 f9fa 	bl	11c2c <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   10838:	7da0      	ldrb	r0, [r4, #22]
   1083a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1083e:	3025      	adds	r0, #37	; 0x25
   10840:	f7ff fd86 	bl	10350 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   10844:	485f      	ldr	r0, [pc, #380]	; (109c4 <common_prepare_cb+0x1f8>)
   10846:	4621      	mov	r1, r4
   10848:	f001 f8bc 	bl	119c4 <radio_isr_set>
	} else if (lll->type ||
   1084c:	7da3      	ldrb	r3, [r4, #22]
   1084e:	069b      	lsls	r3, r3, #26
   10850:	d402      	bmi.n	10858 <common_prepare_cb+0x8c>
		   lll->conn) {
   10852:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   10854:	2b00      	cmp	r3, #0
   10856:	d067      	beq.n	10928 <common_prepare_cb+0x15c>
		radio_tmr_tifs_set(EVENT_IFS_US);
   10858:	2096      	movs	r0, #150	; 0x96
   1085a:	f001 fb11 	bl	11e80 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1085e:	2300      	movs	r3, #0
   10860:	461a      	mov	r2, r3
   10862:	4619      	mov	r1, r3
   10864:	4618      	mov	r0, r3
   10866:	f001 fa47 	bl	11cf8 <radio_switch_complete_and_tx>
	ull = HDR_LLL2ULL(lll);
   1086a:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1086e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   10870:	4640      	mov	r0, r8
   10872:	f7ff fd4f 	bl	10314 <lll_event_offset_get>
   10876:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   10878:	686a      	ldr	r2, [r5, #4]
   1087a:	f106 0109 	add.w	r1, r6, #9
   1087e:	2000      	movs	r0, #0
   10880:	f001 fb0a 	bl	11e98 <radio_tmr_start>
	radio_tmr_end_capture();
   10884:	f001 fbee 	bl	12064 <radio_tmr_end_capture>
	radio_rssi_measure();
   10888:	f001 faa6 	bl	11dd8 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1088c:	4620      	mov	r0, r4
   1088e:	f7fb fd0d 	bl	c2ac <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   10892:	1c81      	adds	r1, r0, #2
   10894:	b2c9      	uxtb	r1, r1
   10896:	4640      	mov	r0, r8
   10898:	4632      	mov	r2, r6
   1089a:	f7ff fd49 	bl	10330 <lll_preempt_calc>
   1089e:	b9a8      	cbnz	r0, 108cc <common_prepare_cb+0x100>
		if (!is_resume && lll->ticks_window) {
   108a0:	b917      	cbnz	r7, 108a8 <common_prepare_cb+0xdc>
   108a2:	6a23      	ldr	r3, [r4, #32]
   108a4:	2b00      	cmp	r3, #0
   108a6:	d142      	bne.n	1092e <common_prepare_cb+0x162>
		if (lll->conn) {
   108a8:	6863      	ldr	r3, [r4, #4]
   108aa:	b13b      	cbz	r3, 108bc <common_prepare_cb+0xf0>
			mfy_after_cen_offset_get.param = p;
   108ac:	4b46      	ldr	r3, [pc, #280]	; (109c8 <common_prepare_cb+0x1fc>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   108ae:	2201      	movs	r2, #1
   108b0:	2102      	movs	r1, #2
   108b2:	2000      	movs	r0, #0
			mfy_after_cen_offset_get.param = p;
   108b4:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   108b6:	f7f7 fc35 	bl	8124 <mayfly_enqueue>
			LL_ASSERT(!retval);
   108ba:	bb10      	cbnz	r0, 10902 <common_prepare_cb+0x136>
		ret = lll_prepare_done(lll);
   108bc:	4620      	mov	r0, r4
   108be:	f7ff fcc3 	bl	10248 <lll_prepare_done>
		LL_ASSERT(!ret);
   108c2:	b968      	cbnz	r0, 108e0 <common_prepare_cb+0x114>
}
   108c4:	2000      	movs	r0, #0
   108c6:	b00c      	add	sp, #48	; 0x30
   108c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_isr_set(isr_abort, lll);
   108cc:	483f      	ldr	r0, [pc, #252]	; (109cc <common_prepare_cb+0x200>)
   108ce:	4621      	mov	r1, r4
   108d0:	f001 f878 	bl	119c4 <radio_isr_set>
		radio_disable();
   108d4:	f001 f96c 	bl	11bb0 <radio_disable>
}
   108d8:	2000      	movs	r0, #0
   108da:	b00c      	add	sp, #48	; 0x30
   108dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   108e0:	4a3b      	ldr	r2, [pc, #236]	; (109d0 <common_prepare_cb+0x204>)
   108e2:	493c      	ldr	r1, [pc, #240]	; (109d4 <common_prepare_cb+0x208>)
   108e4:	483c      	ldr	r0, [pc, #240]	; (109d8 <common_prepare_cb+0x20c>)
   108e6:	f240 2315 	movw	r3, #533	; 0x215
   108ea:	f005 fd02 	bl	162f2 <assert_print>
   108ee:	4040      	eors	r0, r0
   108f0:	f380 8811 	msr	BASEPRI, r0
   108f4:	f04f 0003 	mov.w	r0, #3
   108f8:	df02      	svc	2
}
   108fa:	2000      	movs	r0, #0
   108fc:	b00c      	add	sp, #48	; 0x30
   108fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   10902:	4a33      	ldr	r2, [pc, #204]	; (109d0 <common_prepare_cb+0x204>)
   10904:	4935      	ldr	r1, [pc, #212]	; (109dc <common_prepare_cb+0x210>)
   10906:	4834      	ldr	r0, [pc, #208]	; (109d8 <common_prepare_cb+0x20c>)
   10908:	f44f 7304 	mov.w	r3, #528	; 0x210
   1090c:	f005 fcf1 	bl	162f2 <assert_print>
   10910:	4040      	eors	r0, r0
   10912:	f380 8811 	msr	BASEPRI, r0
   10916:	f04f 0003 	mov.w	r0, #3
   1091a:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1091c:	4620      	mov	r0, r4
   1091e:	f7ff fc93 	bl	10248 <lll_prepare_done>
		LL_ASSERT(!ret);
   10922:	2800      	cmp	r0, #0
   10924:	d0ce      	beq.n	108c4 <common_prepare_cb+0xf8>
   10926:	e7db      	b.n	108e0 <common_prepare_cb+0x114>
		radio_switch_complete_and_disable();
   10928:	f001 fa46 	bl	11db8 <radio_switch_complete_and_disable>
   1092c:	e79d      	b.n	1086a <common_prepare_cb+0x9e>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1092e:	4a2c      	ldr	r2, [pc, #176]	; (109e0 <common_prepare_cb+0x214>)
   10930:	9207      	str	r2, [sp, #28]
   10932:	4a2c      	ldr	r2, [pc, #176]	; (109e4 <common_prepare_cb+0x218>)
   10934:	9205      	str	r2, [sp, #20]
   10936:	f240 12fb 	movw	r2, #507	; 0x1fb
   1093a:	9300      	str	r3, [sp, #0]
   1093c:	9208      	str	r2, [sp, #32]
   1093e:	4633      	mov	r3, r6
   10940:	e9cd 7703 	strd	r7, r7, [sp, #12]
   10944:	e9cd 7701 	strd	r7, r7, [sp, #4]
   10948:	9406      	str	r4, [sp, #24]
   1094a:	4639      	mov	r1, r7
   1094c:	2201      	movs	r2, #1
   1094e:	f7f8 fdc1 	bl	94d4 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10952:	f030 0302 	bics.w	r3, r0, #2
   10956:	d0a7      	beq.n	108a8 <common_prepare_cb+0xdc>
   10958:	4a1d      	ldr	r2, [pc, #116]	; (109d0 <common_prepare_cb+0x204>)
   1095a:	4923      	ldr	r1, [pc, #140]	; (109e8 <common_prepare_cb+0x21c>)
   1095c:	481e      	ldr	r0, [pc, #120]	; (109d8 <common_prepare_cb+0x20c>)
   1095e:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   10962:	f005 fcc6 	bl	162f2 <assert_print>
   10966:	4040      	eors	r0, r0
   10968:	f380 8811 	msr	BASEPRI, r0
   1096c:	f04f 0003 	mov.w	r0, #3
   10970:	df02      	svc	2
   10972:	e799      	b.n	108a8 <common_prepare_cb+0xdc>
	LL_ASSERT(node_rx);
   10974:	4a16      	ldr	r2, [pc, #88]	; (109d0 <common_prepare_cb+0x204>)
   10976:	491d      	ldr	r1, [pc, #116]	; (109ec <common_prepare_cb+0x220>)
   10978:	4817      	ldr	r0, [pc, #92]	; (109d8 <common_prepare_cb+0x20c>)
   1097a:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   1097e:	f005 fcb8 	bl	162f2 <assert_print>
   10982:	4040      	eors	r0, r0
   10984:	f380 8811 	msr	BASEPRI, r0
   10988:	f04f 0003 	mov.w	r0, #3
   1098c:	df02      	svc	2
   1098e:	e745      	b.n	1081c <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   10990:	6863      	ldr	r3, [r4, #4]
   10992:	f893 3020 	ldrb.w	r3, [r3, #32]
   10996:	07d9      	lsls	r1, r3, #31
   10998:	d405      	bmi.n	109a6 <common_prepare_cb+0x1da>
   1099a:	6863      	ldr	r3, [r4, #4]
   1099c:	f893 3020 	ldrb.w	r3, [r3, #32]
   109a0:	079a      	lsls	r2, r3, #30
   109a2:	f57f af22 	bpl.w	107ea <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   109a6:	4812      	ldr	r0, [pc, #72]	; (109f0 <common_prepare_cb+0x224>)
   109a8:	4621      	mov	r1, r4
   109aa:	f001 f80b 	bl	119c4 <radio_isr_set>
		radio_disable();
   109ae:	f001 f8ff 	bl	11bb0 <radio_disable>
}
   109b2:	2000      	movs	r0, #0
   109b4:	b00c      	add	sp, #48	; 0x30
   109b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109ba:	bf00      	nop
   109bc:	8e89bed6 	.word	0x8e89bed6
   109c0:	00555555 	.word	0x00555555
   109c4:	00002a29 	.word	0x00002a29
   109c8:	200005b8 	.word	0x200005b8
   109cc:	00010a7d 	.word	0x00010a7d
   109d0:	0001ad38 	.word	0x0001ad38
   109d4:	0001a840 	.word	0x0001a840
   109d8:	0001a580 	.word	0x0001a580
   109dc:	0001a868 	.word	0x0001a868
   109e0:	00010b79 	.word	0x00010b79
   109e4:	00010c21 	.word	0x00010c21
   109e8:	0001ac90 	.word	0x0001ac90
   109ec:	0001ad84 	.word	0x0001ad84
   109f0:	000104a9 	.word	0x000104a9

000109f4 <prepare_cb>:
	return common_prepare_cb(p, false);
   109f4:	2100      	movs	r1, #0
   109f6:	f7ff bee9 	b.w	107cc <common_prepare_cb>
   109fa:	bf00      	nop

000109fc <isr_common_done>:
{
   109fc:	b538      	push	{r3, r4, r5, lr}
   109fe:	4604      	mov	r4, r0
	lll_isr_status_reset();
   10a00:	f7ff fcfc 	bl	103fc <lll_isr_status_reset>
	lll->state = 0U;
   10a04:	7da3      	ldrb	r3, [r4, #22]
   10a06:	f36f 0300 	bfc	r3, #0, #1
   10a0a:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   10a0c:	069b      	lsls	r3, r3, #26
   10a0e:	d401      	bmi.n	10a14 <isr_common_done+0x18>
		   lll->conn) {
   10a10:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   10a12:	b33b      	cbz	r3, 10a64 <isr_common_done+0x68>
		radio_tmr_tifs_set(EVENT_IFS_US);
   10a14:	2096      	movs	r0, #150	; 0x96
   10a16:	f001 fa33 	bl	11e80 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10a1a:	2300      	movs	r3, #0
   10a1c:	461a      	mov	r2, r3
   10a1e:	4619      	mov	r1, r3
   10a20:	4618      	mov	r0, r3
   10a22:	f001 f969 	bl	11cf8 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   10a26:	2001      	movs	r0, #1
   10a28:	f7fb f83e 	bl	baa8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10a2c:	4605      	mov	r5, r0
   10a2e:	b158      	cbz	r0, 10a48 <isr_common_done+0x4c>
	radio_pkt_rx_set(node_rx->pdu);
   10a30:	f105 001c 	add.w	r0, r5, #28
   10a34:	f001 f89c 	bl	11b70 <radio_pkt_rx_set>
	radio_rssi_measure();
   10a38:	f001 f9ce 	bl	11dd8 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   10a3c:	4621      	mov	r1, r4
   10a3e:	480b      	ldr	r0, [pc, #44]	; (10a6c <isr_common_done+0x70>)
}
   10a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   10a44:	f000 bfbe 	b.w	119c4 <radio_isr_set>
	LL_ASSERT(node_rx);
   10a48:	4a09      	ldr	r2, [pc, #36]	; (10a70 <isr_common_done+0x74>)
   10a4a:	490a      	ldr	r1, [pc, #40]	; (10a74 <isr_common_done+0x78>)
   10a4c:	480a      	ldr	r0, [pc, #40]	; (10a78 <isr_common_done+0x7c>)
   10a4e:	f240 335b 	movw	r3, #859	; 0x35b
   10a52:	f005 fc4e 	bl	162f2 <assert_print>
   10a56:	4040      	eors	r0, r0
   10a58:	f380 8811 	msr	BASEPRI, r0
   10a5c:	f04f 0003 	mov.w	r0, #3
   10a60:	df02      	svc	2
   10a62:	e7e5      	b.n	10a30 <isr_common_done+0x34>
		radio_switch_complete_and_disable();
   10a64:	f001 f9a8 	bl	11db8 <radio_switch_complete_and_disable>
   10a68:	e7dd      	b.n	10a26 <isr_common_done+0x2a>
   10a6a:	bf00      	nop
   10a6c:	00002a29 	.word	0x00002a29
   10a70:	0001ad38 	.word	0x0001ad38
   10a74:	0001ad84 	.word	0x0001ad84
   10a78:	0001a580 	.word	0x0001a580

00010a7c <isr_abort>:
{
   10a7c:	b510      	push	{r4, lr}
   10a7e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   10a80:	f7ff fcbc 	bl	103fc <lll_isr_status_reset>
	radio_filter_disable();
   10a84:	f001 f9ca 	bl	11e1c <radio_filter_disable>
	lll_isr_cleanup(param);
   10a88:	4620      	mov	r0, r4
}
   10a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   10a8e:	f7ff bcc1 	b.w	10414 <lll_isr_cleanup>
   10a92:	bf00      	nop

00010a94 <isr_done>:
{
   10a94:	b508      	push	{r3, lr}
	isr_common_done(param);
   10a96:	f7ff ffb1 	bl	109fc <isr_common_done>
	radio_rx_enable();
   10a9a:	f001 f883 	bl	11ba4 <radio_rx_enable>
}
   10a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   10aa2:	f001 badf 	b.w	12064 <radio_tmr_end_capture>
   10aa6:	bf00      	nop

00010aa8 <isr_tx>:
{
   10aa8:	b570      	push	{r4, r5, r6, lr}
   10aaa:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   10aac:	f7ff fc94 	bl	103d8 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   10ab0:	f001 f982 	bl	11db8 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   10ab4:	2001      	movs	r0, #1
   10ab6:	f7fa fff7 	bl	baa8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10aba:	4604      	mov	r4, r0
   10abc:	b368      	cbz	r0, 10b1a <isr_tx+0x72>
	radio_pkt_rx_set(node_rx->pdu);
   10abe:	f104 001c 	add.w	r0, r4, #28
   10ac2:	f001 f855 	bl	11b70 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   10ac6:	f001 f893 	bl	11bf0 <radio_is_ready>
   10aca:	b9c0      	cbnz	r0, 10afe <isr_tx+0x56>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   10acc:	f001 fad8 	bl	12080 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   10ad0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   10ad2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   10ad4:	4608      	mov	r0, r1
   10ad6:	f001 f85f 	bl	11b98 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   10ada:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   10adc:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   10ade:	4608      	mov	r0, r1
   10ae0:	f001 f858 	bl	11b94 <radio_tx_chain_delay_get>
   10ae4:	4434      	add	r4, r6
   10ae6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   10ae8:	1a20      	subs	r0, r4, r0
   10aea:	f001 fa9b 	bl	12024 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   10aee:	f001 f973 	bl	11dd8 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   10af2:	4629      	mov	r1, r5
   10af4:	4810      	ldr	r0, [pc, #64]	; (10b38 <isr_tx+0x90>)
}
   10af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   10afa:	f000 bf63 	b.w	119c4 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   10afe:	4a0f      	ldr	r2, [pc, #60]	; (10b3c <isr_tx+0x94>)
   10b00:	490f      	ldr	r1, [pc, #60]	; (10b40 <isr_tx+0x98>)
   10b02:	4810      	ldr	r0, [pc, #64]	; (10b44 <isr_tx+0x9c>)
   10b04:	f240 3319 	movw	r3, #793	; 0x319
   10b08:	f005 fbf3 	bl	162f2 <assert_print>
   10b0c:	4040      	eors	r0, r0
   10b0e:	f380 8811 	msr	BASEPRI, r0
   10b12:	f04f 0003 	mov.w	r0, #3
   10b16:	df02      	svc	2
   10b18:	e7d8      	b.n	10acc <isr_tx+0x24>
	LL_ASSERT(node_rx);
   10b1a:	4a08      	ldr	r2, [pc, #32]	; (10b3c <isr_tx+0x94>)
   10b1c:	490a      	ldr	r1, [pc, #40]	; (10b48 <isr_tx+0xa0>)
   10b1e:	4809      	ldr	r0, [pc, #36]	; (10b44 <isr_tx+0x9c>)
   10b20:	f240 3315 	movw	r3, #789	; 0x315
   10b24:	f005 fbe5 	bl	162f2 <assert_print>
   10b28:	4040      	eors	r0, r0
   10b2a:	f380 8811 	msr	BASEPRI, r0
   10b2e:	f04f 0003 	mov.w	r0, #3
   10b32:	df02      	svc	2
   10b34:	e7c3      	b.n	10abe <isr_tx+0x16>
   10b36:	bf00      	nop
   10b38:	00002a29 	.word	0x00002a29
   10b3c:	0001ad38 	.word	0x0001ad38
   10b40:	0001ad8c 	.word	0x0001ad8c
   10b44:	0001a580 	.word	0x0001a580
   10b48:	0001ad84 	.word	0x0001ad84

00010b4c <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   10b4c:	68c3      	ldr	r3, [r0, #12]
{
   10b4e:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   10b50:	681e      	ldr	r6, [r3, #0]
{
   10b52:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   10b54:	f7f8 fde8 	bl	9728 <ticker_ticks_now_get>
   10b58:	4605      	mov	r5, r0
   10b5a:	4630      	mov	r0, r6
   10b5c:	f7ff fbda 	bl	10314 <lll_event_offset_get>
	p->remainder = 0;
   10b60:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   10b62:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   10b64:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   10b68:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   10b6a:	4620      	mov	r0, r4
   10b6c:	2101      	movs	r1, #1
}
   10b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   10b72:	f7ff be2b 	b.w	107cc <common_prepare_cb>
   10b76:	bf00      	nop

00010b78 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10b78:	b900      	cbnz	r0, 10b7c <ticker_op_start_cb+0x4>
   10b7a:	4770      	bx	lr
{
   10b7c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10b7e:	4a07      	ldr	r2, [pc, #28]	; (10b9c <ticker_op_start_cb+0x24>)
   10b80:	4907      	ldr	r1, [pc, #28]	; (10ba0 <ticker_op_start_cb+0x28>)
   10b82:	4808      	ldr	r0, [pc, #32]	; (10ba4 <ticker_op_start_cb+0x2c>)
   10b84:	f240 2393 	movw	r3, #659	; 0x293
   10b88:	f005 fbb3 	bl	162f2 <assert_print>
   10b8c:	4040      	eors	r0, r0
   10b8e:	f380 8811 	msr	BASEPRI, r0
   10b92:	f04f 0003 	mov.w	r0, #3
   10b96:	df02      	svc	2
}
   10b98:	bd08      	pop	{r3, pc}
   10b9a:	bf00      	nop
   10b9c:	0001ad38 	.word	0x0001ad38
   10ba0:	0001a984 	.word	0x0001a984
   10ba4:	0001a580 	.word	0x0001a580

00010ba8 <is_abort_cb>:
	if (next != curr) {
   10ba8:	4281      	cmp	r1, r0
{
   10baa:	b508      	push	{r3, lr}
	if (next != curr) {
   10bac:	d00d      	beq.n	10bca <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   10bae:	6a0b      	ldr	r3, [r1, #32]
   10bb0:	b113      	cbz	r3, 10bb8 <is_abort_cb+0x10>
			return -ECANCELED;
   10bb2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   10bb6:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   10bb8:	4b14      	ldr	r3, [pc, #80]	; (10c0c <is_abort_cb+0x64>)
   10bba:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   10bbc:	f7ff fdce 	bl	1075c <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   10bc0:	2800      	cmp	r0, #0
   10bc2:	db12      	blt.n	10bea <is_abort_cb+0x42>
   10bc4:	f06f 000a 	mvn.w	r0, #10
}
   10bc8:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   10bca:	684b      	ldr	r3, [r1, #4]
   10bcc:	b123      	cbz	r3, 10bd8 <is_abort_cb+0x30>
   10bce:	684b      	ldr	r3, [r1, #4]
   10bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
   10bd4:	07db      	lsls	r3, r3, #31
   10bd6:	d406      	bmi.n	10be6 <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   10bd8:	480d      	ldr	r0, [pc, #52]	; (10c10 <is_abort_cb+0x68>)
   10bda:	f000 fef3 	bl	119c4 <radio_isr_set>
	radio_disable();
   10bde:	f000 ffe7 	bl	11bb0 <radio_disable>
	return 0;
   10be2:	2000      	movs	r0, #0
}
   10be4:	bd08      	pop	{r3, pc}
		return 0;
   10be6:	2000      	movs	r0, #0
}
   10be8:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   10bea:	4a0a      	ldr	r2, [pc, #40]	; (10c14 <is_abort_cb+0x6c>)
   10bec:	490a      	ldr	r1, [pc, #40]	; (10c18 <is_abort_cb+0x70>)
   10bee:	480b      	ldr	r0, [pc, #44]	; (10c1c <is_abort_cb+0x74>)
   10bf0:	f240 2333 	movw	r3, #563	; 0x233
   10bf4:	f005 fb7d 	bl	162f2 <assert_print>
   10bf8:	4040      	eors	r0, r0
   10bfa:	f380 8811 	msr	BASEPRI, r0
   10bfe:	f04f 0003 	mov.w	r0, #3
   10c02:	df02      	svc	2
   10c04:	f06f 000a 	mvn.w	r0, #10
}
   10c08:	bd08      	pop	{r3, pc}
   10c0a:	bf00      	nop
   10c0c:	00010b4d 	.word	0x00010b4d
   10c10:	00002989 	.word	0x00002989
   10c14:	0001ad38 	.word	0x0001ad38
   10c18:	0001acf8 	.word	0x0001acf8
   10c1c:	0001a580 	.word	0x0001a580

00010c20 <ticker_stop_cb>:
{
   10c20:	b508      	push	{r3, lr}
	mfy.param = param;
   10c22:	4b0c      	ldr	r3, [pc, #48]	; (10c54 <ticker_stop_cb+0x34>)
{
   10c24:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   10c26:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   10c28:	2200      	movs	r2, #0
   10c2a:	4611      	mov	r1, r2
   10c2c:	2001      	movs	r0, #1
   10c2e:	f7f7 fa79 	bl	8124 <mayfly_enqueue>
	LL_ASSERT(!ret);
   10c32:	b900      	cbnz	r0, 10c36 <ticker_stop_cb+0x16>
}
   10c34:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   10c36:	4a08      	ldr	r2, [pc, #32]	; (10c58 <ticker_stop_cb+0x38>)
   10c38:	4908      	ldr	r1, [pc, #32]	; (10c5c <ticker_stop_cb+0x3c>)
   10c3a:	4809      	ldr	r0, [pc, #36]	; (10c60 <ticker_stop_cb+0x40>)
   10c3c:	f44f 7323 	mov.w	r3, #652	; 0x28c
   10c40:	f005 fb57 	bl	162f2 <assert_print>
   10c44:	4040      	eors	r0, r0
   10c46:	f380 8811 	msr	BASEPRI, r0
   10c4a:	f04f 0003 	mov.w	r0, #3
   10c4e:	df02      	svc	2
}
   10c50:	bd08      	pop	{r3, pc}
   10c52:	bf00      	nop
   10c54:	200005a8 	.word	0x200005a8
   10c58:	0001ad38 	.word	0x0001ad38
   10c5c:	0001a840 	.word	0x0001a840
   10c60:	0001a580 	.word	0x0001a580

00010c64 <isr_done_cleanup>:
{
   10c64:	b530      	push	{r4, r5, lr}
   10c66:	4604      	mov	r4, r0
   10c68:	b085      	sub	sp, #20
	lll_isr_status_reset();
   10c6a:	f7ff fbc7 	bl	103fc <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   10c6e:	f10d 010f 	add.w	r1, sp, #15
   10c72:	4620      	mov	r0, r4
   10c74:	f7ff fb3c 	bl	102f0 <lll_is_done>
   10c78:	b9c8      	cbnz	r0, 10cae <isr_done_cleanup+0x4a>
	radio_filter_disable();
   10c7a:	4605      	mov	r5, r0
   10c7c:	f001 f8ce 	bl	11e1c <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   10c80:	7da2      	ldrb	r2, [r4, #22]
   10c82:	f3c2 0341 	ubfx	r3, r2, #1, #2
   10c86:	3301      	adds	r3, #1
   10c88:	f003 0303 	and.w	r3, r3, #3
   10c8c:	2b03      	cmp	r3, #3
   10c8e:	bf14      	ite	ne
   10c90:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   10c94:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   10c98:	2300      	movs	r3, #0
		lll->chan = 0U;
   10c9a:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   10c9c:	4619      	mov	r1, r3
   10c9e:	9300      	str	r3, [sp, #0]
   10ca0:	2201      	movs	r2, #1
   10ca2:	4618      	mov	r0, r3
   10ca4:	f7f8 fca0 	bl	95e8 <ticker_stop>
	lll_isr_cleanup(param);
   10ca8:	4620      	mov	r0, r4
   10caa:	f7ff fbb3 	bl	10414 <lll_isr_cleanup>
}
   10cae:	b005      	add	sp, #20
   10cb0:	bd30      	pop	{r4, r5, pc}
   10cb2:	bf00      	nop

00010cb4 <abort_cb>:
{
   10cb4:	b510      	push	{r4, lr}
	if (!prepare_param) {
   10cb6:	b1d8      	cbz	r0, 10cf0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   10cb8:	460c      	mov	r4, r1
   10cba:	f7ff fd67 	bl	1078c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10cbe:	2800      	cmp	r0, #0
   10cc0:	db04      	blt.n	10ccc <abort_cb+0x18>
	lll_done(param);
   10cc2:	4620      	mov	r0, r4
}
   10cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   10cc8:	f7ff bac0 	b.w	1024c <lll_done>
	LL_ASSERT(err >= 0);
   10ccc:	4a0c      	ldr	r2, [pc, #48]	; (10d00 <abort_cb+0x4c>)
   10cce:	490d      	ldr	r1, [pc, #52]	; (10d04 <abort_cb+0x50>)
   10cd0:	480d      	ldr	r0, [pc, #52]	; (10d08 <abort_cb+0x54>)
   10cd2:	f44f 731f 	mov.w	r3, #636	; 0x27c
   10cd6:	f005 fb0c 	bl	162f2 <assert_print>
   10cda:	4040      	eors	r0, r0
   10cdc:	f380 8811 	msr	BASEPRI, r0
   10ce0:	f04f 0003 	mov.w	r0, #3
   10ce4:	df02      	svc	2
	lll_done(param);
   10ce6:	4620      	mov	r0, r4
}
   10ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   10cec:	f7ff baae 	b.w	1024c <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   10cf0:	4806      	ldr	r0, [pc, #24]	; (10d0c <abort_cb+0x58>)
   10cf2:	f000 fe67 	bl	119c4 <radio_isr_set>
}
   10cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   10cfa:	f000 bf59 	b.w	11bb0 <radio_disable>
   10cfe:	bf00      	nop
   10d00:	0001ad38 	.word	0x0001ad38
   10d04:	0001acf8 	.word	0x0001acf8
   10d08:	0001a580 	.word	0x0001a580
   10d0c:	00010c65 	.word	0x00010c65

00010d10 <lll_scan_init>:
}
   10d10:	2000      	movs	r0, #0
   10d12:	4770      	bx	lr

00010d14 <lll_scan_reset>:
   10d14:	2000      	movs	r0, #0
   10d16:	4770      	bx	lr

00010d18 <lll_scan_prepare>:
{
   10d18:	b510      	push	{r4, lr}
   10d1a:	b082      	sub	sp, #8
   10d1c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   10d1e:	f7ff fd1d 	bl	1075c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   10d22:	2800      	cmp	r0, #0
   10d24:	db19      	blt.n	10d5a <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   10d26:	4a13      	ldr	r2, [pc, #76]	; (10d74 <lll_scan_prepare+0x5c>)
   10d28:	4913      	ldr	r1, [pc, #76]	; (10d78 <lll_scan_prepare+0x60>)
   10d2a:	4814      	ldr	r0, [pc, #80]	; (10d7c <lll_scan_prepare+0x64>)
   10d2c:	9400      	str	r4, [sp, #0]
   10d2e:	2300      	movs	r3, #0
   10d30:	f7fb f9cc 	bl	c0cc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10d34:	b108      	cbz	r0, 10d3a <lll_scan_prepare+0x22>
   10d36:	3077      	adds	r0, #119	; 0x77
   10d38:	d101      	bne.n	10d3e <lll_scan_prepare+0x26>
}
   10d3a:	b002      	add	sp, #8
   10d3c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   10d3e:	4a10      	ldr	r2, [pc, #64]	; (10d80 <lll_scan_prepare+0x68>)
   10d40:	4910      	ldr	r1, [pc, #64]	; (10d84 <lll_scan_prepare+0x6c>)
   10d42:	4811      	ldr	r0, [pc, #68]	; (10d88 <lll_scan_prepare+0x70>)
   10d44:	238c      	movs	r3, #140	; 0x8c
   10d46:	f005 fad4 	bl	162f2 <assert_print>
   10d4a:	4040      	eors	r0, r0
   10d4c:	f380 8811 	msr	BASEPRI, r0
   10d50:	f04f 0003 	mov.w	r0, #3
   10d54:	df02      	svc	2
}
   10d56:	b002      	add	sp, #8
   10d58:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   10d5a:	4a09      	ldr	r2, [pc, #36]	; (10d80 <lll_scan_prepare+0x68>)
   10d5c:	490b      	ldr	r1, [pc, #44]	; (10d8c <lll_scan_prepare+0x74>)
   10d5e:	480a      	ldr	r0, [pc, #40]	; (10d88 <lll_scan_prepare+0x70>)
   10d60:	2389      	movs	r3, #137	; 0x89
   10d62:	f005 fac6 	bl	162f2 <assert_print>
   10d66:	4040      	eors	r0, r0
   10d68:	f380 8811 	msr	BASEPRI, r0
   10d6c:	f04f 0003 	mov.w	r0, #3
   10d70:	df02      	svc	2
   10d72:	e7d8      	b.n	10d26 <lll_scan_prepare+0xe>
   10d74:	000109f5 	.word	0x000109f5
   10d78:	00010cb5 	.word	0x00010cb5
   10d7c:	00010ba9 	.word	0x00010ba9
   10d80:	0001ad38 	.word	0x0001ad38
   10d84:	0001ada0 	.word	0x0001ada0
   10d88:	0001a580 	.word	0x0001a580
   10d8c:	0001acf8 	.word	0x0001acf8

00010d90 <lll_scan_prepare_connect_req>:
{
   10d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d94:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   10d98:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   10d9a:	01ad      	lsls	r5, r5, #6
   10d9c:	f005 0540 	and.w	r5, r5, #64	; 0x40
   10da0:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   10da4:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   10da8:	780b      	ldrb	r3, [r1, #0]
   10daa:	f003 0310 	and.w	r3, r3, #16
{
   10dae:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   10db0:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   10db2:	2322      	movs	r3, #34	; 0x22
   10db4:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   10db6:	700d      	strb	r5, [r1, #0]
{
   10db8:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   10dba:	9908      	ldr	r1, [sp, #32]
   10dbc:	2206      	movs	r2, #6
{
   10dbe:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   10dc0:	1ca0      	adds	r0, r4, #2
   10dc2:	f005 fd16 	bl	167f2 <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   10dc6:	9906      	ldr	r1, [sp, #24]
   10dc8:	2206      	movs	r2, #6
   10dca:	f104 0008 	add.w	r0, r4, #8
   10dce:	f005 fd10 	bl	167f2 <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   10dd2:	2204      	movs	r2, #4
   10dd4:	18b1      	adds	r1, r6, r2
   10dd6:	f104 000e 	add.w	r0, r4, #14
   10dda:	f005 fd0a 	bl	167f2 <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   10dde:	2203      	movs	r2, #3
   10de0:	f106 0108 	add.w	r1, r6, #8
   10de4:	f104 0012 	add.w	r0, r4, #18
   10de8:	f005 fd03 	bl	167f2 <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   10dec:	2301      	movs	r3, #1
   10dee:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   10df0:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   10df2:	f001 f93f 	bl	12074 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   10df6:	f1b8 0f00 	cmp.w	r8, #0
   10dfa:	d044      	beq.n	10e86 <lll_scan_prepare_connect_req+0xf6>
   10dfc:	f008 0203 	and.w	r2, r8, #3
   10e00:	322b      	adds	r2, #43	; 0x2b
   10e02:	00d2      	lsls	r2, r2, #3
   10e04:	f3c8 0840 	ubfx	r8, r8, #1, #1
   10e08:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   10e0c:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   10e0e:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   10e12:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   10e14:	b393      	cbz	r3, 10e7c <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   10e16:	f240 41e2 	movw	r1, #1250	; 0x4e2
   10e1a:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   10e1e:	2b00      	cmp	r3, #0
   10e20:	db01      	blt.n	10e26 <lll_scan_prepare_connect_req+0x96>
   10e22:	4293      	cmp	r3, r2
   10e24:	d201      	bcs.n	10e2a <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   10e26:	442b      	add	r3, r5
   10e28:	e7f9      	b.n	10e1e <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   10e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   10e2c:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   10e2e:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   10e30:	4b16      	ldr	r3, [pc, #88]	; (10e8c <lll_scan_prepare_connect_req+0xfc>)
   10e32:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   10e36:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   10e38:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   10e3a:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   10e3c:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   10e3e:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   10e40:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   10e42:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   10e44:	8abb      	ldrh	r3, [r7, #20]
   10e46:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   10e48:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   10e4a:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   10e4c:	f106 0118 	add.w	r1, r6, #24
   10e50:	2205      	movs	r2, #5
   10e52:	f104 001e 	add.w	r0, r4, #30
   10e56:	f005 fccc 	bl	167f2 <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   10e5a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   10e5e:	7fb2      	ldrb	r2, [r6, #30]
   10e60:	f362 0304 	bfi	r3, r2, #0, #5
   10e64:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   10e68:	f7ff fcae 	bl	107c8 <lll_clock_sca_local_get>
   10e6c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   10e70:	f360 1347 	bfi	r3, r0, #5, #3
   10e74:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   10e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   10e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e7e:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   10e80:	75a3      	strb	r3, [r4, #22]
   10e82:	75e3      	strb	r3, [r4, #23]
   10e84:	e7dc      	b.n	10e40 <lll_scan_prepare_connect_req+0xb0>
   10e86:	f44f 78b0 	mov.w	r8, #352	; 0x160
   10e8a:	e7bf      	b.n	10e0c <lll_scan_prepare_connect_req+0x7c>
   10e8c:	d1b71759 	.word	0xd1b71759

00010e90 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   10e90:	b538      	push	{r3, r4, r5, lr}
   10e92:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   10e94:	f7ff fab2 	bl	103fc <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   10e98:	f7fa ff16 	bl	bcc8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   10e9c:	4604      	mov	r4, r0
   10e9e:	b190      	cbz	r0, 10ec6 <isr_done+0x36>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   10ea0:	4910      	ldr	r1, [pc, #64]	; (10ee4 <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   10ea2:	4a11      	ldr	r2, [pc, #68]	; (10ee8 <isr_done+0x58>)
	e->crc_valid = crc_valid;
   10ea4:	7923      	ldrb	r3, [r4, #4]
   10ea6:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   10ea8:	8812      	ldrh	r2, [r2, #0]
   10eaa:	8062      	strh	r2, [r4, #2]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   10eac:	4a0f      	ldr	r2, [pc, #60]	; (10eec <isr_done+0x5c>)
	e->crc_valid = crc_valid;
   10eae:	f360 0300 	bfi	r3, r0, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   10eb2:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   10eb4:	7123      	strb	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   10eb6:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   10eb8:	7813      	ldrb	r3, [r2, #0]
   10eba:	7163      	strb	r3, [r4, #5]
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   10ebc:	4628      	mov	r0, r5
}
   10ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   10ec2:	f7ff baa7 	b.w	10414 <lll_isr_cleanup>
	LL_ASSERT(e);
   10ec6:	4a0a      	ldr	r2, [pc, #40]	; (10ef0 <isr_done+0x60>)
   10ec8:	490a      	ldr	r1, [pc, #40]	; (10ef4 <isr_done+0x64>)
   10eca:	480b      	ldr	r0, [pc, #44]	; (10ef8 <isr_done+0x68>)
   10ecc:	f240 3339 	movw	r3, #825	; 0x339
   10ed0:	f005 fa0f 	bl	162f2 <assert_print>
   10ed4:	4040      	eors	r0, r0
   10ed6:	f380 8811 	msr	BASEPRI, r0
   10eda:	f04f 0003 	mov.w	r0, #3
   10ede:	df02      	svc	2
   10ee0:	e7de      	b.n	10ea0 <isr_done+0x10>
   10ee2:	bf00      	nop
   10ee4:	2000223c 	.word	0x2000223c
   10ee8:	2000222e 	.word	0x2000222e
   10eec:	2000223d 	.word	0x2000223d
   10ef0:	0001adb4 	.word	0x0001adb4
   10ef4:	0001ae00 	.word	0x0001ae00
   10ef8:	0001a580 	.word	0x0001a580

00010efc <lll_conn_init>:
{
   10efc:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   10efe:	f000 feab 	bl	11c58 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10f02:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   10f04:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10f06:	2101      	movs	r1, #1
   10f08:	f361 0201 	bfi	r2, r1, #0, #2
}
   10f0c:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10f0e:	701a      	strb	r2, [r3, #0]
}
   10f10:	bd08      	pop	{r3, pc}
   10f12:	bf00      	nop

00010f14 <lll_conn_reset>:
}
   10f14:	2000      	movs	r0, #0
   10f16:	4770      	bx	lr

00010f18 <lll_conn_flush>:
}
   10f18:	4770      	bx	lr
   10f1a:	bf00      	nop

00010f1c <lll_conn_prepare_reset>:
	crc_valid = 0U;
   10f1c:	4805      	ldr	r0, [pc, #20]	; (10f34 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   10f1e:	4906      	ldr	r1, [pc, #24]	; (10f38 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   10f20:	4a06      	ldr	r2, [pc, #24]	; (10f3c <lll_conn_prepare_reset+0x20>)
{
   10f22:	b410      	push	{r4}
	trx_cnt = 0U;
   10f24:	2300      	movs	r3, #0
   10f26:	4c06      	ldr	r4, [pc, #24]	; (10f40 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   10f28:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   10f2a:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   10f2c:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   10f2e:	8023      	strh	r3, [r4, #0]
}
   10f30:	bc10      	pop	{r4}
   10f32:	4770      	bx	lr
   10f34:	2000223c 	.word	0x2000223c
   10f38:	2000223b 	.word	0x2000223b
   10f3c:	2000223d 	.word	0x2000223d
   10f40:	2000222e 	.word	0x2000222e

00010f44 <lll_conn_abort_cb>:
{
   10f44:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   10f46:	b1e8      	cbz	r0, 10f84 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   10f48:	460d      	mov	r5, r1
   10f4a:	4604      	mov	r4, r0
   10f4c:	f7ff fc1e 	bl	1078c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10f50:	2800      	cmp	r0, #0
   10f52:	db0a      	blt.n	10f6a <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   10f54:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   10f56:	8923      	ldrh	r3, [r4, #8]
   10f58:	8a51      	ldrh	r1, [r2, #18]
   10f5a:	3301      	adds	r3, #1
   10f5c:	440b      	add	r3, r1
   10f5e:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   10f60:	4628      	mov	r0, r5
}
   10f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   10f66:	f7ff b971 	b.w	1024c <lll_done>
	LL_ASSERT(err >= 0);
   10f6a:	4a0a      	ldr	r2, [pc, #40]	; (10f94 <lll_conn_abort_cb+0x50>)
   10f6c:	490a      	ldr	r1, [pc, #40]	; (10f98 <lll_conn_abort_cb+0x54>)
   10f6e:	480b      	ldr	r0, [pc, #44]	; (10f9c <lll_conn_abort_cb+0x58>)
   10f70:	23aa      	movs	r3, #170	; 0xaa
   10f72:	f005 f9be 	bl	162f2 <assert_print>
   10f76:	4040      	eors	r0, r0
   10f78:	f380 8811 	msr	BASEPRI, r0
   10f7c:	f04f 0003 	mov.w	r0, #3
   10f80:	df02      	svc	2
   10f82:	e7e7      	b.n	10f54 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   10f84:	4806      	ldr	r0, [pc, #24]	; (10fa0 <lll_conn_abort_cb+0x5c>)
   10f86:	f000 fd1d 	bl	119c4 <radio_isr_set>
}
   10f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   10f8e:	f000 be0f 	b.w	11bb0 <radio_disable>
   10f92:	bf00      	nop
   10f94:	0001adb4 	.word	0x0001adb4
   10f98:	0001acf8 	.word	0x0001acf8
   10f9c:	0001a580 	.word	0x0001a580
   10fa0:	00010e91 	.word	0x00010e91

00010fa4 <lll_conn_rx_pkt_set>:
{
   10fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fa6:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   10fa8:	2001      	movs	r0, #1
   10faa:	f7fa fd7d 	bl	baa8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10fae:	4604      	mov	r4, r0
   10fb0:	b348      	cbz	r0, 11006 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   10fb2:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   10fb6:	8caf      	ldrh	r7, [r5, #36]	; 0x24
	phy = lll->phy_rx;
   10fb8:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   10fbc:	2100      	movs	r1, #0
   10fbe:	4630      	mov	r0, r6
   10fc0:	f000 fd68 	bl	11a94 <radio_phy_set>
	} else if (lll->enc_rx) {
   10fc4:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   10fc8:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   10fca:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   10fcc:	b2f9      	uxtb	r1, r7
   10fce:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   10fd2:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   10fd6:	d50e      	bpl.n	10ff6 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   10fd8:	3104      	adds	r1, #4
   10fda:	b2c9      	uxtb	r1, r1
   10fdc:	2008      	movs	r0, #8
   10fde:	f000 fd9f 	bl	11b20 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   10fe2:	4622      	mov	r2, r4
   10fe4:	4631      	mov	r1, r6
   10fe6:	f105 0043 	add.w	r0, r5, #67	; 0x43
   10fea:	f001 f84f 	bl	1208c <radio_ccm_rx_pkt_set>
}
   10fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   10ff2:	f000 bdbd 	b.w	11b70 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   10ff6:	2008      	movs	r0, #8
   10ff8:	f000 fd92 	bl	11b20 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   10ffc:	4620      	mov	r0, r4
}
   10ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   11002:	f000 bdb5 	b.w	11b70 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   11006:	4a07      	ldr	r2, [pc, #28]	; (11024 <lll_conn_rx_pkt_set+0x80>)
   11008:	4907      	ldr	r1, [pc, #28]	; (11028 <lll_conn_rx_pkt_set+0x84>)
   1100a:	4808      	ldr	r0, [pc, #32]	; (1102c <lll_conn_rx_pkt_set+0x88>)
   1100c:	f44f 731f 	mov.w	r3, #636	; 0x27c
   11010:	f005 f96f 	bl	162f2 <assert_print>
   11014:	4040      	eors	r0, r0
   11016:	f380 8811 	msr	BASEPRI, r0
   1101a:	f04f 0003 	mov.w	r0, #3
   1101e:	df02      	svc	2
   11020:	e7c7      	b.n	10fb2 <lll_conn_rx_pkt_set+0xe>
   11022:	bf00      	nop
   11024:	0001adb4 	.word	0x0001adb4
   11028:	0001ad84 	.word	0x0001ad84
   1102c:	0001a580 	.word	0x0001a580

00011030 <lll_conn_isr_tx>:
{
   11030:	b538      	push	{r3, r4, r5, lr}
   11032:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   11034:	f7ff f9d0 	bl	103d8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11038:	2096      	movs	r0, #150	; 0x96
   1103a:	f000 ff21 	bl	11e80 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1103e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   11042:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   11046:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1104a:	f000 0007 	and.w	r0, r0, #7
   1104e:	f002 0207 	and.w	r2, r2, #7
   11052:	2100      	movs	r1, #0
   11054:	f000 fe50 	bl	11cf8 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   11058:	4620      	mov	r0, r4
   1105a:	f7ff ffa3 	bl	10fa4 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1105e:	f000 fdc7 	bl	11bf0 <radio_is_ready>
   11062:	bb58      	cbnz	r0, 110bc <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   11064:	f001 f80c 	bl	12080 <radio_tmr_tifs_base_get>
   11068:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1106a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1106e:	2101      	movs	r1, #1
   11070:	f000 0007 	and.w	r0, r0, #7
   11074:	f000 fd90 	bl	11b98 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   11078:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1107c:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   11080:	4405      	add	r5, r0
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   11082:	2b02      	cmp	r3, #2
   11084:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   11088:	d016      	beq.n	110b8 <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1108a:	2b04      	cmp	r3, #4
   1108c:	bf14      	ite	ne
   1108e:	2328      	movne	r3, #40	; 0x28
   11090:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   11094:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   11098:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1109c:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   110a0:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   110a2:	f000 fd77 	bl	11b94 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   110a6:	1a28      	subs	r0, r5, r0
   110a8:	f000 ffbc 	bl	12024 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   110ac:	4621      	mov	r1, r4
   110ae:	480a      	ldr	r0, [pc, #40]	; (110d8 <lll_conn_isr_tx+0xa8>)
}
   110b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   110b4:	f000 bc86 	b.w	119c4 <radio_isr_set>
	switch (phy) {
   110b8:	2318      	movs	r3, #24
   110ba:	e7eb      	b.n	11094 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   110bc:	4a07      	ldr	r2, [pc, #28]	; (110dc <lll_conn_isr_tx+0xac>)
   110be:	4908      	ldr	r1, [pc, #32]	; (110e0 <lll_conn_isr_tx+0xb0>)
   110c0:	4808      	ldr	r0, [pc, #32]	; (110e4 <lll_conn_isr_tx+0xb4>)
   110c2:	f240 2331 	movw	r3, #561	; 0x231
   110c6:	f005 f914 	bl	162f2 <assert_print>
   110ca:	4040      	eors	r0, r0
   110cc:	f380 8811 	msr	BASEPRI, r0
   110d0:	f04f 0003 	mov.w	r0, #3
   110d4:	df02      	svc	2
   110d6:	e7c5      	b.n	11064 <lll_conn_isr_tx+0x34>
   110d8:	00011221 	.word	0x00011221
   110dc:	0001adb4 	.word	0x0001adb4
   110e0:	0001ad8c 	.word	0x0001ad8c
   110e4:	0001a580 	.word	0x0001a580

000110e8 <lll_conn_tx_pkt_set>:
{
   110e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110ea:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   110ec:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   110f0:	8c46      	ldrh	r6, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   110f2:	f001 0407 	and.w	r4, r1, #7
{
   110f6:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   110f8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   110fc:	4620      	mov	r0, r4
   110fe:	f000 fcc9 	bl	11a94 <radio_phy_set>
	} else if (lll->enc_tx) {
   11102:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11106:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   11108:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1110a:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1110e:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   11110:	d50d      	bpl.n	1112e <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   11112:	3104      	adds	r1, #4
   11114:	b2c9      	uxtb	r1, r1
   11116:	2008      	movs	r0, #8
   11118:	f000 fd02 	bl	11b20 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1111c:	4639      	mov	r1, r7
   1111e:	f105 0064 	add.w	r0, r5, #100	; 0x64
   11122:	f000 fffb 	bl	1211c <radio_ccm_tx_pkt_set>
}
   11126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1112a:	f000 bd27 	b.w	11b7c <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1112e:	2008      	movs	r0, #8
   11130:	f000 fcf6 	bl	11b20 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11134:	4638      	mov	r0, r7
}
   11136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1113a:	f000 bd1f 	b.w	11b7c <radio_pkt_tx_set>
   1113e:	bf00      	nop

00011140 <lll_conn_pdu_tx_prep>:
{
   11140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11144:	4604      	mov	r4, r0
   11146:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11148:	aa01      	add	r2, sp, #4
   1114a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   1114c:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1114e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11150:	f7f6 ff7e 	bl	8050 <memq_peek>
	if (lll->empty || !link) {
   11154:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   11158:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1115a:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1115c:	d432      	bmi.n	111c4 <lll_conn_pdu_tx_prep+0x84>
   1115e:	2800      	cmp	r0, #0
   11160:	d04e      	beq.n	11200 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   11162:	9b01      	ldr	r3, [sp, #4]
   11164:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
   11168:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1116c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   11170:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   11174:	b913      	cbnz	r3, 1117c <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   11176:	786b      	ldrb	r3, [r5, #1]
   11178:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   1117c:	b137      	cbz	r7, 1118c <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1117e:	f818 2007 	ldrb.w	r2, [r8, r7]
   11182:	2101      	movs	r1, #1
   11184:	f361 0201 	bfi	r2, r1, #0, #2
   11188:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1118c:	1bdb      	subs	r3, r3, r7
   1118e:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   11190:	4620      	mov	r0, r4
   11192:	f7fe f85b 	bl	f24c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   11196:	786b      	ldrb	r3, [r5, #1]
   11198:	4283      	cmp	r3, r0
   1119a:	d924      	bls.n	111e6 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1119c:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1119e:	f818 3007 	ldrb.w	r3, [r8, r7]
   111a2:	f043 0310 	orr.w	r3, r3, #16
   111a6:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   111aa:	f818 3007 	ldrb.w	r3, [r8, r7]
   111ae:	f36f 1347 	bfc	r3, #5, #3
   111b2:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   111b6:	2300      	movs	r3, #0
   111b8:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   111ba:	f8c9 5000 	str.w	r5, [r9]
}
   111be:	b003      	add	sp, #12
   111c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   111c4:	f043 0304 	orr.w	r3, r3, #4
   111c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   111cc:	f000 fd44 	bl	11c58 <radio_pkt_empty_get>
   111d0:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   111d2:	b1e6      	cbz	r6, 1120e <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   111d4:	7803      	ldrb	r3, [r0, #0]
   111d6:	f043 0310 	orr.w	r3, r3, #16
   111da:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   111dc:	f8c9 5000 	str.w	r5, [r9]
}
   111e0:	b003      	add	sp, #12
   111e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   111e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   111e8:	6832      	ldr	r2, [r6, #0]
   111ea:	429a      	cmp	r2, r3
			p->md = 1U;
   111ec:	f818 3007 	ldrb.w	r3, [r8, r7]
   111f0:	bf14      	ite	ne
   111f2:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   111f6:	f36f 1304 	bfceq	r3, #4, #1
   111fa:	f808 3007 	strb.w	r3, [r8, r7]
   111fe:	e7d4      	b.n	111aa <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   11200:	f043 0304 	orr.w	r3, r3, #4
   11204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   11208:	f000 fd26 	bl	11c58 <radio_pkt_empty_get>
   1120c:	4605      	mov	r5, r0
			p->md = 0U;
   1120e:	782b      	ldrb	r3, [r5, #0]
   11210:	f36f 1304 	bfc	r3, #4, #1
   11214:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   11216:	f8c9 5000 	str.w	r5, [r9]
}
   1121a:	b003      	add	sp, #12
   1121c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00011220 <lll_conn_isr_rx>:
{
   11220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11224:	b083      	sub	sp, #12
   11226:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   11228:	f000 fcec 	bl	11c04 <radio_is_done>
	if (trx_done) {
   1122c:	b2c0      	uxtb	r0, r0
   1122e:	b950      	cbnz	r0, 11246 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   11230:	f7ff f8da 	bl	103e8 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   11234:	48b6      	ldr	r0, [pc, #728]	; (11510 <lll_conn_isr_rx+0x2f0>)
   11236:	4621      	mov	r1, r4
   11238:	f000 fbc4 	bl	119c4 <radio_isr_set>
}
   1123c:	b003      	add	sp, #12
   1123e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   11242:	f000 bcb5 	b.w	11bb0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   11246:	f000 fcfd 	bl	11c44 <radio_crc_is_valid>
   1124a:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1124c:	f000 fddc 	bl	11e08 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   11250:	f7ff f8ca 	bl	103e8 <lll_isr_rx_status_reset>
	trx_cnt++;
   11254:	4aaf      	ldr	r2, [pc, #700]	; (11514 <lll_conn_isr_rx+0x2f4>)
   11256:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   11258:	2001      	movs	r0, #1
	trx_cnt++;
   1125a:	4403      	add	r3, r0
   1125c:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1125e:	f7fa fc23 	bl	baa8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11262:	4606      	mov	r6, r0
   11264:	2800      	cmp	r0, #0
   11266:	f000 80ce 	beq.w	11406 <lll_conn_isr_rx+0x1e6>
	if (crc_ok) {
   1126a:	2d00      	cmp	r5, #0
   1126c:	d148      	bne.n	11300 <lll_conn_isr_rx+0xe0>
		if (crc_expire == 0U) {
   1126e:	4baa      	ldr	r3, [pc, #680]	; (11518 <lll_conn_isr_rx+0x2f8>)
   11270:	781f      	ldrb	r7, [r3, #0]
   11272:	2f00      	cmp	r7, #0
   11274:	f000 80b1 	beq.w	113da <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   11278:	3f01      	subs	r7, #1
   1127a:	b2ff      	uxtb	r7, r7
   1127c:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1127e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11282:	a901      	add	r1, sp, #4
   11284:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   11286:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1128a:	f7ff ff59 	bl	11140 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1128e:	2f00      	cmp	r7, #0
   11290:	f040 8138 	bne.w	11504 <lll_conn_isr_rx+0x2e4>
		radio_isr_set(isr_done, param);
   11294:	489e      	ldr	r0, [pc, #632]	; (11510 <lll_conn_isr_rx+0x2f0>)
   11296:	4621      	mov	r1, r4
   11298:	f000 fb94 	bl	119c4 <radio_isr_set>
		} else if (!lll->role) {
   1129c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   112a0:	2b00      	cmp	r3, #0
   112a2:	f280 8104 	bge.w	114ae <lll_conn_isr_rx+0x28e>
	pdu_data_tx->sn = lll->sn;
   112a6:	9901      	ldr	r1, [sp, #4]
   112a8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	pdu_data_tx->nesn = lll->nesn;
   112ac:	780b      	ldrb	r3, [r1, #0]
   112ae:	f023 000c 	bic.w	r0, r3, #12
   112b2:	f3c2 0340 	ubfx	r3, r2, #1, #1
   112b6:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   112b8:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   112bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   112c0:	4303      	orrs	r3, r0
   112c2:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   112c4:	4620      	mov	r0, r4
   112c6:	f7ff ff0f 	bl	110e8 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   112ca:	f000 fc91 	bl	11bf0 <radio_is_ready>
   112ce:	2800      	cmp	r0, #0
   112d0:	f040 80d0 	bne.w	11474 <lll_conn_isr_rx+0x254>
	if (!radio_tmr_aa_restore()) {
   112d4:	f000 fec0 	bl	12058 <radio_tmr_aa_restore>
   112d8:	2800      	cmp	r0, #0
   112da:	d06b      	beq.n	113b4 <lll_conn_isr_rx+0x194>
	if (tx_release) {
   112dc:	2d00      	cmp	r5, #0
   112de:	d06f      	beq.n	113c0 <lll_conn_isr_rx+0x1a0>
		LL_ASSERT(lll->handle != 0xFFFF);
   112e0:	89a0      	ldrh	r0, [r4, #12]
   112e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   112e6:	4298      	cmp	r0, r3
   112e8:	f000 80d2 	beq.w	11490 <lll_conn_isr_rx+0x270>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   112ec:	4629      	mov	r1, r5
   112ee:	f7fd fdbd 	bl	ee6c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   112f2:	2f00      	cmp	r7, #0
   112f4:	d166      	bne.n	113c4 <lll_conn_isr_rx+0x1a4>
		ull_rx_sched();
   112f6:	f7fa fc1d 	bl	bb34 <ull_rx_sched>
}
   112fa:	b003      	add	sp, #12
   112fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   11300:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   11304:	7f32      	ldrb	r2, [r6, #28]
   11306:	f003 0101 	and.w	r1, r3, #1
   1130a:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1130e:	4288      	cmp	r0, r1
   11310:	f000 8089 	beq.w	11426 <lll_conn_isr_rx+0x206>
		lll->sn++;
   11314:	f081 0101 	eor.w	r1, r1, #1
   11318:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1131c:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   11320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   11324:	b2da      	uxtb	r2, r3
   11326:	f040 80cf 	bne.w	114c8 <lll_conn_isr_rx+0x2a8>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1132a:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   1132e:	aa01      	add	r2, sp, #4
   11330:	f7f6 fe8e 	bl	8050 <memq_peek>
		if (link) {
   11334:	4605      	mov	r5, r0
   11336:	2800      	cmp	r0, #0
   11338:	f000 80dd 	beq.w	114f6 <lll_conn_isr_rx+0x2d6>
			pdu_data_tx = (void *)(tx->pdu +
   1133c:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1133e:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   11342:	3704      	adds	r7, #4
   11344:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   11348:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1134a:	b152      	cbz	r2, 11362 <lll_conn_isr_rx+0x142>
				if (lll->enc_tx) {
   1134c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   11350:	06d9      	lsls	r1, r3, #27
   11352:	d506      	bpl.n	11362 <lll_conn_isr_rx+0x142>
					lll->ccm_tx.counter++;
   11354:	6f63      	ldr	r3, [r4, #116]	; 0x74
   11356:	3301      	adds	r3, #1
   11358:	6763      	str	r3, [r4, #116]	; 0x74
   1135a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   1135c:	f143 0300 	adc.w	r3, r3, #0
   11360:	67a3      	str	r3, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   11362:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   11366:	444a      	add	r2, r9
   11368:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1136a:	429a      	cmp	r2, r3
   1136c:	f0c0 80cc 	bcc.w	11508 <lll_conn_isr_rx+0x2e8>
			} else if (offset == lll->packet_tx_head_len) {
   11370:	f000 810d 	beq.w	1158e <lll_conn_isr_rx+0x36e>
				LL_ASSERT(0);
   11374:	4a69      	ldr	r2, [pc, #420]	; (1151c <lll_conn_isr_rx+0x2fc>)
   11376:	496a      	ldr	r1, [pc, #424]	; (11520 <lll_conn_isr_rx+0x300>)
   11378:	486a      	ldr	r0, [pc, #424]	; (11524 <lll_conn_isr_rx+0x304>)
   1137a:	f240 33c5 	movw	r3, #965	; 0x3c5
   1137e:	f004 ffb8 	bl	162f2 <assert_print>
   11382:	4040      	eors	r0, r0
   11384:	f380 8811 	msr	BASEPRI, r0
   11388:	f04f 0003 	mov.w	r0, #3
   1138c:	df02      	svc	2
	tx_release = NULL;
   1138e:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   11390:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11394:	2b00      	cmp	r3, #0
   11396:	f2c0 80f0 	blt.w	1157a <lll_conn_isr_rx+0x35a>
			    !pdu_data_rx->md) {
   1139a:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1139c:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1139e:	bf58      	it	pl
   113a0:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   113a4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   113a8:	bf5c      	itt	pl
   113aa:	f088 0810 	eorpl.w	r8, r8, #16
   113ae:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   113b2:	e03b      	b.n	1142c <lll_conn_isr_rx+0x20c>
		radio_tmr_aa_save(radio_tmr_aa_get());
   113b4:	f000 fe44 	bl	12040 <radio_tmr_aa_get>
   113b8:	f000 fe48 	bl	1204c <radio_tmr_aa_save>
	if (tx_release) {
   113bc:	2d00      	cmp	r5, #0
   113be:	d18f      	bne.n	112e0 <lll_conn_isr_rx+0xc0>
	if (is_rx_enqueue) {
   113c0:	2f00      	cmp	r7, #0
   113c2:	d09a      	beq.n	112fa <lll_conn_isr_rx+0xda>
		ull_pdu_rx_alloc();
   113c4:	f7fa fb90 	bl	bae8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   113c8:	2303      	movs	r3, #3
   113ca:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   113cc:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   113ce:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   113d0:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   113d2:	4631      	mov	r1, r6
   113d4:	f7fa fb9e 	bl	bb14 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   113d8:	e78d      	b.n	112f6 <lll_conn_isr_rx+0xd6>
		crc_expire--;
   113da:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   113dc:	a901      	add	r1, sp, #4
   113de:	4620      	mov	r0, r4
		crc_expire--;
   113e0:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   113e2:	f7ff fead 	bl	11140 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   113e6:	2096      	movs	r0, #150	; 0x96
   113e8:	f000 fd4a 	bl	11e80 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   113ec:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   113f0:	f000 0007 	and.w	r0, r0, #7
   113f4:	f000 fc38 	bl	11c68 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   113f8:	484b      	ldr	r0, [pc, #300]	; (11528 <lll_conn_isr_rx+0x308>)
   113fa:	4621      	mov	r1, r4
   113fc:	f000 fae2 	bl	119c4 <radio_isr_set>
		radio_tmr_end_capture();
   11400:	f000 fe30 	bl	12064 <radio_tmr_end_capture>
   11404:	e74f      	b.n	112a6 <lll_conn_isr_rx+0x86>
	LL_ASSERT(node_rx);
   11406:	4a45      	ldr	r2, [pc, #276]	; (1151c <lll_conn_isr_rx+0x2fc>)
   11408:	4948      	ldr	r1, [pc, #288]	; (1152c <lll_conn_isr_rx+0x30c>)
   1140a:	4846      	ldr	r0, [pc, #280]	; (11524 <lll_conn_isr_rx+0x304>)
   1140c:	23f2      	movs	r3, #242	; 0xf2
   1140e:	f004 ff70 	bl	162f2 <assert_print>
   11412:	4040      	eors	r0, r0
   11414:	f380 8811 	msr	BASEPRI, r0
   11418:	f04f 0003 	mov.w	r0, #3
   1141c:	df02      	svc	2
	if (crc_ok) {
   1141e:	2d00      	cmp	r5, #0
   11420:	f43f af25 	beq.w	1126e <lll_conn_isr_rx+0x4e>
   11424:	e76c      	b.n	11300 <lll_conn_isr_rx+0xe0>
	is_done = 0U;
   11426:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1142a:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1142c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   11430:	f3c3 0140 	ubfx	r1, r3, #1, #1
   11434:	428a      	cmp	r2, r1
   11436:	f000 8081 	beq.w	1153c <lll_conn_isr_rx+0x31c>
	is_rx_enqueue = 0U;
   1143a:	2700      	movs	r7, #0
		crc_expire = 0U;
   1143c:	4a36      	ldr	r2, [pc, #216]	; (11518 <lll_conn_isr_rx+0x2f8>)
   1143e:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   11440:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   11444:	4b3a      	ldr	r3, [pc, #232]	; (11530 <lll_conn_isr_rx+0x310>)
		crc_expire = 0U;
   11446:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11448:	4620      	mov	r0, r4
		crc_valid = 1U;
   1144a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1144c:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1144e:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11450:	f7ff fe76 	bl	11140 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   11454:	f1b8 0f00 	cmp.w	r8, #0
   11458:	f47f af1c 	bne.w	11294 <lll_conn_isr_rx+0x74>
   1145c:	7f33      	ldrb	r3, [r6, #28]
   1145e:	06d9      	lsls	r1, r3, #27
   11460:	d4c1      	bmi.n	113e6 <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   11462:	9b01      	ldr	r3, [sp, #4]
   11464:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   11466:	06d2      	lsls	r2, r2, #27
   11468:	d4bd      	bmi.n	113e6 <lll_conn_isr_rx+0x1c6>
			      (pdu_data_tx->md == 0) &&
   1146a:	785b      	ldrb	r3, [r3, #1]
   1146c:	2b00      	cmp	r3, #0
   1146e:	f43f af11 	beq.w	11294 <lll_conn_isr_rx+0x74>
   11472:	e7b8      	b.n	113e6 <lll_conn_isr_rx+0x1c6>
	LL_ASSERT(!radio_is_ready());
   11474:	4a29      	ldr	r2, [pc, #164]	; (1151c <lll_conn_isr_rx+0x2fc>)
   11476:	492f      	ldr	r1, [pc, #188]	; (11534 <lll_conn_isr_rx+0x314>)
   11478:	482a      	ldr	r0, [pc, #168]	; (11524 <lll_conn_isr_rx+0x304>)
   1147a:	f44f 73c0 	mov.w	r3, #384	; 0x180
   1147e:	f004 ff38 	bl	162f2 <assert_print>
   11482:	4040      	eors	r0, r0
   11484:	f380 8811 	msr	BASEPRI, r0
   11488:	f04f 0003 	mov.w	r0, #3
   1148c:	df02      	svc	2
   1148e:	e721      	b.n	112d4 <lll_conn_isr_rx+0xb4>
		LL_ASSERT(lll->handle != 0xFFFF);
   11490:	4a22      	ldr	r2, [pc, #136]	; (1151c <lll_conn_isr_rx+0x2fc>)
   11492:	4929      	ldr	r1, [pc, #164]	; (11538 <lll_conn_isr_rx+0x318>)
   11494:	4823      	ldr	r0, [pc, #140]	; (11524 <lll_conn_isr_rx+0x304>)
   11496:	f44f 73cb 	mov.w	r3, #406	; 0x196
   1149a:	f004 ff2a 	bl	162f2 <assert_print>
   1149e:	4040      	eors	r0, r0
   114a0:	f380 8811 	msr	BASEPRI, r0
   114a4:	f04f 0003 	mov.w	r0, #3
   114a8:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   114aa:	89a0      	ldrh	r0, [r4, #12]
   114ac:	e71e      	b.n	112ec <lll_conn_isr_rx+0xcc>
			radio_disable();
   114ae:	f000 fb7f 	bl	11bb0 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   114b2:	f000 fb9d 	bl	11bf0 <radio_is_ready>
   114b6:	2800      	cmp	r0, #0
   114b8:	d151      	bne.n	1155e <lll_conn_isr_rx+0x33e>
			lll->empty = is_empty_pdu_tx_retry;
   114ba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   114be:	f369 0382 	bfi	r3, r9, #2, #1
   114c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   114c6:	e705      	b.n	112d4 <lll_conn_isr_rx+0xb4>
			lll->empty = 0;
   114c8:	f36f 0282 	bfc	r2, #2, #1
   114cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   114d0:	f000 fbc2 	bl	11c58 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   114d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   114d8:	2b00      	cmp	r3, #0
   114da:	db0c      	blt.n	114f6 <lll_conn_isr_rx+0x2d6>
			    !pdu_data_rx->md) {
   114dc:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   114de:	f012 0510 	ands.w	r5, r2, #16
   114e2:	d109      	bne.n	114f8 <lll_conn_isr_rx+0x2d8>
				*is_done = !pdu_data_tx->md;
   114e4:	f890 8000 	ldrb.w	r8, [r0]
   114e8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   114ec:	f088 0810 	eor.w	r8, r8, #16
   114f0:	f3c8 1800 	ubfx	r8, r8, #4, #1
   114f4:	e79a      	b.n	1142c <lll_conn_isr_rx+0x20c>
   114f6:	7f32      	ldrb	r2, [r6, #28]
   114f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   114fc:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   11500:	4645      	mov	r5, r8
   11502:	e793      	b.n	1142c <lll_conn_isr_rx+0x20c>
	is_rx_enqueue = 0U;
   11504:	462f      	mov	r7, r5
   11506:	e76e      	b.n	113e6 <lll_conn_isr_rx+0x1c6>
				lll->packet_tx_head_offset = offset;
   11508:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   1150c:	2500      	movs	r5, #0
   1150e:	e73f      	b.n	11390 <lll_conn_isr_rx+0x170>
   11510:	00010e91 	.word	0x00010e91
   11514:	2000222e 	.word	0x2000222e
   11518:	2000223b 	.word	0x2000223b
   1151c:	0001adb4 	.word	0x0001adb4
   11520:	0001a5e0 	.word	0x0001a5e0
   11524:	0001a580 	.word	0x0001a580
   11528:	00011031 	.word	0x00011031
   1152c:	0001ad84 	.word	0x0001ad84
   11530:	2000223c 	.word	0x2000223c
   11534:	0001ad8c 	.word	0x0001ad8c
   11538:	0001ae0c 	.word	0x0001ae0c
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1153c:	2003      	movs	r0, #3
   1153e:	f7fa fab3 	bl	baa8 <ull_pdu_rx_alloc_peek>
		lll->nesn++;
   11542:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	if ((pdu_data_rx->sn == lll->nesn) &&
   11546:	2800      	cmp	r0, #0
   11548:	f43f af77 	beq.w	1143a <lll_conn_isr_rx+0x21a>
		lll->nesn++;
   1154c:	f083 0302 	eor.w	r3, r3, #2
   11550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   11554:	7f73      	ldrb	r3, [r6, #29]
   11556:	b9a3      	cbnz	r3, 11582 <lll_conn_isr_rx+0x362>
   11558:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1155c:	e76d      	b.n	1143a <lll_conn_isr_rx+0x21a>
			LL_ASSERT(!radio_is_ready());
   1155e:	4a47      	ldr	r2, [pc, #284]	; (1167c <lll_conn_isr_rx+0x45c>)
   11560:	4947      	ldr	r1, [pc, #284]	; (11680 <lll_conn_isr_rx+0x460>)
   11562:	4848      	ldr	r0, [pc, #288]	; (11684 <lll_conn_isr_rx+0x464>)
   11564:	f240 1347 	movw	r3, #327	; 0x147
   11568:	f004 fec3 	bl	162f2 <assert_print>
   1156c:	4040      	eors	r0, r0
   1156e:	f380 8811 	msr	BASEPRI, r0
   11572:	f04f 0003 	mov.w	r0, #3
   11576:	df02      	svc	2
   11578:	e79f      	b.n	114ba <lll_conn_isr_rx+0x29a>
   1157a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1157e:	7f32      	ldrb	r2, [r6, #28]
   11580:	e754      	b.n	1142c <lll_conn_isr_rx+0x20c>
			if (lll->enc_rx) {
   11582:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   11586:	0718      	lsls	r0, r3, #28
   11588:	d40f      	bmi.n	115aa <lll_conn_isr_rx+0x38a>
			*is_rx_enqueue = 1U;
   1158a:	2701      	movs	r7, #1
   1158c:	e756      	b.n	1143c <lll_conn_isr_rx+0x21c>
				lll->packet_tx_head_len = 0;
   1158e:	2200      	movs	r2, #0
   11590:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   11594:	6b20      	ldr	r0, [r4, #48]	; 0x30
   11596:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1159a:	f7f6 fd61 	bl	8060 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1159e:	9b01      	ldr	r3, [sp, #4]
   115a0:	681a      	ldr	r2, [r3, #0]
   115a2:	602a      	str	r2, [r5, #0]
				tx->next = link;
   115a4:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   115a6:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   115a8:	e6f2      	b.n	11390 <lll_conn_isr_rx+0x170>
				done = radio_ccm_is_done();
   115aa:	f000 fde1 	bl	12170 <radio_ccm_is_done>
				LL_ASSERT(done);
   115ae:	2800      	cmp	r0, #0
   115b0:	d055      	beq.n	1165e <lll_conn_isr_rx+0x43e>
				bool mic_failure = !radio_ccm_mic_is_valid();
   115b2:	f000 fdff 	bl	121b4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   115b6:	2800      	cmp	r0, #0
   115b8:	d13f      	bne.n	1163a <lll_conn_isr_rx+0x41a>
				    lll->ccm_rx.counter == 0 &&
   115ba:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   115be:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   115c2:	4313      	orrs	r3, r2
   115c4:	d104      	bne.n	115d0 <lll_conn_isr_rx+0x3b0>
				    (pdu_data_rx->ll_id ==
   115c6:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   115c8:	f003 0303 	and.w	r3, r3, #3
   115cc:	2b03      	cmp	r3, #3
   115ce:	d01d      	beq.n	1160c <lll_conn_isr_rx+0x3ec>
					mic_state = LLL_CONN_MIC_FAIL;
   115d0:	4b2d      	ldr	r3, [pc, #180]	; (11688 <lll_conn_isr_rx+0x468>)
			radio_isr_set(isr_done, param);
   115d2:	482e      	ldr	r0, [pc, #184]	; (1168c <lll_conn_isr_rx+0x46c>)
					mic_state = LLL_CONN_MIC_FAIL;
   115d4:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   115d6:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   115d8:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   115da:	f000 f9f3 	bl	119c4 <radio_isr_set>
			radio_disable();
   115de:	f000 fae7 	bl	11bb0 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   115e2:	f000 fb05 	bl	11bf0 <radio_is_ready>
   115e6:	4607      	mov	r7, r0
   115e8:	2800      	cmp	r0, #0
   115ea:	f43f ae73 	beq.w	112d4 <lll_conn_isr_rx+0xb4>
   115ee:	4a23      	ldr	r2, [pc, #140]	; (1167c <lll_conn_isr_rx+0x45c>)
   115f0:	4923      	ldr	r1, [pc, #140]	; (11680 <lll_conn_isr_rx+0x460>)
   115f2:	4824      	ldr	r0, [pc, #144]	; (11684 <lll_conn_isr_rx+0x464>)
   115f4:	f240 1303 	movw	r3, #259	; 0x103
   115f8:	f004 fe7b 	bl	162f2 <assert_print>
   115fc:	4040      	eors	r0, r0
   115fe:	f380 8811 	msr	BASEPRI, r0
   11602:	f04f 0003 	mov.w	r0, #3
   11606:	df02      	svc	2
	is_rx_enqueue = 0U;
   11608:	2700      	movs	r7, #0
   1160a:	e663      	b.n	112d4 <lll_conn_isr_rx+0xb4>
						radio_pkt_scratch_get();
   1160c:	f000 fb28 	bl	11c60 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   11610:	7843      	ldrb	r3, [r0, #1]
   11612:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   11614:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   11616:	d8db      	bhi.n	115d0 <lll_conn_isr_rx+0x3b0>
						memcpy(pdu_data_rx,
   11618:	3303      	adds	r3, #3
   1161a:	b2da      	uxtb	r2, r3
   1161c:	f106 001c 	add.w	r0, r6, #28
   11620:	f005 f8e7 	bl	167f2 <memcpy>
						lll->ccm_rx.counter--;
   11624:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   11628:	3b01      	subs	r3, #1
   1162a:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   1162e:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   11632:	f143 33ff 	adc.w	r3, r3, #4294967295
   11636:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   1163a:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1163e:	3301      	adds	r3, #1
   11640:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   11644:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
						lll->ccm_rx.counter--;
   11648:	f104 0253 	add.w	r2, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   1164c:	f143 0300 	adc.w	r3, r3, #0
   11650:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   11652:	4b0d      	ldr	r3, [pc, #52]	; (11688 <lll_conn_isr_rx+0x468>)
   11654:	2701      	movs	r7, #1
   11656:	701f      	strb	r7, [r3, #0]
		if (err) {
   11658:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1165c:	e6ee      	b.n	1143c <lll_conn_isr_rx+0x21c>
				LL_ASSERT(done);
   1165e:	4a07      	ldr	r2, [pc, #28]	; (1167c <lll_conn_isr_rx+0x45c>)
   11660:	490b      	ldr	r1, [pc, #44]	; (11690 <lll_conn_isr_rx+0x470>)
   11662:	4808      	ldr	r0, [pc, #32]	; (11684 <lll_conn_isr_rx+0x464>)
   11664:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   11668:	f004 fe43 	bl	162f2 <assert_print>
   1166c:	4040      	eors	r0, r0
   1166e:	f380 8811 	msr	BASEPRI, r0
   11672:	f04f 0003 	mov.w	r0, #3
   11676:	df02      	svc	2
   11678:	e79b      	b.n	115b2 <lll_conn_isr_rx+0x392>
   1167a:	bf00      	nop
   1167c:	0001adb4 	.word	0x0001adb4
   11680:	0001ad8c 	.word	0x0001ad8c
   11684:	0001a580 	.word	0x0001a580
   11688:	2000223d 	.word	0x2000223d
   1168c:	00010e91 	.word	0x00010e91
   11690:	0001ae04 	.word	0x0001ae04

00011694 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   11694:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   11696:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   11698:	89a2      	ldrh	r2, [r4, #12]
   1169a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1169e:	429a      	cmp	r2, r3
{
   116a0:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   116a2:	f000 8091 	beq.w	117c8 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   116a6:	4605      	mov	r5, r0
   116a8:	f7ff fc38 	bl	10f1c <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   116ac:	892b      	ldrh	r3, [r5, #8]
   116ae:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   116b0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   116b2:	441a      	add	r2, r3
   116b4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   116b6:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   116b8:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   116ba:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   116bc:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   116be:	1c41      	adds	r1, r0, #1
   116c0:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   116c2:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   116c4:	f04f 0100 	mov.w	r1, #0
   116c8:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   116ca:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   116ce:	d45f      	bmi.n	11790 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   116d0:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   116d4:	460b      	mov	r3, r1
   116d6:	7fa1      	ldrb	r1, [r4, #30]
   116d8:	9000      	str	r0, [sp, #0]
   116da:	f104 001f 	add.w	r0, r4, #31
   116de:	f7fe f9e7 	bl	fab0 <lll_chan_sel_1>
   116e2:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   116e4:	4620      	mov	r0, r4
   116e6:	a903      	add	r1, sp, #12
   116e8:	f7ff fd2a 	bl	11140 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   116ec:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   116f0:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   116f2:	f3c2 0340 	ubfx	r3, r2, #1, #1
   116f6:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   116f8:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   116fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   11700:	780a      	ldrb	r2, [r1, #0]
   11702:	f022 020c 	bic.w	r2, r2, #12
   11706:	4313      	orrs	r3, r2
   11708:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1170a:	f000 f99d 	bl	11a48 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1170e:	2000      	movs	r0, #0
   11710:	f000 f9d0 	bl	11ab4 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   11714:	1d20      	adds	r0, r4, #4
   11716:	f000 f9eb 	bl	11af0 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1171a:	8923      	ldrh	r3, [r4, #8]
   1171c:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1171e:	f240 605b 	movw	r0, #1627	; 0x65b
   11722:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   11726:	f000 fa81 	bl	11c2c <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1172a:	4630      	mov	r0, r6
   1172c:	f7fe fe10 	bl	10350 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   11730:	9903      	ldr	r1, [sp, #12]
   11732:	4620      	mov	r0, r4
   11734:	f7ff fcd8 	bl	110e8 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   11738:	4621      	mov	r1, r4
   1173a:	4828      	ldr	r0, [pc, #160]	; (117dc <prepare_cb+0x148>)
   1173c:	f000 f942 	bl	119c4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   11740:	2096      	movs	r0, #150	; 0x96
   11742:	f000 fb9d 	bl	11e80 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   11746:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1174a:	f000 0007 	and.w	r0, r0, #7
   1174e:	f000 fa8b 	bl	11c68 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   11752:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   11754:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   11756:	4638      	mov	r0, r7
   11758:	f7fe fddc 	bl	10314 <lll_event_offset_get>
   1175c:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1175e:	686a      	ldr	r2, [r5, #4]
   11760:	f106 0109 	add.w	r1, r6, #9
   11764:	2001      	movs	r0, #1
   11766:	f000 fb97 	bl	11e98 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1176a:	f000 fc7b 	bl	12064 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1176e:	89a1      	ldrh	r1, [r4, #12]
   11770:	3103      	adds	r1, #3
   11772:	4632      	mov	r2, r6
   11774:	b2c9      	uxtb	r1, r1
   11776:	4638      	mov	r0, r7
   11778:	f7fe fdda 	bl	10330 <lll_preempt_calc>
   1177c:	b180      	cbz	r0, 117a0 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1177e:	4818      	ldr	r0, [pc, #96]	; (117e0 <prepare_cb+0x14c>)
   11780:	4621      	mov	r1, r4
   11782:	f000 f91f 	bl	119c4 <radio_isr_set>
		radio_disable();
   11786:	f000 fa13 	bl	11bb0 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1178a:	2000      	movs	r0, #0
   1178c:	b005      	add	sp, #20
   1178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   11790:	460a      	mov	r2, r1
   11792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11796:	8be1      	ldrh	r1, [r4, #30]
   11798:	f7fe f9ce 	bl	fb38 <lll_chan_sel_2>
   1179c:	4606      	mov	r6, r0
   1179e:	e7a1      	b.n	116e4 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   117a0:	4620      	mov	r0, r4
   117a2:	f7fe fd51 	bl	10248 <lll_prepare_done>
		LL_ASSERT(!ret);
   117a6:	2800      	cmp	r0, #0
   117a8:	d0ef      	beq.n	1178a <prepare_cb+0xf6>
   117aa:	4a0e      	ldr	r2, [pc, #56]	; (117e4 <prepare_cb+0x150>)
   117ac:	490e      	ldr	r1, [pc, #56]	; (117e8 <prepare_cb+0x154>)
   117ae:	480f      	ldr	r0, [pc, #60]	; (117ec <prepare_cb+0x158>)
   117b0:	23fd      	movs	r3, #253	; 0xfd
   117b2:	f004 fd9e 	bl	162f2 <assert_print>
   117b6:	4040      	eors	r0, r0
   117b8:	f380 8811 	msr	BASEPRI, r0
   117bc:	f04f 0003 	mov.w	r0, #3
   117c0:	df02      	svc	2
}
   117c2:	2000      	movs	r0, #0
   117c4:	b005      	add	sp, #20
   117c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   117c8:	4809      	ldr	r0, [pc, #36]	; (117f0 <prepare_cb+0x15c>)
   117ca:	4621      	mov	r1, r4
   117cc:	f000 f8fa 	bl	119c4 <radio_isr_set>
		radio_disable();
   117d0:	f000 f9ee 	bl	11bb0 <radio_disable>
}
   117d4:	2000      	movs	r0, #0
   117d6:	b005      	add	sp, #20
   117d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117da:	bf00      	nop
   117dc:	00011031 	.word	0x00011031
   117e0:	00010489 	.word	0x00010489
   117e4:	0001ae24 	.word	0x0001ae24
   117e8:	0001a840 	.word	0x0001a840
   117ec:	0001a580 	.word	0x0001a580
   117f0:	000104a9 	.word	0x000104a9

000117f4 <lll_central_prepare>:
{
   117f4:	b510      	push	{r4, lr}
   117f6:	b082      	sub	sp, #8
   117f8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   117fa:	f7fe ffaf 	bl	1075c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   117fe:	2800      	cmp	r0, #0
   11800:	db19      	blt.n	11836 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   11802:	4a13      	ldr	r2, [pc, #76]	; (11850 <lll_central_prepare+0x5c>)
   11804:	4913      	ldr	r1, [pc, #76]	; (11854 <lll_central_prepare+0x60>)
   11806:	4814      	ldr	r0, [pc, #80]	; (11858 <lll_central_prepare+0x64>)
   11808:	9400      	str	r4, [sp, #0]
   1180a:	2300      	movs	r3, #0
   1180c:	f7fa fc5e 	bl	c0cc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   11810:	b108      	cbz	r0, 11816 <lll_central_prepare+0x22>
   11812:	3077      	adds	r0, #119	; 0x77
   11814:	d101      	bne.n	1181a <lll_central_prepare+0x26>
}
   11816:	b002      	add	sp, #8
   11818:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1181a:	4a10      	ldr	r2, [pc, #64]	; (1185c <lll_central_prepare+0x68>)
   1181c:	4910      	ldr	r1, [pc, #64]	; (11860 <lll_central_prepare+0x6c>)
   1181e:	4811      	ldr	r0, [pc, #68]	; (11864 <lll_central_prepare+0x70>)
   11820:	2351      	movs	r3, #81	; 0x51
   11822:	f004 fd66 	bl	162f2 <assert_print>
   11826:	4040      	eors	r0, r0
   11828:	f380 8811 	msr	BASEPRI, r0
   1182c:	f04f 0003 	mov.w	r0, #3
   11830:	df02      	svc	2
}
   11832:	b002      	add	sp, #8
   11834:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   11836:	4a09      	ldr	r2, [pc, #36]	; (1185c <lll_central_prepare+0x68>)
   11838:	490b      	ldr	r1, [pc, #44]	; (11868 <lll_central_prepare+0x74>)
   1183a:	480a      	ldr	r0, [pc, #40]	; (11864 <lll_central_prepare+0x70>)
   1183c:	234c      	movs	r3, #76	; 0x4c
   1183e:	f004 fd58 	bl	162f2 <assert_print>
   11842:	4040      	eors	r0, r0
   11844:	f380 8811 	msr	BASEPRI, r0
   11848:	f04f 0003 	mov.w	r0, #3
   1184c:	df02      	svc	2
   1184e:	e7d8      	b.n	11802 <lll_central_prepare+0xe>
   11850:	00011695 	.word	0x00011695
   11854:	00010f45 	.word	0x00010f45
   11858:	0001030d 	.word	0x0001030d
   1185c:	0001ae24 	.word	0x0001ae24
   11860:	0001ada0 	.word	0x0001ada0
   11864:	0001a580 	.word	0x0001a580
   11868:	0001acf8 	.word	0x0001acf8

0001186c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1186c:	4b05      	ldr	r3, [pc, #20]	; (11884 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1186e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11872:	2100      	movs	r1, #0
   11874:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   11878:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1187c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   11880:	4770      	bx	lr
   11882:	bf00      	nop
   11884:	4000b000 	.word	0x4000b000

00011888 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   11888:	4b05      	ldr	r3, [pc, #20]	; (118a0 <cntr_start+0x18>)
   1188a:	7818      	ldrb	r0, [r3, #0]
   1188c:	1c42      	adds	r2, r0, #1
   1188e:	701a      	strb	r2, [r3, #0]
   11890:	b918      	cbnz	r0, 1189a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11892:	4b04      	ldr	r3, [pc, #16]	; (118a4 <cntr_start+0x1c>)
   11894:	2201      	movs	r2, #1
   11896:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   11898:	4770      	bx	lr
		return 1;
   1189a:	2001      	movs	r0, #1
}
   1189c:	4770      	bx	lr
   1189e:	bf00      	nop
   118a0:	2000223e 	.word	0x2000223e
   118a4:	4000b000 	.word	0x4000b000

000118a8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   118a8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   118aa:	4c0d      	ldr	r4, [pc, #52]	; (118e0 <cntr_stop+0x38>)
   118ac:	7820      	ldrb	r0, [r4, #0]
   118ae:	b148      	cbz	r0, 118c4 <cntr_stop+0x1c>

	if (--_refcount) {
   118b0:	3801      	subs	r0, #1
   118b2:	b2c0      	uxtb	r0, r0
   118b4:	7020      	strb	r0, [r4, #0]
   118b6:	b918      	cbnz	r0, 118c0 <cntr_stop+0x18>
   118b8:	4b0a      	ldr	r3, [pc, #40]	; (118e4 <cntr_stop+0x3c>)
   118ba:	2201      	movs	r2, #1
   118bc:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   118be:	bd10      	pop	{r4, pc}
		return 1;
   118c0:	2001      	movs	r0, #1
}
   118c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   118c4:	4a08      	ldr	r2, [pc, #32]	; (118e8 <cntr_stop+0x40>)
   118c6:	4909      	ldr	r1, [pc, #36]	; (118ec <cntr_stop+0x44>)
   118c8:	4809      	ldr	r0, [pc, #36]	; (118f0 <cntr_stop+0x48>)
   118ca:	232d      	movs	r3, #45	; 0x2d
   118cc:	f004 fd11 	bl	162f2 <assert_print>
   118d0:	4040      	eors	r0, r0
   118d2:	f380 8811 	msr	BASEPRI, r0
   118d6:	f04f 0003 	mov.w	r0, #3
   118da:	df02      	svc	2
	if (--_refcount) {
   118dc:	7820      	ldrb	r0, [r4, #0]
   118de:	e7e7      	b.n	118b0 <cntr_stop+0x8>
   118e0:	2000223e 	.word	0x2000223e
   118e4:	4000b000 	.word	0x4000b000
   118e8:	0001ae74 	.word	0x0001ae74
   118ec:	0001aec0 	.word	0x0001aec0
   118f0:	0001a580 	.word	0x0001a580

000118f4 <cntr_cnt_get>:
     return p_reg->COUNTER;
   118f4:	4b01      	ldr	r3, [pc, #4]	; (118fc <cntr_cnt_get+0x8>)
   118f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   118fa:	4770      	bx	lr
   118fc:	4000b000 	.word	0x4000b000

00011900 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   11900:	4b02      	ldr	r3, [pc, #8]	; (1190c <cntr_cmp_set+0xc>)
   11902:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11906:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1190a:	4770      	bx	lr
   1190c:	4000b000 	.word	0x4000b000

00011910 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11910:	4b12      	ldr	r3, [pc, #72]	; (1195c <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   11912:	b430      	push	{r4, r5}
   11914:	2101      	movs	r1, #1
   11916:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   11918:	2000      	movs	r0, #0
   1191a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1191c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11920:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11924:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   11928:	6019      	str	r1, [r3, #0]
}
   1192a:	e005      	b.n	11938 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1192c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11930:	b932      	cbnz	r2, 11940 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11932:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11936:	b11a      	cbz	r2, 11940 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11938:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1193c:	2a00      	cmp	r2, #0
   1193e:	d0f5      	beq.n	1192c <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11940:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   11942:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   11946:	2a00      	cmp	r2, #0
   11948:	d1e7      	bne.n	1191a <do_ecb+0xa>
   1194a:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1194e:	2d00      	cmp	r5, #0
   11950:	d0e3      	beq.n	1191a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   11952:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   11954:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   11958:	4770      	bx	lr
   1195a:	bf00      	nop
   1195c:	4000e000 	.word	0x4000e000

00011960 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   11960:	b570      	push	{r4, r5, r6, lr}
   11962:	b08c      	sub	sp, #48	; 0x30
   11964:	460e      	mov	r6, r1
   11966:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11968:	4601      	mov	r1, r0
   1196a:	2210      	movs	r2, #16
   1196c:	4668      	mov	r0, sp
{
   1196e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11970:	f7f6 fb3c 	bl	7fec <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   11974:	2210      	movs	r2, #16
   11976:	eb0d 0002 	add.w	r0, sp, r2
   1197a:	4631      	mov	r1, r6
   1197c:	f7f6 fb36 	bl	7fec <mem_rcopy>

	do_ecb(&ecb);
   11980:	4668      	mov	r0, sp
   11982:	f7ff ffc5 	bl	11910 <do_ecb>

	if (cipher_text_le) {
   11986:	b125      	cbz	r5, 11992 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   11988:	2210      	movs	r2, #16
   1198a:	a908      	add	r1, sp, #32
   1198c:	4628      	mov	r0, r5
   1198e:	f7f6 fb2d 	bl	7fec <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   11992:	b124      	cbz	r4, 1199e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   11994:	2210      	movs	r2, #16
   11996:	a908      	add	r1, sp, #32
   11998:	4620      	mov	r0, r4
   1199a:	f004 ff2a 	bl	167f2 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1199e:	b00c      	add	sp, #48	; 0x30
   119a0:	bd70      	pop	{r4, r5, r6, pc}
   119a2:	bf00      	nop

000119a4 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   119a4:	4b04      	ldr	r3, [pc, #16]	; (119b8 <isr_radio+0x14>)
   119a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   119aa:	b123      	cbz	r3, 119b6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   119ac:	4a03      	ldr	r2, [pc, #12]	; (119bc <isr_radio+0x18>)
   119ae:	4b04      	ldr	r3, [pc, #16]	; (119c0 <isr_radio+0x1c>)
   119b0:	6810      	ldr	r0, [r2, #0]
   119b2:	681b      	ldr	r3, [r3, #0]
   119b4:	4718      	bx	r3
}
   119b6:	4770      	bx	lr
   119b8:	40001000 	.word	0x40001000
   119bc:	20001ff0 	.word	0x20001ff0
   119c0:	20001fec 	.word	0x20001fec

000119c4 <radio_isr_set>:
{
   119c4:	b538      	push	{r3, r4, r5, lr}
   119c6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   119c8:	2001      	movs	r0, #1
{
   119ca:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   119cc:	f7f2 fa5e 	bl	3e8c <arch_irq_disable>
	isr_cb = cb;
   119d0:	4b08      	ldr	r3, [pc, #32]	; (119f4 <radio_isr_set+0x30>)
	isr_cb_param = param;
   119d2:	4a09      	ldr	r2, [pc, #36]	; (119f8 <radio_isr_set+0x34>)
	isr_cb = cb;
   119d4:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   119d6:	4909      	ldr	r1, [pc, #36]	; (119fc <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   119d8:	4b09      	ldr	r3, [pc, #36]	; (11a00 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   119da:	6015      	str	r5, [r2, #0]
   119dc:	2010      	movs	r0, #16
   119de:	2202      	movs	r2, #2
   119e0:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   119e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   119e8:	2001      	movs	r0, #1
}
   119ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   119ee:	f7f2 ba3d 	b.w	3e6c <arch_irq_enable>
   119f2:	bf00      	nop
   119f4:	20001fec 	.word	0x20001fec
   119f8:	20001ff0 	.word	0x20001ff0
   119fc:	40001000 	.word	0x40001000
   11a00:	e000e100 	.word	0xe000e100

00011a04 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11a08:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11a0c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11a0e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   11a12:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11a16:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   11a1a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   11a1e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   11a22:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   11a26:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   11a2a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   11a2e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   11a32:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   11a36:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   11a3a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   11a3e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   11a42:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   11a46:	4770      	bx	lr

00011a48 <radio_reset>:
{
   11a48:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   11a4a:	2001      	movs	r0, #1
   11a4c:	f7f2 fa1e 	bl	3e8c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   11a50:	4a0d      	ldr	r2, [pc, #52]	; (11a88 <radio_reset+0x40>)
   11a52:	2100      	movs	r1, #0
   11a54:	2301      	movs	r3, #1
   11a56:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   11a5a:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   11a5e:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   11a62:	490a      	ldr	r1, [pc, #40]	; (11a8c <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   11a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11a68:	f023 0301 	bic.w	r3, r3, #1
   11a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   11a70:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   11a74:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   11a78:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   11a7c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   11a80:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   11a84:	bd10      	pop	{r4, pc}
   11a86:	bf00      	nop
   11a88:	40001000 	.word	0x40001000
   11a8c:	4001f000 	.word	0x4001f000

00011a90 <radio_stop>:
}
   11a90:	4770      	bx	lr
   11a92:	bf00      	nop

00011a94 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11a94:	4b06      	ldr	r3, [pc, #24]	; (11ab0 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   11a96:	2802      	cmp	r0, #2
   11a98:	bf14      	ite	ne
   11a9a:	2203      	movne	r2, #3
   11a9c:	2204      	moveq	r2, #4
   11a9e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11aa2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11aa6:	f042 0201 	orr.w	r2, r2, #1
   11aaa:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   11aae:	4770      	bx	lr
   11ab0:	40001000 	.word	0x40001000

00011ab4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   11ab4:	4b01      	ldr	r3, [pc, #4]	; (11abc <radio_tx_power_set+0x8>)
   11ab6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   11aba:	4770      	bx	lr
   11abc:	40001000 	.word	0x40001000

00011ac0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11ac0:	4b01      	ldr	r3, [pc, #4]	; (11ac8 <radio_freq_chan_set+0x8>)
   11ac2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   11ac6:	4770      	bx	lr
   11ac8:	40001000 	.word	0x40001000

00011acc <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11acc:	4b07      	ldr	r3, [pc, #28]	; (11aec <radio_whiten_iv_set+0x20>)
   11ace:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11ad2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11ad6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   11ada:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11ade:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11ae2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11ae6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   11aea:	4770      	bx	lr
   11aec:	40001000 	.word	0x40001000

00011af0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11af0:	4a0a      	ldr	r2, [pc, #40]	; (11b1c <radio_aa_set+0x2c>)
   11af2:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   11af4:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   11af6:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11afa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11afe:	78c3      	ldrb	r3, [r0, #3]
   11b00:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11b04:	7843      	ldrb	r3, [r0, #1]
   11b06:	f890 c002 	ldrb.w	ip, [r0, #2]
   11b0a:	7801      	ldrb	r1, [r0, #0]
   11b0c:	041b      	lsls	r3, r3, #16
   11b0e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   11b12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11b16:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   11b1a:	4770      	bx	lr
   11b1c:	40001000 	.word	0x40001000

00011b20 <radio_pkt_configure>:
	switch (phy) {
   11b20:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   11b24:	2b02      	cmp	r3, #2
   11b26:	bf14      	ite	ne
   11b28:	f04f 0c00 	movne.w	ip, #0
   11b2c:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   11b30:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11b32:	bf48      	it	mi
   11b34:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   11b38:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   11b3c:	4b0a      	ldr	r3, [pc, #40]	; (11b68 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11b3e:	4a0b      	ldr	r2, [pc, #44]	; (11b6c <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   11b40:	ea40 000c 	orr.w	r0, r0, ip
   11b44:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   11b48:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11b4c:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   11b50:	4002      	ands	r2, r0
   11b52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   11b56:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11b5a:	4311      	orrs	r1, r2
   11b5c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   11b60:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   11b64:	4770      	bx	lr
   11b66:	bf00      	nop
   11b68:	40001000 	.word	0x40001000
   11b6c:	fef80000 	.word	0xfef80000

00011b70 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   11b70:	4b01      	ldr	r3, [pc, #4]	; (11b78 <radio_pkt_rx_set+0x8>)
   11b72:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   11b76:	4770      	bx	lr
   11b78:	40001000 	.word	0x40001000

00011b7c <radio_pkt_tx_set>:
   11b7c:	4b01      	ldr	r3, [pc, #4]	; (11b84 <radio_pkt_tx_set+0x8>)
   11b7e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11b82:	4770      	bx	lr
   11b84:	40001000 	.word	0x40001000

00011b88 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   11b88:	2802      	cmp	r0, #2
}
   11b8a:	bf14      	ite	ne
   11b8c:	2029      	movne	r0, #41	; 0x29
   11b8e:	2028      	moveq	r0, #40	; 0x28
   11b90:	4770      	bx	lr
   11b92:	bf00      	nop

00011b94 <radio_tx_chain_delay_get>:
}
   11b94:	2001      	movs	r0, #1
   11b96:	4770      	bx	lr

00011b98 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   11b98:	2802      	cmp	r0, #2
}
   11b9a:	bf14      	ite	ne
   11b9c:	200a      	movne	r0, #10
   11b9e:	2005      	moveq	r0, #5
   11ba0:	4770      	bx	lr
   11ba2:	bf00      	nop

00011ba4 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ba4:	4b01      	ldr	r3, [pc, #4]	; (11bac <radio_rx_enable+0x8>)
   11ba6:	2201      	movs	r2, #1
   11ba8:	605a      	str	r2, [r3, #4]
}
   11baa:	4770      	bx	lr
   11bac:	40001000 	.word	0x40001000

00011bb0 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   11bb0:	4a07      	ldr	r2, [pc, #28]	; (11bd0 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   11bb2:	4908      	ldr	r1, [pc, #32]	; (11bd4 <radio_disable+0x24>)
{
   11bb4:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   11bb6:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   11bb8:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   11bbc:	2000      	movs	r0, #0
   11bbe:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   11bc2:	6053      	str	r3, [r2, #4]
}
   11bc4:	bc10      	pop	{r4}
   11bc6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   11bc8:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   11bcc:	610b      	str	r3, [r1, #16]
}
   11bce:	4770      	bx	lr
   11bd0:	4001f000 	.word	0x4001f000
   11bd4:	40001000 	.word	0x40001000

00011bd8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   11bd8:	4b04      	ldr	r3, [pc, #16]	; (11bec <radio_status_reset+0x14>)
   11bda:	2200      	movs	r2, #0
   11bdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   11be0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   11be4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   11be8:	4770      	bx	lr
   11bea:	bf00      	nop
   11bec:	40001000 	.word	0x40001000

00011bf0 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   11bf0:	4b03      	ldr	r3, [pc, #12]	; (11c00 <radio_is_ready+0x10>)
   11bf2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   11bf6:	3800      	subs	r0, #0
   11bf8:	bf18      	it	ne
   11bfa:	2001      	movne	r0, #1
   11bfc:	4770      	bx	lr
   11bfe:	bf00      	nop
   11c00:	40001000 	.word	0x40001000

00011c04 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   11c04:	4b03      	ldr	r3, [pc, #12]	; (11c14 <radio_is_done+0x10>)
   11c06:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   11c0a:	3800      	subs	r0, #0
   11c0c:	bf18      	it	ne
   11c0e:	2001      	movne	r0, #1
   11c10:	4770      	bx	lr
   11c12:	bf00      	nop
   11c14:	40001000 	.word	0x40001000

00011c18 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   11c18:	4b03      	ldr	r3, [pc, #12]	; (11c28 <radio_is_idle+0x10>)
   11c1a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   11c1e:	fab0 f080 	clz	r0, r0
   11c22:	0940      	lsrs	r0, r0, #5
   11c24:	4770      	bx	lr
   11c26:	bf00      	nop
   11c28:	40001000 	.word	0x40001000

00011c2c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   11c2c:	4b04      	ldr	r3, [pc, #16]	; (11c40 <radio_crc_configure+0x14>)
   11c2e:	f240 1203 	movw	r2, #259	; 0x103
   11c32:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   11c36:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   11c3a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   11c3e:	4770      	bx	lr
   11c40:	40001000 	.word	0x40001000

00011c44 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   11c44:	4b03      	ldr	r3, [pc, #12]	; (11c54 <radio_crc_is_valid+0x10>)
   11c46:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11c4a:	3800      	subs	r0, #0
   11c4c:	bf18      	it	ne
   11c4e:	2001      	movne	r0, #1
   11c50:	4770      	bx	lr
   11c52:	bf00      	nop
   11c54:	40001000 	.word	0x40001000

00011c58 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   11c58:	4800      	ldr	r0, [pc, #0]	; (11c5c <radio_pkt_empty_get+0x4>)
   11c5a:	4770      	bx	lr
   11c5c:	20001ee4 	.word	0x20001ee4

00011c60 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   11c60:	4800      	ldr	r0, [pc, #0]	; (11c64 <radio_pkt_scratch_get+0x4>)
   11c62:	4770      	bx	lr
   11c64:	20001ee8 	.word	0x20001ee8

00011c68 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11c68:	4b1d      	ldr	r3, [pc, #116]	; (11ce0 <radio_switch_complete_and_rx+0x78>)
{
   11c6a:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11c6c:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11c6e:	4d1d      	ldr	r5, [pc, #116]	; (11ce4 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11c70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11c74:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11c76:	4e1c      	ldr	r6, [pc, #112]	; (11ce8 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11c78:	4c1c      	ldr	r4, [pc, #112]	; (11cec <radio_switch_complete_and_rx+0x84>)
   11c7a:	4f1d      	ldr	r7, [pc, #116]	; (11cf0 <radio_switch_complete_and_rx+0x88>)
   11c7c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   11c80:	f102 030c 	add.w	r3, r2, #12
   11c84:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11c86:	00d0      	lsls	r0, r2, #3
   11c88:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11c8a:	0091      	lsls	r1, r2, #2
   11c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11c90:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   11c94:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   11c98:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11c9c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   11ca0:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   11ca4:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11ca8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11cac:	4811      	ldr	r0, [pc, #68]	; (11cf4 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11cae:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11cb2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   11cb6:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   11cba:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   11cbc:	bf8a      	itet	hi
   11cbe:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   11cc2:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   11cc4:	3b2d      	subhi	r3, #45	; 0x2d
   11cc6:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   11cca:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   11ccc:	4b06      	ldr	r3, [pc, #24]	; (11ce8 <radio_switch_complete_and_rx+0x80>)
   11cce:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   11cd2:	f002 0201 	and.w	r2, r2, #1
   11cd6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   11cda:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11cdc:	bcf0      	pop	{r4, r5, r6, r7}
   11cde:	4770      	bx	lr
   11ce0:	40001000 	.word	0x40001000
   11ce4:	2000223f 	.word	0x2000223f
   11ce8:	4001f000 	.word	0x4001f000
   11cec:	40009140 	.word	0x40009140
   11cf0:	4000110c 	.word	0x4000110c
   11cf4:	40001004 	.word	0x40001004

00011cf8 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   11cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11cfc:	4e28      	ldr	r6, [pc, #160]	; (11da0 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11cfe:	4c29      	ldr	r4, [pc, #164]	; (11da4 <radio_switch_complete_and_tx+0xac>)
   11d00:	4f29      	ldr	r7, [pc, #164]	; (11da8 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11d02:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 11dac <radio_switch_complete_and_tx+0xb4>
   11d06:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 11db0 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   11d0a:	2303      	movs	r3, #3
   11d0c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11d10:	7821      	ldrb	r1, [r4, #0]
   11d12:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   11d16:	f101 030c 	add.w	r3, r1, #12
   11d1a:	b2db      	uxtb	r3, r3
   11d1c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11d1e:	00cd      	lsls	r5, r1, #3
   11d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11d24:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   11d28:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11d2c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11d30:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11d34:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11d38:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11d3c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   11d40:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11d44:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   11d48:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   11d4c:	2a02      	cmp	r2, #2
   11d4e:	bf18      	it	ne
   11d50:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   11d52:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   11d56:	f241 3288 	movw	r2, #5000	; 0x1388
   11d5a:	f242 43b8 	movw	r3, #9400	; 0x24b8
   11d5e:	2802      	cmp	r0, #2
   11d60:	bf08      	it	eq
   11d62:	4613      	moveq	r3, r2
   11d64:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   11d68:	4a12      	ldr	r2, [pc, #72]	; (11db4 <radio_switch_complete_and_tx+0xbc>)
   11d6a:	442b      	add	r3, r5
   11d6c:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   11d70:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   11d74:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   11d78:	bf85      	ittet	hi
   11d7a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   11d7c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   11d80:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   11d82:	1a1b      	subhi	r3, r3, r0
   11d84:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   11d88:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   11d8a:	4b08      	ldr	r3, [pc, #32]	; (11dac <radio_switch_complete_and_tx+0xb4>)
   11d8c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   11d90:	f001 0101 	and.w	r1, r1, #1
   11d94:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11d98:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d9e:	bf00      	nop
   11da0:	40001000 	.word	0x40001000
   11da4:	2000223f 	.word	0x2000223f
   11da8:	40009140 	.word	0x40009140
   11dac:	4001f000 	.word	0x4001f000
   11db0:	4000110c 	.word	0x4000110c
   11db4:	10624dd3 	.word	0x10624dd3

00011db8 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   11db8:	4904      	ldr	r1, [pc, #16]	; (11dcc <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   11dba:	4b05      	ldr	r3, [pc, #20]	; (11dd0 <radio_switch_complete_and_disable+0x18>)
   11dbc:	2003      	movs	r0, #3
   11dbe:	f44f 6210 	mov.w	r2, #2304	; 0x900
   11dc2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   11dc6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11dca:	4770      	bx	lr
   11dcc:	40001000 	.word	0x40001000
   11dd0:	4001f000 	.word	0x4001f000

00011dd4 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   11dd4:	2000      	movs	r0, #0
   11dd6:	4770      	bx	lr

00011dd8 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   11dd8:	4a03      	ldr	r2, [pc, #12]	; (11de8 <radio_rssi_measure+0x10>)
   11dda:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   11dde:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   11de2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   11de6:	4770      	bx	lr
   11de8:	40001000 	.word	0x40001000

00011dec <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   11dec:	4b01      	ldr	r3, [pc, #4]	; (11df4 <radio_rssi_get+0x8>)
   11dee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   11df2:	4770      	bx	lr
   11df4:	40001000 	.word	0x40001000

00011df8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   11df8:	4b02      	ldr	r3, [pc, #8]	; (11e04 <radio_rssi_status_reset+0xc>)
   11dfa:	2200      	movs	r2, #0
   11dfc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   11e00:	4770      	bx	lr
   11e02:	bf00      	nop
   11e04:	40001000 	.word	0x40001000

00011e08 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   11e08:	4b03      	ldr	r3, [pc, #12]	; (11e18 <radio_rssi_is_ready+0x10>)
   11e0a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   11e0e:	3800      	subs	r0, #0
   11e10:	bf18      	it	ne
   11e12:	2001      	movne	r0, #1
   11e14:	4770      	bx	lr
   11e16:	bf00      	nop
   11e18:	40001000 	.word	0x40001000

00011e1c <radio_filter_disable>:
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   11e1c:	4a03      	ldr	r2, [pc, #12]	; (11e2c <radio_filter_disable+0x10>)
   11e1e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   11e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11e26:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   11e2a:	4770      	bx	lr
   11e2c:	40001000 	.word	0x40001000

00011e30 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   11e30:	4b02      	ldr	r3, [pc, #8]	; (11e3c <radio_filter_status_reset+0xc>)
   11e32:	2200      	movs	r2, #0
   11e34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   11e38:	4770      	bx	lr
   11e3a:	bf00      	nop
   11e3c:	40001000 	.word	0x40001000

00011e40 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   11e40:	4b03      	ldr	r3, [pc, #12]	; (11e50 <radio_filter_has_match+0x10>)
   11e42:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   11e46:	3800      	subs	r0, #0
   11e48:	bf18      	it	ne
   11e4a:	2001      	movne	r0, #1
   11e4c:	4770      	bx	lr
   11e4e:	bf00      	nop
   11e50:	40001000 	.word	0x40001000

00011e54 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   11e54:	4b01      	ldr	r3, [pc, #4]	; (11e5c <radio_filter_match_get+0x8>)
   11e56:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   11e5a:	4770      	bx	lr
   11e5c:	40001000 	.word	0x40001000

00011e60 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11e60:	4904      	ldr	r1, [pc, #16]	; (11e74 <radio_tmr_status_reset+0x14>)
   11e62:	4b05      	ldr	r3, [pc, #20]	; (11e78 <radio_tmr_status_reset+0x18>)
   11e64:	4a05      	ldr	r2, [pc, #20]	; (11e7c <radio_tmr_status_reset+0x1c>)
   11e66:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   11e6a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   11e6e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   11e72:	4770      	bx	lr
   11e74:	4000b000 	.word	0x4000b000
   11e78:	4001f000 	.word	0x4001f000
   11e7c:	0e7000c0 	.word	0x0e7000c0

00011e80 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   11e80:	4b03      	ldr	r3, [pc, #12]	; (11e90 <radio_tmr_tifs_set+0x10>)
   11e82:	4a04      	ldr	r2, [pc, #16]	; (11e94 <radio_tmr_tifs_set+0x14>)
   11e84:	781b      	ldrb	r3, [r3, #0]
   11e86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   11e8a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11e8e:	4770      	bx	lr
   11e90:	2000223f 	.word	0x2000223f
   11e94:	40009000 	.word	0x40009000

00011e98 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   11e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11e9c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   11ea0:	4d31      	ldr	r5, [pc, #196]	; (11f68 <radio_tmr_start+0xd0>)
   11ea2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   11ea6:	42ab      	cmp	r3, r5
{
   11ea8:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11eaa:	d906      	bls.n	11eba <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   11eac:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   11eb0:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   11eb4:	3901      	subs	r1, #1
		remainder += 30517578UL;
   11eb6:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11eba:	4b2c      	ldr	r3, [pc, #176]	; (11f6c <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   11ebc:	482c      	ldr	r0, [pc, #176]	; (11f70 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   11ebe:	4d2d      	ldr	r5, [pc, #180]	; (11f74 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11ec0:	4e2d      	ldr	r6, [pc, #180]	; (11f78 <radio_tmr_start+0xe0>)
   11ec2:	2701      	movs	r7, #1
   11ec4:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   11ec6:	2700      	movs	r7, #0
   11ec8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   11ecc:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   11ed0:	2704      	movs	r7, #4
   11ed2:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   11ed6:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11ed8:	2702      	movs	r7, #2
   11eda:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   11ede:	4a27      	ldr	r2, [pc, #156]	; (11f7c <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   11ee0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   11ee4:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   11ee8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   11eec:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   11ef0:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11ef2:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11ef6:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   11efa:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   11efe:	bb64      	cbnz	r4, 11f5a <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   11f00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   11f04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   11f08:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   11f0c:	4b1b      	ldr	r3, [pc, #108]	; (11f7c <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f0e:	4a1c      	ldr	r2, [pc, #112]	; (11f80 <radio_tmr_start+0xe8>)
   11f10:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   11f14:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   11f16:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f18:	f8df 8068 	ldr.w	r8, [pc, #104]	; 11f84 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f1c:	f8df e068 	ldr.w	lr, [pc, #104]	; 11f88 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f20:	f8df c068 	ldr.w	ip, [pc, #104]	; 11f8c <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f24:	4f1a      	ldr	r7, [pc, #104]	; (11f90 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f26:	4e1b      	ldr	r6, [pc, #108]	; (11f94 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f28:	4d1b      	ldr	r5, [pc, #108]	; (11f98 <radio_tmr_start+0x100>)
   11f2a:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   11f2c:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   11f30:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   11f34:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   11f38:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   11f3c:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f3e:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f42:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f46:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f4a:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11f4e:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11f52:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   11f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   11f5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   11f5e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   11f62:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   11f66:	e7d1      	b.n	11f0c <radio_tmr_start+0x74>
   11f68:	7ff0bdbf 	.word	0x7ff0bdbf
   11f6c:	40008000 	.word	0x40008000
   11f70:	431bde83 	.word	0x431bde83
   11f74:	4000b000 	.word	0x4000b000
   11f78:	4000b148 	.word	0x4000b148
   11f7c:	4001f000 	.word	0x4001f000
   11f80:	40009000 	.word	0x40009000
   11f84:	4000110c 	.word	0x4000110c
   11f88:	4000900c 	.word	0x4000900c
   11f8c:	40009140 	.word	0x40009140
   11f90:	4001f004 	.word	0x4001f004
   11f94:	40009144 	.word	0x40009144
   11f98:	4001f00c 	.word	0x4001f00c

00011f9c <radio_tmr_start_tick>:
   11f9c:	4a15      	ldr	r2, [pc, #84]	; (11ff4 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   11f9e:	b430      	push	{r4, r5}
   11fa0:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   11fa2:	4c15      	ldr	r4, [pc, #84]	; (11ff8 <radio_tmr_start_tick+0x5c>)
   11fa4:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   11fa6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   11faa:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   11fac:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11fb0:	4b12      	ldr	r3, [pc, #72]	; (11ffc <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   11fb2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   11fb6:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   11fba:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11fbc:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   11fc0:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11fc4:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   11fc8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   11fcc:	b158      	cbz	r0, 11fe6 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   11fce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   11fd2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   11fd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   11fda:	4a08      	ldr	r2, [pc, #32]	; (11ffc <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   11fdc:	2001      	movs	r0, #1
   11fde:	bc30      	pop	{r4, r5}
   11fe0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   11fe4:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   11fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   11fea:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   11fee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   11ff2:	e7f2      	b.n	11fda <radio_tmr_start_tick+0x3e>
   11ff4:	40008000 	.word	0x40008000
   11ff8:	4000b000 	.word	0x4000b000
   11ffc:	4001f000 	.word	0x4001f000

00012000 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   12000:	4b01      	ldr	r3, [pc, #4]	; (12008 <radio_tmr_start_get+0x8>)
   12002:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   12006:	4770      	bx	lr
   12008:	4000b000 	.word	0x4000b000

0001200c <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1200c:	4903      	ldr	r1, [pc, #12]	; (1201c <radio_tmr_stop+0x10>)
   1200e:	4a04      	ldr	r2, [pc, #16]	; (12020 <radio_tmr_stop+0x14>)
   12010:	2301      	movs	r3, #1
   12012:	604b      	str	r3, [r1, #4]
   12014:	610b      	str	r3, [r1, #16]
   12016:	6053      	str	r3, [r2, #4]
   12018:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1201a:	4770      	bx	lr
   1201c:	40008000 	.word	0x40008000
   12020:	40009000 	.word	0x40009000

00012024 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   12024:	4904      	ldr	r1, [pc, #16]	; (12038 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   12026:	4b05      	ldr	r3, [pc, #20]	; (1203c <radio_tmr_hcto_configure+0x18>)
   12028:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1202c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   12030:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   12034:	4770      	bx	lr
   12036:	bf00      	nop
   12038:	40008000 	.word	0x40008000
   1203c:	4001f000 	.word	0x4001f000

00012040 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12040:	4b01      	ldr	r3, [pc, #4]	; (12048 <radio_tmr_aa_get+0x8>)
   12042:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12046:	4770      	bx	lr
   12048:	40008000 	.word	0x40008000

0001204c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1204c:	4b01      	ldr	r3, [pc, #4]	; (12054 <radio_tmr_aa_save+0x8>)
   1204e:	6018      	str	r0, [r3, #0]
}
   12050:	4770      	bx	lr
   12052:	bf00      	nop
   12054:	20001ff4 	.word	0x20001ff4

00012058 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   12058:	4b01      	ldr	r3, [pc, #4]	; (12060 <radio_tmr_aa_restore+0x8>)
}
   1205a:	6818      	ldr	r0, [r3, #0]
   1205c:	4770      	bx	lr
   1205e:	bf00      	nop
   12060:	20001ff4 	.word	0x20001ff4

00012064 <radio_tmr_end_capture>:
   12064:	4b02      	ldr	r3, [pc, #8]	; (12070 <radio_tmr_end_capture+0xc>)
   12066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1206a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1206e:	4770      	bx	lr
   12070:	4001f000 	.word	0x4001f000

00012074 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12074:	4b01      	ldr	r3, [pc, #4]	; (1207c <radio_tmr_end_get+0x8>)
   12076:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1207a:	4770      	bx	lr
   1207c:	40008000 	.word	0x40008000

00012080 <radio_tmr_tifs_base_get>:
   12080:	4b01      	ldr	r3, [pc, #4]	; (12088 <radio_tmr_tifs_base_get+0x8>)
   12082:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   12086:	4770      	bx	lr
   12088:	40008000 	.word	0x40008000

0001208c <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1208c:	4b1c      	ldr	r3, [pc, #112]	; (12100 <radio_ccm_rx_pkt_set+0x74>)
{
   1208e:	b430      	push	{r4, r5}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12090:	2400      	movs	r4, #0
   12092:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   12096:	2902      	cmp	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12098:	f04f 0402 	mov.w	r4, #2
   1209c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   120a0:	4604      	mov	r4, r0
	switch (phy) {
   120a2:	d026      	beq.n	120f2 <radio_ccm_rx_pkt_set+0x66>
   120a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   120a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   120ac:	4d15      	ldr	r5, [pc, #84]	; (12104 <radio_ccm_rx_pkt_set+0x78>)
   120ae:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   120b2:	4915      	ldr	r1, [pc, #84]	; (12108 <radio_ccm_rx_pkt_set+0x7c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   120b4:	4b12      	ldr	r3, [pc, #72]	; (12100 <radio_ccm_rx_pkt_set+0x74>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   120b6:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   120ba:	4814      	ldr	r0, [pc, #80]	; (1210c <radio_ccm_rx_pkt_set+0x80>)
   120bc:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   120be:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   120c2:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   120c6:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   120c8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   120cc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   120d0:	4c0f      	ldr	r4, [pc, #60]	; (12110 <radio_ccm_rx_pkt_set+0x84>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   120d2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   120d6:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   120d8:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   120dc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   120e0:	bc30      	pop	{r4, r5}
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   120e2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   120e6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   120ea:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   120ee:	601a      	str	r2, [r3, #0]
}
   120f0:	4770      	bx	lr
   120f2:	4b08      	ldr	r3, [pc, #32]	; (12114 <radio_ccm_rx_pkt_set+0x88>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   120f4:	4d08      	ldr	r5, [pc, #32]	; (12118 <radio_ccm_rx_pkt_set+0x8c>)
   120f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   120fa:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   120fe:	e7d8      	b.n	120b2 <radio_ccm_rx_pkt_set+0x26>
   12100:	4000f000 	.word	0x4000f000
   12104:	01000001 	.word	0x01000001
   12108:	40001000 	.word	0x40001000
   1210c:	20001ee8 	.word	0x20001ee8
   12110:	20001dd8 	.word	0x20001dd8
   12114:	4001f000 	.word	0x4001f000
   12118:	01010001 	.word	0x01010001

0001211c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1211c:	4b10      	ldr	r3, [pc, #64]	; (12160 <radio_ccm_tx_pkt_set+0x44>)
{
   1211e:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12120:	2200      	movs	r2, #0
{
   12122:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12124:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12126:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1212a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1212e:	480d      	ldr	r0, [pc, #52]	; (12164 <radio_ccm_tx_pkt_set+0x48>)
   12130:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   12134:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   12138:	480b      	ldr	r0, [pc, #44]	; (12168 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1213a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1213e:	4c0b      	ldr	r4, [pc, #44]	; (1216c <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   12140:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12144:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12146:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1214a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1214e:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   12150:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12154:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12158:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1215c:	6019      	str	r1, [r3, #0]
}
   1215e:	4770      	bx	lr
   12160:	4000f000 	.word	0x4000f000
   12164:	01010000 	.word	0x01010000
   12168:	20001ee8 	.word	0x20001ee8
   1216c:	20001dd8 	.word	0x20001dd8

00012170 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   12170:	4a0e      	ldr	r2, [pc, #56]	; (121ac <radio_ccm_is_done+0x3c>)
   12172:	2302      	movs	r3, #2
   12174:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12178:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1217c:	b933      	cbnz	r3, 1218c <radio_ccm_is_done+0x1c>
		__WFE();
   1217e:	bf20      	wfe
		__SEV();
   12180:	bf40      	sev
		__WFE();
   12182:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12184:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   12188:	2b00      	cmp	r3, #0
   1218a:	d0f8      	beq.n	1217e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1218c:	4b07      	ldr	r3, [pc, #28]	; (121ac <radio_ccm_is_done+0x3c>)
   1218e:	4a08      	ldr	r2, [pc, #32]	; (121b0 <radio_ccm_is_done+0x40>)
   12190:	2002      	movs	r0, #2
   12192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12196:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1219a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1219e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   121a2:	fab0 f080 	clz	r0, r0
   121a6:	0940      	lsrs	r0, r0, #5
   121a8:	4770      	bx	lr
   121aa:	bf00      	nop
   121ac:	4000f000 	.word	0x4000f000
   121b0:	e000e100 	.word	0xe000e100

000121b4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   121b4:	4b03      	ldr	r3, [pc, #12]	; (121c4 <radio_ccm_mic_is_valid+0x10>)
   121b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   121ba:	3800      	subs	r0, #0
   121bc:	bf18      	it	ne
   121be:	2001      	movne	r0, #1
   121c0:	4770      	bx	lr
   121c2:	bf00      	nop
   121c4:	4000f000 	.word	0x4000f000

000121c8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   121c8:	2902      	cmp	r1, #2
{
   121ca:	b510      	push	{r4, lr}
   121cc:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   121ce:	d00b      	beq.n	121e8 <mayfly_enable_cb+0x20>
   121d0:	4a0a      	ldr	r2, [pc, #40]	; (121fc <mayfly_enable_cb+0x34>)
   121d2:	490b      	ldr	r1, [pc, #44]	; (12200 <mayfly_enable_cb+0x38>)
   121d4:	480b      	ldr	r0, [pc, #44]	; (12204 <mayfly_enable_cb+0x3c>)
   121d6:	231e      	movs	r3, #30
   121d8:	f004 f88b 	bl	162f2 <assert_print>
   121dc:	4040      	eors	r0, r0
   121de:	f380 8811 	msr	BASEPRI, r0
   121e2:	f04f 0003 	mov.w	r0, #3
   121e6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   121e8:	200b      	movs	r0, #11
	if (enable) {
   121ea:	b11c      	cbz	r4, 121f4 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   121ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   121f0:	f7f1 be3c 	b.w	3e6c <arch_irq_enable>
}
   121f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   121f8:	f7f1 be48 	b.w	3e8c <arch_irq_disable>
   121fc:	0001aecc 	.word	0x0001aecc
   12200:	0001af1c 	.word	0x0001af1c
   12204:	0001a580 	.word	0x0001a580

00012208 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12208:	b129      	cbz	r1, 12216 <mayfly_is_enabled+0xe>
   1220a:	3901      	subs	r1, #1
   1220c:	2901      	cmp	r1, #1
   1220e:	d805      	bhi.n	1221c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   12210:	200b      	movs	r0, #11
   12212:	f7f1 be4f 	b.w	3eb4 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   12216:	2018      	movs	r0, #24
   12218:	f7f1 be4c 	b.w	3eb4 <arch_irq_is_enabled>
{
   1221c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1221e:	4a07      	ldr	r2, [pc, #28]	; (1223c <mayfly_is_enabled+0x34>)
   12220:	4907      	ldr	r1, [pc, #28]	; (12240 <mayfly_is_enabled+0x38>)
   12222:	4808      	ldr	r0, [pc, #32]	; (12244 <mayfly_is_enabled+0x3c>)
   12224:	2336      	movs	r3, #54	; 0x36
   12226:	f004 f864 	bl	162f2 <assert_print>
   1222a:	4040      	eors	r0, r0
   1222c:	f380 8811 	msr	BASEPRI, r0
   12230:	f04f 0003 	mov.w	r0, #3
   12234:	df02      	svc	2
		break;
	}

	return 0;
}
   12236:	2000      	movs	r0, #0
   12238:	bd08      	pop	{r3, pc}
   1223a:	bf00      	nop
   1223c:	0001aecc 	.word	0x0001aecc
   12240:	0001a5e0 	.word	0x0001a5e0
   12244:	0001a580 	.word	0x0001a580

00012248 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   12248:	4288      	cmp	r0, r1
   1224a:	d00b      	beq.n	12264 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1224c:	2801      	cmp	r0, #1
   1224e:	d003      	beq.n	12258 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   12250:	2802      	cmp	r0, #2
   12252:	d009      	beq.n	12268 <mayfly_prio_is_equal+0x20>
   12254:	2000      	movs	r0, #0
#endif
	       0;
}
   12256:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12258:	f1a1 0002 	sub.w	r0, r1, #2
   1225c:	fab0 f080 	clz	r0, r0
   12260:	0940      	lsrs	r0, r0, #5
   12262:	4770      	bx	lr
   12264:	2001      	movs	r0, #1
   12266:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12268:	f1a1 0001 	sub.w	r0, r1, #1
   1226c:	fab0 f080 	clz	r0, r0
   12270:	0940      	lsrs	r0, r0, #5
   12272:	4770      	bx	lr

00012274 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12274:	2901      	cmp	r1, #1
{
   12276:	b508      	push	{r3, lr}
	switch (callee_id) {
   12278:	d00f      	beq.n	1229a <mayfly_pend+0x26>
   1227a:	2902      	cmp	r1, #2
   1227c:	d00d      	beq.n	1229a <mayfly_pend+0x26>
   1227e:	b191      	cbz	r1, 122a6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   12280:	4a0c      	ldr	r2, [pc, #48]	; (122b4 <mayfly_pend+0x40>)
   12282:	490d      	ldr	r1, [pc, #52]	; (122b8 <mayfly_pend+0x44>)
   12284:	480d      	ldr	r0, [pc, #52]	; (122bc <mayfly_pend+0x48>)
   12286:	2367      	movs	r3, #103	; 0x67
   12288:	f004 f833 	bl	162f2 <assert_print>
   1228c:	4040      	eors	r0, r0
   1228e:	f380 8811 	msr	BASEPRI, r0
   12292:	f04f 0003 	mov.w	r0, #3
   12296:	df02      	svc	2
		break;
	}
}
   12298:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1229a:	4b09      	ldr	r3, [pc, #36]	; (122c0 <mayfly_pend+0x4c>)
   1229c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   122a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   122a4:	bd08      	pop	{r3, pc}
   122a6:	4b06      	ldr	r3, [pc, #24]	; (122c0 <mayfly_pend+0x4c>)
   122a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   122ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   122b0:	bd08      	pop	{r3, pc}
   122b2:	bf00      	nop
   122b4:	0001aecc 	.word	0x0001aecc
   122b8:	0001a5e0 	.word	0x0001a5e0
   122bc:	0001a580 	.word	0x0001a580
   122c0:	e000e100 	.word	0xe000e100

000122c4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   122c4:	2803      	cmp	r0, #3
{
   122c6:	b510      	push	{r4, lr}
   122c8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   122ca:	d804      	bhi.n	122d6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   122cc:	4b11      	ldr	r3, [pc, #68]	; (12314 <hal_ticker_instance0_caller_id_get+0x50>)
   122ce:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   122d0:	b18c      	cbz	r4, 122f6 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   122d2:	4620      	mov	r0, r4
   122d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   122d6:	4a10      	ldr	r2, [pc, #64]	; (12318 <hal_ticker_instance0_caller_id_get+0x54>)
   122d8:	4910      	ldr	r1, [pc, #64]	; (1231c <hal_ticker_instance0_caller_id_get+0x58>)
   122da:	4811      	ldr	r0, [pc, #68]	; (12320 <hal_ticker_instance0_caller_id_get+0x5c>)
   122dc:	232b      	movs	r3, #43	; 0x2b
   122de:	f004 f808 	bl	162f2 <assert_print>
   122e2:	4040      	eors	r0, r0
   122e4:	f380 8811 	msr	BASEPRI, r0
   122e8:	f04f 0003 	mov.w	r0, #3
   122ec:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   122ee:	4b09      	ldr	r3, [pc, #36]	; (12314 <hal_ticker_instance0_caller_id_get+0x50>)
   122f0:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   122f2:	2c00      	cmp	r4, #0
   122f4:	d1ed      	bne.n	122d2 <hal_ticker_instance0_caller_id_get+0xe>
   122f6:	4a08      	ldr	r2, [pc, #32]	; (12318 <hal_ticker_instance0_caller_id_get+0x54>)
   122f8:	490a      	ldr	r1, [pc, #40]	; (12324 <hal_ticker_instance0_caller_id_get+0x60>)
   122fa:	4809      	ldr	r0, [pc, #36]	; (12320 <hal_ticker_instance0_caller_id_get+0x5c>)
   122fc:	232e      	movs	r3, #46	; 0x2e
   122fe:	f003 fff8 	bl	162f2 <assert_print>
   12302:	4040      	eors	r0, r0
   12304:	f380 8811 	msr	BASEPRI, r0
   12308:	f04f 0003 	mov.w	r0, #3
   1230c:	df02      	svc	2
}
   1230e:	4620      	mov	r0, r4
   12310:	bd10      	pop	{r4, pc}
   12312:	bf00      	nop
   12314:	0001afac 	.word	0x0001afac
   12318:	0001af2c 	.word	0x0001af2c
   1231c:	0001af7c 	.word	0x0001af7c
   12320:	0001a580 	.word	0x0001a580
   12324:	0001af9c 	.word	0x0001af9c

00012328 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12328:	3801      	subs	r0, #1
{
   1232a:	b510      	push	{r4, lr}
   1232c:	461c      	mov	r4, r3
	switch (caller_id) {
   1232e:	2804      	cmp	r0, #4
   12330:	f200 8082 	bhi.w	12438 <hal_ticker_instance0_sched+0x110>
   12334:	e8df f000 	tbb	[pc, r0]
   12338:	3f302112 	.word	0x3f302112
   1233c:	03          	.byte	0x03
   1233d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1233e:	2904      	cmp	r1, #4
   12340:	d04a      	beq.n	123d8 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   12342:	4a44      	ldr	r2, [pc, #272]	; (12454 <hal_ticker_instance0_sched+0x12c>)
   12344:	4944      	ldr	r1, [pc, #272]	; (12458 <hal_ticker_instance0_sched+0x130>)
   12346:	4845      	ldr	r0, [pc, #276]	; (1245c <hal_ticker_instance0_sched+0x134>)
   12348:	23ba      	movs	r3, #186	; 0xba
   1234a:	f003 ffd2 	bl	162f2 <assert_print>
   1234e:	4040      	eors	r0, r0
   12350:	f380 8811 	msr	BASEPRI, r0
   12354:	f04f 0003 	mov.w	r0, #3
   12358:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1235a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1235c:	2904      	cmp	r1, #4
   1235e:	d043      	beq.n	123e8 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   12360:	4a3c      	ldr	r2, [pc, #240]	; (12454 <hal_ticker_instance0_sched+0x12c>)
   12362:	493d      	ldr	r1, [pc, #244]	; (12458 <hal_ticker_instance0_sched+0x130>)
   12364:	483d      	ldr	r0, [pc, #244]	; (1245c <hal_ticker_instance0_sched+0x134>)
   12366:	234e      	movs	r3, #78	; 0x4e
   12368:	f003 ffc3 	bl	162f2 <assert_print>
   1236c:	4040      	eors	r0, r0
   1236e:	f380 8811 	msr	BASEPRI, r0
   12372:	f04f 0003 	mov.w	r0, #3
   12376:	df02      	svc	2
}
   12378:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1237a:	2903      	cmp	r1, #3
   1237c:	d03c      	beq.n	123f8 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1237e:	4a35      	ldr	r2, [pc, #212]	; (12454 <hal_ticker_instance0_sched+0x12c>)
   12380:	4935      	ldr	r1, [pc, #212]	; (12458 <hal_ticker_instance0_sched+0x130>)
   12382:	4836      	ldr	r0, [pc, #216]	; (1245c <hal_ticker_instance0_sched+0x134>)
   12384:	2365      	movs	r3, #101	; 0x65
   12386:	f003 ffb4 	bl	162f2 <assert_print>
   1238a:	4040      	eors	r0, r0
   1238c:	f380 8811 	msr	BASEPRI, r0
   12390:	f04f 0003 	mov.w	r0, #3
   12394:	df02      	svc	2
}
   12396:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   12398:	2904      	cmp	r1, #4
   1239a:	d035      	beq.n	12408 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1239c:	4a2d      	ldr	r2, [pc, #180]	; (12454 <hal_ticker_instance0_sched+0x12c>)
   1239e:	492e      	ldr	r1, [pc, #184]	; (12458 <hal_ticker_instance0_sched+0x130>)
   123a0:	482e      	ldr	r0, [pc, #184]	; (1245c <hal_ticker_instance0_sched+0x134>)
   123a2:	237c      	movs	r3, #124	; 0x7c
   123a4:	f003 ffa5 	bl	162f2 <assert_print>
   123a8:	4040      	eors	r0, r0
   123aa:	f380 8811 	msr	BASEPRI, r0
   123ae:	f04f 0003 	mov.w	r0, #3
   123b2:	df02      	svc	2
}
   123b4:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   123b6:	2903      	cmp	r1, #3
   123b8:	d036      	beq.n	12428 <hal_ticker_instance0_sched+0x100>
   123ba:	2904      	cmp	r1, #4
   123bc:	d02c      	beq.n	12418 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   123be:	4a25      	ldr	r2, [pc, #148]	; (12454 <hal_ticker_instance0_sched+0x12c>)
   123c0:	4925      	ldr	r1, [pc, #148]	; (12458 <hal_ticker_instance0_sched+0x130>)
   123c2:	4826      	ldr	r0, [pc, #152]	; (1245c <hal_ticker_instance0_sched+0x134>)
   123c4:	23a2      	movs	r3, #162	; 0xa2
   123c6:	f003 ff94 	bl	162f2 <assert_print>
   123ca:	4040      	eors	r0, r0
   123cc:	f380 8811 	msr	BASEPRI, r0
   123d0:	f04f 0003 	mov.w	r0, #3
   123d4:	df02      	svc	2
}
   123d6:	bd10      	pop	{r4, pc}
			m.param = instance;
   123d8:	4b21      	ldr	r3, [pc, #132]	; (12460 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   123da:	2102      	movs	r1, #2
			m.param = instance;
   123dc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   123de:	2003      	movs	r0, #3
}
   123e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   123e4:	f7f5 be9e 	b.w	8124 <mayfly_enqueue>
			m.param = instance;
   123e8:	4b1e      	ldr	r3, [pc, #120]	; (12464 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   123ea:	2102      	movs	r1, #2
			m.param = instance;
   123ec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   123ee:	2000      	movs	r0, #0
}
   123f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   123f4:	f7f5 be96 	b.w	8124 <mayfly_enqueue>
			m.param = instance;
   123f8:	4b1b      	ldr	r3, [pc, #108]	; (12468 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   123fa:	2101      	movs	r1, #1
			m.param = instance;
   123fc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   123fe:	4608      	mov	r0, r1
}
   12400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12404:	f7f5 be8e 	b.w	8124 <mayfly_enqueue>
			m.param = instance;
   12408:	4b18      	ldr	r3, [pc, #96]	; (1246c <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1240a:	2102      	movs	r1, #2
			m.param = instance;
   1240c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1240e:	2001      	movs	r0, #1
}
   12410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12414:	f7f5 be86 	b.w	8124 <mayfly_enqueue>
			m.param = instance;
   12418:	4b15      	ldr	r3, [pc, #84]	; (12470 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1241a:	2102      	movs	r1, #2
			m.param = instance;
   1241c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1241e:	4608      	mov	r0, r1
}
   12420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12424:	f7f5 be7e 	b.w	8124 <mayfly_enqueue>
			m.param = instance;
   12428:	4b12      	ldr	r3, [pc, #72]	; (12474 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1242a:	2101      	movs	r1, #1
			m.param = instance;
   1242c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1242e:	2002      	movs	r0, #2
}
   12430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12434:	f7f5 be76 	b.w	8124 <mayfly_enqueue>
		LL_ASSERT(0);
   12438:	4a06      	ldr	r2, [pc, #24]	; (12454 <hal_ticker_instance0_sched+0x12c>)
   1243a:	4907      	ldr	r1, [pc, #28]	; (12458 <hal_ticker_instance0_sched+0x130>)
   1243c:	4807      	ldr	r0, [pc, #28]	; (1245c <hal_ticker_instance0_sched+0x134>)
   1243e:	23c0      	movs	r3, #192	; 0xc0
   12440:	f003 ff57 	bl	162f2 <assert_print>
   12444:	4040      	eors	r0, r0
   12446:	f380 8811 	msr	BASEPRI, r0
   1244a:	f04f 0003 	mov.w	r0, #3
   1244e:	df02      	svc	2
}
   12450:	bd10      	pop	{r4, pc}
   12452:	bf00      	nop
   12454:	0001af2c 	.word	0x0001af2c
   12458:	0001a5e0 	.word	0x0001a5e0
   1245c:	0001a580 	.word	0x0001a580
   12460:	200005e8 	.word	0x200005e8
   12464:	200005d8 	.word	0x200005d8
   12468:	200005c8 	.word	0x200005c8
   1246c:	20000618 	.word	0x20000618
   12470:	200005f8 	.word	0x200005f8
   12474:	20000608 	.word	0x20000608

00012478 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   12478:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1247a:	2000      	movs	r0, #0
   1247c:	f7ff ba40 	b.w	11900 <cntr_cmp_set>

00012480 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   12480:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   12482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12486:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1248a:	3201      	adds	r2, #1
   1248c:	d008      	beq.n	124a0 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1248e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   12492:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   12496:	f013 0301 	ands.w	r3, r3, #1
   1249a:	d10a      	bne.n	124b2 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1249c:	4618      	mov	r0, r3
}
   1249e:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   124a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   124a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   124a8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   124aa:	4293      	cmp	r3, r2
   124ac:	d1ef      	bne.n	1248e <hci_vendor_read_static_addr+0xe>
	return 0;
   124ae:	2000      	movs	r0, #0
}
   124b0:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   124b2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   124b6:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   124b8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   124ba:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   124be:	f3c3 2307 	ubfx	r3, r3, #8, #8
   124c2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   124c4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   124c6:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   124ca:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   124ce:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   124d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   124d4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   124d8:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   124da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   124de:	3301      	adds	r3, #1
   124e0:	d03b      	beq.n	1255a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   124e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   124e6:	3301      	adds	r3, #1
   124e8:	d037      	beq.n	1255a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   124ea:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   124ee:	3301      	adds	r3, #1
   124f0:	d033      	beq.n	1255a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   124f2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   124f6:	3301      	adds	r3, #1
   124f8:	d02f      	beq.n	1255a <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   124fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   124fe:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   12500:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   12502:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   12506:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1250a:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1250c:	f880 c009 	strb.w	ip, [r0, #9]
   12510:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   12512:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   12516:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   12518:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1251a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1251e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   12522:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   12524:	f880 c00d 	strb.w	ip, [r0, #13]
   12528:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1252a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1252e:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   12530:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   12532:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   12536:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1253a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1253c:	73c3      	strb	r3, [r0, #15]
   1253e:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   12542:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   12546:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   12548:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1254a:	0a11      	lsrs	r1, r2, #8
   1254c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12550:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   12552:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   12554:	7541      	strb	r1, [r0, #21]
		return 1;
   12556:	2001      	movs	r0, #1
}
   12558:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1255a:	2210      	movs	r2, #16
   1255c:	2100      	movs	r1, #0
   1255e:	3006      	adds	r0, #6
   12560:	f004 f952 	bl	16808 <memset>
		return 1;
   12564:	2001      	movs	r0, #1
}
   12566:	bd08      	pop	{r3, pc}

00012568 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   12568:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1256a:	2210      	movs	r2, #16
{
   1256c:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1256e:	2100      	movs	r1, #0
   12570:	f004 f94a 	bl	16808 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   12574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12578:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1257c:	3201      	adds	r2, #1
   1257e:	d034      	beq.n	125ea <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   12580:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   12584:	3201      	adds	r2, #1
   12586:	d030      	beq.n	125ea <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   12588:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1258c:	3201      	adds	r2, #1
   1258e:	d02c      	beq.n	125ea <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   12590:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   12594:	3201      	adds	r2, #1
   12596:	d028      	beq.n	125ea <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   12598:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1259c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1259e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   125a0:	0a08      	lsrs	r0, r1, #8
   125a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   125a6:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   125a8:	70e0      	strb	r0, [r4, #3]
   125aa:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   125ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   125b0:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   125b2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   125b4:	0a08      	lsrs	r0, r1, #8
   125b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   125ba:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   125bc:	71e0      	strb	r0, [r4, #7]
   125be:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   125c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   125c4:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   125c6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   125c8:	0a08      	lsrs	r0, r1, #8
   125ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
   125ce:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   125d0:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   125d2:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   125d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   125d8:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   125da:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   125dc:	0a11      	lsrs	r1, r2, #8
   125de:	f3c3 2307 	ubfx	r3, r3, #8, #8
   125e2:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   125e4:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   125e6:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   125e8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   125ea:	4620      	mov	r0, r4
   125ec:	2210      	movs	r2, #16
}
   125ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   125f2:	2100      	movs	r1, #0
   125f4:	f004 b908 	b.w	16808 <memset>

000125f8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   125f8:	4b02      	ldr	r3, [pc, #8]	; (12604 <net_buf_pool_get+0xc>)
   125fa:	222c      	movs	r2, #44	; 0x2c
   125fc:	fb02 3000 	mla	r0, r2, r0, r3
   12600:	4770      	bx	lr
   12602:	bf00      	nop
   12604:	20000844 	.word	0x20000844

00012608 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12608:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1260a:	4b06      	ldr	r3, [pc, #24]	; (12624 <net_buf_id+0x1c>)
   1260c:	212c      	movs	r1, #44	; 0x2c
   1260e:	fb01 3302 	mla	r3, r1, r2, r3
   12612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   12614:	7f1b      	ldrb	r3, [r3, #28]
   12616:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   12618:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1261a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1261e:	fbb0 f0f3 	udiv	r0, r0, r3
   12622:	4770      	bx	lr
   12624:	20000844 	.word	0x20000844

00012628 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   12628:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1262a:	4b0a      	ldr	r3, [pc, #40]	; (12654 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1262c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1262e:	242c      	movs	r4, #44	; 0x2c
   12630:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   12634:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12638:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1263a:	6823      	ldr	r3, [r4, #0]
   1263c:	429a      	cmp	r2, r3
   1263e:	bf94      	ite	ls
   12640:	600a      	strls	r2, [r1, #0]
   12642:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12644:	f7ff ffe0 	bl	12608 <net_buf_id>
   12648:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1264c:	fb02 3000 	mla	r0, r2, r0, r3
   12650:	bd10      	pop	{r4, pc}
   12652:	bf00      	nop
   12654:	20000844 	.word	0x20000844

00012658 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   12658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1265c:	4605      	mov	r5, r0
   1265e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   12660:	4610      	mov	r0, r2
   12662:	4619      	mov	r1, r3
{
   12664:	4691      	mov	r9, r2
   12666:	4698      	mov	r8, r3
   12668:	4617      	mov	r7, r2
   1266a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1266c:	f007 fa7e 	bl	19b6c <sys_clock_timeout_end_calc>
   12670:	4682      	mov	sl, r0
   12672:	468b      	mov	fp, r1
	__asm__ volatile(
   12674:	f04f 0320 	mov.w	r3, #32
   12678:	f3ef 8111 	mrs	r1, BASEPRI
   1267c:	f383 8812 	msr	BASEPRI_MAX, r3
   12680:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12684:	8b6b      	ldrh	r3, [r5, #26]
   12686:	2b00      	cmp	r3, #0
   12688:	d05a      	beq.n	12740 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1268a:	8b2a      	ldrh	r2, [r5, #24]
   1268c:	429a      	cmp	r2, r3
   1268e:	d93e      	bls.n	1270e <net_buf_alloc_len+0xb6>
   12690:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   12692:	2200      	movs	r2, #0
   12694:	2300      	movs	r3, #0
   12696:	4628      	mov	r0, r5
   12698:	f002 fb6c 	bl	14d74 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1269c:	9900      	ldr	r1, [sp, #0]
   1269e:	4604      	mov	r4, r0
   126a0:	2800      	cmp	r0, #0
   126a2:	d034      	beq.n	1270e <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   126a4:	f381 8811 	msr	BASEPRI, r1
   126a8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   126ac:	9b01      	ldr	r3, [sp, #4]
   126ae:	2b00      	cmp	r3, #0
   126b0:	d056      	beq.n	12760 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   126b2:	ea58 0309 	orrs.w	r3, r8, r9
   126b6:	d00f      	beq.n	126d8 <net_buf_alloc_len+0x80>
   126b8:	f1b8 3fff 	cmp.w	r8, #4294967295
   126bc:	bf08      	it	eq
   126be:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   126c2:	d009      	beq.n	126d8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   126c4:	f003 f9f4 	bl	15ab0 <sys_clock_tick_get>
   126c8:	ebba 0700 	subs.w	r7, sl, r0
   126cc:	eb6b 0601 	sbc.w	r6, fp, r1
   126d0:	2e00      	cmp	r6, #0
   126d2:	bfbc      	itt	lt
   126d4:	2700      	movlt	r7, #0
   126d6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   126d8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   126da:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12778 <net_buf_alloc_len+0x120>
   126de:	f04f 092c 	mov.w	r9, #44	; 0x2c
   126e2:	fb09 8303 	mla	r3, r9, r3, r8
   126e6:	463a      	mov	r2, r7
   126e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	a901      	add	r1, sp, #4
   126ee:	681d      	ldr	r5, [r3, #0]
   126f0:	4620      	mov	r0, r4
   126f2:	4633      	mov	r3, r6
   126f4:	47a8      	blx	r5
   126f6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   126f8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   126fa:	2800      	cmp	r0, #0
   126fc:	d131      	bne.n	12762 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   126fe:	79a0      	ldrb	r0, [r4, #6]
   12700:	4621      	mov	r1, r4
   12702:	fb00 8009 	mla	r0, r0, r9, r8
   12706:	f006 ffab 	bl	19660 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1270a:	462c      	mov	r4, r5
}
   1270c:	e024      	b.n	12758 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1270e:	8b68      	ldrh	r0, [r5, #26]
   12710:	1e43      	subs	r3, r0, #1
   12712:	836b      	strh	r3, [r5, #26]
   12714:	f381 8811 	msr	BASEPRI, r1
   12718:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1271c:	7f2a      	ldrb	r2, [r5, #28]
   1271e:	f102 0417 	add.w	r4, r2, #23
   12722:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   12726:	8b2c      	ldrh	r4, [r5, #24]
   12728:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1272a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1272c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   12730:	4811      	ldr	r0, [pc, #68]	; (12778 <net_buf_alloc_len+0x120>)
   12732:	4b12      	ldr	r3, [pc, #72]	; (1277c <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   12734:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   12736:	1a2d      	subs	r5, r5, r0
   12738:	10ad      	asrs	r5, r5, #2
   1273a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1273c:	71a5      	strb	r5, [r4, #6]
		goto success;
   1273e:	e7b5      	b.n	126ac <net_buf_alloc_len+0x54>
   12740:	f381 8811 	msr	BASEPRI, r1
   12744:	f3bf 8f6f 	isb	sy
   12748:	464a      	mov	r2, r9
   1274a:	4643      	mov	r3, r8
   1274c:	4628      	mov	r0, r5
   1274e:	f002 fb11 	bl	14d74 <z_impl_k_queue_get>
	if (!buf) {
   12752:	4604      	mov	r4, r0
   12754:	2800      	cmp	r0, #0
   12756:	d1a9      	bne.n	126ac <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   12758:	4620      	mov	r0, r4
   1275a:	b003      	add	sp, #12
   1275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   12760:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   12762:	2300      	movs	r3, #0
	buf->ref   = 1U;
   12764:	2201      	movs	r2, #1
	buf->frags = NULL;
   12766:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   12768:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1276a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1276c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1276e:	6923      	ldr	r3, [r4, #16]
   12770:	81e2      	strh	r2, [r4, #14]
   12772:	60a3      	str	r3, [r4, #8]
	return buf;
   12774:	e7f0      	b.n	12758 <net_buf_alloc_len+0x100>
   12776:	bf00      	nop
   12778:	20000844 	.word	0x20000844
   1277c:	ba2e8ba3 	.word	0xba2e8ba3

00012780 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12784:	4d16      	ldr	r5, [pc, #88]	; (127e0 <net_buf_unref+0x60>)
   12786:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12788:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1278a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1278c:	b90c      	cbnz	r4, 12792 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   12792:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12794:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   12798:	3b01      	subs	r3, #1
   1279a:	b2db      	uxtb	r3, r3
   1279c:	7123      	strb	r3, [r4, #4]
   1279e:	2b00      	cmp	r3, #0
   127a0:	d1f5      	bne.n	1278e <net_buf_unref+0xe>
		if (buf->__buf) {
   127a2:	6921      	ldr	r1, [r4, #16]
   127a4:	b159      	cbz	r1, 127be <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   127a6:	7963      	ldrb	r3, [r4, #5]
   127a8:	079b      	lsls	r3, r3, #30
   127aa:	d407      	bmi.n	127bc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   127ac:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   127ae:	fb07 5303 	mla	r3, r7, r3, r5
   127b2:	4620      	mov	r0, r4
   127b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   127b6:	681b      	ldr	r3, [r3, #0]
   127b8:	689b      	ldr	r3, [r3, #8]
   127ba:	4798      	blx	r3
			buf->__buf = NULL;
   127bc:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   127be:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   127c0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   127c2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   127c6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   127c8:	6a1b      	ldr	r3, [r3, #32]
   127ca:	b11b      	cbz	r3, 127d4 <net_buf_unref+0x54>
			pool->destroy(buf);
   127cc:	4620      	mov	r0, r4
   127ce:	4798      	blx	r3
{
   127d0:	4644      	mov	r4, r8
   127d2:	e7db      	b.n	1278c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   127d4:	4621      	mov	r1, r4
   127d6:	fb00 5007 	mla	r0, r0, r7, r5
   127da:	f006 ff41 	bl	19660 <k_queue_prepend>
}
   127de:	e7f7      	b.n	127d0 <net_buf_unref+0x50>
   127e0:	20000844 	.word	0x20000844

000127e4 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   127e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e8:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   127ec:	4606      	mov	r6, r0
   127ee:	460d      	mov	r5, r1
   127f0:	4617      	mov	r7, r2
	while (buf->frags) {
   127f2:	4604      	mov	r4, r0
   127f4:	4621      	mov	r1, r4
   127f6:	6824      	ldr	r4, [r4, #0]
   127f8:	2c00      	cmp	r4, #0
   127fa:	d1fb      	bne.n	127f4 <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   127fc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   12800:	f101 0b08 	add.w	fp, r1, #8
   12804:	4658      	mov	r0, fp
   12806:	f006 f9c8 	bl	18b9a <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1280a:	4285      	cmp	r5, r0
   1280c:	bf2c      	ite	cs
   1280e:	b282      	uxthcs	r2, r0
   12810:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12812:	4639      	mov	r1, r7
   12814:	4658      	mov	r0, fp
   12816:	9201      	str	r2, [sp, #4]
   12818:	f006 f980 	bl	18b1c <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   1281c:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   1281e:	1aad      	subs	r5, r5, r2
		added_len += count;
   12820:	4414      	add	r4, r2
		value8 += count;
   12822:	4417      	add	r7, r2
		if (len == 0) {
   12824:	d016      	beq.n	12854 <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   12826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12828:	b14b      	cbz	r3, 1283e <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   1282a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1282c:	4640      	mov	r0, r8
   1282e:	4649      	mov	r1, r9
   12830:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   12832:	4601      	mov	r1, r0
		}

		if (!frag) {
   12834:	b170      	cbz	r0, 12854 <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   12836:	4630      	mov	r0, r6
   12838:	f006 f94d 	bl	18ad6 <net_buf_frag_add>
	do {
   1283c:	e7e0      	b.n	12800 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   1283e:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   12840:	f8df c018 	ldr.w	ip, [pc, #24]	; 1285c <net_buf_append_bytes+0x78>
   12844:	4642      	mov	r2, r8
   12846:	464b      	mov	r3, r9
   12848:	4629      	mov	r1, r5
   1284a:	fb00 c00a 	mla	r0, r0, sl, ip
   1284e:	f7ff ff03 	bl	12658 <net_buf_alloc_len>
   12852:	e7ee      	b.n	12832 <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   12854:	4620      	mov	r0, r4
   12856:	b003      	add	sp, #12
   12858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1285c:	20000844 	.word	0x20000844

00012860 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12860:	4b08      	ldr	r3, [pc, #32]	; (12884 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12862:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12864:	1ac3      	subs	r3, r0, r3
{
   12866:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12868:	4907      	ldr	r1, [pc, #28]	; (12888 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1286a:	109b      	asrs	r3, r3, #2
{
   1286c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1286e:	4359      	muls	r1, r3
   12870:	4806      	ldr	r0, [pc, #24]	; (1288c <onoff_stop+0x2c>)
   12872:	2240      	movs	r2, #64	; 0x40
   12874:	f006 f9b5 	bl	18be2 <stop>
	notify(mgr, res);
   12878:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1287a:	4601      	mov	r1, r0
	notify(mgr, res);
   1287c:	4620      	mov	r0, r4
}
   1287e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   12882:	4718      	bx	r3
   12884:	20002038 	.word	0x20002038
   12888:	b6db6db7 	.word	0xb6db6db7
   1288c:	00019ee4 	.word	0x00019ee4

00012890 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12890:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   12892:	4c0c      	ldr	r4, [pc, #48]	; (128c4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12894:	4a0c      	ldr	r2, [pc, #48]	; (128c8 <onoff_start+0x38>)
   12896:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   12898:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1289a:	9300      	str	r3, [sp, #0]
{
   1289c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1289e:	460b      	mov	r3, r1
   128a0:	490a      	ldr	r1, [pc, #40]	; (128cc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   128a2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   128a4:	4361      	muls	r1, r4
{
   128a6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   128a8:	4809      	ldr	r0, [pc, #36]	; (128d0 <onoff_start+0x40>)
   128aa:	f006 f9c6 	bl	18c3a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   128ae:	1e01      	subs	r1, r0, #0
   128b0:	da05      	bge.n	128be <onoff_start+0x2e>
		notify(mgr, err);
   128b2:	4630      	mov	r0, r6
   128b4:	462b      	mov	r3, r5
	}
}
   128b6:	b002      	add	sp, #8
   128b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   128bc:	4718      	bx	r3
}
   128be:	b002      	add	sp, #8
   128c0:	bd70      	pop	{r4, r5, r6, pc}
   128c2:	bf00      	nop
   128c4:	20002038 	.word	0x20002038
   128c8:	00018cab 	.word	0x00018cab
   128cc:	b6db6db7 	.word	0xb6db6db7
   128d0:	00019ee4 	.word	0x00019ee4

000128d4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   128d4:	2200      	movs	r2, #0
{
   128d6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   128d8:	2101      	movs	r1, #1
{
   128da:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   128dc:	4610      	mov	r0, r2
   128de:	f7f1 faf7 	bl	3ed0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   128e2:	480f      	ldr	r0, [pc, #60]	; (12920 <clk_init+0x4c>)
   128e4:	f001 fc1c 	bl	14120 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   128e8:	4b0e      	ldr	r3, [pc, #56]	; (12924 <clk_init+0x50>)
   128ea:	4298      	cmp	r0, r3
   128ec:	d115      	bne.n	1291a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   128ee:	f006 fcb0 	bl	19252 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   128f2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   128f4:	490c      	ldr	r1, [pc, #48]	; (12928 <clk_init+0x54>)
   128f6:	4630      	mov	r0, r6
   128f8:	f003 fa4e 	bl	15d98 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   128fc:	2800      	cmp	r0, #0
   128fe:	db0b      	blt.n	12918 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   12900:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12902:	4909      	ldr	r1, [pc, #36]	; (12928 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12904:	2501      	movs	r5, #1
   12906:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12908:	f104 001c 	add.w	r0, r4, #28
   1290c:	f003 fa44 	bl	15d98 <onoff_manager_init>
		if (err < 0) {
   12910:	2800      	cmp	r0, #0
   12912:	db01      	blt.n	12918 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12914:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   12916:	2000      	movs	r0, #0
}
   12918:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1291a:	f06f 0004 	mvn.w	r0, #4
   1291e:	e7fb      	b.n	12918 <clk_init+0x44>
   12920:	00012961 	.word	0x00012961
   12924:	0bad0000 	.word	0x0bad0000
   12928:	0001afe8 	.word	0x0001afe8

0001292c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1292c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1292e:	230c      	movs	r3, #12
   12930:	4809      	ldr	r0, [pc, #36]	; (12958 <clkstarted_handle.constprop.0+0x2c>)
   12932:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12934:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12936:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   12938:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1293c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1293e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   12940:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12942:	4418      	add	r0, r3
   12944:	f006 f93a 	bl	18bbc <set_on_state>
	if (callback) {
   12948:	b12d      	cbz	r5, 12956 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1294a:	4632      	mov	r2, r6
   1294c:	462b      	mov	r3, r5
   1294e:	4803      	ldr	r0, [pc, #12]	; (1295c <clkstarted_handle.constprop.0+0x30>)
}
   12950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12954:	4718      	bx	r3
}
   12956:	bd70      	pop	{r4, r5, r6, pc}
   12958:	20002038 	.word	0x20002038
   1295c:	00019ee4 	.word	0x00019ee4

00012960 <clock_event_handler>:
	switch (event) {
   12960:	b110      	cbz	r0, 12968 <clock_event_handler+0x8>
   12962:	2801      	cmp	r0, #1
   12964:	d004      	beq.n	12970 <clock_event_handler+0x10>
   12966:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12968:	4b03      	ldr	r3, [pc, #12]	; (12978 <clock_event_handler+0x18>)
   1296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1296c:	075b      	lsls	r3, r3, #29
   1296e:	d101      	bne.n	12974 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12970:	f7ff bfdc 	b.w	1292c <clkstarted_handle.constprop.0>
}
   12974:	4770      	bx	lr
   12976:	bf00      	nop
   12978:	20002038 	.word	0x20002038

0001297c <generic_hfclk_start>:
{
   1297c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1297e:	f04f 0320 	mov.w	r3, #32
   12982:	f3ef 8111 	mrs	r1, BASEPRI
   12986:	f383 8812 	msr	BASEPRI_MAX, r3
   1298a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1298e:	4a12      	ldr	r2, [pc, #72]	; (129d8 <generic_hfclk_start+0x5c>)
   12990:	6813      	ldr	r3, [r2, #0]
   12992:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12996:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1299a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1299c:	d00c      	beq.n	129b8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1299e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   129a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   129a6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   129aa:	f013 0301 	ands.w	r3, r3, #1
   129ae:	d003      	beq.n	129b8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   129b0:	480a      	ldr	r0, [pc, #40]	; (129dc <generic_hfclk_start+0x60>)
   129b2:	f006 f903 	bl	18bbc <set_on_state>
			already_started = true;
   129b6:	2301      	movs	r3, #1
	__asm__ volatile(
   129b8:	f381 8811 	msr	BASEPRI, r1
   129bc:	f3bf 8f6f 	isb	sy
	if (already_started) {
   129c0:	b123      	cbz	r3, 129cc <generic_hfclk_start+0x50>
}
   129c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   129c6:	2000      	movs	r0, #0
   129c8:	f7ff bfb0 	b.w	1292c <clkstarted_handle.constprop.0>
}
   129cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   129d0:	2001      	movs	r0, #1
   129d2:	f006 bc4b 	b.w	1926c <nrfx_clock_start>
   129d6:	bf00      	nop
   129d8:	20002088 	.word	0x20002088
   129dc:	20002078 	.word	0x20002078

000129e0 <api_blocking_start>:
{
   129e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   129e2:	2200      	movs	r2, #0
   129e4:	2301      	movs	r3, #1
   129e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   129ea:	ab04      	add	r3, sp, #16
   129ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   129f0:	4a09      	ldr	r2, [pc, #36]	; (12a18 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   129f2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   129f6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   129f8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   129fc:	f006 f94e 	bl	18c9c <api_start>
	if (err < 0) {
   12a00:	2800      	cmp	r0, #0
   12a02:	db05      	blt.n	12a10 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   12a04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12a08:	2300      	movs	r3, #0
   12a0a:	4668      	mov	r0, sp
   12a0c:	f002 fa0c 	bl	14e28 <z_impl_k_sem_take>
}
   12a10:	b007      	add	sp, #28
   12a12:	f85d fb04 	ldr.w	pc, [sp], #4
   12a16:	bf00      	nop
   12a18:	00018cc9 	.word	0x00018cc9

00012a1c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a1c:	4b09      	ldr	r3, [pc, #36]	; (12a44 <generic_hfclk_stop+0x28>)
   12a1e:	f3bf 8f5b 	dmb	ish
   12a22:	e853 2f00 	ldrex	r2, [r3]
   12a26:	f022 0102 	bic.w	r1, r2, #2
   12a2a:	e843 1000 	strex	r0, r1, [r3]
   12a2e:	2800      	cmp	r0, #0
   12a30:	d1f7      	bne.n	12a22 <generic_hfclk_stop+0x6>
   12a32:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12a36:	07d3      	lsls	r3, r2, #31
   12a38:	d402      	bmi.n	12a40 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12a3a:	2001      	movs	r0, #1
   12a3c:	f006 bc53 	b.w	192e6 <nrfx_clock_stop>
}
   12a40:	4770      	bx	lr
   12a42:	bf00      	nop
   12a44:	20002088 	.word	0x20002088

00012a48 <z_nrf_clock_control_get_onoff>:
}
   12a48:	4a02      	ldr	r2, [pc, #8]	; (12a54 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   12a4a:	b2c3      	uxtb	r3, r0
}
   12a4c:	201c      	movs	r0, #28
   12a4e:	fb03 2000 	mla	r0, r3, r0, r2
   12a52:	4770      	bx	lr
   12a54:	20002038 	.word	0x20002038

00012a58 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12a58:	4b09      	ldr	r3, [pc, #36]	; (12a80 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   12a5a:	f3bf 8f5b 	dmb	ish
   12a5e:	e853 2f00 	ldrex	r2, [r3]
   12a62:	f042 0101 	orr.w	r1, r2, #1
   12a66:	e843 1000 	strex	r0, r1, [r3]
   12a6a:	2800      	cmp	r0, #0
   12a6c:	d1f7      	bne.n	12a5e <z_nrf_clock_bt_ctlr_hf_request+0x6>
   12a6e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   12a72:	0793      	lsls	r3, r2, #30
   12a74:	d402      	bmi.n	12a7c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12a76:	2001      	movs	r0, #1
   12a78:	f006 bbf8 	b.w	1926c <nrfx_clock_start>
}
   12a7c:	4770      	bx	lr
   12a7e:	bf00      	nop
   12a80:	20002088 	.word	0x20002088

00012a84 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a84:	4b09      	ldr	r3, [pc, #36]	; (12aac <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   12a86:	f3bf 8f5b 	dmb	ish
   12a8a:	e853 2f00 	ldrex	r2, [r3]
   12a8e:	f022 0101 	bic.w	r1, r2, #1
   12a92:	e843 1000 	strex	r0, r1, [r3]
   12a96:	2800      	cmp	r0, #0
   12a98:	d1f7      	bne.n	12a8a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   12a9a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   12a9e:	0793      	lsls	r3, r2, #30
   12aa0:	d402      	bmi.n	12aa8 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12aa2:	2001      	movs	r0, #1
   12aa4:	f006 bc1f 	b.w	192e6 <nrfx_clock_stop>
}
   12aa8:	4770      	bx	lr
   12aaa:	bf00      	nop
   12aac:	20002088 	.word	0x20002088

00012ab0 <z_nrf_clock_control_lf_on>:
{
   12ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12ab4:	4939      	ldr	r1, [pc, #228]	; (12b9c <z_nrf_clock_control_lf_on+0xec>)
   12ab6:	f3bf 8f5b 	dmb	ish
   12aba:	4607      	mov	r7, r0
   12abc:	2201      	movs	r2, #1
   12abe:	e851 3f00 	ldrex	r3, [r1]
   12ac2:	e841 2000 	strex	r0, r2, [r1]
   12ac6:	2800      	cmp	r0, #0
   12ac8:	d1f9      	bne.n	12abe <z_nrf_clock_control_lf_on+0xe>
   12aca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12ace:	b933      	cbnz	r3, 12ade <z_nrf_clock_control_lf_on+0x2e>
   12ad0:	4933      	ldr	r1, [pc, #204]	; (12ba0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   12ad2:	4834      	ldr	r0, [pc, #208]	; (12ba4 <z_nrf_clock_control_lf_on+0xf4>)
   12ad4:	604b      	str	r3, [r1, #4]
   12ad6:	60cb      	str	r3, [r1, #12]
   12ad8:	608a      	str	r2, [r1, #8]
   12ada:	f003 f970 	bl	15dbe <onoff_request>
	switch (start_mode) {
   12ade:	1e7b      	subs	r3, r7, #1
   12ae0:	2b01      	cmp	r3, #1
   12ae2:	d82f      	bhi.n	12b44 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   12ae4:	2f01      	cmp	r7, #1
   12ae6:	d107      	bne.n	12af8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12aec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   12af0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   12af4:	2b01      	cmp	r3, #1
   12af6:	d025      	beq.n	12b44 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12af8:	f006 fd19 	bl	1952e <k_is_in_isr>
   12afc:	4604      	mov	r4, r0
   12afe:	b918      	cbnz	r0, 12b08 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   12b00:	4b29      	ldr	r3, [pc, #164]	; (12ba8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   12b02:	781b      	ldrb	r3, [r3, #0]
   12b04:	2b00      	cmp	r3, #0
   12b06:	d141      	bne.n	12b8c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   12b08:	f04f 0320 	mov.w	r3, #32
   12b0c:	f3ef 8611 	mrs	r6, BASEPRI
   12b10:	f383 8812 	msr	BASEPRI_MAX, r3
   12b14:	f3bf 8f6f 	isb	sy
   12b18:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12b1a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 12bac <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12b1e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   12b22:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12b26:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   12b2a:	03d2      	lsls	r2, r2, #15
   12b2c:	d50c      	bpl.n	12b48 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   12b2e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   12b32:	2b01      	cmp	r3, #1
   12b34:	d001      	beq.n	12b3a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12b36:	2f01      	cmp	r7, #1
   12b38:	d106      	bne.n	12b48 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   12b3a:	b30c      	cbz	r4, 12b80 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   12b3c:	f386 8811 	msr	BASEPRI, r6
   12b40:	f3bf 8f6f 	isb	sy
}
   12b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12b48:	b1ac      	cbz	r4, 12b76 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12b4a:	4630      	mov	r0, r6
   12b4c:	f7f1 f984 	bl	3e58 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12b50:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12b54:	2b00      	cmp	r3, #0
   12b56:	d1e4      	bne.n	12b22 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12b58:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   12b5c:	2a00      	cmp	r2, #0
   12b5e:	d0e0      	beq.n	12b22 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b60:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12b64:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   12b68:	2301      	movs	r3, #1
   12b6a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   12b6e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b72:	60ab      	str	r3, [r5, #8]
}
   12b74:	e7d5      	b.n	12b22 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   12b76:	2100      	movs	r1, #0
   12b78:	2021      	movs	r0, #33	; 0x21
   12b7a:	f002 fdcd 	bl	15718 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12b7e:	e7e7      	b.n	12b50 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   12b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12b84:	2202      	movs	r2, #2
   12b86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12b8a:	e7db      	b.n	12b44 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   12b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12b90:	2202      	movs	r2, #2
   12b92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   12b96:	4606      	mov	r6, r0
}
   12b98:	e7bf      	b.n	12b1a <z_nrf_clock_control_lf_on+0x6a>
   12b9a:	bf00      	nop
   12b9c:	2000208c 	.word	0x2000208c
   12ba0:	20002028 	.word	0x20002028
   12ba4:	20002054 	.word	0x20002054
   12ba8:	20002696 	.word	0x20002696
   12bac:	e000e100 	.word	0xe000e100

00012bb0 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   12bb0:	280a      	cmp	r0, #10
{
   12bb2:	b538      	push	{r3, r4, r5, lr}
   12bb4:	4d06      	ldr	r5, [pc, #24]	; (12bd0 <console_out+0x20>)
   12bb6:	4604      	mov	r4, r0
	if ('\n' == c) {
   12bb8:	d103      	bne.n	12bc2 <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
   12bba:	6828      	ldr	r0, [r5, #0]
   12bbc:	210d      	movs	r1, #13
   12bbe:	f006 f88b 	bl	18cd8 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   12bc2:	6828      	ldr	r0, [r5, #0]
   12bc4:	b2e1      	uxtb	r1, r4
   12bc6:	f006 f887 	bl	18cd8 <uart_poll_out>

	return c;
}
   12bca:	4620      	mov	r0, r4
   12bcc:	bd38      	pop	{r3, r4, r5, pc}
   12bce:	bf00      	nop
   12bd0:	200020ac 	.word	0x200020ac

00012bd4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   12bd4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   12bd6:	4b08      	ldr	r3, [pc, #32]	; (12bf8 <uart_console_init+0x24>)
   12bd8:	4808      	ldr	r0, [pc, #32]	; (12bfc <uart_console_init+0x28>)
   12bda:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   12bdc:	f006 fbe3 	bl	193a6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   12be0:	b138      	cbz	r0, 12bf2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   12be2:	4807      	ldr	r0, [pc, #28]	; (12c00 <uart_console_init+0x2c>)
   12be4:	f7f1 fc8c 	bl	4500 <__stdout_hook_install>
	__printk_hook_install(console_out);
   12be8:	4805      	ldr	r0, [pc, #20]	; (12c00 <uart_console_init+0x2c>)
   12bea:	f7f0 fa8d 	bl	3108 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   12bee:	2000      	movs	r0, #0
}
   12bf0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12bf2:	f06f 0012 	mvn.w	r0, #18
   12bf6:	e7fb      	b.n	12bf0 <uart_console_init+0x1c>
   12bf8:	200020ac 	.word	0x200020ac
   12bfc:	00019f5c 	.word	0x00019f5c
   12c00:	00012bb1 	.word	0x00012bb1

00012c04 <del_char>:
{
   12c04:	b570      	push	{r4, r5, r6, lr}
	uart_poll_out(uart_console_dev, '\b');
   12c06:	4e13      	ldr	r6, [pc, #76]	; (12c54 <del_char+0x50>)
{
   12c08:	460d      	mov	r5, r1
   12c0a:	4604      	mov	r4, r0
	uart_poll_out(uart_console_dev, '\b');
   12c0c:	2108      	movs	r1, #8
   12c0e:	6830      	ldr	r0, [r6, #0]
   12c10:	f006 f862 	bl	18cd8 <uart_poll_out>
	if (end == 0U) {
   12c14:	b94d      	cbnz	r5, 12c2a <del_char+0x26>
		uart_poll_out(uart_console_dev, ' ');
   12c16:	6830      	ldr	r0, [r6, #0]
   12c18:	2120      	movs	r1, #32
   12c1a:	f006 f85d 	bl	18cd8 <uart_poll_out>
		uart_poll_out(uart_console_dev, '\b');
   12c1e:	6830      	ldr	r0, [r6, #0]
   12c20:	2108      	movs	r1, #8
}
   12c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uart_poll_out(uart_console_dev, '\b');
   12c26:	f006 b857 	b.w	18cd8 <uart_poll_out>
	printk("\x1b[s");
   12c2a:	480b      	ldr	r0, [pc, #44]	; (12c58 <del_char+0x54>)
   12c2c:	f003 f84b 	bl	15cc6 <printk>
   12c30:	4425      	add	r5, r4
	while (end-- > 0) {
   12c32:	42ac      	cmp	r4, r5
		uart_poll_out(uart_console_dev, *(pos++));
   12c34:	6830      	ldr	r0, [r6, #0]
	while (end-- > 0) {
   12c36:	d107      	bne.n	12c48 <del_char+0x44>
	uart_poll_out(uart_console_dev, ' ');
   12c38:	2120      	movs	r1, #32
   12c3a:	f006 f84d 	bl	18cd8 <uart_poll_out>
}
   12c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\x1b[u");
   12c42:	4806      	ldr	r0, [pc, #24]	; (12c5c <del_char+0x58>)
   12c44:	f003 b83f 	b.w	15cc6 <printk>
		*pos = *(pos + 1);
   12c48:	7861      	ldrb	r1, [r4, #1]
   12c4a:	f804 1b01 	strb.w	r1, [r4], #1
		uart_poll_out(uart_console_dev, *(pos++));
   12c4e:	f006 f843 	bl	18cd8 <uart_poll_out>
   12c52:	e7ee      	b.n	12c32 <del_char+0x2e>
   12c54:	200020ac 	.word	0x200020ac
   12c58:	0001b512 	.word	0x0001b512
   12c5c:	0001b516 	.word	0x0001b516

00012c60 <uart_console_isr>:
{
   12c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (uart_irq_update(uart_console_dev) &&
   12c64:	4fa5      	ldr	r7, [pc, #660]	; (12efc <uart_console_isr+0x29c>)
		if (!cmd) {
   12c66:	4ea6      	ldr	r6, [pc, #664]	; (12f00 <uart_console_isr+0x2a0>)
	while (uart_irq_update(uart_console_dev) &&
   12c68:	6838      	ldr	r0, [r7, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   12c6a:	6883      	ldr	r3, [r0, #8]
   12c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12c6e:	2b00      	cmp	r3, #0
   12c70:	f040 81c2 	bne.w	12ff8 <uart_console_isr+0x398>
	       uart_irq_is_pending(uart_console_dev)) {
   12c74:	6838      	ldr	r0, [r7, #0]
	if (api->irq_is_pending == NULL) {
   12c76:	6883      	ldr	r3, [r0, #8]
   12c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	f040 81c1 	bne.w	13002 <uart_console_isr+0x3a2>
		if (!uart_irq_rx_ready(uart_console_dev)) {
   12c80:	6838      	ldr	r0, [r7, #0]
	if (api->irq_rx_ready == NULL) {
   12c82:	6883      	ldr	r3, [r0, #8]
   12c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c86:	b94b      	cbnz	r3, 12c9c <uart_console_isr+0x3c>
		rx = read_uart(uart_console_dev, &byte, 1);
   12c88:	683c      	ldr	r4, [r7, #0]
	if (api->fifo_read == NULL) {
   12c8a:	68a3      	ldr	r3, [r4, #8]
   12c8c:	699b      	ldr	r3, [r3, #24]
   12c8e:	b94b      	cbnz	r3, 12ca4 <uart_console_isr+0x44>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
   12c90:	4620      	mov	r0, r4
   12c92:	f006 f81c 	bl	18cce <z_impl_uart_irq_rx_disable>
}
   12c96:	b003      	add	sp, #12
   12c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->irq_rx_ready(dev);
   12c9c:	4798      	blx	r3
		if (!uart_irq_rx_ready(uart_console_dev)) {
   12c9e:	2800      	cmp	r0, #0
   12ca0:	d0e2      	beq.n	12c68 <uart_console_isr+0x8>
   12ca2:	e7f1      	b.n	12c88 <uart_console_isr+0x28>
	return api->fifo_read(dev, rx_data, size);
   12ca4:	2201      	movs	r2, #1
   12ca6:	f10d 0107 	add.w	r1, sp, #7
   12caa:	4620      	mov	r0, r4
   12cac:	4798      	blx	r3
	if (rx < 0) {
   12cae:	2800      	cmp	r0, #0
   12cb0:	dbee      	blt.n	12c90 <uart_console_isr+0x30>
		if (!cmd) {
   12cb2:	6833      	ldr	r3, [r6, #0]
   12cb4:	b393      	cbz	r3, 12d1c <uart_console_isr+0xbc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12cb6:	f3bf 8f5b 	dmb	ish
   12cba:	4c92      	ldr	r4, [pc, #584]	; (12f04 <uart_console_isr+0x2a4>)
   12cbc:	6823      	ldr	r3, [r4, #0]
   12cbe:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
   12cc2:	f013 0f02 	tst.w	r3, #2
   12cc6:	46a0      	mov	r8, r4
   12cc8:	f000 80db 	beq.w	12e82 <uart_console_isr+0x222>
			handle_ansi(byte, cmd->line);
   12ccc:	f89d 5007 	ldrb.w	r5, [sp, #7]
   12cd0:	f8d6 9000 	ldr.w	r9, [r6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12cd4:	f3bf 8f5b 	dmb	ish
   12cd8:	e858 3f00 	ldrex	r3, [r8]
   12cdc:	f023 0204 	bic.w	r2, r3, #4
   12ce0:	e848 2100 	strex	r1, r2, [r8]
   12ce4:	2900      	cmp	r1, #0
   12ce6:	d1f7      	bne.n	12cd8 <uart_console_isr+0x78>
   12ce8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
   12cec:	0759      	lsls	r1, r3, #29
   12cee:	d529      	bpl.n	12d44 <uart_console_isr+0xe4>
   12cf0:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
		if (!isdigit(byte)) {
   12cf4:	f1bb 0f09 	cmp.w	fp, #9
   12cf8:	f8df a20c 	ldr.w	sl, [pc, #524]	; 12f08 <uart_console_isr+0x2a8>
   12cfc:	d918      	bls.n	12d30 <uart_console_isr+0xd0>
			ansi_val = 1U;
   12cfe:	2301      	movs	r3, #1
   12d00:	f8ca 3000 	str.w	r3, [sl]
	switch (byte) {
   12d04:	2d48      	cmp	r5, #72	; 0x48
   12d06:	d861      	bhi.n	12dcc <uart_console_isr+0x16c>
   12d08:	2d42      	cmp	r5, #66	; 0x42
   12d0a:	d961      	bls.n	12dd0 <uart_console_isr+0x170>
   12d0c:	3d43      	subs	r5, #67	; 0x43
   12d0e:	2d05      	cmp	r5, #5
   12d10:	d85e      	bhi.n	12dd0 <uart_console_isr+0x170>
   12d12:	e8df f005 	tbb	[pc, r5]
   12d16:	6a7b      	.short	0x6a7b
   12d18:	8a5d995d 	.word	0x8a5d995d
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
   12d1c:	4b7b      	ldr	r3, [pc, #492]	; (12f0c <uart_console_isr+0x2ac>)
   12d1e:	6818      	ldr	r0, [r3, #0]
	return z_impl_k_queue_get(queue, timeout);
   12d20:	2200      	movs	r2, #0
   12d22:	2300      	movs	r3, #0
   12d24:	f002 f826 	bl	14d74 <z_impl_k_queue_get>
   12d28:	6030      	str	r0, [r6, #0]
			if (!cmd) {
   12d2a:	2800      	cmp	r0, #0
   12d2c:	d1c3      	bne.n	12cb6 <uart_console_isr+0x56>
   12d2e:	e7b2      	b.n	12c96 <uart_console_isr+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12d30:	2108      	movs	r1, #8
   12d32:	4620      	mov	r0, r4
   12d34:	f005 ffd3 	bl	18cde <atomic_or>
		ansi_val_2 = 0U;
   12d38:	4b75      	ldr	r3, [pc, #468]	; (12f10 <uart_console_isr+0x2b0>)
		ansi_val = byte - '0';
   12d3a:	f8ca b000 	str.w	fp, [sl]
		ansi_val_2 = 0U;
   12d3e:	2200      	movs	r2, #0
				ansi_val_2 += byte - '0';
   12d40:	601a      	str	r2, [r3, #0]
   12d42:	e791      	b.n	12c68 <uart_console_isr+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12d44:	f3bf 8f5b 	dmb	ish
   12d48:	6823      	ldr	r3, [r4, #0]
   12d4a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
   12d4e:	071a      	lsls	r2, r3, #28
   12d50:	d5d8      	bpl.n	12d04 <uart_console_isr+0xa4>
   12d52:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
		if (isdigit(byte)) {
   12d56:	2b09      	cmp	r3, #9
   12d58:	d816      	bhi.n	12d88 <uart_console_isr+0x128>
   12d5a:	f3bf 8f5b 	dmb	ish
   12d5e:	6823      	ldr	r3, [r4, #0]
   12d60:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
   12d64:	f013 0f10 	tst.w	r3, #16
   12d68:	f04f 000a 	mov.w	r0, #10
   12d6c:	d005      	beq.n	12d7a <uart_console_isr+0x11a>
				ansi_val_2 += byte - '0';
   12d6e:	4b68      	ldr	r3, [pc, #416]	; (12f10 <uart_console_isr+0x2b0>)
				ansi_val_2 *= 10U;
   12d70:	681a      	ldr	r2, [r3, #0]
				ansi_val_2 += byte - '0';
   12d72:	fb00 5202 	mla	r2, r0, r2, r5
   12d76:	3a30      	subs	r2, #48	; 0x30
   12d78:	e7e2      	b.n	12d40 <uart_console_isr+0xe0>
				ansi_val += byte - '0';
   12d7a:	4963      	ldr	r1, [pc, #396]	; (12f08 <uart_console_isr+0x2a8>)
				ansi_val *= 10U;
   12d7c:	680b      	ldr	r3, [r1, #0]
				ansi_val += byte - '0';
   12d7e:	fb00 5303 	mla	r3, r0, r3, r5
   12d82:	3b30      	subs	r3, #48	; 0x30
   12d84:	600b      	str	r3, [r1, #0]
   12d86:	e76f      	b.n	12c68 <uart_console_isr+0x8>
		if (byte == ';' &&
   12d88:	2d3b      	cmp	r5, #59	; 0x3b
   12d8a:	d018      	beq.n	12dbe <uart_console_isr+0x15e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d8c:	f3bf 8f5b 	dmb	ish
   12d90:	e858 3f00 	ldrex	r3, [r8]
   12d94:	f023 0308 	bic.w	r3, r3, #8
   12d98:	e848 3200 	strex	r2, r3, [r8]
   12d9c:	2a00      	cmp	r2, #0
   12d9e:	d1f7      	bne.n	12d90 <uart_console_isr+0x130>
   12da0:	f3bf 8f5b 	dmb	ish
   12da4:	f3bf 8f5b 	dmb	ish
   12da8:	e858 3f00 	ldrex	r3, [r8]
   12dac:	f023 0310 	bic.w	r3, r3, #16
   12db0:	e848 3200 	strex	r2, r3, [r8]
   12db4:	2a00      	cmp	r2, #0
   12db6:	d1f7      	bne.n	12da8 <uart_console_isr+0x148>
   12db8:	f3bf 8f5b 	dmb	ish
   12dbc:	e7a2      	b.n	12d04 <uart_console_isr+0xa4>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12dbe:	2110      	movs	r1, #16
   12dc0:	4620      	mov	r0, r4
   12dc2:	f005 ff8c 	bl	18cde <atomic_or>
   12dc6:	06c3      	lsls	r3, r0, #27
   12dc8:	d4e0      	bmi.n	12d8c <uart_console_isr+0x12c>
   12dca:	e74d      	b.n	12c68 <uart_console_isr+0x8>
	switch (byte) {
   12dcc:	2d7e      	cmp	r5, #126	; 0x7e
   12dce:	d044      	beq.n	12e5a <uart_console_isr+0x1fa>
   12dd0:	f3bf 8f5b 	dmb	ish
   12dd4:	e858 3f00 	ldrex	r3, [r8]
   12dd8:	f023 0302 	bic.w	r3, r3, #2
   12ddc:	e848 3200 	strex	r2, r3, [r8]
   12de0:	2a00      	cmp	r2, #0
   12de2:	d1f7      	bne.n	12dd4 <uart_console_isr+0x174>
   12de4:	f3bf 8f5b 	dmb	ish
   12de8:	e73e      	b.n	12c68 <uart_console_isr+0x8>
		if (ansi_val > cur) {
   12dea:	484a      	ldr	r0, [pc, #296]	; (12f14 <uart_console_isr+0x2b4>)
   12dec:	4a46      	ldr	r2, [pc, #280]	; (12f08 <uart_console_isr+0x2a8>)
   12dee:	7803      	ldrb	r3, [r0, #0]
   12df0:	6811      	ldr	r1, [r2, #0]
   12df2:	428b      	cmp	r3, r1
   12df4:	d3ec      	bcc.n	12dd0 <uart_console_isr+0x170>
		end += ansi_val;
   12df6:	4c48      	ldr	r4, [pc, #288]	; (12f18 <uart_console_isr+0x2b8>)
   12df8:	7822      	ldrb	r2, [r4, #0]
		cur -= ansi_val;
   12dfa:	1a5b      	subs	r3, r3, r1
		end += ansi_val;
   12dfc:	fa52 f281 	uxtab	r2, r2, r1
		cur -= ansi_val;
   12e00:	7003      	strb	r3, [r0, #0]
	printk("\x1b[%uD", count);
   12e02:	4846      	ldr	r0, [pc, #280]	; (12f1c <uart_console_isr+0x2bc>)
		end += ansi_val;
   12e04:	7022      	strb	r2, [r4, #0]
	printk("\x1b[%uC", count);
   12e06:	f002 ff5e 	bl	15cc6 <printk>
}
   12e0a:	e7e1      	b.n	12dd0 <uart_console_isr+0x170>
		if (ansi_val > end) {
   12e0c:	4842      	ldr	r0, [pc, #264]	; (12f18 <uart_console_isr+0x2b8>)
   12e0e:	4b3e      	ldr	r3, [pc, #248]	; (12f08 <uart_console_isr+0x2a8>)
   12e10:	7802      	ldrb	r2, [r0, #0]
   12e12:	6819      	ldr	r1, [r3, #0]
   12e14:	428a      	cmp	r2, r1
   12e16:	d3db      	bcc.n	12dd0 <uart_console_isr+0x170>
		end -= ansi_val;
   12e18:	b2cb      	uxtb	r3, r1
   12e1a:	1ad2      	subs	r2, r2, r3
   12e1c:	7002      	strb	r2, [r0, #0]
		cur += ansi_val;
   12e1e:	4a3d      	ldr	r2, [pc, #244]	; (12f14 <uart_console_isr+0x2b4>)
   12e20:	7810      	ldrb	r0, [r2, #0]
   12e22:	4403      	add	r3, r0
   12e24:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uC", count);
   12e26:	483e      	ldr	r0, [pc, #248]	; (12f20 <uart_console_isr+0x2c0>)
   12e28:	e7ed      	b.n	12e06 <uart_console_isr+0x1a6>
		if (!cur) {
   12e2a:	4c3a      	ldr	r4, [pc, #232]	; (12f14 <uart_console_isr+0x2b4>)
   12e2c:	7821      	ldrb	r1, [r4, #0]
   12e2e:	2900      	cmp	r1, #0
   12e30:	d0ce      	beq.n	12dd0 <uart_console_isr+0x170>
	printk("\x1b[%uD", count);
   12e32:	483a      	ldr	r0, [pc, #232]	; (12f1c <uart_console_isr+0x2bc>)
   12e34:	f002 ff47 	bl	15cc6 <printk>
		end += cur;
   12e38:	4a37      	ldr	r2, [pc, #220]	; (12f18 <uart_console_isr+0x2b8>)
		cur += end;
   12e3a:	7813      	ldrb	r3, [r2, #0]
   12e3c:	7821      	ldrb	r1, [r4, #0]
   12e3e:	440b      	add	r3, r1
   12e40:	7013      	strb	r3, [r2, #0]
		end = 0U;
   12e42:	2300      	movs	r3, #0
   12e44:	7023      	strb	r3, [r4, #0]
		break;
   12e46:	e7c3      	b.n	12dd0 <uart_console_isr+0x170>
		if (!end) {
   12e48:	4c33      	ldr	r4, [pc, #204]	; (12f18 <uart_console_isr+0x2b8>)
   12e4a:	7821      	ldrb	r1, [r4, #0]
   12e4c:	2900      	cmp	r1, #0
   12e4e:	d0bf      	beq.n	12dd0 <uart_console_isr+0x170>
	printk("\x1b[%uC", count);
   12e50:	4833      	ldr	r0, [pc, #204]	; (12f20 <uart_console_isr+0x2c0>)
   12e52:	f002 ff38 	bl	15cc6 <printk>
		cur += end;
   12e56:	4a2f      	ldr	r2, [pc, #188]	; (12f14 <uart_console_isr+0x2b4>)
   12e58:	e7ef      	b.n	12e3a <uart_console_isr+0x1da>
		if (!end) {
   12e5a:	4c2f      	ldr	r4, [pc, #188]	; (12f18 <uart_console_isr+0x2b8>)
   12e5c:	7823      	ldrb	r3, [r4, #0]
   12e5e:	2b00      	cmp	r3, #0
   12e60:	d0b6      	beq.n	12dd0 <uart_console_isr+0x170>
	printk("\x1b[%uC", count);
   12e62:	482f      	ldr	r0, [pc, #188]	; (12f20 <uart_console_isr+0x2c0>)
   12e64:	2101      	movs	r1, #1
   12e66:	f002 ff2e 	bl	15cc6 <printk>
		del_char(&line[cur], --end);
   12e6a:	4a2a      	ldr	r2, [pc, #168]	; (12f14 <uart_console_isr+0x2b4>)
   12e6c:	7821      	ldrb	r1, [r4, #0]
   12e6e:	7810      	ldrb	r0, [r2, #0]
			handle_ansi(byte, cmd->line);
   12e70:	f109 0905 	add.w	r9, r9, #5
		del_char(&line[cur], --end);
   12e74:	3901      	subs	r1, #1
   12e76:	b2c9      	uxtb	r1, r1
   12e78:	4448      	add	r0, r9
   12e7a:	7021      	strb	r1, [r4, #0]
   12e7c:	f7ff fec2 	bl	12c04 <del_char>
		break;
   12e80:	e7a6      	b.n	12dd0 <uart_console_isr+0x170>
   12e82:	f3bf 8f5b 	dmb	ish
   12e86:	e854 8f00 	ldrex	r8, [r4]
   12e8a:	f028 0301 	bic.w	r3, r8, #1
   12e8e:	e844 3200 	strex	r2, r3, [r4]
   12e92:	2a00      	cmp	r2, #0
   12e94:	d1f7      	bne.n	12e86 <uart_console_isr+0x226>
   12e96:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
   12e9a:	f018 0801 	ands.w	r8, r8, #1
   12e9e:	f89d 5007 	ldrb.w	r5, [sp, #7]
   12ea2:	d00b      	beq.n	12ebc <uart_console_isr+0x25c>
			if (byte == ANSI_ESC) {
   12ea4:	2d5b      	cmp	r5, #91	; 0x5b
   12ea6:	f47f aedf 	bne.w	12c68 <uart_console_isr+0x8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12eaa:	2102      	movs	r1, #2
   12eac:	4620      	mov	r0, r4
   12eae:	f005 ff16 	bl	18cde <atomic_or>
   12eb2:	2104      	movs	r1, #4
   12eb4:	4620      	mov	r0, r4
   12eb6:	f005 ff12 	bl	18cde <atomic_or>
}
   12eba:	e6d5      	b.n	12c68 <uart_console_isr+0x8>
	return (int)((((unsigned)c) >= ' ') &&
   12ebc:	f1a5 0320 	sub.w	r3, r5, #32
		if (!isprint(byte)) {
   12ec0:	2b5e      	cmp	r3, #94	; 0x5e
   12ec2:	d967      	bls.n	12f94 <uart_console_isr+0x334>
			switch (byte) {
   12ec4:	2d0d      	cmp	r5, #13
   12ec6:	d046      	beq.n	12f56 <uart_console_isr+0x2f6>
   12ec8:	d82e      	bhi.n	12f28 <uart_console_isr+0x2c8>
   12eca:	2d08      	cmp	r5, #8
   12ecc:	d031      	beq.n	12f32 <uart_console_isr+0x2d2>
   12ece:	2d09      	cmp	r5, #9
   12ed0:	f47f aeca 	bne.w	12c68 <uart_console_isr+0x8>
				if (completion_cb && !end) {
   12ed4:	4b13      	ldr	r3, [pc, #76]	; (12f24 <uart_console_isr+0x2c4>)
   12ed6:	681b      	ldr	r3, [r3, #0]
   12ed8:	2b00      	cmp	r3, #0
   12eda:	f43f aec5 	beq.w	12c68 <uart_console_isr+0x8>
   12ede:	4a0e      	ldr	r2, [pc, #56]	; (12f18 <uart_console_isr+0x2b8>)
   12ee0:	7812      	ldrb	r2, [r2, #0]
   12ee2:	2a00      	cmp	r2, #0
   12ee4:	f47f aec0 	bne.w	12c68 <uart_console_isr+0x8>
					cur += completion_cb(cmd->line, cur);
   12ee8:	4c0a      	ldr	r4, [pc, #40]	; (12f14 <uart_console_isr+0x2b4>)
   12eea:	6830      	ldr	r0, [r6, #0]
   12eec:	7821      	ldrb	r1, [r4, #0]
   12eee:	3005      	adds	r0, #5
   12ef0:	4798      	blx	r3
   12ef2:	7823      	ldrb	r3, [r4, #0]
   12ef4:	4418      	add	r0, r3
   12ef6:	7020      	strb	r0, [r4, #0]
   12ef8:	e6b6      	b.n	12c68 <uart_console_isr+0x8>
   12efa:	bf00      	nop
   12efc:	200020ac 	.word	0x200020ac
   12f00:	2000209c 	.word	0x2000209c
   12f04:	200020a4 	.word	0x200020a4
   12f08:	20002090 	.word	0x20002090
   12f0c:	20002098 	.word	0x20002098
   12f10:	20002094 	.word	0x20002094
   12f14:	20002240 	.word	0x20002240
   12f18:	20002241 	.word	0x20002241
   12f1c:	0001b51a 	.word	0x0001b51a
   12f20:	0001b520 	.word	0x0001b520
   12f24:	200020a0 	.word	0x200020a0
			switch (byte) {
   12f28:	2d1b      	cmp	r5, #27
   12f2a:	d012      	beq.n	12f52 <uart_console_isr+0x2f2>
   12f2c:	2d7f      	cmp	r5, #127	; 0x7f
   12f2e:	f47f ae9b 	bne.w	12c68 <uart_console_isr+0x8>
				if (cur > 0) {
   12f32:	4a36      	ldr	r2, [pc, #216]	; (1300c <uart_console_isr+0x3ac>)
   12f34:	7813      	ldrb	r3, [r2, #0]
   12f36:	2b00      	cmp	r3, #0
   12f38:	f43f ae96 	beq.w	12c68 <uart_console_isr+0x8>
					del_char(&cmd->line[--cur], end);
   12f3c:	3b01      	subs	r3, #1
   12f3e:	b2db      	uxtb	r3, r3
   12f40:	7013      	strb	r3, [r2, #0]
   12f42:	6830      	ldr	r0, [r6, #0]
   12f44:	4a32      	ldr	r2, [pc, #200]	; (13010 <uart_console_isr+0x3b0>)
   12f46:	3305      	adds	r3, #5
   12f48:	7811      	ldrb	r1, [r2, #0]
   12f4a:	4418      	add	r0, r3
   12f4c:	f7ff fe5a 	bl	12c04 <del_char>
   12f50:	e68a      	b.n	12c68 <uart_console_isr+0x8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f52:	2101      	movs	r1, #1
   12f54:	e7ae      	b.n	12eb4 <uart_console_isr+0x254>
				cmd->line[cur + end] = '\0';
   12f56:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1300c <uart_console_isr+0x3ac>
   12f5a:	4c2d      	ldr	r4, [pc, #180]	; (13010 <uart_console_isr+0x3b0>)
   12f5c:	f899 1000 	ldrb.w	r1, [r9]
   12f60:	6833      	ldr	r3, [r6, #0]
   12f62:	7822      	ldrb	r2, [r4, #0]
				uart_poll_out(uart_console_dev, '\r');
   12f64:	6838      	ldr	r0, [r7, #0]
				cmd->line[cur + end] = '\0';
   12f66:	440b      	add	r3, r1
   12f68:	4413      	add	r3, r2
				uart_poll_out(uart_console_dev, '\r');
   12f6a:	4629      	mov	r1, r5
				cmd->line[cur + end] = '\0';
   12f6c:	f883 8005 	strb.w	r8, [r3, #5]
				uart_poll_out(uart_console_dev, '\r');
   12f70:	f005 feb2 	bl	18cd8 <uart_poll_out>
				uart_poll_out(uart_console_dev, '\n');
   12f74:	6838      	ldr	r0, [r7, #0]
   12f76:	210a      	movs	r1, #10
   12f78:	f005 feae 	bl	18cd8 <uart_poll_out>
				k_fifo_put(lines_queue, cmd);
   12f7c:	4b25      	ldr	r3, [pc, #148]	; (13014 <uart_console_isr+0x3b4>)
   12f7e:	6831      	ldr	r1, [r6, #0]
   12f80:	6818      	ldr	r0, [r3, #0]
				cur = 0U;
   12f82:	f889 8000 	strb.w	r8, [r9]
				end = 0U;
   12f86:	f884 8000 	strb.w	r8, [r4]
				k_fifo_put(lines_queue, cmd);
   12f8a:	f006 fb5e 	bl	1964a <k_queue_append>
				cmd = NULL;
   12f8e:	f8c6 8000 	str.w	r8, [r6]
				break;
   12f92:	e669      	b.n	12c68 <uart_console_isr+0x8>
		if (cur + end < sizeof(cmd->line) - 1) {
   12f94:	4b1e      	ldr	r3, [pc, #120]	; (13010 <uart_console_isr+0x3b0>)
   12f96:	4a1d      	ldr	r2, [pc, #116]	; (1300c <uart_console_isr+0x3ac>)
   12f98:	781c      	ldrb	r4, [r3, #0]
   12f9a:	f892 8000 	ldrb.w	r8, [r2]
   12f9e:	eb04 0308 	add.w	r3, r4, r8
   12fa2:	2b7e      	cmp	r3, #126	; 0x7e
   12fa4:	f73f ae60 	bgt.w	12c68 <uart_console_isr+0x8>
			insert_char(&cmd->line[cur++], byte, end);
   12fa8:	f8d6 9000 	ldr.w	r9, [r6]
	uart_poll_out(uart_console_dev, c);
   12fac:	6838      	ldr	r0, [r7, #0]
			insert_char(&cmd->line[cur++], byte, end);
   12fae:	f108 0301 	add.w	r3, r8, #1
	uart_poll_out(uart_console_dev, c);
   12fb2:	4629      	mov	r1, r5
			insert_char(&cmd->line[cur++], byte, end);
   12fb4:	7013      	strb	r3, [r2, #0]
	uart_poll_out(uart_console_dev, c);
   12fb6:	f005 fe8f 	bl	18cd8 <uart_poll_out>
	if (end == 0U) {
   12fba:	eb09 0208 	add.w	r2, r9, r8
   12fbe:	b90c      	cbnz	r4, 12fc4 <uart_console_isr+0x364>
		*pos = c;
   12fc0:	7155      	strb	r5, [r2, #5]
		return;
   12fc2:	e651      	b.n	12c68 <uart_console_isr+0x8>
	tmp = *pos;
   12fc4:	f892 a005 	ldrb.w	sl, [r2, #5]
	printk("\x1b[s");
   12fc8:	4813      	ldr	r0, [pc, #76]	; (13018 <uart_console_isr+0x3b8>)
	*(pos++) = c;
   12fca:	7155      	strb	r5, [r2, #5]
   12fcc:	f108 0306 	add.w	r3, r8, #6
   12fd0:	4499      	add	r9, r3
	printk("\x1b[s");
   12fd2:	f002 fe78 	bl	15cc6 <printk>
		uart_poll_out(uart_console_dev, tmp);
   12fd6:	4651      	mov	r1, sl
   12fd8:	6838      	ldr	r0, [r7, #0]
   12fda:	3c01      	subs	r4, #1
   12fdc:	f005 fe7c 	bl	18cd8 <uart_poll_out>
		c = *pos;
   12fe0:	4653      	mov	r3, sl
	while (end-- > 0) {
   12fe2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		c = *pos;
   12fe6:	f899 a000 	ldrb.w	sl, [r9]
		*(pos++) = tmp;
   12fea:	f809 3b01 	strb.w	r3, [r9], #1
	while (end-- > 0) {
   12fee:	d1f2      	bne.n	12fd6 <uart_console_isr+0x376>
	printk("\x1b[u");
   12ff0:	480a      	ldr	r0, [pc, #40]	; (1301c <uart_console_isr+0x3bc>)
   12ff2:	f002 fe68 	bl	15cc6 <printk>
}
   12ff6:	e637      	b.n	12c68 <uart_console_isr+0x8>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   12ff8:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
   12ffa:	2800      	cmp	r0, #0
   12ffc:	f47f ae3a 	bne.w	12c74 <uart_console_isr+0x14>
   13000:	e649      	b.n	12c96 <uart_console_isr+0x36>
	return api->irq_is_pending(dev);
   13002:	4798      	blx	r3
   13004:	2800      	cmp	r0, #0
   13006:	f47f ae3b 	bne.w	12c80 <uart_console_isr+0x20>
   1300a:	e644      	b.n	12c96 <uart_console_isr+0x36>
   1300c:	20002240 	.word	0x20002240
   13010:	20002241 	.word	0x20002241
   13014:	200020a8 	.word	0x200020a8
   13018:	0001b512 	.word	0x0001b512
   1301c:	0001b516 	.word	0x0001b516

00013020 <uart_register_input>:
	avail_queue = avail;
   13020:	4b17      	ldr	r3, [pc, #92]	; (13080 <uart_register_input+0x60>)
{
   13022:	b513      	push	{r0, r1, r4, lr}
	avail_queue = avail;
   13024:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
   13026:	4b17      	ldr	r3, [pc, #92]	; (13084 <uart_register_input+0x64>)
	uart_irq_rx_disable(uart_console_dev);
   13028:	4c17      	ldr	r4, [pc, #92]	; (13088 <uart_register_input+0x68>)
	lines_queue = lines;
   1302a:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
   1302c:	4b17      	ldr	r3, [pc, #92]	; (1308c <uart_register_input+0x6c>)
	uart_irq_rx_disable(uart_console_dev);
   1302e:	6820      	ldr	r0, [r4, #0]
	completion_cb = completion;
   13030:	601a      	str	r2, [r3, #0]
   13032:	f005 fe4c 	bl	18cce <z_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(uart_console_dev);
   13036:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_disable != NULL) {
   13038:	6883      	ldr	r3, [r0, #8]
   1303a:	6a1b      	ldr	r3, [r3, #32]
   1303c:	b103      	cbz	r3, 13040 <uart_register_input+0x20>
		api->irq_tx_disable(dev);
   1303e:	4798      	blx	r3
	uart_irq_callback_set(uart_console_dev, uart_console_isr);
   13040:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   13042:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   13044:	b123      	cbz	r3, 13050 <uart_register_input+0x30>
   13046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13048:	b113      	cbz	r3, 13050 <uart_register_input+0x30>
		api->irq_callback_set(dev, cb, user_data);
   1304a:	4911      	ldr	r1, [pc, #68]	; (13090 <uart_register_input+0x70>)
   1304c:	2200      	movs	r2, #0
   1304e:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
   13050:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
   13052:	6883      	ldr	r3, [r0, #8]
   13054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13056:	b143      	cbz	r3, 1306a <uart_register_input+0x4a>
	return api->irq_rx_ready(dev);
   13058:	4798      	blx	r3
   1305a:	b930      	cbnz	r0, 1306a <uart_register_input+0x4a>
	uart_irq_rx_enable(uart_console_dev);
   1305c:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
   1305e:	6883      	ldr	r3, [r0, #8]
   13060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13062:	b103      	cbz	r3, 13066 <uart_register_input+0x46>
		api->irq_rx_enable(dev);
   13064:	4798      	blx	r3
}
   13066:	b002      	add	sp, #8
   13068:	bd10      	pop	{r4, pc}
		uart_fifo_read(uart_console_dev, &c, 1);
   1306a:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
   1306c:	6883      	ldr	r3, [r0, #8]
   1306e:	699b      	ldr	r3, [r3, #24]
   13070:	2b00      	cmp	r3, #0
   13072:	d0ed      	beq.n	13050 <uart_register_input+0x30>
	return api->fifo_read(dev, rx_data, size);
   13074:	2201      	movs	r2, #1
   13076:	f10d 0107 	add.w	r1, sp, #7
   1307a:	4798      	blx	r3
   1307c:	e7e8      	b.n	13050 <uart_register_input+0x30>
   1307e:	bf00      	nop
   13080:	20002098 	.word	0x20002098
   13084:	200020a8 	.word	0x200020a8
   13088:	200020ac 	.word	0x200020ac
   1308c:	200020a0 	.word	0x200020a0
   13090:	00012c61 	.word	0x00012c61

00013094 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   13094:	b530      	push	{r4, r5, lr}
	return port->config;
   13096:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13098:	7b04      	ldrb	r4, [r0, #12]
   1309a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1309e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   130a2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   130a6:	b085      	sub	sp, #20
   130a8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   130ac:	d104      	bne.n	130b8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   130ae:	4628      	mov	r0, r5
   130b0:	f001 fab8 	bl	14624 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   130b4:	2000      	movs	r0, #0
   130b6:	e032      	b.n	1311e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   130b8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   130bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   130c0:	d12f      	bne.n	13122 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   130c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   130c6:	bf0c      	ite	eq
   130c8:	2304      	moveq	r3, #4
   130ca:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   130cc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   130d0:	6883      	ldr	r3, [r0, #8]
   130d2:	fa23 f101 	lsr.w	r1, r3, r1
   130d6:	07c9      	lsls	r1, r1, #31
   130d8:	d42f      	bmi.n	1313a <gpio_nrfx_pin_interrupt_configure+0xa6>
   130da:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   130de:	d12c      	bne.n	1313a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   130e0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   130e2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   130e4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   130e8:	4a1c      	ldr	r2, [pc, #112]	; (1315c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   130ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   130ee:	bf18      	it	ne
   130f0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   130f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   130f8:	07db      	lsls	r3, r3, #31
   130fa:	d41e      	bmi.n	1313a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   130fc:	f10d 0407 	add.w	r4, sp, #7
   13100:	4621      	mov	r1, r4
   13102:	4628      	mov	r0, r5
   13104:	f001 f9f2 	bl	144ec <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   13108:	4b15      	ldr	r3, [pc, #84]	; (13160 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   1310a:	4298      	cmp	r0, r3
   1310c:	d114      	bne.n	13138 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   1310e:	4620      	mov	r0, r4
   13110:	f001 fa3a 	bl	14588 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   13114:	4b13      	ldr	r3, [pc, #76]	; (13164 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   13116:	4298      	cmp	r0, r3
   13118:	d00e      	beq.n	13138 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   1311a:	f06f 000b 	mvn.w	r0, #11
}
   1311e:	b005      	add	sp, #20
   13120:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13122:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   13126:	d005      	beq.n	13134 <gpio_nrfx_pin_interrupt_configure+0xa0>
   13128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1312c:	bf0c      	ite	eq
   1312e:	2302      	moveq	r3, #2
   13130:	2301      	movne	r3, #1
   13132:	e7cb      	b.n	130cc <gpio_nrfx_pin_interrupt_configure+0x38>
   13134:	2303      	movs	r3, #3
   13136:	e7c9      	b.n	130cc <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   13138:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1313a:	2300      	movs	r3, #0
   1313c:	4619      	mov	r1, r3
   1313e:	aa02      	add	r2, sp, #8
   13140:	4628      	mov	r0, r5
   13142:	f001 f8ad 	bl	142a0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13146:	4b07      	ldr	r3, [pc, #28]	; (13164 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   13148:	4298      	cmp	r0, r3
   1314a:	d104      	bne.n	13156 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1314c:	2101      	movs	r1, #1
   1314e:	4628      	mov	r0, r5
   13150:	f001 fa20 	bl	14594 <nrfx_gpiote_trigger_enable>
   13154:	e7ae      	b.n	130b4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   13156:	f06f 0004 	mvn.w	r0, #4
   1315a:	e7e0      	b.n	1311e <gpio_nrfx_pin_interrupt_configure+0x8a>
   1315c:	50000300 	.word	0x50000300
   13160:	0bad0004 	.word	0x0bad0004
   13164:	0bad0000 	.word	0x0bad0000

00013168 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13168:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1316a:	f001 f9fd 	bl	14568 <nrfx_gpiote_is_init>
   1316e:	4604      	mov	r4, r0
   13170:	b968      	cbnz	r0, 1318e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   13172:	f001 f9d1 	bl	14518 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   13176:	4b08      	ldr	r3, [pc, #32]	; (13198 <gpio_nrfx_init+0x30>)
   13178:	4298      	cmp	r0, r3
   1317a:	d10a      	bne.n	13192 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1317c:	4807      	ldr	r0, [pc, #28]	; (1319c <gpio_nrfx_init+0x34>)
   1317e:	4621      	mov	r1, r4
   13180:	f001 f9ae 	bl	144e0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13184:	4622      	mov	r2, r4
   13186:	2105      	movs	r1, #5
   13188:	2006      	movs	r0, #6
   1318a:	f7f0 fea1 	bl	3ed0 <z_arm_irq_priority_set>
		return 0;
   1318e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   13190:	bd10      	pop	{r4, pc}
		return -EIO;
   13192:	f06f 0004 	mvn.w	r0, #4
   13196:	e7fb      	b.n	13190 <gpio_nrfx_init+0x28>
   13198:	0bad0000 	.word	0x0bad0000
   1319c:	000131a1 	.word	0x000131a1

000131a0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   131a0:	0942      	lsrs	r2, r0, #5
{
   131a2:	b570      	push	{r4, r5, r6, lr}
   131a4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   131a6:	d002      	beq.n	131ae <nrfx_gpio_handler+0xe>
   131a8:	2a01      	cmp	r2, #1
   131aa:	d015      	beq.n	131d8 <nrfx_gpio_handler+0x38>
}
   131ac:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   131ae:	4e0b      	ldr	r6, [pc, #44]	; (131dc <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   131b0:	6932      	ldr	r2, [r6, #16]
   131b2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   131b4:	2900      	cmp	r1, #0
   131b6:	d0f9      	beq.n	131ac <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   131b8:	f003 031f 	and.w	r3, r3, #31
   131bc:	2501      	movs	r5, #1
   131be:	680c      	ldr	r4, [r1, #0]
   131c0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   131c2:	688a      	ldr	r2, [r1, #8]
   131c4:	402a      	ands	r2, r5
   131c6:	d002      	beq.n	131ce <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   131c8:	684b      	ldr	r3, [r1, #4]
   131ca:	4630      	mov	r0, r6
   131cc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   131ce:	2c00      	cmp	r4, #0
   131d0:	d0ec      	beq.n	131ac <nrfx_gpio_handler+0xc>
   131d2:	4621      	mov	r1, r4
   131d4:	6824      	ldr	r4, [r4, #0]
   131d6:	e7f4      	b.n	131c2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   131d8:	4e01      	ldr	r6, [pc, #4]	; (131e0 <nrfx_gpio_handler+0x40>)
   131da:	e7e9      	b.n	131b0 <nrfx_gpio_handler+0x10>
   131dc:	00019efc 	.word	0x00019efc
   131e0:	00019f14 	.word	0x00019f14

000131e4 <gpio_nrfx_pin_configure>:
{
   131e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   131e8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   131ea:	7b3b      	ldrb	r3, [r7, #12]
   131ec:	f001 051f 	and.w	r5, r1, #31
{
   131f0:	b085      	sub	sp, #20
   131f2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   131f4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   131f8:	4614      	mov	r4, r2
   131fa:	b9ca      	cbnz	r2, 13230 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   131fc:	a902      	add	r1, sp, #8
   131fe:	4628      	mov	r0, r5
   13200:	f001 f974 	bl	144ec <nrfx_gpiote_channel_get>
   13204:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   13206:	4628      	mov	r0, r5
   13208:	f001 fa34 	bl	14674 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1320c:	4b4a      	ldr	r3, [pc, #296]	; (13338 <gpio_nrfx_pin_configure+0x154>)
   1320e:	4298      	cmp	r0, r3
   13210:	d004      	beq.n	1321c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   13212:	f06f 0004 	mvn.w	r0, #4
}
   13216:	b005      	add	sp, #20
   13218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1321c:	4284      	cmp	r4, r0
   1321e:	d105      	bne.n	1322c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   13220:	f89d 0008 	ldrb.w	r0, [sp, #8]
   13224:	f001 f9aa 	bl	1457c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   13228:	42a0      	cmp	r0, r4
   1322a:	d1f2      	bne.n	13212 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1322c:	2000      	movs	r0, #0
   1322e:	e7f2      	b.n	13216 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   13230:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13234:	f10d 0103 	add.w	r1, sp, #3
   13238:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1323a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1323e:	f001 f955 	bl	144ec <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13242:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   13244:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13246:	aa02      	add	r2, sp, #8
   13248:	4649      	mov	r1, r9
   1324a:	4628      	mov	r0, r5
   1324c:	f001 f828 	bl	142a0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13250:	4b39      	ldr	r3, [pc, #228]	; (13338 <gpio_nrfx_pin_configure+0x154>)
   13252:	4298      	cmp	r0, r3
   13254:	d002      	beq.n	1325c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   13256:	f06f 0015 	mvn.w	r0, #21
   1325a:	e7dc      	b.n	13216 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1325c:	4580      	cmp	r8, r0
   1325e:	d103      	bne.n	13268 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   13260:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13264:	f001 f98a 	bl	1457c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   13268:	03a3      	lsls	r3, r4, #14
   1326a:	d551      	bpl.n	13310 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1326c:	f240 6306 	movw	r3, #1542	; 0x606
   13270:	4023      	ands	r3, r4
   13272:	f240 2206 	movw	r2, #518	; 0x206
   13276:	4293      	cmp	r3, r2
   13278:	d03b      	beq.n	132f2 <gpio_nrfx_pin_configure+0x10e>
   1327a:	d80c      	bhi.n	13296 <gpio_nrfx_pin_configure+0xb2>
   1327c:	2b06      	cmp	r3, #6
   1327e:	d015      	beq.n	132ac <gpio_nrfx_pin_configure+0xc8>
   13280:	d804      	bhi.n	1328c <gpio_nrfx_pin_configure+0xa8>
   13282:	b19b      	cbz	r3, 132ac <gpio_nrfx_pin_configure+0xc8>
   13284:	2b02      	cmp	r3, #2
   13286:	d1e6      	bne.n	13256 <gpio_nrfx_pin_configure+0x72>
   13288:	2304      	movs	r3, #4
   1328a:	e00f      	b.n	132ac <gpio_nrfx_pin_configure+0xc8>
   1328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13290:	d1e1      	bne.n	13256 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   13292:	2301      	movs	r3, #1
   13294:	e00a      	b.n	132ac <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   13296:	f240 4202 	movw	r2, #1026	; 0x402
   1329a:	4293      	cmp	r3, r2
   1329c:	d02b      	beq.n	132f6 <gpio_nrfx_pin_configure+0x112>
   1329e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   132a2:	d02a      	beq.n	132fa <gpio_nrfx_pin_configure+0x116>
   132a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   132a8:	d1d5      	bne.n	13256 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   132aa:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   132ac:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   132b0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   132b4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   132b8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   132ba:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   132be:	bf54      	ite	pl
   132c0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   132c4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   132c6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   132c8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   132cc:	d517      	bpl.n	132fe <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   132ce:	687b      	ldr	r3, [r7, #4]
   132d0:	2101      	movs	r1, #1
   132d2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   132d6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   132da:	2200      	movs	r2, #0
   132dc:	a901      	add	r1, sp, #4
   132de:	4628      	mov	r0, r5
   132e0:	f001 f88c 	bl	143fc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   132e4:	4b14      	ldr	r3, [pc, #80]	; (13338 <gpio_nrfx_pin_configure+0x154>)
   132e6:	4298      	cmp	r0, r3
   132e8:	bf14      	ite	ne
   132ea:	f06f 0015 	mvnne.w	r0, #21
   132ee:	2000      	moveq	r0, #0
   132f0:	e791      	b.n	13216 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   132f2:	2307      	movs	r3, #7
   132f4:	e7da      	b.n	132ac <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   132f6:	2305      	movs	r3, #5
   132f8:	e7d8      	b.n	132ac <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   132fa:	2303      	movs	r3, #3
   132fc:	e7d6      	b.n	132ac <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   132fe:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   13300:	bf41      	itttt	mi
   13302:	687b      	ldrmi	r3, [r7, #4]
   13304:	2101      	movmi	r1, #1
   13306:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1330a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1330e:	e7e4      	b.n	132da <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   13310:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13312:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   13316:	bf54      	ite	pl
   13318:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1331c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1331e:	461a      	mov	r2, r3
   13320:	a901      	add	r1, sp, #4
   13322:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   13324:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13328:	f000 ffba 	bl	142a0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1332c:	4b02      	ldr	r3, [pc, #8]	; (13338 <gpio_nrfx_pin_configure+0x154>)
   1332e:	4298      	cmp	r0, r3
   13330:	f43f af7c 	beq.w	1322c <gpio_nrfx_pin_configure+0x48>
   13334:	e78f      	b.n	13256 <gpio_nrfx_pin_configure+0x72>
   13336:	bf00      	nop
   13338:	0bad0000 	.word	0x0bad0000

0001333c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1333c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1333e:	794b      	ldrb	r3, [r1, #5]
   13340:	2b01      	cmp	r3, #1
   13342:	d026      	beq.n	13392 <uarte_nrfx_configure+0x56>
   13344:	2b03      	cmp	r3, #3
   13346:	d121      	bne.n	1338c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   13348:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1334a:	798b      	ldrb	r3, [r1, #6]
   1334c:	2b03      	cmp	r3, #3
   1334e:	d11d      	bne.n	1338c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13350:	79cc      	ldrb	r4, [r1, #7]
   13352:	b10c      	cbz	r4, 13358 <uarte_nrfx_configure+0x1c>
   13354:	2c01      	cmp	r4, #1
   13356:	d119      	bne.n	1338c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13358:	790a      	ldrb	r2, [r1, #4]
   1335a:	b112      	cbz	r2, 13362 <uarte_nrfx_configure+0x26>
   1335c:	2a02      	cmp	r2, #2
   1335e:	d115      	bne.n	1338c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   13360:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13362:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   13364:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   13366:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1336a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1336c:	d065      	beq.n	1343a <uarte_nrfx_configure+0xfe>
   1336e:	d82d      	bhi.n	133cc <uarte_nrfx_configure+0x90>
   13370:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   13374:	d064      	beq.n	13440 <uarte_nrfx_configure+0x104>
   13376:	d816      	bhi.n	133a6 <uarte_nrfx_configure+0x6a>
   13378:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1337c:	d062      	beq.n	13444 <uarte_nrfx_configure+0x108>
   1337e:	d80a      	bhi.n	13396 <uarte_nrfx_configure+0x5a>
   13380:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   13384:	d061      	beq.n	1344a <uarte_nrfx_configure+0x10e>
   13386:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1338a:	d061      	beq.n	13450 <uarte_nrfx_configure+0x114>
   1338c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13390:	e052      	b.n	13438 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   13392:	2600      	movs	r6, #0
   13394:	e7d9      	b.n	1334a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   13396:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1339a:	d05c      	beq.n	13456 <uarte_nrfx_configure+0x11a>
   1339c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   133a0:	d1f4      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   133a2:	4b37      	ldr	r3, [pc, #220]	; (13480 <uarte_nrfx_configure+0x144>)
   133a4:	e03c      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   133a6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   133aa:	d057      	beq.n	1345c <uarte_nrfx_configure+0x120>
   133ac:	d807      	bhi.n	133be <uarte_nrfx_configure+0x82>
   133ae:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   133b2:	d055      	beq.n	13460 <uarte_nrfx_configure+0x124>
   133b4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   133b8:	d1e8      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   133ba:	4b32      	ldr	r3, [pc, #200]	; (13484 <uarte_nrfx_configure+0x148>)
   133bc:	e030      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   133be:	f647 2712 	movw	r7, #31250	; 0x7a12
   133c2:	42bb      	cmp	r3, r7
   133c4:	d1e2      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   133c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   133ca:	e029      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   133cc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   133d0:	d048      	beq.n	13464 <uarte_nrfx_configure+0x128>
   133d2:	d813      	bhi.n	133fc <uarte_nrfx_configure+0xc0>
   133d4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   133d8:	d047      	beq.n	1346a <uarte_nrfx_configure+0x12e>
   133da:	d809      	bhi.n	133f0 <uarte_nrfx_configure+0xb4>
   133dc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   133e0:	42bb      	cmp	r3, r7
   133e2:	d044      	beq.n	1346e <uarte_nrfx_configure+0x132>
   133e4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   133e8:	d1d0      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   133ea:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   133ee:	e017      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   133f0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   133f4:	d1ca      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   133f6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   133fa:	e011      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   133fc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   13400:	d038      	beq.n	13474 <uarte_nrfx_configure+0x138>
   13402:	d808      	bhi.n	13416 <uarte_nrfx_configure+0xda>
   13404:	4f20      	ldr	r7, [pc, #128]	; (13488 <uarte_nrfx_configure+0x14c>)
   13406:	42bb      	cmp	r3, r7
   13408:	d037      	beq.n	1347a <uarte_nrfx_configure+0x13e>
   1340a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1340e:	d1bd      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   13410:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13414:	e004      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   13416:	4f1d      	ldr	r7, [pc, #116]	; (1348c <uarte_nrfx_configure+0x150>)
   13418:	42bb      	cmp	r3, r7
   1341a:	d1b7      	bne.n	1338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1341c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   13420:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13422:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   13426:	1d03      	adds	r3, r0, #4
   13428:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1342a:	4334      	orrs	r4, r6
   1342c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1342e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   13432:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   13436:	2000      	movs	r0, #0
}
   13438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1343a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1343e:	e7ef      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   13440:	4b13      	ldr	r3, [pc, #76]	; (13490 <uarte_nrfx_configure+0x154>)
   13442:	e7ed      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13444:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13448:	e7ea      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1344a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1344e:	e7e7      	b.n	13420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   13450:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   13454:	e7e4      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13456:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1345a:	e7e1      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1345c:	4b0d      	ldr	r3, [pc, #52]	; (13494 <uarte_nrfx_configure+0x158>)
   1345e:	e7df      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13460:	4b0d      	ldr	r3, [pc, #52]	; (13498 <uarte_nrfx_configure+0x15c>)
   13462:	e7dd      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   13464:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   13468:	e7da      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1346a:	4b0c      	ldr	r3, [pc, #48]	; (1349c <uarte_nrfx_configure+0x160>)
   1346c:	e7d8      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1346e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   13472:	e7d5      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   13474:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13478:	e7d2      	b.n	13420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1347a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1347e:	e7cf      	b.n	13420 <uarte_nrfx_configure+0xe4>
   13480:	0013b000 	.word	0x0013b000
   13484:	004ea000 	.word	0x004ea000
   13488:	0003d090 	.word	0x0003d090
   1348c:	000f4240 	.word	0x000f4240
   13490:	00275000 	.word	0x00275000
   13494:	0075c000 	.word	0x0075c000
   13498:	003af000 	.word	0x003af000
   1349c:	013a9000 	.word	0x013a9000

000134a0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   134a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   134a4:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   134a8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   134aa:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   134ae:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   134b2:	2100      	movs	r1, #0
   134b4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   134b8:	4607      	mov	r7, r0
	data->dev = dev;
   134ba:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   134bc:	aa01      	add	r2, sp, #4
   134be:	4648      	mov	r0, r9
   134c0:	f005 fdff 	bl	190c2 <pinctrl_lookup_state>
	if (ret < 0) {
   134c4:	1e05      	subs	r5, r0, #0
   134c6:	db55      	blt.n	13574 <uarte_instance_init.constprop.0+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   134c8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   134ca:	f8d9 2000 	ldr.w	r2, [r9]
   134ce:	7919      	ldrb	r1, [r3, #4]
   134d0:	6818      	ldr	r0, [r3, #0]
   134d2:	f005 fe13 	bl	190fc <pinctrl_configure_pins>
	if (err < 0) {
   134d6:	1e05      	subs	r5, r0, #0
   134d8:	db4c      	blt.n	13574 <uarte_instance_init.constprop.0+0xd4>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   134da:	1d31      	adds	r1, r6, #4
   134dc:	4638      	mov	r0, r7
   134de:	f7ff ff2d 	bl	1333c <uarte_nrfx_configure>
	if (err) {
   134e2:	4605      	mov	r5, r0
   134e4:	2800      	cmp	r0, #0
   134e6:	d145      	bne.n	13574 <uarte_instance_init.constprop.0+0xd4>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   134e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   134ec:	0799      	lsls	r1, r3, #30
   134ee:	d519      	bpl.n	13524 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   134f0:	f106 001c 	add.w	r0, r6, #28
   134f4:	f001 f9b8 	bl	14868 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   134f8:	4b22      	ldr	r3, [pc, #136]	; (13584 <uarte_instance_init.constprop.0+0xe4>)
   134fa:	4298      	cmp	r0, r3
   134fc:	d13e      	bne.n	1357c <uarte_instance_init.constprop.0+0xdc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   134fe:	7f30      	ldrb	r0, [r6, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   13500:	00c3      	lsls	r3, r0, #3
   13502:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13506:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1350a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1350e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13512:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13516:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1351a:	4a1b      	ldr	r2, [pc, #108]	; (13588 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1351c:	2301      	movs	r3, #1
   1351e:	4083      	lsls	r3, r0
   13520:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13524:	2308      	movs	r3, #8
   13526:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1352a:	f898 3008 	ldrb.w	r3, [r8, #8]
   1352e:	b953      	cbnz	r3, 13546 <uarte_instance_init.constprop.0+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13530:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   13534:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13538:	69b3      	ldr	r3, [r6, #24]
   1353a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1353e:	2301      	movs	r3, #1
   13540:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13544:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   13546:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1354a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1354c:	bf5c      	itt	pl
   1354e:	f44f 7280 	movpl.w	r2, #256	; 0x100
   13552:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13556:	06db      	lsls	r3, r3, #27
   13558:	bf44      	itt	mi
   1355a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1355e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13562:	6973      	ldr	r3, [r6, #20]
   13564:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13568:	2300      	movs	r3, #0
   1356a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1356e:	2301      	movs	r3, #1
   13570:	60a3      	str	r3, [r4, #8]
   13572:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   13574:	4628      	mov	r0, r5
   13576:	b003      	add	sp, #12
   13578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1357c:	f06f 0504 	mvn.w	r5, #4
   13580:	e7f8      	b.n	13574 <uarte_instance_init.constprop.0+0xd4>
   13582:	bf00      	nop
   13584:	0bad0000 	.word	0x0bad0000
   13588:	4001f000 	.word	0x4001f000

0001358c <uarte_nrfx_poll_out>:
{
   1358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1358e:	6907      	ldr	r7, [r0, #16]
{
   13590:	4605      	mov	r5, r0
   13592:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13594:	f005 ffcb 	bl	1952e <k_is_in_isr>
   13598:	b910      	cbnz	r0, 135a0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1359a:	4b20      	ldr	r3, [pc, #128]	; (1361c <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
   1359c:	781b      	ldrb	r3, [r3, #0]
   1359e:	b983      	cbnz	r3, 135c2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   135a0:	f04f 0320 	mov.w	r3, #32
   135a4:	f3ef 8411 	mrs	r4, BASEPRI
   135a8:	f383 8812 	msr	BASEPRI_MAX, r3
   135ac:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   135b0:	6868      	ldr	r0, [r5, #4]
   135b2:	f005 fcbe 	bl	18f32 <is_tx_ready.isra.0>
   135b6:	bb28      	cbnz	r0, 13604 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   135b8:	f384 8811 	msr	BASEPRI, r4
   135bc:	f3bf 8f6f 	isb	sy
}
   135c0:	e7ee      	b.n	135a0 <uarte_nrfx_poll_out+0x14>
{
   135c2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   135c4:	6868      	ldr	r0, [r5, #4]
   135c6:	f005 fcb4 	bl	18f32 <is_tx_ready.isra.0>
   135ca:	b970      	cbnz	r0, 135ea <uarte_nrfx_poll_out+0x5e>
   135cc:	2001      	movs	r0, #1
   135ce:	f005 fe3e 	bl	1924e <nrfx_busy_wait>
   135d2:	3c01      	subs	r4, #1
   135d4:	d1f6      	bne.n	135c4 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   135d6:	2100      	movs	r1, #0
   135d8:	2021      	movs	r0, #33	; 0x21
   135da:	f002 f89d 	bl	15718 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   135de:	e7f0      	b.n	135c2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   135e0:	f384 8811 	msr	BASEPRI, r4
   135e4:	f3bf 8f6f 	isb	sy
}
   135e8:	e7f5      	b.n	135d6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   135ea:	f04f 0320 	mov.w	r3, #32
   135ee:	f3ef 8411 	mrs	r4, BASEPRI
   135f2:	f383 8812 	msr	BASEPRI_MAX, r3
   135f6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   135fa:	6868      	ldr	r0, [r5, #4]
   135fc:	f005 fc99 	bl	18f32 <is_tx_ready.isra.0>
   13600:	2800      	cmp	r0, #0
   13602:	d0ed      	beq.n	135e0 <uarte_nrfx_poll_out+0x54>
	*data->char_out = c;
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   13608:	6979      	ldr	r1, [r7, #20]
   1360a:	6868      	ldr	r0, [r5, #4]
   1360c:	2201      	movs	r2, #1
   1360e:	f005 fc75 	bl	18efc <tx_start.isra.0>
	__asm__ volatile(
   13612:	f384 8811 	msr	BASEPRI, r4
   13616:	f3bf 8f6f 	isb	sy
}
   1361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1361c:	20002696 	.word	0x20002696

00013620 <random_byte_get>:
	__asm__ volatile(
   13620:	f04f 0320 	mov.w	r3, #32
   13624:	f3ef 8211 	mrs	r2, BASEPRI
   13628:	f383 8812 	msr	BASEPRI_MAX, r3
   1362c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   13630:	4b09      	ldr	r3, [pc, #36]	; (13658 <random_byte_get+0x38>)
   13632:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   13636:	b161      	cbz	r1, 13652 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13638:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1363a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1363e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   13642:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   13646:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   13648:	f382 8811 	msr	BASEPRI, r2
   1364c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   13650:	4770      	bx	lr
	int retval = -EAGAIN;
   13652:	f06f 000a 	mvn.w	r0, #10
   13656:	e7f7      	b.n	13648 <random_byte_get+0x28>
   13658:	4000d000 	.word	0x4000d000

0001365c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1365c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1365e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   13660:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   13662:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   13664:	f04f 0020 	mov.w	r0, #32
   13668:	f3ef 8e11 	mrs	lr, BASEPRI
   1366c:	f380 8812 	msr	BASEPRI_MAX, r0
   13670:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   13674:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   13676:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1367a:	1ba4      	subs	r4, r4, r6
   1367c:	403c      	ands	r4, r7
	if (available < len) {
   1367e:	42a2      	cmp	r2, r4
		len = available;
   13680:	bf88      	it	hi
   13682:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   13684:	18b0      	adds	r0, r6, r2
   13686:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   13688:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1368a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1368c:	f38e 8811 	msr	BASEPRI, lr
   13690:	f3bf 8f6f 	isb	sy
   13694:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   13696:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   13698:	4290      	cmp	r0, r2
   1369a:	d119      	bne.n	136d0 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1369c:	4566      	cmp	r6, ip
   1369e:	d10d      	bne.n	136bc <rng_pool_get+0x60>
	__asm__ volatile(
   136a0:	f04f 0520 	mov.w	r5, #32
   136a4:	f3ef 8011 	mrs	r0, BASEPRI
   136a8:	f385 8812 	msr	BASEPRI_MAX, r5
   136ac:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   136b0:	781d      	ldrb	r5, [r3, #0]
   136b2:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   136b4:	f380 8811 	msr	BASEPRI, r0
   136b8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   136bc:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   136be:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   136c0:	b290      	uxth	r0, r2
	available = available - len;
   136c2:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   136c4:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   136c6:	bf22      	ittt	cs
   136c8:	4b06      	ldrcs	r3, [pc, #24]	; (136e4 <rng_pool_get+0x88>)
   136ca:	2201      	movcs	r2, #1
   136cc:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   136ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   136d0:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   136d4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   136d6:	f89e e005 	ldrb.w	lr, [lr, #5]
   136da:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   136de:	403d      	ands	r5, r7
   136e0:	e7da      	b.n	13698 <rng_pool_get+0x3c>
   136e2:	bf00      	nop
   136e4:	4000d000 	.word	0x4000d000

000136e8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   136e8:	43db      	mvns	r3, r3
{
   136ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   136ee:	f013 0501 	ands.w	r5, r3, #1
{
   136f2:	460e      	mov	r6, r1
   136f4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   136f6:	d004      	beq.n	13702 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   136f8:	4821      	ldr	r0, [pc, #132]	; (13780 <entropy_nrf5_get_entropy_isr+0x98>)
   136fa:	f7ff ffaf 	bl	1365c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   136fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   13702:	b3a2      	cbz	r2, 1376e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   13704:	f04f 0320 	mov.w	r3, #32
   13708:	f3ef 8811 	mrs	r8, BASEPRI
   1370c:	f383 8812 	msr	BASEPRI_MAX, r3
   13710:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   13714:	200d      	movs	r0, #13
   13716:	f7f0 fbcd 	bl	3eb4 <arch_irq_is_enabled>
   1371a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1371c:	200d      	movs	r0, #13
   1371e:	f7f0 fbb5 	bl	3e8c <arch_irq_disable>
	__asm__ volatile(
   13722:	f388 8811 	msr	BASEPRI, r8
   13726:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1372a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13784 <entropy_nrf5_get_entropy_isr+0x9c>
   1372e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 13788 <entropy_nrf5_get_entropy_isr+0xa0>
   13732:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   13736:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1373a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1373e:	2301      	movs	r3, #1
   13740:	f8c8 3000 	str.w	r3, [r8]
   13744:	4625      	mov	r5, r4
   13746:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1374a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1374e:	b183      	cbz	r3, 13772 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   13750:	f7ff ff66 	bl	13620 <random_byte_get>
			if (byte < 0) {
   13754:	1e03      	subs	r3, r0, #0
   13756:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1375a:	dbf6      	blt.n	1374a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1375c:	3d01      	subs	r5, #1
   1375e:	b2ad      	uxth	r5, r5
   13760:	5573      	strb	r3, [r6, r5]
		} while (len);
   13762:	2d00      	cmp	r5, #0
   13764:	d1f1      	bne.n	1374a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   13766:	b117      	cbz	r7, 1376e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   13768:	200d      	movs	r0, #13
   1376a:	f7f0 fb7f 	bl	3e6c <arch_irq_enable>
	return cnt;
   1376e:	4620      	mov	r0, r4
   13770:	e7c5      	b.n	136fe <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   13772:	f3bf 8f4f 	dsb	sy
				__WFE();
   13776:	bf20      	wfe
				__SEV();
   13778:	bf40      	sev
				__WFE();
   1377a:	bf20      	wfe
   1377c:	e7e5      	b.n	1374a <entropy_nrf5_get_entropy_isr+0x62>
   1377e:	bf00      	nop
   13780:	200020f8 	.word	0x200020f8
   13784:	4000d000 	.word	0x4000d000
   13788:	e000e100 	.word	0xe000e100

0001378c <entropy_nrf5_get_entropy>:
{
   1378c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   13790:	4f13      	ldr	r7, [pc, #76]	; (137e0 <entropy_nrf5_get_entropy+0x54>)
   13792:	460d      	mov	r5, r1
   13794:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   13796:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1379a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1379e:	b914      	cbnz	r4, 137a6 <entropy_nrf5_get_entropy+0x1a>
}
   137a0:	4620      	mov	r0, r4
   137a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   137a6:	f04f 33ff 	mov.w	r3, #4294967295
   137aa:	f04f 32ff 	mov.w	r2, #4294967295
   137ae:	4638      	mov	r0, r7
   137b0:	f001 fb3a 	bl	14e28 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   137b4:	4622      	mov	r2, r4
   137b6:	4629      	mov	r1, r5
   137b8:	4640      	mov	r0, r8
   137ba:	f7ff ff4f 	bl	1365c <rng_pool_get>
   137be:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   137c0:	4638      	mov	r0, r7
   137c2:	f001 fb0b 	bl	14ddc <z_impl_k_sem_give>
		if (bytes == 0U) {
   137c6:	b93e      	cbnz	r6, 137d8 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   137c8:	f04f 32ff 	mov.w	r2, #4294967295
   137cc:	f04f 33ff 	mov.w	r3, #4294967295
   137d0:	4648      	mov	r0, r9
   137d2:	f001 fb29 	bl	14e28 <z_impl_k_sem_take>
			continue;
   137d6:	e7e2      	b.n	1379e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   137d8:	1ba4      	subs	r4, r4, r6
   137da:	b2a4      	uxth	r4, r4
		buf += bytes;
   137dc:	4435      	add	r5, r6
   137de:	e7de      	b.n	1379e <entropy_nrf5_get_entropy+0x12>
   137e0:	200020c8 	.word	0x200020c8

000137e4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   137e4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   137e6:	4c19      	ldr	r4, [pc, #100]	; (1384c <entropy_nrf5_init+0x68>)
   137e8:	2201      	movs	r2, #1
   137ea:	4611      	mov	r1, r2
   137ec:	4620      	mov	r0, r4
   137ee:	f005 ff7d 	bl	196ec <z_impl_k_sem_init>
   137f2:	2201      	movs	r2, #1
   137f4:	2100      	movs	r1, #0
   137f6:	f104 0018 	add.w	r0, r4, #24
   137fa:	f005 ff77 	bl	196ec <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   137fe:	f240 4307 	movw	r3, #1031	; 0x407
   13802:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   13806:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1380a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1380c:	230c      	movs	r3, #12
   1380e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   13812:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13814:	4b0e      	ldr	r3, [pc, #56]	; (13850 <entropy_nrf5_init+0x6c>)
   13816:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1381a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1381e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13822:	f042 0201 	orr.w	r2, r2, #1
   13826:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1382a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1382c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   13830:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   13834:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   13838:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1383a:	6019      	str	r1, [r3, #0]
   1383c:	200d      	movs	r0, #13
   1383e:	f7f0 fb47 	bl	3ed0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   13842:	200d      	movs	r0, #13
   13844:	f7f0 fb12 	bl	3e6c <arch_irq_enable>

	return 0;
}
   13848:	4628      	mov	r0, r5
   1384a:	bd38      	pop	{r3, r4, r5, pc}
   1384c:	200020c8 	.word	0x200020c8
   13850:	4000d000 	.word	0x4000d000

00013854 <isr>:
{
   13854:	b510      	push	{r4, lr}
	byte = random_byte_get();
   13856:	f7ff fee3 	bl	13620 <random_byte_get>
	if (byte < 0) {
   1385a:	2800      	cmp	r0, #0
   1385c:	db20      	blt.n	138a0 <isr+0x4c>
	uint8_t last  = rngp->last;
   1385e:	4b17      	ldr	r3, [pc, #92]	; (138bc <isr+0x68>)
   13860:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   13864:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   13868:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1386c:	1a51      	subs	r1, r2, r1
   1386e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   13872:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   13874:	d10d      	bne.n	13892 <isr+0x3e>
	uint8_t last  = rngp->last;
   13876:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1387a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1387e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   13882:	1a51      	subs	r1, r2, r1
   13884:	ea34 0101 	bics.w	r1, r4, r1
   13888:	d10b      	bne.n	138a2 <isr+0x4e>
   1388a:	4b0d      	ldr	r3, [pc, #52]	; (138c0 <isr+0x6c>)
   1388c:	2201      	movs	r2, #1
   1388e:	605a      	str	r2, [r3, #4]
}
   13890:	e00e      	b.n	138b0 <isr+0x5c>
	rngp->buffer[last] = byte;
   13892:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   13894:	3201      	adds	r2, #1
   13896:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   13898:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1389c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   138a0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   138a2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   138a4:	3201      	adds	r2, #1
   138a6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   138a8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   138ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   138b0:	4804      	ldr	r0, [pc, #16]	; (138c4 <isr+0x70>)
}
   138b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   138b6:	f001 ba91 	b.w	14ddc <z_impl_k_sem_give>
   138ba:	bf00      	nop
   138bc:	200020c8 	.word	0x200020c8
   138c0:	4000d000 	.word	0x4000d000
   138c4:	200020e0 	.word	0x200020e0

000138c8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   138c8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   138ca:	2301      	movs	r3, #1
   138cc:	4083      	lsls	r3, r0
   138ce:	4a11      	ldr	r2, [pc, #68]	; (13914 <compare_int_lock+0x4c>)
   138d0:	f3bf 8f5b 	dmb	ish
   138d4:	43dc      	mvns	r4, r3
   138d6:	e852 1f00 	ldrex	r1, [r2]
   138da:	ea01 0c04 	and.w	ip, r1, r4
   138de:	e842 ce00 	strex	lr, ip, [r2]
   138e2:	f1be 0f00 	cmp.w	lr, #0
   138e6:	d1f6      	bne.n	138d6 <compare_int_lock+0xe>
   138e8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   138ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   138f0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   138f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   138f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   138fc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   13900:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13904:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   13908:	420b      	tst	r3, r1
}
   1390a:	bf14      	ite	ne
   1390c:	2001      	movne	r0, #1
   1390e:	2000      	moveq	r0, #0
   13910:	bd10      	pop	{r4, pc}
   13912:	bf00      	nop
   13914:	20002120 	.word	0x20002120

00013918 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13918:	4919      	ldr	r1, [pc, #100]	; (13980 <sys_clock_timeout_handler+0x68>)
{
   1391a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1391c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1391e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   13922:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   13924:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   13928:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1392c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1392e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   13932:	d222      	bcs.n	1397a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13934:	4b13      	ldr	r3, [pc, #76]	; (13984 <sys_clock_timeout_handler+0x6c>)
   13936:	681b      	ldr	r3, [r3, #0]
   13938:	0a1a      	lsrs	r2, r3, #8
   1393a:	061b      	lsls	r3, r3, #24
   1393c:	195e      	adds	r6, r3, r5
   1393e:	4b12      	ldr	r3, [pc, #72]	; (13988 <sys_clock_timeout_handler+0x70>)
   13940:	f142 0700 	adc.w	r7, r2, #0
   13944:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   13948:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1394a:	f002 f855 	bl	159f8 <sys_clock_announce>
    return p_reg->CC[ch];
   1394e:	00a3      	lsls	r3, r4, #2
   13950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13954:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13958:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1395c:	42aa      	cmp	r2, r5
   1395e:	d10b      	bne.n	13978 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   13960:	b91e      	cbnz	r6, 1396a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   13962:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13966:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1396a:	4b08      	ldr	r3, [pc, #32]	; (1398c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1396c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   13970:	fa00 f404 	lsl.w	r4, r0, r4
   13974:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   13978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1397a:	2600      	movs	r6, #0
   1397c:	e7e5      	b.n	1394a <sys_clock_timeout_handler+0x32>
   1397e:	bf00      	nop
   13980:	20000e28 	.word	0x20000e28
   13984:	20002124 	.word	0x20002124
   13988:	20000e10 	.word	0x20000e10
   1398c:	40011000 	.word	0x40011000

00013990 <compare_int_unlock>:
	if (key) {
   13990:	b319      	cbz	r1, 139da <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13992:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   13996:	2301      	movs	r3, #1
   13998:	4a10      	ldr	r2, [pc, #64]	; (139dc <compare_int_unlock+0x4c>)
   1399a:	4083      	lsls	r3, r0
   1399c:	e852 1f00 	ldrex	r1, [r2]
   139a0:	4319      	orrs	r1, r3
   139a2:	e842 1c00 	strex	ip, r1, [r2]
   139a6:	f1bc 0f00 	cmp.w	ip, #0
   139aa:	d1f7      	bne.n	1399c <compare_int_unlock+0xc>
   139ac:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   139b0:	4a0b      	ldr	r2, [pc, #44]	; (139e0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   139b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   139b6:	4083      	lsls	r3, r0
   139b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   139bc:	4b09      	ldr	r3, [pc, #36]	; (139e4 <compare_int_unlock+0x54>)
   139be:	f3bf 8f5b 	dmb	ish
   139c2:	681b      	ldr	r3, [r3, #0]
   139c4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   139c8:	fa23 f000 	lsr.w	r0, r3, r0
   139cc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   139ce:	bf42      	ittt	mi
   139d0:	4b05      	ldrmi	r3, [pc, #20]	; (139e8 <compare_int_unlock+0x58>)
   139d2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   139d6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   139da:	4770      	bx	lr
   139dc:	20002120 	.word	0x20002120
   139e0:	40011000 	.word	0x40011000
   139e4:	2000211c 	.word	0x2000211c
   139e8:	e000e100 	.word	0xe000e100

000139ec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   139ec:	4b0d      	ldr	r3, [pc, #52]	; (13a24 <z_nrf_rtc_timer_read+0x38>)
   139ee:	6818      	ldr	r0, [r3, #0]
   139f0:	0a01      	lsrs	r1, r0, #8
   139f2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   139f4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   139f8:	4b0b      	ldr	r3, [pc, #44]	; (13a28 <z_nrf_rtc_timer_read+0x3c>)
   139fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   139fe:	1818      	adds	r0, r3, r0
   13a00:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   13a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13a08:	d20a      	bcs.n	13a20 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   13a0a:	4b08      	ldr	r3, [pc, #32]	; (13a2c <z_nrf_rtc_timer_read+0x40>)
   13a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a10:	4290      	cmp	r0, r2
   13a12:	eb71 0303 	sbcs.w	r3, r1, r3
   13a16:	d203      	bcs.n	13a20 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   13a18:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   13a1c:	f141 0100 	adc.w	r1, r1, #0
}
   13a20:	4770      	bx	lr
   13a22:	bf00      	nop
   13a24:	20002124 	.word	0x20002124
   13a28:	40011000 	.word	0x40011000
   13a2c:	20000e10 	.word	0x20000e10

00013a30 <compare_set>:
{
   13a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a34:	b085      	sub	sp, #20
   13a36:	4616      	mov	r6, r2
   13a38:	4698      	mov	r8, r3
   13a3a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   13a3c:	f7ff ff44 	bl	138c8 <compare_int_lock>
   13a40:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   13a42:	f7ff ffd3 	bl	139ec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   13a46:	42b0      	cmp	r0, r6
   13a48:	eb71 0308 	sbcs.w	r3, r1, r8
   13a4c:	d278      	bcs.n	13b40 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   13a4e:	4b46      	ldr	r3, [pc, #280]	; (13b68 <compare_set+0x138>)
   13a50:	1a30      	subs	r0, r6, r0
   13a52:	eb68 0101 	sbc.w	r1, r8, r1
   13a56:	4298      	cmp	r0, r3
   13a58:	f171 0300 	sbcs.w	r3, r1, #0
   13a5c:	f080 8081 	bcs.w	13b62 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   13a60:	4b42      	ldr	r3, [pc, #264]	; (13b6c <compare_set+0x13c>)
   13a62:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   13a66:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   13a6a:	45d8      	cmp	r8, fp
   13a6c:	bf08      	it	eq
   13a6e:	4556      	cmpeq	r6, sl
   13a70:	d051      	beq.n	13b16 <compare_set+0xe6>
   13a72:	ea4f 0985 	mov.w	r9, r5, lsl #2
   13a76:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13a7a:	f105 0750 	add.w	r7, r5, #80	; 0x50
   13a7e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   13a82:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13a84:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   13a88:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a8c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   13a8e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   13a92:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13a96:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   13a98:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   13a9c:	4b34      	ldr	r3, [pc, #208]	; (13b70 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a9e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   13aa2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   13aa4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13aa8:	1a40      	subs	r0, r0, r1
   13aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13aae:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   13ab2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   13ab4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   13ab8:	d107      	bne.n	13aca <compare_set+0x9a>
   13aba:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   13abe:	2013      	movs	r0, #19
   13ac0:	f006 f850 	bl	19b64 <z_impl_k_busy_wait>
   13ac4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   13ac8:	4b29      	ldr	r3, [pc, #164]	; (13b70 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   13aca:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   13ace:	eba4 000c 	sub.w	r0, r4, ip
   13ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   13ad6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13ada:	bf88      	it	hi
   13adc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13ade:	2000      	movs	r0, #0
   13ae0:	6038      	str	r0, [r7, #0]
   13ae2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   13ae4:	9801      	ldr	r0, [sp, #4]
   13ae6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13aea:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   13aee:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   13af2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13af6:	4281      	cmp	r1, r0
   13af8:	d006      	beq.n	13b08 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   13afa:	1a20      	subs	r0, r4, r0
   13afc:	3802      	subs	r0, #2
   13afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   13b02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13b06:	d819      	bhi.n	13b3c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   13b08:	1aa4      	subs	r4, r4, r2
   13b0a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   13b0e:	eb14 0a06 	adds.w	sl, r4, r6
   13b12:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   13b16:	4915      	ldr	r1, [pc, #84]	; (13b6c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   13b18:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   13b1a:	012b      	lsls	r3, r5, #4
   13b1c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   13b20:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   13b24:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   13b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13b28:	6053      	str	r3, [r2, #4]
	return ret;
   13b2a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   13b2c:	4628      	mov	r0, r5
   13b2e:	9900      	ldr	r1, [sp, #0]
   13b30:	f7ff ff2e 	bl	13990 <compare_int_unlock>
}
   13b34:	4620      	mov	r0, r4
   13b36:	b005      	add	sp, #20
   13b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b3c:	4620      	mov	r0, r4
   13b3e:	e7b1      	b.n	13aa4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   13b40:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b42:	4a0c      	ldr	r2, [pc, #48]	; (13b74 <compare_set+0x144>)
   13b44:	f3bf 8f5b 	dmb	ish
   13b48:	40ab      	lsls	r3, r5
   13b4a:	e852 1f00 	ldrex	r1, [r2]
   13b4e:	4319      	orrs	r1, r3
   13b50:	e842 1000 	strex	r0, r1, [r2]
   13b54:	2800      	cmp	r0, #0
   13b56:	d1f8      	bne.n	13b4a <compare_set+0x11a>
   13b58:	f3bf 8f5b 	dmb	ish
   13b5c:	46b2      	mov	sl, r6
   13b5e:	46c3      	mov	fp, r8
   13b60:	e7d9      	b.n	13b16 <compare_set+0xe6>
			return -EINVAL;
   13b62:	f06f 0415 	mvn.w	r4, #21
   13b66:	e7e1      	b.n	13b2c <compare_set+0xfc>
   13b68:	01000001 	.word	0x01000001
   13b6c:	20000e18 	.word	0x20000e18
   13b70:	40011000 	.word	0x40011000
   13b74:	2000211c 	.word	0x2000211c

00013b78 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   13b78:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   13b7a:	4b19      	ldr	r3, [pc, #100]	; (13be0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   13b7c:	4d19      	ldr	r5, [pc, #100]	; (13be4 <sys_clock_driver_init+0x6c>)
   13b7e:	2400      	movs	r4, #0
   13b80:	f04f 30ff 	mov.w	r0, #4294967295
   13b84:	f04f 31ff 	mov.w	r1, #4294967295
   13b88:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   13b8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   13b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13b94:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13b98:	4b13      	ldr	r3, [pc, #76]	; (13be8 <sys_clock_driver_init+0x70>)
   13b9a:	2602      	movs	r6, #2
   13b9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13ba0:	2101      	movs	r1, #1
   13ba2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   13ba6:	2011      	movs	r0, #17
   13ba8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13bac:	4622      	mov	r2, r4
   13bae:	f7f0 f98f 	bl	3ed0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   13bb2:	2011      	movs	r0, #17
   13bb4:	f7f0 f95a 	bl	3e6c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13bb8:	4a0c      	ldr	r2, [pc, #48]	; (13bec <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13bba:	2301      	movs	r3, #1
   13bbc:	60ab      	str	r3, [r5, #8]
   13bbe:	602b      	str	r3, [r5, #0]
   13bc0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   13bc2:	4b0b      	ldr	r3, [pc, #44]	; (13bf0 <sys_clock_driver_init+0x78>)
   13bc4:	4a0b      	ldr	r2, [pc, #44]	; (13bf4 <sys_clock_driver_init+0x7c>)
   13bc6:	9300      	str	r3, [sp, #0]
   13bc8:	9401      	str	r4, [sp, #4]
   13bca:	2300      	movs	r3, #0
   13bcc:	4620      	mov	r0, r4
   13bce:	f7ff ff2f 	bl	13a30 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   13bd2:	4630      	mov	r0, r6
   13bd4:	f7fe ff6c 	bl	12ab0 <z_nrf_clock_control_lf_on>

	return 0;
}
   13bd8:	4620      	mov	r0, r4
   13bda:	b002      	add	sp, #8
   13bdc:	bd70      	pop	{r4, r5, r6, pc}
   13bde:	bf00      	nop
   13be0:	20000e18 	.word	0x20000e18
   13be4:	40011000 	.word	0x40011000
   13be8:	e000e100 	.word	0xe000e100
   13bec:	20002120 	.word	0x20002120
   13bf0:	00013919 	.word	0x00013919
   13bf4:	007fffff 	.word	0x007fffff

00013bf8 <rtc_nrf_isr>:
{
   13bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   13bfc:	4c35      	ldr	r4, [pc, #212]	; (13cd4 <rtc_nrf_isr+0xdc>)
   13bfe:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   13c02:	079a      	lsls	r2, r3, #30
   13c04:	d50b      	bpl.n	13c1e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13c06:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   13c0a:	b143      	cbz	r3, 13c1e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   13c0c:	4a32      	ldr	r2, [pc, #200]	; (13cd8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13c0e:	2300      	movs	r3, #0
   13c10:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   13c14:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   13c18:	6813      	ldr	r3, [r2, #0]
   13c1a:	3301      	adds	r3, #1
   13c1c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13c1e:	f04f 0320 	mov.w	r3, #32
   13c22:	f3ef 8211 	mrs	r2, BASEPRI
   13c26:	f383 8812 	msr	BASEPRI_MAX, r3
   13c2a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   13c2e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   13c32:	03db      	lsls	r3, r3, #15
   13c34:	d512      	bpl.n	13c5c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c36:	f3bf 8f5b 	dmb	ish
   13c3a:	4b28      	ldr	r3, [pc, #160]	; (13cdc <rtc_nrf_isr+0xe4>)
   13c3c:	e853 1f00 	ldrex	r1, [r3]
   13c40:	f021 0001 	bic.w	r0, r1, #1
   13c44:	e843 0600 	strex	r6, r0, [r3]
   13c48:	2e00      	cmp	r6, #0
   13c4a:	d1f7      	bne.n	13c3c <rtc_nrf_isr+0x44>
   13c4c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13c50:	2900      	cmp	r1, #0
   13c52:	d136      	bne.n	13cc2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13c54:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   13c58:	2b00      	cmp	r3, #0
   13c5a:	d132      	bne.n	13cc2 <rtc_nrf_isr+0xca>
{
   13c5c:	2300      	movs	r3, #0
	__asm__ volatile(
   13c5e:	f382 8811 	msr	BASEPRI, r2
   13c62:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   13c66:	b34b      	cbz	r3, 13cbc <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   13c68:	f7ff fec0 	bl	139ec <z_nrf_rtc_timer_read>
	__asm__ volatile(
   13c6c:	f04f 0320 	mov.w	r3, #32
   13c70:	f3ef 8c11 	mrs	ip, BASEPRI
   13c74:	f383 8812 	msr	BASEPRI_MAX, r3
   13c78:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   13c7c:	4b18      	ldr	r3, [pc, #96]	; (13ce0 <rtc_nrf_isr+0xe8>)
   13c7e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   13c82:	42b0      	cmp	r0, r6
   13c84:	eb71 0207 	sbcs.w	r2, r1, r7
   13c88:	f04f 0200 	mov.w	r2, #0
   13c8c:	d320      	bcc.n	13cd0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13c8e:	f04f 38ff 	mov.w	r8, #4294967295
   13c92:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
   13c96:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13c9a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   13c9e:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   13ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13ca4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   13ca8:	f38c 8811 	msr	BASEPRI, ip
   13cac:	f3bf 8f6f 	isb	sy
		if (handler) {
   13cb0:	b121      	cbz	r1, 13cbc <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   13cb2:	9500      	str	r5, [sp, #0]
   13cb4:	4632      	mov	r2, r6
   13cb6:	463b      	mov	r3, r7
   13cb8:	2000      	movs	r0, #0
   13cba:	4788      	blx	r1
}
   13cbc:	b003      	add	sp, #12
   13cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13cc2:	2300      	movs	r3, #0
   13cc4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   13cc8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13ccc:	2301      	movs	r3, #1
}
   13cce:	e7c6      	b.n	13c5e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   13cd0:	4611      	mov	r1, r2
   13cd2:	e7e9      	b.n	13ca8 <rtc_nrf_isr+0xb0>
   13cd4:	40011000 	.word	0x40011000
   13cd8:	20002124 	.word	0x20002124
   13cdc:	2000211c 	.word	0x2000211c
   13ce0:	20000e18 	.word	0x20000e18

00013ce4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13ce4:	1c43      	adds	r3, r0, #1
{
   13ce6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13ce8:	d021      	beq.n	13d2e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13cea:	2801      	cmp	r0, #1
   13cec:	dd21      	ble.n	13d32 <sys_clock_set_timeout+0x4e>
   13cee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13cf2:	da20      	bge.n	13d36 <sys_clock_set_timeout+0x52>
   13cf4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   13cf6:	f7ff fe79 	bl	139ec <z_nrf_rtc_timer_read>
   13cfa:	4b10      	ldr	r3, [pc, #64]	; (13d3c <sys_clock_set_timeout+0x58>)
   13cfc:	e9d3 1300 	ldrd	r1, r3, [r3]
   13d00:	1a40      	subs	r0, r0, r1
		ticks = 0;
   13d02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13d06:	bf28      	it	cs
   13d08:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13d0a:	3001      	adds	r0, #1
   13d0c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   13d0e:	480c      	ldr	r0, [pc, #48]	; (13d40 <sys_clock_set_timeout+0x5c>)
   13d10:	4282      	cmp	r2, r0
   13d12:	bf28      	it	cs
   13d14:	4602      	movcs	r2, r0
   13d16:	1852      	adds	r2, r2, r1
   13d18:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13d1c:	4909      	ldr	r1, [pc, #36]	; (13d44 <sys_clock_set_timeout+0x60>)
   13d1e:	9001      	str	r0, [sp, #4]
   13d20:	9100      	str	r1, [sp, #0]
   13d22:	f143 0300 	adc.w	r3, r3, #0
   13d26:	f7ff fe83 	bl	13a30 <compare_set>
}
   13d2a:	b002      	add	sp, #8
   13d2c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13d2e:	4804      	ldr	r0, [pc, #16]	; (13d40 <sys_clock_set_timeout+0x5c>)
   13d30:	e7e0      	b.n	13cf4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13d32:	2400      	movs	r4, #0
   13d34:	e7df      	b.n	13cf6 <sys_clock_set_timeout+0x12>
   13d36:	4c02      	ldr	r4, [pc, #8]	; (13d40 <sys_clock_set_timeout+0x5c>)
   13d38:	e7dd      	b.n	13cf6 <sys_clock_set_timeout+0x12>
   13d3a:	bf00      	nop
   13d3c:	20000e28 	.word	0x20000e28
   13d40:	007fffff 	.word	0x007fffff
   13d44:	00013919 	.word	0x00013919

00013d48 <sys_clock_elapsed>:
{
   13d48:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   13d4a:	f7ff fe4f 	bl	139ec <z_nrf_rtc_timer_read>
   13d4e:	4b02      	ldr	r3, [pc, #8]	; (13d58 <sys_clock_elapsed+0x10>)
   13d50:	681b      	ldr	r3, [r3, #0]
}
   13d52:	1ac0      	subs	r0, r0, r3
   13d54:	bd08      	pop	{r3, pc}
   13d56:	bf00      	nop
   13d58:	20000e28 	.word	0x20000e28

00013d5c <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   13d5c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   13d60:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   13d62:	2801      	cmp	r0, #1
   13d64:	4b04      	ldr	r3, [pc, #16]	; (13d78 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13d66:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   13d6a:	bf18      	it	ne
   13d6c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13d70:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   13d72:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   13d76:	4770      	bx	lr
   13d78:	50000300 	.word	0x50000300

00013d7c <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   13d7c:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   13d80:	2b00      	cmp	r3, #0
{
   13d82:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   13d84:	bf07      	ittee	eq
   13d86:	4614      	moveq	r4, r2
   13d88:	460d      	moveq	r5, r1
   13d8a:	2401      	movne	r4, #1
   13d8c:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   13d8e:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   13d92:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
   13d96:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   13d9a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13d9e:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
   13da2:	4b06      	ldr	r3, [pc, #24]	; (13dbc <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13da4:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
   13da8:	bf08      	it	eq
   13daa:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   13dae:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13db2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   13db6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   13dba:	bd30      	pop	{r4, r5, pc}
   13dbc:	50000300 	.word	0x50000300

00013dc0 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   13dc0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   13dc4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   13dc6:	2801      	cmp	r0, #1
   13dc8:	4b04      	ldr	r3, [pc, #16]	; (13ddc <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13dca:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   13dce:	bf18      	it	ne
   13dd0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13dd4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   13dd6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   13dda:	4770      	bx	lr
   13ddc:	50000300 	.word	0x50000300

00013de0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   13de4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   13de8:	2a08      	cmp	r2, #8
   13dea:	d106      	bne.n	13dfa <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13dec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   13df0:	2b05      	cmp	r3, #5
   13df2:	d802      	bhi.n	13dfa <nrf52_errata_103+0x1a>
   13df4:	4a02      	ldr	r2, [pc, #8]	; (13e00 <nrf52_errata_103+0x20>)
   13df6:	5cd0      	ldrb	r0, [r2, r3]
   13df8:	4770      	bx	lr
        return false;
   13dfa:	2000      	movs	r0, #0
}
   13dfc:	4770      	bx	lr
   13dfe:	bf00      	nop
   13e00:	0001b54c 	.word	0x0001b54c

00013e04 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   13e04:	4a02      	ldr	r2, [pc, #8]	; (13e10 <nvmc_wait+0xc>)
   13e06:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13e0a:	2b00      	cmp	r3, #0
   13e0c:	d0fb      	beq.n	13e06 <nvmc_wait+0x2>
}
   13e0e:	4770      	bx	lr
   13e10:	4001e000 	.word	0x4001e000

00013e14 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   13e14:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   13e16:	f005 fa10 	bl	1923a <nrf52_errata_136>
   13e1a:	b140      	cbz	r0, 13e2e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   13e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13e20:	2200      	movs	r2, #0
   13e22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   13e26:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   13e2a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   13e2e:	f005 fa04 	bl	1923a <nrf52_errata_136>
   13e32:	2800      	cmp	r0, #0
   13e34:	d046      	beq.n	13ec4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   13e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13e3a:	4b60      	ldr	r3, [pc, #384]	; (13fbc <SystemInit+0x1a8>)
   13e3c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   13e40:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   13e44:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   13e48:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   13e4c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   13e50:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   13e54:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   13e58:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   13e5c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   13e60:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   13e64:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13e68:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   13e6c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   13e70:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   13e74:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   13e78:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   13e7c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   13e80:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   13e84:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   13e88:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   13e8c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   13e90:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   13e94:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   13e98:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   13e9c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   13ea0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   13ea4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   13ea8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   13eac:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   13eb0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   13eb4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   13eb8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   13ebc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   13ec0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   13ec4:	f7ff ff8c 	bl	13de0 <nrf52_errata_103>
   13ec8:	b118      	cbz	r0, 13ed2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   13eca:	4b3d      	ldr	r3, [pc, #244]	; (13fc0 <SystemInit+0x1ac>)
   13ecc:	4a3d      	ldr	r2, [pc, #244]	; (13fc4 <SystemInit+0x1b0>)
   13ece:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   13ed2:	f7ff ff85 	bl	13de0 <nrf52_errata_103>
   13ed6:	b118      	cbz	r0, 13ee0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   13ed8:	4b3b      	ldr	r3, [pc, #236]	; (13fc8 <SystemInit+0x1b4>)
   13eda:	22fb      	movs	r2, #251	; 0xfb
   13edc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   13ee0:	f7ff ff7e 	bl	13de0 <nrf52_errata_103>
   13ee4:	b170      	cbz	r0, 13f04 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   13ee6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13eee:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   13ef2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   13ef6:	f022 020f 	bic.w	r2, r2, #15
   13efa:	f003 030f 	and.w	r3, r3, #15
   13efe:	4313      	orrs	r3, r2
   13f00:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   13f04:	f7ff ff6c 	bl	13de0 <nrf52_errata_103>
   13f08:	b120      	cbz	r0, 13f14 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   13f0a:	4b30      	ldr	r3, [pc, #192]	; (13fcc <SystemInit+0x1b8>)
   13f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
   13f10:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   13f14:	f005 f991 	bl	1923a <nrf52_errata_136>
   13f18:	b148      	cbz	r0, 13f2e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   13f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13f22:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   13f24:	bf44      	itt	mi
   13f26:	f06f 0201 	mvnmi.w	r2, #1
   13f2a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13f2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   13f32:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   13f36:	2a08      	cmp	r2, #8
   13f38:	d10e      	bne.n	13f58 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13f3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   13f3e:	2b05      	cmp	r3, #5
   13f40:	d802      	bhi.n	13f48 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   13f42:	4a23      	ldr	r2, [pc, #140]	; (13fd0 <SystemInit+0x1bc>)
   13f44:	5cd3      	ldrb	r3, [r2, r3]
   13f46:	b13b      	cbz	r3, 13f58 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   13f48:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13f4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   13f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13f54:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13f58:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13f5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13f60:	2a00      	cmp	r2, #0
   13f62:	db03      	blt.n	13f6c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   13f64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   13f68:	2b00      	cmp	r3, #0
   13f6a:	da22      	bge.n	13fb2 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   13f6c:	4919      	ldr	r1, [pc, #100]	; (13fd4 <SystemInit+0x1c0>)
   13f6e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   13f70:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   13f74:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   13f78:	2412      	movs	r4, #18
    nvmc_wait();
   13f7a:	f7ff ff43 	bl	13e04 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   13f7e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   13f82:	f7ff ff3f 	bl	13e04 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   13f86:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   13f8a:	f7ff ff3b 	bl	13e04 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   13f8e:	2300      	movs	r3, #0
   13f90:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   13f94:	f7ff ff36 	bl	13e04 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   13f98:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13f9c:	490e      	ldr	r1, [pc, #56]	; (13fd8 <SystemInit+0x1c4>)
   13f9e:	4b0f      	ldr	r3, [pc, #60]	; (13fdc <SystemInit+0x1c8>)
   13fa0:	68ca      	ldr	r2, [r1, #12]
   13fa2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13fa6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13fa8:	60cb      	str	r3, [r1, #12]
   13faa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13fae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13fb0:	e7fd      	b.n	13fae <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   13fb2:	4b0b      	ldr	r3, [pc, #44]	; (13fe0 <SystemInit+0x1cc>)
   13fb4:	4a0b      	ldr	r2, [pc, #44]	; (13fe4 <SystemInit+0x1d0>)
   13fb6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   13fb8:	bd10      	pop	{r4, pc}
   13fba:	bf00      	nop
   13fbc:	4000c000 	.word	0x4000c000
   13fc0:	40005000 	.word	0x40005000
   13fc4:	00038148 	.word	0x00038148
   13fc8:	4000f000 	.word	0x4000f000
   13fcc:	40029000 	.word	0x40029000
   13fd0:	0001b546 	.word	0x0001b546
   13fd4:	4001e000 	.word	0x4001e000
   13fd8:	e000ed00 	.word	0xe000ed00
   13fdc:	05fa0004 	.word	0x05fa0004
   13fe0:	20000690 	.word	0x20000690
   13fe4:	03d09000 	.word	0x03d09000

00013fe8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13fe8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   13fea:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   13fec:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   13fee:	fab2 f382 	clz	r3, r2
   13ff2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   13ff6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   13ff8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   13ffa:	d014      	beq.n	14026 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13ffc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   14000:	fa05 f303 	lsl.w	r3, r5, r3
   14004:	ea22 0303 	bic.w	r3, r2, r3
   14008:	e850 6f00 	ldrex	r6, [r0]
   1400c:	4296      	cmp	r6, r2
   1400e:	d104      	bne.n	1401a <nrfx_flag32_alloc+0x32>
   14010:	e840 3c00 	strex	ip, r3, [r0]
   14014:	f1bc 0f00 	cmp.w	ip, #0
   14018:	d1f6      	bne.n	14008 <nrfx_flag32_alloc+0x20>
   1401a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1401e:	d1e5      	bne.n	13fec <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   14020:	4802      	ldr	r0, [pc, #8]	; (1402c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   14022:	700c      	strb	r4, [r1, #0]
}
   14024:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   14026:	4802      	ldr	r0, [pc, #8]	; (14030 <nrfx_flag32_alloc+0x48>)
   14028:	e7fc      	b.n	14024 <nrfx_flag32_alloc+0x3c>
   1402a:	bf00      	nop
   1402c:	0bad0000 	.word	0x0bad0000
   14030:	0bad0002 	.word	0x0bad0002

00014034 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   14034:	6803      	ldr	r3, [r0, #0]
   14036:	40cb      	lsrs	r3, r1
   14038:	07db      	lsls	r3, r3, #31
{
   1403a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1403c:	d415      	bmi.n	1406a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1403e:	2301      	movs	r3, #1
   14040:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   14044:	6803      	ldr	r3, [r0, #0]
   14046:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1404a:	ea41 0203 	orr.w	r2, r1, r3
   1404e:	e850 4f00 	ldrex	r4, [r0]
   14052:	429c      	cmp	r4, r3
   14054:	d104      	bne.n	14060 <nrfx_flag32_free+0x2c>
   14056:	e840 2c00 	strex	ip, r2, [r0]
   1405a:	f1bc 0f00 	cmp.w	ip, #0
   1405e:	d1f6      	bne.n	1404e <nrfx_flag32_free+0x1a>
   14060:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14064:	d1ee      	bne.n	14044 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   14066:	4802      	ldr	r0, [pc, #8]	; (14070 <nrfx_flag32_free+0x3c>)
}
   14068:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1406a:	4802      	ldr	r0, [pc, #8]	; (14074 <nrfx_flag32_free+0x40>)
   1406c:	e7fc      	b.n	14068 <nrfx_flag32_free+0x34>
   1406e:	bf00      	nop
   14070:	0bad0000 	.word	0x0bad0000
   14074:	0bad0004 	.word	0x0bad0004

00014078 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   14078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   1407a:	4604      	mov	r4, r0
   1407c:	b118      	cbz	r0, 14086 <clock_stop+0xe>
   1407e:	2801      	cmp	r0, #1
   14080:	d029      	beq.n	140d6 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   14082:	b003      	add	sp, #12
   14084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   14086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1408a:	2202      	movs	r2, #2
   1408c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14090:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   14094:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14098:	2201      	movs	r2, #1
   1409a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1409c:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1409e:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   140a0:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   140a4:	bf14      	ite	ne
   140a6:	2500      	movne	r5, #0
   140a8:	f10d 0507 	addeq.w	r5, sp, #7
   140ac:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   140b0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   140b4:	b1d4      	cbz	r4, 140ec <clock_stop+0x74>
   140b6:	2c01      	cmp	r4, #1
   140b8:	d1e3      	bne.n	14082 <clock_stop+0xa>
            if (p_clk_src != NULL)
   140ba:	b125      	cbz	r5, 140c6 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   140bc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   140c0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   140c4:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   140c6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   140ca:	03db      	lsls	r3, r3, #15
   140cc:	d418      	bmi.n	14100 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
   140ce:	4b13      	ldr	r3, [pc, #76]	; (1411c <clock_stop+0xa4>)
   140d0:	2200      	movs	r2, #0
   140d2:	715a      	strb	r2, [r3, #5]
   140d4:	e7d5      	b.n	14082 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
   140d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140da:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   140dc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   140e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   140e8:	6058      	str	r0, [r3, #4]
}
   140ea:	e7d7      	b.n	1409c <clock_stop+0x24>
            if (p_clk_src != NULL)
   140ec:	b125      	cbz	r5, 140f8 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   140ee:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   140f2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   140f6:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   140f8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   140fc:	03da      	lsls	r2, r3, #15
   140fe:	d5c0      	bpl.n	14082 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   14100:	b92d      	cbnz	r5, 1410e <clock_stop+0x96>
   14102:	2001      	movs	r0, #1
   14104:	f005 f8a3 	bl	1924e <nrfx_busy_wait>
   14108:	3f01      	subs	r7, #1
   1410a:	d1d3      	bne.n	140b4 <clock_stop+0x3c>
   1410c:	e003      	b.n	14116 <clock_stop+0x9e>
   1410e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14112:	2b01      	cmp	r3, #1
   14114:	d0f5      	beq.n	14102 <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   14116:	2c01      	cmp	r4, #1
   14118:	d0d9      	beq.n	140ce <clock_stop+0x56>
   1411a:	e7b2      	b.n	14082 <clock_stop+0xa>
   1411c:	20002128 	.word	0x20002128

00014120 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   14120:	4b04      	ldr	r3, [pc, #16]	; (14134 <nrfx_clock_init+0x14>)
   14122:	791a      	ldrb	r2, [r3, #4]
   14124:	b922      	cbnz	r2, 14130 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   14126:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   14128:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1412a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1412c:	4802      	ldr	r0, [pc, #8]	; (14138 <nrfx_clock_init+0x18>)
   1412e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   14130:	4802      	ldr	r0, [pc, #8]	; (1413c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   14132:	4770      	bx	lr
   14134:	20002128 	.word	0x20002128
   14138:	0bad0000 	.word	0x0bad0000
   1413c:	0bad000c 	.word	0x0bad000c

00014140 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   14144:	b510      	push	{r4, lr}
   14146:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1414a:	b16a      	cbz	r2, 14168 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1414c:	2200      	movs	r2, #0
   1414e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14152:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   14156:	2201      	movs	r2, #1
   14158:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1415c:	4b11      	ldr	r3, [pc, #68]	; (141a4 <nrfx_power_clock_irq_handler+0x64>)
   1415e:	7958      	ldrb	r0, [r3, #5]
   14160:	b910      	cbnz	r0, 14168 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   14162:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14164:	681b      	ldr	r3, [r3, #0]
   14166:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1416c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14170:	b172      	cbz	r2, 14190 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14172:	2200      	movs	r2, #0
   14174:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14178:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1417c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14180:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   14184:	0792      	lsls	r2, r2, #30
   14186:	d104      	bne.n	14192 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14188:	2201      	movs	r2, #1
   1418a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1418e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   14190:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   14192:	2202      	movs	r2, #2
   14194:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14198:	4b02      	ldr	r3, [pc, #8]	; (141a4 <nrfx_power_clock_irq_handler+0x64>)
}
   1419a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1419e:	681b      	ldr	r3, [r3, #0]
   141a0:	2001      	movs	r0, #1
   141a2:	4718      	bx	r3
   141a4:	20002128 	.word	0x20002128

000141a8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   141a8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   141aa:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   141ae:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   141b0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   141b2:	6002      	str	r2, [r0, #0]
}
   141b4:	4802      	ldr	r0, [pc, #8]	; (141c0 <nrf_gpio_pin_port_decode+0x18>)
   141b6:	bf18      	it	ne
   141b8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   141bc:	4770      	bx	lr
   141be:	bf00      	nop
   141c0:	50000300 	.word	0x50000300

000141c4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   141c4:	4b03      	ldr	r3, [pc, #12]	; (141d4 <pin_in_use_by_te+0x10>)
   141c6:	3008      	adds	r0, #8
   141c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   141cc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   141d0:	4770      	bx	lr
   141d2:	bf00      	nop
   141d4:	20000694 	.word	0x20000694

000141d8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   141d8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   141da:	f100 0308 	add.w	r3, r0, #8
   141de:	4c0c      	ldr	r4, [pc, #48]	; (14210 <call_handler+0x38>)
   141e0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   141e4:	05da      	lsls	r2, r3, #23
{
   141e6:	4605      	mov	r5, r0
   141e8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   141ea:	d507      	bpl.n	141fc <call_handler+0x24>
   141ec:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   141f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   141f4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   141f8:	6852      	ldr	r2, [r2, #4]
   141fa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   141fc:	68a3      	ldr	r3, [r4, #8]
   141fe:	b12b      	cbz	r3, 1420c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14200:	68e2      	ldr	r2, [r4, #12]
   14202:	4631      	mov	r1, r6
   14204:	4628      	mov	r0, r5
    }
}
   14206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1420a:	4718      	bx	r3
}
   1420c:	bd70      	pop	{r4, r5, r6, pc}
   1420e:	bf00      	nop
   14210:	20000694 	.word	0x20000694

00014214 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14214:	4a12      	ldr	r2, [pc, #72]	; (14260 <release_handler+0x4c>)
   14216:	3008      	adds	r0, #8
{
   14218:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1421a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1421e:	05d9      	lsls	r1, r3, #23
   14220:	d51b      	bpl.n	1425a <release_handler+0x46>
   14222:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14226:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1422a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1422e:	f102 0410 	add.w	r4, r2, #16
   14232:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14234:	f834 3b02 	ldrh.w	r3, [r4], #2
   14238:	f413 7f80 	tst.w	r3, #256	; 0x100
   1423c:	d003      	beq.n	14246 <release_handler+0x32>
   1423e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14242:	4299      	cmp	r1, r3
   14244:	d009      	beq.n	1425a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14246:	3001      	adds	r0, #1
   14248:	2830      	cmp	r0, #48	; 0x30
   1424a:	d1f3      	bne.n	14234 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1424c:	2300      	movs	r3, #0
   1424e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14252:	4804      	ldr	r0, [pc, #16]	; (14264 <release_handler+0x50>)
}
   14254:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14256:	f7ff beed 	b.w	14034 <nrfx_flag32_free>
}
   1425a:	bc10      	pop	{r4}
   1425c:	4770      	bx	lr
   1425e:	bf00      	nop
   14260:	20000694 	.word	0x20000694
   14264:	20000708 	.word	0x20000708

00014268 <pin_handler_trigger_uninit>:
{
   14268:	b538      	push	{r3, r4, r5, lr}
   1426a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1426c:	f7ff ffaa 	bl	141c4 <pin_in_use_by_te>
   14270:	4c09      	ldr	r4, [pc, #36]	; (14298 <pin_handler_trigger_uninit+0x30>)
   14272:	f102 0508 	add.w	r5, r2, #8
   14276:	b140      	cbz	r0, 1428a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14278:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1427c:	4907      	ldr	r1, [pc, #28]	; (1429c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1427e:	0b5b      	lsrs	r3, r3, #13
   14280:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14284:	2000      	movs	r0, #0
   14286:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1428a:	4610      	mov	r0, r2
   1428c:	f7ff ffc2 	bl	14214 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14290:	2300      	movs	r3, #0
   14292:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   14296:	bd38      	pop	{r3, r4, r5, pc}
   14298:	20000694 	.word	0x20000694
   1429c:	40006000 	.word	0x40006000

000142a0 <nrfx_gpiote_input_configure>:
{
   142a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   142a4:	4604      	mov	r4, r0
   142a6:	4617      	mov	r7, r2
   142a8:	461d      	mov	r5, r3
    if (p_input_config)
   142aa:	b321      	cbz	r1, 142f6 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   142ac:	4e4e      	ldr	r6, [pc, #312]	; (143e8 <nrfx_gpiote_input_configure+0x148>)
   142ae:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   142b2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   142b6:	079b      	lsls	r3, r3, #30
   142b8:	d506      	bpl.n	142c8 <nrfx_gpiote_input_configure+0x28>
   142ba:	f7ff ff83 	bl	141c4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   142be:	b118      	cbz	r0, 142c8 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   142c0:	484a      	ldr	r0, [pc, #296]	; (143ec <nrfx_gpiote_input_configure+0x14c>)
}
   142c2:	b004      	add	sp, #16
   142c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   142c8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   142ca:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   142ce:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   142d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   142d6:	f10d 020f 	add.w	r2, sp, #15
   142da:	460b      	mov	r3, r1
   142dc:	4620      	mov	r0, r4
   142de:	f10d 010e 	add.w	r1, sp, #14
   142e2:	f005 f802 	bl	192ea <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   142e6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   142ea:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   142ee:	f043 0301 	orr.w	r3, r3, #1
   142f2:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   142f6:	b197      	cbz	r7, 1431e <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   142f8:	4b3b      	ldr	r3, [pc, #236]	; (143e8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   142fa:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   142fc:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   142fe:	f104 0008 	add.w	r0, r4, #8
   14302:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   14306:	078f      	lsls	r7, r1, #30
   14308:	d50c      	bpl.n	14324 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   1430a:	2a00      	cmp	r2, #0
   1430c:	d1d8      	bne.n	142c0 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1430e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   14312:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14316:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1431a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   1431e:	bbcd      	cbnz	r5, 14394 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   14320:	4833      	ldr	r0, [pc, #204]	; (143f0 <nrfx_gpiote_input_configure+0x150>)
   14322:	e7ce      	b.n	142c2 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14324:	f021 0120 	bic.w	r1, r1, #32
   14328:	04c9      	lsls	r1, r1, #19
   1432a:	0cc9      	lsrs	r1, r1, #19
   1432c:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   14330:	2a00      	cmp	r2, #0
   14332:	d0ec      	beq.n	1430e <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   14334:	2e03      	cmp	r6, #3
   14336:	d8c3      	bhi.n	142c0 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14338:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1433a:	b92e      	cbnz	r6, 14348 <nrfx_gpiote_input_configure+0xa8>
   1433c:	4a2d      	ldr	r2, [pc, #180]	; (143f4 <nrfx_gpiote_input_configure+0x154>)
   1433e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   14342:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14346:	e7e2      	b.n	1430e <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14348:	00ba      	lsls	r2, r7, #2
   1434a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1434e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14352:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   14356:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1435a:	f02c 0c03 	bic.w	ip, ip, #3
   1435e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14362:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14366:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   1436a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1436e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14372:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14376:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1437a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   1437e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   14382:	ea4c 0c0e 	orr.w	ip, ip, lr
   14386:	f041 0120 	orr.w	r1, r1, #32
   1438a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1438e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   14392:	e7bc      	b.n	1430e <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14394:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   14398:	4620      	mov	r0, r4
   1439a:	f7ff ff3b 	bl	14214 <release_handler>
    if (!handler)
   1439e:	2e00      	cmp	r6, #0
   143a0:	d0be      	beq.n	14320 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   143a2:	4d11      	ldr	r5, [pc, #68]	; (143e8 <nrfx_gpiote_input_configure+0x148>)
   143a4:	682b      	ldr	r3, [r5, #0]
   143a6:	429e      	cmp	r6, r3
   143a8:	d104      	bne.n	143b4 <nrfx_gpiote_input_configure+0x114>
   143aa:	686b      	ldr	r3, [r5, #4]
   143ac:	429f      	cmp	r7, r3
   143ae:	d101      	bne.n	143b4 <nrfx_gpiote_input_configure+0x114>
   143b0:	2200      	movs	r2, #0
   143b2:	e00a      	b.n	143ca <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   143b4:	4810      	ldr	r0, [pc, #64]	; (143f8 <nrfx_gpiote_input_configure+0x158>)
   143b6:	f10d 010f 	add.w	r1, sp, #15
   143ba:	f7ff fe15 	bl	13fe8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   143be:	4b0c      	ldr	r3, [pc, #48]	; (143f0 <nrfx_gpiote_input_configure+0x150>)
   143c0:	4298      	cmp	r0, r3
   143c2:	f47f af7e 	bne.w	142c2 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   143c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   143ca:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   143ce:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   143d2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   143d4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   143d6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   143da:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   143de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   143e2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   143e6:	e79b      	b.n	14320 <nrfx_gpiote_input_configure+0x80>
   143e8:	20000694 	.word	0x20000694
   143ec:	0bad0004 	.word	0x0bad0004
   143f0:	0bad0000 	.word	0x0bad0000
   143f4:	40006000 	.word	0x40006000
   143f8:	20000708 	.word	0x20000708

000143fc <nrfx_gpiote_output_configure>:
{
   143fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   143fe:	4604      	mov	r4, r0
   14400:	b085      	sub	sp, #20
   14402:	4615      	mov	r5, r2
    if (p_config)
   14404:	b319      	cbz	r1, 1444e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14406:	4e33      	ldr	r6, [pc, #204]	; (144d4 <nrfx_gpiote_output_configure+0xd8>)
   14408:	f100 0708 	add.w	r7, r0, #8
   1440c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14410:	0793      	lsls	r3, r2, #30
   14412:	d403      	bmi.n	1441c <nrfx_gpiote_output_configure+0x20>
   14414:	f7ff fed6 	bl	141c4 <pin_in_use_by_te>
   14418:	2800      	cmp	r0, #0
   1441a:	d158      	bne.n	144ce <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1441c:	f012 0f1c 	tst.w	r2, #28
   14420:	d002      	beq.n	14428 <nrfx_gpiote_output_configure+0x2c>
   14422:	784b      	ldrb	r3, [r1, #1]
   14424:	2b01      	cmp	r3, #1
   14426:	d052      	beq.n	144ce <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   14428:	2301      	movs	r3, #1
   1442a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1442e:	2300      	movs	r3, #0
   14430:	e9cd 1300 	strd	r1, r3, [sp]
   14434:	1c4a      	adds	r2, r1, #1
   14436:	1c8b      	adds	r3, r1, #2
   14438:	4620      	mov	r0, r4
   1443a:	f10d 010f 	add.w	r1, sp, #15
   1443e:	f004 ff54 	bl	192ea <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   14442:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   14446:	f043 0303 	orr.w	r3, r3, #3
   1444a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1444e:	b915      	cbnz	r5, 14456 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   14450:	4821      	ldr	r0, [pc, #132]	; (144d8 <nrfx_gpiote_output_configure+0xdc>)
}
   14452:	b005      	add	sp, #20
   14454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14456:	4e1f      	ldr	r6, [pc, #124]	; (144d4 <nrfx_gpiote_output_configure+0xd8>)
   14458:	f104 0708 	add.w	r7, r4, #8
   1445c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   14460:	0783      	lsls	r3, r0, #30
   14462:	d534      	bpl.n	144ce <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   14464:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   14468:	4661      	mov	r1, ip
   1446a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1446c:	f020 0020 	bic.w	r0, r0, #32
   14470:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14474:	04c0      	lsls	r0, r0, #19
   14476:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1447a:	0cc0      	lsrs	r0, r0, #19
   1447c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   14480:	2300      	movs	r3, #0
   14482:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14486:	786a      	ldrb	r2, [r5, #1]
   14488:	2a00      	cmp	r2, #0
   1448a:	d0e1      	beq.n	14450 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1448c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   14490:	78ad      	ldrb	r5, [r5, #2]
   14492:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   14496:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1449a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1449e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   144a2:	0223      	lsls	r3, r4, #8
   144a4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   144a8:	0412      	lsls	r2, r2, #16
   144aa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   144ae:	ea43 030e 	orr.w	r3, r3, lr
   144b2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   144b4:	052a      	lsls	r2, r5, #20
   144b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   144ba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   144be:	4313      	orrs	r3, r2
   144c0:	f040 0020 	orr.w	r0, r0, #32
   144c4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   144c8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   144cc:	e7c0      	b.n	14450 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   144ce:	4803      	ldr	r0, [pc, #12]	; (144dc <nrfx_gpiote_output_configure+0xe0>)
   144d0:	e7bf      	b.n	14452 <nrfx_gpiote_output_configure+0x56>
   144d2:	bf00      	nop
   144d4:	20000694 	.word	0x20000694
   144d8:	0bad0000 	.word	0x0bad0000
   144dc:	0bad0004 	.word	0x0bad0004

000144e0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   144e0:	4b01      	ldr	r3, [pc, #4]	; (144e8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   144e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   144e6:	4770      	bx	lr
   144e8:	20000694 	.word	0x20000694

000144ec <nrfx_gpiote_channel_get>:
{
   144ec:	b508      	push	{r3, lr}
   144ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   144f0:	f7ff fe68 	bl	141c4 <pin_in_use_by_te>
   144f4:	b138      	cbz	r0, 14506 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   144f6:	4b05      	ldr	r3, [pc, #20]	; (1450c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   144f8:	4805      	ldr	r0, [pc, #20]	; (14510 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   144fa:	3208      	adds	r2, #8
   144fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   14500:	0b5b      	lsrs	r3, r3, #13
   14502:	700b      	strb	r3, [r1, #0]
}
   14504:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14506:	4803      	ldr	r0, [pc, #12]	; (14514 <nrfx_gpiote_channel_get+0x28>)
   14508:	e7fc      	b.n	14504 <nrfx_gpiote_channel_get+0x18>
   1450a:	bf00      	nop
   1450c:	20000694 	.word	0x20000694
   14510:	0bad0000 	.word	0x0bad0000
   14514:	0bad0004 	.word	0x0bad0004

00014518 <nrfx_gpiote_init>:
{
   14518:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1451a:	4c0f      	ldr	r4, [pc, #60]	; (14558 <nrfx_gpiote_init+0x40>)
   1451c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   14520:	b9bd      	cbnz	r5, 14552 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   14522:	2260      	movs	r2, #96	; 0x60
   14524:	4629      	mov	r1, r5
   14526:	f104 0010 	add.w	r0, r4, #16
   1452a:	f002 f96d 	bl	16808 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1452e:	2006      	movs	r0, #6
   14530:	f7ef fc9c 	bl	3e6c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14534:	4b09      	ldr	r3, [pc, #36]	; (1455c <nrfx_gpiote_init+0x44>)
    return err_code;
   14536:	480a      	ldr	r0, [pc, #40]	; (14560 <nrfx_gpiote_init+0x48>)
   14538:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1453c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   14540:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14544:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14548:	2301      	movs	r3, #1
   1454a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1454e:	6763      	str	r3, [r4, #116]	; 0x74
}
   14550:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   14552:	4804      	ldr	r0, [pc, #16]	; (14564 <nrfx_gpiote_init+0x4c>)
   14554:	e7fc      	b.n	14550 <nrfx_gpiote_init+0x38>
   14556:	bf00      	nop
   14558:	20000694 	.word	0x20000694
   1455c:	40006000 	.word	0x40006000
   14560:	0bad0000 	.word	0x0bad0000
   14564:	0bad0005 	.word	0x0bad0005

00014568 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14568:	4b03      	ldr	r3, [pc, #12]	; (14578 <nrfx_gpiote_is_init+0x10>)
   1456a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1456e:	3800      	subs	r0, #0
   14570:	bf18      	it	ne
   14572:	2001      	movne	r0, #1
   14574:	4770      	bx	lr
   14576:	bf00      	nop
   14578:	20000694 	.word	0x20000694

0001457c <nrfx_gpiote_channel_free>:
{
   1457c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1457e:	4801      	ldr	r0, [pc, #4]	; (14584 <nrfx_gpiote_channel_free+0x8>)
   14580:	f7ff bd58 	b.w	14034 <nrfx_flag32_free>
   14584:	20000704 	.word	0x20000704

00014588 <nrfx_gpiote_channel_alloc>:
{
   14588:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1458a:	4801      	ldr	r0, [pc, #4]	; (14590 <nrfx_gpiote_channel_alloc+0x8>)
   1458c:	f7ff bd2c 	b.w	13fe8 <nrfx_flag32_alloc>
   14590:	20000704 	.word	0x20000704

00014594 <nrfx_gpiote_trigger_enable>:
{
   14594:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14596:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14598:	f7ff fe14 	bl	141c4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1459c:	f104 0208 	add.w	r2, r4, #8
   145a0:	4b1e      	ldr	r3, [pc, #120]	; (1461c <nrfx_gpiote_trigger_enable+0x88>)
   145a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   145a6:	b1e8      	cbz	r0, 145e4 <nrfx_gpiote_trigger_enable+0x50>
   145a8:	f013 0502 	ands.w	r5, r3, #2
   145ac:	d11a      	bne.n	145e4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   145ae:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   145b0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   145b2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   145b6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   145ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   145be:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   145c2:	6005      	str	r5, [r0, #0]
   145c4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   145c6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   145ca:	f040 0001 	orr.w	r0, r0, #1
   145ce:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   145d2:	b129      	cbz	r1, 145e0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   145d4:	2201      	movs	r2, #1
   145d6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   145da:	4a11      	ldr	r2, [pc, #68]	; (14620 <nrfx_gpiote_trigger_enable+0x8c>)
   145dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   145e0:	b003      	add	sp, #12
   145e2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   145e4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   145e8:	2b04      	cmp	r3, #4
   145ea:	d012      	beq.n	14612 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   145ec:	2b05      	cmp	r3, #5
   145ee:	d012      	beq.n	14616 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   145f0:	a801      	add	r0, sp, #4
   145f2:	9401      	str	r4, [sp, #4]
   145f4:	f7ff fdd8 	bl	141a8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   145f8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   145fa:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   145fe:	40d9      	lsrs	r1, r3
   14600:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14604:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   14606:	4620      	mov	r0, r4
}
   14608:	b003      	add	sp, #12
   1460a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1460e:	f004 beb3 	b.w	19378 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   14612:	2103      	movs	r1, #3
   14614:	e7f7      	b.n	14606 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   14616:	2102      	movs	r1, #2
   14618:	e7f5      	b.n	14606 <nrfx_gpiote_trigger_enable+0x72>
   1461a:	bf00      	nop
   1461c:	20000694 	.word	0x20000694
   14620:	40006000 	.word	0x40006000

00014624 <nrfx_gpiote_trigger_disable>:
{
   14624:	b508      	push	{r3, lr}
   14626:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14628:	f7ff fdcc 	bl	141c4 <pin_in_use_by_te>
   1462c:	b1c0      	cbz	r0, 14660 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1462e:	f102 0108 	add.w	r1, r2, #8
   14632:	4b0e      	ldr	r3, [pc, #56]	; (1466c <nrfx_gpiote_trigger_disable+0x48>)
   14634:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14638:	0799      	lsls	r1, r3, #30
   1463a:	d411      	bmi.n	14660 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1463c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1463e:	2201      	movs	r2, #1
   14640:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   14642:	009b      	lsls	r3, r3, #2
   14644:	490a      	ldr	r1, [pc, #40]	; (14670 <nrfx_gpiote_trigger_disable+0x4c>)
   14646:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1464a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1464e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14652:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14656:	f022 0203 	bic.w	r2, r2, #3
   1465a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1465e:	bd08      	pop	{r3, pc}
   14660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14664:	2100      	movs	r1, #0
   14666:	4610      	mov	r0, r2
   14668:	f004 be86 	b.w	19378 <nrf_gpio_cfg_sense_set>
   1466c:	20000694 	.word	0x20000694
   14670:	40006000 	.word	0x40006000

00014674 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   14674:	4b0e      	ldr	r3, [pc, #56]	; (146b0 <nrfx_gpiote_pin_uninit+0x3c>)
   14676:	f100 0208 	add.w	r2, r0, #8
{
   1467a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1467c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   14680:	07db      	lsls	r3, r3, #31
{
   14682:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   14684:	d511      	bpl.n	146aa <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   14686:	f7ff ffcd 	bl	14624 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1468a:	4620      	mov	r0, r4
   1468c:	f7ff fdec 	bl	14268 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14690:	a801      	add	r0, sp, #4
   14692:	9401      	str	r4, [sp, #4]
   14694:	f7ff fd88 	bl	141a8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   14698:	9b01      	ldr	r3, [sp, #4]
   1469a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1469e:	2202      	movs	r2, #2
   146a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   146a4:	4803      	ldr	r0, [pc, #12]	; (146b4 <nrfx_gpiote_pin_uninit+0x40>)
}
   146a6:	b002      	add	sp, #8
   146a8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   146aa:	4803      	ldr	r0, [pc, #12]	; (146b8 <nrfx_gpiote_pin_uninit+0x44>)
   146ac:	e7fb      	b.n	146a6 <nrfx_gpiote_pin_uninit+0x32>
   146ae:	bf00      	nop
   146b0:	20000694 	.word	0x20000694
   146b4:	0bad0000 	.word	0x0bad0000
   146b8:	0bad0004 	.word	0x0bad0004

000146bc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   146bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c0:	4b64      	ldr	r3, [pc, #400]	; (14854 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   146c2:	4865      	ldr	r0, [pc, #404]	; (14858 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   146c4:	4965      	ldr	r1, [pc, #404]	; (1485c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   146c6:	2600      	movs	r6, #0
{
   146c8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   146ca:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   146cc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   146ce:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   146d0:	b135      	cbz	r5, 146e0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   146d2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   146d6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   146d8:	bf1e      	ittt	ne
   146da:	601c      	strne	r4, [r3, #0]
   146dc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   146de:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   146e0:	3304      	adds	r3, #4
   146e2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   146e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   146e8:	d1f1      	bne.n	146ce <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   146ea:	f8df 816c 	ldr.w	r8, [pc, #364]	; 14858 <nrfx_gpiote_irq_handler+0x19c>
   146ee:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   146f2:	2b00      	cmp	r3, #0
   146f4:	f000 8091 	beq.w	1481a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   146f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   146fc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   14700:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   14702:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   14706:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1470a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1470c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   14710:	2700      	movs	r7, #0
            while (latch[i])
   14712:	f10d 0910 	add.w	r9, sp, #16
   14716:	017b      	lsls	r3, r7, #5
   14718:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1471a:	f04f 0a01 	mov.w	sl, #1
   1471e:	e049      	b.n	147b4 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   14720:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14722:	4a4f      	ldr	r2, [pc, #316]	; (14860 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   14724:	fa94 f4a4 	rbit	r4, r4
   14728:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1472c:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1472e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14732:	08e0      	lsrs	r0, r4, #3
   14734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   14738:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1473a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1473e:	fa0a fc02 	lsl.w	ip, sl, r2
   14742:	f819 2000 	ldrb.w	r2, [r9, r0]
   14746:	ea22 020c 	bic.w	r2, r2, ip
   1474a:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1474e:	a803      	add	r0, sp, #12
   14750:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14754:	0899      	lsrs	r1, r3, #2
   14756:	f7ff fd27 	bl	141a8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1475a:	9a03      	ldr	r2, [sp, #12]
   1475c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   14760:	074b      	lsls	r3, r1, #29
   14762:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14766:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   14768:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1476c:	d529      	bpl.n	147c2 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1476e:	4620      	mov	r0, r4
   14770:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14772:	b2d5      	uxtb	r5, r2
   14774:	f7ff fd30 	bl	141d8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14778:	a803      	add	r0, sp, #12
   1477a:	9403      	str	r4, [sp, #12]
   1477c:	f7ff fd14 	bl	141a8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14780:	9b03      	ldr	r3, [sp, #12]
   14782:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14786:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1478a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1478e:	429d      	cmp	r5, r3
   14790:	d107      	bne.n	147a2 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14792:	2100      	movs	r1, #0
   14794:	4620      	mov	r0, r4
   14796:	f004 fdef 	bl	19378 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1479a:	4629      	mov	r1, r5
   1479c:	4620      	mov	r0, r4
   1479e:	f004 fdeb 	bl	19378 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   147a2:	a803      	add	r0, sp, #12
   147a4:	9403      	str	r4, [sp, #12]
   147a6:	f7ff fcff 	bl	141a8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   147aa:	9b03      	ldr	r3, [sp, #12]
   147ac:	fa0a f303 	lsl.w	r3, sl, r3
   147b0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   147b4:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   147b8:	2c00      	cmp	r4, #0
   147ba:	d1b1      	bne.n	14720 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   147bc:	b9cf      	cbnz	r7, 147f2 <nrfx_gpiote_irq_handler+0x136>
   147be:	2701      	movs	r7, #1
   147c0:	e7a9      	b.n	14716 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   147c2:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   147c4:	bf0c      	ite	eq
   147c6:	2103      	moveq	r1, #3
   147c8:	2102      	movne	r1, #2
   147ca:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   147cc:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   147ce:	f004 fdd3 	bl	19378 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   147d2:	2d03      	cmp	r5, #3
   147d4:	d004      	beq.n	147e0 <nrfx_gpiote_irq_handler+0x124>
   147d6:	9a01      	ldr	r2, [sp, #4]
   147d8:	2a02      	cmp	r2, #2
   147da:	d106      	bne.n	147ea <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   147dc:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   147de:	d1e0      	bne.n	147a2 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   147e0:	4659      	mov	r1, fp
   147e2:	4620      	mov	r0, r4
   147e4:	f7ff fcf8 	bl	141d8 <call_handler>
   147e8:	e7db      	b.n	147a2 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   147ea:	2a03      	cmp	r2, #3
   147ec:	d1d9      	bne.n	147a2 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   147ee:	2d02      	cmp	r5, #2
   147f0:	e7f5      	b.n	147de <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   147f2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   147f6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   147fa:	491a      	ldr	r1, [pc, #104]	; (14864 <nrfx_gpiote_irq_handler+0x1a8>)
   147fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   14800:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   14804:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   14806:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1480a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1480e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   14810:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   14814:	4313      	orrs	r3, r2
   14816:	f47f af7b 	bne.w	14710 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1481a:	2401      	movs	r4, #1
    while (mask)
   1481c:	b916      	cbnz	r6, 14824 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1481e:	b007      	add	sp, #28
   14820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   14824:	fa96 f3a6 	rbit	r3, r6
   14828:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1482c:	fa04 f203 	lsl.w	r2, r4, r3
   14830:	009b      	lsls	r3, r3, #2
   14832:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14836:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1483a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1483e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   14842:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   14846:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1484a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1484e:	f7ff fcc3 	bl	141d8 <call_handler>
   14852:	e7e3      	b.n	1481c <nrfx_gpiote_irq_handler+0x160>
   14854:	40006100 	.word	0x40006100
   14858:	40006000 	.word	0x40006000
   1485c:	40006120 	.word	0x40006120
   14860:	20000694 	.word	0x20000694
   14864:	50000300 	.word	0x50000300

00014868 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   14868:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1486a:	4801      	ldr	r0, [pc, #4]	; (14870 <nrfx_ppi_channel_alloc+0x8>)
   1486c:	f7ff bbbc 	b.w	13fe8 <nrfx_flag32_alloc>
   14870:	20000710 	.word	0x20000710

00014874 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   14874:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   14876:	4c14      	ldr	r4, [pc, #80]	; (148c8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   14878:	4a14      	ldr	r2, [pc, #80]	; (148cc <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1487a:	4915      	ldr	r1, [pc, #84]	; (148d0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1487c:	2303      	movs	r3, #3
   1487e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   14880:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   14882:	4b14      	ldr	r3, [pc, #80]	; (148d4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   14884:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   14886:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   14888:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1488c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1488e:	2300      	movs	r3, #0
   14890:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   14892:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   14894:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   14896:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   14898:	4a0f      	ldr	r2, [pc, #60]	; (148d8 <_DoInit+0x64>)
   1489a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1489c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1489e:	2210      	movs	r2, #16
   148a0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   148a2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   148a4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   148a6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   148a8:	f001 ff6c 	bl	16784 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   148ac:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   148b0:	490a      	ldr	r1, [pc, #40]	; (148dc <_DoInit+0x68>)
   148b2:	4620      	mov	r0, r4
   148b4:	f001 ff66 	bl	16784 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   148b8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   148bc:	2320      	movs	r3, #32
   148be:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   148c0:	f3bf 8f5f 	dmb	sy
}
   148c4:	bd10      	pop	{r4, pc}
   148c6:	bf00      	nop
   148c8:	20002130 	.word	0x20002130
   148cc:	0001b552 	.word	0x0001b552
   148d0:	0001b55b 	.word	0x0001b55b
   148d4:	20002296 	.word	0x20002296
   148d8:	20002286 	.word	0x20002286
   148dc:	0001b55f 	.word	0x0001b55f

000148e0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   148e0:	4b0e      	ldr	r3, [pc, #56]	; (1491c <z_sys_init_run_level+0x3c>)
{
   148e2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   148e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   148e8:	3001      	adds	r0, #1
   148ea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   148ee:	42a6      	cmp	r6, r4
   148f0:	d800      	bhi.n	148f4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   148f2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   148f4:	e9d4 3500 	ldrd	r3, r5, [r4]
   148f8:	4628      	mov	r0, r5
   148fa:	4798      	blx	r3
		if (dev != NULL) {
   148fc:	b165      	cbz	r5, 14918 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   148fe:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   14900:	b130      	cbz	r0, 14910 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   14902:	2800      	cmp	r0, #0
   14904:	bfb8      	it	lt
   14906:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   14908:	28ff      	cmp	r0, #255	; 0xff
   1490a:	bfa8      	it	ge
   1490c:	20ff      	movge	r0, #255	; 0xff
   1490e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   14910:	785a      	ldrb	r2, [r3, #1]
   14912:	f042 0201 	orr.w	r2, r2, #1
   14916:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14918:	3408      	adds	r4, #8
   1491a:	e7e8      	b.n	148ee <z_sys_init_run_level+0xe>
   1491c:	0001b0ec 	.word	0x0001b0ec

00014920 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   14920:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   14922:	4605      	mov	r5, r0
   14924:	b910      	cbnz	r0, 1492c <z_impl_device_get_binding+0xc>
		return NULL;
   14926:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   14928:	4620      	mov	r0, r4
   1492a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1492c:	7803      	ldrb	r3, [r0, #0]
   1492e:	2b00      	cmp	r3, #0
   14930:	d0f9      	beq.n	14926 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   14932:	4c0e      	ldr	r4, [pc, #56]	; (1496c <z_impl_device_get_binding+0x4c>)
   14934:	4e0e      	ldr	r6, [pc, #56]	; (14970 <z_impl_device_get_binding+0x50>)
   14936:	42b4      	cmp	r4, r6
   14938:	d108      	bne.n	1494c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1493a:	4c0c      	ldr	r4, [pc, #48]	; (1496c <z_impl_device_get_binding+0x4c>)
   1493c:	42b4      	cmp	r4, r6
   1493e:	d0f2      	beq.n	14926 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   14940:	4620      	mov	r0, r4
   14942:	f004 fd30 	bl	193a6 <z_device_is_ready>
   14946:	b950      	cbnz	r0, 1495e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   14948:	3418      	adds	r4, #24
   1494a:	e7f7      	b.n	1493c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1494c:	4620      	mov	r0, r4
   1494e:	f004 fd2a 	bl	193a6 <z_device_is_ready>
   14952:	b110      	cbz	r0, 1495a <z_impl_device_get_binding+0x3a>
   14954:	6823      	ldr	r3, [r4, #0]
   14956:	42ab      	cmp	r3, r5
   14958:	d0e6      	beq.n	14928 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1495a:	3418      	adds	r4, #24
   1495c:	e7eb      	b.n	14936 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1495e:	6821      	ldr	r1, [r4, #0]
   14960:	4628      	mov	r0, r5
   14962:	f001 ff29 	bl	167b8 <strcmp>
   14966:	2800      	cmp	r0, #0
   14968:	d1ee      	bne.n	14948 <z_impl_device_get_binding+0x28>
   1496a:	e7dd      	b.n	14928 <z_impl_device_get_binding+0x8>
   1496c:	00019ee4 	.word	0x00019ee4
   14970:	00019f74 	.word	0x00019f74

00014974 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   14974:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   14976:	4b0a      	ldr	r3, [pc, #40]	; (149a0 <bg_thread_main+0x2c>)
   14978:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1497a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1497c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1497e:	f7ff ffaf 	bl	148e0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   14982:	f001 f951 	bl	15c28 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   14986:	2003      	movs	r0, #3
   14988:	f7ff ffaa 	bl	148e0 <z_sys_init_run_level>

	z_init_static_threads();
   1498c:	f000 f97a 	bl	14c84 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   14990:	f7ee fb68 	bl	3064 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14994:	4a03      	ldr	r2, [pc, #12]	; (149a4 <bg_thread_main+0x30>)
   14996:	7b13      	ldrb	r3, [r2, #12]
   14998:	f023 0301 	bic.w	r3, r3, #1
   1499c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1499e:	bd08      	pop	{r3, pc}
   149a0:	20002696 	.word	0x20002696
   149a4:	20000eb0 	.word	0x20000eb0

000149a8 <z_bss_zero>:
{
   149a8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   149aa:	4803      	ldr	r0, [pc, #12]	; (149b8 <z_bss_zero+0x10>)
   149ac:	4a03      	ldr	r2, [pc, #12]	; (149bc <z_bss_zero+0x14>)
   149ae:	2100      	movs	r1, #0
   149b0:	1a12      	subs	r2, r2, r0
   149b2:	f004 fd29 	bl	19408 <z_early_memset>
}
   149b6:	bd08      	pop	{r3, pc}
   149b8:	20000950 	.word	0x20000950
   149bc:	20002698 	.word	0x20002698

000149c0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   149c0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   149c2:	2300      	movs	r3, #0
{
   149c4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   149c6:	2201      	movs	r2, #1
   149c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   149cc:	4e13      	ldr	r6, [pc, #76]	; (14a1c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   149ce:	4d14      	ldr	r5, [pc, #80]	; (14a20 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   149d0:	9301      	str	r3, [sp, #4]
   149d2:	220f      	movs	r2, #15
   149d4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   149d8:	4912      	ldr	r1, [pc, #72]	; (14a24 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   149da:	2318      	movs	r3, #24
   149dc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   149e0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   149e4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   149e6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   149ea:	fb00 1104 	mla	r1, r0, r4, r1
   149ee:	4b0e      	ldr	r3, [pc, #56]	; (14a28 <z_init_cpu+0x68>)
   149f0:	9500      	str	r5, [sp, #0]
   149f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   149f6:	4630      	mov	r0, r6
   149f8:	f000 f8e6 	bl	14bc8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   149fc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   149fe:	480b      	ldr	r0, [pc, #44]	; (14a2c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   14a00:	752c      	strb	r4, [r5, #20]
   14a02:	f023 0304 	bic.w	r3, r3, #4
   14a06:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   14a08:	f44f 6304 	mov.w	r3, #2112	; 0x840
   14a0c:	fb03 0404 	mla	r4, r3, r4, r0
   14a10:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   14a12:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   14a14:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   14a16:	b006      	add	sp, #24
   14a18:	bd70      	pop	{r4, r5, r6, pc}
   14a1a:	bf00      	nop
   14a1c:	20000e30 	.word	0x20000e30
   14a20:	200021d8 	.word	0x200021d8
   14a24:	20003580 	.word	0x20003580
   14a28:	00014d3d 	.word	0x00014d3d
   14a2c:	20003700 	.word	0x20003700

00014a30 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   14a30:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   14a32:	4b2d      	ldr	r3, [pc, #180]	; (14ae8 <z_cstart+0xb8>)
   14a34:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14a36:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   14a3a:	4d2c      	ldr	r5, [pc, #176]	; (14aec <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   14a3c:	4e2c      	ldr	r6, [pc, #176]	; (14af0 <z_cstart+0xc0>)
   14a3e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14a40:	4f2c      	ldr	r7, [pc, #176]	; (14af4 <z_cstart+0xc4>)
   14a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14a46:	2400      	movs	r4, #0
   14a48:	616b      	str	r3, [r5, #20]
   14a4a:	23e0      	movs	r3, #224	; 0xe0
   14a4c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14a50:	77ec      	strb	r4, [r5, #31]
   14a52:	762c      	strb	r4, [r5, #24]
   14a54:	766c      	strb	r4, [r5, #25]
   14a56:	76ac      	strb	r4, [r5, #26]
   14a58:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14a5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14a5e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14a62:	626b      	str	r3, [r5, #36]	; 0x24
   14a64:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14a68:	f7ef fc38 	bl	42dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14a6c:	f7ef f9e0 	bl	3e30 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14a70:	f04f 33ff 	mov.w	r3, #4294967295
   14a74:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14a76:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   14a78:	f7ef fd12 	bl	44a0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   14a7c:	f7ef fc7a 	bl	4374 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   14a80:	f240 1301 	movw	r3, #257	; 0x101
   14a84:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   14a88:	ab06      	add	r3, sp, #24
   14a8a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   14a8c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   14a90:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   14a92:	f004 fc87 	bl	193a4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14a96:	4620      	mov	r0, r4
   14a98:	f7ff ff22 	bl	148e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14a9c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   14a9e:	4d16      	ldr	r5, [pc, #88]	; (14af8 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14aa0:	f7ff ff1e 	bl	148e0 <z_sys_init_run_level>
	z_sched_init();
   14aa4:	f000 fda4 	bl	155f0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14aa8:	4b14      	ldr	r3, [pc, #80]	; (14afc <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   14aaa:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14aac:	9305      	str	r3, [sp, #20]
   14aae:	2301      	movs	r3, #1
   14ab0:	4913      	ldr	r1, [pc, #76]	; (14b00 <z_cstart+0xd0>)
   14ab2:	9400      	str	r4, [sp, #0]
   14ab4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   14ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14abc:	463b      	mov	r3, r7
   14abe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14ac2:	4628      	mov	r0, r5
   14ac4:	f000 f880 	bl	14bc8 <z_setup_new_thread>
   14ac8:	7b6a      	ldrb	r2, [r5, #13]
   14aca:	4606      	mov	r6, r0
   14acc:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   14ad0:	4628      	mov	r0, r5
   14ad2:	736a      	strb	r2, [r5, #13]
   14ad4:	f004 ff61 	bl	1999a <z_ready_thread>
	z_init_cpu(0);
   14ad8:	4620      	mov	r0, r4
   14ada:	f7ff ff71 	bl	149c0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   14ade:	463a      	mov	r2, r7
   14ae0:	4631      	mov	r1, r6
   14ae2:	4628      	mov	r0, r5
   14ae4:	f7ef fac8 	bl	4078 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14ae8:	20003f40 	.word	0x20003f40
   14aec:	e000ed00 	.word	0xe000ed00
   14af0:	200021d8 	.word	0x200021d8
   14af4:	00014975 	.word	0x00014975
   14af8:	20000eb0 	.word	0x20000eb0
   14afc:	0001b566 	.word	0x0001b566
   14b00:	20003140 	.word	0x20003140

00014b04 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   14b04:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   14b06:	4c06      	ldr	r4, [pc, #24]	; (14b20 <statics_init+0x1c>)
   14b08:	4d06      	ldr	r5, [pc, #24]	; (14b24 <statics_init+0x20>)
   14b0a:	42ac      	cmp	r4, r5
   14b0c:	d301      	bcc.n	14b12 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   14b0e:	2000      	movs	r0, #0
   14b10:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   14b12:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   14b16:	4620      	mov	r0, r4
   14b18:	f004 fc7a 	bl	19410 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   14b1c:	3414      	adds	r4, #20
   14b1e:	e7f4      	b.n	14b0a <statics_init+0x6>
   14b20:	200007e4 	.word	0x200007e4
   14b24:	200007e4 	.word	0x200007e4

00014b28 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   14b28:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14b2a:	4b0e      	ldr	r3, [pc, #56]	; (14b64 <init_mem_slab_module+0x3c>)
   14b2c:	4c0e      	ldr	r4, [pc, #56]	; (14b68 <init_mem_slab_module+0x40>)
   14b2e:	42a3      	cmp	r3, r4
   14b30:	d301      	bcc.n	14b36 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   14b32:	2000      	movs	r0, #0
	return rc;
}
   14b34:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14b36:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   14b3a:	ea41 0200 	orr.w	r2, r1, r0
   14b3e:	f012 0203 	ands.w	r2, r2, #3
   14b42:	d10b      	bne.n	14b5c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   14b44:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   14b46:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14b48:	42aa      	cmp	r2, r5
   14b4a:	d101      	bne.n	14b50 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14b4c:	331c      	adds	r3, #28
   14b4e:	e7ee      	b.n	14b2e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   14b50:	695e      	ldr	r6, [r3, #20]
   14b52:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   14b54:	3201      	adds	r2, #1
		slab->free_list = p;
   14b56:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   14b58:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   14b5a:	e7f5      	b.n	14b48 <init_mem_slab_module+0x20>
	return rc;
   14b5c:	f06f 0015 	mvn.w	r0, #21
   14b60:	e7e8      	b.n	14b34 <init_mem_slab_module+0xc>
   14b62:	bf00      	nop
   14b64:	20000790 	.word	0x20000790
   14b68:	200007e4 	.word	0x200007e4

00014b6c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   14b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b6e:	460c      	mov	r4, r1
	__asm__ volatile(
   14b70:	f04f 0520 	mov.w	r5, #32
   14b74:	f3ef 8111 	mrs	r1, BASEPRI
   14b78:	f385 8812 	msr	BASEPRI_MAX, r5
   14b7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   14b80:	6945      	ldr	r5, [r0, #20]
   14b82:	b15d      	cbz	r5, 14b9c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   14b84:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   14b86:	682b      	ldr	r3, [r5, #0]
   14b88:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   14b8a:	6983      	ldr	r3, [r0, #24]
   14b8c:	3301      	adds	r3, #1
   14b8e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   14b90:	2000      	movs	r0, #0
	__asm__ volatile(
   14b92:	f381 8811 	msr	BASEPRI, r1
   14b96:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   14b9a:	e011      	b.n	14bc0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   14b9c:	ea52 0c03 	orrs.w	ip, r2, r3
   14ba0:	d103      	bne.n	14baa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   14ba2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   14ba4:	f06f 000b 	mvn.w	r0, #11
   14ba8:	e7f3      	b.n	14b92 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   14baa:	e9cd 2300 	strd	r2, r3, [sp]
   14bae:	4602      	mov	r2, r0
   14bb0:	3008      	adds	r0, #8
   14bb2:	f000 fcbb 	bl	1552c <z_pend_curr>
		if (result == 0) {
   14bb6:	b918      	cbnz	r0, 14bc0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   14bb8:	4b02      	ldr	r3, [pc, #8]	; (14bc4 <k_mem_slab_alloc+0x58>)
   14bba:	689b      	ldr	r3, [r3, #8]
   14bbc:	695b      	ldr	r3, [r3, #20]
   14bbe:	6023      	str	r3, [r4, #0]
}
   14bc0:	b003      	add	sp, #12
   14bc2:	bd30      	pop	{r4, r5, pc}
   14bc4:	200021d8 	.word	0x200021d8

00014bc8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   14bc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   14bcc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14bce:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   14bd0:	2604      	movs	r6, #4
   14bd2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   14bd4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14bd6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   14bd8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   14bdc:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14bde:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   14be0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   14be6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14be8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   14bec:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   14bee:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   14bf2:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   14bf6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   14bf8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   14bfa:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14bfc:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14c00:	9202      	str	r2, [sp, #8]
   14c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14c04:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   14c06:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14c0a:	9200      	str	r2, [sp, #0]
   14c0c:	4642      	mov	r2, r8
{
   14c0e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14c10:	f7ef fa00 	bl	4014 <arch_new_thread>
	if (!_current) {
   14c14:	4b04      	ldr	r3, [pc, #16]	; (14c28 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   14c16:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   14c18:	689b      	ldr	r3, [r3, #8]
   14c1a:	b103      	cbz	r3, 14c1e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   14c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   14c1e:	6763      	str	r3, [r4, #116]	; 0x74
}
   14c20:	4640      	mov	r0, r8
   14c22:	b004      	add	sp, #16
   14c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c28:	200021d8 	.word	0x200021d8

00014c2c <z_impl_k_thread_create>:
{
   14c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c2e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c30:	2700      	movs	r7, #0
   14c32:	9705      	str	r7, [sp, #20]
   14c34:	9f10      	ldr	r7, [sp, #64]	; 0x40
   14c36:	9704      	str	r7, [sp, #16]
   14c38:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   14c3a:	9703      	str	r7, [sp, #12]
   14c3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   14c3e:	9702      	str	r7, [sp, #8]
{
   14c40:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   14c46:	9701      	str	r7, [sp, #4]
   14c48:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   14c4a:	9700      	str	r7, [sp, #0]
{
   14c4c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c4e:	f7ff ffbb 	bl	14bc8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   14c52:	f1b5 3fff 	cmp.w	r5, #4294967295
   14c56:	bf08      	it	eq
   14c58:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   14c5c:	d005      	beq.n	14c6a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14c5e:	ea55 0306 	orrs.w	r3, r5, r6
   14c62:	d105      	bne.n	14c70 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   14c64:	4620      	mov	r0, r4
   14c66:	f000 fc05 	bl	15474 <z_sched_start>
}
   14c6a:	4620      	mov	r0, r4
   14c6c:	b007      	add	sp, #28
   14c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14c70:	4903      	ldr	r1, [pc, #12]	; (14c80 <z_impl_k_thread_create+0x54>)
   14c72:	4632      	mov	r2, r6
   14c74:	462b      	mov	r3, r5
   14c76:	f104 0018 	add.w	r0, r4, #24
   14c7a:	f000 fe43 	bl	15904 <z_add_timeout>
   14c7e:	e7f4      	b.n	14c6a <z_impl_k_thread_create+0x3e>
   14c80:	000199bb 	.word	0x000199bb

00014c84 <z_init_static_threads>:
{
   14c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c88:	4c29      	ldr	r4, [pc, #164]	; (14d30 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   14c8a:	4d2a      	ldr	r5, [pc, #168]	; (14d34 <z_init_static_threads+0xb0>)
{
   14c8c:	b087      	sub	sp, #28
   14c8e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   14c90:	42ae      	cmp	r6, r5
   14c92:	f104 0430 	add.w	r4, r4, #48	; 0x30
   14c96:	d30f      	bcc.n	14cb8 <z_init_static_threads+0x34>
	k_sched_lock();
   14c98:	f000 fb06 	bl	152a8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   14c9c:	4c24      	ldr	r4, [pc, #144]	; (14d30 <z_init_static_threads+0xac>)
   14c9e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 14d38 <z_init_static_threads+0xb4>
   14ca2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   14ca6:	f240 37e7 	movw	r7, #999	; 0x3e7
   14caa:	42ac      	cmp	r4, r5
   14cac:	d320      	bcc.n	14cf0 <z_init_static_threads+0x6c>
}
   14cae:	b007      	add	sp, #28
   14cb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   14cb4:	f000 bc80 	b.w	155b8 <k_sched_unlock>
		z_setup_new_thread(
   14cb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14cbc:	9305      	str	r3, [sp, #20]
   14cbe:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14cc2:	9304      	str	r3, [sp, #16]
   14cc4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14cc8:	9303      	str	r3, [sp, #12]
   14cca:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14cce:	9302      	str	r3, [sp, #8]
   14cd0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14cd4:	9301      	str	r3, [sp, #4]
   14cd6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   14cda:	9300      	str	r3, [sp, #0]
   14cdc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   14ce0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   14ce4:	f7ff ff70 	bl	14bc8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   14ce8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   14cec:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   14cee:	e7ce      	b.n	14c8e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14cf2:	1c5a      	adds	r2, r3, #1
   14cf4:	d00d      	beq.n	14d12 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   14cf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14cfa:	2100      	movs	r1, #0
   14cfc:	4638      	mov	r0, r7
   14cfe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14d02:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   14d06:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14d0a:	d104      	bne.n	14d16 <z_init_static_threads+0x92>
	z_sched_start(thread);
   14d0c:	4640      	mov	r0, r8
   14d0e:	f000 fbb1 	bl	15474 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14d12:	3430      	adds	r4, #48	; 0x30
   14d14:	e7c9      	b.n	14caa <z_init_static_threads+0x26>
   14d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14d1a:	2300      	movs	r3, #0
   14d1c:	f7eb f9f0 	bl	100 <__aeabi_uldivmod>
   14d20:	4602      	mov	r2, r0
   14d22:	460b      	mov	r3, r1
   14d24:	f108 0018 	add.w	r0, r8, #24
   14d28:	4649      	mov	r1, r9
   14d2a:	f000 fdeb 	bl	15904 <z_add_timeout>
   14d2e:	e7f0      	b.n	14d12 <z_init_static_threads+0x8e>
   14d30:	20000790 	.word	0x20000790
   14d34:	20000790 	.word	0x20000790
   14d38:	000199bb 	.word	0x000199bb

00014d3c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   14d3c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   14d3e:	4c0b      	ldr	r4, [pc, #44]	; (14d6c <idle+0x30>)
	return !z_sys_post_kernel;
   14d40:	4d0b      	ldr	r5, [pc, #44]	; (14d70 <idle+0x34>)
	__asm__ volatile(
   14d42:	f04f 0220 	mov.w	r2, #32
   14d46:	f3ef 8311 	mrs	r3, BASEPRI
   14d4a:	f382 8812 	msr	BASEPRI_MAX, r2
   14d4e:	f3bf 8f6f 	isb	sy
   14d52:	f004 fed9 	bl	19b08 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14d56:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   14d58:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14d5a:	b913      	cbnz	r3, 14d62 <idle+0x26>
	arch_cpu_idle();
   14d5c:	f7ef f86e 	bl	3e3c <arch_cpu_idle>
}
   14d60:	e7ef      	b.n	14d42 <idle+0x6>
   14d62:	f7ee ff3f 	bl	3be4 <pm_system_suspend>
   14d66:	2800      	cmp	r0, #0
   14d68:	d1eb      	bne.n	14d42 <idle+0x6>
   14d6a:	e7f7      	b.n	14d5c <idle+0x20>
   14d6c:	200021d8 	.word	0x200021d8
   14d70:	20002696 	.word	0x20002696

00014d74 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   14d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14d76:	4611      	mov	r1, r2
   14d78:	f04f 0220 	mov.w	r2, #32
   14d7c:	f3ef 8511 	mrs	r5, BASEPRI
   14d80:	f382 8812 	msr	BASEPRI_MAX, r2
   14d84:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   14d88:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14d8a:	b19c      	cbz	r4, 14db4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14d8c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14d8e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14d90:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14d94:	4294      	cmp	r4, r2
	list->head = node;
   14d96:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14d98:	bf08      	it	eq
   14d9a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14d9c:	2101      	movs	r1, #1
   14d9e:	4620      	mov	r0, r4
   14da0:	f004 fc3b 	bl	1961a <z_queue_node_peek>
   14da4:	4604      	mov	r4, r0
	__asm__ volatile(
   14da6:	f385 8811 	msr	BASEPRI, r5
   14daa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   14dae:	4620      	mov	r0, r4
   14db0:	b003      	add	sp, #12
   14db2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14db4:	ea51 0203 	orrs.w	r2, r1, r3
   14db8:	d0f5      	beq.n	14da6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14dba:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   14dbe:	e9cd 1300 	strd	r1, r3, [sp]
   14dc2:	4610      	mov	r0, r2
   14dc4:	4629      	mov	r1, r5
   14dc6:	f000 fbb1 	bl	1552c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   14dca:	2800      	cmp	r0, #0
   14dcc:	d1ef      	bne.n	14dae <z_impl_k_queue_get+0x3a>
   14dce:	4b02      	ldr	r3, [pc, #8]	; (14dd8 <z_impl_k_queue_get+0x64>)
   14dd0:	689b      	ldr	r3, [r3, #8]
   14dd2:	695c      	ldr	r4, [r3, #20]
   14dd4:	e7eb      	b.n	14dae <z_impl_k_queue_get+0x3a>
   14dd6:	bf00      	nop
   14dd8:	200021d8 	.word	0x200021d8

00014ddc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   14ddc:	b538      	push	{r3, r4, r5, lr}
   14dde:	4604      	mov	r4, r0
	__asm__ volatile(
   14de0:	f04f 0320 	mov.w	r3, #32
   14de4:	f3ef 8511 	mrs	r5, BASEPRI
   14de8:	f383 8812 	msr	BASEPRI_MAX, r3
   14dec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   14df0:	f004 fe2f 	bl	19a52 <z_unpend_first_thread>

	if (thread != NULL) {
   14df4:	b148      	cbz	r0, 14e0a <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14df6:	2200      	movs	r2, #0
   14df8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   14dfa:	f004 fdce 	bl	1999a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   14dfe:	4629      	mov	r1, r5
   14e00:	4808      	ldr	r0, [pc, #32]	; (14e24 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   14e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   14e06:	f000 ba3d 	b.w	15284 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14e0a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   14e0e:	429a      	cmp	r2, r3
   14e10:	bf18      	it	ne
   14e12:	3301      	addne	r3, #1
   14e14:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14e16:	2102      	movs	r1, #2
   14e18:	f104 0010 	add.w	r0, r4, #16
   14e1c:	f005 f80f 	bl	19e3e <z_handle_obj_poll_events>
}
   14e20:	e7ed      	b.n	14dfe <z_impl_k_sem_give+0x22>
   14e22:	bf00      	nop
   14e24:	20002697 	.word	0x20002697

00014e28 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14e28:	b513      	push	{r0, r1, r4, lr}
   14e2a:	f04f 0420 	mov.w	r4, #32
   14e2e:	f3ef 8111 	mrs	r1, BASEPRI
   14e32:	f384 8812 	msr	BASEPRI_MAX, r4
   14e36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   14e3a:	6884      	ldr	r4, [r0, #8]
   14e3c:	b144      	cbz	r4, 14e50 <z_impl_k_sem_take+0x28>
		sem->count--;
   14e3e:	3c01      	subs	r4, #1
   14e40:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   14e42:	f381 8811 	msr	BASEPRI, r1
   14e46:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   14e4a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   14e4c:	b002      	add	sp, #8
   14e4e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14e50:	ea52 0403 	orrs.w	r4, r2, r3
   14e54:	d106      	bne.n	14e64 <z_impl_k_sem_take+0x3c>
   14e56:	f381 8811 	msr	BASEPRI, r1
   14e5a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   14e5e:	f06f 000f 	mvn.w	r0, #15
   14e62:	e7f3      	b.n	14e4c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14e64:	e9cd 2300 	strd	r2, r3, [sp]
   14e68:	4602      	mov	r2, r0
   14e6a:	4802      	ldr	r0, [pc, #8]	; (14e74 <z_impl_k_sem_take+0x4c>)
   14e6c:	f000 fb5e 	bl	1552c <z_pend_curr>
	return ret;
   14e70:	e7ec      	b.n	14e4c <z_impl_k_sem_take+0x24>
   14e72:	bf00      	nop
   14e74:	20002697 	.word	0x20002697

00014e78 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   14e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   14e7a:	4b09      	ldr	r3, [pc, #36]	; (14ea0 <k_sys_work_q_init+0x28>)
   14e7c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   14e7e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   14e80:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   14e82:	9300      	str	r3, [sp, #0]
   14e84:	4907      	ldr	r1, [pc, #28]	; (14ea4 <k_sys_work_q_init+0x2c>)
   14e86:	4808      	ldr	r0, [pc, #32]	; (14ea8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   14e88:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   14e8c:	f04f 33ff 	mov.w	r3, #4294967295
   14e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14e94:	f000 f914 	bl	150c0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   14e98:	4620      	mov	r0, r4
   14e9a:	b004      	add	sp, #16
   14e9c:	bd10      	pop	{r4, pc}
   14e9e:	bf00      	nop
   14ea0:	0001b56b 	.word	0x0001b56b
   14ea4:	20003f40 	.word	0x20003f40
   14ea8:	20000f30 	.word	0x20000f30

00014eac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   14eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   14eb0:	4e47      	ldr	r6, [pc, #284]	; (14fd0 <work_queue_main+0x124>)
   14eb2:	b085      	sub	sp, #20
   14eb4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   14eb6:	f04f 38ff 	mov.w	r8, #4294967295
   14eba:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   14ebe:	f04f 0320 	mov.w	r3, #32
   14ec2:	f3ef 8711 	mrs	r7, BASEPRI
   14ec6:	f383 8812 	msr	BASEPRI_MAX, r3
   14eca:	f3bf 8f6f 	isb	sy
   14ece:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   14ed2:	b98d      	cbnz	r5, 14ef8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   14ed4:	2102      	movs	r1, #2
   14ed6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   14eda:	f004 fc17 	bl	1970c <flag_test_and_clear>
   14ede:	2800      	cmp	r0, #0
   14ee0:	d135      	bne.n	14f4e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   14ee2:	2300      	movs	r3, #0
   14ee4:	e9cd 8900 	strd	r8, r9, [sp]
   14ee8:	9302      	str	r3, [sp, #8]
   14eea:	f104 0288 	add.w	r2, r4, #136	; 0x88
   14eee:	4639      	mov	r1, r7
   14ef0:	4838      	ldr	r0, [pc, #224]	; (14fd4 <work_queue_main+0x128>)
   14ef2:	f000 fc91 	bl	15818 <z_sched_wait>
			continue;
   14ef6:	e7e2      	b.n	14ebe <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14ef8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   14efc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   14efe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14f02:	4295      	cmp	r5, r2
   14f04:	d101      	bne.n	14f0a <work_queue_main+0x5e>
	list->tail = node;
   14f06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   14f0a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14f0e:	f043 0302 	orr.w	r3, r3, #2
   14f12:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   14f16:	68eb      	ldr	r3, [r5, #12]
   14f18:	f023 0304 	bic.w	r3, r3, #4
   14f1c:	f043 0301 	orr.w	r3, r3, #1
   14f20:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   14f22:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   14f24:	f387 8811 	msr	BASEPRI, r7
   14f28:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   14f2c:	4628      	mov	r0, r5
   14f2e:	4798      	blx	r3
	__asm__ volatile(
   14f30:	f04f 0320 	mov.w	r3, #32
   14f34:	f3ef 8b11 	mrs	fp, BASEPRI
   14f38:	f383 8812 	msr	BASEPRI_MAX, r3
   14f3c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   14f40:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   14f42:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   14f44:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   14f48:	d40b      	bmi.n	14f62 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   14f4a:	60ea      	str	r2, [r5, #12]
   14f4c:	e00e      	b.n	14f6c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   14f4e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   14f52:	2200      	movs	r2, #0
   14f54:	2101      	movs	r1, #1
   14f56:	4628      	mov	r0, r5
   14f58:	f004 fda3 	bl	19aa2 <z_sched_wake>
   14f5c:	2800      	cmp	r0, #0
   14f5e:	d1f8      	bne.n	14f52 <work_queue_main+0xa6>
   14f60:	e7bf      	b.n	14ee2 <work_queue_main+0x36>
	return list->head;
   14f62:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   14f64:	f023 0303 	bic.w	r3, r3, #3
   14f68:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   14f6a:	b970      	cbnz	r0, 14f8a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   14f6c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14f70:	f023 0302 	bic.w	r3, r3, #2
   14f74:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   14f78:	f38b 8811 	msr	BASEPRI, fp
   14f7c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   14f80:	05d8      	lsls	r0, r3, #23
   14f82:	d49c      	bmi.n	14ebe <work_queue_main+0x12>
	z_impl_k_yield();
   14f84:	f000 fb40 	bl	15608 <z_impl_k_yield>
}
   14f88:	e799      	b.n	14ebe <work_queue_main+0x12>
	return node->next;
   14f8a:	2700      	movs	r7, #0
   14f8c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   14f90:	463b      	mov	r3, r7
		if (wc->work == work) {
   14f92:	6842      	ldr	r2, [r0, #4]
   14f94:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   14f96:	4601      	mov	r1, r0
		if (wc->work == work) {
   14f98:	d10c      	bne.n	14fb4 <work_queue_main+0x108>
	return node->next;
   14f9a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   14f9c:	b997      	cbnz	r7, 14fc4 <work_queue_main+0x118>
   14f9e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   14fa0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   14fa2:	4282      	cmp	r2, r0
   14fa4:	d100      	bne.n	14fa8 <work_queue_main+0xfc>
	list->tail = node;
   14fa6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   14fa8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   14fac:	f7ff ff16 	bl	14ddc <z_impl_k_sem_give>
}
   14fb0:	4639      	mov	r1, r7
   14fb2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   14fb4:	f1ba 0f00 	cmp.w	sl, #0
   14fb8:	d0d8      	beq.n	14f6c <work_queue_main+0xc0>
	return node->next;
   14fba:	4650      	mov	r0, sl
   14fbc:	460f      	mov	r7, r1
   14fbe:	f8da a000 	ldr.w	sl, [sl]
   14fc2:	e7e6      	b.n	14f92 <work_queue_main+0xe6>
	return list->tail;
   14fc4:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   14fc6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   14fc8:	4290      	cmp	r0, r2
	list->tail = node;
   14fca:	bf08      	it	eq
   14fcc:	6077      	streq	r7, [r6, #4]
}
   14fce:	e7eb      	b.n	14fa8 <work_queue_main+0xfc>
   14fd0:	20002200 	.word	0x20002200
   14fd4:	20002697 	.word	0x20002697

00014fd8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   14fd8:	68c3      	ldr	r3, [r0, #12]
{
   14fda:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   14fdc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   14fe0:	079b      	lsls	r3, r3, #30
{
   14fe2:	4605      	mov	r5, r0
   14fe4:	460c      	mov	r4, r1
	if (ret) {
   14fe6:	d50d      	bpl.n	15004 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14fe8:	2201      	movs	r2, #1
   14fea:	2100      	movs	r1, #0
   14fec:	f104 0008 	add.w	r0, r4, #8
   14ff0:	f004 fb7c 	bl	196ec <z_impl_k_sem_init>
	parent->next = child;
   14ff4:	2300      	movs	r3, #0
   14ff6:	6023      	str	r3, [r4, #0]
	return list->tail;
   14ff8:	4b05      	ldr	r3, [pc, #20]	; (15010 <cancel_sync_locked+0x38>)
	canceler->work = work;
   14ffa:	6065      	str	r5, [r4, #4]
   14ffc:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   14ffe:	b91a      	cbnz	r2, 15008 <cancel_sync_locked+0x30>
	list->head = node;
   15000:	e9c3 4400 	strd	r4, r4, [r3]
}
   15004:	4630      	mov	r0, r6
   15006:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   15008:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1500a:	605c      	str	r4, [r3, #4]
}
   1500c:	e7fa      	b.n	15004 <cancel_sync_locked+0x2c>
   1500e:	bf00      	nop
   15010:	20002200 	.word	0x20002200

00015014 <submit_to_queue_locked>:
{
   15014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   15016:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15018:	079a      	lsls	r2, r3, #30
{
   1501a:	4604      	mov	r4, r0
   1501c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1501e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   15022:	d41f      	bmi.n	15064 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   15024:	075f      	lsls	r7, r3, #29
   15026:	d41f      	bmi.n	15068 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   15028:	680a      	ldr	r2, [r1, #0]
   1502a:	b90a      	cbnz	r2, 15030 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1502c:	6882      	ldr	r2, [r0, #8]
   1502e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   15030:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   15032:	bf44      	itt	mi
   15034:	68a3      	ldrmi	r3, [r4, #8]
   15036:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   15038:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1503a:	bf4c      	ite	mi
   1503c:	2502      	movmi	r5, #2
		ret = 1;
   1503e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   15040:	b37f      	cbz	r7, 150a2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   15042:	4b1b      	ldr	r3, [pc, #108]	; (150b0 <submit_to_queue_locked+0x9c>)
   15044:	689b      	ldr	r3, [r3, #8]
   15046:	42bb      	cmp	r3, r7
   15048:	d111      	bne.n	1506e <submit_to_queue_locked+0x5a>
   1504a:	f004 fa70 	bl	1952e <k_is_in_isr>
   1504e:	f080 0001 	eor.w	r0, r0, #1
   15052:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   15054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15058:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1505a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1505e:	d523      	bpl.n	150a8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   15060:	b13a      	cbz	r2, 15072 <submit_to_queue_locked+0x5e>
   15062:	b940      	cbnz	r0, 15076 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   15064:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   15068:	2300      	movs	r3, #0
   1506a:	6033      	str	r3, [r6, #0]
	return ret;
   1506c:	e013      	b.n	15096 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1506e:	2000      	movs	r0, #0
   15070:	e7f0      	b.n	15054 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   15072:	071b      	lsls	r3, r3, #28
   15074:	d4f6      	bmi.n	15064 <submit_to_queue_locked+0x50>
	parent->next = child;
   15076:	2300      	movs	r3, #0
   15078:	6023      	str	r3, [r4, #0]
	return list->tail;
   1507a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1507e:	b963      	cbnz	r3, 1509a <submit_to_queue_locked+0x86>
	list->head = node;
   15080:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   15084:	4638      	mov	r0, r7
   15086:	f004 fb5a 	bl	1973e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1508a:	68e3      	ldr	r3, [r4, #12]
   1508c:	f043 0304 	orr.w	r3, r3, #4
   15090:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   15092:	6833      	ldr	r3, [r6, #0]
   15094:	60a3      	str	r3, [r4, #8]
}
   15096:	4628      	mov	r0, r5
   15098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1509a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1509c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   150a0:	e7f0      	b.n	15084 <submit_to_queue_locked+0x70>
		return -EINVAL;
   150a2:	f06f 0515 	mvn.w	r5, #21
   150a6:	e7df      	b.n	15068 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   150a8:	f06f 0512 	mvn.w	r5, #18
   150ac:	e7dc      	b.n	15068 <submit_to_queue_locked+0x54>
   150ae:	bf00      	nop
   150b0:	200021d8 	.word	0x200021d8

000150b4 <k_work_submit>:
{
   150b4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   150b6:	4801      	ldr	r0, [pc, #4]	; (150bc <k_work_submit+0x8>)
   150b8:	f004 bbc5 	b.w	19846 <k_work_submit_to_queue>
   150bc:	20000f30 	.word	0x20000f30

000150c0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   150c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   150c2:	b089      	sub	sp, #36	; 0x24
   150c4:	4604      	mov	r4, r0
	list->head = NULL;
   150c6:	2000      	movs	r0, #0
	list->tail = NULL;
   150c8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   150cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   150ce:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   150d2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   150d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   150da:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   150de:	b31d      	cbz	r5, 15128 <k_work_queue_start+0x68>
   150e0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   150e2:	2800      	cmp	r0, #0
   150e4:	f240 1001 	movw	r0, #257	; 0x101
   150e8:	bf08      	it	eq
   150ea:	2001      	moveq	r0, #1
	*flagp = flags;
   150ec:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   150f0:	2000      	movs	r0, #0
   150f2:	f04f 36ff 	mov.w	r6, #4294967295
   150f6:	f04f 37ff 	mov.w	r7, #4294967295
   150fa:	e9cd 3003 	strd	r3, r0, [sp, #12]
   150fe:	e9cd 0001 	strd	r0, r0, [sp, #4]
   15102:	e9cd 6706 	strd	r6, r7, [sp, #24]
   15106:	4b09      	ldr	r3, [pc, #36]	; (1512c <k_work_queue_start+0x6c>)
   15108:	9400      	str	r4, [sp, #0]
   1510a:	4620      	mov	r0, r4
   1510c:	f7ff fd8e 	bl	14c2c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   15110:	b125      	cbz	r5, 1511c <k_work_queue_start+0x5c>
   15112:	6829      	ldr	r1, [r5, #0]
   15114:	b111      	cbz	r1, 1511c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   15116:	4620      	mov	r0, r4
   15118:	f004 fa0f 	bl	1953a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1511c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1511e:	b009      	add	sp, #36	; 0x24
   15120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15124:	f004 ba0c 	b.w	19540 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15128:	2001      	movs	r0, #1
   1512a:	e7df      	b.n	150ec <k_work_queue_start+0x2c>
   1512c:	00014ead 	.word	0x00014ead

00015130 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   15130:	b513      	push	{r0, r1, r4, lr}
   15132:	9001      	str	r0, [sp, #4]
   15134:	4608      	mov	r0, r1
	__asm__ volatile(
   15136:	f04f 0120 	mov.w	r1, #32
   1513a:	f3ef 8411 	mrs	r4, BASEPRI
   1513e:	f381 8812 	msr	BASEPRI_MAX, r1
   15142:	f3bf 8f6f 	isb	sy
	return *flagp;
   15146:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   15148:	f011 0f0e 	tst.w	r1, #14
   1514c:	d116      	bne.n	1517c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1514e:	ea53 0c02 	orrs.w	ip, r3, r2
   15152:	d108      	bne.n	15166 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   15154:	a901      	add	r1, sp, #4
   15156:	f7ff ff5d 	bl	15014 <submit_to_queue_locked>
	__asm__ volatile(
   1515a:	f384 8811 	msr	BASEPRI, r4
   1515e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15162:	b002      	add	sp, #8
   15164:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   15166:	f041 0108 	orr.w	r1, r1, #8
   1516a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1516c:	9901      	ldr	r1, [sp, #4]
   1516e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15170:	3010      	adds	r0, #16
   15172:	4903      	ldr	r1, [pc, #12]	; (15180 <k_work_schedule_for_queue+0x50>)
   15174:	f000 fbc6 	bl	15904 <z_add_timeout>
	return ret;
   15178:	2001      	movs	r0, #1
   1517a:	e7ee      	b.n	1515a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1517c:	2000      	movs	r0, #0
   1517e:	e7ec      	b.n	1515a <k_work_schedule_for_queue+0x2a>
   15180:	000197af 	.word	0x000197af

00015184 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   15184:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   15186:	4801      	ldr	r0, [pc, #4]	; (1518c <k_work_schedule+0x8>)
   15188:	f7ff bfd2 	b.w	15130 <k_work_schedule_for_queue>
   1518c:	20000f30 	.word	0x20000f30

00015190 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   15190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15192:	460c      	mov	r4, r1
   15194:	9001      	str	r0, [sp, #4]
   15196:	4616      	mov	r6, r2
   15198:	461d      	mov	r5, r3
	__asm__ volatile(
   1519a:	f04f 0320 	mov.w	r3, #32
   1519e:	f3ef 8711 	mrs	r7, BASEPRI
   151a2:	f383 8812 	msr	BASEPRI_MAX, r3
   151a6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   151aa:	4608      	mov	r0, r1
   151ac:	f004 fab9 	bl	19722 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   151b0:	ea55 0306 	orrs.w	r3, r5, r6
   151b4:	d109      	bne.n	151ca <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   151b6:	a901      	add	r1, sp, #4
   151b8:	4620      	mov	r0, r4
   151ba:	f7ff ff2b 	bl	15014 <submit_to_queue_locked>
	__asm__ volatile(
   151be:	f387 8811 	msr	BASEPRI, r7
   151c2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   151c6:	b003      	add	sp, #12
   151c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   151ca:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   151cc:	4906      	ldr	r1, [pc, #24]	; (151e8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   151ce:	f043 0308 	orr.w	r3, r3, #8
   151d2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   151d4:	9b01      	ldr	r3, [sp, #4]
   151d6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   151d8:	f104 0010 	add.w	r0, r4, #16
   151dc:	4632      	mov	r2, r6
   151de:	462b      	mov	r3, r5
   151e0:	f000 fb90 	bl	15904 <z_add_timeout>
	return ret;
   151e4:	2001      	movs	r0, #1
   151e6:	e7ea      	b.n	151be <k_work_reschedule_for_queue+0x2e>
   151e8:	000197af 	.word	0x000197af

000151ec <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   151ec:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   151ee:	4801      	ldr	r0, [pc, #4]	; (151f4 <k_work_reschedule+0x8>)
   151f0:	f7ff bfce 	b.w	15190 <k_work_reschedule_for_queue>
   151f4:	20000f30 	.word	0x20000f30

000151f8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   151f8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   151fa:	4d07      	ldr	r5, [pc, #28]	; (15218 <z_reset_time_slice+0x20>)
   151fc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   151fe:	b154      	cbz	r4, 15216 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   15200:	f7fe fda2 	bl	13d48 <sys_clock_elapsed>
   15204:	4b05      	ldr	r3, [pc, #20]	; (1521c <z_reset_time_slice+0x24>)
   15206:	4404      	add	r4, r0
   15208:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1520a:	6828      	ldr	r0, [r5, #0]
   1520c:	2100      	movs	r1, #0
	}
}
   1520e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   15212:	f004 bc89 	b.w	19b28 <z_set_timeout_expiry>
}
   15216:	bd38      	pop	{r3, r4, r5, pc}
   15218:	20002210 	.word	0x20002210
   1521c:	200021d8 	.word	0x200021d8

00015220 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   15220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15222:	4604      	mov	r4, r0
   15224:	460d      	mov	r5, r1
	__asm__ volatile(
   15226:	f04f 0320 	mov.w	r3, #32
   1522a:	f3ef 8711 	mrs	r7, BASEPRI
   1522e:	f383 8812 	msr	BASEPRI_MAX, r3
   15232:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   15236:	4e10      	ldr	r6, [pc, #64]	; (15278 <k_sched_time_slice_set+0x58>)
   15238:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1523a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1523e:	f240 30e7 	movw	r0, #999	; 0x3e7
   15242:	6131      	str	r1, [r6, #16]
   15244:	2300      	movs	r3, #0
   15246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1524a:	fbe4 010c 	umlal	r0, r1, r4, ip
   1524e:	f7ea ff57 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   15252:	2c00      	cmp	r4, #0
   15254:	4b09      	ldr	r3, [pc, #36]	; (1527c <k_sched_time_slice_set+0x5c>)
   15256:	dc0a      	bgt.n	1526e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   15258:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1525a:	4b09      	ldr	r3, [pc, #36]	; (15280 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1525c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   1525e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   15260:	f7ff ffca 	bl	151f8 <z_reset_time_slice>
	__asm__ volatile(
   15264:	f387 8811 	msr	BASEPRI, r7
   15268:	f3bf 8f6f 	isb	sy
	}
}
   1526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   1526e:	2802      	cmp	r0, #2
   15270:	bfb8      	it	lt
   15272:	2002      	movlt	r0, #2
   15274:	e7f0      	b.n	15258 <k_sched_time_slice_set+0x38>
   15276:	bf00      	nop
   15278:	200021d8 	.word	0x200021d8
   1527c:	20002210 	.word	0x20002210
   15280:	2000220c 	.word	0x2000220c

00015284 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15284:	b949      	cbnz	r1, 1529a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15286:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1528a:	b930      	cbnz	r0, 1529a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1528c:	4b05      	ldr	r3, [pc, #20]	; (152a4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1528e:	69da      	ldr	r2, [r3, #28]
   15290:	689b      	ldr	r3, [r3, #8]
   15292:	429a      	cmp	r2, r3
   15294:	d001      	beq.n	1529a <z_reschedule+0x16>
	ret = arch_swap(key);
   15296:	f7ee be69 	b.w	3f6c <arch_swap>
   1529a:	f381 8811 	msr	BASEPRI, r1
   1529e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   152a2:	4770      	bx	lr
   152a4:	200021d8 	.word	0x200021d8

000152a8 <k_sched_lock>:
	__asm__ volatile(
   152a8:	f04f 0320 	mov.w	r3, #32
   152ac:	f3ef 8111 	mrs	r1, BASEPRI
   152b0:	f383 8812 	msr	BASEPRI_MAX, r3
   152b4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   152b8:	4b04      	ldr	r3, [pc, #16]	; (152cc <k_sched_lock+0x24>)
   152ba:	689a      	ldr	r2, [r3, #8]
   152bc:	7bd3      	ldrb	r3, [r2, #15]
   152be:	3b01      	subs	r3, #1
   152c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   152c2:	f381 8811 	msr	BASEPRI, r1
   152c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   152ca:	4770      	bx	lr
   152cc:	200021d8 	.word	0x200021d8

000152d0 <update_cache>:
{
   152d0:	b538      	push	{r3, r4, r5, lr}
   152d2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   152d4:	480c      	ldr	r0, [pc, #48]	; (15308 <update_cache+0x38>)
   152d6:	4d0d      	ldr	r5, [pc, #52]	; (1530c <update_cache+0x3c>)
   152d8:	f004 fb59 	bl	1998e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   152dc:	4604      	mov	r4, r0
   152de:	b900      	cbnz	r0, 152e2 <update_cache+0x12>
   152e0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   152e2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   152e4:	b94a      	cbnz	r2, 152fa <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   152e6:	7b5a      	ldrb	r2, [r3, #13]
   152e8:	06d2      	lsls	r2, r2, #27
   152ea:	d106      	bne.n	152fa <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   152ec:	69a2      	ldr	r2, [r4, #24]
   152ee:	b922      	cbnz	r2, 152fa <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   152f0:	89da      	ldrh	r2, [r3, #14]
   152f2:	2a7f      	cmp	r2, #127	; 0x7f
   152f4:	d901      	bls.n	152fa <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   152f6:	61eb      	str	r3, [r5, #28]
}
   152f8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   152fa:	429c      	cmp	r4, r3
   152fc:	d002      	beq.n	15304 <update_cache+0x34>
			z_reset_time_slice(thread);
   152fe:	4620      	mov	r0, r4
   15300:	f7ff ff7a 	bl	151f8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   15304:	61ec      	str	r4, [r5, #28]
}
   15306:	e7f7      	b.n	152f8 <update_cache+0x28>
   15308:	200021f8 	.word	0x200021f8
   1530c:	200021d8 	.word	0x200021d8

00015310 <move_thread_to_end_of_prio_q>:
{
   15310:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   15312:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   15316:	7b43      	ldrb	r3, [r0, #13]
   15318:	2a00      	cmp	r2, #0
{
   1531a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1531c:	da04      	bge.n	15328 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1531e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15322:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   15324:	f004 faee 	bl	19904 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   15328:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1532a:	4a15      	ldr	r2, [pc, #84]	; (15380 <move_thread_to_end_of_prio_q+0x70>)
   1532c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15330:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   15332:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15336:	f102 0520 	add.w	r5, r2, #32
   1533a:	42ab      	cmp	r3, r5
   1533c:	d01b      	beq.n	15376 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1533e:	b1d3      	cbz	r3, 15376 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   15340:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   15344:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   15348:	4286      	cmp	r6, r0
   1534a:	d00f      	beq.n	1536c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1534c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1534e:	2800      	cmp	r0, #0
   15350:	dd0c      	ble.n	1536c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15352:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   15354:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   15358:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1535a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1535c:	6890      	ldr	r0, [r2, #8]
   1535e:	1a43      	subs	r3, r0, r1
   15360:	4258      	negs	r0, r3
}
   15362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   15366:	4158      	adcs	r0, r3
   15368:	f7ff bfb2 	b.w	152d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1536c:	42a3      	cmp	r3, r4
   1536e:	d002      	beq.n	15376 <move_thread_to_end_of_prio_q+0x66>
   15370:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15372:	2b00      	cmp	r3, #0
   15374:	d1e6      	bne.n	15344 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   15376:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1537a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1537c:	6251      	str	r1, [r2, #36]	; 0x24
}
   1537e:	e7ed      	b.n	1535c <move_thread_to_end_of_prio_q+0x4c>
   15380:	200021d8 	.word	0x200021d8

00015384 <z_time_slice>:
{
   15384:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15386:	f04f 0320 	mov.w	r3, #32
   1538a:	f3ef 8511 	mrs	r5, BASEPRI
   1538e:	f383 8812 	msr	BASEPRI_MAX, r3
   15392:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   15396:	4b17      	ldr	r3, [pc, #92]	; (153f4 <z_time_slice+0x70>)
   15398:	4a17      	ldr	r2, [pc, #92]	; (153f8 <z_time_slice+0x74>)
   1539a:	689c      	ldr	r4, [r3, #8]
   1539c:	6811      	ldr	r1, [r2, #0]
   1539e:	428c      	cmp	r4, r1
   153a0:	d107      	bne.n	153b2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   153a2:	4620      	mov	r0, r4
   153a4:	f7ff ff28 	bl	151f8 <z_reset_time_slice>
	__asm__ volatile(
   153a8:	f385 8811 	msr	BASEPRI, r5
   153ac:	f3bf 8f6f 	isb	sy
}
   153b0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   153b2:	2100      	movs	r1, #0
   153b4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   153b6:	4a11      	ldr	r2, [pc, #68]	; (153fc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   153b8:	6812      	ldr	r2, [r2, #0]
   153ba:	b1c2      	cbz	r2, 153ee <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   153bc:	89e2      	ldrh	r2, [r4, #14]
   153be:	2a7f      	cmp	r2, #127	; 0x7f
   153c0:	d815      	bhi.n	153ee <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   153c2:	7b62      	ldrb	r2, [r4, #13]
   153c4:	06d2      	lsls	r2, r2, #27
   153c6:	d112      	bne.n	153ee <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   153c8:	4a0d      	ldr	r2, [pc, #52]	; (15400 <z_time_slice+0x7c>)
   153ca:	f994 100e 	ldrsb.w	r1, [r4, #14]
   153ce:	6812      	ldr	r2, [r2, #0]
   153d0:	4291      	cmp	r1, r2
   153d2:	db0c      	blt.n	153ee <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   153d4:	4a0b      	ldr	r2, [pc, #44]	; (15404 <z_time_slice+0x80>)
   153d6:	4294      	cmp	r4, r2
   153d8:	d009      	beq.n	153ee <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   153da:	691a      	ldr	r2, [r3, #16]
   153dc:	4282      	cmp	r2, r0
   153de:	dc03      	bgt.n	153e8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   153e0:	4620      	mov	r0, r4
   153e2:	f7ff ff95 	bl	15310 <move_thread_to_end_of_prio_q>
   153e6:	e7dc      	b.n	153a2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   153e8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   153ea:	611a      	str	r2, [r3, #16]
   153ec:	e7dc      	b.n	153a8 <z_time_slice+0x24>
   153ee:	2200      	movs	r2, #0
   153f0:	e7fb      	b.n	153ea <z_time_slice+0x66>
   153f2:	bf00      	nop
   153f4:	200021d8 	.word	0x200021d8
   153f8:	20002208 	.word	0x20002208
   153fc:	20002210 	.word	0x20002210
   15400:	2000220c 	.word	0x2000220c
   15404:	20000e30 	.word	0x20000e30

00015408 <ready_thread>:
{
   15408:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1540a:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1540e:	7b43      	ldrb	r3, [r0, #13]
   15410:	2a00      	cmp	r2, #0
   15412:	db2a      	blt.n	1546a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15414:	06da      	lsls	r2, r3, #27
   15416:	d128      	bne.n	1546a <ready_thread+0x62>
   15418:	6982      	ldr	r2, [r0, #24]
   1541a:	bb32      	cbnz	r2, 1546a <ready_thread+0x62>
	return list->head == list;
   1541c:	4a14      	ldr	r2, [pc, #80]	; (15470 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1541e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15422:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   15424:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15428:	f102 0520 	add.w	r5, r2, #32
   1542c:	42ab      	cmp	r3, r5
   1542e:	d017      	beq.n	15460 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15430:	b1b3      	cbz	r3, 15460 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   15432:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15436:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1543a:	428e      	cmp	r6, r1
   1543c:	d00b      	beq.n	15456 <ready_thread+0x4e>
		return b2 - b1;
   1543e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   15440:	2900      	cmp	r1, #0
   15442:	dd08      	ble.n	15456 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   15444:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15446:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1544a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1544c:	6058      	str	r0, [r3, #4]
}
   1544e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   15450:	2000      	movs	r0, #0
   15452:	f7ff bf3d 	b.w	152d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15456:	42a3      	cmp	r3, r4
   15458:	d002      	beq.n	15460 <ready_thread+0x58>
   1545a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1545c:	2b00      	cmp	r3, #0
   1545e:	d1ea      	bne.n	15436 <ready_thread+0x2e>
	node->prev = tail;
   15460:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   15464:	6020      	str	r0, [r4, #0]
	list->tail = node;
   15466:	6250      	str	r0, [r2, #36]	; 0x24
}
   15468:	e7f1      	b.n	1544e <ready_thread+0x46>
}
   1546a:	bc70      	pop	{r4, r5, r6}
   1546c:	4770      	bx	lr
   1546e:	bf00      	nop
   15470:	200021d8 	.word	0x200021d8

00015474 <z_sched_start>:
{
   15474:	b510      	push	{r4, lr}
	__asm__ volatile(
   15476:	f04f 0220 	mov.w	r2, #32
   1547a:	f3ef 8411 	mrs	r4, BASEPRI
   1547e:	f382 8812 	msr	BASEPRI_MAX, r2
   15482:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   15486:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   15488:	0751      	lsls	r1, r2, #29
   1548a:	d404      	bmi.n	15496 <z_sched_start+0x22>
	__asm__ volatile(
   1548c:	f384 8811 	msr	BASEPRI, r4
   15490:	f3bf 8f6f 	isb	sy
}
   15494:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15496:	f022 0204 	bic.w	r2, r2, #4
   1549a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1549c:	f7ff ffb4 	bl	15408 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   154a0:	4621      	mov	r1, r4
   154a2:	4802      	ldr	r0, [pc, #8]	; (154ac <z_sched_start+0x38>)
}
   154a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   154a8:	f7ff beec 	b.w	15284 <z_reschedule>
   154ac:	20002697 	.word	0x20002697

000154b0 <unready_thread>:
{
   154b0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   154b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   154b6:	7b43      	ldrb	r3, [r0, #13]
   154b8:	2a00      	cmp	r2, #0
{
   154ba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   154bc:	da04      	bge.n	154c8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   154be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   154c2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   154c4:	f004 fa1e 	bl	19904 <sys_dlist_remove>
	update_cache(thread == _current);
   154c8:	4b04      	ldr	r3, [pc, #16]	; (154dc <unready_thread+0x2c>)
   154ca:	6898      	ldr	r0, [r3, #8]
   154cc:	1a43      	subs	r3, r0, r1
   154ce:	4258      	negs	r0, r3
   154d0:	4158      	adcs	r0, r3
}
   154d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   154d6:	f7ff befb 	b.w	152d0 <update_cache>
   154da:	bf00      	nop
   154dc:	200021d8 	.word	0x200021d8

000154e0 <pend>:
{
   154e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   154e4:	4606      	mov	r6, r0
   154e6:	4615      	mov	r5, r2
   154e8:	461c      	mov	r4, r3
	__asm__ volatile(
   154ea:	f04f 0320 	mov.w	r3, #32
   154ee:	f3ef 8711 	mrs	r7, BASEPRI
   154f2:	f383 8812 	msr	BASEPRI_MAX, r3
   154f6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   154fa:	f004 fa80 	bl	199fe <add_to_waitq_locked>
	__asm__ volatile(
   154fe:	f387 8811 	msr	BASEPRI, r7
   15502:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15506:	f1b4 3fff 	cmp.w	r4, #4294967295
   1550a:	bf08      	it	eq
   1550c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   15510:	d008      	beq.n	15524 <pend+0x44>
   15512:	462a      	mov	r2, r5
   15514:	4623      	mov	r3, r4
   15516:	f106 0018 	add.w	r0, r6, #24
   1551a:	4903      	ldr	r1, [pc, #12]	; (15528 <pend+0x48>)
}
   1551c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15520:	f000 b9f0 	b.w	15904 <z_add_timeout>
   15524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15528:	000199bb 	.word	0x000199bb

0001552c <z_pend_curr>:
{
   1552c:	b510      	push	{r4, lr}
	pending_current = _current;
   1552e:	4b07      	ldr	r3, [pc, #28]	; (1554c <z_pend_curr+0x20>)
   15530:	6898      	ldr	r0, [r3, #8]
   15532:	4b07      	ldr	r3, [pc, #28]	; (15550 <z_pend_curr+0x24>)
{
   15534:	460c      	mov	r4, r1
	pending_current = _current;
   15536:	6018      	str	r0, [r3, #0]
{
   15538:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1553a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1553e:	f7ff ffcf 	bl	154e0 <pend>
   15542:	4620      	mov	r0, r4
}
   15544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15548:	f7ee bd10 	b.w	3f6c <arch_swap>
   1554c:	200021d8 	.word	0x200021d8
   15550:	20002208 	.word	0x20002208

00015554 <z_impl_k_thread_suspend>:
{
   15554:	b570      	push	{r4, r5, r6, lr}
   15556:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15558:	3018      	adds	r0, #24
   1555a:	f004 fabf 	bl	19adc <z_abort_timeout>
	__asm__ volatile(
   1555e:	f04f 0320 	mov.w	r3, #32
   15562:	f3ef 8611 	mrs	r6, BASEPRI
   15566:	f383 8812 	msr	BASEPRI_MAX, r3
   1556a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1556e:	f994 200d 	ldrsb.w	r2, [r4, #13]
   15572:	7b63      	ldrb	r3, [r4, #13]
   15574:	2a00      	cmp	r2, #0
   15576:	da05      	bge.n	15584 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1557c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1557e:	4620      	mov	r0, r4
   15580:	f004 f9c0 	bl	19904 <sys_dlist_remove>
		update_cache(thread == _current);
   15584:	4d0b      	ldr	r5, [pc, #44]	; (155b4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15586:	7b63      	ldrb	r3, [r4, #13]
   15588:	68a8      	ldr	r0, [r5, #8]
   1558a:	f043 0310 	orr.w	r3, r3, #16
   1558e:	7363      	strb	r3, [r4, #13]
   15590:	1b03      	subs	r3, r0, r4
   15592:	4258      	negs	r0, r3
   15594:	4158      	adcs	r0, r3
   15596:	f7ff fe9b 	bl	152d0 <update_cache>
	__asm__ volatile(
   1559a:	f386 8811 	msr	BASEPRI, r6
   1559e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   155a2:	68ab      	ldr	r3, [r5, #8]
   155a4:	42a3      	cmp	r3, r4
   155a6:	d103      	bne.n	155b0 <z_impl_k_thread_suspend+0x5c>
}
   155a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   155ac:	f004 b9e5 	b.w	1997a <z_reschedule_unlocked>
}
   155b0:	bd70      	pop	{r4, r5, r6, pc}
   155b2:	bf00      	nop
   155b4:	200021d8 	.word	0x200021d8

000155b8 <k_sched_unlock>:
{
   155b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   155ba:	f04f 0320 	mov.w	r3, #32
   155be:	f3ef 8411 	mrs	r4, BASEPRI
   155c2:	f383 8812 	msr	BASEPRI_MAX, r3
   155c6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   155ca:	4b08      	ldr	r3, [pc, #32]	; (155ec <k_sched_unlock+0x34>)
   155cc:	689a      	ldr	r2, [r3, #8]
   155ce:	7bd3      	ldrb	r3, [r2, #15]
   155d0:	3301      	adds	r3, #1
   155d2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   155d4:	2000      	movs	r0, #0
   155d6:	f7ff fe7b 	bl	152d0 <update_cache>
	__asm__ volatile(
   155da:	f384 8811 	msr	BASEPRI, r4
   155de:	f3bf 8f6f 	isb	sy
}
   155e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   155e6:	f004 b9c8 	b.w	1997a <z_reschedule_unlocked>
   155ea:	bf00      	nop
   155ec:	200021d8 	.word	0x200021d8

000155f0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   155f0:	4b04      	ldr	r3, [pc, #16]	; (15604 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   155f2:	2100      	movs	r1, #0
   155f4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   155f8:	e9c3 2208 	strd	r2, r2, [r3, #32]
   155fc:	4608      	mov	r0, r1
   155fe:	f7ff be0f 	b.w	15220 <k_sched_time_slice_set>
   15602:	bf00      	nop
   15604:	200021d8 	.word	0x200021d8

00015608 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   15608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1560a:	f04f 0320 	mov.w	r3, #32
   1560e:	f3ef 8511 	mrs	r5, BASEPRI
   15612:	f383 8812 	msr	BASEPRI_MAX, r3
   15616:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1561a:	491a      	ldr	r1, [pc, #104]	; (15684 <z_impl_k_yield+0x7c>)
   1561c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1561e:	7b43      	ldrb	r3, [r0, #13]
   15620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15624:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15626:	f004 f96d 	bl	19904 <sys_dlist_remove>
	}
	queue_thread(_current);
   1562a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1562c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1562e:	4608      	mov	r0, r1
   15630:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15634:	735a      	strb	r2, [r3, #13]
   15636:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1563a:	4282      	cmp	r2, r0
   1563c:	d01c      	beq.n	15678 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1563e:	b1da      	cbz	r2, 15678 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   15640:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   15642:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   15646:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1564a:	42a6      	cmp	r6, r4
   1564c:	d00f      	beq.n	1566e <z_impl_k_yield+0x66>
		return b2 - b1;
   1564e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   15650:	2c00      	cmp	r4, #0
   15652:	dd0c      	ble.n	1566e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   15654:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15656:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1565a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1565c:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1565e:	2001      	movs	r0, #1
   15660:	f7ff fe36 	bl	152d0 <update_cache>
   15664:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   15666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1566a:	f7ee bc7f 	b.w	3f6c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1566e:	42ba      	cmp	r2, r7
   15670:	d002      	beq.n	15678 <z_impl_k_yield+0x70>
   15672:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15674:	2a00      	cmp	r2, #0
   15676:	d1e6      	bne.n	15646 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   15678:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1567a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1567e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15680:	624b      	str	r3, [r1, #36]	; 0x24
}
   15682:	e7ec      	b.n	1565e <z_impl_k_yield+0x56>
   15684:	200021d8 	.word	0x200021d8

00015688 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   15688:	ea50 0301 	orrs.w	r3, r0, r1
{
   1568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15690:	4605      	mov	r5, r0
   15692:	460e      	mov	r6, r1
	if (ticks == 0) {
   15694:	d103      	bne.n	1569e <z_tick_sleep+0x16>
	z_impl_k_yield();
   15696:	f7ff ffb7 	bl	15608 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1569a:	2000      	movs	r0, #0
   1569c:	e033      	b.n	15706 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1569e:	f06f 0401 	mvn.w	r4, #1
   156a2:	1a24      	subs	r4, r4, r0
   156a4:	f04f 33ff 	mov.w	r3, #4294967295
   156a8:	eb63 0301 	sbc.w	r3, r3, r1
   156ac:	2c01      	cmp	r4, #1
   156ae:	f173 0300 	sbcs.w	r3, r3, #0
   156b2:	da02      	bge.n	156ba <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   156b4:	f004 fa52 	bl	19b5c <sys_clock_tick_get_32>
   156b8:	1944      	adds	r4, r0, r5
   156ba:	f04f 0320 	mov.w	r3, #32
   156be:	f3ef 8811 	mrs	r8, BASEPRI
   156c2:	f383 8812 	msr	BASEPRI_MAX, r3
   156c6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   156ca:	4f10      	ldr	r7, [pc, #64]	; (1570c <z_tick_sleep+0x84>)
   156cc:	4b10      	ldr	r3, [pc, #64]	; (15710 <z_tick_sleep+0x88>)
   156ce:	68b8      	ldr	r0, [r7, #8]
   156d0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   156d2:	f7ff feed 	bl	154b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   156d6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   156d8:	490e      	ldr	r1, [pc, #56]	; (15714 <z_tick_sleep+0x8c>)
   156da:	462a      	mov	r2, r5
   156dc:	4633      	mov	r3, r6
   156de:	3018      	adds	r0, #24
   156e0:	f000 f910 	bl	15904 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   156e4:	68ba      	ldr	r2, [r7, #8]
   156e6:	7b53      	ldrb	r3, [r2, #13]
   156e8:	f043 0310 	orr.w	r3, r3, #16
   156ec:	7353      	strb	r3, [r2, #13]
   156ee:	4640      	mov	r0, r8
   156f0:	f7ee fc3c 	bl	3f6c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   156f4:	f004 fa32 	bl	19b5c <sys_clock_tick_get_32>
   156f8:	1a20      	subs	r0, r4, r0
   156fa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   156fe:	2801      	cmp	r0, #1
   15700:	f173 0300 	sbcs.w	r3, r3, #0
   15704:	dbc9      	blt.n	1569a <z_tick_sleep+0x12>
}
   15706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1570a:	bf00      	nop
   1570c:	200021d8 	.word	0x200021d8
   15710:	20002208 	.word	0x20002208
   15714:	000199bb 	.word	0x000199bb

00015718 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15718:	f1b1 3fff 	cmp.w	r1, #4294967295
   1571c:	bf08      	it	eq
   1571e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   15722:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15724:	d106      	bne.n	15734 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   15726:	4b08      	ldr	r3, [pc, #32]	; (15748 <z_impl_k_sleep+0x30>)
   15728:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1572a:	f7ff ff13 	bl	15554 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1572e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   15732:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   15734:	f7ff ffa8 	bl	15688 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   15738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1573c:	fb80 0303 	smull	r0, r3, r0, r3
   15740:	0bc0      	lsrs	r0, r0, #15
   15742:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   15746:	e7f4      	b.n	15732 <z_impl_k_sleep+0x1a>
   15748:	200021d8 	.word	0x200021d8

0001574c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1574c:	4b01      	ldr	r3, [pc, #4]	; (15754 <z_impl_z_current_get+0x8>)
   1574e:	6898      	ldr	r0, [r3, #8]
   15750:	4770      	bx	lr
   15752:	bf00      	nop
   15754:	200021d8 	.word	0x200021d8

00015758 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   15758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1575c:	4604      	mov	r4, r0
   1575e:	f04f 0320 	mov.w	r3, #32
   15762:	f3ef 8611 	mrs	r6, BASEPRI
   15766:	f383 8812 	msr	BASEPRI_MAX, r3
   1576a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1576e:	7b03      	ldrb	r3, [r0, #12]
   15770:	07d9      	lsls	r1, r3, #31
   15772:	d50b      	bpl.n	1578c <z_thread_abort+0x34>
	__asm__ volatile(
   15774:	f386 8811 	msr	BASEPRI, r6
   15778:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1577c:	4040      	eors	r0, r0
   1577e:	f380 8811 	msr	BASEPRI, r0
   15782:	f04f 0004 	mov.w	r0, #4
   15786:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   15788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1578c:	7b43      	ldrb	r3, [r0, #13]
   1578e:	071a      	lsls	r2, r3, #28
   15790:	d504      	bpl.n	1579c <z_thread_abort+0x44>
   15792:	f386 8811 	msr	BASEPRI, r6
   15796:	f3bf 8f6f 	isb	sy
   1579a:	e7f5      	b.n	15788 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1579c:	f023 0220 	bic.w	r2, r3, #32
   157a0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   157a4:	09d2      	lsrs	r2, r2, #7
   157a6:	d120      	bne.n	157ea <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   157a8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   157aa:	68a3      	ldr	r3, [r4, #8]
   157ac:	b113      	cbz	r3, 157b4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   157ae:	4620      	mov	r0, r4
   157b0:	f004 f8b0 	bl	19914 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   157b4:	f104 0018 	add.w	r0, r4, #24
   157b8:	f004 f990 	bl	19adc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   157bc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   157c0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   157c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157c6:	42bd      	cmp	r5, r7
   157c8:	d000      	beq.n	157cc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   157ca:	b9b5      	cbnz	r5, 157fa <z_thread_abort+0xa2>
		update_cache(1);
   157cc:	2001      	movs	r0, #1
   157ce:	f7ff fd7f 	bl	152d0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   157d2:	4b10      	ldr	r3, [pc, #64]	; (15814 <z_thread_abort+0xbc>)
   157d4:	689b      	ldr	r3, [r3, #8]
   157d6:	42a3      	cmp	r3, r4
   157d8:	d1db      	bne.n	15792 <z_thread_abort+0x3a>
   157da:	f3ef 8305 	mrs	r3, IPSR
   157de:	2b00      	cmp	r3, #0
   157e0:	d1d7      	bne.n	15792 <z_thread_abort+0x3a>
   157e2:	4630      	mov	r0, r6
   157e4:	f7ee fbc2 	bl	3f6c <arch_swap>
	return ret;
   157e8:	e7d3      	b.n	15792 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   157ea:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   157ee:	f043 0308 	orr.w	r3, r3, #8
   157f2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   157f4:	f004 f886 	bl	19904 <sys_dlist_remove>
}
   157f8:	e7d7      	b.n	157aa <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   157fa:	4628      	mov	r0, r5
   157fc:	f004 f88a 	bl	19914 <unpend_thread_no_timeout>
   15800:	f105 0018 	add.w	r0, r5, #24
   15804:	f004 f96a 	bl	19adc <z_abort_timeout>
   15808:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1580c:	4628      	mov	r0, r5
   1580e:	f7ff fdfb 	bl	15408 <ready_thread>
   15812:	e7d7      	b.n	157c4 <z_thread_abort+0x6c>
   15814:	200021d8 	.word	0x200021d8

00015818 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   15818:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1581a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1581e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   15820:	e9cd 6700 	strd	r6, r7, [sp]
   15824:	f7ff fe82 	bl	1552c <z_pend_curr>

	if (data != NULL) {
   15828:	b11c      	cbz	r4, 15832 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1582a:	4b03      	ldr	r3, [pc, #12]	; (15838 <z_sched_wait+0x20>)
   1582c:	689b      	ldr	r3, [r3, #8]
   1582e:	695b      	ldr	r3, [r3, #20]
   15830:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   15832:	b002      	add	sp, #8
   15834:	bdd0      	pop	{r4, r6, r7, pc}
   15836:	bf00      	nop
   15838:	200021d8 	.word	0x200021d8

0001583c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1583c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1583e:	4806      	ldr	r0, [pc, #24]	; (15858 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   15840:	4a06      	ldr	r2, [pc, #24]	; (1585c <z_data_copy+0x20>)
   15842:	4907      	ldr	r1, [pc, #28]	; (15860 <z_data_copy+0x24>)
   15844:	1a12      	subs	r2, r2, r0
   15846:	f003 fde1 	bl	1940c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1584a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1584e:	4a05      	ldr	r2, [pc, #20]	; (15864 <z_data_copy+0x28>)
   15850:	4905      	ldr	r1, [pc, #20]	; (15868 <z_data_copy+0x2c>)
   15852:	4806      	ldr	r0, [pc, #24]	; (1586c <z_data_copy+0x30>)
   15854:	f003 bdda 	b.w	1940c <z_early_memcpy>
   15858:	20000000 	.word	0x20000000
   1585c:	2000094c 	.word	0x2000094c
   15860:	0001b5bc 	.word	0x0001b5bc
   15864:	00000000 	.word	0x00000000
   15868:	0001b5bc 	.word	0x0001b5bc
   1586c:	20000000 	.word	0x20000000

00015870 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   15870:	4b03      	ldr	r3, [pc, #12]	; (15880 <elapsed+0x10>)
   15872:	681b      	ldr	r3, [r3, #0]
   15874:	b90b      	cbnz	r3, 1587a <elapsed+0xa>
   15876:	f7fe ba67 	b.w	13d48 <sys_clock_elapsed>
}
   1587a:	2000      	movs	r0, #0
   1587c:	4770      	bx	lr
   1587e:	bf00      	nop
   15880:	20002214 	.word	0x20002214

00015884 <next_timeout>:
	return list->head == list;
   15884:	4b10      	ldr	r3, [pc, #64]	; (158c8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   15886:	b510      	push	{r4, lr}
   15888:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1588a:	429c      	cmp	r4, r3
   1588c:	bf08      	it	eq
   1588e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   15890:	f7ff ffee 	bl	15870 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   15894:	b1a4      	cbz	r4, 158c0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   15896:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1589a:	1a1b      	subs	r3, r3, r0
   1589c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   158a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   158a4:	f170 0200 	sbcs.w	r2, r0, #0
   158a8:	da0a      	bge.n	158c0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   158aa:	2800      	cmp	r0, #0
   158ac:	bfac      	ite	ge
   158ae:	4618      	movge	r0, r3
   158b0:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   158b2:	4b06      	ldr	r3, [pc, #24]	; (158cc <next_timeout+0x48>)
   158b4:	691b      	ldr	r3, [r3, #16]
   158b6:	b113      	cbz	r3, 158be <next_timeout+0x3a>
   158b8:	4298      	cmp	r0, r3
   158ba:	bfa8      	it	ge
   158bc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   158be:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   158c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   158c4:	e7f5      	b.n	158b2 <next_timeout+0x2e>
   158c6:	bf00      	nop
   158c8:	20000714 	.word	0x20000714
   158cc:	200021d8 	.word	0x200021d8

000158d0 <remove_timeout>:
{
   158d0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   158d2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   158d4:	b168      	cbz	r0, 158f2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   158d6:	4a0a      	ldr	r2, [pc, #40]	; (15900 <remove_timeout+0x30>)
   158d8:	6852      	ldr	r2, [r2, #4]
   158da:	4290      	cmp	r0, r2
   158dc:	d009      	beq.n	158f2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   158de:	b143      	cbz	r3, 158f2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   158e0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   158e4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   158e8:	1912      	adds	r2, r2, r4
   158ea:	eb41 0105 	adc.w	r1, r1, r5
   158ee:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   158f2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   158f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   158f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   158f8:	2300      	movs	r3, #0
	node->prev = NULL;
   158fa:	e9c0 3300 	strd	r3, r3, [r0]
}
   158fe:	bd30      	pop	{r4, r5, pc}
   15900:	20000714 	.word	0x20000714

00015904 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15904:	f1b3 3fff 	cmp.w	r3, #4294967295
   15908:	bf08      	it	eq
   1590a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1590e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15910:	4604      	mov	r4, r0
   15912:	461f      	mov	r7, r3
   15914:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15916:	d067      	beq.n	159e8 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   15918:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1591a:	f04f 0320 	mov.w	r3, #32
   1591e:	f3ef 8611 	mrs	r6, BASEPRI
   15922:	f383 8812 	msr	BASEPRI_MAX, r3
   15926:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1592a:	f06f 0201 	mvn.w	r2, #1
   1592e:	1b53      	subs	r3, r2, r5
   15930:	f04f 3cff 	mov.w	ip, #4294967295
   15934:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   15938:	2b00      	cmp	r3, #0
   1593a:	db1b      	blt.n	15974 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1593c:	4b2b      	ldr	r3, [pc, #172]	; (159ec <z_add_timeout+0xe8>)
   1593e:	e9d3 1300 	ldrd	r1, r3, [r3]
   15942:	1a52      	subs	r2, r2, r1
   15944:	eb6c 0303 	sbc.w	r3, ip, r3
   15948:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1594a:	eb63 0307 	sbc.w	r3, r3, r7
   1594e:	2d01      	cmp	r5, #1
   15950:	f173 0200 	sbcs.w	r2, r3, #0
   15954:	bfbc      	itt	lt
   15956:	2501      	movlt	r5, #1
   15958:	2300      	movlt	r3, #0
   1595a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1595e:	4824      	ldr	r0, [pc, #144]	; (159f0 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   15960:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15964:	4283      	cmp	r3, r0
   15966:	d118      	bne.n	1599a <z_add_timeout+0x96>
	node->prev = tail;
   15968:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1596c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   15970:	6044      	str	r4, [r0, #4]
}
   15972:	e026      	b.n	159c2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   15974:	f7ff ff7c 	bl	15870 <elapsed>
   15978:	3501      	adds	r5, #1
   1597a:	f147 0700 	adc.w	r7, r7, #0
   1597e:	182d      	adds	r5, r5, r0
   15980:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   15984:	e9c4 5704 	strd	r5, r7, [r4, #16]
   15988:	e7e9      	b.n	1595e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1598a:	1a52      	subs	r2, r2, r1
   1598c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   15990:	459c      	cmp	ip, r3
   15992:	e9c4 2504 	strd	r2, r5, [r4, #16]
   15996:	d0e7      	beq.n	15968 <z_add_timeout+0x64>
   15998:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1599a:	2b00      	cmp	r3, #0
   1599c:	d0e4      	beq.n	15968 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1599e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   159a2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   159a6:	428a      	cmp	r2, r1
   159a8:	eb75 0e07 	sbcs.w	lr, r5, r7
   159ac:	daed      	bge.n	1598a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   159ae:	1a8a      	subs	r2, r1, r2
   159b0:	eb67 0505 	sbc.w	r5, r7, r5
   159b4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   159b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   159ba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   159be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   159c0:	605c      	str	r4, [r3, #4]
	return list->head == list;
   159c2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   159c4:	4283      	cmp	r3, r0
   159c6:	d00b      	beq.n	159e0 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   159c8:	429c      	cmp	r4, r3
   159ca:	d109      	bne.n	159e0 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   159cc:	f7ff ff5a 	bl	15884 <next_timeout>

			if (next_time == 0 ||
   159d0:	b118      	cbz	r0, 159da <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   159d2:	4b08      	ldr	r3, [pc, #32]	; (159f4 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   159d4:	691b      	ldr	r3, [r3, #16]
   159d6:	4283      	cmp	r3, r0
   159d8:	d002      	beq.n	159e0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   159da:	2100      	movs	r1, #0
   159dc:	f7fe f982 	bl	13ce4 <sys_clock_set_timeout>
	__asm__ volatile(
   159e0:	f386 8811 	msr	BASEPRI, r6
   159e4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   159e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159ea:	bf00      	nop
   159ec:	20000fd0 	.word	0x20000fd0
   159f0:	20000714 	.word	0x20000714
   159f4:	200021d8 	.word	0x200021d8

000159f8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   159f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   159fc:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   159fe:	f7ff fcc1 	bl	15384 <z_time_slice>
	__asm__ volatile(
   15a02:	f04f 0320 	mov.w	r3, #32
   15a06:	f3ef 8411 	mrs	r4, BASEPRI
   15a0a:	f383 8812 	msr	BASEPRI_MAX, r3
   15a0e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   15a12:	4e24      	ldr	r6, [pc, #144]	; (15aa4 <sys_clock_announce+0xac>)
	return list->head == list;
   15a14:	f8df 8090 	ldr.w	r8, [pc, #144]	; 15aa8 <sys_clock_announce+0xb0>
   15a18:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   15a1a:	4d24      	ldr	r5, [pc, #144]	; (15aac <sys_clock_announce+0xb4>)
   15a1c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   15a20:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a22:	4540      	cmp	r0, r8
		curr_tick += dt;
   15a24:	e9d5 1e00 	ldrd	r1, lr, [r5]
   15a28:	ea4f 77e2 	mov.w	r7, r2, asr #31
   15a2c:	d00b      	beq.n	15a46 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   15a2e:	b150      	cbz	r0, 15a46 <sys_clock_announce+0x4e>
   15a30:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   15a34:	429a      	cmp	r2, r3
   15a36:	eb77 090c 	sbcs.w	r9, r7, ip
   15a3a:	da16      	bge.n	15a6a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   15a3c:	1a9b      	subs	r3, r3, r2
   15a3e:	eb6c 0c07 	sbc.w	ip, ip, r7
   15a42:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   15a46:	1852      	adds	r2, r2, r1
   15a48:	eb4e 0707 	adc.w	r7, lr, r7
   15a4c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   15a50:	2500      	movs	r5, #0
   15a52:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   15a54:	f7ff ff16 	bl	15884 <next_timeout>
   15a58:	4629      	mov	r1, r5
   15a5a:	f7fe f943 	bl	13ce4 <sys_clock_set_timeout>
	__asm__ volatile(
   15a5e:	f384 8811 	msr	BASEPRI, r4
   15a62:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   15a6a:	1859      	adds	r1, r3, r1
   15a6c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   15a70:	1ad3      	subs	r3, r2, r3
   15a72:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   15a74:	2200      	movs	r2, #0
   15a76:	2300      	movs	r3, #0
   15a78:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   15a7c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   15a80:	f7ff ff26 	bl	158d0 <remove_timeout>
   15a84:	f384 8811 	msr	BASEPRI, r4
   15a88:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15a8c:	6883      	ldr	r3, [r0, #8]
   15a8e:	4798      	blx	r3
	__asm__ volatile(
   15a90:	f04f 0320 	mov.w	r3, #32
   15a94:	f3ef 8411 	mrs	r4, BASEPRI
   15a98:	f383 8812 	msr	BASEPRI_MAX, r3
   15a9c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15aa0:	e7bc      	b.n	15a1c <sys_clock_announce+0x24>
   15aa2:	bf00      	nop
   15aa4:	20002214 	.word	0x20002214
   15aa8:	20000714 	.word	0x20000714
   15aac:	20000fd0 	.word	0x20000fd0

00015ab0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   15ab0:	b510      	push	{r4, lr}
   15ab2:	f04f 0320 	mov.w	r3, #32
   15ab6:	f3ef 8411 	mrs	r4, BASEPRI
   15aba:	f383 8812 	msr	BASEPRI_MAX, r3
   15abe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   15ac2:	f7fe f941 	bl	13d48 <sys_clock_elapsed>
   15ac6:	4a05      	ldr	r2, [pc, #20]	; (15adc <sys_clock_tick_get+0x2c>)
   15ac8:	e9d2 3100 	ldrd	r3, r1, [r2]
   15acc:	18c0      	adds	r0, r0, r3
   15ace:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   15ad2:	f384 8811 	msr	BASEPRI, r4
   15ad6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15ada:	bd10      	pop	{r4, pc}
   15adc:	20000fd0 	.word	0x20000fd0

00015ae0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   15ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15ae4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   15ae6:	4b29      	ldr	r3, [pc, #164]	; (15b8c <z_impl_k_poll+0xac>)
   15ae8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   15aea:	2301      	movs	r3, #1
   15aec:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   15af0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   15af4:	ea52 0305 	orrs.w	r3, r2, r5
{
   15af8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   15afa:	bf0c      	ite	eq
   15afc:	2301      	moveq	r3, #1
   15afe:	2300      	movne	r3, #0
   15b00:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   15b04:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   15b06:	f004 f88b 	bl	19c20 <register_events>
   15b0a:	4681      	mov	r9, r0
	__asm__ volatile(
   15b0c:	f04f 0320 	mov.w	r3, #32
   15b10:	f3ef 8a11 	mrs	sl, BASEPRI
   15b14:	f383 8812 	msr	BASEPRI_MAX, r3
   15b18:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   15b1c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   15b20:	b964      	cbnz	r4, 15b3c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   15b22:	4601      	mov	r1, r0
   15b24:	4652      	mov	r2, sl
   15b26:	4640      	mov	r0, r8
   15b28:	f004 f94b 	bl	19dc2 <clear_event_registrations>
	__asm__ volatile(
   15b2c:	f38a 8811 	msr	BASEPRI, sl
   15b30:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   15b34:	4620      	mov	r0, r4
   15b36:	b002      	add	sp, #8
   15b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   15b3c:	2300      	movs	r3, #0
   15b3e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15b42:	ea56 0305 	orrs.w	r3, r6, r5
   15b46:	d106      	bne.n	15b56 <z_impl_k_poll+0x76>
   15b48:	f38a 8811 	msr	BASEPRI, sl
   15b4c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   15b50:	f06f 040a 	mvn.w	r4, #10
   15b54:	e7ee      	b.n	15b34 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   15b56:	e9cd 6500 	strd	r6, r5, [sp]
   15b5a:	4a0d      	ldr	r2, [pc, #52]	; (15b90 <z_impl_k_poll+0xb0>)
   15b5c:	480d      	ldr	r0, [pc, #52]	; (15b94 <z_impl_k_poll+0xb4>)
   15b5e:	4651      	mov	r1, sl
   15b60:	f7ff fce4 	bl	1552c <z_pend_curr>
   15b64:	4604      	mov	r4, r0
	__asm__ volatile(
   15b66:	f04f 0320 	mov.w	r3, #32
   15b6a:	f3ef 8511 	mrs	r5, BASEPRI
   15b6e:	f383 8812 	msr	BASEPRI_MAX, r3
   15b72:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   15b76:	462a      	mov	r2, r5
   15b78:	4649      	mov	r1, r9
   15b7a:	4640      	mov	r0, r8
   15b7c:	f004 f921 	bl	19dc2 <clear_event_registrations>
	__asm__ volatile(
   15b80:	f385 8811 	msr	BASEPRI, r5
   15b84:	f3bf 8f6f 	isb	sy
	return swap_rc;
   15b88:	e7d4      	b.n	15b34 <z_impl_k_poll+0x54>
   15b8a:	bf00      	nop
   15b8c:	200021d8 	.word	0x200021d8
   15b90:	2000071c 	.word	0x2000071c
   15b94:	20002697 	.word	0x20002697

00015b98 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   15b98:	b538      	push	{r3, r4, r5, lr}
   15b9a:	4603      	mov	r3, r0
	__asm__ volatile(
   15b9c:	f04f 0220 	mov.w	r2, #32
   15ba0:	f3ef 8511 	mrs	r5, BASEPRI
   15ba4:	f382 8812 	msr	BASEPRI_MAX, r2
   15ba8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   15bac:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   15bae:	2101      	movs	r1, #1
   15bb0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   15bb2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15bb4:	4283      	cmp	r3, r0
   15bb6:	d106      	bne.n	15bc6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   15bb8:	f385 8811 	msr	BASEPRI, r5
   15bbc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   15bc0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   15bc2:	4620      	mov	r0, r4
   15bc4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   15bc6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   15bca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15bcc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15bce:	2300      	movs	r3, #0
	node->prev = NULL;
   15bd0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15bd4:	f004 f89b 	bl	19d0e <signal_poll_event>
	z_reschedule(&lock, key);
   15bd8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15bda:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   15bdc:	4801      	ldr	r0, [pc, #4]	; (15be4 <z_impl_k_poll_signal_raise+0x4c>)
   15bde:	f7ff fb51 	bl	15284 <z_reschedule>
	return rc;
   15be2:	e7ee      	b.n	15bc2 <z_impl_k_poll_signal_raise+0x2a>
   15be4:	20002697 	.word	0x20002697

00015be8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   15be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15bea:	4606      	mov	r6, r0
   15bec:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   15bee:	f003 fc9e 	bl	1952e <k_is_in_isr>
   15bf2:	b978      	cbnz	r0, 15c14 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   15bf4:	4b0b      	ldr	r3, [pc, #44]	; (15c24 <z_thread_aligned_alloc+0x3c>)
   15bf6:	689b      	ldr	r3, [r3, #8]
   15bf8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   15bfa:	b17c      	cbz	r4, 15c1c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   15bfc:	1d2a      	adds	r2, r5, #4
   15bfe:	d209      	bcs.n	15c14 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   15c00:	2000      	movs	r0, #0
   15c02:	2100      	movs	r1, #0
   15c04:	e9cd 0100 	strd	r0, r1, [sp]
   15c08:	f046 0104 	orr.w	r1, r6, #4
   15c0c:	4620      	mov	r0, r4
   15c0e:	f003 fc07 	bl	19420 <k_heap_aligned_alloc>
	if (mem == NULL) {
   15c12:	b908      	cbnz	r0, 15c18 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   15c14:	2400      	movs	r4, #0
	}

	return ret;
   15c16:	e001      	b.n	15c1c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   15c18:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   15c1a:	1d04      	adds	r4, r0, #4
}
   15c1c:	4620      	mov	r0, r4
   15c1e:	b002      	add	sp, #8
   15c20:	bd70      	pop	{r4, r5, r6, pc}
   15c22:	bf00      	nop
   15c24:	200021d8 	.word	0x200021d8

00015c28 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   15c28:	4a02      	ldr	r2, [pc, #8]	; (15c34 <boot_banner+0xc>)
   15c2a:	4903      	ldr	r1, [pc, #12]	; (15c38 <boot_banner+0x10>)
   15c2c:	4803      	ldr	r0, [pc, #12]	; (15c3c <boot_banner+0x14>)
   15c2e:	f000 b84a 	b.w	15cc6 <printk>
   15c32:	bf00      	nop
   15c34:	0001b1cf 	.word	0x0001b1cf
   15c38:	0001b574 	.word	0x0001b574
   15c3c:	0001b594 	.word	0x0001b594

00015c40 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   15c40:	4770      	bx	lr

00015c42 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   15c42:	4603      	mov	r3, r0
   15c44:	b140      	cbz	r0, 15c58 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15c46:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15c48:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   15c4c:	2a02      	cmp	r2, #2
   15c4e:	d006      	beq.n	15c5e <sys_notify_validate+0x1c>
   15c50:	2a03      	cmp	r2, #3
   15c52:	d004      	beq.n	15c5e <sys_notify_validate+0x1c>
   15c54:	2a01      	cmp	r2, #1
   15c56:	d005      	beq.n	15c64 <sys_notify_validate+0x22>
		return -EINVAL;
   15c58:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   15c5c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   15c5e:	681a      	ldr	r2, [r3, #0]
   15c60:	2a00      	cmp	r2, #0
   15c62:	d0f9      	beq.n	15c58 <sys_notify_validate+0x16>
		notify->result = 0;
   15c64:	2000      	movs	r0, #0
   15c66:	6098      	str	r0, [r3, #8]
   15c68:	4770      	bx	lr

00015c6a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15c6a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15c6c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   15c70:	2a02      	cmp	r2, #2
{
   15c72:	b510      	push	{r4, lr}
   15c74:	4603      	mov	r3, r0
	notify->result = res;
   15c76:	6081      	str	r1, [r0, #8]
	switch (method) {
   15c78:	d00a      	beq.n	15c90 <sys_notify_finalize+0x26>
   15c7a:	2a03      	cmp	r2, #3
   15c7c:	d10b      	bne.n	15c96 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   15c7e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   15c80:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   15c82:	2200      	movs	r2, #0
   15c84:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   15c86:	b108      	cbz	r0, 15c8c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   15c88:	f7ff ff86 	bl	15b98 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15c8c:	4620      	mov	r0, r4
   15c8e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   15c90:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   15c92:	2400      	movs	r4, #0
		break;
   15c94:	e7f5      	b.n	15c82 <sys_notify_finalize+0x18>
	switch (method) {
   15c96:	2400      	movs	r4, #0
   15c98:	4620      	mov	r0, r4
   15c9a:	e7f2      	b.n	15c82 <sys_notify_finalize+0x18>

00015c9c <arch_printk_char_out>:
}
   15c9c:	2000      	movs	r0, #0
   15c9e:	4770      	bx	lr

00015ca0 <str_out>:
{
   15ca0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   15ca2:	688a      	ldr	r2, [r1, #8]
   15ca4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   15ca6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   15ca8:	b114      	cbz	r4, 15cb0 <str_out+0x10>
   15caa:	684b      	ldr	r3, [r1, #4]
   15cac:	4293      	cmp	r3, r2
   15cae:	dc01      	bgt.n	15cb4 <str_out+0x14>
		ctx->count++;
   15cb0:	608d      	str	r5, [r1, #8]
}
   15cb2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   15cb4:	3b01      	subs	r3, #1
   15cb6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   15cb8:	bf08      	it	eq
   15cba:	2200      	moveq	r2, #0
   15cbc:	608d      	str	r5, [r1, #8]
   15cbe:	bf0c      	ite	eq
   15cc0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   15cc2:	54a0      	strbne	r0, [r4, r2]
   15cc4:	e7f5      	b.n	15cb2 <str_out+0x12>

00015cc6 <printk>:
{
   15cc6:	b40f      	push	{r0, r1, r2, r3}
   15cc8:	b507      	push	{r0, r1, r2, lr}
   15cca:	a904      	add	r1, sp, #16
   15ccc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   15cd0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   15cd2:	f7ed fa1f 	bl	3114 <vprintk>
}
   15cd6:	b003      	add	sp, #12
   15cd8:	f85d eb04 	ldr.w	lr, [sp], #4
   15cdc:	b004      	add	sp, #16
   15cde:	4770      	bx	lr

00015ce0 <snprintk>:
{
   15ce0:	b40c      	push	{r2, r3}
   15ce2:	b507      	push	{r0, r1, r2, lr}
   15ce4:	ab04      	add	r3, sp, #16
   15ce6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   15cea:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   15cec:	f7ed fa20 	bl	3130 <vsnprintk>
}
   15cf0:	b003      	add	sp, #12
   15cf2:	f85d eb04 	ldr.w	lr, [sp], #4
   15cf6:	b002      	add	sp, #8
   15cf8:	4770      	bx	lr

00015cfa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15cfa:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   15cfc:	f013 0307 	ands.w	r3, r3, #7
   15d00:	d105      	bne.n	15d0e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   15d02:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   15d04:	2b00      	cmp	r3, #0
   15d06:	bf0c      	ite	eq
   15d08:	2000      	moveq	r0, #0
   15d0a:	2003      	movne	r0, #3
   15d0c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   15d0e:	2b02      	cmp	r3, #2
   15d10:	d105      	bne.n	15d1e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   15d12:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   15d14:	2b00      	cmp	r3, #0
   15d16:	bf14      	ite	ne
   15d18:	2000      	movne	r0, #0
   15d1a:	2004      	moveq	r0, #4
   15d1c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   15d1e:	2b01      	cmp	r3, #1
   15d20:	d105      	bne.n	15d2e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   15d22:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   15d24:	2b00      	cmp	r3, #0
   15d26:	bf0c      	ite	eq
   15d28:	2000      	moveq	r0, #0
   15d2a:	2005      	movne	r0, #5
   15d2c:	4770      	bx	lr
	int evt = EVT_NOP;
   15d2e:	2000      	movs	r0, #0
}
   15d30:	4770      	bx	lr

00015d32 <notify_one>:
{
   15d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d36:	460d      	mov	r5, r1
   15d38:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15d3a:	4619      	mov	r1, r3
   15d3c:	1d28      	adds	r0, r5, #4
{
   15d3e:	4690      	mov	r8, r2
   15d40:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15d42:	f7ff ff92 	bl	15c6a <sys_notify_finalize>
	if (cb) {
   15d46:	4604      	mov	r4, r0
   15d48:	b138      	cbz	r0, 15d5a <notify_one+0x28>
		cb(mgr, cli, state, res);
   15d4a:	4633      	mov	r3, r6
   15d4c:	4642      	mov	r2, r8
   15d4e:	4629      	mov	r1, r5
   15d50:	4638      	mov	r0, r7
   15d52:	46a4      	mov	ip, r4
}
   15d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   15d58:	4760      	bx	ip
}
   15d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015d5e <transition_complete>:
{
   15d5e:	b410      	push	{r4}
	__asm__ volatile(
   15d60:	f04f 0420 	mov.w	r4, #32
   15d64:	f3ef 8211 	mrs	r2, BASEPRI
   15d68:	f384 8812 	msr	BASEPRI_MAX, r4
   15d6c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   15d70:	6141      	str	r1, [r0, #20]
}
   15d72:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   15d74:	2101      	movs	r1, #1
   15d76:	f7ed b9f1 	b.w	315c <process_event>

00015d7a <validate_args>:
{
   15d7a:	b510      	push	{r4, lr}
   15d7c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   15d7e:	b140      	cbz	r0, 15d92 <validate_args+0x18>
   15d80:	b139      	cbz	r1, 15d92 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   15d82:	1d08      	adds	r0, r1, #4
   15d84:	f7ff ff5d 	bl	15c42 <sys_notify_validate>
	if ((rv == 0)
   15d88:	b928      	cbnz	r0, 15d96 <validate_args+0x1c>
	    && ((cli->notify.flags
   15d8a:	68a3      	ldr	r3, [r4, #8]
   15d8c:	f033 0303 	bics.w	r3, r3, #3
   15d90:	d001      	beq.n	15d96 <validate_args+0x1c>
		rv = -EINVAL;
   15d92:	f06f 0015 	mvn.w	r0, #21
}
   15d96:	bd10      	pop	{r4, pc}

00015d98 <onoff_manager_init>:
{
   15d98:	b538      	push	{r3, r4, r5, lr}
   15d9a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   15d9c:	4605      	mov	r5, r0
   15d9e:	b158      	cbz	r0, 15db8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   15da0:	b151      	cbz	r1, 15db8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   15da2:	680b      	ldr	r3, [r1, #0]
   15da4:	b143      	cbz	r3, 15db8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   15da6:	684b      	ldr	r3, [r1, #4]
   15da8:	b133      	cbz	r3, 15db8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15daa:	221c      	movs	r2, #28
   15dac:	2100      	movs	r1, #0
   15dae:	f000 fd2b 	bl	16808 <memset>
   15db2:	612c      	str	r4, [r5, #16]
	return 0;
   15db4:	2000      	movs	r0, #0
}
   15db6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15db8:	f06f 0015 	mvn.w	r0, #21
   15dbc:	e7fb      	b.n	15db6 <onoff_manager_init+0x1e>

00015dbe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15dbe:	b570      	push	{r4, r5, r6, lr}
   15dc0:	4604      	mov	r4, r0
   15dc2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   15dc4:	f7ff ffd9 	bl	15d7a <validate_args>

	if (rv < 0) {
   15dc8:	1e05      	subs	r5, r0, #0
   15dca:	db31      	blt.n	15e30 <onoff_request+0x72>
   15dcc:	f04f 0320 	mov.w	r3, #32
   15dd0:	f3ef 8111 	mrs	r1, BASEPRI
   15dd4:	f383 8812 	msr	BASEPRI_MAX, r3
   15dd8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15ddc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15dde:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   15de0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   15de4:	42ab      	cmp	r3, r5
   15de6:	f000 0207 	and.w	r2, r0, #7
   15dea:	d02e      	beq.n	15e4a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   15dec:	2a02      	cmp	r2, #2
   15dee:	d10e      	bne.n	15e0e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   15df0:	3301      	adds	r3, #1
   15df2:	8363      	strh	r3, [r4, #26]
	rv = state;
   15df4:	4615      	mov	r5, r2
		notify = true;
   15df6:	2301      	movs	r3, #1
	__asm__ volatile(
   15df8:	f381 8811 	msr	BASEPRI, r1
   15dfc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   15e00:	b1b3      	cbz	r3, 15e30 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   15e02:	2300      	movs	r3, #0
   15e04:	4631      	mov	r1, r6
   15e06:	4620      	mov	r0, r4
   15e08:	f7ff ff93 	bl	15d32 <notify_one>
   15e0c:	e010      	b.n	15e30 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   15e0e:	0783      	lsls	r3, r0, #30
   15e10:	d001      	beq.n	15e16 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   15e12:	2a06      	cmp	r2, #6
   15e14:	d10e      	bne.n	15e34 <onoff_request+0x76>
	parent->next = child;
   15e16:	2300      	movs	r3, #0
   15e18:	6033      	str	r3, [r6, #0]
	return list->tail;
   15e1a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   15e1c:	b993      	cbnz	r3, 15e44 <onoff_request+0x86>
	list->head = node;
   15e1e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   15e22:	4615      	mov	r5, r2
   15e24:	b962      	cbnz	r2, 15e40 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   15e26:	460a      	mov	r2, r1
   15e28:	4620      	mov	r0, r4
   15e2a:	2102      	movs	r1, #2
   15e2c:	f7ed f996 	bl	315c <process_event>
		}
	}

	return rv;
}
   15e30:	4628      	mov	r0, r5
   15e32:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   15e34:	2a05      	cmp	r2, #5
   15e36:	bf0c      	ite	eq
   15e38:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   15e3c:	f06f 0504 	mvnne.w	r5, #4
   15e40:	2300      	movs	r3, #0
   15e42:	e7d9      	b.n	15df8 <onoff_request+0x3a>
	parent->next = child;
   15e44:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15e46:	6066      	str	r6, [r4, #4]
}
   15e48:	e7eb      	b.n	15e22 <onoff_request+0x64>
		rv = -EAGAIN;
   15e4a:	f06f 050a 	mvn.w	r5, #10
   15e4e:	e7f7      	b.n	15e40 <onoff_request+0x82>

00015e50 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   15e50:	b510      	push	{r4, lr}
	__asm__ volatile(
   15e52:	f04f 0320 	mov.w	r3, #32
   15e56:	f3ef 8211 	mrs	r2, BASEPRI
   15e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   15e5e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15e62:	8b04      	ldrh	r4, [r0, #24]
   15e64:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   15e68:	2c02      	cmp	r4, #2
   15e6a:	d00a      	beq.n	15e82 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   15e6c:	2c01      	cmp	r4, #1
   15e6e:	bf0c      	ite	eq
   15e70:	f06f 0004 	mvneq.w	r0, #4
   15e74:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   15e78:	f382 8811 	msr	BASEPRI, r2
   15e7c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   15e80:	e008      	b.n	15e94 <onoff_release+0x44>
	mgr->refs -= 1U;
   15e82:	8b43      	ldrh	r3, [r0, #26]
   15e84:	3b01      	subs	r3, #1
   15e86:	b29b      	uxth	r3, r3
   15e88:	8343      	strh	r3, [r0, #26]
	if (stop) {
   15e8a:	b923      	cbnz	r3, 15e96 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   15e8c:	4621      	mov	r1, r4
   15e8e:	f7ed f965 	bl	315c <process_event>
	int rv = state;
   15e92:	4620      	mov	r0, r4
}
   15e94:	bd10      	pop	{r4, pc}
	int rv = state;
   15e96:	4620      	mov	r0, r4
   15e98:	e7ee      	b.n	15e78 <onoff_release+0x28>

00015e9a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   15e9a:	4604      	mov	r4, r0
   15e9c:	b508      	push	{r3, lr}
   15e9e:	4608      	mov	r0, r1
   15ea0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   15ea2:	461a      	mov	r2, r3
   15ea4:	47a0      	blx	r4
	return z_impl_z_current_get();
   15ea6:	f7ff fc51 	bl	1574c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   15eaa:	f7ee fa4d 	bl	4348 <z_impl_k_thread_abort>

00015eae <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   15eae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   15eb2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   15eb4:	0840      	lsrs	r0, r0, #1
   15eb6:	4770      	bx	lr

00015eb8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   15eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eba:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   15ebc:	f7ff fff7 	bl	15eae <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   15ec0:	fab0 f080 	clz	r0, r0
   15ec4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   15ec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   15ecc:	00ca      	lsls	r2, r1, #3
   15ece:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   15ed2:	1d17      	adds	r7, r2, #4
{
   15ed4:	460c      	mov	r4, r1
   15ed6:	3206      	adds	r2, #6
   15ed8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   15eda:	b956      	cbnz	r6, 15ef2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   15edc:	2101      	movs	r1, #1
   15ede:	fa01 f000 	lsl.w	r0, r1, r0
   15ee2:	68d9      	ldr	r1, [r3, #12]
   15ee4:	4301      	orrs	r1, r0
   15ee6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   15ee8:	f8cc 4010 	str.w	r4, [ip, #16]
   15eec:	53dd      	strh	r5, [r3, r7]
   15eee:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   15ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   15ef2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   15ef4:	3104      	adds	r1, #4
   15ef6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   15ef8:	53d8      	strh	r0, [r3, r7]
   15efa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15efe:	529e      	strh	r6, [r3, r2]
   15f00:	80c5      	strh	r5, [r0, #6]
   15f02:	525d      	strh	r5, [r3, r1]
   15f04:	e7f4      	b.n	15ef0 <free_list_add+0x38>

00015f06 <free_list_remove_bidx>:
{
   15f06:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   15f08:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   15f0c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   15f0e:	4299      	cmp	r1, r3
   15f10:	f102 0104 	add.w	r1, r2, #4
   15f14:	d10a      	bne.n	15f2c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   15f16:	2301      	movs	r3, #1
   15f18:	fa03 f202 	lsl.w	r2, r3, r2
   15f1c:	68c3      	ldr	r3, [r0, #12]
   15f1e:	ea23 0302 	bic.w	r3, r3, r2
   15f22:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   15f24:	2300      	movs	r3, #0
   15f26:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   15f2a:	bd10      	pop	{r4, pc}
   15f2c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   15f2e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   15f32:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   15f36:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   15f3a:	80cb      	strh	r3, [r1, #6]
   15f3c:	8082      	strh	r2, [r0, #4]
}
   15f3e:	e7f4      	b.n	15f2a <free_list_remove_bidx+0x24>

00015f40 <free_list_remove>:
{
   15f40:	b508      	push	{r3, lr}
   15f42:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   15f44:	f7ff ffb3 	bl	15eae <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   15f48:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   15f4c:	f1c2 021f 	rsb	r2, r2, #31
   15f50:	4618      	mov	r0, r3
}
   15f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   15f56:	f7ff bfd6 	b.w	15f06 <free_list_remove_bidx>

00015f5a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   15f5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f5e:	fab1 f581 	clz	r5, r1
   15f62:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   15f66:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   15f6a:	4603      	mov	r3, r0
	if (b->next) {
   15f6c:	693a      	ldr	r2, [r7, #16]
{
   15f6e:	460e      	mov	r6, r1
	if (b->next) {
   15f70:	b1c2      	cbz	r2, 15fa4 <alloc_chunk+0x4a>
   15f72:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   15f76:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   15f78:	4618      	mov	r0, r3
   15f7a:	4621      	mov	r1, r4
   15f7c:	f7ff ff97 	bl	15eae <chunk_size>
   15f80:	42b0      	cmp	r0, r6
   15f82:	d306      	bcc.n	15f92 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   15f84:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   15f86:	4618      	mov	r0, r3
   15f88:	f7ff ffbd 	bl	15f06 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   15f8c:	4620      	mov	r0, r4
   15f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   15f92:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   15f96:	f1b8 0801 	subs.w	r8, r8, #1
   15f9a:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   15f9c:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   15f9e:	d001      	beq.n	15fa4 <alloc_chunk+0x4a>
   15fa0:	4282      	cmp	r2, r0
   15fa2:	d1e8      	bne.n	15f76 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   15fa4:	f1c5 0220 	rsb	r2, r5, #32
   15fa8:	f04f 34ff 	mov.w	r4, #4294967295
   15fac:	4094      	lsls	r4, r2
   15fae:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   15fb0:	4014      	ands	r4, r2
   15fb2:	d0eb      	beq.n	15f8c <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   15fb4:	fa94 f2a4 	rbit	r2, r4
   15fb8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   15fbc:	1d11      	adds	r1, r2, #4
   15fbe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   15fc2:	4621      	mov	r1, r4
   15fc4:	e7df      	b.n	15f86 <alloc_chunk+0x2c>

00015fc6 <merge_chunks>:
{
   15fc6:	b538      	push	{r3, r4, r5, lr}
   15fc8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   15fca:	f7ff ff70 	bl	15eae <chunk_size>
{
   15fce:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   15fd0:	4604      	mov	r4, r0
   15fd2:	4611      	mov	r1, r2
   15fd4:	4618      	mov	r0, r3
   15fd6:	f7ff ff6a 	bl	15eae <chunk_size>
		((uint16_t *)cmem)[f] = val;
   15fda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   15fde:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15fe0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   15fe2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   15fe4:	4618      	mov	r0, r3
   15fe6:	f7ff ff62 	bl	15eae <chunk_size>
	void *cmem = &buf[c];
   15fea:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   15fec:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   15ff0:	bd38      	pop	{r3, r4, r5, pc}

00015ff2 <split_chunks>:
{
   15ff2:	b538      	push	{r3, r4, r5, lr}
   15ff4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   15ff6:	f7ff ff5a 	bl	15eae <chunk_size>
{
   15ffa:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   15ffc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   15ffe:	1a51      	subs	r1, r2, r1
   16000:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   16004:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16006:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   16008:	8060      	strh	r0, [r4, #2]
   1600a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1600e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   16010:	8044      	strh	r4, [r0, #2]
   16012:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   16016:	4618      	mov	r0, r3
   16018:	4611      	mov	r1, r2
   1601a:	f7ff ff48 	bl	15eae <chunk_size>
	void *cmem = &buf[c];
   1601e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16020:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   16024:	bd38      	pop	{r3, r4, r5, pc}

00016026 <free_chunk>:
{
   16026:	b538      	push	{r3, r4, r5, lr}
   16028:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1602a:	f7ff ff40 	bl	15eae <chunk_size>
   1602e:	460c      	mov	r4, r1
   16030:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   16032:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   16036:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   16038:	07da      	lsls	r2, r3, #31
   1603a:	d40a      	bmi.n	16052 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1603c:	4628      	mov	r0, r5
   1603e:	f7ff ff7f 	bl	15f40 <free_list_remove>
	return c + chunk_size(h, c);
   16042:	4621      	mov	r1, r4
   16044:	4628      	mov	r0, r5
   16046:	f7ff ff32 	bl	15eae <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1604a:	1822      	adds	r2, r4, r0
   1604c:	4628      	mov	r0, r5
   1604e:	f7ff ffba 	bl	15fc6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   16052:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   16056:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   16058:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1605c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1605e:	07db      	lsls	r3, r3, #31
   16060:	d40c      	bmi.n	1607c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   16062:	4628      	mov	r0, r5
   16064:	f7ff ff6c 	bl	15f40 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   16068:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1606c:	4622      	mov	r2, r4
   1606e:	1a61      	subs	r1, r4, r1
   16070:	4628      	mov	r0, r5
   16072:	f7ff ffa8 	bl	15fc6 <merge_chunks>
   16076:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1607a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1607c:	4621      	mov	r1, r4
   1607e:	4628      	mov	r0, r5
}
   16080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   16084:	f7ff bf18 	b.w	15eb8 <free_list_add>

00016088 <sys_heap_free>:
	if (mem == NULL) {
   16088:	b161      	cbz	r1, 160a4 <sys_heap_free+0x1c>
   1608a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1608c:	3904      	subs	r1, #4
   1608e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   16090:	f021 0307 	bic.w	r3, r1, #7
   16094:	4403      	add	r3, r0
	free_chunk(h, c);
   16096:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   16098:	885a      	ldrh	r2, [r3, #2]
   1609a:	f022 0201 	bic.w	r2, r2, #1
   1609e:	805a      	strh	r2, [r3, #2]
   160a0:	f7ff bfc1 	b.w	16026 <free_chunk>
}
   160a4:	4770      	bx	lr

000160a6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   160a6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   160a8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   160aa:	b909      	cbnz	r1, 160b0 <sys_heap_alloc+0xa>
		return NULL;
   160ac:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   160ae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   160b0:	68ab      	ldr	r3, [r5, #8]
   160b2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   160b6:	d9f9      	bls.n	160ac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   160b8:	310b      	adds	r1, #11
   160ba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   160bc:	4621      	mov	r1, r4
   160be:	4628      	mov	r0, r5
   160c0:	f7ff ff4b 	bl	15f5a <alloc_chunk>
	if (c == 0U) {
   160c4:	4606      	mov	r6, r0
   160c6:	2800      	cmp	r0, #0
   160c8:	d0f0      	beq.n	160ac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   160ca:	4601      	mov	r1, r0
   160cc:	4628      	mov	r0, r5
   160ce:	f7ff feee 	bl	15eae <chunk_size>
   160d2:	42a0      	cmp	r0, r4
   160d4:	d907      	bls.n	160e6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   160d6:	1932      	adds	r2, r6, r4
   160d8:	4628      	mov	r0, r5
   160da:	f7ff ff8a 	bl	15ff2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   160de:	4611      	mov	r1, r2
   160e0:	4628      	mov	r0, r5
   160e2:	f7ff fee9 	bl	15eb8 <free_list_add>
	void *cmem = &buf[c];
   160e6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   160ea:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   160ec:	8853      	ldrh	r3, [r2, #2]
   160ee:	f043 0301 	orr.w	r3, r3, #1
   160f2:	8053      	strh	r3, [r2, #2]
   160f4:	3004      	adds	r0, #4
	return mem;
   160f6:	e7da      	b.n	160ae <sys_heap_alloc+0x8>

000160f8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   160f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   160fc:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   160fe:	424a      	negs	r2, r1
   16100:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   16104:	ea31 0202 	bics.w	r2, r1, r2
{
   16108:	4603      	mov	r3, r0
	if (align != rew) {
   1610a:	d00a      	beq.n	16122 <sys_heap_aligned_alloc+0x2a>
		return false;
   1610c:	2f04      	cmp	r7, #4
   1610e:	463a      	mov	r2, r7
   16110:	46b9      	mov	r9, r7
   16112:	bf28      	it	cs
   16114:	2204      	movcs	r2, #4
		align -= rew;
   16116:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16118:	b974      	cbnz	r4, 16138 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1611a:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1611c:	4628      	mov	r0, r5
   1611e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   16122:	2904      	cmp	r1, #4
   16124:	d804      	bhi.n	16130 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   16126:	4621      	mov	r1, r4
}
   16128:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1612c:	f7ff bfbb 	b.w	160a6 <sys_heap_alloc>
		rew = 0;
   16130:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   16134:	2204      	movs	r2, #4
   16136:	e7ef      	b.n	16118 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   16138:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1613a:	68b3      	ldr	r3, [r6, #8]
   1613c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   16140:	d9eb      	bls.n	1611a <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16142:	f104 010b 	add.w	r1, r4, #11
   16146:	4439      	add	r1, r7
   16148:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1614a:	08c9      	lsrs	r1, r1, #3
   1614c:	4630      	mov	r0, r6
   1614e:	f7ff ff04 	bl	15f5a <alloc_chunk>
	if (c0 == 0) {
   16152:	4680      	mov	r8, r0
   16154:	2800      	cmp	r0, #0
   16156:	d0e0      	beq.n	1611a <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   16158:	f109 0504 	add.w	r5, r9, #4
   1615c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   16160:	1e7b      	subs	r3, r7, #1
   16162:	4435      	add	r5, r6
   16164:	441d      	add	r5, r3
   16166:	427f      	negs	r7, r7
   16168:	403d      	ands	r5, r7
   1616a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1616e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16170:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16172:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16174:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16176:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1617a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1617c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16180:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   16184:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   16188:	d208      	bcs.n	1619c <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1618a:	4601      	mov	r1, r0
   1618c:	463a      	mov	r2, r7
   1618e:	4630      	mov	r0, r6
   16190:	f7ff ff2f 	bl	15ff2 <split_chunks>
		free_list_add(h, c0);
   16194:	4641      	mov	r1, r8
   16196:	4630      	mov	r0, r6
   16198:	f7ff fe8e 	bl	15eb8 <free_list_add>
	return c + chunk_size(h, c);
   1619c:	4639      	mov	r1, r7
   1619e:	4630      	mov	r0, r6
   161a0:	f7ff fe85 	bl	15eae <chunk_size>
   161a4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   161a6:	4284      	cmp	r4, r0
   161a8:	d207      	bcs.n	161ba <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   161aa:	4630      	mov	r0, r6
   161ac:	4622      	mov	r2, r4
   161ae:	f7ff ff20 	bl	15ff2 <split_chunks>
		free_list_add(h, c_end);
   161b2:	4621      	mov	r1, r4
   161b4:	4630      	mov	r0, r6
   161b6:	f7ff fe7f 	bl	15eb8 <free_list_add>
	void *cmem = &buf[c];
   161ba:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   161be:	8873      	ldrh	r3, [r6, #2]
   161c0:	f043 0301 	orr.w	r3, r3, #1
   161c4:	8073      	strh	r3, [r6, #2]
   161c6:	e7a9      	b.n	1611c <sys_heap_aligned_alloc+0x24>

000161c8 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   161c8:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   161ca:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   161cc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   161ce:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   161d2:	f021 0107 	bic.w	r1, r1, #7
{
   161d6:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   161d8:	1acd      	subs	r5, r1, r3
   161da:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   161dc:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   161de:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   161e2:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   161e6:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   161e8:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   161ea:	2600      	movs	r6, #0
   161ec:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   161ee:	f1c0 0020 	rsb	r0, r0, #32
   161f2:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   161f6:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   161f8:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   161fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   161fe:	4284      	cmp	r4, r0
   16200:	d118      	bne.n	16234 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16202:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16204:	f040 0001 	orr.w	r0, r0, #1
   16208:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1620a:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1620e:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16210:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   16212:	801e      	strh	r6, [r3, #0]
   16214:	8067      	strh	r7, [r4, #2]
   16216:	195c      	adds	r4, r3, r5
   16218:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1621c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   16220:	8066      	strh	r6, [r4, #2]
   16222:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16224:	8850      	ldrh	r0, [r2, #2]
   16226:	f040 0001 	orr.w	r0, r0, #1
   1622a:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1622c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1622e:	4618      	mov	r0, r3
   16230:	f7ff be42 	b.w	15eb8 <free_list_add>
		h->buckets[i].next = 0;
   16234:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   16238:	e7e1      	b.n	161fe <sys_heap_init+0x36>

0001623a <encode_uint>:
{
   1623a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1623e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   16240:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   16242:	2b6f      	cmp	r3, #111	; 0x6f
{
   16244:	4680      	mov	r8, r0
   16246:	460f      	mov	r7, r1
   16248:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1624a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1624e:	d029      	beq.n	162a4 <encode_uint+0x6a>
   16250:	d824      	bhi.n	1629c <encode_uint+0x62>
		return 16;
   16252:	2b58      	cmp	r3, #88	; 0x58
   16254:	bf14      	ite	ne
   16256:	260a      	movne	r6, #10
   16258:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1625a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1625e:	4632      	mov	r2, r6
   16260:	2300      	movs	r3, #0
   16262:	4640      	mov	r0, r8
   16264:	4639      	mov	r1, r7
   16266:	f7e9 ff4b 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1626a:	2a09      	cmp	r2, #9
   1626c:	b2d4      	uxtb	r4, r2
   1626e:	d81e      	bhi.n	162ae <encode_uint+0x74>
   16270:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   16272:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16274:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   16276:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1627a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1627e:	d301      	bcc.n	16284 <encode_uint+0x4a>
   16280:	45d1      	cmp	r9, sl
   16282:	d811      	bhi.n	162a8 <encode_uint+0x6e>
	if (conv->flag_hash) {
   16284:	782b      	ldrb	r3, [r5, #0]
   16286:	069b      	lsls	r3, r3, #26
   16288:	d505      	bpl.n	16296 <encode_uint+0x5c>
		if (radix == 8) {
   1628a:	2e08      	cmp	r6, #8
   1628c:	d115      	bne.n	162ba <encode_uint+0x80>
			conv->altform_0 = true;
   1628e:	78ab      	ldrb	r3, [r5, #2]
   16290:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   16294:	70ab      	strb	r3, [r5, #2]
}
   16296:	4648      	mov	r0, r9
   16298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1629c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   162a0:	2b70      	cmp	r3, #112	; 0x70
   162a2:	e7d7      	b.n	16254 <encode_uint+0x1a>
	switch (specifier) {
   162a4:	2608      	movs	r6, #8
   162a6:	e7d8      	b.n	1625a <encode_uint+0x20>
		value /= radix;
   162a8:	4680      	mov	r8, r0
   162aa:	460f      	mov	r7, r1
   162ac:	e7d7      	b.n	1625e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   162ae:	f1bb 0f19 	cmp.w	fp, #25
   162b2:	bf94      	ite	ls
   162b4:	3437      	addls	r4, #55	; 0x37
   162b6:	3457      	addhi	r4, #87	; 0x57
   162b8:	e7db      	b.n	16272 <encode_uint+0x38>
		} else if (radix == 16) {
   162ba:	2e10      	cmp	r6, #16
   162bc:	d1eb      	bne.n	16296 <encode_uint+0x5c>
			conv->altform_0c = true;
   162be:	78ab      	ldrb	r3, [r5, #2]
   162c0:	f043 0310 	orr.w	r3, r3, #16
   162c4:	e7e6      	b.n	16294 <encode_uint+0x5a>

000162c6 <outs>:
{
   162c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162ca:	4607      	mov	r7, r0
   162cc:	4688      	mov	r8, r1
   162ce:	4615      	mov	r5, r2
   162d0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   162d2:	4614      	mov	r4, r2
   162d4:	42b4      	cmp	r4, r6
   162d6:	eba4 0005 	sub.w	r0, r4, r5
   162da:	d302      	bcc.n	162e2 <outs+0x1c>
   162dc:	b93e      	cbnz	r6, 162ee <outs+0x28>
   162de:	7823      	ldrb	r3, [r4, #0]
   162e0:	b12b      	cbz	r3, 162ee <outs+0x28>
		int rc = out((int)*sp++, ctx);
   162e2:	f814 0b01 	ldrb.w	r0, [r4], #1
   162e6:	4641      	mov	r1, r8
   162e8:	47b8      	blx	r7
		if (rc < 0) {
   162ea:	2800      	cmp	r0, #0
   162ec:	daf2      	bge.n	162d4 <outs+0xe>
}
   162ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000162f2 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   162f2:	b40f      	push	{r0, r1, r2, r3}
   162f4:	b507      	push	{r0, r1, r2, lr}
   162f6:	a904      	add	r1, sp, #16
   162f8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   162fc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   162fe:	f7ec ff09 	bl	3114 <vprintk>

	va_end(ap);
}
   16302:	b003      	add	sp, #12
   16304:	f85d eb04 	ldr.w	lr, [sp], #4
   16308:	b004      	add	sp, #16
   1630a:	4770      	bx	lr

0001630c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1630c:	4770      	bx	lr

0001630e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1630e:	b538      	push	{r3, r4, r5, lr}
   16310:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   16312:	42ab      	cmp	r3, r5
{
   16314:	4611      	mov	r1, r2
   16316:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   16318:	d804      	bhi.n	16324 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1631a:	461a      	mov	r2, r3
   1631c:	f000 fa69 	bl	167f2 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   16320:	4620      	mov	r0, r4
   16322:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   16324:	2400      	movs	r4, #0
   16326:	e7fb      	b.n	16320 <_copy+0x12>

00016328 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   16328:	f000 ba6e 	b.w	16808 <memset>

0001632c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1632c:	09c3      	lsrs	r3, r0, #7
   1632e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16332:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   16336:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1633a:	b2c0      	uxtb	r0, r0
   1633c:	4770      	bx	lr

0001633e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1633e:	78cb      	ldrb	r3, [r1, #3]
   16340:	7802      	ldrb	r2, [r0, #0]
   16342:	4053      	eors	r3, r2
   16344:	7003      	strb	r3, [r0, #0]
   16346:	884b      	ldrh	r3, [r1, #2]
   16348:	7842      	ldrb	r2, [r0, #1]
   1634a:	4053      	eors	r3, r2
   1634c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1634e:	680a      	ldr	r2, [r1, #0]
   16350:	7883      	ldrb	r3, [r0, #2]
   16352:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16356:	7083      	strb	r3, [r0, #2]
   16358:	680a      	ldr	r2, [r1, #0]
   1635a:	78c3      	ldrb	r3, [r0, #3]
   1635c:	4053      	eors	r3, r2
   1635e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   16360:	79cb      	ldrb	r3, [r1, #7]
   16362:	7902      	ldrb	r2, [r0, #4]
   16364:	4053      	eors	r3, r2
   16366:	7103      	strb	r3, [r0, #4]
   16368:	88cb      	ldrh	r3, [r1, #6]
   1636a:	7942      	ldrb	r2, [r0, #5]
   1636c:	4053      	eors	r3, r2
   1636e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   16370:	684a      	ldr	r2, [r1, #4]
   16372:	7983      	ldrb	r3, [r0, #6]
   16374:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16378:	7183      	strb	r3, [r0, #6]
   1637a:	684a      	ldr	r2, [r1, #4]
   1637c:	79c3      	ldrb	r3, [r0, #7]
   1637e:	4053      	eors	r3, r2
   16380:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   16382:	7acb      	ldrb	r3, [r1, #11]
   16384:	7a02      	ldrb	r2, [r0, #8]
   16386:	4053      	eors	r3, r2
   16388:	7203      	strb	r3, [r0, #8]
   1638a:	7a42      	ldrb	r2, [r0, #9]
   1638c:	894b      	ldrh	r3, [r1, #10]
   1638e:	4053      	eors	r3, r2
   16390:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   16392:	688a      	ldr	r2, [r1, #8]
   16394:	7a83      	ldrb	r3, [r0, #10]
   16396:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1639a:	7283      	strb	r3, [r0, #10]
   1639c:	688a      	ldr	r2, [r1, #8]
   1639e:	7ac3      	ldrb	r3, [r0, #11]
   163a0:	4053      	eors	r3, r2
   163a2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   163a4:	7bcb      	ldrb	r3, [r1, #15]
   163a6:	7b02      	ldrb	r2, [r0, #12]
   163a8:	4053      	eors	r3, r2
   163aa:	7303      	strb	r3, [r0, #12]
   163ac:	89cb      	ldrh	r3, [r1, #14]
   163ae:	7b42      	ldrb	r2, [r0, #13]
   163b0:	4053      	eors	r3, r2
   163b2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   163b4:	68ca      	ldr	r2, [r1, #12]
   163b6:	7b83      	ldrb	r3, [r0, #14]
   163b8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   163bc:	7383      	strb	r3, [r0, #14]
   163be:	68ca      	ldr	r2, [r1, #12]
   163c0:	7bc3      	ldrb	r3, [r0, #15]
   163c2:	4053      	eors	r3, r2
   163c4:	73c3      	strb	r3, [r0, #15]
}
   163c6:	4770      	bx	lr

000163c8 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   163c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   163ca:	7802      	ldrb	r2, [r0, #0]
   163cc:	f88d 2000 	strb.w	r2, [sp]
   163d0:	7942      	ldrb	r2, [r0, #5]
   163d2:	f88d 2001 	strb.w	r2, [sp, #1]
   163d6:	7a82      	ldrb	r2, [r0, #10]
   163d8:	f88d 2002 	strb.w	r2, [sp, #2]
   163dc:	7bc2      	ldrb	r2, [r0, #15]
   163de:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   163e2:	7902      	ldrb	r2, [r0, #4]
   163e4:	f88d 2004 	strb.w	r2, [sp, #4]
   163e8:	7a42      	ldrb	r2, [r0, #9]
   163ea:	f88d 2005 	strb.w	r2, [sp, #5]
   163ee:	7b82      	ldrb	r2, [r0, #14]
   163f0:	f88d 2006 	strb.w	r2, [sp, #6]
   163f4:	78c2      	ldrb	r2, [r0, #3]
   163f6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   163fa:	7a02      	ldrb	r2, [r0, #8]
   163fc:	f88d 2008 	strb.w	r2, [sp, #8]
   16400:	7b42      	ldrb	r2, [r0, #13]
   16402:	f88d 2009 	strb.w	r2, [sp, #9]
   16406:	7882      	ldrb	r2, [r0, #2]
   16408:	f88d 200a 	strb.w	r2, [sp, #10]
   1640c:	79c2      	ldrb	r2, [r0, #7]
   1640e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   16412:	7b02      	ldrb	r2, [r0, #12]
   16414:	f88d 200c 	strb.w	r2, [sp, #12]
   16418:	7842      	ldrb	r2, [r0, #1]
   1641a:	7ac3      	ldrb	r3, [r0, #11]
   1641c:	f88d 200d 	strb.w	r2, [sp, #13]
   16420:	7982      	ldrb	r2, [r0, #6]
   16422:	f88d 200e 	strb.w	r2, [sp, #14]
   16426:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1642a:	2310      	movs	r3, #16
   1642c:	466a      	mov	r2, sp
   1642e:	4619      	mov	r1, r3
   16430:	f7ff ff6d 	bl	1630e <_copy>
}
   16434:	b005      	add	sp, #20
   16436:	f85d fb04 	ldr.w	pc, [sp], #4

0001643a <mult_row_column>:
{
   1643a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1643c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1643e:	7808      	ldrb	r0, [r1, #0]
{
   16440:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   16442:	f7ff ff73 	bl	1632c <_double_byte>
   16446:	4605      	mov	r5, r0
   16448:	7860      	ldrb	r0, [r4, #1]
   1644a:	f7ff ff6f 	bl	1632c <_double_byte>
   1644e:	78a2      	ldrb	r2, [r4, #2]
   16450:	7863      	ldrb	r3, [r4, #1]
   16452:	4053      	eors	r3, r2
   16454:	78e2      	ldrb	r2, [r4, #3]
   16456:	4053      	eors	r3, r2
   16458:	405d      	eors	r5, r3
   1645a:	4045      	eors	r5, r0
   1645c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1645e:	7860      	ldrb	r0, [r4, #1]
   16460:	7827      	ldrb	r7, [r4, #0]
   16462:	f7ff ff63 	bl	1632c <_double_byte>
   16466:	4605      	mov	r5, r0
   16468:	78a0      	ldrb	r0, [r4, #2]
   1646a:	f7ff ff5f 	bl	1632c <_double_byte>
   1646e:	78a3      	ldrb	r3, [r4, #2]
   16470:	405f      	eors	r7, r3
   16472:	78e3      	ldrb	r3, [r4, #3]
   16474:	405f      	eors	r7, r3
   16476:	407d      	eors	r5, r7
   16478:	4045      	eors	r5, r0
   1647a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1647c:	78a0      	ldrb	r0, [r4, #2]
   1647e:	7865      	ldrb	r5, [r4, #1]
   16480:	7827      	ldrb	r7, [r4, #0]
   16482:	f7ff ff53 	bl	1632c <_double_byte>
   16486:	406f      	eors	r7, r5
   16488:	4605      	mov	r5, r0
   1648a:	78e0      	ldrb	r0, [r4, #3]
   1648c:	f7ff ff4e 	bl	1632c <_double_byte>
   16490:	78e3      	ldrb	r3, [r4, #3]
   16492:	405f      	eors	r7, r3
   16494:	407d      	eors	r5, r7
   16496:	4045      	eors	r5, r0
   16498:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1649a:	7820      	ldrb	r0, [r4, #0]
   1649c:	f7ff ff46 	bl	1632c <_double_byte>
   164a0:	7863      	ldrb	r3, [r4, #1]
   164a2:	7825      	ldrb	r5, [r4, #0]
   164a4:	405d      	eors	r5, r3
   164a6:	78a3      	ldrb	r3, [r4, #2]
   164a8:	405d      	eors	r5, r3
   164aa:	4045      	eors	r5, r0
   164ac:	78e0      	ldrb	r0, [r4, #3]
   164ae:	f7ff ff3d 	bl	1632c <_double_byte>
   164b2:	b2ed      	uxtb	r5, r5
   164b4:	4045      	eors	r5, r0
   164b6:	70f5      	strb	r5, [r6, #3]
}
   164b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000164ba <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   164ba:	b570      	push	{r4, r5, r6, lr}
   164bc:	4614      	mov	r4, r2
   164be:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   164c0:	4605      	mov	r5, r0
   164c2:	2800      	cmp	r0, #0
   164c4:	d049      	beq.n	1655a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   164c6:	2900      	cmp	r1, #0
   164c8:	d049      	beq.n	1655e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   164ca:	2a00      	cmp	r2, #0
   164cc:	d049      	beq.n	16562 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   164ce:	2310      	movs	r3, #16
   164d0:	460a      	mov	r2, r1
   164d2:	4668      	mov	r0, sp
   164d4:	4619      	mov	r1, r3
   164d6:	f7ff ff1a 	bl	1630e <_copy>
	add_round_key(state, s->words);
   164da:	4621      	mov	r1, r4
   164dc:	4668      	mov	r0, sp
   164de:	f7ff ff2e 	bl	1633e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   164e2:	3410      	adds	r4, #16
   164e4:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   164e8:	4668      	mov	r0, sp
   164ea:	f7ed fc43 	bl	3d74 <sub_bytes>
		shift_rows(state);
   164ee:	4668      	mov	r0, sp
   164f0:	f7ff ff6a 	bl	163c8 <shift_rows>
	mult_row_column(t, s);
   164f4:	4669      	mov	r1, sp
   164f6:	a804      	add	r0, sp, #16
   164f8:	f7ff ff9f 	bl	1643a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   164fc:	a901      	add	r1, sp, #4
   164fe:	a805      	add	r0, sp, #20
   16500:	f7ff ff9b 	bl	1643a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   16504:	a902      	add	r1, sp, #8
   16506:	a806      	add	r0, sp, #24
   16508:	f7ff ff97 	bl	1643a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1650c:	a903      	add	r1, sp, #12
   1650e:	a807      	add	r0, sp, #28
   16510:	f7ff ff93 	bl	1643a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   16514:	2310      	movs	r3, #16
   16516:	4619      	mov	r1, r3
   16518:	eb0d 0203 	add.w	r2, sp, r3
   1651c:	4668      	mov	r0, sp
   1651e:	f7ff fef6 	bl	1630e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   16522:	4621      	mov	r1, r4
   16524:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   16526:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   16528:	f7ff ff09 	bl	1633e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1652c:	42a6      	cmp	r6, r4
   1652e:	d1db      	bne.n	164e8 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   16530:	f7ed fc20 	bl	3d74 <sub_bytes>
	shift_rows(state);
   16534:	4668      	mov	r0, sp
   16536:	f7ff ff47 	bl	163c8 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1653a:	4631      	mov	r1, r6
   1653c:	4668      	mov	r0, sp
   1653e:	f7ff fefe 	bl	1633e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   16542:	2310      	movs	r3, #16
   16544:	4619      	mov	r1, r3
   16546:	466a      	mov	r2, sp
   16548:	4628      	mov	r0, r5
   1654a:	f7ff fee0 	bl	1630e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1654e:	4668      	mov	r0, sp
   16550:	2210      	movs	r2, #16
   16552:	2100      	movs	r1, #0
   16554:	f7ff fee8 	bl	16328 <_set>

	return TC_CRYPTO_SUCCESS;
   16558:	2001      	movs	r0, #1
}
   1655a:	b008      	add	sp, #32
   1655c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1655e:	4608      	mov	r0, r1
   16560:	e7fb      	b.n	1655a <tc_aes_encrypt+0xa0>
   16562:	4610      	mov	r0, r2
   16564:	e7f9      	b.n	1655a <tc_aes_encrypt+0xa0>

00016566 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   16566:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   16568:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1656a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1656c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   16570:	2b00      	cmp	r3, #0
   16572:	bfb4      	ite	lt
   16574:	2387      	movlt	r3, #135	; 0x87
   16576:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   16578:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1657c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   16580:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   16582:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   16586:	d002      	beq.n	1658e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   16588:	7813      	ldrb	r3, [r2, #0]
   1658a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1658c:	e7f4      	b.n	16578 <gf_double+0x12>
	}
}
   1658e:	bd10      	pop	{r4, pc}

00016590 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   16590:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   16592:	b120      	cbz	r0, 1659e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   16594:	2258      	movs	r2, #88	; 0x58
   16596:	2100      	movs	r1, #0
   16598:	f7ff fec6 	bl	16328 <_set>
   1659c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1659e:	bd08      	pop	{r3, pc}

000165a0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   165a0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   165a2:	4604      	mov	r4, r0
   165a4:	b188      	cbz	r0, 165ca <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   165a6:	2210      	movs	r2, #16
   165a8:	2100      	movs	r1, #0
   165aa:	f7ff febd 	bl	16328 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   165ae:	2210      	movs	r2, #16
   165b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   165b4:	2100      	movs	r1, #0
   165b6:	f7ff feb7 	bl	16328 <_set>
	s->leftover_offset = 0;
   165ba:	2300      	movs	r3, #0
   165bc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   165be:	2200      	movs	r2, #0
   165c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   165c4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   165c8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   165ca:	bd10      	pop	{r4, pc}

000165cc <tc_cmac_setup>:
{
   165cc:	b570      	push	{r4, r5, r6, lr}
   165ce:	460d      	mov	r5, r1
   165d0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   165d2:	4604      	mov	r4, r0
   165d4:	b310      	cbz	r0, 1661c <tc_cmac_setup+0x50>
   165d6:	b311      	cbz	r1, 1661e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   165d8:	2258      	movs	r2, #88	; 0x58
   165da:	2100      	movs	r1, #0
   165dc:	f7ff fea4 	bl	16328 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   165e0:	4629      	mov	r1, r5
	s->sched = sched;
   165e2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   165e4:	4630      	mov	r0, r6
   165e6:	f7ed fbd1 	bl	3d8c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   165ea:	2210      	movs	r2, #16
   165ec:	2100      	movs	r1, #0
   165ee:	4620      	mov	r0, r4
   165f0:	f7ff fe9a 	bl	16328 <_set>
	gf_double (s->K1, s->iv);
   165f4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   165f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   165fa:	4621      	mov	r1, r4
   165fc:	4620      	mov	r0, r4
   165fe:	f7ff ff5c 	bl	164ba <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   16602:	4621      	mov	r1, r4
   16604:	4628      	mov	r0, r5
   16606:	f7ff ffae 	bl	16566 <gf_double>
	gf_double (s->K2, s->K1);
   1660a:	4629      	mov	r1, r5
   1660c:	f104 0020 	add.w	r0, r4, #32
   16610:	f7ff ffa9 	bl	16566 <gf_double>
	tc_cmac_init(s);
   16614:	4620      	mov	r0, r4
   16616:	f7ff ffc3 	bl	165a0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1661a:	2001      	movs	r0, #1
}
   1661c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1661e:	4608      	mov	r0, r1
   16620:	e7fc      	b.n	1661c <tc_cmac_setup+0x50>

00016622 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   16622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16626:	460d      	mov	r5, r1
   16628:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1662a:	4604      	mov	r4, r0
   1662c:	2800      	cmp	r0, #0
   1662e:	d061      	beq.n	166f4 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   16630:	b912      	cbnz	r2, 16638 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   16632:	2001      	movs	r0, #1
}
   16634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   16638:	2900      	cmp	r1, #0
   1663a:	d05b      	beq.n	166f4 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1663c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   16640:	ea53 0102 	orrs.w	r1, r3, r2
   16644:	d056      	beq.n	166f4 <tc_cmac_update+0xd2>
	s->countdown--;
   16646:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   16648:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1664c:	f142 32ff 	adc.w	r2, r2, #4294967295
   16650:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   16654:	f1b8 0f00 	cmp.w	r8, #0
   16658:	d02a      	beq.n	166b0 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1665a:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1665e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   16662:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   16664:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   16666:	d208      	bcs.n	1667a <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   16668:	462a      	mov	r2, r5
   1666a:	4633      	mov	r3, r6
   1666c:	4631      	mov	r1, r6
   1666e:	f7ff fe4e 	bl	1630e <_copy>
			s->leftover_offset += data_length;
   16672:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16674:	4432      	add	r2, r6
   16676:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   16678:	e7db      	b.n	16632 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1667a:	463b      	mov	r3, r7
   1667c:	462a      	mov	r2, r5
   1667e:	4639      	mov	r1, r7
   16680:	f7ff fe45 	bl	1630e <_copy>
		data_length -= remaining_space;
   16684:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   16686:	2300      	movs	r3, #0
   16688:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1668a:	4446      	add	r6, r8
		data += remaining_space;
   1668c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1668e:	1e63      	subs	r3, r4, #1
   16690:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   16694:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16698:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1669c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1669e:	ea82 0200 	eor.w	r2, r2, r0
   166a2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   166a4:	d1f6      	bne.n	16694 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   166a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   166a8:	4621      	mov	r1, r4
   166aa:	4620      	mov	r0, r4
   166ac:	f7ff ff05 	bl	164ba <tc_aes_encrypt>
   166b0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   166b4:	2e10      	cmp	r6, #16
   166b6:	d80a      	bhi.n	166ce <tc_cmac_update+0xac>
	if (data_length > 0) {
   166b8:	2e00      	cmp	r6, #0
   166ba:	d0ba      	beq.n	16632 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   166bc:	4633      	mov	r3, r6
   166be:	462a      	mov	r2, r5
   166c0:	4631      	mov	r1, r6
   166c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   166c6:	f7ff fe22 	bl	1630e <_copy>
		s->leftover_offset = data_length;
   166ca:	6466      	str	r6, [r4, #68]	; 0x44
   166cc:	e7b1      	b.n	16632 <tc_cmac_update+0x10>
   166ce:	1e63      	subs	r3, r4, #1
   166d0:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   166d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   166d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   166da:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   166dc:	ea82 0200 	eor.w	r2, r2, r0
   166e0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   166e2:	d1f6      	bne.n	166d2 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   166e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   166e6:	4621      	mov	r1, r4
   166e8:	4620      	mov	r0, r4
   166ea:	f7ff fee6 	bl	164ba <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   166ee:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   166f0:	3e10      	subs	r6, #16
   166f2:	e7df      	b.n	166b4 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   166f4:	2000      	movs	r0, #0
   166f6:	e79d      	b.n	16634 <tc_cmac_update+0x12>

000166f8 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   166f8:	b570      	push	{r4, r5, r6, lr}
   166fa:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   166fc:	4605      	mov	r5, r0
   166fe:	b1e8      	cbz	r0, 1673c <tc_cmac_final+0x44>
   16700:	b369      	cbz	r1, 1675e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   16702:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   16704:	2a10      	cmp	r2, #16
   16706:	d11a      	bne.n	1673e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   16708:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1670a:	1e63      	subs	r3, r4, #1
   1670c:	3901      	subs	r1, #1
   1670e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   16712:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16716:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1671a:	4072      	eors	r2, r6
   1671c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   16720:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   16722:	ea82 0206 	eor.w	r2, r2, r6
   16726:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   16728:	d1f3      	bne.n	16712 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1672a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1672c:	4621      	mov	r1, r4
   1672e:	4628      	mov	r0, r5
   16730:	f7ff fec3 	bl	164ba <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   16734:	4620      	mov	r0, r4
   16736:	f7ff ff2b 	bl	16590 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1673a:	2001      	movs	r0, #1
}
   1673c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1673e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   16742:	2100      	movs	r1, #0
   16744:	f1c2 0210 	rsb	r2, r2, #16
   16748:	4420      	add	r0, r4
   1674a:	f7ff fded 	bl	16328 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1674e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16750:	4423      	add	r3, r4
   16752:	2280      	movs	r2, #128	; 0x80
   16754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   16758:	f104 0120 	add.w	r1, r4, #32
   1675c:	e7d5      	b.n	1670a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1675e:	4608      	mov	r0, r1
   16760:	e7ec      	b.n	1673c <tc_cmac_final+0x44>

00016762 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16762:	f002 be36 	b.w	193d2 <z_fatal_error>

00016766 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   16766:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   16768:	6800      	ldr	r0, [r0, #0]
   1676a:	f002 be32 	b.w	193d2 <z_fatal_error>

0001676e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1676e:	2100      	movs	r1, #0
   16770:	2001      	movs	r0, #1
   16772:	f7ff bff6 	b.w	16762 <z_arm_fatal_error>

00016776 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   16776:	b508      	push	{r3, lr}
	handler();
   16778:	f7ed fbd0 	bl	3f1c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1677c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   16780:	f7ed bcb0 	b.w	40e4 <z_arm_exc_exit>

00016784 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   16784:	3901      	subs	r1, #1
   16786:	4603      	mov	r3, r0
   16788:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1678c:	b90a      	cbnz	r2, 16792 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1678e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   16790:	4770      	bx	lr
		*d = *s;
   16792:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   16796:	e7f7      	b.n	16788 <strcpy+0x4>

00016798 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   16798:	4603      	mov	r3, r0
	size_t n = 0;
   1679a:	2000      	movs	r0, #0

	while (*s != '\0') {
   1679c:	5c1a      	ldrb	r2, [r3, r0]
   1679e:	b902      	cbnz	r2, 167a2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   167a0:	4770      	bx	lr
		n++;
   167a2:	3001      	adds	r0, #1
   167a4:	e7fa      	b.n	1679c <strlen+0x4>

000167a6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   167a6:	4603      	mov	r3, r0
	size_t n = 0;
   167a8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   167aa:	5c1a      	ldrb	r2, [r3, r0]
   167ac:	b10a      	cbz	r2, 167b2 <strnlen+0xc>
   167ae:	4288      	cmp	r0, r1
   167b0:	d100      	bne.n	167b4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   167b2:	4770      	bx	lr
		n++;
   167b4:	3001      	adds	r0, #1
   167b6:	e7f8      	b.n	167aa <strnlen+0x4>

000167b8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   167b8:	1e43      	subs	r3, r0, #1
   167ba:	3901      	subs	r1, #1
   167bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   167c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   167c4:	4282      	cmp	r2, r0
   167c6:	d101      	bne.n	167cc <strcmp+0x14>
   167c8:	2a00      	cmp	r2, #0
   167ca:	d1f7      	bne.n	167bc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   167cc:	1a10      	subs	r0, r2, r0
   167ce:	4770      	bx	lr

000167d0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   167d0:	b510      	push	{r4, lr}
   167d2:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   167d4:	b15a      	cbz	r2, 167ee <memcmp+0x1e>
   167d6:	3901      	subs	r1, #1
   167d8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   167da:	f813 0b01 	ldrb.w	r0, [r3], #1
   167de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   167e2:	42a3      	cmp	r3, r4
   167e4:	d001      	beq.n	167ea <memcmp+0x1a>
   167e6:	4290      	cmp	r0, r2
   167e8:	d0f7      	beq.n	167da <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   167ea:	1a80      	subs	r0, r0, r2
}
   167ec:	bd10      	pop	{r4, pc}
		return 0;
   167ee:	4610      	mov	r0, r2
   167f0:	e7fc      	b.n	167ec <memcmp+0x1c>

000167f2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   167f2:	b510      	push	{r4, lr}
   167f4:	1e43      	subs	r3, r0, #1
   167f6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   167f8:	4291      	cmp	r1, r2
   167fa:	d100      	bne.n	167fe <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   167fc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   167fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   16802:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   16806:	e7f7      	b.n	167f8 <memcpy+0x6>

00016808 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   16808:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1680a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1680c:	4603      	mov	r3, r0
	while (n > 0) {
   1680e:	4293      	cmp	r3, r2
   16810:	d100      	bne.n	16814 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   16812:	4770      	bx	lr
		*(d_byte++) = c_byte;
   16814:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   16818:	e7f9      	b.n	1680e <memset+0x6>

0001681a <_stdout_hook_default>:
}
   1681a:	f04f 30ff 	mov.w	r0, #4294967295
   1681e:	4770      	bx	lr

00016820 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   16820:	2806      	cmp	r0, #6
   16822:	d108      	bne.n	16836 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   16824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16828:	2201      	movs	r2, #1
   1682a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1682e:	f3bf 8f4f 	dsb	sy
        __WFE();
   16832:	bf20      	wfe
    while (true)
   16834:	e7fd      	b.n	16832 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   16836:	4770      	bx	lr

00016838 <pm_state_exit_post_ops>:
   16838:	2300      	movs	r3, #0
   1683a:	f383 8811 	msr	BASEPRI, r3
   1683e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   16842:	4770      	bx	lr

00016844 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   16844:	b510      	push	{r4, lr}
   16846:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   16848:	7801      	ldrb	r1, [r0, #0]
   1684a:	7822      	ldrb	r2, [r4, #0]
   1684c:	428a      	cmp	r2, r1
{
   1684e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   16850:	d00f      	beq.n	16872 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   16852:	4669      	mov	r1, sp
   16854:	f7ed fe94 	bl	4580 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   16858:	a905      	add	r1, sp, #20
   1685a:	4620      	mov	r0, r4
   1685c:	f7ed fe90 	bl	4580 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   16860:	2210      	movs	r2, #16
   16862:	f10d 0115 	add.w	r1, sp, #21
   16866:	f10d 0001 	add.w	r0, sp, #1
   1686a:	f7ff ffb1 	bl	167d0 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1686e:	b00a      	add	sp, #40	; 0x28
   16870:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   16872:	2a01      	cmp	r2, #1
   16874:	d006      	beq.n	16884 <bt_uuid_cmp+0x40>
   16876:	2a02      	cmp	r2, #2
   16878:	d007      	beq.n	1688a <bt_uuid_cmp+0x46>
   1687a:	b972      	cbnz	r2, 1689a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1687c:	8840      	ldrh	r0, [r0, #2]
   1687e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   16880:	1ac0      	subs	r0, r0, r3
   16882:	e7f4      	b.n	1686e <bt_uuid_cmp+0x2a>
   16884:	6840      	ldr	r0, [r0, #4]
   16886:	6863      	ldr	r3, [r4, #4]
   16888:	e7fa      	b.n	16880 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1688a:	2210      	movs	r2, #16
   1688c:	1c61      	adds	r1, r4, #1
   1688e:	3001      	adds	r0, #1
}
   16890:	b00a      	add	sp, #40	; 0x28
   16892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   16896:	f7ff bf9b 	b.w	167d0 <memcmp>
	switch (u1->type) {
   1689a:	f06f 0015 	mvn.w	r0, #21
   1689e:	e7e6      	b.n	1686e <bt_uuid_cmp+0x2a>

000168a0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   168a0:	2a04      	cmp	r2, #4
{
   168a2:	b510      	push	{r4, lr}
	switch (data_len) {
   168a4:	d00a      	beq.n	168bc <bt_uuid_create+0x1c>
   168a6:	2a10      	cmp	r2, #16
   168a8:	d00d      	beq.n	168c6 <bt_uuid_create+0x26>
   168aa:	2a02      	cmp	r2, #2
   168ac:	f04f 0300 	mov.w	r3, #0
   168b0:	d10f      	bne.n	168d2 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   168b2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   168b4:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   168b6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   168b8:	2001      	movs	r0, #1
}
   168ba:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   168bc:	2301      	movs	r3, #1
   168be:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   168c0:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   168c2:	6042      	str	r2, [r0, #4]
		break;
   168c4:	e7f8      	b.n	168b8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   168c6:	2302      	movs	r3, #2
   168c8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   168cc:	f7ff ff91 	bl	167f2 <memcpy>
		break;
   168d0:	e7f2      	b.n	168b8 <bt_uuid_create+0x18>
	switch (data_len) {
   168d2:	4618      	mov	r0, r3
   168d4:	e7f1      	b.n	168ba <bt_uuid_create+0x1a>

000168d6 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   168d6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   168d8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   168da:	2106      	movs	r1, #6
{
   168dc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   168de:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   168e2:	f7f4 fb3f 	bl	af64 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   168e6:	b918      	cbnz	r0, 168f0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   168e8:	79a3      	ldrb	r3, [r4, #6]
   168ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
   168ee:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   168f0:	bd10      	pop	{r4, pc}

000168f2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   168f2:	280f      	cmp	r0, #15
   168f4:	d806      	bhi.n	16904 <bt_hci_evt_get_flags+0x12>
   168f6:	280d      	cmp	r0, #13
   168f8:	d80b      	bhi.n	16912 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   168fa:	2805      	cmp	r0, #5
   168fc:	bf14      	ite	ne
   168fe:	2002      	movne	r0, #2
   16900:	2003      	moveq	r0, #3
   16902:	4770      	bx	lr
	switch (evt) {
   16904:	2813      	cmp	r0, #19
   16906:	d004      	beq.n	16912 <bt_hci_evt_get_flags+0x20>
   16908:	281a      	cmp	r0, #26
   1690a:	bf14      	ite	ne
   1690c:	2002      	movne	r0, #2
   1690e:	2001      	moveq	r0, #1
   16910:	4770      	bx	lr
   16912:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   16914:	4770      	bx	lr

00016916 <handle_event>:
{
   16916:	b410      	push	{r4}
   16918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1691c:	4604      	mov	r4, r0
   1691e:	4608      	mov	r0, r1
		if (handler->event != event) {
   16920:	7811      	ldrb	r1, [r2, #0]
   16922:	42a1      	cmp	r1, r4
   16924:	d004      	beq.n	16930 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   16926:	3208      	adds	r2, #8
   16928:	429a      	cmp	r2, r3
   1692a:	d1f9      	bne.n	16920 <handle_event+0xa>
}
   1692c:	bc10      	pop	{r4}
   1692e:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   16930:	8981      	ldrh	r1, [r0, #12]
   16932:	7853      	ldrb	r3, [r2, #1]
   16934:	4299      	cmp	r1, r3
   16936:	d3f9      	bcc.n	1692c <handle_event+0x16>
		handler->handler(buf);
   16938:	6853      	ldr	r3, [r2, #4]
}
   1693a:	bc10      	pop	{r4}
		handler->handler(buf);
   1693c:	4718      	bx	r3

0001693e <hci_data_buf_overflow>:
}
   1693e:	4770      	bx	lr

00016940 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   16940:	2207      	movs	r2, #7
   16942:	f7ff bf56 	b.w	167f2 <memcpy>

00016946 <hci_disconn_complete>:
{
   16946:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16948:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1694a:	7835      	ldrb	r5, [r6, #0]
   1694c:	bb0d      	cbnz	r5, 16992 <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   1694e:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   16952:	f7ef fb23 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
   16956:	4604      	mov	r4, r0
   16958:	b1d8      	cbz	r0, 16992 <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   1695a:	78f3      	ldrb	r3, [r6, #3]
   1695c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1695e:	4629      	mov	r1, r5
   16960:	f7ef fb24 	bl	5fac <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   16964:	78a3      	ldrb	r3, [r4, #2]
   16966:	2b01      	cmp	r3, #1
   16968:	d004      	beq.n	16974 <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   1696a:	4620      	mov	r0, r4
}
   1696c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16970:	f000 bb71 	b.w	17056 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16974:	f3bf 8f5b 	dmb	ish
   16978:	6863      	ldr	r3, [r4, #4]
   1697a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1697e:	07db      	lsls	r3, r3, #31
   16980:	d5f3      	bpl.n	1696a <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   16982:	4620      	mov	r0, r4
   16984:	2102      	movs	r1, #2
   16986:	f7ef fb11 	bl	5fac <bt_conn_set_state>
		bt_le_scan_update(false);
   1698a:	4628      	mov	r0, r5
   1698c:	f7ee ffaa 	bl	58e4 <bt_le_scan_update>
   16990:	e7eb      	b.n	1696a <hci_disconn_complete+0x24>
}
   16992:	bd70      	pop	{r4, r5, r6, pc}

00016994 <le_phy_update_complete>:
{
   16994:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16996:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   16998:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1699c:	f7ef fafe 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
   169a0:	b118      	cbz	r0, 169aa <le_phy_update_complete+0x16>
}
   169a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   169a6:	f000 bb56 	b.w	17056 <bt_conn_unref>
}
   169aa:	bd08      	pop	{r3, pc}

000169ac <le_data_len_change>:
{
   169ac:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   169ae:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   169b0:	8818      	ldrh	r0, [r3, #0]
   169b2:	f7ef faf3 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
   169b6:	b118      	cbz	r0, 169c0 <le_data_len_change+0x14>
}
   169b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   169bc:	f000 bb4b 	b.w	17056 <bt_conn_unref>
}
   169c0:	bd08      	pop	{r3, pc}

000169c2 <atomic_or>:
{
   169c2:	4603      	mov	r3, r0
}
   169c4:	f3bf 8f5b 	dmb	ish
   169c8:	e853 0f00 	ldrex	r0, [r3]
   169cc:	ea40 0201 	orr.w	r2, r0, r1
   169d0:	e843 2c00 	strex	ip, r2, [r3]
   169d4:	f1bc 0f00 	cmp.w	ip, #0
   169d8:	d1f6      	bne.n	169c8 <atomic_or+0x6>
   169da:	f3bf 8f5b 	dmb	ish
   169de:	4770      	bx	lr

000169e0 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   169e0:	2101      	movs	r1, #1
   169e2:	3008      	adds	r0, #8
   169e4:	f002 b8bd 	b.w	18b62 <net_buf_simple_pull_mem>

000169e8 <le_conn_update_complete>:
{
   169e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   169ea:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   169ec:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   169f0:	f7ef fad4 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
   169f4:	4604      	mov	r4, r0
   169f6:	2800      	cmp	r0, #0
   169f8:	d03c      	beq.n	16a74 <le_conn_update_complete+0x8c>
	if (!evt->status) {
   169fa:	782b      	ldrb	r3, [r5, #0]
   169fc:	b9cb      	cbnz	r3, 16a32 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   169fe:	792a      	ldrb	r2, [r5, #4]
   16a00:	78eb      	ldrb	r3, [r5, #3]
   16a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16a06:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   16a0a:	79aa      	ldrb	r2, [r5, #6]
   16a0c:	796b      	ldrb	r3, [r5, #5]
   16a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16a12:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16a16:	79eb      	ldrb	r3, [r5, #7]
   16a18:	7a2a      	ldrb	r2, [r5, #8]
   16a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16a1e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   16a22:	f7ef fbb7 	bl	6194 <notify_le_param_updated>
	bt_conn_unref(conn);
   16a26:	4620      	mov	r0, r4
}
   16a28:	b003      	add	sp, #12
   16a2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   16a2e:	f000 bb12 	b.w	17056 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16a32:	2b1a      	cmp	r3, #26
   16a34:	d1f7      	bne.n	16a26 <le_conn_update_complete+0x3e>
   16a36:	78c3      	ldrb	r3, [r0, #3]
   16a38:	2b01      	cmp	r3, #1
   16a3a:	d1f4      	bne.n	16a26 <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
   16a40:	3004      	adds	r0, #4
   16a42:	f7ff ffbe 	bl	169c2 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16a46:	0583      	lsls	r3, r0, #22
   16a48:	d4ed      	bmi.n	16a26 <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   16a4a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   16a4e:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   16a52:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   16a56:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   16a5a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   16a5e:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16a62:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   16a64:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   16a68:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   16a6c:	4620      	mov	r0, r4
   16a6e:	f7ef ff4b 	bl	6908 <bt_l2cap_update_conn_param>
   16a72:	e7d8      	b.n	16a26 <le_conn_update_complete+0x3e>
}
   16a74:	b003      	add	sp, #12
   16a76:	bd30      	pop	{r4, r5, pc}

00016a78 <le_remote_feat_complete>:
{
   16a78:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16a7a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   16a7c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   16a80:	f7ef fa8c 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
   16a84:	4604      	mov	r4, r0
   16a86:	b180      	cbz	r0, 16aaa <le_remote_feat_complete+0x32>
	if (!evt->status) {
   16a88:	782b      	ldrb	r3, [r5, #0]
   16a8a:	b923      	cbnz	r3, 16a96 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   16a8c:	2208      	movs	r2, #8
   16a8e:	1ce9      	adds	r1, r5, #3
   16a90:	30ac      	adds	r0, #172	; 0xac
   16a92:	f7ff feae 	bl	167f2 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16a96:	1d20      	adds	r0, r4, #4
   16a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16a9c:	f7ff ff91 	bl	169c2 <atomic_or>
	bt_conn_unref(conn);
   16aa0:	4620      	mov	r0, r4
}
   16aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   16aa6:	f000 bad6 	b.w	17056 <bt_conn_unref>
}
   16aaa:	bd38      	pop	{r3, r4, r5, pc}

00016aac <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16aac:	f3bf 8f5b 	dmb	ish
   16ab0:	e850 3f00 	ldrex	r3, [r0]
   16ab4:	400b      	ands	r3, r1
   16ab6:	e840 3200 	strex	r2, r3, [r0]
   16aba:	2a00      	cmp	r2, #0
   16abc:	d1f8      	bne.n	16ab0 <atomic_and.isra.0+0x4>
   16abe:	f3bf 8f5b 	dmb	ish
}
   16ac2:	4770      	bx	lr

00016ac4 <hci_vendor_event>:
   16ac4:	4770      	bx	lr

00016ac6 <hci_num_completed_packets>:
{
   16ac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   16aca:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16acc:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   16ace:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   16ad0:	783b      	ldrb	r3, [r7, #0]
   16ad2:	429d      	cmp	r5, r3
   16ad4:	db01      	blt.n	16ada <hci_num_completed_packets+0x14>
}
   16ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16ada:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   16ade:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16ae2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16ae6:	f7ef fa59 	bl	5f9c <bt_conn_lookup_handle>
		if (!conn) {
   16aea:	4604      	mov	r4, r0
   16aec:	b350      	cbz	r0, 16b44 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   16aee:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   16af2:	b326      	cbz	r6, 16b3e <hci_num_completed_packets+0x78>
	__asm__ volatile(
   16af4:	f04f 0320 	mov.w	r3, #32
   16af8:	f3ef 8211 	mrs	r2, BASEPRI
   16afc:	f383 8812 	msr	BASEPRI_MAX, r3
   16b00:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16b04:	69e3      	ldr	r3, [r4, #28]
   16b06:	b16b      	cbz	r3, 16b24 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   16b08:	3b01      	subs	r3, #1
   16b0a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   16b0c:	f382 8811 	msr	BASEPRI, r2
   16b10:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16b14:	4620      	mov	r0, r4
   16b16:	f7ef f991 	bl	5e3c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   16b1a:	3e01      	subs	r6, #1
   16b1c:	f7fe f95e 	bl	14ddc <z_impl_k_sem_give>
   16b20:	b2b6      	uxth	r6, r6
   16b22:	e7e6      	b.n	16af2 <hci_num_completed_packets+0x2c>
	return list->head;
   16b24:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16b26:	b12b      	cbz	r3, 16b34 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16b28:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16b2a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16b2c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16b2e:	428b      	cmp	r3, r1
	list->tail = node;
   16b30:	bf08      	it	eq
   16b32:	61a0      	streq	r0, [r4, #24]
   16b34:	f382 8811 	msr	BASEPRI, r2
   16b38:	f3bf 8f6f 	isb	sy
			if (!node) {
   16b3c:	b923      	cbnz	r3, 16b48 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   16b3e:	4620      	mov	r0, r4
   16b40:	f000 fa89 	bl	17056 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   16b44:	3501      	adds	r5, #1
   16b46:	e7c3      	b.n	16ad0 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   16b48:	f04f 0220 	mov.w	r2, #32
   16b4c:	f3ef 8111 	mrs	r1, BASEPRI
   16b50:	f382 8812 	msr	BASEPRI_MAX, r2
   16b54:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16b58:	68da      	ldr	r2, [r3, #12]
   16b5a:	61e2      	str	r2, [r4, #28]
	return list->tail;
   16b5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   16b5e:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   16b62:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   16b66:	b94a      	cbnz	r2, 16b7c <hci_num_completed_packets+0xb6>
	list->head = node;
   16b68:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16b6c:	f381 8811 	msr	BASEPRI, r1
   16b70:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16b74:	4648      	mov	r0, r9
   16b76:	f7fe fa9d 	bl	150b4 <k_work_submit>
   16b7a:	e7cb      	b.n	16b14 <hci_num_completed_packets+0x4e>
	parent->next = child;
   16b7c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16b7e:	6263      	str	r3, [r4, #36]	; 0x24
}
   16b80:	e7f4      	b.n	16b6c <hci_num_completed_packets+0xa6>

00016b82 <hci_le_read_max_data_len>:
{
   16b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16b84:	4606      	mov	r6, r0
   16b86:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16b88:	aa01      	add	r2, sp, #4
   16b8a:	2100      	movs	r1, #0
   16b8c:	f242 002f 	movw	r0, #8239	; 0x202f
   16b90:	f7ed fe86 	bl	48a0 <bt_hci_cmd_send_sync>
	if (err) {
   16b94:	4604      	mov	r4, r0
   16b96:	b948      	cbnz	r0, 16bac <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   16b98:	9801      	ldr	r0, [sp, #4]
   16b9a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16b9c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16ba0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16ba2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16ba6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16ba8:	f7fb fdea 	bl	12780 <net_buf_unref>
}
   16bac:	4620      	mov	r0, r4
   16bae:	b002      	add	sp, #8
   16bb0:	bd70      	pop	{r4, r5, r6, pc}

00016bb2 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   16bb2:	f7ed bed7 	b.w	4964 <bt_le_create_conn_legacy>

00016bb6 <bt_hci_disconnect>:
{
   16bb6:	b570      	push	{r4, r5, r6, lr}
   16bb8:	4606      	mov	r6, r0
   16bba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   16bbc:	f240 4006 	movw	r0, #1030	; 0x406
   16bc0:	2103      	movs	r1, #3
   16bc2:	f7ed fe33 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
   16bc6:	4604      	mov	r4, r0
   16bc8:	b168      	cbz	r0, 16be6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   16bca:	2103      	movs	r1, #3
   16bcc:	3008      	adds	r0, #8
   16bce:	f001 ff9f 	bl	18b10 <net_buf_simple_add>
	disconn->reason = reason;
   16bd2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   16bd4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   16bd6:	4621      	mov	r1, r4
   16bd8:	2200      	movs	r2, #0
}
   16bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   16bde:	f240 4006 	movw	r0, #1030	; 0x406
   16be2:	f7ed be5d 	b.w	48a0 <bt_hci_cmd_send_sync>
}
   16be6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16bea:	bd70      	pop	{r4, r5, r6, pc}

00016bec <bt_le_set_data_len>:
{
   16bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bee:	4607      	mov	r7, r0
   16bf0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   16bf2:	f242 0022 	movw	r0, #8226	; 0x2022
   16bf6:	2106      	movs	r1, #6
{
   16bf8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   16bfa:	f7ed fe17 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
   16bfe:	4604      	mov	r4, r0
   16c00:	b178      	cbz	r0, 16c22 <bt_le_set_data_len+0x36>
   16c02:	2106      	movs	r1, #6
   16c04:	3008      	adds	r0, #8
   16c06:	f001 ff83 	bl	18b10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16c0a:	883b      	ldrh	r3, [r7, #0]
   16c0c:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   16c0e:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   16c10:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   16c12:	4621      	mov	r1, r4
   16c14:	2200      	movs	r2, #0
}
   16c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   16c1a:	f242 0022 	movw	r0, #8226	; 0x2022
   16c1e:	f7ed be3f 	b.w	48a0 <bt_hci_cmd_send_sync>
}
   16c22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016c28 <bt_le_set_phy>:
{
   16c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16c2c:	4680      	mov	r8, r0
   16c2e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   16c30:	f242 0032 	movw	r0, #8242	; 0x2032
   16c34:	2107      	movs	r1, #7
{
   16c36:	f89d 9020 	ldrb.w	r9, [sp, #32]
   16c3a:	4616      	mov	r6, r2
   16c3c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   16c3e:	f7ed fdf5 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
   16c42:	4604      	mov	r4, r0
   16c44:	b198      	cbz	r0, 16c6e <bt_le_set_phy+0x46>
   16c46:	2107      	movs	r1, #7
   16c48:	3008      	adds	r0, #8
   16c4a:	f001 ff61 	bl	18b10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16c4e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   16c52:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   16c54:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   16c56:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   16c58:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   16c5a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   16c5e:	4621      	mov	r1, r4
   16c60:	2200      	movs	r2, #0
}
   16c62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   16c66:	f242 0032 	movw	r0, #8242	; 0x2032
   16c6a:	f7ed be19 	b.w	48a0 <bt_hci_cmd_send_sync>
}
   16c6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016c76 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   16c76:	6880      	ldr	r0, [r0, #8]
   16c78:	f7ed bee0 	b.w	4a3c <bt_hci_le_enh_conn_complete>

00016c7c <le_legacy_conn_complete>:
{
   16c7c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16c7e:	6881      	ldr	r1, [r0, #8]
{
   16c80:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   16c82:	780b      	ldrb	r3, [r1, #0]
   16c84:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   16c88:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16c8c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   16c90:	78cb      	ldrb	r3, [r1, #3]
   16c92:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   16c96:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16c9a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   16c9e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16ca2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   16ca6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16caa:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   16cae:	7c4b      	ldrb	r3, [r1, #17]
   16cb0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   16cb4:	a803      	add	r0, sp, #12
   16cb6:	3104      	adds	r1, #4
   16cb8:	f7ff fe42 	bl	16940 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   16cbc:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   16cbe:	4669      	mov	r1, sp
   16cc0:	2206      	movs	r2, #6
   16cc2:	f10d 0013 	add.w	r0, sp, #19
   16cc6:	9400      	str	r4, [sp, #0]
   16cc8:	f8ad 4004 	strh.w	r4, [sp, #4]
   16ccc:	f7ff fd91 	bl	167f2 <memcpy>
   16cd0:	2206      	movs	r2, #6
   16cd2:	4669      	mov	r1, sp
   16cd4:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   16cd8:	9400      	str	r4, [sp, #0]
   16cda:	f8ad 4004 	strh.w	r4, [sp, #4]
   16cde:	f7ff fd88 	bl	167f2 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   16ce2:	a802      	add	r0, sp, #8
   16ce4:	f7ed feaa 	bl	4a3c <bt_hci_le_enh_conn_complete>
}
   16ce8:	b00a      	add	sp, #40	; 0x28
   16cea:	bd10      	pop	{r4, pc}

00016cec <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   16cec:	8803      	ldrh	r3, [r0, #0]
   16cee:	8842      	ldrh	r2, [r0, #2]
   16cf0:	4293      	cmp	r3, r2
{
   16cf2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   16cf4:	d819      	bhi.n	16d2a <bt_le_conn_params_valid+0x3e>
   16cf6:	2b05      	cmp	r3, #5
   16cf8:	d917      	bls.n	16d2a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   16cfa:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   16cfe:	d814      	bhi.n	16d2a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   16d00:	8883      	ldrh	r3, [r0, #4]
   16d02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   16d06:	d210      	bcs.n	16d2a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   16d08:	88c0      	ldrh	r0, [r0, #6]
   16d0a:	f1a0 010a 	sub.w	r1, r0, #10
   16d0e:	b289      	uxth	r1, r1
   16d10:	f640 4476 	movw	r4, #3190	; 0xc76
   16d14:	42a1      	cmp	r1, r4
   16d16:	d808      	bhi.n	16d2a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   16d18:	3301      	adds	r3, #1
   16d1a:	b29b      	uxth	r3, r3
   16d1c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   16d1e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   16d22:	bf34      	ite	cc
   16d24:	2001      	movcc	r0, #1
   16d26:	2000      	movcs	r0, #0
}
   16d28:	bd10      	pop	{r4, pc}
		return false;
   16d2a:	2000      	movs	r0, #0
   16d2c:	e7fc      	b.n	16d28 <bt_le_conn_params_valid+0x3c>

00016d2e <le_conn_param_neg_reply>:
{
   16d2e:	b570      	push	{r4, r5, r6, lr}
   16d30:	4606      	mov	r6, r0
   16d32:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   16d34:	f242 0021 	movw	r0, #8225	; 0x2021
   16d38:	2103      	movs	r1, #3
   16d3a:	f7ed fd77 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
   16d3e:	4604      	mov	r4, r0
   16d40:	b160      	cbz	r0, 16d5c <le_conn_param_neg_reply+0x2e>
   16d42:	2103      	movs	r1, #3
   16d44:	3008      	adds	r0, #8
   16d46:	f001 fee3 	bl	18b10 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   16d4a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   16d4c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16d4e:	4621      	mov	r1, r4
   16d50:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16d58:	f7ed bf7c 	b.w	4c54 <bt_hci_cmd_send>
}
   16d5c:	bd70      	pop	{r4, r5, r6, pc}

00016d5e <le_conn_param_req>:
{
   16d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16d60:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16d62:	78d9      	ldrb	r1, [r3, #3]
   16d64:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16d66:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16d68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16d6c:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16d70:	7959      	ldrb	r1, [r3, #5]
   16d72:	791a      	ldrb	r2, [r3, #4]
   16d74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16d78:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16d7c:	799a      	ldrb	r2, [r3, #6]
   16d7e:	79d9      	ldrb	r1, [r3, #7]
   16d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16d84:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16d88:	7a1a      	ldrb	r2, [r3, #8]
   16d8a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16d8c:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16d8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16d92:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16d94:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16d98:	f7ef f900 	bl	5f9c <bt_conn_lookup_handle>
	if (!conn) {
   16d9c:	4606      	mov	r6, r0
   16d9e:	b928      	cbnz	r0, 16dac <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16da0:	2102      	movs	r1, #2
   16da2:	4620      	mov	r0, r4
   16da4:	f7ff ffc3 	bl	16d2e <le_conn_param_neg_reply>
}
   16da8:	b003      	add	sp, #12
   16daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16dac:	4669      	mov	r1, sp
   16dae:	f7ef fa39 	bl	6224 <le_param_req>
   16db2:	b938      	cbnz	r0, 16dc4 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16db4:	211e      	movs	r1, #30
   16db6:	4620      	mov	r0, r4
   16db8:	f7ff ffb9 	bl	16d2e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16dbc:	4630      	mov	r0, r6
   16dbe:	f000 f94a 	bl	17056 <bt_conn_unref>
   16dc2:	e7f1      	b.n	16da8 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16dc4:	210e      	movs	r1, #14
   16dc6:	f242 0020 	movw	r0, #8224	; 0x2020
   16dca:	f7ed fd2f 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
   16dce:	4605      	mov	r5, r0
   16dd0:	2800      	cmp	r0, #0
   16dd2:	d0f3      	beq.n	16dbc <le_conn_param_req+0x5e>
   16dd4:	210e      	movs	r1, #14
   16dd6:	3008      	adds	r0, #8
   16dd8:	f001 fe9a 	bl	18b10 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   16ddc:	220e      	movs	r2, #14
   16dde:	4604      	mov	r4, r0
   16de0:	2100      	movs	r1, #0
   16de2:	f7ff fd11 	bl	16808 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16de6:	f8bd 3000 	ldrh.w	r3, [sp]
   16dea:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16dec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16df0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16df2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16df6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16df8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   16dfc:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16dfe:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16e00:	4629      	mov	r1, r5
   16e02:	f242 0020 	movw	r0, #8224	; 0x2020
   16e06:	f7ed ff25 	bl	4c54 <bt_hci_cmd_send>
   16e0a:	e7d7      	b.n	16dbc <le_conn_param_req+0x5e>

00016e0c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   16e0c:	2000      	movs	r0, #0
   16e0e:	4770      	bx	lr

00016e10 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   16e10:	2000      	movs	r0, #0
   16e12:	4770      	bx	lr

00016e14 <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   16e14:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   16e16:	f04f 32ff 	mov.w	r2, #4294967295
{
   16e1a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   16e1c:	f04f 33ff 	mov.w	r3, #4294967295
   16e20:	2100      	movs	r1, #0
{
   16e22:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   16e24:	f7ed fc0c 	bl	4640 <bt_buf_get_evt>
   16e28:	2102      	movs	r1, #2
   16e2a:	4604      	mov	r4, r0
   16e2c:	3008      	adds	r0, #8
   16e2e:	f001 fe6f 	bl	18b10 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   16e32:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   16e34:	7045      	strb	r5, [r0, #1]

	return buf;
}
   16e36:	4620      	mov	r0, r4
   16e38:	bd70      	pop	{r4, r5, r6, pc}

00016e3a <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   16e3a:	3103      	adds	r1, #3
{
   16e3c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   16e3e:	b2c9      	uxtb	r1, r1
{
   16e40:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   16e42:	200e      	movs	r0, #14
   16e44:	f7ff ffe6 	bl	16e14 <bt_hci_evt_create>
   16e48:	2103      	movs	r1, #3
   16e4a:	4604      	mov	r4, r0
   16e4c:	3008      	adds	r0, #8
   16e4e:	f001 fe5f 	bl	18b10 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   16e52:	2301      	movs	r3, #1
   16e54:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   16e56:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   16e5a:	4620      	mov	r0, r4
   16e5c:	bd38      	pop	{r3, r4, r5, pc}

00016e5e <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   16e5e:	b570      	push	{r4, r5, r6, lr}
   16e60:	4605      	mov	r5, r0
   16e62:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   16e64:	200f      	movs	r0, #15
   16e66:	2104      	movs	r1, #4
   16e68:	f7ff ffd4 	bl	16e14 <bt_hci_evt_create>
   16e6c:	2104      	movs	r1, #4
   16e6e:	4604      	mov	r4, r0
   16e70:	3008      	adds	r0, #8
   16e72:	f001 fe4d 	bl	18b10 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   16e76:	2201      	movs	r2, #1
	cs->status = status;
   16e78:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   16e7a:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   16e7c:	8045      	strh	r5, [r0, #2]

	return buf;
}
   16e7e:	4620      	mov	r0, r4
   16e80:	bd70      	pop	{r4, r5, r6, pc}

00016e82 <bt_lookup_id_addr>:
}
   16e82:	4608      	mov	r0, r1
   16e84:	4770      	bx	lr

00016e86 <bt_id_set_private_addr>:
{
   16e86:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   16e88:	2106      	movs	r1, #6
   16e8a:	4668      	mov	r0, sp
   16e8c:	f7f4 f86a 	bl	af64 <bt_rand>
	if (err) {
   16e90:	b940      	cbnz	r0, 16ea4 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   16e92:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   16e96:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   16e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16e9c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   16ea0:	f7ee fafe 	bl	54a0 <set_random_address>
}
   16ea4:	b003      	add	sp, #12
   16ea6:	f85d fb04 	ldr.w	pc, [sp], #4

00016eaa <bt_id_scan_random_addr_check>:
}
   16eaa:	2001      	movs	r0, #1
   16eac:	4770      	bx	lr

00016eae <atomic_and>:
{
   16eae:	4603      	mov	r3, r0
}
   16eb0:	f3bf 8f5b 	dmb	ish
   16eb4:	e853 0f00 	ldrex	r0, [r3]
   16eb8:	ea00 0201 	and.w	r2, r0, r1
   16ebc:	e843 2c00 	strex	ip, r2, [r3]
   16ec0:	f1bc 0f00 	cmp.w	ip, #0
   16ec4:	d1f6      	bne.n	16eb4 <atomic_and+0x6>
   16ec6:	f3bf 8f5b 	dmb	ish
   16eca:	4770      	bx	lr

00016ecc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16ecc:	f3bf 8f5b 	dmb	ish
   16ed0:	6800      	ldr	r0, [r0, #0]
   16ed2:	f3bf 8f5b 	dmb	ish
}
   16ed6:	4770      	bx	lr

00016ed8 <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16ed8:	f3bf 8f5b 	dmb	ish
   16edc:	e850 3f00 	ldrex	r3, [r0]
   16ee0:	3b01      	subs	r3, #1
   16ee2:	e840 3200 	strex	r2, r3, [r0]
   16ee6:	2a00      	cmp	r2, #0
   16ee8:	d1f8      	bne.n	16edc <atomic_dec.isra.0+0x4>
   16eea:	f3bf 8f5b 	dmb	ish
}
   16eee:	4770      	bx	lr

00016ef0 <tx_complete_work>:
	tx_notify(conn);
   16ef0:	3828      	subs	r0, #40	; 0x28
   16ef2:	f7ee bed3 	b.w	5c9c <tx_notify>

00016ef6 <bt_conn_reset_rx_state>:
{
   16ef6:	b510      	push	{r4, lr}
   16ef8:	4604      	mov	r4, r0
	if (!conn->rx) {
   16efa:	6900      	ldr	r0, [r0, #16]
   16efc:	b118      	cbz	r0, 16f06 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   16efe:	f7fb fc3f 	bl	12780 <net_buf_unref>
	conn->rx = NULL;
   16f02:	2300      	movs	r3, #0
   16f04:	6123      	str	r3, [r4, #16]
}
   16f06:	bd10      	pop	{r4, pc}

00016f08 <conn_cleanup>:
{
   16f08:	b570      	push	{r4, r5, r6, lr}
   16f0a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   16f0c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   16f10:	2200      	movs	r2, #0
   16f12:	2300      	movs	r3, #0
   16f14:	4630      	mov	r0, r6
   16f16:	f001 fd98 	bl	18a4a <net_buf_get>
   16f1a:	4605      	mov	r5, r0
   16f1c:	b950      	cbnz	r0, 16f34 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   16f1e:	4620      	mov	r0, r4
   16f20:	f7ff ffe9 	bl	16ef6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16f24:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16f28:	2200      	movs	r2, #0
}
   16f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16f2e:	2300      	movs	r3, #0
   16f30:	f7fe b95c 	b.w	151ec <k_work_reschedule>
		if (tx_data(buf)->tx) {
   16f34:	6969      	ldr	r1, [r5, #20]
   16f36:	b111      	cbz	r1, 16f3e <conn_cleanup+0x36>
			conn_tx_destroy(conn, tx_data(buf)->tx);
   16f38:	4620      	mov	r0, r4
   16f3a:	f7ee fedf 	bl	5cfc <conn_tx_destroy>
		net_buf_unref(buf);
   16f3e:	4628      	mov	r0, r5
   16f40:	f7fb fc1e 	bl	12780 <net_buf_unref>
   16f44:	e7e4      	b.n	16f10 <conn_cleanup+0x8>

00016f46 <bt_conn_recv>:
{
   16f46:	b570      	push	{r4, r5, r6, lr}
   16f48:	4616      	mov	r6, r2
   16f4a:	4604      	mov	r4, r0
   16f4c:	460d      	mov	r5, r1
	tx_notify(conn);
   16f4e:	f7ee fea5 	bl	5c9c <tx_notify>
	switch (flags) {
   16f52:	2e01      	cmp	r6, #1
   16f54:	d017      	beq.n	16f86 <bt_conn_recv+0x40>
   16f56:	2e02      	cmp	r6, #2
   16f58:	d117      	bne.n	16f8a <bt_conn_recv+0x44>
		if (conn->rx) {
   16f5a:	6923      	ldr	r3, [r4, #16]
   16f5c:	b113      	cbz	r3, 16f64 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   16f5e:	4620      	mov	r0, r4
   16f60:	f7ff ffc9 	bl	16ef6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   16f64:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16f66:	6921      	ldr	r1, [r4, #16]
   16f68:	898a      	ldrh	r2, [r1, #12]
   16f6a:	2a01      	cmp	r2, #1
   16f6c:	d937      	bls.n	16fde <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16f6e:	688b      	ldr	r3, [r1, #8]
   16f70:	881b      	ldrh	r3, [r3, #0]
   16f72:	3304      	adds	r3, #4
   16f74:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   16f76:	429a      	cmp	r2, r3
   16f78:	d331      	bcc.n	16fde <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   16f7a:	d928      	bls.n	16fce <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   16f7c:	4620      	mov	r0, r4
}
   16f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   16f82:	f7ff bfb8 	b.w	16ef6 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   16f86:	6920      	ldr	r0, [r4, #16]
   16f88:	b918      	cbnz	r0, 16f92 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   16f8a:	4620      	mov	r0, r4
   16f8c:	f7ff ffb3 	bl	16ef6 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   16f90:	e001      	b.n	16f96 <bt_conn_recv+0x50>
		if (!buf->len) {
   16f92:	89ae      	ldrh	r6, [r5, #12]
   16f94:	b926      	cbnz	r6, 16fa0 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   16f96:	4628      	mov	r0, r5
}
   16f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   16f9c:	f7fb bbf0 	b.w	12780 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   16fa0:	3008      	adds	r0, #8
   16fa2:	f001 fdfa 	bl	18b9a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16fa6:	4286      	cmp	r6, r0
   16fa8:	d907      	bls.n	16fba <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   16faa:	6921      	ldr	r1, [r4, #16]
   16fac:	2200      	movs	r2, #0
   16fae:	4620      	mov	r0, r4
   16fb0:	f000 f9d4 	bl	1735c <bt_l2cap_recv>
			conn->rx = NULL;
   16fb4:	2300      	movs	r3, #0
   16fb6:	6123      	str	r3, [r4, #16]
   16fb8:	e7ed      	b.n	16f96 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16fba:	6920      	ldr	r0, [r4, #16]
   16fbc:	89aa      	ldrh	r2, [r5, #12]
   16fbe:	68a9      	ldr	r1, [r5, #8]
   16fc0:	3008      	adds	r0, #8
   16fc2:	f001 fdab 	bl	18b1c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16fc6:	4628      	mov	r0, r5
   16fc8:	f7fb fbda 	bl	12780 <net_buf_unref>
		break;
   16fcc:	e7cb      	b.n	16f66 <bt_conn_recv+0x20>
	conn->rx = NULL;
   16fce:	2300      	movs	r3, #0
   16fd0:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16fd2:	4620      	mov	r0, r4
   16fd4:	2201      	movs	r2, #1
}
   16fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   16fda:	f000 b9bf 	b.w	1735c <bt_l2cap_recv>
}
   16fde:	bd70      	pop	{r4, r5, r6, pc}

00016fe0 <bt_conn_ref>:
{
   16fe0:	b510      	push	{r4, lr}
   16fe2:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   16fe4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   16fe8:	4610      	mov	r0, r2
   16fea:	f7ff ff6f 	bl	16ecc <atomic_get>
		if (!old) {
   16fee:	b180      	cbz	r0, 17012 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16ff0:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   16ff4:	1c41      	adds	r1, r0, #1
   16ff6:	e852 4f00 	ldrex	r4, [r2]
   16ffa:	4284      	cmp	r4, r0
   16ffc:	d104      	bne.n	17008 <bt_conn_ref+0x28>
   16ffe:	e842 1c00 	strex	ip, r1, [r2]
   17002:	f1bc 0f00 	cmp.w	ip, #0
   17006:	d1f6      	bne.n	16ff6 <bt_conn_ref+0x16>
   17008:	f3bf 8f5b 	dmb	ish
   1700c:	d1ec      	bne.n	16fe8 <bt_conn_ref+0x8>
}
   1700e:	4618      	mov	r0, r3
   17010:	bd10      	pop	{r4, pc}
			return NULL;
   17012:	4603      	mov	r3, r0
   17014:	e7fb      	b.n	1700e <bt_conn_ref+0x2e>

00017016 <conn_lookup_handle>:
{
   17016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1701a:	4606      	mov	r6, r0
   1701c:	460d      	mov	r5, r1
   1701e:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   17020:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   17022:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   17026:	42ac      	cmp	r4, r5
   17028:	d102      	bne.n	17030 <conn_lookup_handle+0x1a>
	return NULL;
   1702a:	2000      	movs	r0, #0
}
   1702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   17030:	fb08 6004 	mla	r0, r8, r4, r6
   17034:	f7ff ffd4 	bl	16fe0 <bt_conn_ref>
		if (!conn) {
   17038:	b158      	cbz	r0, 17052 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   1703a:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1703c:	2b01      	cmp	r3, #1
   1703e:	d002      	beq.n	17046 <conn_lookup_handle+0x30>
   17040:	3b07      	subs	r3, #7
   17042:	2b01      	cmp	r3, #1
   17044:	d802      	bhi.n	1704c <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   17046:	8803      	ldrh	r3, [r0, #0]
   17048:	42bb      	cmp	r3, r7
   1704a:	d0ef      	beq.n	1702c <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   1704c:	30b8      	adds	r0, #184	; 0xb8
   1704e:	f7ff ff43 	bl	16ed8 <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   17052:	3401      	adds	r4, #1
   17054:	e7e7      	b.n	17026 <conn_lookup_handle+0x10>

00017056 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   17056:	30b8      	adds	r0, #184	; 0xb8
   17058:	f7ff bf3e 	b.w	16ed8 <atomic_dec.isra.0>

0001705c <bt_conn_connected>:
{
   1705c:	b510      	push	{r4, lr}
   1705e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   17060:	f7ef fc04 	bl	686c <bt_l2cap_connected>
	notify_connected(conn);
   17064:	4620      	mov	r0, r4
}
   17066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1706a:	f7ee bdf9 	b.w	5c60 <notify_connected>

0001706e <bt_conn_get_security>:
}
   1706e:	2001      	movs	r0, #1
   17070:	4770      	bx	lr

00017072 <bt_conn_is_peer_addr_le>:
{
   17072:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   17074:	7a03      	ldrb	r3, [r0, #8]
   17076:	428b      	cmp	r3, r1
{
   17078:	4604      	mov	r4, r0
   1707a:	4615      	mov	r5, r2
	if (id != conn->id) {
   1707c:	d115      	bne.n	170aa <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1707e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   17082:	2207      	movs	r2, #7
   17084:	4628      	mov	r0, r5
   17086:	f7ff fba3 	bl	167d0 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1708a:	b180      	cbz	r0, 170ae <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1708c:	78e3      	ldrb	r3, [r4, #3]
   1708e:	2207      	movs	r2, #7
   17090:	b943      	cbnz	r3, 170a4 <bt_conn_is_peer_addr_le+0x32>
   17092:	f104 0196 	add.w	r1, r4, #150	; 0x96
   17096:	4628      	mov	r0, r5
   17098:	f7ff fb9a 	bl	167d0 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1709c:	fab0 f080 	clz	r0, r0
   170a0:	0940      	lsrs	r0, r0, #5
}
   170a2:	bd38      	pop	{r3, r4, r5, pc}
   170a4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   170a8:	e7f5      	b.n	17096 <bt_conn_is_peer_addr_le+0x24>
		return false;
   170aa:	2000      	movs	r0, #0
   170ac:	e7f9      	b.n	170a2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   170ae:	2001      	movs	r0, #1
   170b0:	e7f7      	b.n	170a2 <bt_conn_is_peer_addr_le+0x30>

000170b2 <bt_conn_exists_le>:
{
   170b2:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   170b4:	f7ef f90a 	bl	62cc <bt_conn_lookup_addr_le>
	if (conn) {
   170b8:	b118      	cbz	r0, 170c2 <bt_conn_exists_le+0x10>
	old = atomic_dec(&conn->ref);
   170ba:	30b8      	adds	r0, #184	; 0xb8
   170bc:	f7ff ff0c 	bl	16ed8 <atomic_dec.isra.0>
		return true;
   170c0:	2001      	movs	r0, #1
}
   170c2:	bd08      	pop	{r3, pc}

000170c4 <bt_conn_get_dst>:
}
   170c4:	3088      	adds	r0, #136	; 0x88
   170c6:	4770      	bx	lr

000170c8 <bt_conn_disconnect>:
{
   170c8:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   170ca:	7883      	ldrb	r3, [r0, #2]
   170cc:	2b01      	cmp	r3, #1
{
   170ce:	4604      	mov	r4, r0
   170d0:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   170d2:	d103      	bne.n	170dc <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   170d4:	2100      	movs	r1, #0
   170d6:	3088      	adds	r0, #136	; 0x88
   170d8:	f7ef f9cc 	bl	6474 <bt_le_set_auto_conn>
	switch (conn->state) {
   170dc:	7aa3      	ldrb	r3, [r4, #10]
   170de:	3b02      	subs	r3, #2
   170e0:	2b06      	cmp	r3, #6
   170e2:	d805      	bhi.n	170f0 <bt_conn_disconnect+0x28>
   170e4:	e8df f003 	tbb	[pc, r3]
   170e8:	04040408 	.word	0x04040408
   170ec:	1a12      	.short	0x1a12
   170ee:	10          	.byte	0x10
   170ef:	00          	.byte	0x00
   170f0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   170f4:	4628      	mov	r0, r5
   170f6:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   170f8:	4620      	mov	r0, r4
		conn->err = reason;
   170fa:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   170fc:	2100      	movs	r1, #0
   170fe:	f7ee ff55 	bl	5fac <bt_conn_set_state>
			bt_le_scan_update(false);
   17102:	2000      	movs	r0, #0
   17104:	f7ee fbee 	bl	58e4 <bt_le_scan_update>
		return 0;
   17108:	2500      	movs	r5, #0
   1710a:	e7f3      	b.n	170f4 <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   1710c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17110:	f002 fbb8 	bl	19884 <k_work_cancel_delayable>
}
   17114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   17118:	f7ed bc76 	b.w	4a08 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   1711c:	4629      	mov	r1, r5
   1711e:	8820      	ldrh	r0, [r4, #0]
   17120:	f7ff fd49 	bl	16bb6 <bt_hci_disconnect>
	if (err) {
   17124:	4605      	mov	r5, r0
   17126:	2800      	cmp	r0, #0
   17128:	d1e4      	bne.n	170f4 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   1712a:	7aa3      	ldrb	r3, [r4, #10]
   1712c:	2b07      	cmp	r3, #7
   1712e:	d1e1      	bne.n	170f4 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   17130:	2108      	movs	r1, #8
   17132:	4620      	mov	r0, r4
   17134:	f7ee ff3a 	bl	5fac <bt_conn_set_state>
   17138:	e7dc      	b.n	170f4 <bt_conn_disconnect+0x2c>

0001713a <bt_conn_le_conn_update>:
{
   1713a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1713c:	4607      	mov	r7, r0
   1713e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   17140:	f242 0013 	movw	r0, #8211	; 0x2013
   17144:	210e      	movs	r1, #14
   17146:	f7ed fb71 	bl	482c <bt_hci_cmd_create>
	if (!buf) {
   1714a:	4606      	mov	r6, r0
   1714c:	b1d0      	cbz	r0, 17184 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1714e:	210e      	movs	r1, #14
   17150:	3008      	adds	r0, #8
   17152:	f001 fcdd 	bl	18b10 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   17156:	220e      	movs	r2, #14
   17158:	4604      	mov	r4, r0
   1715a:	2100      	movs	r1, #0
   1715c:	f7ff fb54 	bl	16808 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   17160:	883b      	ldrh	r3, [r7, #0]
   17162:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   17164:	882b      	ldrh	r3, [r5, #0]
   17166:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   17168:	886b      	ldrh	r3, [r5, #2]
   1716a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1716c:	88ab      	ldrh	r3, [r5, #4]
   1716e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   17170:	88eb      	ldrh	r3, [r5, #6]
   17172:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   17174:	4631      	mov	r1, r6
   17176:	2200      	movs	r2, #0
}
   17178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1717c:	f242 0013 	movw	r0, #8211	; 0x2013
   17180:	f7ed bb8e 	b.w	48a0 <bt_hci_cmd_send_sync>
}
   17184:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001718a <l2cap_connected>:
}
   1718a:	4770      	bx	lr

0001718c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1718e:	4607      	mov	r7, r0
   17190:	460e      	mov	r6, r1
   17192:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   17194:	2300      	movs	r3, #0
   17196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1719a:	2104      	movs	r1, #4
   1719c:	2000      	movs	r0, #0
   1719e:	f7ee ffe7 	bl	6170 <bt_conn_create_pdu_timeout>
	if (!buf) {
   171a2:	4604      	mov	r4, r0
   171a4:	b130      	cbz	r0, 171b4 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   171a6:	2104      	movs	r1, #4
   171a8:	3008      	adds	r0, #8
   171aa:	f001 fcb1 	bl	18b10 <net_buf_simple_add>
	hdr->code = code;
   171ae:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   171b0:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   171b2:	8045      	strh	r5, [r0, #2]
}
   171b4:	4620      	mov	r0, r4
   171b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000171b8 <l2cap_disconnected>:
   171b8:	4770      	bx	lr

000171ba <bt_l2cap_chan_del>:
{
   171ba:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   171bc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   171c0:	4604      	mov	r4, r0
	if (!chan->conn) {
   171c2:	b123      	cbz	r3, 171ce <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   171c4:	686b      	ldr	r3, [r5, #4]
   171c6:	b103      	cbz	r3, 171ca <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   171c8:	4798      	blx	r3
	chan->conn = NULL;
   171ca:	2300      	movs	r3, #0
   171cc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   171ce:	68e3      	ldr	r3, [r4, #12]
   171d0:	b10b      	cbz	r3, 171d6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   171d2:	4620      	mov	r0, r4
   171d4:	4798      	blx	r3
	if (ops->released) {
   171d6:	69eb      	ldr	r3, [r5, #28]
   171d8:	b11b      	cbz	r3, 171e2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   171da:	4620      	mov	r0, r4
}
   171dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   171e0:	4718      	bx	r3
}
   171e2:	bd70      	pop	{r4, r5, r6, pc}

000171e4 <bt_l2cap_disconnected>:
	return list->head;
   171e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   171e6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   171e8:	b160      	cbz	r0, 17204 <bt_l2cap_disconnected+0x20>
	return node->next;
   171ea:	f850 4908 	ldr.w	r4, [r0], #-8
   171ee:	b104      	cbz	r4, 171f2 <bt_l2cap_disconnected+0xe>
   171f0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   171f2:	f7ff ffe2 	bl	171ba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   171f6:	b12c      	cbz	r4, 17204 <bt_l2cap_disconnected+0x20>
   171f8:	68a3      	ldr	r3, [r4, #8]
   171fa:	b103      	cbz	r3, 171fe <bt_l2cap_disconnected+0x1a>
   171fc:	3b08      	subs	r3, #8
{
   171fe:	4620      	mov	r0, r4
   17200:	461c      	mov	r4, r3
   17202:	e7f6      	b.n	171f2 <bt_l2cap_disconnected+0xe>
}
   17204:	bd10      	pop	{r4, pc}

00017206 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   17206:	3104      	adds	r1, #4
   17208:	f7ee bfb2 	b.w	6170 <bt_conn_create_pdu_timeout>

0001720c <bt_l2cap_send_cb>:
{
   1720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17210:	4614      	mov	r4, r2
   17212:	4605      	mov	r5, r0
   17214:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   17216:	f102 0008 	add.w	r0, r2, #8
   1721a:	2104      	movs	r1, #4
   1721c:	461e      	mov	r6, r3
   1721e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17222:	f001 fc8e 	bl	18b42 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17226:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   17228:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1722a:	3a04      	subs	r2, #4
   1722c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1722e:	4643      	mov	r3, r8
   17230:	4632      	mov	r2, r6
   17232:	4621      	mov	r1, r4
   17234:	4628      	mov	r0, r5
}
   17236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1723a:	f7ee be37 	b.w	5eac <bt_conn_send_cb>

0001723e <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1723e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17240:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17242:	2202      	movs	r2, #2
   17244:	2001      	movs	r0, #1
   17246:	f7ff ffa1 	bl	1718c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1724a:	4604      	mov	r4, r0
   1724c:	b198      	cbz	r0, 17276 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1724e:	2102      	movs	r1, #2
   17250:	3008      	adds	r0, #8
   17252:	f001 fc5d 	bl	18b10 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17256:	2300      	movs	r3, #0
   17258:	7003      	strb	r3, [r0, #0]
   1725a:	7043      	strb	r3, [r0, #1]
   1725c:	4622      	mov	r2, r4
   1725e:	9300      	str	r3, [sp, #0]
   17260:	2105      	movs	r1, #5
   17262:	4628      	mov	r0, r5
   17264:	f7ff ffd2 	bl	1720c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17268:	b128      	cbz	r0, 17276 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1726a:	4620      	mov	r0, r4
}
   1726c:	b003      	add	sp, #12
   1726e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   17272:	f7fb ba85 	b.w	12780 <net_buf_unref>
}
   17276:	b003      	add	sp, #12
   17278:	bd30      	pop	{r4, r5, pc}

0001727a <l2cap_recv>:
{
   1727a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1727c:	898b      	ldrh	r3, [r1, #12]
   1727e:	2b03      	cmp	r3, #3
{
   17280:	b085      	sub	sp, #20
   17282:	4605      	mov	r5, r0
   17284:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17286:	d911      	bls.n	172ac <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   17288:	2104      	movs	r1, #4
   1728a:	f104 0008 	add.w	r0, r4, #8
   1728e:	f001 fc68 	bl	18b62 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17292:	89a3      	ldrh	r3, [r4, #12]
   17294:	8842      	ldrh	r2, [r0, #2]
   17296:	429a      	cmp	r2, r3
   17298:	d108      	bne.n	172ac <l2cap_recv+0x32>
	if (!hdr->ident) {
   1729a:	7841      	ldrb	r1, [r0, #1]
   1729c:	b131      	cbz	r1, 172ac <l2cap_recv+0x32>
	switch (hdr->code) {
   1729e:	7803      	ldrb	r3, [r0, #0]
   172a0:	2b12      	cmp	r3, #18
   172a2:	d006      	beq.n	172b2 <l2cap_recv+0x38>
   172a4:	2b13      	cmp	r3, #19
   172a6:	d001      	beq.n	172ac <l2cap_recv+0x32>
   172a8:	2b01      	cmp	r3, #1
   172aa:	d14b      	bne.n	17344 <l2cap_recv+0xca>
}
   172ac:	2000      	movs	r0, #0
   172ae:	b005      	add	sp, #20
   172b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   172b2:	2a07      	cmp	r2, #7
   172b4:	d9fa      	bls.n	172ac <l2cap_recv+0x32>
   172b6:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   172b8:	78ef      	ldrb	r7, [r5, #3]
   172ba:	b11f      	cbz	r7, 172c4 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   172bc:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   172be:	f7ff ffbe 	bl	1723e <l2cap_send_reject.constprop.0>
		break;
   172c2:	e7f3      	b.n	172ac <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   172c4:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   172c6:	7850      	ldrb	r0, [r2, #1]
   172c8:	7813      	ldrb	r3, [r2, #0]
   172ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   172ce:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   172d2:	78d0      	ldrb	r0, [r2, #3]
   172d4:	7893      	ldrb	r3, [r2, #2]
   172d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   172da:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   172de:	7950      	ldrb	r0, [r2, #5]
   172e0:	7913      	ldrb	r3, [r2, #4]
   172e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   172e6:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   172ea:	7993      	ldrb	r3, [r2, #6]
   172ec:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   172ee:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   172f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   172f4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   172f6:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   172fa:	f7ff ff47 	bl	1718c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   172fe:	4604      	mov	r4, r0
   17300:	2800      	cmp	r0, #0
   17302:	d0d3      	beq.n	172ac <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   17304:	a902      	add	r1, sp, #8
   17306:	4628      	mov	r0, r5
   17308:	f7ee ff8c 	bl	6224 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1730c:	2102      	movs	r1, #2
   1730e:	4606      	mov	r6, r0
   17310:	f104 0008 	add.w	r0, r4, #8
   17314:	f001 fbfc 	bl	18b10 <net_buf_simple_add>
	if (accepted) {
   17318:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1731c:	b2db      	uxtb	r3, r3
   1731e:	8003      	strh	r3, [r0, #0]
   17320:	4622      	mov	r2, r4
   17322:	9700      	str	r7, [sp, #0]
   17324:	463b      	mov	r3, r7
   17326:	2105      	movs	r1, #5
   17328:	4628      	mov	r0, r5
   1732a:	f7ff ff6f 	bl	1720c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1732e:	b110      	cbz	r0, 17336 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   17330:	4620      	mov	r0, r4
   17332:	f7fb fa25 	bl	12780 <net_buf_unref>
	if (accepted) {
   17336:	2e00      	cmp	r6, #0
   17338:	d0b8      	beq.n	172ac <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   1733a:	a902      	add	r1, sp, #8
   1733c:	4628      	mov	r0, r5
   1733e:	f7ff fefc 	bl	1713a <bt_conn_le_conn_update>
   17342:	e7b3      	b.n	172ac <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   17344:	6828      	ldr	r0, [r5, #0]
   17346:	e7ba      	b.n	172be <l2cap_recv+0x44>

00017348 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   17348:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1734a:	b130      	cbz	r0, 1735a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1734c:	8983      	ldrh	r3, [r0, #12]
   1734e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   17350:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   17354:	d001      	beq.n	1735a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   17356:	6880      	ldr	r0, [r0, #8]
   17358:	e7f7      	b.n	1734a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1735a:	4770      	bx	lr

0001735c <bt_l2cap_recv>:
{
   1735c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1735e:	898b      	ldrh	r3, [r1, #12]
   17360:	2b03      	cmp	r3, #3
{
   17362:	4605      	mov	r5, r0
   17364:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17366:	d804      	bhi.n	17372 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   17368:	4620      	mov	r0, r4
}
   1736a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1736e:	f7fb ba07 	b.w	12780 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   17372:	2104      	movs	r1, #4
   17374:	f104 0008 	add.w	r0, r4, #8
   17378:	f001 fbf3 	bl	18b62 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1737c:	8841      	ldrh	r1, [r0, #2]
   1737e:	4628      	mov	r0, r5
   17380:	f7ff ffe2 	bl	17348 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17384:	2800      	cmp	r0, #0
   17386:	d0ef      	beq.n	17368 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   17388:	6843      	ldr	r3, [r0, #4]
   1738a:	4621      	mov	r1, r4
   1738c:	691b      	ldr	r3, [r3, #16]
   1738e:	4798      	blx	r3
   17390:	e7ea      	b.n	17368 <bt_l2cap_recv+0xc>

00017392 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   17392:	4770      	bx	lr

00017394 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   17394:	4603      	mov	r3, r0
	return list->head;
   17396:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   17398:	b128      	cbz	r0, 173a6 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1739a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1739c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1739e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   173a0:	4288      	cmp	r0, r1
	list->tail = node;
   173a2:	bf08      	it	eq
   173a4:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   173a6:	4770      	bx	lr

000173a8 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   173a8:	4603      	mov	r3, r0
	size_t bytes = 0;
   173aa:	2000      	movs	r0, #0

	while (buf) {
   173ac:	b903      	cbnz	r3, 173b0 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   173ae:	4770      	bx	lr
		bytes += buf->len;
   173b0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   173b2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   173b4:	4410      	add	r0, r2
		buf = buf->frags;
   173b6:	e7f9      	b.n	173ac <net_buf_frags_len+0x4>

000173b8 <attr_read_type_cb>:
{
   173b8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   173ba:	68d4      	ldr	r4, [r2, #12]
   173bc:	7823      	ldrb	r3, [r4, #0]
   173be:	3102      	adds	r1, #2
   173c0:	b913      	cbnz	r3, 173c8 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   173c2:	7021      	strb	r1, [r4, #0]
	return true;
   173c4:	2001      	movs	r0, #1
   173c6:	e006      	b.n	173d6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   173c8:	428b      	cmp	r3, r1
   173ca:	d0fb      	beq.n	173c4 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   173cc:	8983      	ldrh	r3, [r0, #12]
   173ce:	3b02      	subs	r3, #2
   173d0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   173d2:	2000      	movs	r0, #0
   173d4:	6110      	str	r0, [r2, #16]
}
   173d6:	bd10      	pop	{r4, pc}

000173d8 <att_prepare_write_req>:
}
   173d8:	2006      	movs	r0, #6
   173da:	4770      	bx	lr

000173dc <att_op_get_type>:
	switch (op) {
   173dc:	2852      	cmp	r0, #82	; 0x52
   173de:	d830      	bhi.n	17442 <att_op_get_type+0x66>
   173e0:	b388      	cbz	r0, 17446 <att_op_get_type+0x6a>
   173e2:	1e43      	subs	r3, r0, #1
   173e4:	2b51      	cmp	r3, #81	; 0x51
   173e6:	d82e      	bhi.n	17446 <att_op_get_type+0x6a>
   173e8:	e8df f003 	tbb	[pc, r3]
   173ec:	39333933 	.word	0x39333933
   173f0:	39333933 	.word	0x39333933
   173f4:	39333933 	.word	0x39333933
   173f8:	39333933 	.word	0x39333933
   173fc:	2d333933 	.word	0x2d333933
   17400:	3933392d 	.word	0x3933392d
   17404:	2d352d33 	.word	0x2d352d33
   17408:	392d2937 	.word	0x392d2937
   1740c:	2d352d33 	.word	0x2d352d33
   17410:	2d2d2d2d 	.word	0x2d2d2d2d
   17414:	2d2d2d2d 	.word	0x2d2d2d2d
   17418:	2d2d2d2d 	.word	0x2d2d2d2d
   1741c:	2d2d2d2d 	.word	0x2d2d2d2d
   17420:	2d2d2d2d 	.word	0x2d2d2d2d
   17424:	2d2d2d2d 	.word	0x2d2d2d2d
   17428:	2d2d2d2d 	.word	0x2d2d2d2d
   1742c:	2d2d2d2d 	.word	0x2d2d2d2d
   17430:	2d2d2d2d 	.word	0x2d2d2d2d
   17434:	2d2d2d2d 	.word	0x2d2d2d2d
   17438:	2d2d2d2d 	.word	0x2d2d2d2d
   1743c:	3b2d      	.short	0x3b2d
   1743e:	2004      	movs	r0, #4
   17440:	4770      	bx	lr
   17442:	28d2      	cmp	r0, #210	; 0xd2
   17444:	d00d      	beq.n	17462 <att_op_get_type+0x86>
		return ATT_COMMAND;
   17446:	f010 0f40 	tst.w	r0, #64	; 0x40
   1744a:	bf0c      	ite	eq
   1744c:	2006      	moveq	r0, #6
   1744e:	2000      	movne	r0, #0
   17450:	4770      	bx	lr
		return ATT_RESPONSE;
   17452:	2002      	movs	r0, #2
   17454:	4770      	bx	lr
		return ATT_NOTIFICATION;
   17456:	2003      	movs	r0, #3
   17458:	4770      	bx	lr
		return ATT_INDICATION;
   1745a:	2005      	movs	r0, #5
   1745c:	4770      	bx	lr
		return ATT_REQUEST;
   1745e:	2001      	movs	r0, #1
   17460:	4770      	bx	lr
		return ATT_COMMAND;
   17462:	2000      	movs	r0, #0
}
   17464:	4770      	bx	lr

00017466 <att_notify_mult>:
{
   17466:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   17468:	6803      	ldr	r3, [r0, #0]
   1746a:	898a      	ldrh	r2, [r1, #12]
   1746c:	6818      	ldr	r0, [r3, #0]
   1746e:	6889      	ldr	r1, [r1, #8]
   17470:	f001 fa3f 	bl	188f2 <bt_gatt_mult_notification>
}
   17474:	2000      	movs	r0, #0
   17476:	bd08      	pop	{r3, pc}

00017478 <att_notify>:
{
   17478:	b538      	push	{r3, r4, r5, lr}
   1747a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1747c:	f101 0008 	add.w	r0, r1, #8
   17480:	460c      	mov	r4, r1
   17482:	f001 fb7e 	bl	18b82 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   17486:	682d      	ldr	r5, [r5, #0]
   17488:	89a3      	ldrh	r3, [r4, #12]
   1748a:	68a2      	ldr	r2, [r4, #8]
   1748c:	4601      	mov	r1, r0
   1748e:	6828      	ldr	r0, [r5, #0]
   17490:	f001 fa03 	bl	1889a <bt_gatt_notification>
}
   17494:	2000      	movs	r0, #0
   17496:	bd38      	pop	{r3, r4, r5, pc}

00017498 <att_chan_mtu_updated>:
{
   17498:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1749a:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1749c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1749e:	b1c3      	cbz	r3, 174d2 <att_chan_mtu_updated+0x3a>
   174a0:	461a      	mov	r2, r3
	return node->next;
   174a2:	f852 49e0 	ldr.w	r4, [r2], #-224
   174a6:	b104      	cbz	r4, 174aa <att_chan_mtu_updated+0x12>
   174a8:	3ce0      	subs	r4, #224	; 0xe0
{
   174aa:	2300      	movs	r3, #0
   174ac:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   174ae:	4290      	cmp	r0, r2
   174b0:	d007      	beq.n	174c2 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   174b2:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   174b4:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   174b6:	42a9      	cmp	r1, r5
   174b8:	bf38      	it	cc
   174ba:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   174bc:	4293      	cmp	r3, r2
   174be:	bf38      	it	cc
   174c0:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   174c2:	b13c      	cbz	r4, 174d4 <att_chan_mtu_updated+0x3c>
   174c4:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   174c8:	b105      	cbz	r5, 174cc <att_chan_mtu_updated+0x34>
   174ca:	3de0      	subs	r5, #224	; 0xe0
{
   174cc:	4622      	mov	r2, r4
   174ce:	462c      	mov	r4, r5
   174d0:	e7ed      	b.n	174ae <att_chan_mtu_updated+0x16>
   174d2:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   174d4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   174d6:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   174d8:	428c      	cmp	r4, r1
   174da:	d801      	bhi.n	174e0 <att_chan_mtu_updated+0x48>
   174dc:	429a      	cmp	r2, r3
   174de:	d909      	bls.n	174f4 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   174e0:	429a      	cmp	r2, r3
   174e2:	bf38      	it	cc
   174e4:	461a      	movcc	r2, r3
   174e6:	42a1      	cmp	r1, r4
   174e8:	6830      	ldr	r0, [r6, #0]
   174ea:	bf38      	it	cc
   174ec:	4621      	movcc	r1, r4
}
   174ee:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   174f0:	f7f0 bc94 	b.w	7e1c <bt_gatt_att_max_mtu_changed>
}
   174f4:	bc70      	pop	{r4, r5, r6}
   174f6:	4770      	bx	lr

000174f8 <bt_gatt_foreach_attr>:
{
   174f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   174fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   174fe:	2300      	movs	r3, #0
   17500:	9300      	str	r3, [sp, #0]
   17502:	461a      	mov	r2, r3
   17504:	f7f0 f9e0 	bl	78c8 <bt_gatt_foreach_attr_type>
}
   17508:	b005      	add	sp, #20
   1750a:	f85d fb04 	ldr.w	pc, [sp], #4

0001750e <find_type_cb>:
{
   1750e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   17512:	f8d2 9000 	ldr.w	r9, [r2]
{
   17516:	b091      	sub	sp, #68	; 0x44
   17518:	4607      	mov	r7, r0
   1751a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1751c:	2500      	movs	r5, #0
   1751e:	f642 0301 	movw	r3, #10241	; 0x2801
   17522:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   17524:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17528:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1752c:	a90b      	add	r1, sp, #44	; 0x2c
{
   1752e:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17530:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   17534:	f7ff f986 	bl	16844 <bt_uuid_cmp>
   17538:	2800      	cmp	r0, #0
   1753a:	d079      	beq.n	17630 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1753c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17540:	6838      	ldr	r0, [r7, #0]
   17542:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17546:	a90b      	add	r1, sp, #44	; 0x2c
   17548:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1754c:	f7ff f97a 	bl	16844 <bt_uuid_cmp>
   17550:	b138      	cbz	r0, 17562 <find_type_cb+0x54>
		if (data->group &&
   17552:	68a3      	ldr	r3, [r4, #8]
   17554:	b11b      	cbz	r3, 1755e <find_type_cb+0x50>
   17556:	885a      	ldrh	r2, [r3, #2]
   17558:	42b2      	cmp	r2, r6
   1755a:	d200      	bcs.n	1755e <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1755c:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1755e:	2001      	movs	r0, #1
   17560:	e009      	b.n	17576 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17562:	6861      	ldr	r1, [r4, #4]
   17564:	4608      	mov	r0, r1
   17566:	f7ff ff1f 	bl	173a8 <net_buf_frags_len>
   1756a:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1756e:	1a1b      	subs	r3, r3, r0
   17570:	2b03      	cmp	r3, #3
   17572:	d803      	bhi.n	1757c <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   17574:	2000      	movs	r0, #0
}
   17576:	b011      	add	sp, #68	; 0x44
   17578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1757c:	4608      	mov	r0, r1
   1757e:	f001 fa99 	bl	18ab4 <net_buf_frag_last>
   17582:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17584:	6860      	ldr	r0, [r4, #4]
   17586:	f7ff ff0f 	bl	173a8 <net_buf_frags_len>
   1758a:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1758e:	f105 0b08 	add.w	fp, r5, #8
   17592:	ebaa 0a00 	sub.w	sl, sl, r0
   17596:	4658      	mov	r0, fp
   17598:	f001 faff 	bl	18b9a <net_buf_simple_tailroom>
   1759c:	4582      	cmp	sl, r0
   1759e:	d23f      	bcs.n	17620 <find_type_cb+0x112>
   175a0:	6860      	ldr	r0, [r4, #4]
   175a2:	f7ff ff01 	bl	173a8 <net_buf_frags_len>
   175a6:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   175aa:	1a18      	subs	r0, r3, r0
	if (!len) {
   175ac:	b970      	cbnz	r0, 175cc <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   175ae:	6863      	ldr	r3, [r4, #4]
   175b0:	7998      	ldrb	r0, [r3, #6]
   175b2:	f7fb f821 	bl	125f8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   175b6:	2200      	movs	r2, #0
   175b8:	2300      	movs	r3, #0
   175ba:	f001 fa41 	bl	18a40 <net_buf_alloc_fixed>
		if (!frag) {
   175be:	4605      	mov	r5, r0
   175c0:	2800      	cmp	r0, #0
   175c2:	d0d7      	beq.n	17574 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   175c4:	4601      	mov	r1, r0
   175c6:	6860      	ldr	r0, [r4, #4]
   175c8:	f001 fa85 	bl	18ad6 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   175cc:	2300      	movs	r3, #0
   175ce:	9300      	str	r3, [sp, #0]
   175d0:	f8d7 9004 	ldr.w	r9, [r7, #4]
   175d4:	4639      	mov	r1, r7
   175d6:	2310      	movs	r3, #16
   175d8:	aa02      	add	r2, sp, #8
   175da:	4640      	mov	r0, r8
   175dc:	47c8      	blx	r9
	if (read < 0) {
   175de:	1e07      	subs	r7, r0, #0
   175e0:	db26      	blt.n	17630 <find_type_cb+0x122>
	if (read != data->value_len) {
   175e2:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   175e4:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   175e6:	42ba      	cmp	r2, r7
   175e8:	d01e      	beq.n	17628 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   175ea:	4601      	mov	r1, r0
   175ec:	a80b      	add	r0, sp, #44	; 0x2c
   175ee:	f7ff f957 	bl	168a0 <bt_uuid_create>
   175f2:	b1e8      	cbz	r0, 17630 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   175f4:	b2fa      	uxtb	r2, r7
   175f6:	a902      	add	r1, sp, #8
   175f8:	a806      	add	r0, sp, #24
   175fa:	f7ff f951 	bl	168a0 <bt_uuid_create>
   175fe:	b1b8      	cbz	r0, 17630 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17600:	a906      	add	r1, sp, #24
   17602:	a80b      	add	r0, sp, #44	; 0x2c
   17604:	f7ff f91e 	bl	16844 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   17608:	b990      	cbnz	r0, 17630 <find_type_cb+0x122>
	data->err = 0x00;
   1760a:	2300      	movs	r3, #0
   1760c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1760e:	2104      	movs	r1, #4
   17610:	f105 0008 	add.w	r0, r5, #8
   17614:	f001 fa7c 	bl	18b10 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   17618:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1761a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1761c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1761e:	e79e      	b.n	1755e <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   17620:	4658      	mov	r0, fp
   17622:	f001 faba 	bl	18b9a <net_buf_simple_tailroom>
   17626:	e7c1      	b.n	175ac <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   17628:	a902      	add	r1, sp, #8
   1762a:	f7ff f8d1 	bl	167d0 <memcmp>
   1762e:	e7eb      	b.n	17608 <find_type_cb+0xfa>
	data->group = NULL;
   17630:	2300      	movs	r3, #0
   17632:	60a3      	str	r3, [r4, #8]
   17634:	e793      	b.n	1755e <find_type_cb+0x50>

00017636 <find_info_cb>:
{
   17636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   17638:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1763a:	6817      	ldr	r7, [r2, #0]
{
   1763c:	4605      	mov	r5, r0
   1763e:	460e      	mov	r6, r1
   17640:	4614      	mov	r4, r2
	if (!data->rsp) {
   17642:	b963      	cbnz	r3, 1765e <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   17644:	6850      	ldr	r0, [r2, #4]
   17646:	2101      	movs	r1, #1
   17648:	3008      	adds	r0, #8
   1764a:	f001 fa61 	bl	18b10 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1764e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   17650:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   17652:	781b      	ldrb	r3, [r3, #0]
   17654:	2b00      	cmp	r3, #0
   17656:	bf0c      	ite	eq
   17658:	2301      	moveq	r3, #1
   1765a:	2302      	movne	r3, #2
   1765c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1765e:	68a3      	ldr	r3, [r4, #8]
   17660:	781b      	ldrb	r3, [r3, #0]
   17662:	2b01      	cmp	r3, #1
   17664:	d003      	beq.n	1766e <find_info_cb+0x38>
   17666:	2b02      	cmp	r3, #2
   17668:	d018      	beq.n	1769c <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   1766a:	2000      	movs	r0, #0
   1766c:	e015      	b.n	1769a <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1766e:	682b      	ldr	r3, [r5, #0]
   17670:	781b      	ldrb	r3, [r3, #0]
   17672:	2b00      	cmp	r3, #0
   17674:	d1f9      	bne.n	1766a <find_info_cb+0x34>
   17676:	6860      	ldr	r0, [r4, #4]
   17678:	2104      	movs	r1, #4
   1767a:	3008      	adds	r0, #8
   1767c:	f001 fa48 	bl	18b10 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   17680:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   17682:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   17684:	885b      	ldrh	r3, [r3, #2]
   17686:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   17688:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1768a:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1768c:	899b      	ldrh	r3, [r3, #12]
   1768e:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   17690:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   17692:	2804      	cmp	r0, #4
   17694:	bf94      	ite	ls
   17696:	2000      	movls	r0, #0
   17698:	2001      	movhi	r0, #1
}
   1769a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1769c:	682b      	ldr	r3, [r5, #0]
   1769e:	781b      	ldrb	r3, [r3, #0]
   176a0:	2b02      	cmp	r3, #2
   176a2:	d1e2      	bne.n	1766a <find_info_cb+0x34>
   176a4:	6860      	ldr	r0, [r4, #4]
   176a6:	2112      	movs	r1, #18
   176a8:	3008      	adds	r0, #8
   176aa:	f001 fa31 	bl	18b10 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   176ae:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   176b0:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   176b2:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   176b4:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   176b8:	3101      	adds	r1, #1
   176ba:	f7ff f89a 	bl	167f2 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   176be:	6863      	ldr	r3, [r4, #4]
   176c0:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   176c2:	899b      	ldrh	r3, [r3, #12]
   176c4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   176c6:	2812      	cmp	r0, #18
   176c8:	e7e4      	b.n	17694 <find_info_cb+0x5e>

000176ca <attr_read_group_cb>:
	if (!data->rsp->len) {
   176ca:	68d0      	ldr	r0, [r2, #12]
   176cc:	7803      	ldrb	r3, [r0, #0]
   176ce:	3104      	adds	r1, #4
   176d0:	b913      	cbnz	r3, 176d8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   176d2:	7001      	strb	r1, [r0, #0]
	return true;
   176d4:	2001      	movs	r0, #1
}
   176d6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   176d8:	428b      	cmp	r3, r1
   176da:	d0fb      	beq.n	176d4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   176dc:	6891      	ldr	r1, [r2, #8]
   176de:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   176e0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   176e2:	3b04      	subs	r3, #4
   176e4:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   176e6:	6110      	str	r0, [r2, #16]
		return false;
   176e8:	4770      	bx	lr

000176ea <att_get>:
{
   176ea:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   176ec:	7a83      	ldrb	r3, [r0, #10]
   176ee:	2b07      	cmp	r3, #7
   176f0:	d001      	beq.n	176f6 <att_get+0xc>
		return NULL;
   176f2:	2000      	movs	r0, #0
}
   176f4:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   176f6:	2104      	movs	r1, #4
   176f8:	f7ff fe26 	bl	17348 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   176fc:	2800      	cmp	r0, #0
   176fe:	d0f8      	beq.n	176f2 <att_get+0x8>
	return att_chan->att;
   17700:	f850 0c04 	ldr.w	r0, [r0, #-4]
   17704:	e7f6      	b.n	176f4 <att_get+0xa>

00017706 <write_cb>:
{
   17706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17708:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1770a:	4601      	mov	r1, r0
{
   1770c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1770e:	222a      	movs	r2, #42	; 0x2a
   17710:	6820      	ldr	r0, [r4, #0]
   17712:	f000 ffa2 	bl	1865a <bt_gatt_check_perm>
   17716:	4605      	mov	r5, r0
   17718:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1771a:	bb20      	cbnz	r0, 17766 <write_cb+0x60>
	if (!data->req) {
   1771c:	7a23      	ldrb	r3, [r4, #8]
   1771e:	b1ab      	cbz	r3, 1774c <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   17720:	2b18      	cmp	r3, #24
   17722:	bf14      	ite	ne
   17724:	2300      	movne	r3, #0
   17726:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   17728:	9301      	str	r3, [sp, #4]
   1772a:	8a63      	ldrh	r3, [r4, #18]
   1772c:	9300      	str	r3, [sp, #0]
   1772e:	68b7      	ldr	r7, [r6, #8]
   17730:	8a23      	ldrh	r3, [r4, #16]
   17732:	68e2      	ldr	r2, [r4, #12]
   17734:	6820      	ldr	r0, [r4, #0]
   17736:	4631      	mov	r1, r6
   17738:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1773a:	1e03      	subs	r3, r0, #0
   1773c:	db08      	blt.n	17750 <write_cb+0x4a>
   1773e:	8a22      	ldrh	r2, [r4, #16]
   17740:	4293      	cmp	r3, r2
   17742:	d10e      	bne.n	17762 <write_cb+0x5c>
	data->err = 0U;
   17744:	2300      	movs	r3, #0
   17746:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   17748:	2501      	movs	r5, #1
   1774a:	e007      	b.n	1775c <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1774c:	2302      	movs	r3, #2
   1774e:	e7eb      	b.n	17728 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   17750:	f113 0fff 	cmn.w	r3, #255	; 0xff
   17754:	d305      	bcc.n	17762 <write_cb+0x5c>
		return -err;
   17756:	425b      	negs	r3, r3
   17758:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1775a:	7523      	strb	r3, [r4, #20]
}
   1775c:	4628      	mov	r0, r5
   1775e:	b003      	add	sp, #12
   17760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   17762:	230e      	movs	r3, #14
   17764:	e7f9      	b.n	1775a <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   17766:	2500      	movs	r5, #0
   17768:	e7f8      	b.n	1775c <write_cb+0x56>

0001776a <att_chan_read>:
{
   1776a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1776e:	4680      	mov	r8, r0
   17770:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   17772:	4610      	mov	r0, r2
{
   17774:	4699      	mov	r9, r3
   17776:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   17778:	f7ff fe16 	bl	173a8 <net_buf_frags_len>
   1777c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   17780:	4283      	cmp	r3, r0
{
   17782:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   17784:	d97a      	bls.n	1787c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   17786:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1778a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1778c:	4630      	mov	r0, r6
   1778e:	f001 f991 	bl	18ab4 <net_buf_frag_last>
	size_t len, total = 0;
   17792:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   17796:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   17798:	4630      	mov	r0, r6
   1779a:	f7ff fe05 	bl	173a8 <net_buf_frags_len>
   1779e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   177a2:	f105 0708 	add.w	r7, r5, #8
   177a6:	1a24      	subs	r4, r4, r0
   177a8:	4638      	mov	r0, r7
   177aa:	f001 f9f6 	bl	18b9a <net_buf_simple_tailroom>
   177ae:	4284      	cmp	r4, r0
   177b0:	d211      	bcs.n	177d6 <att_chan_read+0x6c>
   177b2:	4630      	mov	r0, r6
   177b4:	f7ff fdf8 	bl	173a8 <net_buf_frags_len>
   177b8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   177bc:	1a24      	subs	r4, r4, r0
		if (!len) {
   177be:	bb34      	cbnz	r4, 1780e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   177c0:	79b0      	ldrb	r0, [r6, #6]
   177c2:	f7fa ff19 	bl	125f8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   177c6:	2200      	movs	r2, #0
   177c8:	2300      	movs	r3, #0
   177ca:	f001 f939 	bl	18a40 <net_buf_alloc_fixed>
			if (!frag) {
   177ce:	4605      	mov	r5, r0
   177d0:	b930      	cbnz	r0, 177e0 <att_chan_read+0x76>
	return total;
   177d2:	4657      	mov	r7, sl
   177d4:	e02c      	b.n	17830 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   177d6:	4638      	mov	r0, r7
   177d8:	f001 f9df 	bl	18b9a <net_buf_simple_tailroom>
   177dc:	4604      	mov	r4, r0
   177de:	e7ee      	b.n	177be <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   177e0:	4601      	mov	r1, r0
   177e2:	4630      	mov	r0, r6
   177e4:	f001 f977 	bl	18ad6 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   177e8:	4630      	mov	r0, r6
   177ea:	f7ff fddd 	bl	173a8 <net_buf_frags_len>
   177ee:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   177f2:	f105 0708 	add.w	r7, r5, #8
   177f6:	1a24      	subs	r4, r4, r0
   177f8:	4638      	mov	r0, r7
   177fa:	f001 f9ce 	bl	18b9a <net_buf_simple_tailroom>
   177fe:	4284      	cmp	r4, r0
   17800:	d21a      	bcs.n	17838 <att_chan_read+0xce>
   17802:	4630      	mov	r0, r6
   17804:	f7ff fdd0 	bl	173a8 <net_buf_frags_len>
   17808:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1780c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1780e:	68a9      	ldr	r1, [r5, #8]
   17810:	89aa      	ldrh	r2, [r5, #12]
   17812:	f8db 7004 	ldr.w	r7, [fp, #4]
   17816:	9803      	ldr	r0, [sp, #12]
   17818:	f8cd 9000 	str.w	r9, [sp]
   1781c:	440a      	add	r2, r1
   1781e:	b2a3      	uxth	r3, r4
   17820:	4659      	mov	r1, fp
   17822:	47b8      	blx	r7
		if (read < 0) {
   17824:	1e07      	subs	r7, r0, #0
   17826:	da0c      	bge.n	17842 <att_chan_read+0xd8>
				return total;
   17828:	f1ba 0f00 	cmp.w	sl, #0
   1782c:	bf18      	it	ne
   1782e:	4657      	movne	r7, sl
}
   17830:	4638      	mov	r0, r7
   17832:	b005      	add	sp, #20
   17834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17838:	4638      	mov	r0, r7
   1783a:	f001 f9ae 	bl	18b9a <net_buf_simple_tailroom>
   1783e:	4604      	mov	r4, r0
   17840:	e7e5      	b.n	1780e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   17842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17844:	b993      	cbnz	r3, 1786c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   17846:	4639      	mov	r1, r7
   17848:	f105 0008 	add.w	r0, r5, #8
   1784c:	f001 f960 	bl	18b10 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   17850:	4630      	mov	r0, r6
   17852:	f7ff fda9 	bl	173a8 <net_buf_frags_len>
   17856:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1785a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1785c:	4283      	cmp	r3, r0
		total += read;
   1785e:	44ba      	add	sl, r7
		offset += read;
   17860:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   17864:	d9b5      	bls.n	177d2 <att_chan_read+0x68>
   17866:	42a7      	cmp	r7, r4
   17868:	d096      	beq.n	17798 <att_chan_read+0x2e>
   1786a:	e7b2      	b.n	177d2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1786c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1786e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17870:	4639      	mov	r1, r7
   17872:	4628      	mov	r0, r5
   17874:	4798      	blx	r3
   17876:	2800      	cmp	r0, #0
   17878:	d1e5      	bne.n	17846 <att_chan_read+0xdc>
   1787a:	e7aa      	b.n	177d2 <att_chan_read+0x68>
		return 0;
   1787c:	2700      	movs	r7, #0
   1787e:	e7d7      	b.n	17830 <att_chan_read+0xc6>

00017880 <chan_req_send>:
{
   17880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   17882:	688e      	ldr	r6, [r1, #8]
{
   17884:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   17886:	4630      	mov	r0, r6
   17888:	f7ff fd8e 	bl	173a8 <net_buf_frags_len>
   1788c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1788e:	4283      	cmp	r3, r0
{
   17890:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   17892:	d30c      	bcc.n	178ae <chan_req_send+0x2e>
	req->buf = NULL;
   17894:	2700      	movs	r7, #0
	chan->req = req;
   17896:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	err = chan_send(chan, buf);
   1789a:	4620      	mov	r0, r4
	req->buf = NULL;
   1789c:	608f      	str	r7, [r1, #8]
	err = chan_send(chan, buf);
   1789e:	4631      	mov	r1, r6
   178a0:	f7ef f8d2 	bl	6a48 <chan_send>
	if (err) {
   178a4:	b110      	cbz	r0, 178ac <chan_req_send+0x2c>
		req->buf = buf;
   178a6:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   178a8:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
}
   178ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   178ae:	f06f 0079 	mvn.w	r0, #121	; 0x79
   178b2:	e7fb      	b.n	178ac <chan_req_send+0x2c>

000178b4 <process_queue>:
{
   178b4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   178b6:	2200      	movs	r2, #0
{
   178b8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   178ba:	2300      	movs	r3, #0
   178bc:	4608      	mov	r0, r1
{
   178be:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   178c0:	f001 f8c3 	bl	18a4a <net_buf_get>
	if (buf) {
   178c4:	4605      	mov	r5, r0
   178c6:	b158      	cbz	r0, 178e0 <process_queue+0x2c>
		err = chan_send(chan, buf);
   178c8:	4601      	mov	r1, r0
   178ca:	4620      	mov	r0, r4
   178cc:	f7ef f8bc 	bl	6a48 <chan_send>
		if (err) {
   178d0:	4604      	mov	r4, r0
   178d2:	b118      	cbz	r0, 178dc <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   178d4:	4629      	mov	r1, r5
   178d6:	4630      	mov	r0, r6
   178d8:	f001 fec2 	bl	19660 <k_queue_prepend>
}
   178dc:	4620      	mov	r0, r4
   178de:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   178e0:	f06f 0401 	mvn.w	r4, #1
   178e4:	e7fa      	b.n	178dc <process_queue+0x28>

000178e6 <bt_att_chan_send_rsp>:
{
   178e6:	b538      	push	{r3, r4, r5, lr}
   178e8:	4604      	mov	r4, r0
   178ea:	460d      	mov	r5, r1
	return chan_send(chan, buf);
   178ec:	f7ef f8ac 	bl	6a48 <chan_send>
	if (err) {
   178f0:	b130      	cbz	r0, 17900 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   178f2:	4629      	mov	r1, r5
   178f4:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   178f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   178fc:	f001 b8c9 	b.w	18a92 <net_buf_put>
}
   17900:	bd38      	pop	{r3, r4, r5, pc}

00017902 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17902:	b510      	push	{r4, lr}
	return list->head;
   17904:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17906:	2200      	movs	r2, #0
   17908:	b153      	cbz	r3, 17920 <sys_slist_find_and_remove.isra.0+0x1e>
   1790a:	428b      	cmp	r3, r1
   1790c:	d10e      	bne.n	1792c <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1790e:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   17910:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   17912:	b932      	cbnz	r2, 17922 <sys_slist_find_and_remove.isra.0+0x20>
   17914:	42a1      	cmp	r1, r4
	list->head = node;
   17916:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   17918:	d100      	bne.n	1791c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1791a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1791c:	2300      	movs	r3, #0
   1791e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17920:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   17922:	42a1      	cmp	r1, r4
	parent->next = child;
   17924:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17926:	bf08      	it	eq
   17928:	6042      	streq	r2, [r0, #4]
}
   1792a:	e7f7      	b.n	1791c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1792c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1792e:	681b      	ldr	r3, [r3, #0]
   17930:	e7ea      	b.n	17908 <sys_slist_find_and_remove.isra.0+0x6>

00017932 <att_exec_write_req>:
   17932:	2006      	movs	r0, #6
   17934:	4770      	bx	lr

00017936 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   17936:	2301      	movs	r3, #1
   17938:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1793c:	f3bf 8f5b 	dmb	ish
   17940:	e850 3f00 	ldrex	r3, [r0]
   17944:	ea43 0201 	orr.w	r2, r3, r1
   17948:	e840 2c00 	strex	ip, r2, [r0]
   1794c:	f1bc 0f00 	cmp.w	ip, #0
   17950:	d1f6      	bne.n	17940 <atomic_test_and_set_bit+0xa>
   17952:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   17956:	4219      	tst	r1, r3
}
   17958:	bf14      	ite	ne
   1795a:	2001      	movne	r0, #1
   1795c:	2000      	moveq	r0, #0
   1795e:	4770      	bx	lr

00017960 <read_cb>:
{
   17960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   17964:	f8d2 8000 	ldr.w	r8, [r2]
{
   17968:	4606      	mov	r6, r0
	data->err = 0x00;
   1796a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1796c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   17970:	7317      	strb	r7, [r2, #12]
{
   17972:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   17974:	4631      	mov	r1, r6
   17976:	2215      	movs	r2, #21
   17978:	f000 fe6f 	bl	1865a <bt_gatt_check_perm>
   1797c:	4604      	mov	r4, r0
   1797e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   17980:	b9a0      	cbnz	r0, 179ac <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   17982:	e9cd 0000 	strd	r0, r0, [sp]
   17986:	88ab      	ldrh	r3, [r5, #4]
   17988:	68aa      	ldr	r2, [r5, #8]
   1798a:	4631      	mov	r1, r6
   1798c:	4640      	mov	r0, r8
   1798e:	f7ff feec 	bl	1776a <att_chan_read>
	if (ret < 0) {
   17992:	1e03      	subs	r3, r0, #0
   17994:	da0c      	bge.n	179b0 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   17996:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1799a:	bf26      	itte	cs
   1799c:	425b      	negcs	r3, r3
   1799e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   179a0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   179a2:	732b      	strb	r3, [r5, #12]
}
   179a4:	4620      	mov	r0, r4
   179a6:	b002      	add	sp, #8
   179a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   179ac:	463c      	mov	r4, r7
   179ae:	e7f9      	b.n	179a4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   179b0:	2401      	movs	r4, #1
   179b2:	e7f7      	b.n	179a4 <read_cb+0x44>

000179b4 <read_vl_cb>:
{
   179b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   179b8:	f8d2 8000 	ldr.w	r8, [r2]
{
   179bc:	4606      	mov	r6, r0
	data->err = 0x00;
   179be:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   179c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   179c4:	7317      	strb	r7, [r2, #12]
{
   179c6:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   179c8:	4631      	mov	r1, r6
   179ca:	2215      	movs	r2, #21
   179cc:	f000 fe45 	bl	1865a <bt_gatt_check_perm>
   179d0:	4604      	mov	r4, r0
   179d2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   179d4:	bb18      	cbnz	r0, 17a1e <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   179d6:	68a8      	ldr	r0, [r5, #8]
   179d8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   179dc:	8982      	ldrh	r2, [r0, #12]
   179de:	1a9b      	subs	r3, r3, r2
   179e0:	2b01      	cmp	r3, #1
   179e2:	dd15      	ble.n	17a10 <read_vl_cb+0x5c>
   179e4:	2102      	movs	r1, #2
   179e6:	3008      	adds	r0, #8
   179e8:	f001 f892 	bl	18b10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   179ec:	88ab      	ldrh	r3, [r5, #4]
   179ee:	68aa      	ldr	r2, [r5, #8]
   179f0:	e9cd 4400 	strd	r4, r4, [sp]
   179f4:	4607      	mov	r7, r0
   179f6:	4631      	mov	r1, r6
   179f8:	4640      	mov	r0, r8
   179fa:	f7ff feb6 	bl	1776a <att_chan_read>
	if (read < 0) {
   179fe:	1e03      	subs	r3, r0, #0
   17a00:	da0a      	bge.n	17a18 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   17a02:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   17a06:	bf26      	itte	cs
   17a08:	425b      	negcs	r3, r3
   17a0a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   17a0c:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   17a0e:	732b      	strb	r3, [r5, #12]
}
   17a10:	4620      	mov	r0, r4
   17a12:	b002      	add	sp, #8
   17a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   17a18:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   17a1a:	2401      	movs	r4, #1
   17a1c:	e7f8      	b.n	17a10 <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   17a1e:	463c      	mov	r4, r7
   17a20:	e7f6      	b.n	17a10 <read_vl_cb+0x5c>

00017a22 <bt_att_sent>:
{
   17a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a24:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17a26:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17a28:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   17a2c:	f850 4c04 	ldr.w	r4, [r0, #-4]
   17a30:	f3bf 8f5b 	dmb	ish
   17a34:	e853 2f00 	ldrex	r2, [r3]
   17a38:	f022 0210 	bic.w	r2, r2, #16
   17a3c:	e843 2100 	strex	r1, r2, [r3]
   17a40:	2900      	cmp	r1, #0
   17a42:	d1f7      	bne.n	17a34 <bt_att_sent+0x12>
   17a44:	f3bf 8f5b 	dmb	ish
	if (!att) {
   17a48:	b30c      	cbz	r4, 17a8e <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   17a4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   17a4e:	b98b      	cbnz	r3, 17a74 <bt_att_sent+0x52>
   17a50:	6863      	ldr	r3, [r4, #4]
   17a52:	b17b      	cbz	r3, 17a74 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   17a54:	1d20      	adds	r0, r4, #4
   17a56:	f7ff fc9d 	bl	17394 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17a5a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   17a5c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17a5e:	4638      	mov	r0, r7
   17a60:	f7ff ff0e 	bl	17880 <chan_req_send>
   17a64:	2800      	cmp	r0, #0
   17a66:	da12      	bge.n	17a8e <bt_att_sent+0x6c>
	parent->next = child;
   17a68:	6863      	ldr	r3, [r4, #4]
   17a6a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17a6c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   17a6e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   17a70:	b903      	cbnz	r3, 17a74 <bt_att_sent+0x52>
	list->tail = node;
   17a72:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   17a74:	f105 0194 	add.w	r1, r5, #148	; 0x94
   17a78:	4638      	mov	r0, r7
   17a7a:	f7ff ff1b 	bl	178b4 <process_queue>
	if (!err) {
   17a7e:	b130      	cbz	r0, 17a8e <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   17a80:	f104 010c 	add.w	r1, r4, #12
   17a84:	4638      	mov	r0, r7
}
   17a86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   17a8a:	f7ff bf13 	b.w	178b4 <process_queue>
}
   17a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017a90 <att_req_send_process>:
{
   17a90:	b570      	push	{r4, r5, r6, lr}
   17a92:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   17a94:	3004      	adds	r0, #4
   17a96:	f7ff fc7d 	bl	17394 <sys_slist_get>
	if (!node) {
   17a9a:	4605      	mov	r5, r0
   17a9c:	b1a8      	cbz	r0, 17aca <att_req_send_process+0x3a>
	return list->head;
   17a9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17aa0:	b138      	cbz	r0, 17ab2 <att_req_send_process+0x22>
	return node->next;
   17aa2:	f850 69e0 	ldr.w	r6, [r0], #-224
   17aa6:	b106      	cbz	r6, 17aaa <att_req_send_process+0x1a>
   17aa8:	3ee0      	subs	r6, #224	; 0xe0
		if (!chan->req) {
   17aaa:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   17aae:	b13b      	cbz	r3, 17ac0 <att_req_send_process+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17ab0:	b966      	cbnz	r6, 17acc <att_req_send_process+0x3c>
	parent->next = child;
   17ab2:	6863      	ldr	r3, [r4, #4]
   17ab4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   17ab6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   17ab8:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   17aba:	b933      	cbnz	r3, 17aca <att_req_send_process+0x3a>
	list->tail = node;
   17abc:	60a5      	str	r5, [r4, #8]
}
   17abe:	e004      	b.n	17aca <att_req_send_process+0x3a>
	return chan_req_send(chan, req);
   17ac0:	4629      	mov	r1, r5
   17ac2:	f7ff fedd 	bl	17880 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17ac6:	2800      	cmp	r0, #0
   17ac8:	dbf2      	blt.n	17ab0 <att_req_send_process+0x20>
}
   17aca:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   17acc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17ad0:	b103      	cbz	r3, 17ad4 <att_req_send_process+0x44>
   17ad2:	3be0      	subs	r3, #224	; 0xe0
{
   17ad4:	4630      	mov	r0, r6
   17ad6:	461e      	mov	r6, r3
   17ad8:	e7e7      	b.n	17aaa <att_req_send_process+0x1a>

00017ada <bt_att_status>:
{
   17ada:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17adc:	f3bf 8f5b 	dmb	ish
   17ae0:	680b      	ldr	r3, [r1, #0]
   17ae2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   17ae6:	07db      	lsls	r3, r3, #31
{
   17ae8:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   17aea:	d518      	bpl.n	17b1e <bt_att_status+0x44>
	if (!chan->att) {
   17aec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   17af0:	b1a8      	cbz	r0, 17b1e <bt_att_status+0x44>
	if (chan->req) {
   17af2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   17af6:	b993      	cbnz	r3, 17b1e <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   17af8:	3004      	adds	r0, #4
   17afa:	f7ff fc4b 	bl	17394 <sys_slist_get>
	if (!node) {
   17afe:	4604      	mov	r4, r0
   17b00:	b168      	cbz	r0, 17b1e <bt_att_status+0x44>
	return chan_req_send(chan, req);
   17b02:	4601      	mov	r1, r0
   17b04:	1f28      	subs	r0, r5, #4
   17b06:	f7ff febb 	bl	17880 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17b0a:	2800      	cmp	r0, #0
   17b0c:	da07      	bge.n	17b1e <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   17b0e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   17b12:	685a      	ldr	r2, [r3, #4]
   17b14:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   17b16:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   17b18:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   17b1a:	b902      	cbnz	r2, 17b1e <bt_att_status+0x44>
	list->tail = node;
   17b1c:	609c      	str	r4, [r3, #8]
}
   17b1e:	bd38      	pop	{r3, r4, r5, pc}

00017b20 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   17b20:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   17b22:	6883      	ldr	r3, [r0, #8]
   17b24:	695b      	ldr	r3, [r3, #20]
   17b26:	b10b      	cbz	r3, 17b2c <att_sent+0xc>
		chan->ops->sent(chan);
   17b28:	3004      	adds	r0, #4
   17b2a:	4718      	bx	r3
}
   17b2c:	4770      	bx	lr

00017b2e <att_unknown>:
{
   17b2e:	b510      	push	{r4, lr}
   17b30:	460c      	mov	r4, r1
	if (!err) {
   17b32:	b90a      	cbnz	r2, 17b38 <att_unknown+0xa>
		att_sent(conn, user_data);
   17b34:	f7ff fff4 	bl	17b20 <att_sent>
	tx_meta_data_free(user_data);
   17b38:	4620      	mov	r0, r4
}
   17b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   17b3e:	f7ee bf21 	b.w	6984 <tx_meta_data_free>

00017b42 <att_tx_complete>:
{
   17b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b46:	4606      	mov	r6, r0
   17b48:	460c      	mov	r4, r1
	if (!err) {
   17b4a:	4615      	mov	r5, r2
   17b4c:	b90a      	cbnz	r2, 17b52 <att_tx_complete+0x10>
		att_sent(conn, user_data);
   17b4e:	f7ff ffe7 	bl	17b20 <att_sent>
	tx_meta_data_free(data);
   17b52:	4620      	mov	r0, r4
	void *ud = data->user_data;
   17b54:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
	tx_meta_data_free(data);
   17b58:	f7ee ff14 	bl	6984 <tx_meta_data_free>
	if (!err && func) {
   17b5c:	b935      	cbnz	r5, 17b6c <att_tx_complete+0x2a>
   17b5e:	b12f      	cbz	r7, 17b6c <att_tx_complete+0x2a>
		func(conn, ud);
   17b60:	4641      	mov	r1, r8
   17b62:	4630      	mov	r0, r6
   17b64:	463b      	mov	r3, r7
}
   17b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		func(conn, ud);
   17b6a:	4718      	bx	r3
}
   17b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017b70 <att_req_sent>:
{
   17b70:	b510      	push	{r4, lr}
   17b72:	460c      	mov	r4, r1
	if (!err) {
   17b74:	b90a      	cbnz	r2, 17b7a <att_req_sent+0xa>
		att_sent(conn, user_data);
   17b76:	f7ff ffd3 	bl	17b20 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   17b7a:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   17b7c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   17b80:	b12b      	cbz	r3, 17b8e <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   17b82:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17b86:	2300      	movs	r3, #0
   17b88:	30b0      	adds	r0, #176	; 0xb0
   17b8a:	f7fd fb2f 	bl	151ec <k_work_reschedule>
	tx_meta_data_free(user_data);
   17b8e:	4620      	mov	r0, r4
}
   17b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   17b94:	f7ee bef6 	b.w	6984 <tx_meta_data_free>

00017b98 <att_cfm_sent>:
{
   17b98:	b510      	push	{r4, lr}
   17b9a:	460c      	mov	r4, r1
	if (!err) {
   17b9c:	b90a      	cbnz	r2, 17ba2 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   17b9e:	f7ff ffbf 	bl	17b20 <att_sent>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ba2:	6823      	ldr	r3, [r4, #0]
   17ba4:	f3bf 8f5b 	dmb	ish
   17ba8:	3390      	adds	r3, #144	; 0x90
   17baa:	e853 2f00 	ldrex	r2, [r3]
   17bae:	f022 0202 	bic.w	r2, r2, #2
   17bb2:	e843 2100 	strex	r1, r2, [r3]
   17bb6:	2900      	cmp	r1, #0
   17bb8:	d1f7      	bne.n	17baa <att_cfm_sent+0x12>
   17bba:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   17bbe:	4620      	mov	r0, r4
}
   17bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   17bc4:	f7ee bede 	b.w	6984 <tx_meta_data_free>

00017bc8 <att_rsp_sent>:
{
   17bc8:	b510      	push	{r4, lr}
   17bca:	460c      	mov	r4, r1
	if (!err) {
   17bcc:	b90a      	cbnz	r2, 17bd2 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   17bce:	f7ff ffa7 	bl	17b20 <att_sent>
   17bd2:	6823      	ldr	r3, [r4, #0]
   17bd4:	f3bf 8f5b 	dmb	ish
   17bd8:	3390      	adds	r3, #144	; 0x90
   17bda:	e853 2f00 	ldrex	r2, [r3]
   17bde:	f022 0201 	bic.w	r2, r2, #1
   17be2:	e843 2100 	strex	r1, r2, [r3]
   17be6:	2900      	cmp	r1, #0
   17be8:	d1f7      	bne.n	17bda <att_rsp_sent+0x12>
   17bea:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   17bee:	4620      	mov	r0, r4
}
   17bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   17bf4:	f7ee bec6 	b.w	6984 <tx_meta_data_free>

00017bf8 <att_indicate>:
{
   17bf8:	b570      	push	{r4, r5, r6, lr}
   17bfa:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   17bfc:	f101 0008 	add.w	r0, r1, #8
   17c00:	460d      	mov	r5, r1
   17c02:	f000 ffbe 	bl	18b82 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   17c06:	6826      	ldr	r6, [r4, #0]
   17c08:	89ab      	ldrh	r3, [r5, #12]
   17c0a:	68aa      	ldr	r2, [r5, #8]
   17c0c:	4601      	mov	r1, r0
   17c0e:	6830      	ldr	r0, [r6, #0]
   17c10:	f000 fe43 	bl	1889a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   17c14:	211e      	movs	r1, #30
   17c16:	2200      	movs	r2, #0
   17c18:	4620      	mov	r0, r4
   17c1a:	f7ef f843 	bl	6ca4 <bt_att_chan_create_pdu>
	if (!buf) {
   17c1e:	4601      	mov	r1, r0
   17c20:	b110      	cbz	r0, 17c28 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   17c22:	4620      	mov	r0, r4
   17c24:	f7ff fe5f 	bl	178e6 <bt_att_chan_send_rsp>
}
   17c28:	2000      	movs	r0, #0
   17c2a:	bd70      	pop	{r4, r5, r6, pc}

00017c2c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   17c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c30:	4688      	mov	r8, r1
   17c32:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   17c34:	2101      	movs	r1, #1
   17c36:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   17c38:	4605      	mov	r5, r0
   17c3a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   17c3c:	f7ef f832 	bl	6ca4 <bt_att_chan_create_pdu>
	if (!buf) {
   17c40:	4604      	mov	r4, r0
   17c42:	b170      	cbz	r0, 17c62 <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   17c44:	2104      	movs	r1, #4
   17c46:	3008      	adds	r0, #8
   17c48:	f000 ff62 	bl	18b10 <net_buf_simple_add>
	rsp->request = req;
   17c4c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   17c50:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   17c52:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   17c56:	4621      	mov	r1, r4
   17c58:	4628      	mov	r0, r5
}
   17c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   17c5e:	f7ff be42 	b.w	178e6 <bt_att_chan_send_rsp>
}
   17c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017c66 <att_write_req>:
{
   17c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17c68:	460c      	mov	r4, r1
   17c6a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   17c6c:	f101 0008 	add.w	r0, r1, #8
   17c70:	f000 ff87 	bl	18b82 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   17c74:	89a2      	ldrh	r2, [r4, #12]
   17c76:	9201      	str	r2, [sp, #4]
   17c78:	68a2      	ldr	r2, [r4, #8]
   17c7a:	9200      	str	r2, [sp, #0]
   17c7c:	4603      	mov	r3, r0
   17c7e:	2213      	movs	r2, #19
   17c80:	2112      	movs	r1, #18
   17c82:	4628      	mov	r0, r5
   17c84:	f7ef f8a0 	bl	6dc8 <att_write_rsp.constprop.0>
}
   17c88:	b003      	add	sp, #12
   17c8a:	bd30      	pop	{r4, r5, pc}

00017c8c <att_write_cmd>:
{
   17c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17c8e:	460c      	mov	r4, r1
   17c90:	4605      	mov	r5, r0
   17c92:	f101 0008 	add.w	r0, r1, #8
   17c96:	f000 ff74 	bl	18b82 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   17c9a:	89a2      	ldrh	r2, [r4, #12]
   17c9c:	9201      	str	r2, [sp, #4]
   17c9e:	68a2      	ldr	r2, [r4, #8]
   17ca0:	9200      	str	r2, [sp, #0]
   17ca2:	2200      	movs	r2, #0
   17ca4:	4603      	mov	r3, r0
   17ca6:	4611      	mov	r1, r2
   17ca8:	4628      	mov	r0, r5
   17caa:	f7ef f88d 	bl	6dc8 <att_write_rsp.constprop.0>
}
   17cae:	b003      	add	sp, #12
   17cb0:	bd30      	pop	{r4, r5, pc}

00017cb2 <bt_att_create_pdu>:
{
   17cb2:	b570      	push	{r4, r5, r6, lr}
   17cb4:	460e      	mov	r6, r1
   17cb6:	4615      	mov	r5, r2
	att = att_get(conn);
   17cb8:	f7ff fd17 	bl	176ea <att_get>
	if (!att) {
   17cbc:	b158      	cbz	r0, 17cd6 <bt_att_create_pdu+0x24>
	return list->head;
   17cbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17cc0:	b14b      	cbz	r3, 17cd6 <bt_att_create_pdu+0x24>
   17cc2:	4618      	mov	r0, r3
	return node->next;
   17cc4:	f850 39e0 	ldr.w	r3, [r0], #-224
   17cc8:	b103      	cbz	r3, 17ccc <bt_att_create_pdu+0x1a>
   17cca:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17ccc:	1c6a      	adds	r2, r5, #1
   17cce:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   17cd0:	428a      	cmp	r2, r1
   17cd2:	d902      	bls.n	17cda <bt_att_create_pdu+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17cd4:	b93b      	cbnz	r3, 17ce6 <bt_att_create_pdu+0x34>
}
   17cd6:	2000      	movs	r0, #0
   17cd8:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   17cda:	462a      	mov	r2, r5
   17cdc:	4631      	mov	r1, r6
}
   17cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   17ce2:	f7ee bfdf 	b.w	6ca4 <bt_att_chan_create_pdu>
   17ce6:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17cea:	b104      	cbz	r4, 17cee <bt_att_create_pdu+0x3c>
   17cec:	3ce0      	subs	r4, #224	; 0xe0
{
   17cee:	4618      	mov	r0, r3
   17cf0:	4623      	mov	r3, r4
   17cf2:	e7ec      	b.n	17cce <bt_att_create_pdu+0x1c>

00017cf4 <att_read_blob_req>:
{
   17cf4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   17cf6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   17cf8:	8813      	ldrh	r3, [r2, #0]
   17cfa:	8852      	ldrh	r2, [r2, #2]
   17cfc:	9200      	str	r2, [sp, #0]
   17cfe:	210c      	movs	r1, #12
   17d00:	220d      	movs	r2, #13
   17d02:	f7ef f9ff 	bl	7104 <att_read_rsp>
}
   17d06:	b003      	add	sp, #12
   17d08:	f85d fb04 	ldr.w	pc, [sp], #4

00017d0c <att_read_req>:
{
   17d0c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   17d0e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   17d10:	2200      	movs	r2, #0
   17d12:	881b      	ldrh	r3, [r3, #0]
   17d14:	9200      	str	r2, [sp, #0]
   17d16:	210a      	movs	r1, #10
   17d18:	220b      	movs	r2, #11
   17d1a:	f7ef f9f3 	bl	7104 <att_read_rsp>
}
   17d1e:	b003      	add	sp, #12
   17d20:	f85d fb04 	ldr.w	pc, [sp], #4

00017d24 <att_mtu_req>:
{
   17d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->att->conn;
   17d28:	6803      	ldr	r3, [r0, #0]
   17d2a:	681e      	ldr	r6, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d2c:	f3bf 8f5b 	dmb	ish
   17d30:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   17d34:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17d38:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   17d3c:	071b      	lsls	r3, r3, #28
{
   17d3e:	4604      	mov	r4, r0
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17d40:	d42e      	bmi.n	17da0 <att_mtu_req+0x7c>
	mtu_client = sys_le16_to_cpu(req->mtu);
   17d42:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   17d44:	881b      	ldrh	r3, [r3, #0]
   17d46:	2b16      	cmp	r3, #22
   17d48:	d92c      	bls.n	17da4 <att_mtu_req+0x80>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   17d4a:	2202      	movs	r2, #2
   17d4c:	2103      	movs	r1, #3
   17d4e:	4630      	mov	r0, r6
   17d50:	f7ff ffaf 	bl	17cb2 <bt_att_create_pdu>
	if (!pdu) {
   17d54:	4607      	mov	r7, r0
   17d56:	b338      	cbz	r0, 17da8 <att_mtu_req+0x84>
	return net_buf_simple_add(&buf->b, len);
   17d58:	2102      	movs	r1, #2
   17d5a:	3008      	adds	r0, #8
   17d5c:	f000 fed8 	bl	18b10 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17d60:	f04f 0817 	mov.w	r8, #23
   17d64:	f880 8000 	strb.w	r8, [r0]
   17d68:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   17d6a:	4639      	mov	r1, r7
   17d6c:	4620      	mov	r0, r4
   17d6e:	f7ff fdba 	bl	178e6 <bt_att_chan_send_rsp>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d72:	3604      	adds	r6, #4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17d74:	f8a4 801a 	strh.w	r8, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17d78:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
   17d7c:	f3bf 8f5b 	dmb	ish
   17d80:	e856 3f00 	ldrex	r3, [r6]
   17d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   17d88:	e846 3200 	strex	r2, r3, [r6]
   17d8c:	2a00      	cmp	r2, #0
   17d8e:	d1f7      	bne.n	17d80 <att_mtu_req+0x5c>
   17d90:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   17d94:	4620      	mov	r0, r4
   17d96:	f7ff fb7f 	bl	17498 <att_chan_mtu_updated>
	return 0;
   17d9a:	4628      	mov	r0, r5
}
   17d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   17da0:	2006      	movs	r0, #6
   17da2:	e7fb      	b.n	17d9c <att_mtu_req+0x78>
		return BT_ATT_ERR_INVALID_PDU;
   17da4:	2004      	movs	r0, #4
   17da6:	e7f9      	b.n	17d9c <att_mtu_req+0x78>
		return BT_ATT_ERR_UNLIKELY;
   17da8:	200e      	movs	r0, #14
   17daa:	e7f7      	b.n	17d9c <att_mtu_req+0x78>

00017dac <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   17dac:	898a      	ldrh	r2, [r1, #12]
   17dae:	6889      	ldr	r1, [r1, #8]
   17db0:	2300      	movs	r3, #0
   17db2:	f7ef bb5d 	b.w	7470 <att_handle_rsp>

00017db6 <att_handle_find_type_rsp>:
   17db6:	f7ff bff9 	b.w	17dac <att_handle_find_info_rsp>

00017dba <att_handle_read_type_rsp>:
   17dba:	f7ff bff7 	b.w	17dac <att_handle_find_info_rsp>

00017dbe <att_handle_read_rsp>:
   17dbe:	f7ff bff5 	b.w	17dac <att_handle_find_info_rsp>

00017dc2 <att_handle_read_blob_rsp>:
   17dc2:	f7ff bff3 	b.w	17dac <att_handle_find_info_rsp>

00017dc6 <att_handle_read_mult_rsp>:
   17dc6:	f7ff bff1 	b.w	17dac <att_handle_find_info_rsp>

00017dca <att_handle_read_mult_vl_rsp>:
   17dca:	f7ff bfef 	b.w	17dac <att_handle_find_info_rsp>

00017dce <att_handle_read_group_rsp>:
   17dce:	f7ff bfed 	b.w	17dac <att_handle_find_info_rsp>

00017dd2 <att_handle_write_rsp>:
   17dd2:	f7ff bfeb 	b.w	17dac <att_handle_find_info_rsp>

00017dd6 <att_handle_prepare_write_rsp>:
   17dd6:	f7ff bfe9 	b.w	17dac <att_handle_find_info_rsp>

00017dda <att_handle_exec_write_rsp>:
   17dda:	f7ff bfe7 	b.w	17dac <att_handle_find_info_rsp>

00017dde <att_confirm>:
   17dde:	f7ff bfe5 	b.w	17dac <att_handle_find_info_rsp>

00017de2 <att_mtu_rsp>:
{
   17de2:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   17de4:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   17de6:	8833      	ldrh	r3, [r6, #0]
   17de8:	2b16      	cmp	r3, #22
{
   17dea:	4604      	mov	r4, r0
   17dec:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   17dee:	d806      	bhi.n	17dfe <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   17df0:	2200      	movs	r2, #0
   17df2:	2304      	movs	r3, #4
   17df4:	4611      	mov	r1, r2
}
   17df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   17dfa:	f7ef bb39 	b.w	7470 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   17dfe:	2317      	movs	r3, #23
   17e00:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17e02:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   17e04:	f7ff fb48 	bl	17498 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   17e08:	89aa      	ldrh	r2, [r5, #12]
   17e0a:	2300      	movs	r3, #0
   17e0c:	4631      	mov	r1, r6
   17e0e:	4620      	mov	r0, r4
   17e10:	e7f1      	b.n	17df6 <att_mtu_rsp+0x14>

00017e12 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   17e12:	38ac      	subs	r0, #172	; 0xac
   17e14:	f7ef bb70 	b.w	74f8 <bt_att_disconnected>

00017e18 <bt_att_send>:
{
   17e18:	b570      	push	{r4, r5, r6, lr}
   17e1a:	460d      	mov	r5, r1
	att = att_get(conn);
   17e1c:	f7ff fc65 	bl	176ea <att_get>
	if (!att) {
   17e20:	4604      	mov	r4, r0
   17e22:	b940      	cbnz	r0, 17e36 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17e24:	6968      	ldr	r0, [r5, #20]
   17e26:	f7ee fdad 	bl	6984 <tx_meta_data_free>
		net_buf_unref(buf);
   17e2a:	4628      	mov	r0, r5
   17e2c:	f7fa fca8 	bl	12780 <net_buf_unref>
		return -ENOTCONN;
   17e30:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17e34:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&att->tx_queue, buf);
   17e36:	f100 060c 	add.w	r6, r0, #12
   17e3a:	4629      	mov	r1, r5
   17e3c:	4630      	mov	r0, r6
   17e3e:	f000 fe28 	bl	18a92 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   17e42:	2200      	movs	r2, #0
   17e44:	2300      	movs	r3, #0
   17e46:	4630      	mov	r0, r6
   17e48:	f000 fdff 	bl	18a4a <net_buf_get>
	if (!buf) {
   17e4c:	4605      	mov	r5, r0
   17e4e:	b908      	cbnz	r0, 17e54 <bt_att_send+0x3c>
	return 0;
   17e50:	2000      	movs	r0, #0
   17e52:	e7ef      	b.n	17e34 <bt_att_send+0x1c>
	return list->head;
   17e54:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17e56:	b180      	cbz	r0, 17e7a <bt_att_send+0x62>
	return node->next;
   17e58:	f850 49e0 	ldr.w	r4, [r0], #-224
   17e5c:	b104      	cbz	r4, 17e60 <bt_att_send+0x48>
   17e5e:	3ce0      	subs	r4, #224	; 0xe0
	return chan_send(chan, buf);
   17e60:	4629      	mov	r1, r5
   17e62:	f7ee fdf1 	bl	6a48 <chan_send>
		if (err >= 0) {
   17e66:	2800      	cmp	r0, #0
   17e68:	daf2      	bge.n	17e50 <bt_att_send+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17e6a:	b134      	cbz	r4, 17e7a <bt_att_send+0x62>
   17e6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   17e70:	b103      	cbz	r3, 17e74 <bt_att_send+0x5c>
   17e72:	3be0      	subs	r3, #224	; 0xe0
{
   17e74:	4620      	mov	r0, r4
   17e76:	461c      	mov	r4, r3
   17e78:	e7f2      	b.n	17e60 <bt_att_send+0x48>
		k_queue_prepend(&att->tx_queue._queue, buf);
   17e7a:	4629      	mov	r1, r5
   17e7c:	4630      	mov	r0, r6
   17e7e:	f001 fbef 	bl	19660 <k_queue_prepend>
   17e82:	e7e5      	b.n	17e50 <bt_att_send+0x38>

00017e84 <bt_att_req_send>:
{
   17e84:	b510      	push	{r4, lr}
   17e86:	460c      	mov	r4, r1
	att = att_get(conn);
   17e88:	f7ff fc2f 	bl	176ea <att_get>
	if (!att) {
   17e8c:	b160      	cbz	r0, 17ea8 <bt_att_req_send+0x24>
	parent->next = child;
   17e8e:	2300      	movs	r3, #0
   17e90:	6023      	str	r3, [r4, #0]
	return list->tail;
   17e92:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   17e94:	b92b      	cbnz	r3, 17ea2 <bt_att_req_send+0x1e>
	list->head = node;
   17e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   17e9a:	f7ff fdf9 	bl	17a90 <att_req_send_process>
	return 0;
   17e9e:	2000      	movs	r0, #0
}
   17ea0:	bd10      	pop	{r4, pc}
	parent->next = child;
   17ea2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17ea4:	6084      	str	r4, [r0, #8]
}
   17ea6:	e7f8      	b.n	17e9a <bt_att_req_send+0x16>
		return -ENOTCONN;
   17ea8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17eac:	e7f8      	b.n	17ea0 <bt_att_req_send+0x1c>

00017eae <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   17eae:	b510      	push	{r4, lr}
   17eb0:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   17eb2:	f7ff fc1a 	bl	176ea <att_get>
	if (!att) {
   17eb6:	b198      	cbz	r0, 17ee0 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   17eb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17eba:	b14b      	cbz	r3, 17ed0 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   17ebc:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   17ec0:	68d1      	ldr	r1, [r2, #12]
   17ec2:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17ec4:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (chan->req->user_data == user_data) {
   17ec8:	d009      	beq.n	17ede <bt_att_find_req_by_user_data+0x30>
	return node->next;
   17eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   17ece:	e7f4      	b.n	17eba <bt_att_find_req_by_user_data+0xc>
	return list->head;
   17ed0:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   17ed2:	b128      	cbz	r0, 17ee0 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   17ed4:	68c3      	ldr	r3, [r0, #12]
   17ed6:	42a3      	cmp	r3, r4
   17ed8:	d002      	beq.n	17ee0 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   17eda:	6800      	ldr	r0, [r0, #0]
   17edc:	e7f9      	b.n	17ed2 <bt_att_find_req_by_user_data+0x24>
   17ede:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   17ee0:	bd10      	pop	{r4, pc}

00017ee2 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   17ee2:	2001      	movs	r0, #1
   17ee4:	4770      	bx	lr

00017ee6 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   17ee6:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   17ee8:	f7ff fbff 	bl	176ea <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   17eec:	b198      	cbz	r0, 17f16 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   17eee:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17ef0:	b18b      	cbz	r3, 17f16 <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ef2:	f3bf 8f5b 	dmb	ish
   17ef6:	3be0      	subs	r3, #224	; 0xe0
   17ef8:	f103 0290 	add.w	r2, r3, #144	; 0x90
   17efc:	e852 1f00 	ldrex	r1, [r2]
   17f00:	f021 0120 	bic.w	r1, r1, #32
   17f04:	e842 1000 	strex	r0, r1, [r2]
   17f08:	2800      	cmp	r0, #0
   17f0a:	d1f7      	bne.n	17efc <bt_att_clear_out_of_sync_sent+0x16>
   17f0c:	f3bf 8f5b 	dmb	ish
	return node->next;
   17f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   17f14:	e7ec      	b.n	17ef0 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   17f16:	bd08      	pop	{r3, pc}

00017f18 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   17f18:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17f1a:	2104      	movs	r1, #4
   17f1c:	f7ff fa14 	bl	17348 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   17f20:	b138      	cbz	r0, 17f32 <bt_att_out_of_sync_sent_on_fixed+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17f22:	f3bf 8f5b 	dmb	ish
   17f26:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   17f2a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17f2e:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   17f32:	bd08      	pop	{r3, pc}

00017f34 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   17f34:	6943      	ldr	r3, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   17f36:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
   17f3a:	4770      	bx	lr

00017f3c <gatt_ccc_changed>:
{
   17f3c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   17f3e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   17f40:	895a      	ldrh	r2, [r3, #10]
   17f42:	428a      	cmp	r2, r1
   17f44:	d003      	beq.n	17f4e <gatt_ccc_changed+0x12>
		ccc->value = value;
   17f46:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   17f48:	68db      	ldr	r3, [r3, #12]
   17f4a:	b103      	cbz	r3, 17f4e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   17f4c:	4718      	bx	r3
}
   17f4e:	4770      	bx	lr

00017f50 <gatt_indicate_rsp>:
{
   17f50:	b510      	push	{r4, lr}
   17f52:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   17f54:	68a3      	ldr	r3, [r4, #8]
{
   17f56:	460a      	mov	r2, r1
	if (params->func) {
   17f58:	b10b      	cbz	r3, 17f5e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   17f5a:	4621      	mov	r1, r4
   17f5c:	4798      	blx	r3
	params->_ref--;
   17f5e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   17f60:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   17f62:	3b01      	subs	r3, #1
   17f64:	b2db      	uxtb	r3, r3
   17f66:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   17f68:	b122      	cbz	r2, 17f74 <gatt_indicate_rsp+0x24>
   17f6a:	b91b      	cbnz	r3, 17f74 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   17f6c:	4620      	mov	r0, r4
}
   17f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   17f72:	4710      	bx	r2
}
   17f74:	bd10      	pop	{r4, pc}

00017f76 <match_uuid>:
	data->attr = attr;
   17f76:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   17f78:	8091      	strh	r1, [r2, #4]
}
   17f7a:	2000      	movs	r0, #0
   17f7c:	4770      	bx	lr

00017f7e <gen_hash_m>:
{
   17f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   17f80:	6807      	ldr	r7, [r0, #0]
   17f82:	783d      	ldrb	r5, [r7, #0]
{
   17f84:	b089      	sub	sp, #36	; 0x24
   17f86:	4606      	mov	r6, r0
   17f88:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   17f8a:	b10d      	cbz	r5, 17f90 <gen_hash_m+0x12>
	switch (u16->val) {
   17f8c:	2501      	movs	r5, #1
   17f8e:	e014      	b.n	17fba <gen_hash_m+0x3c>
   17f90:	887b      	ldrh	r3, [r7, #2]
   17f92:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   17f96:	d004      	beq.n	17fa2 <gen_hash_m+0x24>
   17f98:	d812      	bhi.n	17fc0 <gen_hash_m+0x42>
   17f9a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   17f9e:	2b03      	cmp	r3, #3
   17fa0:	d8f4      	bhi.n	17f8c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   17fa2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   17fa6:	2202      	movs	r2, #2
   17fa8:	f10d 010a 	add.w	r1, sp, #10
   17fac:	4620      	mov	r0, r4
   17fae:	f7fe fb38 	bl	16622 <tc_cmac_update>
   17fb2:	b9e0      	cbnz	r0, 17fee <gen_hash_m+0x70>
			state->err = -EINVAL;
   17fb4:	f06f 0315 	mvn.w	r3, #21
   17fb8:	65a3      	str	r3, [r4, #88]	; 0x58
}
   17fba:	4628      	mov	r0, r5
   17fbc:	b009      	add	sp, #36	; 0x24
   17fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   17fc0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   17fc4:	33ff      	adds	r3, #255	; 0xff
   17fc6:	b29b      	uxth	r3, r3
   17fc8:	2b04      	cmp	r3, #4
   17fca:	d8df      	bhi.n	17f8c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   17fcc:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   17fd0:	2202      	movs	r2, #2
   17fd2:	f10d 010a 	add.w	r1, sp, #10
   17fd6:	4620      	mov	r0, r4
   17fd8:	f7fe fb23 	bl	16622 <tc_cmac_update>
   17fdc:	2800      	cmp	r0, #0
   17fde:	d0e9      	beq.n	17fb4 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   17fe0:	887b      	ldrh	r3, [r7, #2]
   17fe2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   17fe6:	2202      	movs	r2, #2
   17fe8:	f10d 010a 	add.w	r1, sp, #10
   17fec:	e016      	b.n	1801c <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   17fee:	887b      	ldrh	r3, [r7, #2]
   17ff0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   17ff4:	2202      	movs	r2, #2
   17ff6:	f10d 010a 	add.w	r1, sp, #10
   17ffa:	4620      	mov	r0, r4
   17ffc:	f7fe fb11 	bl	16622 <tc_cmac_update>
   18000:	2800      	cmp	r0, #0
   18002:	d0d7      	beq.n	17fb4 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   18004:	2000      	movs	r0, #0
   18006:	aa03      	add	r2, sp, #12
   18008:	6877      	ldr	r7, [r6, #4]
   1800a:	9000      	str	r0, [sp, #0]
   1800c:	2313      	movs	r3, #19
   1800e:	4631      	mov	r1, r6
   18010:	47b8      	blx	r7
		if (len < 0) {
   18012:	1e02      	subs	r2, r0, #0
   18014:	da01      	bge.n	1801a <gen_hash_m+0x9c>
			state->err = len;
   18016:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   18018:	e7cf      	b.n	17fba <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1801a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1801c:	4620      	mov	r0, r4
   1801e:	f7fe fb00 	bl	16622 <tc_cmac_update>
   18022:	2800      	cmp	r0, #0
   18024:	d1b2      	bne.n	17f8c <gen_hash_m+0xe>
   18026:	e7c5      	b.n	17fb4 <gen_hash_m+0x36>

00018028 <bt_addr_le_cmp>:
   18028:	2207      	movs	r2, #7
   1802a:	f7fe bbd1 	b.w	167d0 <memcmp>

0001802e <find_ccc_cfg>:
{
   1802e:	b513      	push	{r0, r1, r4, lr}
						    &cfg->peer)) {
   18030:	1c4a      	adds	r2, r1, #1
{
   18032:	460c      	mov	r4, r1
		if (conn) {
   18034:	b140      	cbz	r0, 18048 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   18036:	7809      	ldrb	r1, [r1, #0]
   18038:	f7ff f81b 	bl	17072 <bt_conn_is_peer_addr_le>
	return NULL;
   1803c:	2800      	cmp	r0, #0
   1803e:	bf08      	it	eq
   18040:	2400      	moveq	r4, #0
}
   18042:	4620      	mov	r0, r4
   18044:	b002      	add	sp, #8
   18046:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18048:	9000      	str	r0, [sp, #0]
   1804a:	4669      	mov	r1, sp
   1804c:	f8cd 0003 	str.w	r0, [sp, #3]
   18050:	4610      	mov	r0, r2
   18052:	f7ff ffe9 	bl	18028 <bt_addr_le_cmp>
	return NULL;
   18056:	2800      	cmp	r0, #0
   18058:	bf18      	it	ne
   1805a:	2400      	movne	r4, #0
   1805c:	e7f1      	b.n	18042 <find_ccc_cfg+0x14>

0001805e <atomic_get>:
   1805e:	f3bf 8f5b 	dmb	ish
   18062:	6800      	ldr	r0, [r0, #0]
   18064:	f3bf 8f5b 	dmb	ish
}
   18068:	4770      	bx	lr

0001806a <atomic_or>:
{
   1806a:	4603      	mov	r3, r0
}
   1806c:	f3bf 8f5b 	dmb	ish
   18070:	e853 0f00 	ldrex	r0, [r3]
   18074:	ea40 0201 	orr.w	r2, r0, r1
   18078:	e843 2c00 	strex	ip, r2, [r3]
   1807c:	f1bc 0f00 	cmp.w	ip, #0
   18080:	d1f6      	bne.n	18070 <atomic_or+0x6>
   18082:	f3bf 8f5b 	dmb	ish
   18086:	4770      	bx	lr

00018088 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   18088:	2207      	movs	r2, #7
   1808a:	f7fe bbb2 	b.w	167f2 <memcpy>

0001808e <cf_write>:
{
   1808e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18092:	4698      	mov	r8, r3
   18094:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   18098:	2b01      	cmp	r3, #1
{
   1809a:	4606      	mov	r6, r0
   1809c:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1809e:	d830      	bhi.n	18102 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   180a0:	4443      	add	r3, r8
   180a2:	2b01      	cmp	r3, #1
   180a4:	4645      	mov	r5, r8
   180a6:	dc2f      	bgt.n	18108 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   180a8:	f7ef fab4 	bl	7614 <find_cf_cfg>
	if (!cfg) {
   180ac:	4604      	mov	r4, r0
   180ae:	b918      	cbnz	r0, 180b8 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   180b0:	f7ef fab0 	bl	7614 <find_cf_cfg>
	if (!cfg) {
   180b4:	4604      	mov	r4, r0
   180b6:	b350      	cbz	r0, 1810e <cf_write+0x80>
{
   180b8:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   180ba:	f1b8 0f00 	cmp.w	r8, #0
   180be:	d10e      	bne.n	180de <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   180c0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   180c4:	1c60      	adds	r0, r4, #1
   180c6:	f7ff ffdf 	bl	18088 <bt_addr_le_copy>
	cfg->id = conn->id;
   180ca:	4620      	mov	r0, r4
   180cc:	7a33      	ldrb	r3, [r6, #8]
   180ce:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   180d2:	2101      	movs	r1, #1
   180d4:	f7ff ffc9 	bl	1806a <atomic_or>
}
   180d8:	4628      	mov	r0, r5
   180da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   180de:	7a20      	ldrb	r0, [r4, #8]
   180e0:	fa20 f301 	lsr.w	r3, r0, r1
   180e4:	07da      	lsls	r2, r3, #31
   180e6:	d503      	bpl.n	180f0 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   180e8:	783b      	ldrb	r3, [r7, #0]
   180ea:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   180ec:	07db      	lsls	r3, r3, #31
   180ee:	d511      	bpl.n	18114 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   180f0:	3101      	adds	r1, #1
   180f2:	2903      	cmp	r1, #3
   180f4:	d1e1      	bne.n	180ba <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   180f6:	783b      	ldrb	r3, [r7, #0]
   180f8:	f003 0307 	and.w	r3, r3, #7
   180fc:	4318      	orrs	r0, r3
   180fe:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   18100:	e7de      	b.n	180c0 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18102:	f06f 0506 	mvn.w	r5, #6
   18106:	e7e7      	b.n	180d8 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18108:	f06f 050c 	mvn.w	r5, #12
   1810c:	e7e4      	b.n	180d8 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1810e:	f06f 0510 	mvn.w	r5, #16
   18112:	e7e1      	b.n	180d8 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18114:	f06f 0512 	mvn.w	r5, #18
   18118:	e7de      	b.n	180d8 <cf_write+0x4a>

0001811a <bt_gatt_attr_write_ccc>:
{
   1811a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1811e:	461f      	mov	r7, r3
   18120:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   18124:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   18128:	4606      	mov	r6, r0
   1812a:	4688      	mov	r8, r1
	if (offset) {
   1812c:	2b00      	cmp	r3, #0
   1812e:	d141      	bne.n	181b4 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   18130:	1e7b      	subs	r3, r7, #1
   18132:	2b01      	cmp	r3, #1
   18134:	d841      	bhi.n	181ba <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   18136:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   18138:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1813a:	4649      	mov	r1, r9
   1813c:	bf14      	ite	ne
   1813e:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   18140:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   18142:	f7ff ff74 	bl	1802e <find_ccc_cfg>
	if (!cfg) {
   18146:	4604      	mov	r4, r0
   18148:	b980      	cbnz	r0, 1816c <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   1814a:	b91d      	cbnz	r5, 18154 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1814c:	4638      	mov	r0, r7
}
   1814e:	b003      	add	sp, #12
   18150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   18154:	4649      	mov	r1, r9
   18156:	f7ff ff6a 	bl	1802e <find_ccc_cfg>
		if (!cfg) {
   1815a:	4604      	mov	r4, r0
   1815c:	b380      	cbz	r0, 181c0 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1815e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18162:	3001      	adds	r0, #1
   18164:	f7ff ff90 	bl	18088 <bt_addr_le_copy>
		cfg->id = conn->id;
   18168:	7a33      	ldrb	r3, [r6, #8]
   1816a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1816c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   18170:	b9a3      	cbnz	r3, 1819c <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   18172:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   18176:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   18178:	42ab      	cmp	r3, r5
   1817a:	d003      	beq.n	18184 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   1817c:	4649      	mov	r1, r9
   1817e:	4640      	mov	r0, r8
   18180:	f7ff fedc 	bl	17f3c <gatt_ccc_changed>
	if (!value) {
   18184:	2d00      	cmp	r5, #0
   18186:	d1e1      	bne.n	1814c <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18188:	4669      	mov	r1, sp
   1818a:	1c60      	adds	r0, r4, #1
   1818c:	9500      	str	r5, [sp, #0]
   1818e:	f8cd 5003 	str.w	r5, [sp, #3]
   18192:	f7ff ff79 	bl	18088 <bt_addr_le_copy>
	cfg->id = 0U;
   18196:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   18198:	8125      	strh	r5, [r4, #8]
}
   1819a:	e7d7      	b.n	1814c <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1819c:	462a      	mov	r2, r5
   1819e:	4641      	mov	r1, r8
   181a0:	4630      	mov	r0, r6
   181a2:	4798      	blx	r3
		if (write < 0) {
   181a4:	2800      	cmp	r0, #0
   181a6:	dbd2      	blt.n	1814e <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   181a8:	3801      	subs	r0, #1
   181aa:	2801      	cmp	r0, #1
   181ac:	d9e1      	bls.n	18172 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   181ae:	f06f 000d 	mvn.w	r0, #13
   181b2:	e7cc      	b.n	1814e <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   181b4:	f06f 0006 	mvn.w	r0, #6
   181b8:	e7c9      	b.n	1814e <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   181ba:	f06f 000c 	mvn.w	r0, #12
   181be:	e7c6      	b.n	1814e <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   181c0:	f06f 0010 	mvn.w	r0, #16
   181c4:	e7c3      	b.n	1814e <bt_gatt_attr_write_ccc+0x34>

000181c6 <gatt_sub_free>:
{
   181c6:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   181c8:	2300      	movs	r3, #0
   181ca:	4669      	mov	r1, sp
   181cc:	3001      	adds	r0, #1
   181ce:	9300      	str	r3, [sp, #0]
   181d0:	f8cd 3003 	str.w	r3, [sp, #3]
   181d4:	f7ff ff58 	bl	18088 <bt_addr_le_copy>
}
   181d8:	b003      	add	sp, #12
   181da:	f85d fb04 	ldr.w	pc, [sp], #4

000181de <gatt_sub_remove>:
{
   181de:	b570      	push	{r4, r5, r6, lr}
   181e0:	460c      	mov	r4, r1
	if (params) {
   181e2:	4619      	mov	r1, r3
   181e4:	b16b      	cbz	r3, 18202 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   181e6:	f103 0618 	add.w	r6, r3, #24
	return list->tail;
   181ea:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   181ec:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   181ee:	b97a      	cbnz	r2, 18210 <gatt_sub_remove+0x32>
   181f0:	42ae      	cmp	r6, r5
	list->head = node;
   181f2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   181f4:	d100      	bne.n	181f8 <gatt_sub_remove+0x1a>
	list->tail = node;
   181f6:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   181f8:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   181fa:	680d      	ldr	r5, [r1, #0]
   181fc:	618b      	str	r3, [r1, #24]
   181fe:	461a      	mov	r2, r3
   18200:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   18202:	68a3      	ldr	r3, [r4, #8]
   18204:	b94b      	cbnz	r3, 1821a <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   18206:	4620      	mov	r0, r4
}
   18208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   1820c:	f7ff bfdb 	b.w	181c6 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   18210:	42ae      	cmp	r6, r5
	parent->next = child;
   18212:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18214:	bf08      	it	eq
   18216:	60e2      	streq	r2, [r4, #12]
}
   18218:	e7ee      	b.n	181f8 <gatt_sub_remove+0x1a>
}
   1821a:	bd70      	pop	{r4, r5, r6, pc}

0001821c <atomic_and>:
{
   1821c:	4603      	mov	r3, r0
}
   1821e:	f3bf 8f5b 	dmb	ish
   18222:	e853 0f00 	ldrex	r0, [r3]
   18226:	ea00 0201 	and.w	r2, r0, r1
   1822a:	e843 2c00 	strex	ip, r2, [r3]
   1822e:	f1bc 0f00 	cmp.w	ip, #0
   18232:	d1f6      	bne.n	18222 <atomic_and+0x6>
   18234:	f3bf 8f5b 	dmb	ish
   18238:	4770      	bx	lr

0001823a <gatt_write_ccc_rsp>:
{
   1823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1823e:	9c06      	ldr	r4, [sp, #24]
   18240:	460e      	mov	r6, r1
   18242:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18244:	f06f 0104 	mvn.w	r1, #4
   18248:	f104 0014 	add.w	r0, r4, #20
   1824c:	f7ff ffe6 	bl	1821c <atomic_and>
	if (err) {
   18250:	b1e6      	cbz	r6, 1828c <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   18252:	4628      	mov	r0, r5
   18254:	f7ef fa0c 	bl	7670 <gatt_sub_find>
		if (!sub) {
   18258:	4601      	mov	r1, r0
   1825a:	b340      	cbz	r0, 182ae <gatt_write_ccc_rsp+0x74>
	return list->head;
   1825c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1825e:	b143      	cbz	r3, 18272 <gatt_write_ccc_rsp+0x38>
	return node->next;
   18260:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   18262:	f104 0018 	add.w	r0, r4, #24
   18266:	4283      	cmp	r3, r0
   18268:	d10b      	bne.n	18282 <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   1826a:	4623      	mov	r3, r4
   1826c:	4628      	mov	r0, r5
   1826e:	f7ff ffb6 	bl	181de <gatt_sub_remove>
	if (params->subscribe) {
   18272:	6863      	ldr	r3, [r4, #4]
   18274:	b1a3      	cbz	r3, 182a0 <gatt_write_ccc_rsp+0x66>
		params->subscribe(conn, err, params);
   18276:	4622      	mov	r2, r4
   18278:	4631      	mov	r1, r6
   1827a:	4628      	mov	r0, r5
}
   1827c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   18280:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   18282:	2a00      	cmp	r2, #0
   18284:	d0f5      	beq.n	18272 <gatt_write_ccc_rsp+0x38>
	return node->next;
   18286:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   18288:	6812      	ldr	r2, [r2, #0]
   1828a:	e7ec      	b.n	18266 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   1828c:	8a23      	ldrh	r3, [r4, #16]
   1828e:	2b00      	cmp	r3, #0
   18290:	d1ef      	bne.n	18272 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   18292:	6827      	ldr	r7, [r4, #0]
   18294:	4633      	mov	r3, r6
   18296:	4632      	mov	r2, r6
   18298:	4621      	mov	r1, r4
   1829a:	4628      	mov	r0, r5
   1829c:	47b8      	blx	r7
   1829e:	e7e8      	b.n	18272 <gatt_write_ccc_rsp+0x38>
	} else if (params->write) {
   182a0:	68a4      	ldr	r4, [r4, #8]
   182a2:	b124      	cbz	r4, 182ae <gatt_write_ccc_rsp+0x74>
		params->write(conn, err, NULL);
   182a4:	461a      	mov	r2, r3
   182a6:	4631      	mov	r1, r6
   182a8:	4628      	mov	r0, r5
   182aa:	4623      	mov	r3, r4
   182ac:	e7e6      	b.n	1827c <gatt_write_ccc_rsp+0x42>
}
   182ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000182b2 <clear_cf_cfg>:
{
   182b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   182b4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   182b6:	2500      	movs	r5, #0
   182b8:	4669      	mov	r1, sp
   182ba:	3001      	adds	r0, #1
   182bc:	9500      	str	r5, [sp, #0]
   182be:	f8cd 5003 	str.w	r5, [sp, #3]
   182c2:	f7ff fee1 	bl	18088 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   182c6:	f104 0008 	add.w	r0, r4, #8
   182ca:	2201      	movs	r2, #1
   182cc:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   182ce:	340c      	adds	r4, #12
   182d0:	f7fe fa9a 	bl	16808 <memset>
   182d4:	f3bf 8f5b 	dmb	ish
   182d8:	e854 3f00 	ldrex	r3, [r4]
   182dc:	e844 5200 	strex	r2, r5, [r4]
   182e0:	2a00      	cmp	r2, #0
   182e2:	d1f9      	bne.n	182d8 <clear_cf_cfg+0x26>
   182e4:	f3bf 8f5b 	dmb	ish
}
   182e8:	b003      	add	sp, #12
   182ea:	bd30      	pop	{r4, r5, pc}

000182ec <sc_save>:
{
   182ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   182f0:	4680      	mov	r8, r0
   182f2:	460f      	mov	r7, r1
   182f4:	4616      	mov	r6, r2
   182f6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   182f8:	f7ef f9aa 	bl	7650 <find_sc_cfg>
	if (!cfg) {
   182fc:	4604      	mov	r4, r0
   182fe:	b960      	cbnz	r0, 1831a <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18300:	4669      	mov	r1, sp
   18302:	9000      	str	r0, [sp, #0]
   18304:	f8cd 0003 	str.w	r0, [sp, #3]
   18308:	f7ef f9a2 	bl	7650 <find_sc_cfg>
		if (!cfg) {
   1830c:	4604      	mov	r4, r0
   1830e:	b178      	cbz	r0, 18330 <sc_save+0x44>
		cfg->id = id;
   18310:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   18314:	4639      	mov	r1, r7
   18316:	f7ff feb7 	bl	18088 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1831a:	8922      	ldrh	r2, [r4, #8]
   1831c:	8963      	ldrh	r3, [r4, #10]
   1831e:	b91a      	cbnz	r2, 18328 <sc_save+0x3c>
   18320:	b923      	cbnz	r3, 1832c <sc_save+0x40>
		cfg->data.start = start;
   18322:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   18324:	8165      	strh	r5, [r4, #10]
   18326:	e003      	b.n	18330 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   18328:	4296      	cmp	r6, r2
   1832a:	d304      	bcc.n	18336 <sc_save+0x4a>
   1832c:	429d      	cmp	r5, r3
   1832e:	d8f9      	bhi.n	18324 <sc_save+0x38>
}
   18330:	b002      	add	sp, #8
   18332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   18336:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   18338:	e7f8      	b.n	1832c <sc_save+0x40>

0001833a <sc_clear>:
{
   1833a:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1833c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   18340:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18342:	4631      	mov	r1, r6
   18344:	7a00      	ldrb	r0, [r0, #8]
   18346:	f7fe fd63 	bl	16e10 <bt_addr_le_is_bonded>
   1834a:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1834c:	4631      	mov	r1, r6
   1834e:	f7ef f97f 	bl	7650 <find_sc_cfg>
	if (!cfg) {
   18352:	b128      	cbz	r0, 18360 <sc_clear+0x26>
}
   18354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   18358:	220c      	movs	r2, #12
   1835a:	2100      	movs	r1, #0
   1835c:	f7fe ba54 	b.w	16808 <memset>
}
   18360:	bd70      	pop	{r4, r5, r6, pc}

00018362 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   18362:	2a02      	cmp	r2, #2
{
   18364:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   18366:	d108      	bne.n	1837a <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   18368:	2300      	movs	r3, #0
   1836a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1836e:	461a      	mov	r2, r3
   18370:	7a00      	ldrb	r0, [r0, #8]
   18372:	f7ff ffbb 	bl	182ec <sc_save>
}
   18376:	2002      	movs	r0, #2
   18378:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1837a:	f7ff ffde 	bl	1833a <sc_clear>
   1837e:	e7fa      	b.n	18376 <sc_ccc_cfg_write+0x14>

00018380 <gatt_req_send>:
{
   18380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18384:	4606      	mov	r6, r0
   18386:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18388:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1838c:	2100      	movs	r1, #0
{
   1838e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   18392:	4614      	mov	r4, r2
   18394:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18396:	f7ef f831 	bl	73fc <bt_att_req_alloc>
	if (!req) {
   1839a:	4605      	mov	r5, r0
   1839c:	b920      	cbnz	r0, 183a8 <gatt_req_send+0x28>
		return -ENOMEM;
   1839e:	f06f 040b 	mvn.w	r4, #11
}
   183a2:	4620      	mov	r0, r4
   183a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   183a8:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   183ac:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   183ae:	f89d 1020 	ldrb.w	r1, [sp, #32]
   183b2:	464a      	mov	r2, r9
   183b4:	4630      	mov	r0, r6
   183b6:	f7ff fc7c 	bl	17cb2 <bt_att_create_pdu>
	if (!buf) {
   183ba:	b918      	cbnz	r0, 183c4 <gatt_req_send+0x44>
		bt_att_req_free(req);
   183bc:	4628      	mov	r0, r5
   183be:	f7ef f83f 	bl	7440 <bt_att_req_free>
   183c2:	e7ec      	b.n	1839e <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   183c4:	4622      	mov	r2, r4
	req->buf = buf;
   183c6:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   183c8:	4649      	mov	r1, r9
   183ca:	47b8      	blx	r7
	if (err) {
   183cc:	4604      	mov	r4, r0
   183ce:	b118      	cbz	r0, 183d8 <gatt_req_send+0x58>
		bt_att_req_free(req);
   183d0:	4628      	mov	r0, r5
   183d2:	f7ef f835 	bl	7440 <bt_att_req_free>
   183d6:	e7e4      	b.n	183a2 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   183d8:	4629      	mov	r1, r5
   183da:	4630      	mov	r0, r6
   183dc:	f7ff fd52 	bl	17e84 <bt_att_req_send>
	if (err) {
   183e0:	4604      	mov	r4, r0
   183e2:	2800      	cmp	r0, #0
   183e4:	d0dd      	beq.n	183a2 <gatt_req_send+0x22>
   183e6:	e7f3      	b.n	183d0 <gatt_req_send+0x50>

000183e8 <read_appearance>:
{
   183e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   183ea:	4615      	mov	r5, r2
   183ec:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   183f0:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   183f2:	f7fe fd0b 	bl	16e0c <bt_get_appearance>
	if (offset > value_len) {
   183f6:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   183f8:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   183fc:	d80e      	bhi.n	1841c <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   183fe:	f1c6 0402 	rsb	r4, r6, #2
   18402:	42bc      	cmp	r4, r7
   18404:	bfa8      	it	ge
   18406:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18408:	f10d 0306 	add.w	r3, sp, #6
   1840c:	4622      	mov	r2, r4
   1840e:	1999      	adds	r1, r3, r6
   18410:	4628      	mov	r0, r5
   18412:	f7fe f9ee 	bl	167f2 <memcpy>
}
   18416:	4620      	mov	r0, r4
   18418:	b003      	add	sp, #12
   1841a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1841c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   18420:	e7f9      	b.n	18416 <read_appearance+0x2e>

00018422 <read_name>:
{
   18422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18426:	4698      	mov	r8, r3
   18428:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1842c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1842e:	f7ed f819 	bl	5464 <bt_get_name>
   18432:	4607      	mov	r7, r0
				 strlen(name));
   18434:	f7fe f9b0 	bl	16798 <strlen>
	if (offset > value_len) {
   18438:	b283      	uxth	r3, r0
   1843a:	42b3      	cmp	r3, r6
   1843c:	d30c      	bcc.n	18458 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1843e:	1b9c      	subs	r4, r3, r6
   18440:	4544      	cmp	r4, r8
   18442:	bfa8      	it	ge
   18444:	4644      	movge	r4, r8
   18446:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   18448:	4622      	mov	r2, r4
   1844a:	19b9      	adds	r1, r7, r6
   1844c:	4628      	mov	r0, r5
   1844e:	f7fe f9d0 	bl	167f2 <memcpy>
}
   18452:	4620      	mov	r0, r4
   18454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18458:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1845c:	e7f9      	b.n	18452 <read_name+0x30>

0001845e <cf_read>:
{
   1845e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18460:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   18462:	2300      	movs	r3, #0
{
   18464:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   18468:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1846c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1846e:	f7ef f8d1 	bl	7614 <find_cf_cfg>
	if (cfg) {
   18472:	b128      	cbz	r0, 18480 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   18474:	f100 0108 	add.w	r1, r0, #8
   18478:	2201      	movs	r2, #1
   1847a:	a801      	add	r0, sp, #4
   1847c:	f7fe f9b9 	bl	167f2 <memcpy>
	if (offset > value_len) {
   18480:	2e01      	cmp	r6, #1
   18482:	d80d      	bhi.n	184a0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   18484:	f1c6 0401 	rsb	r4, r6, #1
   18488:	42bc      	cmp	r4, r7
   1848a:	bfa8      	it	ge
   1848c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1848e:	ab01      	add	r3, sp, #4
   18490:	4622      	mov	r2, r4
   18492:	1999      	adds	r1, r3, r6
   18494:	4628      	mov	r0, r5
   18496:	f7fe f9ac 	bl	167f2 <memcpy>
}
   1849a:	4620      	mov	r0, r4
   1849c:	b003      	add	sp, #12
   1849e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   184a0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   184a4:	e7f9      	b.n	1849a <cf_read+0x3c>

000184a6 <bt_gatt_attr_read_service>:
{
   184a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   184a8:	68c9      	ldr	r1, [r1, #12]
{
   184aa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   184ae:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   184b0:	780b      	ldrb	r3, [r1, #0]
{
   184b2:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   184b4:	b993      	cbnz	r3, 184dc <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   184b6:	884b      	ldrh	r3, [r1, #2]
   184b8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   184bc:	2d02      	cmp	r5, #2
   184be:	d819      	bhi.n	184f4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   184c0:	f1c5 0202 	rsb	r2, r5, #2
   184c4:	4294      	cmp	r4, r2
   184c6:	bfa8      	it	ge
   184c8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   184ca:	f10d 0306 	add.w	r3, sp, #6
   184ce:	4622      	mov	r2, r4
   184d0:	1959      	adds	r1, r3, r5
   184d2:	f7fe f98e 	bl	167f2 <memcpy>
}
   184d6:	4620      	mov	r0, r4
   184d8:	b003      	add	sp, #12
   184da:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   184dc:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   184de:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   184e2:	d807      	bhi.n	184f4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   184e4:	f1c5 0210 	rsb	r2, r5, #16
   184e8:	4294      	cmp	r4, r2
   184ea:	bfa8      	it	ge
   184ec:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   184ee:	4622      	mov	r2, r4
   184f0:	4429      	add	r1, r5
   184f2:	e7ee      	b.n	184d2 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   184f4:	f06f 0406 	mvn.w	r4, #6
   184f8:	e7ed      	b.n	184d6 <bt_gatt_attr_read_service+0x30>

000184fa <bt_gatt_attr_read_ccc>:
{
   184fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   184fc:	68c9      	ldr	r1, [r1, #12]
{
   184fe:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   18502:	4615      	mov	r5, r2
   18504:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   18506:	f7ff fd92 	bl	1802e <find_ccc_cfg>
	if (cfg) {
   1850a:	b100      	cbz	r0, 1850e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1850c:	8900      	ldrh	r0, [r0, #8]
   1850e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   18512:	2e02      	cmp	r6, #2
   18514:	d80e      	bhi.n	18534 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   18516:	f1c6 0402 	rsb	r4, r6, #2
   1851a:	42bc      	cmp	r4, r7
   1851c:	bfa8      	it	ge
   1851e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18520:	f10d 0306 	add.w	r3, sp, #6
   18524:	4622      	mov	r2, r4
   18526:	1999      	adds	r1, r3, r6
   18528:	4628      	mov	r0, r5
   1852a:	f7fe f962 	bl	167f2 <memcpy>
}
   1852e:	4620      	mov	r0, r4
   18530:	b003      	add	sp, #12
   18532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18534:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   18538:	e7f9      	b.n	1852e <bt_gatt_attr_read_ccc+0x34>

0001853a <gatt_write_ccc_buf>:
{
   1853a:	b538      	push	{r3, r4, r5, lr}
   1853c:	f100 0508 	add.w	r5, r0, #8
   18540:	2102      	movs	r1, #2
   18542:	4628      	mov	r0, r5
   18544:	4614      	mov	r4, r2
   18546:	f000 fae3 	bl	18b10 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   1854a:	89e3      	ldrh	r3, [r4, #14]
   1854c:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   1854e:	8a21      	ldrh	r1, [r4, #16]
   18550:	4628      	mov	r0, r5
   18552:	f000 faec 	bl	18b2e <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18556:	2104      	movs	r1, #4
   18558:	f104 0014 	add.w	r0, r4, #20
   1855c:	f7ff fd85 	bl	1806a <atomic_or>
}
   18560:	2000      	movs	r0, #0
   18562:	bd38      	pop	{r3, r4, r5, pc}

00018564 <sc_restore_rsp>:
{
   18564:	b538      	push	{r3, r4, r5, lr}
   18566:	4604      	mov	r4, r0
   18568:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1856a:	f7ff fcba 	bl	17ee2 <bt_att_fixed_chan_only>
   1856e:	b150      	cbz	r0, 18586 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   18570:	4620      	mov	r0, r4
   18572:	f7ef f84f 	bl	7614 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   18576:	b130      	cbz	r0, 18586 <sc_restore_rsp+0x22>
   18578:	7a03      	ldrb	r3, [r0, #8]
   1857a:	07db      	lsls	r3, r3, #31
   1857c:	d503      	bpl.n	18586 <sc_restore_rsp+0x22>
   1857e:	2101      	movs	r1, #1
   18580:	300c      	adds	r0, #12
   18582:	f7ff fd72 	bl	1806a <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   18586:	b965      	cbnz	r5, 185a2 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18588:	7a20      	ldrb	r0, [r4, #8]
   1858a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1858e:	f7ef f85f 	bl	7650 <find_sc_cfg>
		if (sc_cfg) {
   18592:	b130      	cbz	r0, 185a2 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   18594:	4629      	mov	r1, r5
   18596:	2204      	movs	r2, #4
}
   18598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1859c:	3008      	adds	r0, #8
   1859e:	f7fe b933 	b.w	16808 <memset>
}
   185a2:	bd38      	pop	{r3, r4, r5, pc}

000185a4 <bt_gatt_attr_value_handle>:
{
   185a4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   185a6:	4604      	mov	r4, r0
   185a8:	b910      	cbnz	r0, 185b0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   185aa:	2000      	movs	r0, #0
}
   185ac:	b002      	add	sp, #8
   185ae:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   185b0:	2300      	movs	r3, #0
   185b2:	f88d 3004 	strb.w	r3, [sp, #4]
   185b6:	6800      	ldr	r0, [r0, #0]
   185b8:	f642 0303 	movw	r3, #10243	; 0x2803
   185bc:	a901      	add	r1, sp, #4
   185be:	f8ad 3006 	strh.w	r3, [sp, #6]
   185c2:	f7fe f93f 	bl	16844 <bt_uuid_cmp>
   185c6:	2800      	cmp	r0, #0
   185c8:	d1ef      	bne.n	185aa <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   185ca:	68e3      	ldr	r3, [r4, #12]
   185cc:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   185ce:	2800      	cmp	r0, #0
   185d0:	d1ec      	bne.n	185ac <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   185d2:	4620      	mov	r0, r4
   185d4:	f7ef f948 	bl	7868 <bt_gatt_attr_get_handle>
   185d8:	3001      	adds	r0, #1
   185da:	b280      	uxth	r0, r0
	return handle;
   185dc:	e7e6      	b.n	185ac <bt_gatt_attr_value_handle+0x8>

000185de <bt_gatt_attr_read_chrc>:
{
   185de:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   185e0:	68cf      	ldr	r7, [r1, #12]
{
   185e2:	b087      	sub	sp, #28
   185e4:	4608      	mov	r0, r1
   185e6:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   185e8:	79bb      	ldrb	r3, [r7, #6]
   185ea:	f88d 3004 	strb.w	r3, [sp, #4]
{
   185ee:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   185f2:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   185f4:	f7ff ffd6 	bl	185a4 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   185f8:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   185fa:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   185fe:	780b      	ldrb	r3, [r1, #0]
   18600:	b99b      	cbnz	r3, 1862a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   18602:	884b      	ldrh	r3, [r1, #2]
   18604:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   18608:	2105      	movs	r1, #5
	if (offset > value_len) {
   1860a:	42b1      	cmp	r1, r6
   1860c:	d315      	bcc.n	1863a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1860e:	1b89      	subs	r1, r1, r6
   18610:	42a1      	cmp	r1, r4
   18612:	bfa8      	it	ge
   18614:	4621      	movge	r1, r4
   18616:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   18618:	ab01      	add	r3, sp, #4
   1861a:	4622      	mov	r2, r4
   1861c:	1999      	adds	r1, r3, r6
   1861e:	4628      	mov	r0, r5
   18620:	f7fe f8e7 	bl	167f2 <memcpy>
}
   18624:	4620      	mov	r0, r4
   18626:	b007      	add	sp, #28
   18628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1862a:	3101      	adds	r1, #1
   1862c:	2210      	movs	r2, #16
   1862e:	f10d 0007 	add.w	r0, sp, #7
   18632:	f7fe f8de 	bl	167f2 <memcpy>
		value_len += 16U;
   18636:	2113      	movs	r1, #19
   18638:	e7e7      	b.n	1860a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1863a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1863e:	e7f1      	b.n	18624 <bt_gatt_attr_read_chrc+0x46>

00018640 <bt_gatt_foreach_attr>:
{
   18640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18642:	e9cd 2301 	strd	r2, r3, [sp, #4]
   18646:	2300      	movs	r3, #0
   18648:	9300      	str	r3, [sp, #0]
   1864a:	461a      	mov	r2, r3
   1864c:	f7ef f93c 	bl	78c8 <bt_gatt_foreach_attr_type>
}
   18650:	b005      	add	sp, #20
   18652:	f85d fb04 	ldr.w	pc, [sp], #4

00018656 <db_hash_process>:
	db_hash_gen(true);
   18656:	f7ef b991 	b.w	797c <db_hash_gen.constprop.0>

0001865a <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1865a:	07d3      	lsls	r3, r2, #31
{
   1865c:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1865e:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   18660:	d504      	bpl.n	1866c <bt_gatt_check_perm+0x12>
   18662:	f014 0f15 	tst.w	r4, #21
   18666:	d017      	beq.n	18698 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   18668:	684b      	ldr	r3, [r1, #4]
   1866a:	b1ab      	cbz	r3, 18698 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1866c:	0793      	lsls	r3, r2, #30
   1866e:	d504      	bpl.n	1867a <bt_gatt_check_perm+0x20>
   18670:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   18674:	d012      	beq.n	1869c <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   18676:	688b      	ldr	r3, [r1, #8]
   18678:	b183      	cbz	r3, 1869c <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1867a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1867c:	f014 0f30 	tst.w	r4, #48	; 0x30
   18680:	d104      	bne.n	1868c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   18682:	f014 000c 	ands.w	r0, r4, #12
   18686:	bf18      	it	ne
   18688:	200f      	movne	r0, #15
}
   1868a:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1868c:	f7fe fcef 	bl	1706e <bt_conn_get_security>
   18690:	2802      	cmp	r0, #2
   18692:	d8f6      	bhi.n	18682 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   18694:	2005      	movs	r0, #5
   18696:	e7f8      	b.n	1868a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   18698:	2002      	movs	r0, #2
   1869a:	e7f6      	b.n	1868a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1869c:	2003      	movs	r0, #3
   1869e:	e7f4      	b.n	1868a <bt_gatt_check_perm+0x30>

000186a0 <gatt_notify>:
{
   186a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   186a4:	4614      	mov	r4, r2
   186a6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   186a8:	2214      	movs	r2, #20
   186aa:	6861      	ldr	r1, [r4, #4]
{
   186ac:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   186ae:	f7ff ffd4 	bl	1865a <bt_gatt_check_perm>
   186b2:	bb20      	cbnz	r0, 186fe <gatt_notify+0x5e>
				sizeof(*nfy) + params->len);
   186b4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   186b6:	211b      	movs	r1, #27
   186b8:	3202      	adds	r2, #2
   186ba:	4638      	mov	r0, r7
   186bc:	f7ff faf9 	bl	17cb2 <bt_att_create_pdu>
	if (!buf) {
   186c0:	4605      	mov	r5, r0
   186c2:	b300      	cbz	r0, 18706 <gatt_notify+0x66>
	return net_buf_simple_add(&buf->b, len);
   186c4:	f100 0908 	add.w	r9, r0, #8
   186c8:	2102      	movs	r1, #2
   186ca:	4648      	mov	r0, r9
   186cc:	f000 fa20 	bl	18b10 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   186d0:	4606      	mov	r6, r0
   186d2:	89a1      	ldrh	r1, [r4, #12]
   186d4:	f826 8b02 	strh.w	r8, [r6], #2
   186d8:	4648      	mov	r0, r9
   186da:	f000 fa19 	bl	18b10 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   186de:	89a2      	ldrh	r2, [r4, #12]
   186e0:	68a1      	ldr	r1, [r4, #8]
   186e2:	4630      	mov	r0, r6
   186e4:	f7fe f885 	bl	167f2 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data);
   186e8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   186ec:	4628      	mov	r0, r5
   186ee:	f7ff fc21 	bl	17f34 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   186f2:	4629      	mov	r1, r5
   186f4:	4638      	mov	r0, r7
}
   186f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   186fa:	f7ff bb8d 	b.w	17e18 <bt_att_send>
		return -EPERM;
   186fe:	f04f 30ff 	mov.w	r0, #4294967295
}
   18702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOMEM;
   18706:	f06f 000b 	mvn.w	r0, #11
   1870a:	e7fa      	b.n	18702 <gatt_notify+0x62>

0001870c <bt_gatt_write_without_response_cb>:
{
   1870c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   18710:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   18712:	7a82      	ldrb	r2, [r0, #10]
   18714:	2a07      	cmp	r2, #7
{
   18716:	461d      	mov	r5, r3
   18718:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
   1871c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   18720:	4606      	mov	r6, r0
   18722:	4688      	mov	r8, r1
	if (conn->state != BT_CONN_CONNECTED) {
   18724:	d130      	bne.n	18788 <bt_gatt_write_without_response_cb+0x7c>
	if (sign) {
   18726:	b303      	cbz	r3, 1876a <bt_gatt_write_without_response_cb+0x5e>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   18728:	f105 020e 	add.w	r2, r5, #14
   1872c:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1872e:	f7ff fac0 	bl	17cb2 <bt_att_create_pdu>
   18732:	4604      	mov	r4, r0
	if (!buf) {
   18734:	b1b0      	cbz	r0, 18764 <bt_gatt_write_without_response_cb+0x58>
   18736:	2102      	movs	r1, #2
   18738:	3008      	adds	r0, #8
   1873a:	f000 f9e9 	bl	18b10 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1873e:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   18740:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   18744:	2200      	movs	r2, #0
   18746:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1874a:	2300      	movs	r3, #0
   1874c:	e9cd 2300 	strd	r2, r3, [sp]
   18750:	4629      	mov	r1, r5
   18752:	463a      	mov	r2, r7
   18754:	4620      	mov	r0, r4
   18756:	f7fa f845 	bl	127e4 <net_buf_append_bytes>
	if (write != length) {
   1875a:	42a8      	cmp	r0, r5
   1875c:	d008      	beq.n	18770 <bt_gatt_write_without_response_cb+0x64>
		net_buf_unref(buf);
   1875e:	4620      	mov	r0, r4
   18760:	f7fa f80e 	bl	12780 <net_buf_unref>
		return -ENOMEM;
   18764:	f06f 000b 	mvn.w	r0, #11
   18768:	e010      	b.n	1878c <bt_gatt_write_without_response_cb+0x80>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1876a:	1caa      	adds	r2, r5, #2
   1876c:	2152      	movs	r1, #82	; 0x52
   1876e:	e7de      	b.n	1872e <bt_gatt_write_without_response_cb+0x22>
	bt_att_set_tx_meta_data(buf, func, user_data);
   18770:	4649      	mov	r1, r9
   18772:	4620      	mov	r0, r4
   18774:	4652      	mov	r2, sl
   18776:	f7ff fbdd 	bl	17f34 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1877a:	4621      	mov	r1, r4
   1877c:	4630      	mov	r0, r6
}
   1877e:	b004      	add	sp, #16
   18780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf);
   18784:	f7ff bb48 	b.w	17e18 <bt_att_send>
		return -ENOTCONN;
   18788:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1878c:	b004      	add	sp, #16
   1878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018792 <bt_gatt_cancel>:
{
   18792:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18794:	4604      	mov	r4, r0
   18796:	460d      	mov	r5, r1
	k_sched_lock();
   18798:	f7fc fd86 	bl	152a8 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   1879c:	4629      	mov	r1, r5
   1879e:	4620      	mov	r0, r4
   187a0:	f7ff fb85 	bl	17eae <bt_att_find_req_by_user_data>
	if (req) {
   187a4:	4601      	mov	r1, r0
   187a6:	b920      	cbnz	r0, 187b2 <bt_gatt_cancel+0x20>
}
   187a8:	b002      	add	sp, #8
   187aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   187ae:	f7fc bf03 	b.w	155b8 <k_sched_unlock>
		func = req->func;
   187b2:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   187b4:	4620      	mov	r0, r4
   187b6:	f7ee ff03 	bl	75c0 <bt_att_req_cancel>
	k_sched_unlock();
   187ba:	f7fc fefd 	bl	155b8 <k_sched_unlock>
	if (func) {
   187be:	b12e      	cbz	r6, 187cc <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   187c0:	2300      	movs	r3, #0
   187c2:	9500      	str	r5, [sp, #0]
   187c4:	461a      	mov	r2, r3
   187c6:	210e      	movs	r1, #14
   187c8:	4620      	mov	r0, r4
   187ca:	47b0      	blx	r6
}
   187cc:	b002      	add	sp, #8
   187ce:	bd70      	pop	{r4, r5, r6, pc}

000187d0 <bt_gatt_unsubscribe>:
{
   187d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   187d4:	7a83      	ldrb	r3, [r0, #10]
   187d6:	2b07      	cmp	r3, #7
{
   187d8:	4680      	mov	r8, r0
   187da:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   187dc:	d155      	bne.n	1888a <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   187de:	f7ee ff47 	bl	7670 <gatt_sub_find>
	if (!sub) {
   187e2:	4606      	mov	r6, r0
   187e4:	2800      	cmp	r0, #0
   187e6:	d053      	beq.n	18890 <bt_gatt_unsubscribe+0xc0>
	return list->head;
   187e8:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   187ea:	b104      	cbz	r4, 187ee <bt_gatt_unsubscribe+0x1e>
   187ec:	3c18      	subs	r4, #24
			has_subscription = true;
   187ee:	2300      	movs	r3, #0
   187f0:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   187f2:	bb5c      	cbnz	r4, 1884c <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   187f4:	2b00      	cmp	r3, #0
   187f6:	d04b      	beq.n	18890 <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   187f8:	2f00      	cmp	r7, #0
   187fa:	d035      	beq.n	18868 <bt_gatt_unsubscribe+0x98>
   187fc:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   187fe:	f105 0218 	add.w	r2, r5, #24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18802:	b15b      	cbz	r3, 1881c <bt_gatt_unsubscribe+0x4c>
   18804:	429a      	cmp	r2, r3
   18806:	d13d      	bne.n	18884 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   18808:	69ab      	ldr	r3, [r5, #24]
	return list->tail;
   1880a:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   1880c:	2c00      	cmp	r4, #0
   1880e:	d134      	bne.n	1887a <bt_gatt_unsubscribe+0xaa>
   18810:	428a      	cmp	r2, r1
	list->head = node;
   18812:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   18814:	d100      	bne.n	18818 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   18816:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   18818:	2300      	movs	r3, #0
   1881a:	61ab      	str	r3, [r5, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1881c:	f105 0014 	add.w	r0, r5, #20
   18820:	f7ff fc1d 	bl	1805e <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   18824:	0743      	lsls	r3, r0, #29
   18826:	d503      	bpl.n	18830 <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   18828:	4629      	mov	r1, r5
   1882a:	4640      	mov	r0, r8
   1882c:	f7ff ffb1 	bl	18792 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   18830:	68b3      	ldr	r3, [r6, #8]
   18832:	b913      	cbnz	r3, 1883a <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   18834:	4630      	mov	r0, r6
   18836:	f7ff fcc6 	bl	181c6 <gatt_sub_free>
	if (has_subscription) {
   1883a:	b367      	cbz	r7, 18896 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   1883c:	2300      	movs	r3, #0
   1883e:	682c      	ldr	r4, [r5, #0]
   18840:	461a      	mov	r2, r3
   18842:	4629      	mov	r1, r5
   18844:	4640      	mov	r0, r8
   18846:	47a0      	blx	r4
	return 0;
   18848:	2000      	movs	r0, #0
   1884a:	e014      	b.n	18876 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   1884c:	42ac      	cmp	r4, r5
   1884e:	d009      	beq.n	18864 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   18850:	89a1      	ldrh	r1, [r4, #12]
   18852:	89aa      	ldrh	r2, [r5, #12]
			has_subscription = true;
   18854:	4291      	cmp	r1, r2
   18856:	bf08      	it	eq
   18858:	2701      	moveq	r7, #1
	return node->next;
   1885a:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1885c:	2c00      	cmp	r4, #0
   1885e:	d0c9      	beq.n	187f4 <bt_gatt_unsubscribe+0x24>
   18860:	3c18      	subs	r4, #24
   18862:	e7c6      	b.n	187f2 <bt_gatt_unsubscribe+0x22>
			found = true;
   18864:	2301      	movs	r3, #1
   18866:	e7f8      	b.n	1885a <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   18868:	822f      	strh	r7, [r5, #16]
		err = gatt_write_ccc(conn, params);
   1886a:	4629      	mov	r1, r5
   1886c:	4640      	mov	r0, r8
   1886e:	f7ee ff1d 	bl	76ac <gatt_write_ccc>
		if (err) {
   18872:	2800      	cmp	r0, #0
   18874:	d0c2      	beq.n	187fc <bt_gatt_unsubscribe+0x2c>
}
   18876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   1887a:	428a      	cmp	r2, r1
	parent->next = child;
   1887c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1887e:	bf08      	it	eq
   18880:	60f4      	streq	r4, [r6, #12]
}
   18882:	e7c9      	b.n	18818 <bt_gatt_unsubscribe+0x48>
	return node->next;
   18884:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18886:	681b      	ldr	r3, [r3, #0]
   18888:	e7bb      	b.n	18802 <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   1888a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1888e:	e7f2      	b.n	18876 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   18890:	f06f 0015 	mvn.w	r0, #21
   18894:	e7ef      	b.n	18876 <bt_gatt_unsubscribe+0xa6>
	return 0;
   18896:	4638      	mov	r0, r7
   18898:	e7ed      	b.n	18876 <bt_gatt_unsubscribe+0xa6>

0001889a <bt_gatt_notification>:
{
   1889a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1889e:	4606      	mov	r6, r0
   188a0:	460f      	mov	r7, r1
   188a2:	4690      	mov	r8, r2
   188a4:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   188a6:	f7ee fee3 	bl	7670 <gatt_sub_find>
	if (!sub) {
   188aa:	b300      	cbz	r0, 188ee <bt_gatt_notification+0x54>
	return list->head;
   188ac:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   188ae:	b1f4      	cbz	r4, 188ee <bt_gatt_notification+0x54>
	return node->next;
   188b0:	f854 a918 	ldr.w	sl, [r4], #-24
   188b4:	f1ba 0f00 	cmp.w	sl, #0
   188b8:	d001      	beq.n	188be <bt_gatt_notification+0x24>
   188ba:	f1aa 0a18 	sub.w	sl, sl, #24
		if (handle != params->value_handle) {
   188be:	89a3      	ldrh	r3, [r4, #12]
   188c0:	42bb      	cmp	r3, r7
   188c2:	d10a      	bne.n	188da <bt_gatt_notification+0x40>
			if (params->notify(conn, params, data, length) ==
   188c4:	6825      	ldr	r5, [r4, #0]
   188c6:	464b      	mov	r3, r9
   188c8:	4642      	mov	r2, r8
   188ca:	4621      	mov	r1, r4
   188cc:	4630      	mov	r0, r6
   188ce:	47a8      	blx	r5
   188d0:	b918      	cbnz	r0, 188da <bt_gatt_notification+0x40>
				bt_gatt_unsubscribe(conn, params);
   188d2:	4621      	mov	r1, r4
   188d4:	4630      	mov	r0, r6
   188d6:	f7ff ff7b 	bl	187d0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   188da:	f1ba 0f00 	cmp.w	sl, #0
   188de:	d006      	beq.n	188ee <bt_gatt_notification+0x54>
   188e0:	f8da 5018 	ldr.w	r5, [sl, #24]
   188e4:	b105      	cbz	r5, 188e8 <bt_gatt_notification+0x4e>
   188e6:	3d18      	subs	r5, #24
{
   188e8:	4654      	mov	r4, sl
   188ea:	46aa      	mov	sl, r5
   188ec:	e7e7      	b.n	188be <bt_gatt_notification+0x24>
}
   188ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000188f2 <bt_gatt_mult_notification>:
{
   188f2:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
   188f6:	4681      	mov	r9, r0
   188f8:	460c      	mov	r4, r1
   188fa:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   188fc:	f7ee feb8 	bl	7670 <gatt_sub_find>
	if (!sub) {
   18900:	4607      	mov	r7, r0
   18902:	b140      	cbz	r0, 18916 <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   18904:	462a      	mov	r2, r5
   18906:	4621      	mov	r1, r4
   18908:	a801      	add	r0, sp, #4
   1890a:	f000 f8b8 	bl	18a7e <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1890e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   18912:	2b04      	cmp	r3, #4
   18914:	d802      	bhi.n	1891c <bt_gatt_mult_notification+0x2a>
}
   18916:	b004      	add	sp, #16
   18918:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1891c:	2104      	movs	r1, #4
   1891e:	eb0d 0001 	add.w	r0, sp, r1
   18922:	f000 f91e 	bl	18b62 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   18926:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1892a:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   1892e:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   18930:	4605      	mov	r5, r0
		if (len > buf.len) {
   18932:	d3f0      	bcc.n	18916 <bt_gatt_mult_notification+0x24>
	return list->head;
   18934:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   18936:	b1dc      	cbz	r4, 18970 <bt_gatt_mult_notification+0x7e>
	return node->next;
   18938:	f854 6918 	ldr.w	r6, [r4], #-24
   1893c:	b106      	cbz	r6, 18940 <bt_gatt_mult_notification+0x4e>
   1893e:	3e18      	subs	r6, #24
		handle = sys_cpu_to_le16(nfy->handle);
   18940:	f835 ab04 	ldrh.w	sl, [r5], #4
			if (handle != params->value_handle) {
   18944:	89a3      	ldrh	r3, [r4, #12]
   18946:	4553      	cmp	r3, sl
   18948:	d10b      	bne.n	18962 <bt_gatt_mult_notification+0x70>
				if (params->notify(conn, params, nfy->value, len) ==
   1894a:	f8d4 c000 	ldr.w	ip, [r4]
   1894e:	465b      	mov	r3, fp
   18950:	462a      	mov	r2, r5
   18952:	4621      	mov	r1, r4
   18954:	4648      	mov	r0, r9
   18956:	47e0      	blx	ip
   18958:	b918      	cbnz	r0, 18962 <bt_gatt_mult_notification+0x70>
					bt_gatt_unsubscribe(conn, params);
   1895a:	4621      	mov	r1, r4
   1895c:	4648      	mov	r0, r9
   1895e:	f7ff ff37 	bl	187d0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   18962:	b12e      	cbz	r6, 18970 <bt_gatt_mult_notification+0x7e>
   18964:	69b2      	ldr	r2, [r6, #24]
   18966:	b102      	cbz	r2, 1896a <bt_gatt_mult_notification+0x78>
   18968:	3a18      	subs	r2, #24
{
   1896a:	4634      	mov	r4, r6
   1896c:	4616      	mov	r6, r2
   1896e:	e7e9      	b.n	18944 <bt_gatt_mult_notification+0x52>
		net_buf_simple_pull_mem(&buf, len);
   18970:	4659      	mov	r1, fp
   18972:	a801      	add	r0, sp, #4
   18974:	f000 f8f5 	bl	18b62 <net_buf_simple_pull_mem>
   18978:	e7c9      	b.n	1890e <bt_gatt_mult_notification+0x1c>

0001897a <bt_gatt_change_aware>:
{
   1897a:	b570      	push	{r4, r5, r6, lr}
   1897c:	4606      	mov	r6, r0
   1897e:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   18980:	f7ee fe48 	bl	7614 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   18984:	b910      	cbnz	r0, 1898c <bt_gatt_change_aware+0x12>
		return true;
   18986:	2401      	movs	r4, #1
}
   18988:	4620      	mov	r0, r4
   1898a:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1898c:	7a03      	ldrb	r3, [r0, #8]
   1898e:	07da      	lsls	r2, r3, #31
   18990:	d5f9      	bpl.n	18986 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   18992:	f100 050c 	add.w	r5, r0, #12
   18996:	4628      	mov	r0, r5
   18998:	f7ff fb61 	bl	1805e <atomic_get>
   1899c:	07c3      	lsls	r3, r0, #31
   1899e:	d4f2      	bmi.n	18986 <bt_gatt_change_aware+0xc>
	if (!req) {
   189a0:	b90c      	cbnz	r4, 189a6 <bt_gatt_change_aware+0x2c>
		return false;
   189a2:	2400      	movs	r4, #0
   189a4:	e7f0      	b.n	18988 <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   189a6:	f06f 0102 	mvn.w	r1, #2
   189aa:	4628      	mov	r0, r5
   189ac:	f7ff fc36 	bl	1821c <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   189b0:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   189b4:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   189b6:	d006      	beq.n	189c6 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   189b8:	f7ff fa95 	bl	17ee6 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   189bc:	2101      	movs	r1, #1
   189be:	4628      	mov	r0, r5
   189c0:	f7ff fb53 	bl	1806a <atomic_or>
}
   189c4:	e7e0      	b.n	18988 <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   189c6:	f7ff fa8c 	bl	17ee2 <bt_att_fixed_chan_only>
   189ca:	2800      	cmp	r0, #0
   189cc:	d0e9      	beq.n	189a2 <bt_gatt_change_aware+0x28>
   189ce:	4630      	mov	r0, r6
   189d0:	f7ff faa2 	bl	17f18 <bt_att_out_of_sync_sent_on_fixed>
   189d4:	4604      	mov	r4, r0
   189d6:	2800      	cmp	r0, #0
   189d8:	d0e3      	beq.n	189a2 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   189da:	f06f 0102 	mvn.w	r1, #2
   189de:	4628      	mov	r0, r5
   189e0:	f7ff fc1c 	bl	1821c <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   189e4:	4630      	mov	r0, r6
   189e6:	e7e7      	b.n	189b8 <bt_gatt_change_aware+0x3e>

000189e8 <bt_smp_recv>:
{
   189e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   189ea:	2100      	movs	r1, #0
   189ec:	f04f 32ff 	mov.w	r2, #4294967295
   189f0:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   189f4:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   189f6:	4608      	mov	r0, r1
   189f8:	f7fe fc05 	bl	17206 <bt_l2cap_create_pdu_timeout>
   189fc:	f100 0608 	add.w	r6, r0, #8
   18a00:	4604      	mov	r4, r0
   18a02:	2101      	movs	r1, #1
   18a04:	4630      	mov	r0, r6
   18a06:	f000 f883 	bl	18b10 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   18a0a:	2505      	movs	r5, #5
   18a0c:	7005      	strb	r5, [r0, #0]
   18a0e:	2101      	movs	r1, #1
   18a10:	4630      	mov	r0, r6
   18a12:	f000 f87d 	bl	18b10 <net_buf_simple_add>
   18a16:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   18a18:	7005      	strb	r5, [r0, #0]
   18a1a:	4622      	mov	r2, r4
   18a1c:	9300      	str	r3, [sp, #0]
   18a1e:	2106      	movs	r1, #6
   18a20:	4638      	mov	r0, r7
   18a22:	f7fe fbf3 	bl	1720c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   18a26:	b110      	cbz	r0, 18a2e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   18a28:	4620      	mov	r0, r4
   18a2a:	f7f9 fea9 	bl	12780 <net_buf_unref>
}
   18a2e:	2000      	movs	r0, #0
   18a30:	b003      	add	sp, #12
   18a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018a34 <bt_smp_sign>:
   18a34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18a38:	4770      	bx	lr

00018a3a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   18a3a:	2000      	movs	r0, #0
   18a3c:	4770      	bx	lr

00018a3e <fixed_data_unref>:
}
   18a3e:	4770      	bx	lr

00018a40 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18a40:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   18a42:	6849      	ldr	r1, [r1, #4]
   18a44:	6809      	ldr	r1, [r1, #0]
   18a46:	f7f9 be07 	b.w	12658 <net_buf_alloc_len>

00018a4a <net_buf_get>:
{
   18a4a:	b570      	push	{r4, r5, r6, lr}
   18a4c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   18a4e:	f7fc f991 	bl	14d74 <z_impl_k_queue_get>
	if (!buf) {
   18a52:	4605      	mov	r5, r0
   18a54:	b128      	cbz	r0, 18a62 <net_buf_get+0x18>
   18a56:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   18a58:	7963      	ldrb	r3, [r4, #5]
   18a5a:	f013 0301 	ands.w	r3, r3, #1
   18a5e:	d102      	bne.n	18a66 <net_buf_get+0x1c>
	frag->frags = NULL;
   18a60:	6023      	str	r3, [r4, #0]
}
   18a62:	4628      	mov	r0, r5
   18a64:	bd70      	pop	{r4, r5, r6, pc}
   18a66:	2300      	movs	r3, #0
   18a68:	2200      	movs	r2, #0
   18a6a:	4630      	mov	r0, r6
   18a6c:	f7fc f982 	bl	14d74 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   18a70:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   18a72:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   18a74:	f023 0301 	bic.w	r3, r3, #1
   18a78:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   18a7a:	4604      	mov	r4, r0
   18a7c:	e7ec      	b.n	18a58 <net_buf_get+0xe>

00018a7e <net_buf_simple_init_with_data>:
	buf->size  = size;
   18a7e:	b292      	uxth	r2, r2
	buf->__buf = data;
   18a80:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   18a82:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   18a84:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   18a86:	8082      	strh	r2, [r0, #4]
}
   18a88:	4770      	bx	lr

00018a8a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   18a8a:	6883      	ldr	r3, [r0, #8]
   18a8c:	440b      	add	r3, r1
   18a8e:	6003      	str	r3, [r0, #0]
}
   18a90:	4770      	bx	lr

00018a92 <net_buf_put>:
{
   18a92:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   18a94:	460a      	mov	r2, r1
   18a96:	6814      	ldr	r4, [r2, #0]
   18a98:	b914      	cbnz	r4, 18aa0 <net_buf_put+0xe>
}
   18a9a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   18a9c:	f000 bdea 	b.w	19674 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   18aa0:	7953      	ldrb	r3, [r2, #5]
   18aa2:	f043 0301 	orr.w	r3, r3, #1
   18aa6:	7153      	strb	r3, [r2, #5]
   18aa8:	4622      	mov	r2, r4
   18aaa:	e7f4      	b.n	18a96 <net_buf_put+0x4>

00018aac <net_buf_ref>:
	buf->ref++;
   18aac:	7902      	ldrb	r2, [r0, #4]
   18aae:	3201      	adds	r2, #1
   18ab0:	7102      	strb	r2, [r0, #4]
}
   18ab2:	4770      	bx	lr

00018ab4 <net_buf_frag_last>:
{
   18ab4:	4603      	mov	r3, r0
	while (buf->frags) {
   18ab6:	4618      	mov	r0, r3
   18ab8:	681b      	ldr	r3, [r3, #0]
   18aba:	2b00      	cmp	r3, #0
   18abc:	d1fb      	bne.n	18ab6 <net_buf_frag_last+0x2>
}
   18abe:	4770      	bx	lr

00018ac0 <net_buf_frag_insert>:
	if (parent->frags) {
   18ac0:	6802      	ldr	r2, [r0, #0]
{
   18ac2:	b510      	push	{r4, lr}
	if (parent->frags) {
   18ac4:	b12a      	cbz	r2, 18ad2 <net_buf_frag_insert+0x12>
   18ac6:	460b      	mov	r3, r1
	while (buf->frags) {
   18ac8:	461c      	mov	r4, r3
   18aca:	681b      	ldr	r3, [r3, #0]
   18acc:	2b00      	cmp	r3, #0
   18ace:	d1fb      	bne.n	18ac8 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   18ad0:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   18ad2:	6001      	str	r1, [r0, #0]
}
   18ad4:	bd10      	pop	{r4, pc}

00018ad6 <net_buf_frag_add>:
{
   18ad6:	b510      	push	{r4, lr}
	if (!head) {
   18ad8:	4604      	mov	r4, r0
   18ada:	b920      	cbnz	r0, 18ae6 <net_buf_frag_add+0x10>
	buf->ref++;
   18adc:	790b      	ldrb	r3, [r1, #4]
   18ade:	3301      	adds	r3, #1
   18ae0:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   18ae2:	4608      	mov	r0, r1
}
   18ae4:	bd10      	pop	{r4, pc}
   18ae6:	4603      	mov	r3, r0
	while (buf->frags) {
   18ae8:	4618      	mov	r0, r3
   18aea:	681b      	ldr	r3, [r3, #0]
   18aec:	2b00      	cmp	r3, #0
   18aee:	d1fb      	bne.n	18ae8 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   18af0:	f7ff ffe6 	bl	18ac0 <net_buf_frag_insert>
   18af4:	4620      	mov	r0, r4
   18af6:	e7f5      	b.n	18ae4 <net_buf_frag_add+0xe>

00018af8 <net_buf_frag_del>:
{
   18af8:	b510      	push	{r4, lr}
	if (parent) {
   18afa:	b108      	cbz	r0, 18b00 <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   18afc:	680b      	ldr	r3, [r1, #0]
   18afe:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   18b00:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   18b02:	2300      	movs	r3, #0
	net_buf_unref(frag);
   18b04:	4608      	mov	r0, r1
	frag->frags = NULL;
   18b06:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   18b08:	f7f9 fe3a 	bl	12780 <net_buf_unref>
}
   18b0c:	4620      	mov	r0, r4
   18b0e:	bd10      	pop	{r4, pc}

00018b10 <net_buf_simple_add>:
	return buf->data + buf->len;
   18b10:	8883      	ldrh	r3, [r0, #4]
   18b12:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   18b14:	4419      	add	r1, r3
   18b16:	8081      	strh	r1, [r0, #4]
	return tail;
}
   18b18:	18d0      	adds	r0, r2, r3
   18b1a:	4770      	bx	lr

00018b1c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   18b1c:	b430      	push	{r4, r5}
   18b1e:	8884      	ldrh	r4, [r0, #4]
   18b20:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   18b22:	18a3      	adds	r3, r4, r2
   18b24:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   18b26:	1928      	adds	r0, r5, r4
}
   18b28:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   18b2a:	f7fd be62 	b.w	167f2 <memcpy>

00018b2e <net_buf_simple_add_le16>:
   18b2e:	8883      	ldrh	r3, [r0, #4]
   18b30:	6802      	ldr	r2, [r0, #0]

	return u8;
}

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   18b32:	b530      	push	{r4, r5, lr}
   18b34:	18d4      	adds	r4, r2, r3
	buf->len += len;
   18b36:	1c9d      	adds	r5, r3, #2
   18b38:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   18b3a:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   18b3c:	0a09      	lsrs	r1, r1, #8
   18b3e:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   18b40:	bd30      	pop	{r4, r5, pc}

00018b42 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   18b42:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   18b44:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   18b46:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   18b48:	1a40      	subs	r0, r0, r1
	buf->len += len;
   18b4a:	4411      	add	r1, r2
	buf->data -= len;
   18b4c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   18b4e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   18b50:	4770      	bx	lr

00018b52 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   18b52:	8882      	ldrh	r2, [r0, #4]
   18b54:	1a52      	subs	r2, r2, r1
{
   18b56:	4603      	mov	r3, r0
	buf->len -= len;
   18b58:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   18b5a:	6800      	ldr	r0, [r0, #0]
   18b5c:	4408      	add	r0, r1
   18b5e:	6018      	str	r0, [r3, #0]
}
   18b60:	4770      	bx	lr

00018b62 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   18b62:	4603      	mov	r3, r0
	void *data = buf->data;
   18b64:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   18b66:	889a      	ldrh	r2, [r3, #4]
   18b68:	1a52      	subs	r2, r2, r1
	buf->data += len;
   18b6a:	4401      	add	r1, r0
	buf->len -= len;
   18b6c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   18b6e:	6019      	str	r1, [r3, #0]

	return data;
}
   18b70:	4770      	bx	lr

00018b72 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   18b72:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   18b74:	6803      	ldr	r3, [r0, #0]
   18b76:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   18b78:	2101      	movs	r1, #1
   18b7a:	f7ff ffea 	bl	18b52 <net_buf_simple_pull>

	return val;
}
   18b7e:	4620      	mov	r0, r4
   18b80:	bd10      	pop	{r4, pc}

00018b82 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   18b82:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   18b84:	6803      	ldr	r3, [r0, #0]
   18b86:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   18b88:	2102      	movs	r1, #2
   18b8a:	f7ff ffe2 	bl	18b52 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   18b8e:	4620      	mov	r0, r4
   18b90:	bd10      	pop	{r4, pc}

00018b92 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   18b92:	6802      	ldr	r2, [r0, #0]
   18b94:	6880      	ldr	r0, [r0, #8]
}
   18b96:	1a10      	subs	r0, r2, r0
   18b98:	4770      	bx	lr

00018b9a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   18b9a:	8883      	ldrh	r3, [r0, #4]
   18b9c:	88c2      	ldrh	r2, [r0, #6]
   18b9e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   18ba0:	6803      	ldr	r3, [r0, #0]
   18ba2:	6880      	ldr	r0, [r0, #8]
   18ba4:	1a18      	subs	r0, r3, r0
}
   18ba6:	1a10      	subs	r0, r2, r0
   18ba8:	4770      	bx	lr

00018baa <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   18baa:	6903      	ldr	r3, [r0, #16]
   18bac:	b2c9      	uxtb	r1, r1
   18bae:	220c      	movs	r2, #12
   18bb0:	fb01 3302 	mla	r3, r1, r2, r3
   18bb4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   18bb6:	f000 0007 	and.w	r0, r0, #7
   18bba:	4770      	bx	lr

00018bbc <set_on_state>:
	__asm__ volatile(
   18bbc:	f04f 0320 	mov.w	r3, #32
   18bc0:	f3ef 8211 	mrs	r2, BASEPRI
   18bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   18bc8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   18bcc:	6803      	ldr	r3, [r0, #0]
   18bce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18bd2:	f043 0302 	orr.w	r3, r3, #2
   18bd6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   18bd8:	f382 8811 	msr	BASEPRI, r2
   18bdc:	f3bf 8f6f 	isb	sy
}
   18be0:	4770      	bx	lr

00018be2 <stop>:
{
   18be2:	4603      	mov	r3, r0
   18be4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   18be6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   18be8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   18bea:	f04f 0420 	mov.w	r4, #32
   18bee:	f3ef 8611 	mrs	r6, BASEPRI
   18bf2:	f384 8812 	msr	BASEPRI_MAX, r4
   18bf6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18bfa:	250c      	movs	r5, #12
   18bfc:	fb05 0401 	mla	r4, r5, r1, r0
   18c00:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   18c02:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   18c06:	d001      	beq.n	18c0c <stop+0x2a>
   18c08:	42a2      	cmp	r2, r4
   18c0a:	d110      	bne.n	18c2e <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   18c0c:	fb05 0001 	mla	r0, r5, r1, r0
   18c10:	2201      	movs	r2, #1
   18c12:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   18c14:	2000      	movs	r0, #0
	__asm__ volatile(
   18c16:	f386 8811 	msr	BASEPRI, r6
   18c1a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   18c1e:	b928      	cbnz	r0, 18c2c <stop+0x4a>
	get_sub_config(dev, type)->stop();
   18c20:	685b      	ldr	r3, [r3, #4]
   18c22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   18c26:	684b      	ldr	r3, [r1, #4]
   18c28:	4798      	blx	r3
	return 0;
   18c2a:	2000      	movs	r0, #0
}
   18c2c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   18c2e:	f04f 30ff 	mov.w	r0, #4294967295
   18c32:	e7f0      	b.n	18c16 <stop+0x34>

00018c34 <api_stop>:
	return stop(dev, subsys, CTX_API);
   18c34:	2280      	movs	r2, #128	; 0x80
   18c36:	f7ff bfd4 	b.w	18be2 <stop>

00018c3a <async_start>:
{
   18c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c3c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   18c3e:	6904      	ldr	r4, [r0, #16]
{
   18c40:	4605      	mov	r5, r0
   18c42:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   18c44:	f04f 0020 	mov.w	r0, #32
   18c48:	f3ef 8c11 	mrs	ip, BASEPRI
   18c4c:	f380 8812 	msr	BASEPRI_MAX, r0
   18c50:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18c54:	260c      	movs	r6, #12
   18c56:	fb06 4601 	mla	r6, r6, r1, r4
   18c5a:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   18c5c:	f000 0e07 	and.w	lr, r0, #7
   18c60:	f1be 0f01 	cmp.w	lr, #1
   18c64:	d111      	bne.n	18c8a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   18c66:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   18c68:	2600      	movs	r6, #0
	__asm__ volatile(
   18c6a:	f38c 8811 	msr	BASEPRI, ip
   18c6e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   18c72:	b946      	cbnz	r6, 18c86 <async_start+0x4c>
	subdata->cb = cb;
   18c74:	200c      	movs	r0, #12
   18c76:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   18c7a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   18c7e:	686b      	ldr	r3, [r5, #4]
   18c80:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   18c84:	4798      	blx	r3
}
   18c86:	4630      	mov	r0, r6
   18c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   18c8a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   18c8e:	4287      	cmp	r7, r0
   18c90:	bf14      	ite	ne
   18c92:	f04f 36ff 	movne.w	r6, #4294967295
   18c96:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   18c9a:	e7e6      	b.n	18c6a <async_start+0x30>

00018c9c <api_start>:
{
   18c9c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   18c9e:	2480      	movs	r4, #128	; 0x80
   18ca0:	9400      	str	r4, [sp, #0]
   18ca2:	f7ff ffca 	bl	18c3a <async_start>
}
   18ca6:	b002      	add	sp, #8
   18ca8:	bd10      	pop	{r4, pc}

00018caa <onoff_started_callback>:
	return &data->mgr[type];
   18caa:	6900      	ldr	r0, [r0, #16]
{
   18cac:	b410      	push	{r4}
	return &data->mgr[type];
   18cae:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   18cb0:	241c      	movs	r4, #28
   18cb2:	fb03 0004 	mla	r0, r3, r4, r0
   18cb6:	2100      	movs	r1, #0
}
   18cb8:	bc10      	pop	{r4}
	notify(mgr, 0);
   18cba:	4710      	bx	r2

00018cbc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   18cbc:	2000      	movs	r0, #0
   18cbe:	f000 bad5 	b.w	1926c <nrfx_clock_start>

00018cc2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   18cc2:	2000      	movs	r0, #0
   18cc4:	f000 bb0f 	b.w	192e6 <nrfx_clock_stop>

00018cc8 <blocking_start_callback>:
{
   18cc8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   18cca:	f7fc b887 	b.w	14ddc <z_impl_k_sem_give>

00018cce <z_impl_uart_irq_rx_disable>:
	if (api->irq_rx_disable != NULL) {
   18cce:	6883      	ldr	r3, [r0, #8]
   18cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18cd2:	b103      	cbz	r3, 18cd6 <z_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
   18cd4:	4718      	bx	r3
}
   18cd6:	4770      	bx	lr

00018cd8 <uart_poll_out>:
	api->poll_out(dev, out_char);
   18cd8:	6883      	ldr	r3, [r0, #8]
   18cda:	685b      	ldr	r3, [r3, #4]
   18cdc:	4718      	bx	r3

00018cde <atomic_or>:
{
   18cde:	4603      	mov	r3, r0
}
   18ce0:	f3bf 8f5b 	dmb	ish
   18ce4:	e853 0f00 	ldrex	r0, [r3]
   18ce8:	ea40 0201 	orr.w	r2, r0, r1
   18cec:	e843 2c00 	strex	ip, r2, [r3]
   18cf0:	f1bc 0f00 	cmp.w	ip, #0
   18cf4:	d1f6      	bne.n	18ce4 <atomic_or+0x6>
   18cf6:	f3bf 8f5b 	dmb	ish
   18cfa:	4770      	bx	lr

00018cfc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18cfc:	6843      	ldr	r3, [r0, #4]
   18cfe:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   18d00:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   18d04:	600b      	str	r3, [r1, #0]
}
   18d06:	2000      	movs	r0, #0
   18d08:	4770      	bx	lr

00018d0a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18d0a:	6843      	ldr	r3, [r0, #4]
   18d0c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   18d0e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   18d12:	4042      	eors	r2, r0
   18d14:	400a      	ands	r2, r1
   18d16:	4042      	eors	r2, r0
    p_reg->OUT = value;
   18d18:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   18d1c:	2000      	movs	r0, #0
   18d1e:	4770      	bx	lr

00018d20 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18d20:	6843      	ldr	r3, [r0, #4]
   18d22:	685b      	ldr	r3, [r3, #4]
}
   18d24:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   18d26:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   18d2a:	4770      	bx	lr

00018d2c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18d2c:	6843      	ldr	r3, [r0, #4]
   18d2e:	685b      	ldr	r3, [r3, #4]
}
   18d30:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   18d32:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   18d36:	4770      	bx	lr

00018d38 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18d38:	6843      	ldr	r3, [r0, #4]
   18d3a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   18d3c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   18d40:	404b      	eors	r3, r1
    p_reg->OUT = value;
   18d42:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   18d46:	2000      	movs	r0, #0
   18d48:	4770      	bx	lr

00018d4a <gpio_nrfx_manage_callback>:
	return port->data;
   18d4a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   18d4c:	6858      	ldr	r0, [r3, #4]
{
   18d4e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   18d50:	b158      	cbz	r0, 18d6a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18d52:	2400      	movs	r4, #0
   18d54:	4281      	cmp	r1, r0
   18d56:	d112      	bne.n	18d7e <gpio_nrfx_manage_callback+0x34>
	return node->next;
   18d58:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   18d5a:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   18d5c:	b954      	cbnz	r4, 18d74 <gpio_nrfx_manage_callback+0x2a>
   18d5e:	428d      	cmp	r5, r1
	list->head = node;
   18d60:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   18d62:	d100      	bne.n	18d66 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   18d64:	6098      	str	r0, [r3, #8]
	parent->next = child;
   18d66:	2000      	movs	r0, #0
   18d68:	6008      	str	r0, [r1, #0]
	if (set) {
   18d6a:	b96a      	cbnz	r2, 18d88 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   18d6c:	2000      	movs	r0, #0
}
   18d6e:	bd30      	pop	{r4, r5, pc}
   18d70:	4628      	mov	r0, r5
   18d72:	e7ef      	b.n	18d54 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   18d74:	428d      	cmp	r5, r1
	parent->next = child;
   18d76:	6020      	str	r0, [r4, #0]
	list->tail = node;
   18d78:	bf08      	it	eq
   18d7a:	609c      	streq	r4, [r3, #8]
}
   18d7c:	e7f3      	b.n	18d66 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   18d7e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18d80:	4604      	mov	r4, r0
   18d82:	2d00      	cmp	r5, #0
   18d84:	d1f4      	bne.n	18d70 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   18d86:	b13a      	cbz	r2, 18d98 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   18d88:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   18d8a:	685a      	ldr	r2, [r3, #4]
   18d8c:	600a      	str	r2, [r1, #0]
	list->head = node;
   18d8e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   18d90:	2800      	cmp	r0, #0
   18d92:	d1eb      	bne.n	18d6c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   18d94:	6099      	str	r1, [r3, #8]
}
   18d96:	e7ea      	b.n	18d6e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   18d98:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   18d9c:	e7e7      	b.n	18d6e <gpio_nrfx_manage_callback+0x24>

00018d9e <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   18d9e:	6902      	ldr	r2, [r0, #16]
{
   18da0:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   18da2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   18da6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   18daa:	2000      	movs	r0, #0
   18dac:	4770      	bx	lr

00018dae <uarte_nrfx_err_check>:
	return config->uarte_regs;
   18dae:	6843      	ldr	r3, [r0, #4]
   18db0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18db2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   18db6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   18dba:	4770      	bx	lr

00018dbc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   18dbc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   18dbe:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   18dc0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18dc2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   18dc6:	b150      	cbz	r0, 18dde <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   18dc8:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18dca:	2000      	movs	r0, #0
   18dcc:	7812      	ldrb	r2, [r2, #0]
   18dce:	700a      	strb	r2, [r1, #0]
   18dd0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   18dd4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18dd8:	2201      	movs	r2, #1
   18dda:	601a      	str	r2, [r3, #0]
	return 0;
   18ddc:	4770      	bx	lr
		return -1;
   18dde:	f04f 30ff 	mov.w	r0, #4294967295
}
   18de2:	4770      	bx	lr

00018de4 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   18de4:	2a00      	cmp	r2, #0
{
   18de6:	b510      	push	{r4, lr}
   18de8:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   18dea:	dd10      	ble.n	18e0e <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   18dec:	6843      	ldr	r3, [r0, #4]
   18dee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18df0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   18df4:	b150      	cbz	r0, 18e0c <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
   18df6:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18df8:	2000      	movs	r0, #0
		rx_data[num_rx++] = *data->rx_data;
   18dfa:	6992      	ldr	r2, [r2, #24]
   18dfc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   18e00:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   18e04:	7812      	ldrb	r2, [r2, #0]
   18e06:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18e08:	2001      	movs	r0, #1
   18e0a:	6018      	str	r0, [r3, #0]
}
   18e0c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   18e0e:	2000      	movs	r0, #0
   18e10:	e7fc      	b.n	18e0c <uarte_nrfx_fifo_read+0x28>

00018e12 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   18e12:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   18e14:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   18e16:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   18e18:	f04f 0020 	mov.w	r0, #32
   18e1c:	f3ef 8311 	mrs	r3, BASEPRI
   18e20:	f380 8812 	msr	BASEPRI_MAX, r0
   18e24:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   18e28:	68c9      	ldr	r1, [r1, #12]
   18e2a:	2000      	movs	r0, #0
   18e2c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   18e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   18e32:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   18e36:	f383 8811 	msr	BASEPRI, r3
   18e3a:	f3bf 8f6f 	isb	sy
}
   18e3e:	4770      	bx	lr

00018e40 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   18e40:	6903      	ldr	r3, [r0, #16]
   18e42:	68db      	ldr	r3, [r3, #12]
   18e44:	2201      	movs	r2, #1
   18e46:	739a      	strb	r2, [r3, #14]
}
   18e48:	4770      	bx	lr

00018e4a <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   18e4a:	6903      	ldr	r3, [r0, #16]
   18e4c:	68db      	ldr	r3, [r3, #12]
   18e4e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   18e50:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   18e54:	b962      	cbnz	r2, 18e70 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   18e56:	6842      	ldr	r2, [r0, #4]
   18e58:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18e5a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   18e5e:	b140      	cbz	r0, 18e72 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   18e60:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   18e64:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   18e68:	d003      	beq.n	18e72 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   18e6a:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   18e6c:	2001      	movs	r0, #1
   18e6e:	4770      	bx	lr
   18e70:	2000      	movs	r0, #0
}
   18e72:	4770      	bx	lr

00018e74 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   18e74:	6843      	ldr	r3, [r0, #4]
   18e76:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18e78:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   18e7c:	3800      	subs	r0, #0
   18e7e:	bf18      	it	ne
   18e80:	2001      	movne	r0, #1
   18e82:	4770      	bx	lr

00018e84 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   18e84:	6843      	ldr	r3, [r0, #4]
   18e86:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   18e88:	2210      	movs	r2, #16
   18e8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18e8e:	4770      	bx	lr

00018e90 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   18e90:	6843      	ldr	r3, [r0, #4]
   18e92:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   18e94:	2210      	movs	r2, #16
   18e96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   18e9a:	4770      	bx	lr

00018e9c <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   18e9c:	6843      	ldr	r3, [r0, #4]
   18e9e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   18ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
   18ea4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18ea8:	4770      	bx	lr

00018eaa <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   18eaa:	6843      	ldr	r3, [r0, #4]
   18eac:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   18eae:	f44f 7200 	mov.w	r2, #512	; 0x200
   18eb2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   18eb6:	4770      	bx	lr

00018eb8 <uarte_nrfx_irq_update>:
}
   18eb8:	2001      	movs	r0, #1
   18eba:	4770      	bx	lr

00018ebc <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   18ebc:	6903      	ldr	r3, [r0, #16]
   18ebe:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   18ec0:	e9c3 1200 	strd	r1, r2, [r3]
}
   18ec4:	4770      	bx	lr

00018ec6 <uarte_nrfx_irq_is_pending>:
{
   18ec6:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   18ec8:	6843      	ldr	r3, [r0, #4]
   18eca:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   18ecc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   18ed0:	025b      	lsls	r3, r3, #9
{
   18ed2:	4604      	mov	r4, r0
		||
   18ed4:	d405      	bmi.n	18ee2 <uarte_nrfx_irq_is_pending+0x1c>
   18ed6:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   18eda:	f010 0010 	ands.w	r0, r0, #16
   18ede:	d106      	bne.n	18eee <uarte_nrfx_irq_is_pending+0x28>
}
   18ee0:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   18ee2:	f7ff ffb2 	bl	18e4a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   18ee6:	2800      	cmp	r0, #0
   18ee8:	d0f5      	beq.n	18ed6 <uarte_nrfx_irq_is_pending+0x10>
		||
   18eea:	2001      	movs	r0, #1
   18eec:	e7f8      	b.n	18ee0 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   18eee:	4620      	mov	r0, r4
   18ef0:	f7ff ffc0 	bl	18e74 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   18ef4:	3800      	subs	r0, #0
   18ef6:	bf18      	it	ne
   18ef8:	2001      	movne	r0, #1
   18efa:	e7f1      	b.n	18ee0 <uarte_nrfx_irq_is_pending+0x1a>

00018efc <tx_start.isra.0>:
	return config->uarte_regs;
   18efc:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18efe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18f02:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18f06:	2200      	movs	r2, #0
   18f08:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18f0c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   18f10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   18f14:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18f18:	6842      	ldr	r2, [r0, #4]
   18f1a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18f1c:	bf41      	itttt	mi
   18f1e:	2208      	movmi	r2, #8
   18f20:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   18f24:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   18f28:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18f2c:	2201      	movs	r2, #1
   18f2e:	609a      	str	r2, [r3, #8]
}
   18f30:	4770      	bx	lr

00018f32 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   18f32:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   18f34:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18f36:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18f3a:	b940      	cbnz	r0, 18f4e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   18f3c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18f3e:	079b      	lsls	r3, r3, #30
   18f40:	d406      	bmi.n	18f50 <is_tx_ready.isra.0+0x1e>
   18f42:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   18f46:	3800      	subs	r0, #0
   18f48:	bf18      	it	ne
   18f4a:	2001      	movne	r0, #1
   18f4c:	4770      	bx	lr
   18f4e:	2001      	movs	r0, #1
}
   18f50:	4770      	bx	lr

00018f52 <uarte_nrfx_fifo_fill>:
{
   18f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   18f54:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   18f56:	68f3      	ldr	r3, [r6, #12]
   18f58:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18f5a:	f3bf 8f5b 	dmb	ish
   18f5e:	4294      	cmp	r4, r2
   18f60:	bfa8      	it	ge
   18f62:	4614      	movge	r4, r2
{
   18f64:	4605      	mov	r5, r0
   18f66:	3310      	adds	r3, #16
   18f68:	2201      	movs	r2, #1
   18f6a:	e853 0f00 	ldrex	r0, [r3]
   18f6e:	2800      	cmp	r0, #0
   18f70:	d103      	bne.n	18f7a <uarte_nrfx_fifo_fill+0x28>
   18f72:	e843 2700 	strex	r7, r2, [r3]
   18f76:	2f00      	cmp	r7, #0
   18f78:	d1f7      	bne.n	18f6a <uarte_nrfx_fifo_fill+0x18>
   18f7a:	f3bf 8f5b 	dmb	ish
   18f7e:	bf0c      	ite	eq
   18f80:	4613      	moveq	r3, r2
   18f82:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   18f84:	d11f      	bne.n	18fc6 <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   18f86:	68f3      	ldr	r3, [r6, #12]
   18f88:	4622      	mov	r2, r4
   18f8a:	6898      	ldr	r0, [r3, #8]
   18f8c:	f7fd fc31 	bl	167f2 <memcpy>
	__asm__ volatile(
   18f90:	f04f 0320 	mov.w	r3, #32
   18f94:	f3ef 8711 	mrs	r7, BASEPRI
   18f98:	f383 8812 	msr	BASEPRI_MAX, r3
   18f9c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   18fa0:	6868      	ldr	r0, [r5, #4]
   18fa2:	f7ff ffc6 	bl	18f32 <is_tx_ready.isra.0>
   18fa6:	68f3      	ldr	r3, [r6, #12]
   18fa8:	b938      	cbnz	r0, 18fba <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
   18faa:	6118      	str	r0, [r3, #16]
		len = 0;
   18fac:	4604      	mov	r4, r0
	__asm__ volatile(
   18fae:	f387 8811 	msr	BASEPRI, r7
   18fb2:	f3bf 8f6f 	isb	sy
}
   18fb6:	4620      	mov	r0, r4
   18fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   18fba:	6899      	ldr	r1, [r3, #8]
   18fbc:	6868      	ldr	r0, [r5, #4]
   18fbe:	4622      	mov	r2, r4
   18fc0:	f7ff ff9c 	bl	18efc <tx_start.isra.0>
   18fc4:	e7f3      	b.n	18fae <uarte_nrfx_fifo_fill+0x5c>
		return 0;
   18fc6:	461c      	mov	r4, r3
   18fc8:	e7f5      	b.n	18fb6 <uarte_nrfx_fifo_fill+0x64>

00018fca <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   18fca:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   18fcc:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   18fce:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   18fd2:	05c9      	lsls	r1, r1, #23
{
   18fd4:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   18fd6:	d518      	bpl.n	1900a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18fd8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   18fdc:	b1a9      	cbz	r1, 1900a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   18fde:	f04f 0420 	mov.w	r4, #32
   18fe2:	f3ef 8111 	mrs	r1, BASEPRI
   18fe6:	f384 8812 	msr	BASEPRI_MAX, r4
   18fea:	f3bf 8f6f 	isb	sy
   18fee:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   18ff2:	b134      	cbz	r4, 19002 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18ff4:	2400      	movs	r4, #0
   18ff6:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   18ffa:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18ffe:	2401      	movs	r4, #1
   19000:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   19002:	f381 8811 	msr	BASEPRI, r1
   19006:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1900a:	6852      	ldr	r2, [r2, #4]
   1900c:	06d2      	lsls	r2, r2, #27
   1900e:	d51a      	bpl.n	19046 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   19010:	f04f 0220 	mov.w	r2, #32
   19014:	f3ef 8111 	mrs	r1, BASEPRI
   19018:	f382 8812 	msr	BASEPRI_MAX, r2
   1901c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19020:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   19024:	b112      	cbz	r2, 1902c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19026:	2200      	movs	r2, #0
   19028:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1902c:	6902      	ldr	r2, [r0, #16]
   1902e:	68d2      	ldr	r2, [r2, #12]
   19030:	b10a      	cbz	r2, 19036 <uarte_nrfx_isr_int+0x6c>
   19032:	6912      	ldr	r2, [r2, #16]
   19034:	b91a      	cbnz	r2, 1903e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   19036:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1903a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1903e:	f381 8811 	msr	BASEPRI, r1
   19042:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   19046:	6902      	ldr	r2, [r0, #16]
   19048:	68d2      	ldr	r2, [r2, #12]
   1904a:	b15a      	cbz	r2, 19064 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1904c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   19050:	b151      	cbz	r1, 19068 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
   19052:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   19054:	2100      	movs	r1, #0
   19056:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   19058:	b134      	cbz	r4, 19068 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
   1905a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1905e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   19062:	7391      	strb	r1, [r2, #14]
}
   19064:	bc10      	pop	{r4}
   19066:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19068:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1906c:	b121      	cbz	r1, 19078 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1906e:	2100      	movs	r1, #0
   19070:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   19074:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   19078:	6813      	ldr	r3, [r2, #0]
   1907a:	2b00      	cmp	r3, #0
   1907c:	d0f2      	beq.n	19064 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1907e:	6851      	ldr	r1, [r2, #4]
}
   19080:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   19082:	4718      	bx	r3

00019084 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   19084:	b510      	push	{r4, lr}
   19086:	2200      	movs	r2, #0
   19088:	4604      	mov	r4, r0
   1908a:	2101      	movs	r1, #1
   1908c:	2028      	movs	r0, #40	; 0x28
   1908e:	f7ea ff1f 	bl	3ed0 <z_arm_irq_priority_set>
   19092:	2028      	movs	r0, #40	; 0x28
   19094:	f7ea feea 	bl	3e6c <arch_irq_enable>
   19098:	4620      	mov	r0, r4
   1909a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1909e:	f7fa b9ff 	b.w	134a0 <uarte_instance_init.constprop.0>

000190a2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   190a2:	b510      	push	{r4, lr}
   190a4:	2200      	movs	r2, #0
   190a6:	4604      	mov	r4, r0
   190a8:	2101      	movs	r1, #1
   190aa:	2002      	movs	r0, #2
   190ac:	f7ea ff10 	bl	3ed0 <z_arm_irq_priority_set>
   190b0:	2002      	movs	r0, #2
   190b2:	f7ea fedb 	bl	3e6c <arch_irq_enable>
   190b6:	4620      	mov	r0, r4
   190b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   190bc:	f7fa b9f0 	b.w	134a0 <uarte_instance_init.constprop.0>

000190c0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   190c0:	4770      	bx	lr

000190c2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   190c2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   190c4:	6843      	ldr	r3, [r0, #4]
   190c6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   190c8:	7a03      	ldrb	r3, [r0, #8]
   190ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   190ce:	3b01      	subs	r3, #1
   190d0:	00db      	lsls	r3, r3, #3
   190d2:	6845      	ldr	r5, [r0, #4]
   190d4:	6814      	ldr	r4, [r2, #0]
   190d6:	441d      	add	r5, r3
   190d8:	42ac      	cmp	r4, r5
   190da:	d902      	bls.n	190e2 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   190dc:	f06f 0001 	mvn.w	r0, #1
}
   190e0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   190e2:	7965      	ldrb	r5, [r4, #5]
   190e4:	428d      	cmp	r5, r1
   190e6:	d002      	beq.n	190ee <pinctrl_lookup_state+0x2c>
		(*state)++;
   190e8:	3408      	adds	r4, #8
   190ea:	6014      	str	r4, [r2, #0]
   190ec:	e7f1      	b.n	190d2 <pinctrl_lookup_state+0x10>
			return 0;
   190ee:	2000      	movs	r0, #0
   190f0:	e7f6      	b.n	190e0 <pinctrl_lookup_state+0x1e>

000190f2 <nrf_gpio_pin_write>:
    if (value == 0)
   190f2:	b909      	cbnz	r1, 190f8 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   190f4:	f7fa be32 	b.w	13d5c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   190f8:	f7fa be62 	b.w	13dc0 <nrf_gpio_pin_set>

000190fc <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   190fc:	b570      	push	{r4, r5, r6, lr}
   190fe:	4615      	mov	r5, r2
   19100:	4604      	mov	r4, r0
   19102:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   19106:	42a6      	cmp	r6, r4
   19108:	d101      	bne.n	1910e <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   1910a:	2000      	movs	r0, #0
}
   1910c:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   1910e:	6823      	ldr	r3, [r4, #0]
   19110:	0c1a      	lsrs	r2, r3, #16
   19112:	2a22      	cmp	r2, #34	; 0x22
   19114:	f200 808e 	bhi.w	19234 <pinctrl_configure_pins+0x138>
   19118:	e8df f002 	tbb	[pc, r2]
   1911c:	43241d12 	.word	0x43241d12
   19120:	8c433929 	.word	0x8c433929
   19124:	488c8c8c 	.word	0x488c8c8c
   19128:	8c8c8c4d 	.word	0x8c8c8c4d
   1912c:	8c8c8c8c 	.word	0x8c8c8c8c
   19130:	5e528c8c 	.word	0x5e528c8c
   19134:	8c8c6863 	.word	0x8c8c6863
   19138:	78736d8c 	.word	0x78736d8c
   1913c:	827d      	.short	0x827d
   1913e:	87          	.byte	0x87
   1913f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   19140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19144:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   19148:	6820      	ldr	r0, [r4, #0]
   1914a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1914e:	f7fa fe37 	bl	13dc0 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   19152:	2201      	movs	r2, #1
   19154:	e015      	b.n	19182 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   19156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1915a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1915e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   19160:	2100      	movs	r1, #0
   19162:	e00f      	b.n	19184 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   19164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19168:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   1916c:	e7ec      	b.n	19148 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   1916e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19172:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   19176:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   19178:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1917c:	f7fa fdee 	bl	13d5c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   19180:	2200      	movs	r2, #0
   19182:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   19184:	6820      	ldr	r0, [r4, #0]
   19186:	f7fa fdf9 	bl	13d7c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1918a:	3404      	adds	r4, #4
   1918c:	e7bb      	b.n	19106 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   1918e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19192:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   19196:	6820      	ldr	r0, [r4, #0]
   19198:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1919c:	f7fa fdde 	bl	13d5c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   191a0:	e7d7      	b.n	19152 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   191a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191a6:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   191aa:	e7d8      	b.n	1915e <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   191ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191b0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   191b4:	e7d3      	b.n	1915e <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   191b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191ba:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   191be:	e7ce      	b.n	1915e <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   191c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191c4:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   191c8:	6820      	ldr	r0, [r4, #0]
   191ca:	f3c0 3140 	ubfx	r1, r0, #13, #1
   191ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   191d2:	f7ff ff8e 	bl	190f2 <nrf_gpio_pin_write>
   191d6:	e7bc      	b.n	19152 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   191d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191dc:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   191e0:	e7f2      	b.n	191c8 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   191e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191e6:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   191ea:	e7ed      	b.n	191c8 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   191ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191f0:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   191f4:	e7e8      	b.n	191c8 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   191f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   191fa:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   191fe:	2201      	movs	r2, #1
   19200:	e7ae      	b.n	19160 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   19202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19206:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1920a:	e7f8      	b.n	191fe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   1920c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19210:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   19214:	e7f3      	b.n	191fe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   19216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1921a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1921e:	e7ee      	b.n	191fe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   19220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19224:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   19228:	e7e9      	b.n	191fe <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   1922a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1922e:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   19232:	e7e4      	b.n	191fe <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   19234:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19238:	e768      	b.n	1910c <pinctrl_configure_pins+0x10>

0001923a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1923a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1923e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   19242:	f1a0 0308 	sub.w	r3, r0, #8
   19246:	4258      	negs	r0, r3
   19248:	4158      	adcs	r0, r3
   1924a:	4770      	bx	lr

0001924c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1924c:	4700      	bx	r0

0001924e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1924e:	f000 bc89 	b.w	19b64 <z_impl_k_busy_wait>

00019252 <nrfx_clock_enable>:
{
   19252:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   19254:	2000      	movs	r0, #0
   19256:	f7ea fe2d 	bl	3eb4 <arch_irq_is_enabled>
   1925a:	b908      	cbnz	r0, 19260 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1925c:	f7ea fe06 	bl	3e6c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   19260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19264:	2200      	movs	r2, #0
   19266:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1926a:	bd08      	pop	{r3, pc}

0001926c <nrfx_clock_start>:
{
   1926c:	b508      	push	{r3, lr}
    switch (domain)
   1926e:	b110      	cbz	r0, 19276 <nrfx_clock_start+0xa>
   19270:	2801      	cmp	r0, #1
   19272:	d02d      	beq.n	192d0 <nrfx_clock_start+0x64>
}
   19274:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1927a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1927e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   19282:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   19286:	d10b      	bne.n	192a0 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   19288:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1928c:	07c9      	lsls	r1, r1, #31
   1928e:	d510      	bpl.n	192b2 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19290:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
   19294:	079b      	lsls	r3, r3, #30
   19296:	d408      	bmi.n	192aa <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
   19298:	2302      	movs	r3, #2
   1929a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   1929e:	e7e9      	b.n	19274 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   192a0:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   192a4:	2b01      	cmp	r3, #1
   192a6:	d004      	beq.n	192b2 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
   192a8:	b11b      	cbz	r3, 192b2 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   192aa:	2000      	movs	r0, #0
   192ac:	f7fa fee4 	bl	14078 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   192b0:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   192b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   192b6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   192ba:	2300      	movs	r3, #0
   192bc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   192c0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   192c4:	2302      	movs	r3, #2
   192c6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192ca:	2301      	movs	r3, #1
   192cc:	6093      	str	r3, [r2, #8]
}
   192ce:	e7d1      	b.n	19274 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   192d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   192d4:	2200      	movs	r2, #0
   192d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   192da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   192de:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192e2:	6018      	str	r0, [r3, #0]
}
   192e4:	e7c6      	b.n	19274 <nrfx_clock_start+0x8>

000192e6 <nrfx_clock_stop>:
    clock_stop(domain);
   192e6:	f7fa bec7 	b.w	14078 <clock_stop>

000192ea <nrf_gpio_reconfigure>:
{
   192ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   192ec:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   192ee:	a801      	add	r0, sp, #4
{
   192f0:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   192f4:	4617      	mov	r7, r2
   192f6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   192f8:	f7fa ff56 	bl	141a8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   192fc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   192fe:	2f00      	cmp	r7, #0
   19300:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19304:	bf14      	ite	ne
   19306:	2302      	movne	r3, #2
   19308:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1930a:	2900      	cmp	r1, #0
   1930c:	bf18      	it	ne
   1930e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19312:	2d00      	cmp	r5, #0
   19314:	bf14      	ite	ne
   19316:	f04f 0c0c 	movne.w	ip, #12
   1931a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1931e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19320:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   19324:	bf14      	ite	ne
   19326:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1932a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1932e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19330:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19334:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   19338:	bf14      	ite	ne
   1933a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1933e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19342:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   19346:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1934a:	b101      	cbz	r1, 1934e <nrf_gpio_reconfigure+0x64>
   1934c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1934e:	b10f      	cbz	r7, 19354 <nrf_gpio_reconfigure+0x6a>
   19350:	783f      	ldrb	r7, [r7, #0]
   19352:	007f      	lsls	r7, r7, #1
   19354:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19356:	b10d      	cbz	r5, 1935c <nrf_gpio_reconfigure+0x72>
   19358:	782d      	ldrb	r5, [r5, #0]
   1935a:	00ad      	lsls	r5, r5, #2
   1935c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1935e:	b10c      	cbz	r4, 19364 <nrf_gpio_reconfigure+0x7a>
   19360:	7822      	ldrb	r2, [r4, #0]
   19362:	0214      	lsls	r4, r2, #8
   19364:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   19366:	b10e      	cbz	r6, 1936c <nrf_gpio_reconfigure+0x82>
   19368:	7836      	ldrb	r6, [r6, #0]
   1936a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1936c:	432c      	orrs	r4, r5
   1936e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   19370:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   19374:	b003      	add	sp, #12
   19376:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019378 <nrf_gpio_cfg_sense_set>:
{
   19378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1937a:	f10d 030f 	add.w	r3, sp, #15
   1937e:	9301      	str	r3, [sp, #4]
   19380:	2300      	movs	r3, #0
{
   19382:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   19386:	9300      	str	r3, [sp, #0]
   19388:	461a      	mov	r2, r3
   1938a:	4619      	mov	r1, r3
   1938c:	f7ff ffad 	bl	192ea <nrf_gpio_reconfigure>
}
   19390:	b005      	add	sp, #20
   19392:	f85d fb04 	ldr.w	pc, [sp], #4

00019396 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   19396:	f7fb ba6d 	b.w	14874 <_DoInit>

0001939a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1939a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1939c:	f7ff fffb 	bl	19396 <SEGGER_RTT_Init>

	return 0;
}
   193a0:	2000      	movs	r0, #0
   193a2:	bd08      	pop	{r3, pc}

000193a4 <z_device_state_init>:
}
   193a4:	4770      	bx	lr

000193a6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   193a6:	b138      	cbz	r0, 193b8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   193a8:	68c3      	ldr	r3, [r0, #12]
   193aa:	8818      	ldrh	r0, [r3, #0]
   193ac:	f3c0 0008 	ubfx	r0, r0, #0, #9
   193b0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   193b4:	4258      	negs	r0, r3
   193b6:	4158      	adcs	r0, r3
}
   193b8:	4770      	bx	lr

000193ba <arch_system_halt>:
	__asm__ volatile(
   193ba:	f04f 0220 	mov.w	r2, #32
   193be:	f3ef 8311 	mrs	r3, BASEPRI
   193c2:	f382 8812 	msr	BASEPRI_MAX, r2
   193c6:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   193ca:	e7fe      	b.n	193ca <arch_system_halt+0x10>

000193cc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   193cc:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   193ce:	f7ff fff4 	bl	193ba <arch_system_halt>

000193d2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   193d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193d4:	4605      	mov	r5, r0
   193d6:	460e      	mov	r6, r1
   193d8:	f04f 0320 	mov.w	r3, #32
   193dc:	f3ef 8711 	mrs	r7, BASEPRI
   193e0:	f383 8812 	msr	BASEPRI_MAX, r3
   193e4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   193e8:	f7fc f9b0 	bl	1574c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   193ec:	4631      	mov	r1, r6
   193ee:	4604      	mov	r4, r0
   193f0:	4628      	mov	r0, r5
   193f2:	f7ff ffeb 	bl	193cc <k_sys_fatal_error_handler>
	__asm__ volatile(
   193f6:	f387 8811 	msr	BASEPRI, r7
   193fa:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   193fe:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   19400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19404:	f7ea bfa0 	b.w	4348 <z_impl_k_thread_abort>

00019408 <z_early_memset>:
	(void) memset(dst, c, n);
   19408:	f7fd b9fe 	b.w	16808 <memset>

0001940c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1940c:	f7fd b9f1 	b.w	167f2 <memcpy>

00019410 <k_heap_init>:
{
   19410:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   19412:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   19416:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1941a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1941c:	f7fc bed4 	b.w	161c8 <sys_heap_init>

00019420 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   19420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19424:	b085      	sub	sp, #20
   19426:	4606      	mov	r6, r0
   19428:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1942a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1942e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19430:	f000 fb9c 	bl	19b6c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   19434:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   19438:	4605      	mov	r5, r0
   1943a:	460f      	mov	r7, r1
	__asm__ volatile(
   1943c:	f04f 0320 	mov.w	r3, #32
   19440:	f3ef 8411 	mrs	r4, BASEPRI
   19444:	f383 8812 	msr	BASEPRI_MAX, r3
   19448:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1944c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   19450:	464a      	mov	r2, r9
   19452:	4641      	mov	r1, r8
   19454:	4630      	mov	r0, r6
   19456:	f7fc fe4f 	bl	160f8 <sys_heap_aligned_alloc>
   1945a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1945c:	f7fc fb28 	bl	15ab0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   19460:	9b03      	ldr	r3, [sp, #12]
   19462:	b13b      	cbz	r3, 19474 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   19464:	f384 8811 	msr	BASEPRI, r4
   19468:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1946c:	4618      	mov	r0, r3
   1946e:	b005      	add	sp, #20
   19470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   19474:	1a28      	subs	r0, r5, r0
   19476:	eb67 0101 	sbc.w	r1, r7, r1
   1947a:	2801      	cmp	r0, #1
   1947c:	f171 0200 	sbcs.w	r2, r1, #0
   19480:	dbf0      	blt.n	19464 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   19482:	e9cd 0100 	strd	r0, r1, [sp]
   19486:	465a      	mov	r2, fp
   19488:	4621      	mov	r1, r4
   1948a:	4650      	mov	r0, sl
   1948c:	f7fc f84e 	bl	1552c <z_pend_curr>
	__asm__ volatile(
   19490:	f04f 0320 	mov.w	r3, #32
   19494:	f3ef 8411 	mrs	r4, BASEPRI
   19498:	f383 8812 	msr	BASEPRI_MAX, r3
   1949c:	f3bf 8f6f 	isb	sy
   194a0:	e7d6      	b.n	19450 <k_heap_aligned_alloc+0x30>

000194a2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   194a2:	b538      	push	{r3, r4, r5, lr}
   194a4:	4604      	mov	r4, r0
   194a6:	f04f 0320 	mov.w	r3, #32
   194aa:	f3ef 8511 	mrs	r5, BASEPRI
   194ae:	f383 8812 	msr	BASEPRI_MAX, r3
   194b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   194b6:	f7fc fde7 	bl	16088 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   194ba:	f104 000c 	add.w	r0, r4, #12
   194be:	f000 fae0 	bl	19a82 <z_unpend_all>
   194c2:	b130      	cbz	r0, 194d2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   194c4:	4629      	mov	r1, r5
   194c6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   194ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   194ce:	f7fb bed9 	b.w	15284 <z_reschedule>
	__asm__ volatile(
   194d2:	f385 8811 	msr	BASEPRI, r5
   194d6:	f3bf 8f6f 	isb	sy
}
   194da:	bd38      	pop	{r3, r4, r5, pc}

000194dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   194dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194de:	4604      	mov	r4, r0
   194e0:	460d      	mov	r5, r1
	__asm__ volatile(
   194e2:	f04f 0320 	mov.w	r3, #32
   194e6:	f3ef 8611 	mrs	r6, BASEPRI
   194ea:	f383 8812 	msr	BASEPRI_MAX, r3
   194ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   194f2:	6947      	ldr	r7, [r0, #20]
   194f4:	b977      	cbnz	r7, 19514 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   194f6:	f000 faac 	bl	19a52 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   194fa:	b158      	cbz	r0, 19514 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   194fc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   194fe:	6142      	str	r2, [r0, #20]
   19500:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   19502:	f000 fa4a 	bl	1999a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   19506:	4631      	mov	r1, r6
   19508:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1950c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   19510:	f7fb beb8 	b.w	15284 <z_reschedule>
	**(char ***) mem = slab->free_list;
   19514:	682b      	ldr	r3, [r5, #0]
   19516:	6962      	ldr	r2, [r4, #20]
   19518:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1951a:	682b      	ldr	r3, [r5, #0]
   1951c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1951e:	69a3      	ldr	r3, [r4, #24]
   19520:	3b01      	subs	r3, #1
   19522:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   19524:	f386 8811 	msr	BASEPRI, r6
   19528:	f3bf 8f6f 	isb	sy
}
   1952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001952e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1952e:	f3ef 8005 	mrs	r0, IPSR
}
   19532:	3800      	subs	r0, #0
   19534:	bf18      	it	ne
   19536:	2001      	movne	r0, #1
   19538:	4770      	bx	lr

0001953a <z_impl_k_thread_name_set>:
}
   1953a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1953e:	4770      	bx	lr

00019540 <z_impl_k_thread_start>:
	z_sched_start(thread);
   19540:	f7fb bf98 	b.w	15474 <z_sched_start>

00019544 <z_pm_save_idle_exit>:
{
   19544:	b508      	push	{r3, lr}
	pm_system_resume();
   19546:	f7ea fb0f 	bl	3b68 <pm_system_resume>
}
   1954a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1954e:	f7ff bdb7 	b.w	190c0 <sys_clock_idle_exit>

00019552 <queue_insert>:
{
   19552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19556:	4699      	mov	r9, r3
   19558:	4604      	mov	r4, r0
   1955a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1955e:	460d      	mov	r5, r1
   19560:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19562:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   19566:	f04f 0220 	mov.w	r2, #32
   1956a:	f3ef 8711 	mrs	r7, BASEPRI
   1956e:	f382 8812 	msr	BASEPRI_MAX, r2
   19572:	f3bf 8f6f 	isb	sy
	if (is_append) {
   19576:	b103      	cbz	r3, 1957a <queue_insert+0x28>
	return list->tail;
   19578:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1957a:	4630      	mov	r0, r6
   1957c:	f000 fa69 	bl	19a52 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   19580:	b158      	cbz	r0, 1959a <queue_insert+0x48>
   19582:	2400      	movs	r4, #0
   19584:	67c4      	str	r4, [r0, #124]	; 0x7c
   19586:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1958a:	f000 fa06 	bl	1999a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1958e:	4630      	mov	r0, r6
   19590:	4639      	mov	r1, r7
   19592:	f7fb fe77 	bl	15284 <z_reschedule>
	return 0;
   19596:	2000      	movs	r0, #0
   19598:	e00c      	b.n	195b4 <queue_insert+0x62>
	if (alloc) {
   1959a:	f1b9 0f00 	cmp.w	r9, #0
   1959e:	d01b      	beq.n	195d8 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   195a0:	2108      	movs	r1, #8
   195a2:	f7fc fb21 	bl	15be8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   195a6:	b938      	cbnz	r0, 195b8 <queue_insert+0x66>
	__asm__ volatile(
   195a8:	f387 8811 	msr	BASEPRI, r7
   195ac:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   195b0:	f06f 000b 	mvn.w	r0, #11
}
   195b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   195b8:	2301      	movs	r3, #1
		anode->data = data;
   195ba:	f8c0 8004 	str.w	r8, [r0, #4]
   195be:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   195c0:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   195c2:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   195c6:	b95d      	cbnz	r5, 195e0 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   195c8:	6823      	ldr	r3, [r4, #0]
   195ca:	4313      	orrs	r3, r2
   195cc:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   195ce:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   195d0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   195d2:	b973      	cbnz	r3, 195f2 <queue_insert+0xa0>
	list->tail = node;
   195d4:	6060      	str	r0, [r4, #4]
}
   195d6:	e00c      	b.n	195f2 <queue_insert+0xa0>
	node->next_and_flags = flags;
   195d8:	f8c8 9000 	str.w	r9, [r8]
}
   195dc:	4640      	mov	r0, r8
   195de:	e7ef      	b.n	195c0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   195e0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   195e2:	f033 0303 	bics.w	r3, r3, #3
   195e6:	d110      	bne.n	1960a <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   195e8:	6002      	str	r2, [r0, #0]
	return list->tail;
   195ea:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   195ec:	b93a      	cbnz	r2, 195fe <queue_insert+0xac>
	list->head = node;
   195ee:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   195f2:	2104      	movs	r1, #4
   195f4:	f104 0010 	add.w	r0, r4, #16
   195f8:	f000 fc21 	bl	19e3e <z_handle_obj_poll_events>
   195fc:	e7c7      	b.n	1958e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   195fe:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19600:	f003 0303 	and.w	r3, r3, #3
   19604:	4303      	orrs	r3, r0
   19606:	6013      	str	r3, [r2, #0]
   19608:	e7e4      	b.n	195d4 <queue_insert+0x82>
   1960a:	4313      	orrs	r3, r2
   1960c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1960e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19610:	f003 0303 	and.w	r3, r3, #3
   19614:	4303      	orrs	r3, r0
   19616:	602b      	str	r3, [r5, #0]
}
   19618:	e7eb      	b.n	195f2 <queue_insert+0xa0>

0001961a <z_queue_node_peek>:
{
   1961a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1961c:	4604      	mov	r4, r0
   1961e:	b130      	cbz	r0, 1962e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19620:	6802      	ldr	r2, [r0, #0]
   19622:	0793      	lsls	r3, r2, #30
   19624:	d003      	beq.n	1962e <z_queue_node_peek+0x14>
		ret = anode->data;
   19626:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   19628:	b109      	cbz	r1, 1962e <z_queue_node_peek+0x14>
			k_free(anode);
   1962a:	f000 fc16 	bl	19e5a <k_free>
}
   1962e:	4620      	mov	r0, r4
   19630:	bd10      	pop	{r4, pc}

00019632 <z_impl_k_queue_init>:
	list->head = NULL;
   19632:	2300      	movs	r3, #0
	list->tail = NULL;
   19634:	e9c0 3300 	strd	r3, r3, [r0]
   19638:	f100 0308 	add.w	r3, r0, #8
   1963c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   19640:	f100 0310 	add.w	r3, r0, #16
   19644:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   19648:	4770      	bx	lr

0001964a <k_queue_append>:
{
   1964a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1964c:	2301      	movs	r3, #1
   1964e:	9300      	str	r3, [sp, #0]
   19650:	2300      	movs	r3, #0
{
   19652:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   19654:	4619      	mov	r1, r3
   19656:	f7ff ff7c 	bl	19552 <queue_insert>
}
   1965a:	b003      	add	sp, #12
   1965c:	f85d fb04 	ldr.w	pc, [sp], #4

00019660 <k_queue_prepend>:
{
   19660:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   19662:	2300      	movs	r3, #0
{
   19664:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   19666:	9300      	str	r3, [sp, #0]
   19668:	4619      	mov	r1, r3
   1966a:	f7ff ff72 	bl	19552 <queue_insert>
}
   1966e:	b003      	add	sp, #12
   19670:	f85d fb04 	ldr.w	pc, [sp], #4

00019674 <k_queue_append_list>:
{
   19674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19678:	4605      	mov	r5, r0
   1967a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1967c:	460c      	mov	r4, r1
   1967e:	b391      	cbz	r1, 196e6 <k_queue_append_list+0x72>
   19680:	b38a      	cbz	r2, 196e6 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19682:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   19686:	f04f 0320 	mov.w	r3, #32
   1968a:	f3ef 8811 	mrs	r8, BASEPRI
   1968e:	f383 8812 	msr	BASEPRI_MAX, r3
   19692:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   19696:	4638      	mov	r0, r7
   19698:	f000 f9db 	bl	19a52 <z_unpend_first_thread>
   1969c:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   196a0:	b920      	cbnz	r0, 196ac <k_queue_append_list+0x38>
	return list->tail;
   196a2:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   196a4:	b9ca      	cbnz	r2, 196da <k_queue_append_list+0x66>
	list->head = node;
   196a6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   196a8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   196aa:	e00a      	b.n	196c2 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   196ac:	6144      	str	r4, [r0, #20]
   196ae:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   196b2:	f000 f972 	bl	1999a <z_ready_thread>
		head = *(void **)head;
   196b6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   196b8:	4638      	mov	r0, r7
   196ba:	f000 f9ca 	bl	19a52 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   196be:	2c00      	cmp	r4, #0
   196c0:	d1ee      	bne.n	196a0 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   196c2:	2104      	movs	r1, #4
   196c4:	f105 0010 	add.w	r0, r5, #16
   196c8:	f000 fbb9 	bl	19e3e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   196cc:	4638      	mov	r0, r7
   196ce:	4641      	mov	r1, r8
   196d0:	f7fb fdd8 	bl	15284 <z_reschedule>
	return 0;
   196d4:	2000      	movs	r0, #0
}
   196d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   196da:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   196dc:	f003 0303 	and.w	r3, r3, #3
   196e0:	431c      	orrs	r4, r3
   196e2:	6014      	str	r4, [r2, #0]
}
   196e4:	e7e0      	b.n	196a8 <k_queue_append_list+0x34>
		return -EINVAL;
   196e6:	f06f 0015 	mvn.w	r0, #21
   196ea:	e7f4      	b.n	196d6 <k_queue_append_list+0x62>

000196ec <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   196ec:	b15a      	cbz	r2, 19706 <z_impl_k_sem_init+0x1a>
   196ee:	428a      	cmp	r2, r1
   196f0:	d309      	bcc.n	19706 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   196f2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   196f6:	e9c0 1202 	strd	r1, r2, [r0, #8]
   196fa:	e9c0 0000 	strd	r0, r0, [r0]
   196fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   19702:	2000      	movs	r0, #0
   19704:	4770      	bx	lr
		return -EINVAL;
   19706:	f06f 0015 	mvn.w	r0, #21
}
   1970a:	4770      	bx	lr

0001970c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1970c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1970e:	2301      	movs	r3, #1
   19710:	408b      	lsls	r3, r1
   19712:	ea22 0303 	bic.w	r3, r2, r3
   19716:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   19718:	fa22 f001 	lsr.w	r0, r2, r1
}
   1971c:	f000 0001 	and.w	r0, r0, #1
   19720:	4770      	bx	lr

00019722 <unschedule_locked>:
{
   19722:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   19724:	2103      	movs	r1, #3
{
   19726:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   19728:	300c      	adds	r0, #12
   1972a:	f7ff ffef 	bl	1970c <flag_test_and_clear>
   1972e:	4604      	mov	r4, r0
   19730:	b118      	cbz	r0, 1973a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   19732:	f105 0010 	add.w	r0, r5, #16
   19736:	f000 f9d1 	bl	19adc <z_abort_timeout>
}
   1973a:	4620      	mov	r0, r4
   1973c:	bd38      	pop	{r3, r4, r5, pc}

0001973e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1973e:	b120      	cbz	r0, 1974a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   19740:	2200      	movs	r2, #0
   19742:	4611      	mov	r1, r2
   19744:	3088      	adds	r0, #136	; 0x88
   19746:	f000 b9ac 	b.w	19aa2 <z_sched_wake>
}
   1974a:	4770      	bx	lr

0001974c <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1974c:	68c3      	ldr	r3, [r0, #12]
{
   1974e:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19750:	f3c3 0540 	ubfx	r5, r3, #1, #1
   19754:	079b      	lsls	r3, r3, #30
{
   19756:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19758:	d416      	bmi.n	19788 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1975a:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1975c:	2102      	movs	r1, #2
   1975e:	300c      	adds	r0, #12
   19760:	f7ff ffd4 	bl	1970c <flag_test_and_clear>
   19764:	b180      	cbz	r0, 19788 <cancel_async_locked+0x3c>
	return list->head;
   19766:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1976a:	b16a      	cbz	r2, 19788 <cancel_async_locked+0x3c>
   1976c:	4294      	cmp	r4, r2
   1976e:	d11b      	bne.n	197a8 <cancel_async_locked+0x5c>
	return node->next;
   19770:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   19772:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   19776:	b98d      	cbnz	r5, 1979c <cancel_async_locked+0x50>
   19778:	428c      	cmp	r4, r1
	list->head = node;
   1977a:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1977e:	d101      	bne.n	19784 <cancel_async_locked+0x38>
	list->tail = node;
   19780:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   19784:	2300      	movs	r3, #0
   19786:	6023      	str	r3, [r4, #0]
	return *flagp;
   19788:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1978a:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1978e:	bf1e      	ittt	ne
   19790:	f043 0302 	orrne.w	r3, r3, #2
   19794:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   19796:	f003 000f 	andne.w	r0, r3, #15
}
   1979a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1979c:	428c      	cmp	r4, r1
	parent->next = child;
   1979e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   197a0:	bf08      	it	eq
   197a2:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   197a6:	e7ed      	b.n	19784 <cancel_async_locked+0x38>
	return node->next;
   197a8:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   197aa:	6812      	ldr	r2, [r2, #0]
   197ac:	e7dd      	b.n	1976a <cancel_async_locked+0x1e>

000197ae <work_timeout>:
{
   197ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   197b0:	4604      	mov	r4, r0
   197b2:	f04f 0320 	mov.w	r3, #32
   197b6:	f3ef 8511 	mrs	r5, BASEPRI
   197ba:	f383 8812 	msr	BASEPRI_MAX, r3
   197be:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   197c2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   197c4:	f1a0 0610 	sub.w	r6, r0, #16
   197c8:	2103      	movs	r1, #3
   197ca:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   197cc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   197ce:	f7ff ff9d 	bl	1970c <flag_test_and_clear>
   197d2:	b128      	cbz	r0, 197e0 <work_timeout+0x32>
		queue = dw->queue;
   197d4:	69a3      	ldr	r3, [r4, #24]
   197d6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   197d8:	a901      	add	r1, sp, #4
   197da:	4630      	mov	r0, r6
   197dc:	f7fb fc1a 	bl	15014 <submit_to_queue_locked>
	__asm__ volatile(
   197e0:	f385 8811 	msr	BASEPRI, r5
   197e4:	f3bf 8f6f 	isb	sy
}
   197e8:	b002      	add	sp, #8
   197ea:	bd70      	pop	{r4, r5, r6, pc}

000197ec <k_work_init>:
{
   197ec:	b538      	push	{r3, r4, r5, lr}
   197ee:	4604      	mov	r4, r0
   197f0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   197f2:	2210      	movs	r2, #16
   197f4:	2100      	movs	r1, #0
   197f6:	f7fd f807 	bl	16808 <memset>
   197fa:	6065      	str	r5, [r4, #4]
}
   197fc:	bd38      	pop	{r3, r4, r5, pc}

000197fe <k_work_busy_get>:
	__asm__ volatile(
   197fe:	f04f 0220 	mov.w	r2, #32
   19802:	f3ef 8311 	mrs	r3, BASEPRI
   19806:	f382 8812 	msr	BASEPRI_MAX, r2
   1980a:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1980e:	68c0      	ldr	r0, [r0, #12]
   19810:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   19814:	f383 8811 	msr	BASEPRI, r3
   19818:	f3bf 8f6f 	isb	sy
}
   1981c:	4770      	bx	lr

0001981e <z_work_submit_to_queue>:
{
   1981e:	b513      	push	{r0, r1, r4, lr}
   19820:	9001      	str	r0, [sp, #4]
   19822:	4608      	mov	r0, r1
	__asm__ volatile(
   19824:	f04f 0320 	mov.w	r3, #32
   19828:	f3ef 8411 	mrs	r4, BASEPRI
   1982c:	f383 8812 	msr	BASEPRI_MAX, r3
   19830:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   19834:	a901      	add	r1, sp, #4
   19836:	f7fb fbed 	bl	15014 <submit_to_queue_locked>
	__asm__ volatile(
   1983a:	f384 8811 	msr	BASEPRI, r4
   1983e:	f3bf 8f6f 	isb	sy
}
   19842:	b002      	add	sp, #8
   19844:	bd10      	pop	{r4, pc}

00019846 <k_work_submit_to_queue>:
{
   19846:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   19848:	f7ff ffe9 	bl	1981e <z_work_submit_to_queue>
	if (ret > 0) {
   1984c:	1e04      	subs	r4, r0, #0
   1984e:	dd09      	ble.n	19864 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   19850:	f04f 0320 	mov.w	r3, #32
   19854:	f3ef 8011 	mrs	r0, BASEPRI
   19858:	f383 8812 	msr	BASEPRI_MAX, r3
   1985c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   19860:	f000 f87f 	bl	19962 <z_reschedule_irqlock>
}
   19864:	4620      	mov	r0, r4
   19866:	bd10      	pop	{r4, pc}

00019868 <k_work_init_delayable>:
{
   19868:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1986a:	2230      	movs	r2, #48	; 0x30
{
   1986c:	4604      	mov	r4, r0
   1986e:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   19870:	2100      	movs	r1, #0
   19872:	f7fc ffc9 	bl	16808 <memset>
   19876:	f44f 7380 	mov.w	r3, #256	; 0x100
   1987a:	6065      	str	r5, [r4, #4]
   1987c:	60e3      	str	r3, [r4, #12]
}
   1987e:	bd38      	pop	{r3, r4, r5, pc}

00019880 <k_work_delayable_busy_get>:
   19880:	f7ff bfbd 	b.w	197fe <k_work_busy_get>

00019884 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   19884:	b538      	push	{r3, r4, r5, lr}
   19886:	4604      	mov	r4, r0
   19888:	f04f 0320 	mov.w	r3, #32
   1988c:	f3ef 8511 	mrs	r5, BASEPRI
   19890:	f383 8812 	msr	BASEPRI_MAX, r3
   19894:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   19898:	f7ff ff43 	bl	19722 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1989c:	4620      	mov	r0, r4
   1989e:	f7ff ff55 	bl	1974c <cancel_async_locked>
	__asm__ volatile(
   198a2:	f385 8811 	msr	BASEPRI, r5
   198a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   198aa:	bd38      	pop	{r3, r4, r5, pc}

000198ac <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   198ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198ae:	4604      	mov	r4, r0
   198b0:	460d      	mov	r5, r1
	__asm__ volatile(
   198b2:	f04f 0320 	mov.w	r3, #32
   198b6:	f3ef 8711 	mrs	r7, BASEPRI
   198ba:	f383 8812 	msr	BASEPRI_MAX, r3
   198be:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   198c2:	68c3      	ldr	r3, [r0, #12]
   198c4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   198c8:	2b00      	cmp	r3, #0
   198ca:	bf14      	ite	ne
   198cc:	2601      	movne	r6, #1
   198ce:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   198d0:	d009      	beq.n	198e6 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   198d2:	f7ff ff26 	bl	19722 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   198d6:	4620      	mov	r0, r4
   198d8:	f7ff ff38 	bl	1974c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   198dc:	4629      	mov	r1, r5
   198de:	4620      	mov	r0, r4
   198e0:	f7fb fb7a 	bl	14fd8 <cancel_sync_locked>
   198e4:	4603      	mov	r3, r0
	__asm__ volatile(
   198e6:	f387 8811 	msr	BASEPRI, r7
   198ea:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   198ee:	b13b      	cbz	r3, 19900 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   198f0:	f04f 32ff 	mov.w	r2, #4294967295
   198f4:	f04f 33ff 	mov.w	r3, #4294967295
   198f8:	f105 0008 	add.w	r0, r5, #8
   198fc:	f7fb fa94 	bl	14e28 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   19900:	4630      	mov	r0, r6
   19902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019904 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   19904:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19908:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1990a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1990c:	2300      	movs	r3, #0
	node->prev = NULL;
   1990e:	e9c0 3300 	strd	r3, r3, [r0]
}
   19912:	4770      	bx	lr

00019914 <unpend_thread_no_timeout>:
{
   19914:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   19916:	f7ff fff5 	bl	19904 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1991a:	7b43      	ldrb	r3, [r0, #13]
   1991c:	f023 0302 	bic.w	r3, r3, #2
   19920:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   19922:	2300      	movs	r3, #0
   19924:	6083      	str	r3, [r0, #8]
}
   19926:	bd08      	pop	{r3, pc}

00019928 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   19928:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1992c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   19930:	4283      	cmp	r3, r0
		return b2 - b1;
   19932:	bf14      	ite	ne
   19934:	1ac0      	subne	r0, r0, r3
	return 0;
   19936:	2000      	moveq	r0, #0
}
   19938:	4770      	bx	lr

0001993a <z_unpend_thread>:
{
   1993a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1993c:	f04f 0320 	mov.w	r3, #32
   19940:	f3ef 8411 	mrs	r4, BASEPRI
   19944:	f383 8812 	msr	BASEPRI_MAX, r3
   19948:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1994c:	f7ff ffe2 	bl	19914 <unpend_thread_no_timeout>
	__asm__ volatile(
   19950:	f384 8811 	msr	BASEPRI, r4
   19954:	f3bf 8f6f 	isb	sy
}
   19958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1995c:	3018      	adds	r0, #24
   1995e:	f000 b8bd 	b.w	19adc <z_abort_timeout>

00019962 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19962:	4603      	mov	r3, r0
   19964:	b920      	cbnz	r0, 19970 <z_reschedule_irqlock+0xe>
   19966:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1996a:	b90a      	cbnz	r2, 19970 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1996c:	f7ea bafe 	b.w	3f6c <arch_swap>
   19970:	f383 8811 	msr	BASEPRI, r3
   19974:	f3bf 8f6f 	isb	sy
}
   19978:	4770      	bx	lr

0001997a <z_reschedule_unlocked>:
	__asm__ volatile(
   1997a:	f04f 0320 	mov.w	r3, #32
   1997e:	f3ef 8011 	mrs	r0, BASEPRI
   19982:	f383 8812 	msr	BASEPRI_MAX, r3
   19986:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1998a:	f7ff bfea 	b.w	19962 <z_reschedule_irqlock>

0001998e <z_priq_dumb_best>:
{
   1998e:	4603      	mov	r3, r0
	return list->head == list;
   19990:	6800      	ldr	r0, [r0, #0]
}
   19992:	4283      	cmp	r3, r0
   19994:	bf08      	it	eq
   19996:	2000      	moveq	r0, #0
   19998:	4770      	bx	lr

0001999a <z_ready_thread>:
{
   1999a:	b510      	push	{r4, lr}
   1999c:	f04f 0320 	mov.w	r3, #32
   199a0:	f3ef 8411 	mrs	r4, BASEPRI
   199a4:	f383 8812 	msr	BASEPRI_MAX, r3
   199a8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   199ac:	f7fb fd2c 	bl	15408 <ready_thread>
	__asm__ volatile(
   199b0:	f384 8811 	msr	BASEPRI, r4
   199b4:	f3bf 8f6f 	isb	sy
}
   199b8:	bd10      	pop	{r4, pc}

000199ba <z_thread_timeout>:
{
   199ba:	b510      	push	{r4, lr}
   199bc:	4601      	mov	r1, r0
	__asm__ volatile(
   199be:	f04f 0320 	mov.w	r3, #32
   199c2:	f3ef 8411 	mrs	r4, BASEPRI
   199c6:	f383 8812 	msr	BASEPRI_MAX, r3
   199ca:	f3bf 8f6f 	isb	sy
		if (!killed) {
   199ce:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   199d2:	f013 0f28 	tst.w	r3, #40	; 0x28
   199d6:	d10d      	bne.n	199f4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   199d8:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   199dc:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   199de:	b10b      	cbz	r3, 199e4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   199e0:	f7ff ff98 	bl	19914 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   199e4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   199e8:	f023 0314 	bic.w	r3, r3, #20
   199ec:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   199f0:	f7fb fd0a 	bl	15408 <ready_thread>
	__asm__ volatile(
   199f4:	f384 8811 	msr	BASEPRI, r4
   199f8:	f3bf 8f6f 	isb	sy
}
   199fc:	bd10      	pop	{r4, pc}

000199fe <add_to_waitq_locked>:
{
   199fe:	b538      	push	{r3, r4, r5, lr}
   19a00:	4604      	mov	r4, r0
   19a02:	460d      	mov	r5, r1
	unready_thread(thread);
   19a04:	f7fb fd54 	bl	154b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   19a08:	7b63      	ldrb	r3, [r4, #13]
   19a0a:	f043 0302 	orr.w	r3, r3, #2
   19a0e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   19a10:	b195      	cbz	r5, 19a38 <add_to_waitq_locked+0x3a>
   19a12:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   19a14:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a16:	429d      	cmp	r5, r3
   19a18:	d015      	beq.n	19a46 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19a1a:	b1a3      	cbz	r3, 19a46 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   19a1c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   19a20:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   19a24:	4291      	cmp	r1, r2
   19a26:	d008      	beq.n	19a3a <add_to_waitq_locked+0x3c>
		return b2 - b1;
   19a28:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   19a2a:	2a00      	cmp	r2, #0
   19a2c:	dd05      	ble.n	19a3a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   19a2e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19a30:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19a34:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19a36:	605c      	str	r4, [r3, #4]
}
   19a38:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   19a3a:	686a      	ldr	r2, [r5, #4]
   19a3c:	4293      	cmp	r3, r2
   19a3e:	d002      	beq.n	19a46 <add_to_waitq_locked+0x48>
   19a40:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19a42:	2b00      	cmp	r3, #0
   19a44:	d1ec      	bne.n	19a20 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   19a46:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   19a48:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   19a4c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19a4e:	606c      	str	r4, [r5, #4]
}
   19a50:	e7f2      	b.n	19a38 <add_to_waitq_locked+0x3a>

00019a52 <z_unpend_first_thread>:
{
   19a52:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19a54:	f04f 0320 	mov.w	r3, #32
   19a58:	f3ef 8511 	mrs	r5, BASEPRI
   19a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   19a60:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   19a64:	f7ff ff93 	bl	1998e <z_priq_dumb_best>
		if (thread != NULL) {
   19a68:	4604      	mov	r4, r0
   19a6a:	b120      	cbz	r0, 19a76 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   19a6c:	f7ff ff52 	bl	19914 <unpend_thread_no_timeout>
   19a70:	3018      	adds	r0, #24
   19a72:	f000 f833 	bl	19adc <z_abort_timeout>
	__asm__ volatile(
   19a76:	f385 8811 	msr	BASEPRI, r5
   19a7a:	f3bf 8f6f 	isb	sy
}
   19a7e:	4620      	mov	r0, r4
   19a80:	bd38      	pop	{r3, r4, r5, pc}

00019a82 <z_unpend_all>:
{
   19a82:	b538      	push	{r3, r4, r5, lr}
   19a84:	4605      	mov	r5, r0
	int need_sched = 0;
   19a86:	2000      	movs	r0, #0
	return list->head == list;
   19a88:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a8a:	42a5      	cmp	r5, r4
   19a8c:	d000      	beq.n	19a90 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   19a8e:	b904      	cbnz	r4, 19a92 <z_unpend_all+0x10>
}
   19a90:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   19a92:	4620      	mov	r0, r4
   19a94:	f7ff ff51 	bl	1993a <z_unpend_thread>
		z_ready_thread(thread);
   19a98:	4620      	mov	r0, r4
   19a9a:	f7ff ff7e 	bl	1999a <z_ready_thread>
		need_sched = 1;
   19a9e:	2001      	movs	r0, #1
   19aa0:	e7f2      	b.n	19a88 <z_unpend_all+0x6>

00019aa2 <z_sched_wake>:
{
   19aa2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19aa4:	f04f 0320 	mov.w	r3, #32
   19aa8:	f3ef 8511 	mrs	r5, BASEPRI
   19aac:	f383 8812 	msr	BASEPRI_MAX, r3
   19ab0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   19ab4:	f7ff ff6b 	bl	1998e <z_priq_dumb_best>
		if (thread != NULL) {
   19ab8:	4604      	mov	r4, r0
   19aba:	b150      	cbz	r0, 19ad2 <z_sched_wake+0x30>
   19abc:	67c1      	str	r1, [r0, #124]	; 0x7c
   19abe:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   19ac0:	f7ff ff28 	bl	19914 <unpend_thread_no_timeout>
   19ac4:	3018      	adds	r0, #24
   19ac6:	f000 f809 	bl	19adc <z_abort_timeout>
			ready_thread(thread);
   19aca:	4620      	mov	r0, r4
   19acc:	f7fb fc9c 	bl	15408 <ready_thread>
			ret = true;
   19ad0:	2001      	movs	r0, #1
	__asm__ volatile(
   19ad2:	f385 8811 	msr	BASEPRI, r5
   19ad6:	f3bf 8f6f 	isb	sy
}
   19ada:	bd38      	pop	{r3, r4, r5, pc}

00019adc <z_abort_timeout>:
{
   19adc:	b510      	push	{r4, lr}
	__asm__ volatile(
   19ade:	f04f 0220 	mov.w	r2, #32
   19ae2:	f3ef 8411 	mrs	r4, BASEPRI
   19ae6:	f382 8812 	msr	BASEPRI_MAX, r2
   19aea:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   19aee:	6803      	ldr	r3, [r0, #0]
   19af0:	b13b      	cbz	r3, 19b02 <z_abort_timeout+0x26>
			remove_timeout(to);
   19af2:	f7fb feed 	bl	158d0 <remove_timeout>
			ret = 0;
   19af6:	2000      	movs	r0, #0
	__asm__ volatile(
   19af8:	f384 8811 	msr	BASEPRI, r4
   19afc:	f3bf 8f6f 	isb	sy
}
   19b00:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   19b02:	f06f 0015 	mvn.w	r0, #21
   19b06:	e7f7      	b.n	19af8 <z_abort_timeout+0x1c>

00019b08 <z_get_next_timeout_expiry>:
{
   19b08:	b510      	push	{r4, lr}
	__asm__ volatile(
   19b0a:	f04f 0320 	mov.w	r3, #32
   19b0e:	f3ef 8411 	mrs	r4, BASEPRI
   19b12:	f383 8812 	msr	BASEPRI_MAX, r3
   19b16:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   19b1a:	f7fb feb3 	bl	15884 <next_timeout>
	__asm__ volatile(
   19b1e:	f384 8811 	msr	BASEPRI, r4
   19b22:	f3bf 8f6f 	isb	sy
}
   19b26:	bd10      	pop	{r4, pc}

00019b28 <z_set_timeout_expiry>:
{
   19b28:	b570      	push	{r4, r5, r6, lr}
   19b2a:	4604      	mov	r4, r0
   19b2c:	460d      	mov	r5, r1
	__asm__ volatile(
   19b2e:	f04f 0320 	mov.w	r3, #32
   19b32:	f3ef 8611 	mrs	r6, BASEPRI
   19b36:	f383 8812 	msr	BASEPRI_MAX, r3
   19b3a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   19b3e:	f7fb fea1 	bl	15884 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   19b42:	2801      	cmp	r0, #1
   19b44:	dd05      	ble.n	19b52 <z_set_timeout_expiry+0x2a>
   19b46:	42a0      	cmp	r0, r4
   19b48:	db03      	blt.n	19b52 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   19b4a:	4629      	mov	r1, r5
   19b4c:	4620      	mov	r0, r4
   19b4e:	f7fa f8c9 	bl	13ce4 <sys_clock_set_timeout>
	__asm__ volatile(
   19b52:	f386 8811 	msr	BASEPRI, r6
   19b56:	f3bf 8f6f 	isb	sy
}
   19b5a:	bd70      	pop	{r4, r5, r6, pc}

00019b5c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   19b5c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   19b5e:	f7fb ffa7 	bl	15ab0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   19b62:	bd08      	pop	{r3, pc}

00019b64 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   19b64:	b108      	cbz	r0, 19b6a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   19b66:	f7ea bd01 	b.w	456c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   19b6a:	4770      	bx	lr

00019b6c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19b6c:	f1b1 3fff 	cmp.w	r1, #4294967295
   19b70:	bf08      	it	eq
   19b72:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   19b76:	b538      	push	{r3, r4, r5, lr}
   19b78:	4605      	mov	r5, r0
   19b7a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19b7c:	d01d      	beq.n	19bba <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19b7e:	ea51 0300 	orrs.w	r3, r1, r0
   19b82:	d103      	bne.n	19b8c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   19b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   19b88:	f7fb bf92 	b.w	15ab0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   19b8c:	f06f 0301 	mvn.w	r3, #1
   19b90:	1a18      	subs	r0, r3, r0
   19b92:	f04f 33ff 	mov.w	r3, #4294967295
   19b96:	eb63 0101 	sbc.w	r1, r3, r1
   19b9a:	2900      	cmp	r1, #0
   19b9c:	da0c      	bge.n	19bb8 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   19b9e:	f7fb ff87 	bl	15ab0 <sys_clock_tick_get>
   19ba2:	2d01      	cmp	r5, #1
   19ba4:	4622      	mov	r2, r4
   19ba6:	f174 0400 	sbcs.w	r4, r4, #0
   19baa:	462b      	mov	r3, r5
   19bac:	bfbc      	itt	lt
   19bae:	2301      	movlt	r3, #1
   19bb0:	2200      	movlt	r2, #0
   19bb2:	1818      	adds	r0, r3, r0
   19bb4:	eb41 0102 	adc.w	r1, r1, r2
}
   19bb8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   19bba:	f04f 30ff 	mov.w	r0, #4294967295
   19bbe:	4601      	mov	r1, r0
   19bc0:	e7fa      	b.n	19bb8 <sys_clock_timeout_end_calc+0x4c>

00019bc2 <add_event>:
{
   19bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bc4:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   19bc6:	e9d0 1300 	ldrd	r1, r3, [r0]
   19bca:	4288      	cmp	r0, r1
   19bcc:	4604      	mov	r4, r0
   19bce:	d00d      	beq.n	19bec <add_event+0x2a>
	if ((pending == NULL) ||
   19bd0:	b163      	cbz	r3, 19bec <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   19bd2:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   19bd4:	b100      	cbz	r0, 19bd8 <add_event+0x16>
   19bd6:	3860      	subs	r0, #96	; 0x60
   19bd8:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   19bdc:	4639      	mov	r1, r7
   19bde:	f7ff fea3 	bl	19928 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   19be2:	2800      	cmp	r0, #0
   19be4:	dc02      	bgt.n	19bec <add_event+0x2a>
	return list->head == list;
   19be6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19be8:	42b4      	cmp	r4, r6
   19bea:	d109      	bne.n	19c00 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   19bec:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   19bee:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   19bf2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   19bf4:	6065      	str	r5, [r4, #4]
}
   19bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   19bf8:	6863      	ldr	r3, [r4, #4]
   19bfa:	42b3      	cmp	r3, r6
   19bfc:	d0f6      	beq.n	19bec <add_event+0x2a>
   19bfe:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   19c00:	2e00      	cmp	r6, #0
   19c02:	d0f3      	beq.n	19bec <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   19c04:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   19c06:	b101      	cbz	r1, 19c0a <add_event+0x48>
   19c08:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   19c0a:	4638      	mov	r0, r7
   19c0c:	f7ff fe8c 	bl	19928 <z_sched_prio_cmp>
   19c10:	2800      	cmp	r0, #0
   19c12:	ddf1      	ble.n	19bf8 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   19c14:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   19c16:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   19c1a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   19c1c:	6075      	str	r5, [r6, #4]
			return;
   19c1e:	e7ea      	b.n	19bf6 <add_event+0x34>

00019c20 <register_events>:
{
   19c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   19c24:	2500      	movs	r5, #0
{
   19c26:	468b      	mov	fp, r1
   19c28:	4614      	mov	r4, r2
   19c2a:	461f      	mov	r7, r3
   19c2c:	4682      	mov	sl, r0
	int events_registered = 0;
   19c2e:	462e      	mov	r6, r5
	event->poller = NULL;
   19c30:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   19c32:	455d      	cmp	r5, fp
   19c34:	db02      	blt.n	19c3c <register_events+0x1c>
}
   19c36:	4630      	mov	r0, r6
   19c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   19c3c:	f04f 0320 	mov.w	r3, #32
   19c40:	f3ef 8911 	mrs	r9, BASEPRI
   19c44:	f383 8812 	msr	BASEPRI_MAX, r3
   19c48:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   19c4c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   19c50:	f003 031f 	and.w	r3, r3, #31
   19c54:	3b01      	subs	r3, #1
   19c56:	2b07      	cmp	r3, #7
   19c58:	d80f      	bhi.n	19c7a <register_events+0x5a>
   19c5a:	e8df f003 	tbb	[pc, r3]
   19c5e:	041e      	.short	0x041e
   19c60:	0e0e0a0e 	.word	0x0e0e0a0e
   19c64:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   19c66:	f8da 3010 	ldr.w	r3, [sl, #16]
   19c6a:	689b      	ldr	r3, [r3, #8]
   19c6c:	b12b      	cbz	r3, 19c7a <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19c6e:	2302      	movs	r3, #2
   19c70:	e020      	b.n	19cb4 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   19c72:	f8da 3010 	ldr.w	r3, [sl, #16]
   19c76:	681b      	ldr	r3, [r3, #0]
   19c78:	bb8b      	cbnz	r3, 19cde <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   19c7a:	bb47      	cbnz	r7, 19cce <register_events+0xae>
   19c7c:	7823      	ldrb	r3, [r4, #0]
   19c7e:	b333      	cbz	r3, 19cce <register_events+0xae>
	switch (event->type) {
   19c80:	f89a 300d 	ldrb.w	r3, [sl, #13]
   19c84:	f003 031f 	and.w	r3, r3, #31
   19c88:	3b01      	subs	r3, #1
   19c8a:	2b07      	cmp	r3, #7
   19c8c:	d830      	bhi.n	19cf0 <register_events+0xd0>
   19c8e:	e8df f003 	tbb	[pc, r3]
   19c92:	2833      	.short	0x2833
   19c94:	2f2f282f 	.word	0x2f2f282f
   19c98:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   19c9a:	f8da 3010 	ldr.w	r3, [sl, #16]
   19c9e:	689b      	ldr	r3, [r3, #8]
   19ca0:	2b00      	cmp	r3, #0
   19ca2:	d0ea      	beq.n	19c7a <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   19ca4:	2301      	movs	r3, #1
   19ca6:	e005      	b.n	19cb4 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   19ca8:	f8da 3010 	ldr.w	r3, [sl, #16]
   19cac:	6a1b      	ldr	r3, [r3, #32]
   19cae:	2b00      	cmp	r3, #0
   19cb0:	d0e3      	beq.n	19c7a <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   19cb2:	2310      	movs	r3, #16
	event->state |= state;
   19cb4:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   19cb8:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   19cbc:	f3c2 3145 	ubfx	r1, r2, #13, #6
   19cc0:	430b      	orrs	r3, r1
   19cc2:	f363 3252 	bfi	r2, r3, #13, #6
   19cc6:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   19cca:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   19cce:	f389 8811 	msr	BASEPRI, r9
   19cd2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19cd6:	3501      	adds	r5, #1
   19cd8:	f10a 0a14 	add.w	sl, sl, #20
   19cdc:	e7a9      	b.n	19c32 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   19cde:	2304      	movs	r3, #4
   19ce0:	e7e8      	b.n	19cb4 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   19ce2:	f8da 0010 	ldr.w	r0, [sl, #16]
   19ce6:	4622      	mov	r2, r4
   19ce8:	4651      	mov	r1, sl
   19cea:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   19cec:	f7ff ff69 	bl	19bc2 <add_event>
	event->poller = poller;
   19cf0:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   19cf4:	3601      	adds	r6, #1
   19cf6:	e7ea      	b.n	19cce <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   19cf8:	f8da 0010 	ldr.w	r0, [sl, #16]
   19cfc:	4622      	mov	r2, r4
   19cfe:	4651      	mov	r1, sl
   19d00:	e7f4      	b.n	19cec <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   19d02:	f8da 0010 	ldr.w	r0, [sl, #16]
   19d06:	4622      	mov	r2, r4
   19d08:	4651      	mov	r1, sl
   19d0a:	3024      	adds	r0, #36	; 0x24
   19d0c:	e7ee      	b.n	19cec <register_events+0xcc>

00019d0e <signal_poll_event>:
{
   19d0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   19d12:	6884      	ldr	r4, [r0, #8]
{
   19d14:	4605      	mov	r5, r0
   19d16:	460e      	mov	r6, r1
	if (poller != NULL) {
   19d18:	b144      	cbz	r4, 19d2c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   19d1a:	7863      	ldrb	r3, [r4, #1]
   19d1c:	2b01      	cmp	r3, #1
   19d1e:	d136      	bne.n	19d8e <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   19d20:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   19d24:	f013 0302 	ands.w	r3, r3, #2
   19d28:	d10a      	bne.n	19d40 <signal_poll_event+0x32>
		poller->is_polling = false;
   19d2a:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   19d2c:	68eb      	ldr	r3, [r5, #12]
   19d2e:	f3c3 3145 	ubfx	r1, r3, #13, #6
   19d32:	430e      	orrs	r6, r1
	event->poller = NULL;
   19d34:	2000      	movs	r0, #0
	event->state |= state;
   19d36:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   19d3a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   19d3c:	60eb      	str	r3, [r5, #12]
	return retcode;
   19d3e:	e00b      	b.n	19d58 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   19d40:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   19d44:	f1b3 3fff 	cmp.w	r3, #4294967295
   19d48:	bf08      	it	eq
   19d4a:	f112 0f02 	cmneq.w	r2, #2
   19d4e:	d105      	bne.n	19d5c <signal_poll_event+0x4e>
		poller->is_polling = false;
   19d50:	2300      	movs	r3, #0
   19d52:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   19d54:	f06f 000a 	mvn.w	r0, #10
}
   19d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   19d5c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   19d60:	4640      	mov	r0, r8
   19d62:	f7ff fdea 	bl	1993a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   19d66:	2e08      	cmp	r6, #8
   19d68:	bf0c      	ite	eq
   19d6a:	f06f 0303 	mvneq.w	r3, #3
   19d6e:	2300      	movne	r3, #0
   19d70:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19d72:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   19d76:	06db      	lsls	r3, r3, #27
   19d78:	d102      	bne.n	19d80 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   19d7a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   19d7e:	b10f      	cbz	r7, 19d84 <signal_poll_event+0x76>
		poller->is_polling = false;
   19d80:	2300      	movs	r3, #0
   19d82:	e7d2      	b.n	19d2a <signal_poll_event+0x1c>
	z_ready_thread(thread);
   19d84:	4640      	mov	r0, r8
   19d86:	f7ff fe08 	bl	1999a <z_ready_thread>
		poller->is_polling = false;
   19d8a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   19d8c:	e7ce      	b.n	19d2c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   19d8e:	2b02      	cmp	r3, #2
   19d90:	d1f6      	bne.n	19d80 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   19d92:	7823      	ldrb	r3, [r4, #0]
   19d94:	2b00      	cmp	r3, #0
   19d96:	d0c9      	beq.n	19d2c <signal_poll_event+0x1e>
   19d98:	f854 7c04 	ldr.w	r7, [r4, #-4]
   19d9c:	2f00      	cmp	r7, #0
   19d9e:	d0f4      	beq.n	19d8a <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   19da0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   19da4:	f1a4 0914 	sub.w	r9, r4, #20
   19da8:	f104 0014 	add.w	r0, r4, #20
   19dac:	f7ff fe96 	bl	19adc <z_abort_timeout>
		twork->poll_result = 0;
   19db0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   19db4:	4649      	mov	r1, r9
   19db6:	4638      	mov	r0, r7
   19db8:	f7ff fd31 	bl	1981e <z_work_submit_to_queue>
		poller->is_polling = false;
   19dbc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   19dc0:	e7b4      	b.n	19d2c <signal_poll_event+0x1e>

00019dc2 <clear_event_registrations>:
	while (num_events--) {
   19dc2:	2314      	movs	r3, #20
{
   19dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dc6:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   19dca:	2400      	movs	r4, #0
   19dcc:	2601      	movs	r6, #1
	while (num_events--) {
   19dce:	b901      	cbnz	r1, 19dd2 <clear_event_registrations+0x10>
}
   19dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   19dd2:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   19dd6:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   19dda:	f003 031f 	and.w	r3, r3, #31
   19dde:	2b08      	cmp	r3, #8
   19de0:	f1a0 0714 	sub.w	r7, r0, #20
   19de4:	d80d      	bhi.n	19e02 <clear_event_registrations+0x40>
   19de6:	fa06 f303 	lsl.w	r3, r6, r3
   19dea:	f413 7f8b 	tst.w	r3, #278	; 0x116
   19dee:	d008      	beq.n	19e02 <clear_event_registrations+0x40>
	return node->next != NULL;
   19df0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   19df4:	b12b      	cbz	r3, 19e02 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   19df6:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   19dfa:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   19dfc:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   19dfe:	e940 4405 	strd	r4, r4, [r0, #-20]
   19e02:	f382 8811 	msr	BASEPRI, r2
   19e06:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19e0a:	f04f 0320 	mov.w	r3, #32
   19e0e:	f3ef 8211 	mrs	r2, BASEPRI
   19e12:	f383 8812 	msr	BASEPRI_MAX, r3
   19e16:	f3bf 8f6f 	isb	sy
   19e1a:	3901      	subs	r1, #1
   19e1c:	4638      	mov	r0, r7
   19e1e:	e7d6      	b.n	19dce <clear_event_registrations+0xc>

00019e20 <k_poll_event_init>:
{
   19e20:	b510      	push	{r4, lr}
	event->type = type;
   19e22:	04d2      	lsls	r2, r2, #19
   19e24:	0209      	lsls	r1, r1, #8
   19e26:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   19e2a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   19e2e:	430a      	orrs	r2, r1
   19e30:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   19e32:	2400      	movs	r4, #0
	event->type = type;
   19e34:	430a      	orrs	r2, r1
	event->obj = obj;
   19e36:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   19e3a:	6084      	str	r4, [r0, #8]
}
   19e3c:	bd10      	pop	{r4, pc}

00019e3e <z_handle_obj_poll_events>:
{
   19e3e:	4603      	mov	r3, r0
	return list->head == list;
   19e40:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   19e42:	4283      	cmp	r3, r0
   19e44:	d008      	beq.n	19e58 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   19e46:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19e4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19e4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19e4e:	2300      	movs	r3, #0
	node->prev = NULL;
   19e50:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   19e54:	f7ff bf5b 	b.w	19d0e <signal_poll_event>
}
   19e58:	4770      	bx	lr

00019e5a <k_free>:
	if (ptr != NULL) {
   19e5a:	b120      	cbz	r0, 19e66 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   19e5c:	1f01      	subs	r1, r0, #4
   19e5e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   19e62:	f7ff bb1e 	b.w	194a2 <k_heap_free>
}
   19e66:	4770      	bx	lr

00019e68 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   19e68:	f7f9 bfd4 	b.w	13e14 <SystemInit>
